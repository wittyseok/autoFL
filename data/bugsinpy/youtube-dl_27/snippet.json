[
    {
        "name": "youtube_dl.extractor.nytimes.NYTimesBaseIE._extract_video_from_id#12",
        "src_path": "youtube_dl/extractor/nytimes.py",
        "class_name": "youtube_dl.extractor.nytimes.NYTimesBaseIE",
        "signature": "youtube_dl.extractor.nytimes.NYTimesBaseIE._extract_video_from_id(self, video_id)",
        "snippet": "    def _extract_video_from_id(self, video_id):\n        video_data = self._download_json(\n            'http://www.nytimes.com/svc/video/api/v2/video/%s' % video_id,\n            video_id, 'Downloading video JSON')\n\n        title = video_data['headline']\n        description = video_data.get('summary')\n        duration = float_or_none(video_data.get('duration'), 1000)\n\n        uploader = video_data['byline']\n        timestamp = parse_iso8601(video_data['publication_date'][:-8])\n\n        def get_file_size(file_size):\n            if isinstance(file_size, int):\n                return file_size\n            elif isinstance(file_size, dict):\n                return int(file_size.get('value', 0))\n            else:\n                return 0\n\n        formats = [\n            {\n                'url': video['url'],\n                'format_id': video.get('type'),\n                'vcodec': video.get('video_codec'),\n                'width': int_or_none(video.get('width')),\n                'height': int_or_none(video.get('height')),\n                'filesize': get_file_size(video.get('fileSize')),\n            } for video in video_data['renditions']\n        ]\n        self._sort_formats(formats)\n\n        thumbnails = [\n            {\n                'url': 'http://www.nytimes.com/%s' % image['url'],\n                'width': int_or_none(image.get('width')),\n                'height': int_or_none(image.get('height')),\n            } for image in video_data['images']\n        ]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'duration': duration,\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }",
        "begin_line": 12,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008130081300813008,
            "pseudo_dstar_susp": 0.0007942811755361397,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007942811755361397,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youporn.YouPornIE._real_extract#61",
        "src_path": "youtube_dl/extractor/youporn.py",
        "class_name": "youtube_dl.extractor.youporn.YouPornIE",
        "signature": "youtube_dl.extractor.youporn.YouPornIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        request = sanitized_Request(url)\n        request.add_header('Cookie', 'age_verified=1')\n        webpage = self._download_webpage(request, display_id)\n\n        title = self._search_regex(\n            [r'(?:video_titles|videoTitle)\\s*[:=]\\s*([\"\\'])(?P<title>.+?)\\1',\n             r'<h1[^>]+class=[\"\\']heading\\d?[\"\\'][^>]*>([^<])<'],\n            webpage, 'title', group='title')\n\n        links = []\n\n        sources = self._search_regex(\n            r'sources\\s*:\\s*({.+?})', webpage, 'sources', default=None)\n        if sources:\n            for _, link in re.findall(r'[^:]+\\s*:\\s*([\"\\'])(http.+?)\\1', sources):\n                links.append(link)\n\n        # Fallback #1\n        for _, link in re.findall(\n                r'(?:videoUrl|videoSrc|videoIpadUrl|html5PlayerSrc)\\s*[:=]\\s*([\"\\'])(http.+?)\\1', webpage):\n            links.append(link)\n\n        # Fallback #2, this also contains extra low quality 180p format\n        for _, link in re.findall(r'<a[^>]+href=([\"\\'])(http.+?)\\1[^>]+title=[\"\\']Download [Vv]ideo', webpage):\n            links.append(link)\n\n        # Fallback #3, encrypted links\n        for _, encrypted_link in re.findall(\n                r'encryptedQuality\\d{3,4}URL\\s*=\\s*([\"\\'])([\\da-zA-Z+/=]+)\\1', webpage):\n            links.append(aes_decrypt_text(encrypted_link, title, 32).decode('utf-8'))\n\n        formats = []\n        for video_url in set(unescapeHTML(link) for link in links):\n            f = {\n                'url': video_url,\n            }\n            # Video URL's path looks like this:\n            #  /201012/17/505835/720p_1500k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4\n            # We will benefit from it by extracting some metadata\n            mobj = re.search(r'/(?P<height>\\d{3,4})[pP]_(?P<bitrate>\\d+)[kK]_\\d+/', video_url)\n            if mobj:\n                height = int(mobj.group('height'))\n                bitrate = int(mobj.group('bitrate'))\n                f.update({\n                    'format_id': '%dp-%dk' % (height, bitrate),\n                    'height': height,\n                    'tbr': bitrate,\n                })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        description = self._html_search_regex(\n            r'(?s)<div[^>]+class=[\"\\']video-description[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'description', default=None)\n        thumbnail = self._search_regex(\n            r'(?:imageurl\\s*=|poster\\s*:)\\s*([\"\\'])(?P<thumbnail>.+?)\\1',\n            webpage, 'thumbnail', fatal=False, group='thumbnail')\n\n        uploader = self._html_search_regex(\n            r'(?s)<div[^>]+class=[\"\\']videoInfoBy[\"\\'][^>]*>\\s*By:\\s*</div>(.+?)</(?:a|div)>',\n            webpage, 'uploader', fatal=False)\n        upload_date = unified_strdate(self._html_search_regex(\n            r'(?s)<div[^>]+class=[\"\\']videoInfoTime[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'upload date', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        average_rating = int_or_none(self._search_regex(\n            r'<div[^>]+class=[\"\\']videoInfoRating[\"\\'][^>]*>\\s*<div[^>]+class=[\"\\']videoRatingPercentage[\"\\'][^>]*>(\\d+)%</div>',\n            webpage, 'average rating', fatal=False))\n\n        view_count = str_to_int(self._search_regex(\n            r'(?s)<div[^>]+class=[\"\\']videoInfoViews[\"\\'][^>]*>.*?([\\d,.]+)\\s*</div>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._search_regex(\n            r'>All [Cc]omments? \\(([\\d,.]+)\\)',\n            webpage, 'comment count', fatal=False))\n\n        def extract_tag_box(title):\n            tag_box = self._search_regex(\n                (r'<div[^>]+class=[\"\\']tagBoxTitle[\"\\'][^>]*>\\s*%s\\b.*?</div>\\s*'\n                 '<div[^>]+class=[\"\\']tagBoxContent[\"\\']>(.+?)</div>') % re.escape(title),\n                webpage, '%s tag box' % title, default=None)\n            if not tag_box:\n                return []\n            return re.findall(r'<a[^>]+href=[^>]+>([^<]+)', tag_box)\n\n        categories = extract_tag_box('Category')\n        tags = extract_tag_box('Tags')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'average_rating': average_rating,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'tags': tags,\n            'age_limit': age_limit,\n            'formats': formats,\n        }",
        "begin_line": 61,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_connection#207",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_connection(self, connection, programme_id)",
        "snippet": "    def _extract_connection(self, connection, programme_id):\n        formats = []\n        kind = connection.get('kind')\n        protocol = connection.get('protocol')\n        supplier = connection.get('supplier')\n        if protocol == 'http':\n            href = connection.get('href')\n            transfer_format = connection.get('transferFormat')\n            # ASX playlist\n            if supplier == 'asx':\n                for i, ref in enumerate(self._extract_asx_playlist(connection, programme_id)):\n                    formats.append({\n                        'url': ref,\n                        'format_id': 'ref%s_%s' % (i, supplier),\n                    })\n            # Skip DASH until supported\n            elif transfer_format == 'dash':\n                pass\n            elif transfer_format == 'hls':\n                m3u8_formats = self._extract_m3u8_formats(\n                    href, programme_id, ext='mp4', entry_protocol='m3u8_native',\n                    m3u8_id=supplier, fatal=False)\n                if m3u8_formats:\n                    formats.extend(m3u8_formats)\n            # Direct link\n            else:\n                formats.append({\n                    'url': href,\n                    'format_id': supplier or kind or protocol,\n                })\n        elif protocol == 'rtmp':\n            application = connection.get('application', 'ondemand')\n            auth_string = connection.get('authString')\n            identifier = connection.get('identifier')\n            server = connection.get('server')\n            formats.append({\n                'url': '%s://%s/%s?%s' % (protocol, server, application, auth_string),\n                'play_path': identifier,\n                'app': '%s?%s' % (application, auth_string),\n                'page_url': 'http://www.bbc.co.uk',\n                'player_url': 'http://www.bbc.co.uk/emp/releases/iplayer/revisions/617463_618125_4/617463_618125_4_emp.swf',\n                'rtmp_live': False,\n                'ext': 'flv',\n                'format_id': supplier,\n            })\n        return formats",
        "begin_line": 207,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0033444816053511705,
            "pseudo_dstar_susp": 0.0033333333333333335,
            "pseudo_tarantula_susp": 0.0010695187165775401,
            "pseudo_op2_susp": 0.0033333333333333335,
            "pseudo_barinel_susp": 0.0010695187165775401
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._findall_ns#257",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._findall_ns(self, element, xpath)",
        "snippet": "    def _findall_ns(self, element, xpath):\n        elements = []\n        for ns in self._NAMESPACES:\n            elements.extend(element.findall(xpath % ns))\n        return elements",
        "begin_line": 257,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007598784194528875,
            "pseudo_dstar_susp": 0.0007390983000739098,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007390983000739098,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_medias#263",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_medias(self, media_selection)",
        "snippet": "    def _extract_medias(self, media_selection):\n        error = media_selection.find('./{%s}error' % self._MEDIASELECTION_NS)\n        if error is None:\n            media_selection.find('./{%s}error' % self._EMP_PLAYLIST_NS)\n        if error is not None:\n            raise BBCCoUkIE.MediaSelectionError(error.get('id'))\n        return self._findall_ns(media_selection, './{%s}media')",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007598784194528875,
            "pseudo_dstar_susp": 0.0007390983000739098,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.0007390983000739098,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_video#274",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_video(self, media, programme_id)",
        "snippet": "    def _extract_video(self, media, programme_id):\n        formats = []\n        vbr = int_or_none(media.get('bitrate'))\n        vcodec = media.get('encoding')\n        service = media.get('service')\n        width = int_or_none(media.get('width'))\n        height = int_or_none(media.get('height'))\n        file_size = int_or_none(media.get('media_file_size'))\n        for connection in self._extract_connections(media):\n            conn_formats = self._extract_connection(connection, programme_id)\n            for format in conn_formats:\n                format.update({\n                    'width': width,\n                    'height': height,\n                    'vbr': vbr,\n                    'vcodec': vcodec,\n                    'filesize': file_size,\n                })\n                if service:\n                    format['format_id'] = '%s_%s' % (service, format['format_id'])\n            formats.extend(conn_formats)\n        return formats",
        "begin_line": 274,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000676132521974307,
            "pseudo_dstar_susp": 0.0006523157208088715,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.0006523157208088715,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_audio#297",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._extract_audio(self, media, programme_id)",
        "snippet": "    def _extract_audio(self, media, programme_id):\n        formats = []\n        abr = int_or_none(media.get('bitrate'))\n        acodec = media.get('encoding')\n        service = media.get('service')\n        for connection in self._extract_connections(media):\n            conn_formats = self._extract_connection(connection, programme_id)\n            for format in conn_formats:\n                format.update({\n                    'format_id': '%s_%s' % (service, format['format_id']),\n                    'abr': abr,\n                    'acodec': acodec,\n                })\n            formats.extend(conn_formats)\n        return formats",
        "begin_line": 297,
        "end_line": 311,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._download_media_selector#331",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._download_media_selector(self, programme_id)",
        "snippet": "    def _download_media_selector(self, programme_id):\n        last_exception = None\n        for mediaselector_url in self._MEDIASELECTOR_URLS:\n            try:\n                return self._download_media_selector_url(\n                    mediaselector_url % programme_id, programme_id)\n            except BBCCoUkIE.MediaSelectionError as e:\n                if e.id in ('notukerror', 'geolocation', 'selectionunavailable'):\n                    last_exception = e\n                    continue\n                self._raise_extractor_error(e)\n        self._raise_extractor_error(last_exception)",
        "begin_line": 331,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._download_media_selector_url#344",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._download_media_selector_url(self, url, programme_id=None)",
        "snippet": "    def _download_media_selector_url(self, url, programme_id=None):\n        try:\n            media_selection = self._download_xml(\n                url, programme_id, 'Downloading media selection XML')\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError) and ee.cause.code in (403, 404):\n                media_selection = compat_etree_fromstring(ee.cause.read().decode('utf-8'))\n            else:\n                raise\n        return self._process_media_selector(media_selection, programme_id)",
        "begin_line": 344,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007598784194528875,
            "pseudo_dstar_susp": 0.0007390983000739098,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.0007390983000739098,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._process_media_selector#355",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._process_media_selector(self, media_selection, programme_id)",
        "snippet": "    def _process_media_selector(self, media_selection, programme_id):\n        formats = []\n        subtitles = None\n\n        for media in self._extract_medias(media_selection):\n            kind = media.get('kind')\n            if kind == 'audio':\n                formats.extend(self._extract_audio(media, programme_id))\n            elif kind == 'video':\n                formats.extend(self._extract_video(media, programme_id))\n            elif kind == 'captions':\n                subtitles = self.extract_subtitles(media, programme_id)\n        return formats, subtitles",
        "begin_line": 355,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007598784194528875,
            "pseudo_dstar_susp": 0.0007390983000739098,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.0007390983000739098,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._download_playlist#369",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._download_playlist(self, playlist_id)",
        "snippet": "    def _download_playlist(self, playlist_id):\n        try:\n            playlist = self._download_json(\n                'http://www.bbc.co.uk/programmes/%s/playlist.json' % playlist_id,\n                playlist_id, 'Downloading playlist JSON')\n\n            version = playlist.get('defaultAvailableVersion')\n            if version:\n                smp_config = version['smpConfig']\n                title = smp_config['title']\n                description = smp_config['summary']\n                for item in smp_config['items']:\n                    kind = item['kind']\n                    if kind != 'programme' and kind != 'radioProgramme':\n                        continue\n                    programme_id = item.get('vpid')\n                    duration = int_or_none(item.get('duration'))\n                    formats, subtitles = self._download_media_selector(programme_id)\n                return programme_id, title, description, duration, formats, subtitles\n        except ExtractorError as ee:\n            if not (isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 404):\n                raise\n\n        # fallback to legacy playlist\n        return self._process_legacy_playlist(playlist_id)",
        "begin_line": 369,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007733952049497294,
            "pseudo_dstar_susp": 0.0007496251874062968,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._process_legacy_playlist#399",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._process_legacy_playlist(self, playlist_id)",
        "snippet": "    def _process_legacy_playlist(self, playlist_id):\n        return self._process_legacy_playlist_url(\n            'http://www.bbc.co.uk/iplayer/playlist/%s' % playlist_id, playlist_id)",
        "begin_line": 399,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._download_legacy_playlist_url#403",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._download_legacy_playlist_url(self, url, playlist_id=None)",
        "snippet": "    def _download_legacy_playlist_url(self, url, playlist_id=None):\n        return self._download_xml(\n            url, playlist_id, 'Downloading legacy playlist XML')",
        "begin_line": 403,
        "end_line": 405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkIE._real_extract#451",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        group_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, group_id, 'Downloading video page')\n\n        programme_id = None\n        duration = None\n\n        tviplayer = self._search_regex(\n            r'mediator\\.bind\\(({.+?})\\s*,\\s*document\\.getElementById',\n            webpage, 'player', default=None)\n\n        if tviplayer:\n            player = self._parse_json(tviplayer, group_id).get('player', {})\n            duration = int_or_none(player.get('duration'))\n            programme_id = player.get('vpid')\n\n        if not programme_id:\n            programme_id = self._search_regex(\n                r'\"vpid\"\\s*:\\s*\"(%s)\"' % self._ID_REGEX, webpage, 'vpid', fatal=False, default=None)\n\n        if programme_id:\n            formats, subtitles = self._download_media_selector(programme_id)\n            title = self._og_search_title(webpage)\n            description = self._search_regex(\n                r'<p class=\"[^\"]*medium-description[^\"]*\">([^<]+)</p>',\n                webpage, 'description', default=None)\n            if not description:\n                description = self._html_search_meta('description', webpage)\n        else:\n            programme_id, title, description, duration, formats, subtitles = self._download_playlist(group_id)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': programme_id,\n            'title': title,\n            'description': description,\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }",
        "begin_line": 451,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007733952049497294,
            "pseudo_dstar_susp": 0.0007496251874062968,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCIE.suitable#661",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCIE",
        "signature": "youtube_dl.extractor.bbc.BBCIE.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        return False if BBCCoUkIE.suitable(url) or BBCCoUkArticleIE.suitable(url) else super(BBCIE, cls).suitable(url)",
        "begin_line": 661,
        "end_line": 662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0006285355122564425,
            "pseudo_tarantula_susp": 0.000468384074941452,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000468384074941452
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCIE._real_extract#705",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCIE",
        "signature": "youtube_dl.extractor.bbc.BBCIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        timestamp = None\n        playlist_title = None\n        playlist_description = None\n\n        ld = self._parse_json(\n            self._search_regex(\n                r'(?s)<script type=\"application/ld\\+json\">(.+?)</script>',\n                webpage, 'ld json', default='{}'),\n            playlist_id, fatal=False)\n        if ld:\n            timestamp = parse_iso8601(ld.get('datePublished'))\n            playlist_title = ld.get('headline')\n            playlist_description = ld.get('articleBody')\n\n        if not timestamp:\n            timestamp = parse_iso8601(self._search_regex(\n                [r'<meta[^>]+property=\"article:published_time\"[^>]+content=\"([^\"]+)\"',\n                 r'itemprop=\"datePublished\"[^>]+datetime=\"([^\"]+)\"',\n                 r'\"datePublished\":\\s*\"([^\"]+)'],\n                webpage, 'date', default=None))\n\n        entries = []\n\n        # article with multiple videos embedded with playlist.sxml (e.g.\n        # http://www.bbc.com/sport/0/football/34475836)\n        playlists = re.findall(r'<param[^>]+name=\"playlist\"[^>]+value=\"([^\"]+)\"', webpage)\n        playlists.extend(re.findall(r'data-media-id=\"([^\"]+/playlist\\.sxml)\"', webpage))\n        if playlists:\n            entries = [\n                self._extract_from_playlist_sxml(playlist_url, playlist_id, timestamp)\n                for playlist_url in playlists]\n\n        # news article with multiple videos embedded with data-playable\n        data_playables = re.findall(r'data-playable=([\"\\'])({.+?})\\1', webpage)\n        if data_playables:\n            for _, data_playable_json in data_playables:\n                data_playable = self._parse_json(\n                    unescapeHTML(data_playable_json), playlist_id, fatal=False)\n                if not data_playable:\n                    continue\n                settings = data_playable.get('settings', {})\n                if settings:\n                    # data-playable with video vpid in settings.playlistObject.items (e.g.\n                    # http://www.bbc.com/news/world-us-canada-34473351)\n                    playlist_object = settings.get('playlistObject', {})\n                    if playlist_object:\n                        items = playlist_object.get('items')\n                        if items and isinstance(items, list):\n                            title = playlist_object['title']\n                            description = playlist_object.get('summary')\n                            duration = int_or_none(items[0].get('duration'))\n                            programme_id = items[0].get('vpid')\n                            formats, subtitles = self._download_media_selector(programme_id)\n                            self._sort_formats(formats)\n                            entries.append({\n                                'id': programme_id,\n                                'title': title,\n                                'description': description,\n                                'timestamp': timestamp,\n                                'duration': duration,\n                                'formats': formats,\n                                'subtitles': subtitles,\n                            })\n                    else:\n                        # data-playable without vpid but with a playlist.sxml URLs\n                        # in otherSettings.playlist (e.g.\n                        # http://www.bbc.com/turkce/multimedya/2015/10/151010_vid_ankara_patlama_ani)\n                        playlist = data_playable.get('otherSettings', {}).get('playlist', {})\n                        if playlist:\n                            entries.append(self._extract_from_playlist_sxml(\n                                playlist.get('progressiveDownloadUrl'), playlist_id, timestamp))\n\n        if entries:\n            playlist_title = playlist_title or remove_end(self._og_search_title(webpage), ' - BBC News')\n            playlist_description = playlist_description or self._og_search_description(webpage, default=None)\n            return self.playlist_result(entries, playlist_id, playlist_title, playlist_description)\n\n        # single video story (e.g. http://www.bbc.com/travel/story/20150625-sri-lankas-spicy-secret)\n        programme_id = self._search_regex(\n            [r'data-video-player-vpid=\"(%s)\"' % self._ID_REGEX,\n             r'<param[^>]+name=\"externalIdentifier\"[^>]+value=\"(%s)\"' % self._ID_REGEX,\n             r'videoId\\s*:\\s*[\"\\'](%s)[\"\\']' % self._ID_REGEX],\n            webpage, 'vpid', default=None)\n\n        if programme_id:\n            formats, subtitles = self._download_media_selector(programme_id)\n            self._sort_formats(formats)\n            # digitalData may be missing (e.g. http://www.bbc.com/autos/story/20130513-hyundais-rock-star)\n            digital_data = self._parse_json(\n                self._search_regex(\n                    r'var\\s+digitalData\\s*=\\s*({.+?});?\\n', webpage, 'digital data', default='{}'),\n                programme_id, fatal=False)\n            page_info = digital_data.get('page', {}).get('pageInfo', {})\n            title = page_info.get('pageName') or self._og_search_title(webpage)\n            description = page_info.get('description') or self._og_search_description(webpage)\n            timestamp = parse_iso8601(page_info.get('publicationDate')) or timestamp\n            return {\n                'id': programme_id,\n                'title': title,\n                'description': description,\n                'timestamp': timestamp,\n                'formats': formats,\n                'subtitles': subtitles,\n            }\n\n        playlist_title = self._html_search_regex(\n            r'<title>(.*?)(?:\\s*-\\s*BBC [^ ]+)?</title>', webpage, 'playlist title')\n        playlist_description = self._og_search_description(webpage, default=None)\n\n        def extract_all(pattern):\n            return list(filter(None, map(\n                lambda s: self._parse_json(s, playlist_id, fatal=False),\n                re.findall(pattern, webpage))))\n\n        # Multiple video article (e.g.\n        # http://www.bbc.co.uk/blogs/adamcurtis/entries/3662a707-0af9-3149-963f-47bea720b460)\n        EMBED_URL = r'https?://(?:www\\.)?bbc\\.co\\.uk/(?:[^/]+/)+%s(?:\\b[^\"]+)?' % self._ID_REGEX\n        entries = []\n        for match in extract_all(r'new\\s+SMP\\(({.+?})\\)'):\n            embed_url = match.get('playerSettings', {}).get('externalEmbedUrl')\n            if embed_url and re.match(EMBED_URL, embed_url):\n                entries.append(embed_url)\n        entries.extend(re.findall(\n            r'setPlaylist\\(\"(%s)\"\\)' % EMBED_URL, webpage))\n        if entries:\n            return self.playlist_result(\n                [self.url_result(entry, 'BBCCoUk') for entry in entries],\n                playlist_id, playlist_title, playlist_description)\n\n        # Multiple video article (e.g. http://www.bbc.com/news/world-europe-32668511)\n        medias = extract_all(r\"data-media-meta='({[^']+})'\")\n\n        if not medias:\n            # Single video article (e.g. http://www.bbc.com/news/video_and_audio/international)\n            media_asset = self._search_regex(\n                r'mediaAssetPage\\.init\\(\\s*({.+?}), \"/',\n                webpage, 'media asset', default=None)\n            if media_asset:\n                media_asset_page = self._parse_json(media_asset, playlist_id, fatal=False)\n                medias = []\n                for video in media_asset_page.get('videos', {}).values():\n                    medias.extend(video.values())\n\n        if not medias:\n            # Multiple video playlist with single `now playing` entry (e.g.\n            # http://www.bbc.com/news/video_and_audio/must_see/33767813)\n            vxp_playlist = self._parse_json(\n                self._search_regex(\n                    r'<script[^>]+class=\"vxp-playlist-data\"[^>]+type=\"application/json\"[^>]*>([^<]+)</script>',\n                    webpage, 'playlist data'),\n                playlist_id)\n            playlist_medias = []\n            for item in vxp_playlist:\n                media = item.get('media')\n                if not media:\n                    continue\n                playlist_medias.append(media)\n                # Download single video if found media with asset id matching the video id from URL\n                if item.get('advert', {}).get('assetId') == playlist_id:\n                    medias = [media]\n                    break\n            # Fallback to the whole playlist\n            if not medias:\n                medias = playlist_medias\n\n        entries = []\n        for num, media_meta in enumerate(medias, start=1):\n            formats, subtitles = self._extract_from_media_meta(media_meta, playlist_id)\n            if not formats:\n                continue\n            self._sort_formats(formats)\n\n            video_id = media_meta.get('externalId')\n            if not video_id:\n                video_id = playlist_id if len(medias) == 1 else '%s-%s' % (playlist_id, num)\n\n            title = media_meta.get('caption')\n            if not title:\n                title = playlist_title if len(medias) == 1 else '%s - Video %s' % (playlist_title, num)\n\n            duration = int_or_none(media_meta.get('durationInSeconds')) or parse_duration(media_meta.get('duration'))\n\n            images = []\n            for image in media_meta.get('images', {}).values():\n                images.extend(image.values())\n            if 'image' in media_meta:\n                images.append(media_meta['image'])\n\n            thumbnails = [{\n                'url': image.get('href'),\n                'width': int_or_none(image.get('width')),\n                'height': int_or_none(image.get('height')),\n            } for image in images]\n\n            entries.append({\n                'id': video_id,\n                'title': title,\n                'thumbnails': thumbnails,\n                'duration': duration,\n                'timestamp': timestamp,\n                'formats': formats,\n                'subtitles': subtitles,\n            })\n\n        return self.playlist_result(entries, playlist_id, playlist_title, playlist_description)",
        "begin_line": 705,
        "end_line": 914,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001059322033898305,
            "pseudo_dstar_susp": 0.0008710801393728223,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008710801393728223,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.bbc.BBCCoUkArticleIE._real_extract#933",
        "src_path": "youtube_dl/extractor/bbc.py",
        "class_name": "youtube_dl.extractor.bbc.BBCCoUkArticleIE",
        "signature": "youtube_dl.extractor.bbc.BBCCoUkArticleIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage).strip()\n\n        entries = [self.url_result(programme_url) for programme_url in re.findall(\n            r'<div[^>]+typeof=\"Clip\"[^>]+resource=\"([^\"]+)\"', webpage)]\n\n        return self.playlist_result(entries, playlist_id, title, description)",
        "begin_line": 933,
        "end_line": 944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.pornhub.PornHubIE._extract_url#43",
        "src_path": "youtube_dl/extractor/pornhub.py",
        "class_name": "youtube_dl.extractor.pornhub.PornHubIE",
        "signature": "youtube_dl.extractor.pornhub.PornHubIE._extract_url(cls, webpage)",
        "snippet": "    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?pornhub\\.com/embed/\\d+)\\1', webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.__init__#55",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.__init__(self, ydl, params)",
        "snippet": "    def __init__(self, ydl, params):\n        \"\"\"Create a FileDownloader object with the given options.\"\"\"\n        self.ydl = ydl\n        self._progress_hooks = []\n        self.params = params\n        self.add_progress_hook(self.report_progress)",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.format_seconds#63",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.format_seconds(seconds)",
        "snippet": "    def format_seconds(seconds):\n        (mins, secs) = divmod(seconds, 60)\n        (hours, mins) = divmod(mins, 60)\n        if hours > 99:\n            return '--:--:--'\n        if hours == 0:\n            return '%02d:%02d' % (mins, secs)\n        else:\n            return '%02d:%02d:%02d' % (hours, mins, secs)",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0029154518950437317,
            "pseudo_dstar_susp": 0.002770083102493075,
            "pseudo_tarantula_susp": 0.0009532888465204957,
            "pseudo_op2_susp": 0.002770083102493075,
            "pseudo_barinel_susp": 0.0009532888465204957
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.format_percent#80",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.format_percent(percent)",
        "snippet": "    def format_percent(percent):\n        if percent is None:\n            return '---.-%'\n        return '%6s' % ('%3.1f%%' % percent)",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002631578947368421,
            "pseudo_dstar_susp": 0.0026595744680851063,
            "pseudo_tarantula_susp": 0.0008496176720475786,
            "pseudo_op2_susp": 0.0026595744680851063,
            "pseudo_barinel_susp": 0.0008496176720475786
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.calc_eta#86",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.calc_eta(start, now, total, current)",
        "snippet": "    def calc_eta(start, now, total, current):\n        if total is None:\n            return None\n        if now is None:\n            now = time.time()\n        dif = now - start\n        if current == 0 or dif < 0.001:  # One millisecond\n            return None\n        rate = float(current) / dif\n        return int((float(total) - float(current)) / rate)",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002976190476190476,
            "pseudo_dstar_susp": 0.003236245954692557,
            "pseudo_tarantula_susp": 0.0008673026886383347,
            "pseudo_op2_susp": 0.003236245954692557,
            "pseudo_barinel_susp": 0.0008673026886383347
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.format_eta#98",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.format_eta(eta)",
        "snippet": "    def format_eta(eta):\n        if eta is None:\n            return '--:--'\n        return FileDownloader.format_seconds(eta)",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.002325581395348837,
            "pseudo_tarantula_susp": 0.0007501875468867217,
            "pseudo_op2_susp": 0.002325581395348837,
            "pseudo_barinel_susp": 0.0007501875468867217
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.calc_speed#104",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.calc_speed(start, now, bytes)",
        "snippet": "    def calc_speed(start, now, bytes):\n        dif = now - start\n        if bytes == 0 or dif < 0.001:  # One millisecond\n            return None\n        return float(bytes) / dif",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002849002849002849,
            "pseudo_dstar_susp": 0.0029069767441860465,
            "pseudo_tarantula_susp": 0.0007710100231303007,
            "pseudo_op2_susp": 0.0029069767441860465,
            "pseudo_barinel_susp": 0.0007710100231303007
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.format_speed#111",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.format_speed(speed)",
        "snippet": "    def format_speed(speed):\n        if speed is None:\n            return '%10s' % '---b/s'\n        return '%10s' % ('%s/s' % format_bytes(speed))",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002967359050445104,
            "pseudo_dstar_susp": 0.003215434083601286,
            "pseudo_tarantula_susp": 0.0006016847172081829,
            "pseudo_op2_susp": 0.003215434083601286,
            "pseudo_barinel_susp": 0.0006016847172081829
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.best_block_size#117",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.best_block_size(elapsed_time, bytes)",
        "snippet": "    def best_block_size(elapsed_time, bytes):\n        new_min = max(bytes / 2.0, 1.0)\n        new_max = min(max(bytes * 2.0, 1.0), 4194304)  # Do not surpass 4 MB\n        if elapsed_time < 0.001:\n            return int(new_max)\n        rate = bytes / elapsed_time\n        if rate > new_max:\n            return int(new_max)\n        if rate < new_min:\n            return int(new_min)\n        return int(rate)",
        "begin_line": 117,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024154589371980675,
            "pseudo_dstar_susp": 0.0026041666666666665,
            "pseudo_tarantula_susp": 0.0006138735420503376,
            "pseudo_op2_susp": 0.0026041666666666665,
            "pseudo_barinel_susp": 0.0006138735420503376
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.to_screen#139",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.to_screen(self, *args, **kargs)",
        "snippet": "    def to_screen(self, *args, **kargs):\n        self.ydl.to_screen(*args, **kargs)",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.to_console_title#145",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.to_console_title(self, message)",
        "snippet": "    def to_console_title(self, message):\n        self.ydl.to_console_title(message)",
        "begin_line": 145,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001358695652173913,
            "pseudo_dstar_susp": 0.002070393374741201,
            "pseudo_tarantula_susp": 0.0005672149744753262,
            "pseudo_op2_susp": 0.002070393374741201,
            "pseudo_barinel_susp": 0.0005672149744753262
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.slow_down#157",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.slow_down(self, start_time, now, byte_counter)",
        "snippet": "    def slow_down(self, start_time, now, byte_counter):\n        \"\"\"Sleep if the download speed is over the rate limit.\"\"\"\n        rate_limit = self.params.get('ratelimit', None)\n        if rate_limit is None or byte_counter == 0:\n            return\n        if now is None:\n            now = time.time()\n        elapsed = now - start_time\n        if elapsed <= 0.0:\n            return\n        speed = float(byte_counter) / elapsed\n        if speed > rate_limit:\n            time.sleep(max((byte_counter // rate_limit) - elapsed, 0))",
        "begin_line": 157,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030120481927710845,
            "pseudo_dstar_susp": 0.0032258064516129032,
            "pseudo_tarantula_susp": 0.0007022471910112359,
            "pseudo_op2_susp": 0.0032258064516129032,
            "pseudo_barinel_susp": 0.0007022471910112359
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.temp_name#171",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.temp_name(self, filename)",
        "snippet": "    def temp_name(self, filename):\n        \"\"\"Returns a temporary filename for the given filename.\"\"\"\n        if self.params.get('nopart', False) or filename == '-' or \\\n                (os.path.exists(encodeFilename(filename)) and not os.path.isfile(encodeFilename(filename))):\n            return filename\n        return filename + '.part'",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030303030303030303,
            "pseudo_dstar_susp": 0.003048780487804878,
            "pseudo_tarantula_susp": 0.0008952551477170994,
            "pseudo_op2_susp": 0.003048780487804878,
            "pseudo_barinel_susp": 0.0008952551477170994
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.undo_temp_name#178",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.undo_temp_name(self, filename)",
        "snippet": "    def undo_temp_name(self, filename):\n        if filename.endswith('.part'):\n            return filename[:-len('.part')]\n        return filename",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.try_rename#183",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.try_rename(self, old_filename, new_filename)",
        "snippet": "    def try_rename(self, old_filename, new_filename):\n        try:\n            if old_filename == new_filename:\n                return\n            os.rename(encodeFilename(old_filename), encodeFilename(new_filename))\n        except (IOError, OSError) as err:\n            self.report_error('unable to rename file: %s' % compat_str(err))",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027548209366391185,
            "pseudo_dstar_susp": 0.002890173410404624,
            "pseudo_tarantula_susp": 0.0007936507936507937,
            "pseudo_op2_susp": 0.002890173410404624,
            "pseudo_barinel_susp": 0.0007936507936507937
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.try_utime#191",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.try_utime(self, filename, last_modified_hdr)",
        "snippet": "    def try_utime(self, filename, last_modified_hdr):\n        \"\"\"Try to set the last-modified time of the given file.\"\"\"\n        if last_modified_hdr is None:\n            return\n        if not os.path.isfile(encodeFilename(filename)):\n            return\n        timestr = last_modified_hdr\n        if timestr is None:\n            return\n        filetime = timeconvert(timestr)\n        if filetime is None:\n            return filetime\n        # Ignore obviously invalid dates\n        if filetime == 0:\n            return\n        try:\n            os.utime(filename, (time.time(), filetime))\n        except Exception:\n            pass\n        return filetime",
        "begin_line": 191,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0026595744680851063,
            "pseudo_dstar_susp": 0.0029154518950437317,
            "pseudo_tarantula_susp": 0.0007867820613690008,
            "pseudo_op2_susp": 0.0029154518950437317,
            "pseudo_barinel_susp": 0.0007867820613690008
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.report_destination#212",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.report_destination(self, filename)",
        "snippet": "    def report_destination(self, filename):\n        \"\"\"Report destination filename.\"\"\"\n        self.to_screen('[download] Destination: ' + filename)",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00234192037470726,
            "pseudo_dstar_susp": 0.0024390243902439024,
            "pseudo_tarantula_susp": 0.0006997900629811056,
            "pseudo_op2_susp": 0.0024390243902439024,
            "pseudo_barinel_susp": 0.0006997900629811056
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader._report_progress_status#216",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader._report_progress_status(self, msg, is_last_line=False)",
        "snippet": "    def _report_progress_status(self, msg, is_last_line=False):\n        fullmsg = '[download] ' + msg\n        if self.params.get('progress_with_newline', False):\n            self.to_screen(fullmsg)\n        else:\n            if os.name == 'nt':\n                prev_len = getattr(self, '_report_progress_prev_line_length',\n                                   0)\n                if prev_len > len(fullmsg):\n                    fullmsg += ' ' * (prev_len - len(fullmsg))\n                self._report_progress_prev_line_length = len(fullmsg)\n                clear_line = '\\r'\n            else:\n                clear_line = ('\\r\\x1b[K' if sys.stderr.isatty() else '\\r')\n            self.to_screen(clear_line + fullmsg, skip_eol=not is_last_line)\n        self.to_console_title('youtube-dl ' + msg)",
        "begin_line": 216,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002793296089385475,
            "pseudo_dstar_susp": 0.0030120481927710845,
            "pseudo_tarantula_susp": 0.000700770847932726,
            "pseudo_op2_susp": 0.0030120481927710845,
            "pseudo_barinel_susp": 0.000700770847932726
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.report_progress#233",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.report_progress(self, s)",
        "snippet": "    def report_progress(self, s):\n        if s['status'] == 'finished':\n            if self.params.get('noprogress', False):\n                self.to_screen('[download] Download completed')\n            else:\n                s['_total_bytes_str'] = format_bytes(s['total_bytes'])\n                if s.get('elapsed') is not None:\n                    s['_elapsed_str'] = self.format_seconds(s['elapsed'])\n                    msg_template = '100%% of %(_total_bytes_str)s in %(_elapsed_str)s'\n                else:\n                    msg_template = '100%% of %(_total_bytes_str)s'\n                self._report_progress_status(\n                    msg_template % s, is_last_line=True)\n\n        if self.params.get('noprogress'):\n            return\n\n        if s['status'] != 'downloading':\n            return\n\n        if s.get('eta') is not None:\n            s['_eta_str'] = self.format_eta(s['eta'])\n        else:\n            s['_eta_str'] = 'Unknown ETA'\n\n        if s.get('total_bytes') and s.get('downloaded_bytes') is not None:\n            s['_percent_str'] = self.format_percent(100 * s['downloaded_bytes'] / s['total_bytes'])\n        elif s.get('total_bytes_estimate') and s.get('downloaded_bytes') is not None:\n            s['_percent_str'] = self.format_percent(100 * s['downloaded_bytes'] / s['total_bytes_estimate'])\n        else:\n            if s.get('downloaded_bytes') == 0:\n                s['_percent_str'] = self.format_percent(0)\n            else:\n                s['_percent_str'] = 'Unknown %'\n\n        if s.get('speed') is not None:\n            s['_speed_str'] = self.format_speed(s['speed'])\n        else:\n            s['_speed_str'] = 'Unknown speed'\n\n        if s.get('total_bytes') is not None:\n            s['_total_bytes_str'] = format_bytes(s['total_bytes'])\n            msg_template = '%(_percent_str)s of %(_total_bytes_str)s at %(_speed_str)s ETA %(_eta_str)s'\n        elif s.get('total_bytes_estimate') is not None:\n            s['_total_bytes_estimate_str'] = format_bytes(s['total_bytes_estimate'])\n            msg_template = '%(_percent_str)s of ~%(_total_bytes_estimate_str)s at %(_speed_str)s ETA %(_eta_str)s'\n        else:\n            if s.get('downloaded_bytes') is not None:\n                s['_downloaded_bytes_str'] = format_bytes(s['downloaded_bytes'])\n                if s.get('elapsed'):\n                    s['_elapsed_str'] = self.format_seconds(s['elapsed'])\n                    msg_template = '%(_downloaded_bytes_str)s at %(_speed_str)s (%(_elapsed_str)s)'\n                else:\n                    msg_template = '%(_downloaded_bytes_str)s at %(_speed_str)s'\n            else:\n                msg_template = '%(_percent_str)s % at %(_speed_str)s ETA %(_eta_str)s'\n\n        self._report_progress_status(msg_template % s)",
        "begin_line": 233,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0029411764705882353,
            "pseudo_dstar_susp": 0.003115264797507788,
            "pseudo_tarantula_susp": 0.0006944444444444445,
            "pseudo_op2_susp": 0.003115264797507788,
            "pseudo_barinel_susp": 0.0006944444444444445
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.download#311",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.download(self, filename, info_dict)",
        "snippet": "    def download(self, filename, info_dict):\n        \"\"\"Download to a filename using the info from info_dict\n        Return True on success and False otherwise\n        \"\"\"\n\n        nooverwrites_and_exists = (\n            self.params.get('nooverwrites', False) and\n            os.path.exists(encodeFilename(filename))\n        )\n\n        continuedl_and_exists = (\n            self.params.get('continuedl', True) and\n            os.path.isfile(encodeFilename(filename)) and\n            not self.params.get('nopart', False)\n        )\n\n        # Check file already present\n        if filename != '-' and (nooverwrites_and_exists or continuedl_and_exists):\n            self.report_file_already_downloaded(filename)\n            self._hook_progress({\n                'filename': filename,\n                'status': 'finished',\n                'total_bytes': os.path.getsize(encodeFilename(filename)),\n            })\n            return True\n\n        sleep_interval = self.params.get('sleep_interval')\n        if sleep_interval:\n            self.to_screen('[download] Sleeping %s seconds...' % sleep_interval)\n            time.sleep(sleep_interval)\n\n        return self.real_download(filename, info_dict)",
        "begin_line": 311,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader._hook_progress#348",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader._hook_progress(self, status)",
        "snippet": "    def _hook_progress(self, status):\n        for ph in self._progress_hooks:\n            ph(status)",
        "begin_line": 348,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.downloader.common.FileDownloader.add_progress_hook#352",
        "src_path": "youtube_dl/downloader/common.py",
        "class_name": "youtube_dl.downloader.common.FileDownloader",
        "signature": "youtube_dl.downloader.common.FileDownloader.add_progress_hook(self, ph)",
        "snippet": "    def add_progress_hook(self, ph):\n        # See YoutubeDl.py (search for progress_hooks) for a description of\n        # this interface\n        self._progress_hooks.append(ph)",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.__init__#279",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.__init__(self, params=None, auto_init=True)",
        "snippet": "    def __init__(self, params=None, auto_init=True):\n        \"\"\"Create a FileDownloader object with the given options.\"\"\"\n        if params is None:\n            params = {}\n        self._ies = []\n        self._ies_instances = {}\n        self._pps = []\n        self._progress_hooks = []\n        self._download_retcode = 0\n        self._num_downloads = 0\n        self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n        self._err_file = sys.stderr\n        self.params = {\n            # Default parameters\n            'nocheckcertificate': False,\n        }\n        self.params.update(params)\n        self.cache = Cache(self)\n\n        if params.get('bidi_workaround', False):\n            try:\n                import pty\n                master, slave = pty.openpty()\n                width = compat_get_terminal_size().columns\n                if width is None:\n                    width_args = []\n                else:\n                    width_args = ['-w', str(width)]\n                sp_kwargs = dict(\n                    stdin=subprocess.PIPE,\n                    stdout=slave,\n                    stderr=self._err_file)\n                try:\n                    self._output_process = subprocess.Popen(\n                        ['bidiv'] + width_args, **sp_kwargs\n                    )\n                except OSError:\n                    self._output_process = subprocess.Popen(\n                        ['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n                self._output_channel = os.fdopen(master, 'rb')\n            except OSError as ose:\n                if ose.errno == 2:\n                    self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n                else:\n                    raise\n\n        if (sys.version_info >= (3,) and sys.platform != 'win32' and\n                sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968'] and\n                not params.get('restrictfilenames', False)):\n            # On Python 3, the Unicode filesystem API will throw errors (#1474)\n            self.report_warning(\n                'Assuming --restrict-filenames since file system encoding '\n                'cannot encode all characters. '\n                'Set the LC_ALL environment variable to fix this.')\n            self.params['restrictfilenames'] = True\n\n        if isinstance(params.get('outtmpl'), bytes):\n            self.report_warning(\n                'Parameter outtmpl is bytes, but should be a unicode string. '\n                'Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n\n        self._setup_opener()\n\n        if auto_init:\n            self.print_debug_header()\n            self.add_default_info_extractors()\n\n        for pp_def_raw in self.params.get('postprocessors', []):\n            pp_class = get_postprocessor(pp_def_raw['key'])\n            pp_def = dict(pp_def_raw)\n            del pp_def['key']\n            pp = pp_class(self, **compat_kwargs(pp_def))\n            self.add_post_processor(pp)\n\n        for ph in self.params.get('progress_hooks', []):\n            self.add_progress_hook(ph)",
        "begin_line": 279,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.013513513513513514,
            "pseudo_dstar_susp": 0.041666666666666664,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.041666666666666664,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.add_info_extractor#372",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.add_info_extractor(self, ie)",
        "snippet": "    def add_info_extractor(self, ie):\n        \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n        self._ies.append(ie)\n        self._ies_instances[ie.ie_key()] = ie\n        ie.set_downloader(self)",
        "begin_line": 372,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.014285714285714285,
            "pseudo_dstar_susp": 0.009523809523809525,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.009523809523809525,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.get_info_extractor#378",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.get_info_extractor(self, ie_key)",
        "snippet": "    def get_info_extractor(self, ie_key):\n        \"\"\"\n        Get an instance of an IE with name ie_key, it will try to get one from\n        the _ies list, if there's no instance it will create a new one and add\n        it to the extractor list.\n        \"\"\"\n        ie = self._ies_instances.get(ie_key)\n        if ie is None:\n            ie = get_info_extractor(ie_key)()\n            self.add_info_extractor(ie)\n        return ie",
        "begin_line": 378,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012515644555694619,
            "pseudo_dstar_susp": 0.0012484394506866417,
            "pseudo_tarantula_susp": 0.0009337068160597573,
            "pseudo_op2_susp": 0.0012484394506866417,
            "pseudo_barinel_susp": 0.0009337068160597573
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.add_default_info_extractors#390",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.add_default_info_extractors(self)",
        "snippet": "    def add_default_info_extractors(self):\n        \"\"\"\n        Add the InfoExtractors returned by gen_extractors to the end of the list\n        \"\"\"\n        for ie in gen_extractors():\n            self.add_info_extractor(ie)",
        "begin_line": 390,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006993006993006993,
            "pseudo_dstar_susp": 0.007575757575757576,
            "pseudo_tarantula_susp": 0.0013404825737265416,
            "pseudo_op2_susp": 0.007575757575757576,
            "pseudo_barinel_susp": 0.0013404825737265416
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.add_post_processor#397",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.add_post_processor(self, pp)",
        "snippet": "    def add_post_processor(self, pp):\n        \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n        self._pps.append(pp)\n        pp.set_downloader(self)",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.add_progress_hook#402",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.add_progress_hook(self, ph)",
        "snippet": "    def add_progress_hook(self, ph):\n        \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n        self._progress_hooks.append(ph)",
        "begin_line": 402,
        "end_line": 404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007042253521126761,
            "pseudo_dstar_susp": 0.006896551724137931,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.006896551724137931,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._bidi_workaround#406",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._bidi_workaround(self, message)",
        "snippet": "    def _bidi_workaround(self, message):\n        if not hasattr(self, '_output_channel'):\n            return message\n\n        assert hasattr(self, '_output_process')\n        assert isinstance(message, compat_str)\n        line_count = message.count('\\n') + 1\n        self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n        self._output_process.stdin.flush()\n        res = ''.join(self._output_channel.readline().decode('utf-8')\n                      for _ in range(line_count))\n        return res[:-len('\\n')]",
        "begin_line": 406,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007246376811594203,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.001524390243902439,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.to_screen#419",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.to_screen(self, message, skip_eol=False)",
        "snippet": "    def to_screen(self, message, skip_eol=False):\n        \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n        return self.to_stdout(message, skip_eol, check_quiet=True)",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007246376811594203,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.001358695652173913,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.001358695652173913
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._write_string#423",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._write_string(self, s, out=None)",
        "snippet": "    def _write_string(self, s, out=None):\n        write_string(s, out=out, encoding=self.params.get('encoding'))",
        "begin_line": 423,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007751937984496124,
            "pseudo_dstar_susp": 0.007633587786259542,
            "pseudo_tarantula_susp": 0.001524390243902439,
            "pseudo_op2_susp": 0.007633587786259542,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.to_stdout#426",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.to_stdout(self, message, skip_eol=False, check_quiet=False)",
        "snippet": "    def to_stdout(self, message, skip_eol=False, check_quiet=False):\n        \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n        if self.params.get('logger'):\n            self.params['logger'].debug(message)\n        elif not check_quiet or not self.params.get('quiet', False):\n            message = self._bidi_workaround(message)\n            terminator = ['\\n', ''][skip_eol]\n            output = message + terminator\n\n            self._write_string(output, self._screen_file)",
        "begin_line": 426,
        "end_line": 435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007246376811594203,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.001358695652173913,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.001358695652173913
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.to_stderr#437",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.to_stderr(self, message)",
        "snippet": "    def to_stderr(self, message):\n        \"\"\"Print message to stderr.\"\"\"\n        assert isinstance(message, compat_str)\n        if self.params.get('logger'):\n            self.params['logger'].error(message)\n        else:\n            message = self._bidi_workaround(message)\n            output = message + '\\n'\n            self._write_string(output, self._err_file)",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007733952049497294,
            "pseudo_dstar_susp": 0.0007496251874062968,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.to_console_title#447",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.to_console_title(self, message)",
        "snippet": "    def to_console_title(self, message):\n        if not self.params.get('consoletitle', False):\n            return\n        if os.name == 'nt' and ctypes.windll.kernel32.GetConsoleWindow():\n            # c_wchar_p() might not be necessary if `message` is\n            # already of type unicode()\n            ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n        elif 'TERM' in os.environ:\n            self._write_string('\\033]0;%s\\007' % message, self._screen_file)",
        "begin_line": 447,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011806375442739079,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0012330456226880395,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.trouble#481",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.trouble(self, message=None, tb=None)",
        "snippet": "    def trouble(self, message=None, tb=None):\n        \"\"\"Determine action to take when a download problem appears.\n\n        Depending on if the downloader has been configured to ignore\n        download errors or not, this method may throw an exception or\n        not when errors are found, after printing the message.\n\n        tb, if given, is additional traceback information.\n        \"\"\"\n        if message is not None:\n            self.to_stderr(message)\n        if self.params.get('verbose'):\n            if tb is None:\n                if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                    tb = ''\n                    if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                        tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                    tb += compat_str(traceback.format_exc())\n                else:\n                    tb_data = traceback.format_list(traceback.extract_stack())\n                    tb = ''.join(tb_data)\n            self.to_stderr(tb)\n        if not self.params.get('ignoreerrors', False):\n            if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                exc_info = sys.exc_info()[1].exc_info\n            else:\n                exc_info = sys.exc_info()\n            raise DownloadError(message, exc_info)\n        self._download_retcode = 1",
        "begin_line": 481,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005780346820809248,
            "pseudo_dstar_susp": 0.005,
            "pseudo_tarantula_susp": 0.0019342359767891683,
            "pseudo_op2_susp": 0.005,
            "pseudo_barinel_susp": 0.0019342359767891683
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.report_warning#511",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.report_warning(self, message)",
        "snippet": "    def report_warning(self, message):\n        '''\n        Print the message to stderr, it will be prefixed with 'WARNING:'\n        If stderr is a tty file the 'WARNING:' will be colored\n        '''\n        if self.params.get('logger') is not None:\n            self.params['logger'].warning(message)\n        else:\n            if self.params.get('no_warnings'):\n                return\n            if not self.params.get('no_color') and self._err_file.isatty() and os.name != 'nt':\n                _msg_header = '\\033[0;33mWARNING:\\033[0m'\n            else:\n                _msg_header = 'WARNING:'\n            warning_message = '%s %s' % (_msg_header, message)\n            self.to_stderr(warning_message)",
        "begin_line": 511,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.report_error#528",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.report_error(self, message, tb=None)",
        "snippet": "    def report_error(self, message, tb=None):\n        '''\n        Do the same as trouble, but prefixes the message with 'ERROR:', colored\n        in red if stderr is a tty file.\n        '''\n        if not self.params.get('no_color') and self._err_file.isatty() and os.name != 'nt':\n            _msg_header = '\\033[0;31mERROR:\\033[0m'\n        else:\n            _msg_header = 'ERROR:'\n        error_message = '%s %s' % (_msg_header, message)\n        self.trouble(error_message, tb)",
        "begin_line": 528,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006211180124223602,
            "pseudo_dstar_susp": 0.006211180124223602,
            "pseudo_tarantula_susp": 0.0024330900243309003,
            "pseudo_op2_susp": 0.006211180124223602,
            "pseudo_barinel_susp": 0.0024330900243309003
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.prepare_filename#547",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.prepare_filename(self, info_dict)",
        "snippet": "    def prepare_filename(self, info_dict):\n        \"\"\"Generate the output filename.\"\"\"\n        try:\n            template_dict = dict(info_dict)\n\n            template_dict['epoch'] = int(time.time())\n            autonumber_size = self.params.get('autonumber_size')\n            if autonumber_size is None:\n                autonumber_size = 5\n            autonumber_templ = '%0' + str(autonumber_size) + 'd'\n            template_dict['autonumber'] = autonumber_templ % self._num_downloads\n            if template_dict.get('playlist_index') is not None:\n                template_dict['playlist_index'] = '%0*d' % (len(str(template_dict['n_entries'])), template_dict['playlist_index'])\n            if template_dict.get('resolution') is None:\n                if template_dict.get('width') and template_dict.get('height'):\n                    template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n                elif template_dict.get('height'):\n                    template_dict['resolution'] = '%sp' % template_dict['height']\n                elif template_dict.get('width'):\n                    template_dict['resolution'] = '?x%d' % template_dict['width']\n\n            sanitize = lambda k, v: sanitize_filename(\n                compat_str(v),\n                restricted=self.params.get('restrictfilenames'),\n                is_id=(k == 'id'))\n            template_dict = dict((k, sanitize(k, v))\n                                 for k, v in template_dict.items()\n                                 if v is not None)\n            template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n            outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n            tmpl = compat_expanduser(outtmpl)\n            filename = tmpl % template_dict\n            # Temporary fix for #4787\n            # 'Treat' all problem characters by passing filename through preferredencoding\n            # to workaround encoding issues with subprocess on python2 @ Windows\n            if sys.version_info < (3, 0) and sys.platform == 'win32':\n                filename = encodeFilename(filename, True).decode(preferredencoding())\n            return sanitize_path(filename)\n        except ValueError as err:\n            self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n            return None",
        "begin_line": 547,
        "end_line": 588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005235602094240838,
            "pseudo_dstar_susp": 0.006097560975609756,
            "pseudo_tarantula_susp": 0.001321003963011889,
            "pseudo_op2_susp": 0.006097560975609756,
            "pseudo_barinel_susp": 0.001321003963011889
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._match_entry#590",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._match_entry(self, info_dict, incomplete)",
        "snippet": "    def _match_entry(self, info_dict, incomplete):\n        \"\"\" Returns None iff the file should be downloaded \"\"\"\n\n        video_title = info_dict.get('title', info_dict.get('id', 'video'))\n        if 'title' in info_dict:\n            # This can happen when we're just evaluating the playlist\n            title = info_dict['title']\n            matchtitle = self.params.get('matchtitle', False)\n            if matchtitle:\n                if not re.search(matchtitle, title, re.IGNORECASE):\n                    return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n            rejecttitle = self.params.get('rejecttitle', False)\n            if rejecttitle:\n                if re.search(rejecttitle, title, re.IGNORECASE):\n                    return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n        date = info_dict.get('upload_date', None)\n        if date is not None:\n            dateRange = self.params.get('daterange', DateRange())\n            if date not in dateRange:\n                return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n        view_count = info_dict.get('view_count', None)\n        if view_count is not None:\n            min_views = self.params.get('min_views')\n            if min_views is not None and view_count < min_views:\n                return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n            max_views = self.params.get('max_views')\n            if max_views is not None and view_count > max_views:\n                return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n        if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n            return 'Skipping \"%s\" because it is age restricted' % video_title\n        if self.in_download_archive(info_dict):\n            return '%s has already been recorded in archive' % video_title\n\n        if not incomplete:\n            match_filter = self.params.get('match_filter')\n            if match_filter is not None:\n                ret = match_filter(info_dict)\n                if ret is not None:\n                    return ret\n\n        return None",
        "begin_line": 590,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002506265664160401,
            "pseudo_dstar_susp": 0.002506265664160401,
            "pseudo_tarantula_susp": 0.000946073793755913,
            "pseudo_op2_susp": 0.002506265664160401,
            "pseudo_barinel_susp": 0.000946073793755913
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.add_extra_info#633",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.add_extra_info(info_dict, extra_info)",
        "snippet": "    def add_extra_info(info_dict, extra_info):\n        '''Set the keys from extra_info in info dict if they are missing'''\n        for key, value in extra_info.items():\n            info_dict.setdefault(key, value)",
        "begin_line": 633,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030581039755351682,
            "pseudo_dstar_susp": 0.003076923076923077,
            "pseudo_tarantula_susp": 0.0008976660682226212,
            "pseudo_op2_susp": 0.003076923076923077,
            "pseudo_barinel_susp": 0.0008976660682226212
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.extract_info#638",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False)",
        "snippet": "    def extract_info(self, url, download=True, ie_key=None, extra_info={},\n                     process=True, force_generic_extractor=False):\n        '''\n        Returns a list with a dictionary for each video we find.\n        If 'download', also downloads the videos.\n        extra_info is a dict containing the extra values to add to each result\n        '''\n\n        if not ie_key and force_generic_extractor:\n            ie_key = 'Generic'\n\n        if ie_key:\n            ies = [self.get_info_extractor(ie_key)]\n        else:\n            ies = self._ies\n\n        for ie in ies:\n            if not ie.suitable(url):\n                continue\n\n            if not ie.working():\n                self.report_warning('The program functionality for this site has been marked as broken, '\n                                    'and will probably not work.')\n\n            try:\n                ie_result = ie.extract(url)\n                if ie_result is None:  # Finished already (backwards compatibility; listformats and friends should be moved here)\n                    break\n                if isinstance(ie_result, list):\n                    # Backwards compatibility: old IE result format\n                    ie_result = {\n                        '_type': 'compat_list',\n                        'entries': ie_result,\n                    }\n                self.add_default_extra_info(ie_result, ie, url)\n                if process:\n                    return self.process_ie_result(ie_result, download, extra_info)\n                else:\n                    return ie_result\n            except ExtractorError as de:  # An error we somewhat expected\n                self.report_error(compat_str(de), de.format_traceback())\n                break\n            except MaxDownloadsReached:\n                raise\n            except Exception as e:\n                if self.params.get('ignoreerrors', False):\n                    self.report_error(compat_str(e), tb=compat_str(traceback.format_exc()))\n                    break\n                else:\n                    raise\n        else:\n            self.report_error('no suitable InfoExtractor for URL %s' % url)",
        "begin_line": 638,
        "end_line": 689,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.016129032258064516,
            "pseudo_dstar_susp": 0.009345794392523364,
            "pseudo_tarantula_susp": 0.0018726591760299626,
            "pseudo_op2_susp": 0.009345794392523364,
            "pseudo_barinel_susp": 0.0018726591760299626
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.add_default_extra_info#691",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.add_default_extra_info(self, ie_result, ie, url)",
        "snippet": "    def add_default_extra_info(self, ie_result, ie, url):\n        self.add_extra_info(ie_result, {\n            'extractor': ie.IE_NAME,\n            'webpage_url': url,\n            'webpage_url_basename': url_basename(url),\n            'extractor_key': ie.ie_key(),\n        })",
        "begin_line": 691,
        "end_line": 697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006024096385542169,
            "pseudo_dstar_susp": 0.0005920663114268798,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.0005920663114268798,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.process_ie_result#699",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.process_ie_result(self, ie_result, download=True, extra_info={})",
        "snippet": "    def process_ie_result(self, ie_result, download=True, extra_info={}):\n        \"\"\"\n        Take the result of the ie(may be modified) and resolve all unresolved\n        references (URLs, playlist items).\n\n        It will also download the videos if 'download'.\n        Returns the resolved ie_result.\n        \"\"\"\n\n        result_type = ie_result.get('_type', 'video')\n\n        if result_type in ('url', 'url_transparent'):\n            extract_flat = self.params.get('extract_flat', False)\n            if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                    extract_flat is True):\n                if self.params.get('forcejson', False):\n                    self.to_stdout(json.dumps(ie_result))\n                return ie_result\n\n        if result_type == 'video':\n            self.add_extra_info(ie_result, extra_info)\n            return self.process_video_result(ie_result, download=download)\n        elif result_type == 'url':\n            # We have to add extra_info to the results because it may be\n            # contained in a playlist\n            return self.extract_info(ie_result['url'],\n                                     download,\n                                     ie_key=ie_result.get('ie_key'),\n                                     extra_info=extra_info)\n        elif result_type == 'url_transparent':\n            # Use the information from the embedding page\n            info = self.extract_info(\n                ie_result['url'], ie_key=ie_result.get('ie_key'),\n                extra_info=extra_info, download=False, process=False)\n\n            force_properties = dict(\n                (k, v) for k, v in ie_result.items() if v is not None)\n            for f in ('_type', 'url'):\n                if f in force_properties:\n                    del force_properties[f]\n            new_result = info.copy()\n            new_result.update(force_properties)\n\n            assert new_result.get('_type') != 'url_transparent'\n\n            return self.process_ie_result(\n                new_result, download=download, extra_info=extra_info)\n        elif result_type == 'playlist' or result_type == 'multi_video':\n            # We process each entry in the playlist\n            playlist = ie_result.get('title', None) or ie_result.get('id', None)\n            self.to_screen('[download] Downloading playlist: %s' % playlist)\n\n            playlist_results = []\n\n            playliststart = self.params.get('playliststart', 1) - 1\n            playlistend = self.params.get('playlistend', None)\n            # For backwards compatibility, interpret -1 as whole list\n            if playlistend == -1:\n                playlistend = None\n\n            playlistitems_str = self.params.get('playlist_items', None)\n            playlistitems = None\n            if playlistitems_str is not None:\n                def iter_playlistitems(format):\n                    for string_segment in format.split(','):\n                        if '-' in string_segment:\n                            start, end = string_segment.split('-')\n                            for item in range(int(start), int(end) + 1):\n                                yield int(item)\n                        else:\n                            yield int(string_segment)\n                playlistitems = iter_playlistitems(playlistitems_str)\n\n            ie_entries = ie_result['entries']\n            if isinstance(ie_entries, list):\n                n_all_entries = len(ie_entries)\n                if playlistitems:\n                    entries = [\n                        ie_entries[i - 1] for i in playlistitems\n                        if -n_all_entries <= i - 1 < n_all_entries]\n                else:\n                    entries = ie_entries[playliststart:playlistend]\n                n_entries = len(entries)\n                self.to_screen(\n                    \"[%s] playlist %s: Collected %d video ids (downloading %d of them)\" %\n                    (ie_result['extractor'], playlist, n_all_entries, n_entries))\n            elif isinstance(ie_entries, PagedList):\n                if playlistitems:\n                    entries = []\n                    for item in playlistitems:\n                        entries.extend(ie_entries.getslice(\n                            item - 1, item\n                        ))\n                else:\n                    entries = ie_entries.getslice(\n                        playliststart, playlistend)\n                n_entries = len(entries)\n                self.to_screen(\n                    \"[%s] playlist %s: Downloading %d videos\" %\n                    (ie_result['extractor'], playlist, n_entries))\n            else:  # iterable\n                if playlistitems:\n                    entry_list = list(ie_entries)\n                    entries = [entry_list[i - 1] for i in playlistitems]\n                else:\n                    entries = list(itertools.islice(\n                        ie_entries, playliststart, playlistend))\n                n_entries = len(entries)\n                self.to_screen(\n                    \"[%s] playlist %s: Downloading %d videos\" %\n                    (ie_result['extractor'], playlist, n_entries))\n\n            if self.params.get('playlistreverse', False):\n                entries = entries[::-1]\n\n            for i, entry in enumerate(entries, 1):\n                self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n                extra = {\n                    'n_entries': n_entries,\n                    'playlist': playlist,\n                    'playlist_id': ie_result.get('id'),\n                    'playlist_title': ie_result.get('title'),\n                    'playlist_index': i + playliststart,\n                    'extractor': ie_result['extractor'],\n                    'webpage_url': ie_result['webpage_url'],\n                    'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                    'extractor_key': ie_result['extractor_key'],\n                }\n\n                reason = self._match_entry(entry, incomplete=True)\n                if reason is not None:\n                    self.to_screen('[download] ' + reason)\n                    continue\n\n                entry_result = self.process_ie_result(entry,\n                                                      download=download,\n                                                      extra_info=extra)\n                playlist_results.append(entry_result)\n            ie_result['entries'] = playlist_results\n            self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n            return ie_result\n        elif result_type == 'compat_list':\n            self.report_warning(\n                'Extractor %s returned a compat_list result. '\n                'It needs to be updated.' % ie_result.get('extractor'))\n\n            def _fixup(r):\n                self.add_extra_info(\n                    r,\n                    {\n                        'extractor': ie_result['extractor'],\n                        'webpage_url': ie_result['webpage_url'],\n                        'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                        'extractor_key': ie_result['extractor_key'],\n                    }\n                )\n                return r\n            ie_result['entries'] = [\n                self.process_ie_result(_fixup(r), download, extra_info)\n                for r in ie_result['entries']\n            ]\n            return ie_result\n        else:\n            raise Exception('Invalid result type: %s' % result_type)",
        "begin_line": 699,
        "end_line": 862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003003003003003003,
            "pseudo_dstar_susp": 0.003067484662576687,
            "pseudo_tarantula_susp": 0.0016260162601626016,
            "pseudo_op2_susp": 0.003067484662576687,
            "pseudo_barinel_susp": 0.0016260162601626016
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.iter_playlistitems#762",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.iter_playlistitems(format)",
        "snippet": "                def iter_playlistitems(format):\n                    for string_segment in format.split(','):\n                        if '-' in string_segment:\n                            start, end = string_segment.split('-')\n                            for item in range(int(start), int(end) + 1):\n                                yield int(item)\n                        else:\n                            yield int(string_segment)",
        "begin_line": 762,
        "end_line": 769,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._build_format_filter#864",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._build_format_filter(self, filter_spec)",
        "snippet": "    def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n\n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|fps)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n            $\n            ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n        m = operator_rex.search(filter_spec)\n        if m:\n            try:\n                comparison_value = int(m.group('value'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('value'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('value') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid value %r in format specification %r' % (\n                            m.group('value'), filter_spec))\n            op = OPERATORS[m.group('op')]\n\n        if not m:\n            STR_OPERATORS = {\n                '=': operator.eq,\n                '!=': operator.ne,\n            }\n            str_operator_rex = re.compile(r'''(?x)\n                \\s*(?P<key>ext|acodec|vcodec|container|protocol)\n                \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n                \\s*(?P<value>[a-zA-Z0-9_-]+)\n                \\s*$\n                ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n            m = str_operator_rex.search(filter_spec)\n            if m:\n                comparison_value = m.group('value')\n                op = STR_OPERATORS[m.group('op')]\n\n        if not m:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n\n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n        return _filter",
        "begin_line": 864,
        "end_line": 919,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._filter#914",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._filter(f)",
        "snippet": "        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)",
        "begin_line": 914,
        "end_line": 918,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.build_format_selector#921",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.build_format_selector(self, format_spec)",
        "snippet": "    def build_format_selector(self, format_spec):\n        def syntax_error(note, start):\n            message = (\n                'Invalid format specification: '\n                '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n            return SyntaxError(message)\n\n        PICKFIRST = 'PICKFIRST'\n        MERGE = 'MERGE'\n        SINGLE = 'SINGLE'\n        GROUP = 'GROUP'\n        FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n        def _parse_filter(tokens):\n            filter_parts = []\n            for type, string, start, _, _ in tokens:\n                if type == tokenize.OP and string == ']':\n                    return ''.join(filter_parts)\n                else:\n                    filter_parts.append(string)\n\n        def _remove_unused_ops(tokens):\n            # Remove operators that we don't use and join them with the surrounding strings\n            # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n            ALLOWED_OPS = ('/', '+', ',', '(', ')')\n            last_string, last_start, last_end, last_line = None, None, None, None\n            for type, string, start, end, line in tokens:\n                if type == tokenize.OP and string == '[':\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                    # everything inside brackets will be handled by _parse_filter\n                    for type, string, start, end, line in tokens:\n                        yield type, string, start, end, line\n                        if type == tokenize.OP and string == ']':\n                            break\n                elif type == tokenize.OP and string in ALLOWED_OPS:\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                    if not last_string:\n                        last_string = string\n                        last_start = start\n                        last_end = end\n                    else:\n                        last_string += string\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line\n\n        def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n            selectors = []\n            current_selector = None\n            for type, string, start, _, _ in tokens:\n                # ENCODING is only defined in python 3.x\n                if type == getattr(tokenize, 'ENCODING', None):\n                    continue\n                elif type in [tokenize.NAME, tokenize.NUMBER]:\n                    current_selector = FormatSelector(SINGLE, string, [])\n                elif type == tokenize.OP:\n                    if string == ')':\n                        if not inside_group:\n                            # ')' will be handled by the parentheses group\n                            tokens.restore_last_token()\n                        break\n                    elif inside_merge and string in ['/', ',']:\n                        tokens.restore_last_token()\n                        break\n                    elif inside_choice and string == ',':\n                        tokens.restore_last_token()\n                        break\n                    elif string == ',':\n                        if not current_selector:\n                            raise syntax_error('\",\" must follow a format selector', start)\n                        selectors.append(current_selector)\n                        current_selector = None\n                    elif string == '/':\n                        if not current_selector:\n                            raise syntax_error('\"/\" must follow a format selector', start)\n                        first_choice = current_selector\n                        second_choice = _parse_format_selection(tokens, inside_choice=True)\n                        current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                    elif string == '[':\n                        if not current_selector:\n                            current_selector = FormatSelector(SINGLE, 'best', [])\n                        format_filter = _parse_filter(tokens)\n                        current_selector.filters.append(format_filter)\n                    elif string == '(':\n                        if current_selector:\n                            raise syntax_error('Unexpected \"(\"', start)\n                        group = _parse_format_selection(tokens, inside_group=True)\n                        current_selector = FormatSelector(GROUP, group, [])\n                    elif string == '+':\n                        video_selector = current_selector\n                        audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                        if not video_selector or not audio_selector:\n                            raise syntax_error('\"+\" must be between two format selectors', start)\n                        current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                    else:\n                        raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n                elif type == tokenize.ENDMARKER:\n                    break\n            if current_selector:\n                selectors.append(current_selector)\n            return selectors\n\n        def _build_selector_function(selector):\n            if isinstance(selector, list):\n                fs = [_build_selector_function(s) for s in selector]\n\n                def selector_function(formats):\n                    for f in fs:\n                        for format in f(formats):\n                            yield format\n                return selector_function\n            elif selector.type == GROUP:\n                selector_function = _build_selector_function(selector.selector)\n            elif selector.type == PICKFIRST:\n                fs = [_build_selector_function(s) for s in selector.selector]\n\n                def selector_function(formats):\n                    for f in fs:\n                        picked_formats = list(f(formats))\n                        if picked_formats:\n                            return picked_formats\n                    return []\n            elif selector.type == SINGLE:\n                format_spec = selector.selector\n\n                def selector_function(formats):\n                    formats = list(formats)\n                    if not formats:\n                        return\n                    if format_spec == 'all':\n                        for f in formats:\n                            yield f\n                    elif format_spec in ['best', 'worst', None]:\n                        format_idx = 0 if format_spec == 'worst' else -1\n                        audiovideo_formats = [\n                            f for f in formats\n                            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                        if audiovideo_formats:\n                            yield audiovideo_formats[format_idx]\n                        # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                        elif (all(f.get('acodec') != 'none' for f in formats) or\n                              all(f.get('vcodec') != 'none' for f in formats)):\n                            yield formats[format_idx]\n                    elif format_spec == 'bestaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[-1]\n                    elif format_spec == 'worstaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[0]\n                    elif format_spec == 'bestvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[-1]\n                    elif format_spec == 'worstvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[0]\n                    else:\n                        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                        if format_spec in extensions:\n                            filter_f = lambda f: f['ext'] == format_spec\n                        else:\n                            filter_f = lambda f: f['format_id'] == format_spec\n                        matches = list(filter(filter_f, formats))\n                        if matches:\n                            yield matches[-1]\n            elif selector.type == MERGE:\n                def _merge(formats_info):\n                    format_1, format_2 = [f['format_id'] for f in formats_info]\n                    # The first format must contain the video and the\n                    # second the audio\n                    if formats_info[0].get('vcodec') == 'none':\n                        self.report_error('The first format must '\n                                          'contain the video, try using '\n                                          '\"-f %s+%s\"' % (format_2, format_1))\n                        return\n                    # Formats must be opposite (video+audio)\n                    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                        self.report_error(\n                            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                            % (format_1, format_2))\n                        return\n                    output_ext = (\n                        formats_info[0]['ext']\n                        if self.params.get('merge_output_format') is None\n                        else self.params['merge_output_format'])\n                    return {\n                        'requested_formats': formats_info,\n                        'format': '%s+%s' % (formats_info[0].get('format'),\n                                             formats_info[1].get('format')),\n                        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                                formats_info[1].get('format_id')),\n                        'width': formats_info[0].get('width'),\n                        'height': formats_info[0].get('height'),\n                        'resolution': formats_info[0].get('resolution'),\n                        'fps': formats_info[0].get('fps'),\n                        'vcodec': formats_info[0].get('vcodec'),\n                        'vbr': formats_info[0].get('vbr'),\n                        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                        'acodec': formats_info[1].get('acodec'),\n                        'abr': formats_info[1].get('abr'),\n                        'ext': output_ext,\n                    }\n                video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n                def selector_function(formats):\n                    formats = list(formats)\n                    for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                        yield _merge(pair)\n\n            filters = [self._build_format_filter(f) for f in selector.filters]\n\n            def final_selector(formats):\n                for _filter in filters:\n                    formats = list(filter(_filter, formats))\n                return selector_function(formats)\n            return final_selector\n\n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        try:\n            tokens = list(_remove_unused_ops(compat_tokenize_tokenize(stream.readline)))\n        except tokenize.TokenError:\n            raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n        class TokenIterator(object):\n            def __init__(self, tokens):\n                self.tokens = tokens\n                self.counter = 0\n\n            def __iter__(self):\n                return self\n\n            def __next__(self):\n                if self.counter >= len(self.tokens):\n                    raise StopIteration()\n                value = self.tokens[self.counter]\n                self.counter += 1\n                return value\n\n            next = __next__\n\n            def restore_last_token(self):\n                self.counter -= 1\n\n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return _build_selector_function(parsed_selector)",
        "begin_line": 921,
        "end_line": 1182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007434944237918215,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007434944237918215
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.syntax_error#922",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.syntax_error(note, start)",
        "snippet": "        def syntax_error(note, start):\n            message = (\n                'Invalid format specification: '\n                '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n            return SyntaxError(message)",
        "begin_line": 922,
        "end_line": 926,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007107320540156361,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007107320540156361
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._parse_filter#934",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._parse_filter(tokens)",
        "snippet": "        def _parse_filter(tokens):\n            filter_parts = []\n            for type, string, start, _, _ in tokens:\n                if type == tokenize.OP and string == ']':\n                    return ''.join(filter_parts)\n                else:\n                    filter_parts.append(string)",
        "begin_line": 934,
        "end_line": 940,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018315018315018315,
            "pseudo_dstar_susp": 0.001607717041800643,
            "pseudo_tarantula_susp": 0.0008097165991902834,
            "pseudo_op2_susp": 0.001607717041800643,
            "pseudo_barinel_susp": 0.0008097165991902834
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._remove_unused_ops#942",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._remove_unused_ops(tokens)",
        "snippet": "        def _remove_unused_ops(tokens):\n            # Remove operators that we don't use and join them with the surrounding strings\n            # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n            ALLOWED_OPS = ('/', '+', ',', '(', ')')\n            last_string, last_start, last_end, last_line = None, None, None, None\n            for type, string, start, end, line in tokens:\n                if type == tokenize.OP and string == '[':\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                    # everything inside brackets will be handled by _parse_filter\n                    for type, string, start, end, line in tokens:\n                        yield type, string, start, end, line\n                        if type == tokenize.OP and string == ']':\n                            break\n                elif type == tokenize.OP and string in ALLOWED_OPS:\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                    if not last_string:\n                        last_string = string\n                        last_start = start\n                        last_end = end\n                    else:\n                        last_string += string\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line",
        "begin_line": 942,
        "end_line": 971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017006802721088435,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.0007347538574577516,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.0007347538574577516
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._parse_format_selection#973",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False)",
        "snippet": "        def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n            selectors = []\n            current_selector = None\n            for type, string, start, _, _ in tokens:\n                # ENCODING is only defined in python 3.x\n                if type == getattr(tokenize, 'ENCODING', None):\n                    continue\n                elif type in [tokenize.NAME, tokenize.NUMBER]:\n                    current_selector = FormatSelector(SINGLE, string, [])\n                elif type == tokenize.OP:\n                    if string == ')':\n                        if not inside_group:\n                            # ')' will be handled by the parentheses group\n                            tokens.restore_last_token()\n                        break\n                    elif inside_merge and string in ['/', ',']:\n                        tokens.restore_last_token()\n                        break\n                    elif inside_choice and string == ',':\n                        tokens.restore_last_token()\n                        break\n                    elif string == ',':\n                        if not current_selector:\n                            raise syntax_error('\",\" must follow a format selector', start)\n                        selectors.append(current_selector)\n                        current_selector = None\n                    elif string == '/':\n                        if not current_selector:\n                            raise syntax_error('\"/\" must follow a format selector', start)\n                        first_choice = current_selector\n                        second_choice = _parse_format_selection(tokens, inside_choice=True)\n                        current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                    elif string == '[':\n                        if not current_selector:\n                            current_selector = FormatSelector(SINGLE, 'best', [])\n                        format_filter = _parse_filter(tokens)\n                        current_selector.filters.append(format_filter)\n                    elif string == '(':\n                        if current_selector:\n                            raise syntax_error('Unexpected \"(\"', start)\n                        group = _parse_format_selection(tokens, inside_group=True)\n                        current_selector = FormatSelector(GROUP, group, [])\n                    elif string == '+':\n                        video_selector = current_selector\n                        audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                        if not video_selector or not audio_selector:\n                            raise syntax_error('\"+\" must be between two format selectors', start)\n                        current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                    else:\n                        raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n                elif type == tokenize.ENDMARKER:\n                    break\n            if current_selector:\n                selectors.append(current_selector)\n            return selectors",
        "begin_line": 973,
        "end_line": 1027,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007107320540156361,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007107320540156361
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._build_selector_function#1029",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._build_selector_function(selector)",
        "snippet": "        def _build_selector_function(selector):\n            if isinstance(selector, list):\n                fs = [_build_selector_function(s) for s in selector]\n\n                def selector_function(formats):\n                    for f in fs:\n                        for format in f(formats):\n                            yield format\n                return selector_function\n            elif selector.type == GROUP:\n                selector_function = _build_selector_function(selector.selector)\n            elif selector.type == PICKFIRST:\n                fs = [_build_selector_function(s) for s in selector.selector]\n\n                def selector_function(formats):\n                    for f in fs:\n                        picked_formats = list(f(formats))\n                        if picked_formats:\n                            return picked_formats\n                    return []\n            elif selector.type == SINGLE:\n                format_spec = selector.selector\n\n                def selector_function(formats):\n                    formats = list(formats)\n                    if not formats:\n                        return\n                    if format_spec == 'all':\n                        for f in formats:\n                            yield f\n                    elif format_spec in ['best', 'worst', None]:\n                        format_idx = 0 if format_spec == 'worst' else -1\n                        audiovideo_formats = [\n                            f for f in formats\n                            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                        if audiovideo_formats:\n                            yield audiovideo_formats[format_idx]\n                        # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                        elif (all(f.get('acodec') != 'none' for f in formats) or\n                              all(f.get('vcodec') != 'none' for f in formats)):\n                            yield formats[format_idx]\n                    elif format_spec == 'bestaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[-1]\n                    elif format_spec == 'worstaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[0]\n                    elif format_spec == 'bestvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[-1]\n                    elif format_spec == 'worstvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[0]\n                    else:\n                        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                        if format_spec in extensions:\n                            filter_f = lambda f: f['ext'] == format_spec\n                        else:\n                            filter_f = lambda f: f['format_id'] == format_spec\n                        matches = list(filter(filter_f, formats))\n                        if matches:\n                            yield matches[-1]\n            elif selector.type == MERGE:\n                def _merge(formats_info):\n                    format_1, format_2 = [f['format_id'] for f in formats_info]\n                    # The first format must contain the video and the\n                    # second the audio\n                    if formats_info[0].get('vcodec') == 'none':\n                        self.report_error('The first format must '\n                                          'contain the video, try using '\n                                          '\"-f %s+%s\"' % (format_2, format_1))\n                        return\n                    # Formats must be opposite (video+audio)\n                    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                        self.report_error(\n                            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                            % (format_1, format_2))\n                        return\n                    output_ext = (\n                        formats_info[0]['ext']\n                        if self.params.get('merge_output_format') is None\n                        else self.params['merge_output_format'])\n                    return {\n                        'requested_formats': formats_info,\n                        'format': '%s+%s' % (formats_info[0].get('format'),\n                                             formats_info[1].get('format')),\n                        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                                formats_info[1].get('format_id')),\n                        'width': formats_info[0].get('width'),\n                        'height': formats_info[0].get('height'),\n                        'resolution': formats_info[0].get('resolution'),\n                        'fps': formats_info[0].get('fps'),\n                        'vcodec': formats_info[0].get('vcodec'),\n                        'vbr': formats_info[0].get('vbr'),\n                        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                        'acodec': formats_info[1].get('acodec'),\n                        'abr': formats_info[1].get('abr'),\n                        'ext': output_ext,\n                    }\n                video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n                def selector_function(formats):\n                    formats = list(formats)\n                    for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                        yield _merge(pair)\n\n            filters = [self._build_format_filter(f) for f in selector.filters]\n\n            def final_selector(formats):\n                for _filter in filters:\n                    formats = list(filter(_filter, formats))\n                return selector_function(formats)\n            return final_selector",
        "begin_line": 1029,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017006802721088435,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.0007347538574577516,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.0007347538574577516
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.selector_function#1033",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.selector_function(formats)",
        "snippet": "                def selector_function(formats):\n                    for f in fs:\n                        for format in f(formats):\n                            yield format",
        "begin_line": 1033,
        "end_line": 1036,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001763668430335097,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0007722007722007722,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0007722007722007722
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.selector_function#1043",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.selector_function(formats)",
        "snippet": "                def selector_function(formats):\n                    for f in fs:\n                        picked_formats = list(f(formats))\n                        if picked_formats:\n                            return picked_formats\n                    return []",
        "begin_line": 1043,
        "end_line": 1048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001763668430335097,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0007722007722007722,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0007722007722007722
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.selector_function#1052",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.selector_function(formats)",
        "snippet": "                def selector_function(formats):\n                    formats = list(formats)\n                    if not formats:\n                        return\n                    if format_spec == 'all':\n                        for f in formats:\n                            yield f\n                    elif format_spec in ['best', 'worst', None]:\n                        format_idx = 0 if format_spec == 'worst' else -1\n                        audiovideo_formats = [\n                            f for f in formats\n                            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                        if audiovideo_formats:\n                            yield audiovideo_formats[format_idx]\n                        # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                        elif (all(f.get('acodec') != 'none' for f in formats) or\n                              all(f.get('vcodec') != 'none' for f in formats)):\n                            yield formats[format_idx]\n                    elif format_spec == 'bestaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[-1]\n                    elif format_spec == 'worstaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[0]\n                    elif format_spec == 'bestvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[-1]\n                    elif format_spec == 'worstvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[0]\n                    else:\n                        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                        if format_spec in extensions:\n                            filter_f = lambda f: f['ext'] == format_spec\n                        else:\n                            filter_f = lambda f: f['format_id'] == format_spec\n                        matches = list(filter(filter_f, formats))\n                        if matches:\n                            yield matches[-1]",
        "begin_line": 1052,
        "end_line": 1102,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001763668430335097,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0007722007722007722,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0007722007722007722
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._merge#1104",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._merge(formats_info)",
        "snippet": "                def _merge(formats_info):\n                    format_1, format_2 = [f['format_id'] for f in formats_info]\n                    # The first format must contain the video and the\n                    # second the audio\n                    if formats_info[0].get('vcodec') == 'none':\n                        self.report_error('The first format must '\n                                          'contain the video, try using '\n                                          '\"-f %s+%s\"' % (format_2, format_1))\n                        return\n                    # Formats must be opposite (video+audio)\n                    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                        self.report_error(\n                            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                            % (format_1, format_2))\n                        return\n                    output_ext = (\n                        formats_info[0]['ext']\n                        if self.params.get('merge_output_format') is None\n                        else self.params['merge_output_format'])\n                    return {\n                        'requested_formats': formats_info,\n                        'format': '%s+%s' % (formats_info[0].get('format'),\n                                             formats_info[1].get('format')),\n                        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                                formats_info[1].get('format_id')),\n                        'width': formats_info[0].get('width'),\n                        'height': formats_info[0].get('height'),\n                        'resolution': formats_info[0].get('resolution'),\n                        'fps': formats_info[0].get('fps'),\n                        'vcodec': formats_info[0].get('vcodec'),\n                        'vbr': formats_info[0].get('vbr'),\n                        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                        'acodec': formats_info[1].get('acodec'),\n                        'abr': formats_info[1].get('abr'),\n                        'ext': output_ext,\n                    }",
        "begin_line": 1104,
        "end_line": 1139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.selector_function#1142",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.selector_function(formats)",
        "snippet": "                def selector_function(formats):\n                    formats = list(formats)\n                    for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                        yield _merge(pair)",
        "begin_line": 1142,
        "end_line": 1145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001763668430335097,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0007722007722007722,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0007722007722007722
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.final_selector#1149",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.final_selector(formats)",
        "snippet": "            def final_selector(formats):\n                for _filter in filters:\n                    formats = list(filter(_filter, formats))\n                return selector_function(formats)",
        "begin_line": 1149,
        "end_line": 1152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017006802721088435,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.0007347538574577516,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.0007347538574577516
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.TokenIterator.build_format_selector#921",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.TokenIterator",
        "signature": "youtube_dl.YoutubeDL.TokenIterator.build_format_selector(self, format_spec)",
        "snippet": "    def build_format_selector(self, format_spec):\n        def syntax_error(note, start):\n            message = (\n                'Invalid format specification: '\n                '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n            return SyntaxError(message)\n\n        PICKFIRST = 'PICKFIRST'\n        MERGE = 'MERGE'\n        SINGLE = 'SINGLE'\n        GROUP = 'GROUP'\n        FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n        def _parse_filter(tokens):\n            filter_parts = []\n            for type, string, start, _, _ in tokens:\n                if type == tokenize.OP and string == ']':\n                    return ''.join(filter_parts)\n                else:\n                    filter_parts.append(string)\n\n        def _remove_unused_ops(tokens):\n            # Remove operators that we don't use and join them with the surrounding strings\n            # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n            ALLOWED_OPS = ('/', '+', ',', '(', ')')\n            last_string, last_start, last_end, last_line = None, None, None, None\n            for type, string, start, end, line in tokens:\n                if type == tokenize.OP and string == '[':\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                    # everything inside brackets will be handled by _parse_filter\n                    for type, string, start, end, line in tokens:\n                        yield type, string, start, end, line\n                        if type == tokenize.OP and string == ']':\n                            break\n                elif type == tokenize.OP and string in ALLOWED_OPS:\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                    if not last_string:\n                        last_string = string\n                        last_start = start\n                        last_end = end\n                    else:\n                        last_string += string\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line\n\n        def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n            selectors = []\n            current_selector = None\n            for type, string, start, _, _ in tokens:\n                # ENCODING is only defined in python 3.x\n                if type == getattr(tokenize, 'ENCODING', None):\n                    continue\n                elif type in [tokenize.NAME, tokenize.NUMBER]:\n                    current_selector = FormatSelector(SINGLE, string, [])\n                elif type == tokenize.OP:\n                    if string == ')':\n                        if not inside_group:\n                            # ')' will be handled by the parentheses group\n                            tokens.restore_last_token()\n                        break\n                    elif inside_merge and string in ['/', ',']:\n                        tokens.restore_last_token()\n                        break\n                    elif inside_choice and string == ',':\n                        tokens.restore_last_token()\n                        break\n                    elif string == ',':\n                        if not current_selector:\n                            raise syntax_error('\",\" must follow a format selector', start)\n                        selectors.append(current_selector)\n                        current_selector = None\n                    elif string == '/':\n                        if not current_selector:\n                            raise syntax_error('\"/\" must follow a format selector', start)\n                        first_choice = current_selector\n                        second_choice = _parse_format_selection(tokens, inside_choice=True)\n                        current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                    elif string == '[':\n                        if not current_selector:\n                            current_selector = FormatSelector(SINGLE, 'best', [])\n                        format_filter = _parse_filter(tokens)\n                        current_selector.filters.append(format_filter)\n                    elif string == '(':\n                        if current_selector:\n                            raise syntax_error('Unexpected \"(\"', start)\n                        group = _parse_format_selection(tokens, inside_group=True)\n                        current_selector = FormatSelector(GROUP, group, [])\n                    elif string == '+':\n                        video_selector = current_selector\n                        audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                        if not video_selector or not audio_selector:\n                            raise syntax_error('\"+\" must be between two format selectors', start)\n                        current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                    else:\n                        raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n                elif type == tokenize.ENDMARKER:\n                    break\n            if current_selector:\n                selectors.append(current_selector)\n            return selectors\n\n        def _build_selector_function(selector):\n            if isinstance(selector, list):\n                fs = [_build_selector_function(s) for s in selector]\n\n                def selector_function(formats):\n                    for f in fs:\n                        for format in f(formats):\n                            yield format\n                return selector_function\n            elif selector.type == GROUP:\n                selector_function = _build_selector_function(selector.selector)\n            elif selector.type == PICKFIRST:\n                fs = [_build_selector_function(s) for s in selector.selector]\n\n                def selector_function(formats):\n                    for f in fs:\n                        picked_formats = list(f(formats))\n                        if picked_formats:\n                            return picked_formats\n                    return []\n            elif selector.type == SINGLE:\n                format_spec = selector.selector\n\n                def selector_function(formats):\n                    formats = list(formats)\n                    if not formats:\n                        return\n                    if format_spec == 'all':\n                        for f in formats:\n                            yield f\n                    elif format_spec in ['best', 'worst', None]:\n                        format_idx = 0 if format_spec == 'worst' else -1\n                        audiovideo_formats = [\n                            f for f in formats\n                            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                        if audiovideo_formats:\n                            yield audiovideo_formats[format_idx]\n                        # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n                        elif (all(f.get('acodec') != 'none' for f in formats) or\n                              all(f.get('vcodec') != 'none' for f in formats)):\n                            yield formats[format_idx]\n                    elif format_spec == 'bestaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[-1]\n                    elif format_spec == 'worstaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[0]\n                    elif format_spec == 'bestvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[-1]\n                    elif format_spec == 'worstvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[0]\n                    else:\n                        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                        if format_spec in extensions:\n                            filter_f = lambda f: f['ext'] == format_spec\n                        else:\n                            filter_f = lambda f: f['format_id'] == format_spec\n                        matches = list(filter(filter_f, formats))\n                        if matches:\n                            yield matches[-1]\n            elif selector.type == MERGE:\n                def _merge(formats_info):\n                    format_1, format_2 = [f['format_id'] for f in formats_info]\n                    # The first format must contain the video and the\n                    # second the audio\n                    if formats_info[0].get('vcodec') == 'none':\n                        self.report_error('The first format must '\n                                          'contain the video, try using '\n                                          '\"-f %s+%s\"' % (format_2, format_1))\n                        return\n                    # Formats must be opposite (video+audio)\n                    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                        self.report_error(\n                            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                            % (format_1, format_2))\n                        return\n                    output_ext = (\n                        formats_info[0]['ext']\n                        if self.params.get('merge_output_format') is None\n                        else self.params['merge_output_format'])\n                    return {\n                        'requested_formats': formats_info,\n                        'format': '%s+%s' % (formats_info[0].get('format'),\n                                             formats_info[1].get('format')),\n                        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                                formats_info[1].get('format_id')),\n                        'width': formats_info[0].get('width'),\n                        'height': formats_info[0].get('height'),\n                        'resolution': formats_info[0].get('resolution'),\n                        'fps': formats_info[0].get('fps'),\n                        'vcodec': formats_info[0].get('vcodec'),\n                        'vbr': formats_info[0].get('vbr'),\n                        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                        'acodec': formats_info[1].get('acodec'),\n                        'abr': formats_info[1].get('abr'),\n                        'ext': output_ext,\n                    }\n                video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n                def selector_function(formats):\n                    formats = list(formats)\n                    for pair in itertools.product(video_selector(formats), audio_selector(formats)):\n                        yield _merge(pair)\n\n            filters = [self._build_format_filter(f) for f in selector.filters]\n\n            def final_selector(formats):\n                for _filter in filters:\n                    formats = list(filter(_filter, formats))\n                return selector_function(formats)\n            return final_selector\n\n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        try:\n            tokens = list(_remove_unused_ops(compat_tokenize_tokenize(stream.readline)))\n        except tokenize.TokenError:\n            raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n        class TokenIterator(object):\n            def __init__(self, tokens):\n                self.tokens = tokens\n                self.counter = 0\n\n            def __iter__(self):\n                return self\n\n            def __next__(self):\n                if self.counter >= len(self.tokens):\n                    raise StopIteration()\n                value = self.tokens[self.counter]\n                self.counter += 1\n                return value\n\n            next = __next__\n\n            def restore_last_token(self):\n                self.counter -= 1\n\n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return _build_selector_function(parsed_selector)",
        "begin_line": 921,
        "end_line": 1182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007107320540156361,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007107320540156361
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.TokenIterator.__init__#1162",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.TokenIterator",
        "signature": "youtube_dl.YoutubeDL.TokenIterator.__init__(self, tokens)",
        "snippet": "            def __init__(self, tokens):\n                self.tokens = tokens\n                self.counter = 0",
        "begin_line": 1162,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007220216606498195,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007220216606498195
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.TokenIterator.__iter__#1166",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.TokenIterator",
        "signature": "youtube_dl.YoutubeDL.TokenIterator.__iter__(self)",
        "snippet": "            def __iter__(self):\n                return self",
        "begin_line": 1166,
        "end_line": 1167,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007107320540156361,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007107320540156361
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.TokenIterator.__next__#1169",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.TokenIterator",
        "signature": "youtube_dl.YoutubeDL.TokenIterator.__next__(self)",
        "snippet": "            def __next__(self):\n                if self.counter >= len(self.tokens):\n                    raise StopIteration()\n                value = self.tokens[self.counter]\n                self.counter += 1\n                return value",
        "begin_line": 1169,
        "end_line": 1174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007220216606498195,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007220216606498195
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.TokenIterator.restore_last_token#1178",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.TokenIterator",
        "signature": "youtube_dl.YoutubeDL.TokenIterator.restore_last_token(self)",
        "snippet": "            def restore_last_token(self):\n                self.counter -= 1",
        "begin_line": 1178,
        "end_line": 1179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015600624024961,
            "pseudo_dstar_susp": 0.001851851851851852,
            "pseudo_tarantula_susp": 0.0007107320540156361,
            "pseudo_op2_susp": 0.001851851851851852,
            "pseudo_barinel_susp": 0.0007107320540156361
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._calc_headers#1184",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._calc_headers(self, info_dict)",
        "snippet": "    def _calc_headers(self, info_dict):\n        res = std_headers.copy()\n\n        add_headers = info_dict.get('http_headers')\n        if add_headers:\n            res.update(add_headers)\n\n        cookies = self._calc_cookies(info_dict)\n        if cookies:\n            res['Cookie'] = cookies\n\n        return res",
        "begin_line": 1184,
        "end_line": 1195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015015015015015015,
            "pseudo_dstar_susp": 0.0017452006980802793,
            "pseudo_tarantula_susp": 0.0009775171065493646,
            "pseudo_op2_susp": 0.0017452006980802793,
            "pseudo_barinel_susp": 0.0009775171065493646
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._calc_cookies#1197",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._calc_cookies(self, info_dict)",
        "snippet": "    def _calc_cookies(self, info_dict):\n        pr = sanitized_Request(info_dict['url'])\n        self.cookiejar.add_cookie_header(pr)\n        return pr.get_header('Cookie')",
        "begin_line": 1197,
        "end_line": 1200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017452006980802793,
            "pseudo_dstar_susp": 0.002008032128514056,
            "pseudo_tarantula_susp": 0.000727802037845706,
            "pseudo_op2_susp": 0.002008032128514056,
            "pseudo_barinel_susp": 0.000727802037845706
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.process_video_result#1202",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.process_video_result(self, info_dict, download=True)",
        "snippet": "    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n\n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n\n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference'), t.get('width'), t.get('height'),\n                t.get('id'), t.get('url')))\n            for i, t in enumerate(thumbnails):\n                if t.get('width') and t.get('height'):\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n\n        if thumbnails and 'thumbnail' not in info_dict:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n\n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n\n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n\n        subtitles = info_dict.get('subtitles')\n        if subtitles:\n            for _, subtitle in subtitles.items():\n                for subtitle_format in subtitle:\n                    if 'ext' not in subtitle_format:\n                        subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n\n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n            self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n            return\n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], subtitles,\n            info_dict.get('automatic_captions'))\n\n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n\n        if not formats:\n            raise ExtractorError('No video formats found!')\n\n        formats_dict = {}\n\n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            if 'url' not in format:\n                raise ExtractorError('Missing \"url\" key in result (index %d)' % i)\n\n            if format.get('format_id') is None:\n                format['format_id'] = compat_str(i)\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n\n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n\n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if 'ext' not in format:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n\n        # TODO Central sorting goes here\n\n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # wich can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n\n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format_list = []\n            if (self.params.get('outtmpl', DEFAULT_OUTTMPL) != '-' and\n                    info_dict['extractor'] in ['youtube', 'ted'] and\n                    not info_dict.get('is_live')):\n                merger = FFmpegMergerPP(self)\n                if merger.available and merger.can_merge():\n                    req_format_list.append('bestvideo+bestaudio')\n            req_format_list.append('best')\n            req_format = '/'.join(req_format_list)\n        format_selector = self.build_format_selector(req_format)\n        formats_to_download = list(format_selector(formats))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n                                 expected=True)\n\n        if download:\n            if len(formats_to_download) > 1:\n                self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n            for format in formats_to_download:\n                new_info = dict(info_dict)\n                new_info.update(format)\n                self.process_info(new_info)\n        # We update the info dict with the best quality format (backwards compatibility)\n        info_dict.update(formats_to_download[-1])\n        return info_dict",
        "begin_line": 1202,
        "end_line": 1348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002053388090349076,
            "pseudo_dstar_susp": 0.0021321961620469083,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0021321961620469083,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.process_subtitles#1350",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.process_subtitles(self, video_id, normal_subtitles, automatic_captions)",
        "snippet": "    def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n        \"\"\"Select the requested subtitles and their format\"\"\"\n        available_subs = {}\n        if normal_subtitles and self.params.get('writesubtitles'):\n            available_subs.update(normal_subtitles)\n        if automatic_captions and self.params.get('writeautomaticsub'):\n            for lang, cap_info in automatic_captions.items():\n                if lang not in available_subs:\n                    available_subs[lang] = cap_info\n\n        if (not self.params.get('writesubtitles') and not\n                self.params.get('writeautomaticsub') or not\n                available_subs):\n            return None\n\n        if self.params.get('allsubtitles', False):\n            requested_langs = available_subs.keys()\n        else:\n            if self.params.get('subtitleslangs', False):\n                requested_langs = self.params.get('subtitleslangs')\n            elif 'en' in available_subs:\n                requested_langs = ['en']\n            else:\n                requested_langs = [list(available_subs.keys())[0]]\n\n        formats_query = self.params.get('subtitlesformat', 'best')\n        formats_preference = formats_query.split('/') if formats_query else []\n        subs = {}\n        for lang in requested_langs:\n            formats = available_subs.get(lang)\n            if formats is None:\n                self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n                continue\n            for ext in formats_preference:\n                if ext == 'best':\n                    f = formats[-1]\n                    break\n                matches = list(filter(lambda f: f['ext'] == ext, formats))\n                if matches:\n                    f = matches[-1]\n                    break\n            else:\n                f = formats[-1]\n                self.report_warning(\n                    'No subtitle format found matching \"%s\" for language %s, '\n                    'using %s' % (formats_query, lang, f['ext']))\n            subs[lang] = f\n        return subs",
        "begin_line": 1350,
        "end_line": 1397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021551724137931034,
            "pseudo_dstar_susp": 0.0021321961620469083,
            "pseudo_tarantula_susp": 0.000925925925925926,
            "pseudo_op2_susp": 0.0021321961620469083,
            "pseudo_barinel_susp": 0.0009250693802035153
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.process_info#1399",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.process_info(self, info_dict)",
        "snippet": "    def process_info(self, info_dict):\n        \"\"\"Process a single resolved IE result.\"\"\"\n\n        assert info_dict.get('_type', 'video') == 'video'\n\n        max_downloads = self.params.get('max_downloads')\n        if max_downloads is not None:\n            if self._num_downloads >= int(max_downloads):\n                raise MaxDownloadsReached()\n\n        info_dict['fulltitle'] = info_dict['title']\n        if len(info_dict['title']) > 200:\n            info_dict['title'] = info_dict['title'][:197] + '...'\n\n        if 'format' not in info_dict:\n            info_dict['format'] = info_dict['ext']\n\n        reason = self._match_entry(info_dict, incomplete=False)\n        if reason is not None:\n            self.to_screen('[download] ' + reason)\n            return\n\n        self._num_downloads += 1\n\n        info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n\n        # Forced printings\n        if self.params.get('forcetitle', False):\n            self.to_stdout(info_dict['fulltitle'])\n        if self.params.get('forceid', False):\n            self.to_stdout(info_dict['id'])\n        if self.params.get('forceurl', False):\n            if info_dict.get('requested_formats') is not None:\n                for f in info_dict['requested_formats']:\n                    self.to_stdout(f['url'] + f.get('play_path', ''))\n            else:\n                # For RTMP URLs, also include the playpath\n                self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n        if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n            self.to_stdout(info_dict['thumbnail'])\n        if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n            self.to_stdout(info_dict['description'])\n        if self.params.get('forcefilename', False) and filename is not None:\n            self.to_stdout(filename)\n        if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n            self.to_stdout(formatSeconds(info_dict['duration']))\n        if self.params.get('forceformat', False):\n            self.to_stdout(info_dict['format'])\n        if self.params.get('forcejson', False):\n            self.to_stdout(json.dumps(info_dict))\n\n        # Do nothing else if in simulate mode\n        if self.params.get('simulate', False):\n            return\n\n        if filename is None:\n            return\n\n        try:\n            dn = os.path.dirname(sanitize_path(encodeFilename(filename)))\n            if dn and not os.path.exists(dn):\n                os.makedirs(dn)\n        except (OSError, IOError) as err:\n            self.report_error('unable to create directory ' + compat_str(err))\n            return\n\n        if self.params.get('writedescription', False):\n            descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n                self.to_screen('[info] Video description is already present')\n            elif info_dict.get('description') is None:\n                self.report_warning('There\\'s no description to write.')\n            else:\n                try:\n                    self.to_screen('[info] Writing video description to: ' + descfn)\n                    with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                        descfile.write(info_dict['description'])\n                except (OSError, IOError):\n                    self.report_error('Cannot write description file ' + descfn)\n                    return\n\n        if self.params.get('writeannotations', False):\n            annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n                self.to_screen('[info] Video annotations are already present')\n            else:\n                try:\n                    self.to_screen('[info] Writing video annotations to: ' + annofn)\n                    with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                        annofile.write(info_dict['annotations'])\n                except (KeyError, TypeError):\n                    self.report_warning('There are no annotations to write.')\n                except (OSError, IOError):\n                    self.report_error('Cannot write annotations file: ' + annofn)\n                    return\n\n        subtitles_are_requested = any([self.params.get('writesubtitles', False),\n                                       self.params.get('writeautomaticsub')])\n\n        if subtitles_are_requested and info_dict.get('requested_subtitles'):\n            # subtitles download errors are already managed as troubles in relevant IE\n            # that way it will silently go on when used with unsupporting IE\n            subtitles = info_dict['requested_subtitles']\n            ie = self.get_info_extractor(info_dict['extractor_key'])\n            for sub_lang, sub_info in subtitles.items():\n                sub_format = sub_info['ext']\n                if sub_info.get('data') is not None:\n                    sub_data = sub_info['data']\n                else:\n                    try:\n                        sub_data = ie._download_webpage(\n                            sub_info['url'], info_dict['id'], note=False)\n                    except ExtractorError as err:\n                        self.report_warning('Unable to download subtitle for \"%s\": %s' %\n                                            (sub_lang, compat_str(err.cause)))\n                        continue\n                try:\n                    sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n                    if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                        self.to_screen('[info] Video subtitle %s.%s is already_present' % (sub_lang, sub_format))\n                    else:\n                        self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                        with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8') as subfile:\n                            subfile.write(sub_data)\n                except (OSError, IOError):\n                    self.report_error('Cannot write subtitles file ' + sub_filename)\n                    return\n\n        if self.params.get('writeinfojson', False):\n            infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n                self.to_screen('[info] Video description metadata is already present')\n            else:\n                self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n                try:\n                    write_json_file(self.filter_requested_info(info_dict), infofn)\n                except (OSError, IOError):\n                    self.report_error('Cannot write metadata to JSON file ' + infofn)\n                    return\n\n        self._write_thumbnails(info_dict, filename)\n\n        if not self.params.get('skip_download', False):\n            try:\n                def dl(name, info):\n                    fd = get_suitable_downloader(info, self.params)(self, self.params)\n                    for ph in self._progress_hooks:\n                        fd.add_progress_hook(ph)\n                    if self.params.get('verbose'):\n                        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                    return fd.download(name, info)\n\n                if info_dict.get('requested_formats') is not None:\n                    downloaded = []\n                    success = True\n                    merger = FFmpegMergerPP(self)\n                    if not merger.available:\n                        postprocessors = []\n                        self.report_warning('You have requested multiple '\n                                            'formats but ffmpeg or avconv are not installed.'\n                                            ' The formats won\\'t be merged.')\n                    else:\n                        postprocessors = [merger]\n\n                    def compatible_formats(formats):\n                        video, audio = formats\n                        # Check extension\n                        video_ext, audio_ext = audio.get('ext'), video.get('ext')\n                        if video_ext and audio_ext:\n                            COMPATIBLE_EXTS = (\n                                ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v'),\n                                ('webm')\n                            )\n                            for exts in COMPATIBLE_EXTS:\n                                if video_ext in exts and audio_ext in exts:\n                                    return True\n                        # TODO: Check acodec/vcodec\n                        return False\n\n                    filename_real_ext = os.path.splitext(filename)[1][1:]\n                    filename_wo_ext = (\n                        os.path.splitext(filename)[0]\n                        if filename_real_ext == info_dict['ext']\n                        else filename)\n                    requested_formats = info_dict['requested_formats']\n                    if self.params.get('merge_output_format') is None and not compatible_formats(requested_formats):\n                        info_dict['ext'] = 'mkv'\n                        self.report_warning(\n                            'Requested formats are incompatible for merge and will be merged into mkv.')\n                    # Ensure filename always has a correct extension for successful merge\n                    filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                    if os.path.exists(encodeFilename(filename)):\n                        self.to_screen(\n                            '[download] %s has already been downloaded and '\n                            'merged' % filename)\n                    else:\n                        for f in requested_formats:\n                            new_info = dict(info_dict)\n                            new_info.update(f)\n                            fname = self.prepare_filename(new_info)\n                            fname = prepend_extension(fname, 'f%s' % f['format_id'], new_info['ext'])\n                            downloaded.append(fname)\n                            partial_success = dl(fname, new_info)\n                            success = success and partial_success\n                        info_dict['__postprocessors'] = postprocessors\n                        info_dict['__files_to_merge'] = downloaded\n                else:\n                    # Just a single file\n                    success = dl(filename, info_dict)\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_error('unable to download video data: %s' % str(err))\n                return\n            except (OSError, IOError) as err:\n                raise UnavailableVideoError(err)\n            except (ContentTooShortError, ) as err:\n                self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n                return\n\n            if success:\n                # Fixup content\n                fixup_policy = self.params.get('fixup')\n                if fixup_policy is None:\n                    fixup_policy = 'detect_or_warn'\n\n                stretched_ratio = info_dict.get('stretched_ratio')\n                if stretched_ratio is not None and stretched_ratio != 1:\n                    if fixup_policy == 'warn':\n                        self.report_warning('%s: Non-uniform pixel ratio (%s)' % (\n                            info_dict['id'], stretched_ratio))\n                    elif fixup_policy == 'detect_or_warn':\n                        stretched_pp = FFmpegFixupStretchedPP(self)\n                        if stretched_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(stretched_pp)\n                        else:\n                            self.report_warning(\n                                '%s: Non-uniform pixel ratio (%s). Install ffmpeg or avconv to fix this automatically.' % (\n                                    info_dict['id'], stretched_ratio))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                if info_dict.get('requested_formats') is None and info_dict.get('container') == 'm4a_dash':\n                    if fixup_policy == 'warn':\n                        self.report_warning('%s: writing DASH m4a. Only some players support this container.' % (\n                            info_dict['id']))\n                    elif fixup_policy == 'detect_or_warn':\n                        fixup_pp = FFmpegFixupM4aPP(self)\n                        if fixup_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(fixup_pp)\n                        else:\n                            self.report_warning(\n                                '%s: writing DASH m4a. Only some players support this container. Install ffmpeg or avconv to fix this automatically.' % (\n                                    info_dict['id']))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                try:\n                    self.post_process(filename, info_dict)\n                except (PostProcessingError) as err:\n                    self.report_error('postprocessing: %s' % str(err))\n                    return\n                self.record_download_archive(info_dict)",
        "begin_line": 1399,
        "end_line": 1661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002,
            "pseudo_dstar_susp": 0.0017241379310344827,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0017241379310344827,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.dl#1543",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.dl(name, info)",
        "snippet": "                def dl(name, info):\n                    fd = get_suitable_downloader(info, self.params)(self, self.params)\n                    for ph in self._progress_hooks:\n                        fd.add_progress_hook(ph)\n                    if self.params.get('verbose'):\n                        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                    return fd.download(name, info)",
        "begin_line": 1543,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013513513513513514,
            "pseudo_dstar_susp": 0.0014265335235378032,
            "pseudo_tarantula_susp": 0.000700770847932726,
            "pseudo_op2_susp": 0.0014265335235378032,
            "pseudo_barinel_susp": 0.000700770847932726
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.download#1663",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.download(self, url_list)",
        "snippet": "    def download(self, url_list):\n        \"\"\"Download a given list of URLs.\"\"\"\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n        if (len(url_list) > 1 and\n                '%' not in outtmpl and\n                self.params.get('max_downloads') != 1):\n            raise SameFileError(outtmpl)\n\n        for url in url_list:\n            try:\n                # It also downloads the videos\n                res = self.extract_info(\n                    url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n            except UnavailableVideoError:\n                self.report_error('unable to download video')\n            except MaxDownloadsReached:\n                self.to_screen('[info] Maximum number of downloaded files reached.')\n                raise\n            else:\n                if self.params.get('dump_single_json', False):\n                    self.to_stdout(json.dumps(res))\n\n        return self._download_retcode",
        "begin_line": 1663,
        "end_line": 1685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.filter_requested_info#1705",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.filter_requested_info(info_dict)",
        "snippet": "    def filter_requested_info(info_dict):\n        return dict(\n            (k, v) for k, v in info_dict.items()\n            if k not in ['requested_formats', 'requested_subtitles'])",
        "begin_line": 1705,
        "end_line": 1708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002,
            "pseudo_dstar_susp": 0.0017241379310344827,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0017241379310344827,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.post_process#1710",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.post_process(self, filename, ie_info)",
        "snippet": "    def post_process(self, filename, ie_info):\n        \"\"\"Run all the postprocessors on the given file.\"\"\"\n        info = dict(ie_info)\n        info['filepath'] = filename\n        pps_chain = []\n        if ie_info.get('__postprocessors') is not None:\n            pps_chain.extend(ie_info['__postprocessors'])\n        pps_chain.extend(self._pps)\n        for pp in pps_chain:\n            files_to_delete = []\n            try:\n                files_to_delete, info = pp.run(info)\n            except PostProcessingError as e:\n                self.report_error(e.msg)\n            if files_to_delete and not self.params.get('keepvideo', False):\n                for old_filename in files_to_delete:\n                    self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                    try:\n                        os.remove(encodeFilename(old_filename))\n                    except (IOError, OSError):\n                        self.report_warning('Unable to remove downloaded original file')",
        "begin_line": 1710,
        "end_line": 1730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011627906976744186,
            "pseudo_dstar_susp": 0.0012135922330097086,
            "pseudo_tarantula_susp": 0.0005701254275940707,
            "pseudo_op2_susp": 0.0012135922330097086,
            "pseudo_barinel_susp": 0.0005701254275940707
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.in_download_archive#1743",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.in_download_archive(self, info_dict)",
        "snippet": "    def in_download_archive(self, info_dict):\n        fn = self.params.get('download_archive')\n        if fn is None:\n            return False\n\n        vid_id = self._make_archive_id(info_dict)\n        if vid_id is None:\n            return False  # Incomplete video information\n\n        try:\n            with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n                for line in archive_file:\n                    if line.strip() == vid_id:\n                        return True\n        except IOError as ioe:\n            if ioe.errno != errno.ENOENT:\n                raise\n        return False",
        "begin_line": 1743,
        "end_line": 1760,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002506265664160401,
            "pseudo_dstar_susp": 0.002506265664160401,
            "pseudo_tarantula_susp": 0.0008598452278589854,
            "pseudo_op2_susp": 0.002506265664160401,
            "pseudo_barinel_susp": 0.0008598452278589854
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.record_download_archive#1762",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.record_download_archive(self, info_dict)",
        "snippet": "    def record_download_archive(self, info_dict):\n        fn = self.params.get('download_archive')\n        if fn is None:\n            return\n        vid_id = self._make_archive_id(info_dict)\n        assert vid_id\n        with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n            archive_file.write(vid_id + '\\n')",
        "begin_line": 1762,
        "end_line": 1769,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011806375442739079,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0012330456226880395,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.format_resolution#1772",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.format_resolution(format, default='unknown')",
        "snippet": "    def format_resolution(format, default='unknown'):\n        if format.get('vcodec') == 'none':\n            return 'audio only'\n        if format.get('resolution') is not None:\n            return format['resolution']\n        if format.get('height') is not None:\n            if format.get('width') is not None:\n                res = '%sx%s' % (format['width'], format['height'])\n            else:\n                res = '%sp' % format['height']\n        elif format.get('width') is not None:\n            res = '?x%d' % format['width']\n        else:\n            res = default\n        return res",
        "begin_line": 1772,
        "end_line": 1786,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016051364365971107,
            "pseudo_dstar_susp": 0.0017857142857142857,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.0017857142857142857,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._format_note#1788",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._format_note(self, fdict)",
        "snippet": "    def _format_note(self, fdict):\n        res = ''\n        if fdict.get('ext') in ['f4f', 'f4m']:\n            res += '(unsupported) '\n        if fdict.get('format_note') is not None:\n            res += fdict['format_note'] + ' '\n        if fdict.get('tbr') is not None:\n            res += '%4dk ' % fdict['tbr']\n        if fdict.get('container') is not None:\n            if res:\n                res += ', '\n            res += '%s container' % fdict['container']\n        if (fdict.get('vcodec') is not None and\n                fdict.get('vcodec') != 'none'):\n            if res:\n                res += ', '\n            res += fdict['vcodec']\n            if fdict.get('vbr') is not None:\n                res += '@'\n        elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n            res += 'video@'\n        if fdict.get('vbr') is not None:\n            res += '%4dk' % fdict['vbr']\n        if fdict.get('fps') is not None:\n            res += ', %sfps' % fdict['fps']\n        if fdict.get('acodec') is not None:\n            if res:\n                res += ', '\n            if fdict['acodec'] == 'none':\n                res += 'video only'\n            else:\n                res += '%-5s' % fdict['acodec']\n        elif fdict.get('abr') is not None:\n            if res:\n                res += ', '\n            res += 'audio'\n        if fdict.get('abr') is not None:\n            res += '@%3dk' % fdict['abr']\n        if fdict.get('asr') is not None:\n            res += ' (%5dHz)' % fdict['asr']\n        if fdict.get('filesize') is not None:\n            if res:\n                res += ', '\n            res += format_bytes(fdict['filesize'])\n        elif fdict.get('filesize_approx') is not None:\n            if res:\n                res += ', '\n            res += '~' + format_bytes(fdict['filesize_approx'])\n        return res",
        "begin_line": 1788,
        "end_line": 1836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.urlopen#1880",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.urlopen(self, req)",
        "snippet": "    def urlopen(self, req):\n        \"\"\" Start an HTTP download \"\"\"\n        if isinstance(req, compat_basestring):\n            req = sanitized_Request(req)\n        return self._opener.open(req, timeout=self._socket_timeout)",
        "begin_line": 1880,
        "end_line": 1884,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.04,
            "pseudo_dstar_susp": 0.014925373134328358,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.014925373134328358,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.print_debug_header#1886",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.print_debug_header(self)",
        "snippet": "    def print_debug_header(self):\n        if not self.params.get('verbose'):\n            return\n\n        if type('') is not compat_str:\n            # Python 2.6 on SLES11 SP1 (https://github.com/rg3/youtube-dl/issues/3326)\n            self.report_warning(\n                'Your Python is broken! Update to a newer and supported version')\n\n        stdout_encoding = getattr(\n            sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n        encoding_str = (\n            '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (\n                locale.getpreferredencoding(),\n                sys.getfilesystemencoding(),\n                stdout_encoding,\n                self.get_encoding()))\n        write_string(encoding_str, encoding=None)\n\n        self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n        try:\n            sp = subprocess.Popen(\n                ['git', 'rev-parse', '--short', 'HEAD'],\n                stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                cwd=os.path.dirname(os.path.abspath(__file__)))\n            out, err = sp.communicate()\n            out = out.decode().strip()\n            if re.match('[0-9a-f]+', out):\n                self._write_string('[debug] Git HEAD: ' + out + '\\n')\n        except Exception:\n            try:\n                sys.exc_clear()\n            except Exception:\n                pass\n        self._write_string('[debug] Python version %s - %s\\n' % (\n            platform.python_version(), platform_name()))\n\n        exe_versions = FFmpegPostProcessor.get_versions(self)\n        exe_versions['rtmpdump'] = rtmpdump_version()\n        exe_str = ', '.join(\n            '%s %s' % (exe, v)\n            for exe, v in sorted(exe_versions.items())\n            if v\n        )\n        if not exe_str:\n            exe_str = 'none'\n        self._write_string('[debug] exe versions: %s\\n' % exe_str)\n\n        proxy_map = {}\n        for handler in self._opener.handlers:\n            if hasattr(handler, 'proxies'):\n                proxy_map.update(handler.proxies)\n        self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n\n        if self.params.get('call_home', False):\n            ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n            self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n            latest_version = self.urlopen(\n                'https://yt-dl.org/latest/version').read().decode('utf-8')\n            if version_tuple(latest_version) > version_tuple(__version__):\n                self.report_warning(\n                    'You are using an outdated version (newest version: %s)! '\n                    'See https://yt-dl.org/update if you need help updating.' %\n                    latest_version)",
        "begin_line": 1886,
        "end_line": 1949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006138735420503376,
            "pseudo_dstar_susp": 0.0006385696040868455,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006385696040868455,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._setup_opener#1951",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._setup_opener(self)",
        "snippet": "    def _setup_opener(self):\n        timeout_val = self.params.get('socket_timeout')\n        self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n\n        opts_cookiefile = self.params.get('cookiefile')\n        opts_proxy = self.params.get('proxy')\n\n        if opts_cookiefile is None:\n            self.cookiejar = compat_cookiejar.CookieJar()\n        else:\n            self.cookiejar = compat_cookiejar.MozillaCookieJar(\n                opts_cookiefile)\n            if os.access(opts_cookiefile, os.R_OK):\n                self.cookiejar.load()\n\n        cookie_processor = YoutubeDLCookieProcessor(self.cookiejar)\n        if opts_proxy is not None:\n            if opts_proxy == '':\n                proxies = {}\n            else:\n                proxies = {'http': opts_proxy, 'https': opts_proxy}\n        else:\n            proxies = compat_urllib_request.getproxies()\n            # Set HTTPS proxy to HTTP one if given (https://github.com/rg3/youtube-dl/issues/805)\n            if 'http' in proxies and 'https' not in proxies:\n                proxies['https'] = proxies['http']\n        proxy_handler = PerRequestProxyHandler(proxies)\n\n        debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n        https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n        ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n        data_handler = compat_urllib_request_DataHandler()\n        opener = compat_urllib_request.build_opener(\n            proxy_handler, https_handler, cookie_processor, ydlh, data_handler)\n\n        # Delete the default user-agent header, which would otherwise apply in\n        # cases where our custom HTTP handler doesn't come into play\n        # (See https://github.com/rg3/youtube-dl/issues/1309 for details)\n        opener.addheaders = []\n        self._opener = opener",
        "begin_line": 1951,
        "end_line": 1990,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011494252873563218,
            "pseudo_dstar_susp": 0.03571428571428571,
            "pseudo_tarantula_susp": 0.0012578616352201257,
            "pseudo_op2_susp": 0.03571428571428571,
            "pseudo_barinel_susp": 0.0012578616352201257
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL.get_encoding#2002",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL.get_encoding(self)",
        "snippet": "    def get_encoding(self):\n        encoding = self.params.get('encoding')\n        if encoding is None:\n            encoding = preferredencoding()\n        return encoding",
        "begin_line": 2002,
        "end_line": 2006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.YoutubeDL.YoutubeDL._write_thumbnails#2008",
        "src_path": "youtube_dl/YoutubeDL.py",
        "class_name": "youtube_dl.YoutubeDL.YoutubeDL",
        "signature": "youtube_dl.YoutubeDL.YoutubeDL._write_thumbnails(self, info_dict, filename)",
        "snippet": "    def _write_thumbnails(self, info_dict, filename):\n        if self.params.get('writethumbnail', False):\n            thumbnails = info_dict.get('thumbnails')\n            if thumbnails:\n                thumbnails = [thumbnails[-1]]\n        elif self.params.get('write_all_thumbnails', False):\n            thumbnails = info_dict.get('thumbnails')\n        else:\n            return\n\n        if not thumbnails:\n            # No thumbnails present, so return immediately\n            return\n\n        for t in thumbnails:\n            thumb_ext = determine_ext(t['url'], 'jpg')\n            suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n            thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n            t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n                self.to_screen('[%s] %s: Thumbnail %sis already present' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            else:\n                self.to_screen('[%s] %s: Downloading thumbnail %s...' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id))\n                try:\n                    uf = self.urlopen(t['url'])\n                    with open(encodeFilename(thumb_filename), 'wb') as thumbf:\n                        shutil.copyfileobj(uf, thumbf)\n                    self.to_screen('[%s] %s: Writing thumbnail %sto: %s' %\n                                   (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n                except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                    self.report_warning('Unable to download thumbnail \"%s\": %s' %\n                                        (t['url'], compat_str(err)))",
        "begin_line": 2008,
        "end_line": 2042,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019267822736030828,
            "pseudo_dstar_susp": 0.0016750418760469012,
            "pseudo_tarantula_susp": 0.0008264462809917355,
            "pseudo_op2_susp": 0.0016750418760469012,
            "pseudo_barinel_susp": 0.0008264462809917355
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.__init__#251",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.__init__(self, downloader=None)",
        "snippet": "    def __init__(self, downloader=None):\n        \"\"\"Constructor. Receives an optional downloader.\"\"\"\n        self._ready = False\n        self.set_downloader(downloader)",
        "begin_line": 251,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.058823529411764705,
            "pseudo_dstar_susp": 0.125,
            "pseudo_tarantula_susp": 0.0011627906976744186,
            "pseudo_op2_susp": 0.125,
            "pseudo_barinel_susp": 0.0011627906976744186
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.suitable#257",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        \"\"\"Receives a URL and returns True if suitable for this IE.\"\"\"\n\n        # This does not use has/getattr intentionally - we want to know whether\n        # we have cached the regexp for *this* class, whereas getattr would also\n        # match the superclass\n        if '_VALID_URL_RE' not in cls.__dict__:\n            cls._VALID_URL_RE = re.compile(cls._VALID_URL)\n        return cls._VALID_URL_RE.match(url) is not None",
        "begin_line": 257,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.013157894736842105,
            "pseudo_dstar_susp": 0.008928571428571428,
            "pseudo_tarantula_susp": 0.0013280212483399733,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0013280212483399733
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._match_id#268",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._match_id(cls, url)",
        "snippet": "    def _match_id(cls, url):\n        if '_VALID_URL_RE' not in cls.__dict__:\n            cls._VALID_URL_RE = re.compile(cls._VALID_URL)\n        m = cls._VALID_URL_RE.match(url)\n        assert m\n        return m.group('id')",
        "begin_line": 268,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0036900369003690036,
            "pseudo_dstar_susp": 0.003663003663003663,
            "pseudo_tarantula_susp": 0.0019723865877712033,
            "pseudo_op2_susp": 0.003663003663003663,
            "pseudo_barinel_susp": 0.0019723865877712033
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.working#276",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.working(cls)",
        "snippet": "    def working(cls):\n        \"\"\"Getter method for _WORKING.\"\"\"\n        return cls._WORKING",
        "begin_line": 276,
        "end_line": 278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006896551724137931,
            "pseudo_dstar_susp": 0.058823529411764705,
            "pseudo_tarantula_susp": 0.0011507479861910242,
            "pseudo_op2_susp": 0.058823529411764705,
            "pseudo_barinel_susp": 0.0011507479861910242
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.initialize#280",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.initialize(self)",
        "snippet": "    def initialize(self):\n        \"\"\"Initializes an instance (authentication, etc).\"\"\"\n        if not self._ready:\n            self._real_initialize()\n            self._ready = True",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.03333333333333333,
            "pseudo_dstar_susp": 0.014084507042253521,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.014084507042253521,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.extract#286",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.extract(self, url)",
        "snippet": "    def extract(self, url):\n        \"\"\"Extracts URL information and returns it in list of dicts.\"\"\"\n        try:\n            self.initialize()\n            return self._real_extract(url)\n        except ExtractorError:\n            raise\n        except compat_http_client.IncompleteRead as e:\n            raise ExtractorError('A network error has occured.', cause=e, expected=True)\n        except (KeyError, StopIteration) as e:\n            raise ExtractorError('An extractor error has occured.', cause=e)",
        "begin_line": 286,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.03333333333333333,
            "pseudo_dstar_susp": 0.014084507042253521,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.014084507042253521,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.set_downloader#298",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.set_downloader(self, downloader)",
        "snippet": "    def set_downloader(self, downloader):\n        \"\"\"Sets the downloader for this IE.\"\"\"\n        self._downloader = downloader",
        "begin_line": 298,
        "end_line": 300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.015151515151515152,
            "pseudo_tarantula_susp": 0.0011961722488038277,
            "pseudo_op2_susp": 0.015151515151515152,
            "pseudo_barinel_susp": 0.0011961722488038277
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._real_initialize#302",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._real_initialize(self)",
        "snippet": "    def _real_initialize(self):\n        \"\"\"Real initialization process. Redefine in subclasses.\"\"\"\n        pass",
        "begin_line": 302,
        "end_line": 304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006289308176100629,
            "pseudo_dstar_susp": 0.00641025641025641,
            "pseudo_tarantula_susp": 0.0013227513227513227,
            "pseudo_op2_susp": 0.00641025641025641,
            "pseudo_barinel_susp": 0.0013227513227513227
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.ie_key#311",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.ie_key(cls)",
        "snippet": "    def ie_key(cls):\n        \"\"\"A string for getting the InfoExtractor with get_info_extractor\"\"\"\n        return compat_str(cls.__name__[:-2])",
        "begin_line": 311,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.014285714285714285,
            "pseudo_dstar_susp": 0.009523809523809525,
            "pseudo_tarantula_susp": 0.001375515818431912,
            "pseudo_op2_susp": 0.009523809523809525,
            "pseudo_barinel_susp": 0.001375515818431912
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.IE_NAME#316",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.IE_NAME(self)",
        "snippet": "    def IE_NAME(self):\n        return compat_str(type(self).__name__[:-2])",
        "begin_line": 316,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0036231884057971015,
            "pseudo_dstar_susp": 0.003676470588235294,
            "pseudo_tarantula_susp": 0.0015552099533437014,
            "pseudo_op2_susp": 0.003676470588235294,
            "pseudo_barinel_susp": 0.0015552099533437014
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._request_webpage#319",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._request_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True)",
        "snippet": "    def _request_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True):\n        \"\"\" Returns the response handle \"\"\"\n        if note is None:\n            self.report_download_webpage(video_id)\n        elif note is not False:\n            if video_id is None:\n                self.to_screen('%s' % (note,))\n            else:\n                self.to_screen('%s: %s' % (video_id, note))\n        try:\n            return self._downloader.urlopen(url_or_request)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            if errnote is False:\n                return False\n            if errnote is None:\n                errnote = 'Unable to download webpage'\n            errmsg = '%s: %s' % (errnote, compat_str(err))\n            if fatal:\n                raise ExtractorError(errmsg, sys.exc_info()[2], cause=err)\n            else:\n                self._downloader.report_warning(errmsg)\n                return False",
        "begin_line": 319,
        "end_line": 340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.04,
            "pseudo_dstar_susp": 0.014925373134328358,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.014925373134328358,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._download_webpage_handle#342",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._download_webpage_handle(self, url_or_request, video_id, note=None, errnote=None, fatal=True, encoding=None)",
        "snippet": "    def _download_webpage_handle(self, url_or_request, video_id, note=None, errnote=None, fatal=True, encoding=None):\n        \"\"\" Returns a tuple (page content as string, URL handle) \"\"\"\n        # Strip hashes from the URL (#1038)\n        if isinstance(url_or_request, (compat_str, str)):\n            url_or_request = url_or_request.partition('#')[0]\n\n        urlh = self._request_webpage(url_or_request, video_id, note, errnote, fatal)\n        if urlh is False:\n            assert not fatal\n            return False\n        content = self._webpage_read_content(urlh, url_or_request, video_id, note, errnote, fatal, encoding=encoding)\n        return (content, urlh)",
        "begin_line": 342,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004048582995951417,
            "pseudo_dstar_susp": 0.003861003861003861,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.003861003861003861,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._guess_encoding_from_content#356",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._guess_encoding_from_content(content_type, webpage_bytes)",
        "snippet": "    def _guess_encoding_from_content(content_type, webpage_bytes):\n        m = re.match(r'[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+\\s*;\\s*charset=(.+)', content_type)\n        if m:\n            encoding = m.group(1)\n        else:\n            m = re.search(br'<meta[^>]+charset=[\\'\"]?([^\\'\")]+)[ /\\'\">]',\n                          webpage_bytes[:1024])\n            if m:\n                encoding = m.group(1).decode('ascii')\n            elif webpage_bytes.startswith(b'\\xff\\xfe'):\n                encoding = 'utf-16'\n            else:\n                encoding = 'utf-8'\n\n        return encoding",
        "begin_line": 356,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0038910505836575876,
            "pseudo_tarantula_susp": 0.002288329519450801,
            "pseudo_op2_susp": 0.0038910505836575876,
            "pseudo_barinel_susp": 0.002288329519450801
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._webpage_read_content#372",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._webpage_read_content(self, urlh, url_or_request, video_id, note=None, errnote=None, fatal=True, prefix=None, encoding=None)",
        "snippet": "    def _webpage_read_content(self, urlh, url_or_request, video_id, note=None, errnote=None, fatal=True, prefix=None, encoding=None):\n        content_type = urlh.headers.get('Content-Type', '')\n        webpage_bytes = urlh.read()\n        if prefix is not None:\n            webpage_bytes = prefix + webpage_bytes\n        if not encoding:\n            encoding = self._guess_encoding_from_content(content_type, webpage_bytes)\n        if self._downloader.params.get('dump_intermediate_pages', False):\n            try:\n                url = url_or_request.get_full_url()\n            except AttributeError:\n                url = url_or_request\n            self.to_screen('Dumping request to ' + url)\n            dump = base64.b64encode(webpage_bytes).decode('ascii')\n            self._downloader.to_screen(dump)\n        if self._downloader.params.get('write_pages', False):\n            try:\n                url = url_or_request.get_full_url()\n            except AttributeError:\n                url = url_or_request\n            basen = '%s_%s' % (video_id, url)\n            if len(basen) > 240:\n                h = '___' + hashlib.md5(basen.encode('utf-8')).hexdigest()\n                basen = basen[:240 - len(h)] + h\n            raw_filename = basen + '.dump'\n            filename = sanitize_filename(raw_filename, restricted=True)\n            self.to_screen('Saving request to ' + filename)\n            # Working around MAX_PATH limitation on Windows (see\n            # http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx)\n            if os.name == 'nt':\n                absfilepath = os.path.abspath(filename)\n                if len(absfilepath) > 259:\n                    filename = '\\\\\\\\?\\\\' + absfilepath\n            with open(filename, 'wb') as outf:\n                outf.write(webpage_bytes)\n\n        try:\n            content = webpage_bytes.decode(encoding, 'replace')\n        except LookupError:\n            content = webpage_bytes.decode('utf-8', 'replace')\n\n        if ('<title>Access to this site is blocked</title>' in content and\n                'Websense' in content[:512]):\n            msg = 'Access to this webpage has been blocked by Websense filtering software in your network.'\n            blocked_iframe = self._html_search_regex(\n                r'<iframe src=\"([^\"]+)\"', content,\n                'Websense information URL', default=None)\n            if blocked_iframe:\n                msg += ' Visit %s for more details' % blocked_iframe\n            raise ExtractorError(msg, expected=True)\n        if '<title>The URL you requested has been blocked</title>' in content[:512]:\n            msg = (\n                'Access to this webpage has been blocked by Indian censorship. '\n                'Use a VPN or proxy server (with --proxy) to route around it.')\n            block_msg = self._html_search_regex(\n                r'</h1><p>(.*?)</p>',\n                content, 'block message', default=None)\n            if block_msg:\n                msg += ' (Message: \"%s\")' % block_msg.replace('\\n', ' ')\n            raise ExtractorError(msg, expected=True)\n\n        return content",
        "begin_line": 372,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004016064257028112,
            "pseudo_dstar_susp": 0.004032258064516129,
            "pseudo_tarantula_susp": 0.001607717041800643,
            "pseudo_op2_susp": 0.004032258064516129,
            "pseudo_barinel_susp": 0.001607717041800643
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._download_webpage#435",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._download_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True, tries=1, timeout=5, encoding=None)",
        "snippet": "    def _download_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True, tries=1, timeout=5, encoding=None):\n        \"\"\" Returns the data of the page as a string \"\"\"\n        success = False\n        try_count = 0\n        while success is False:\n            try:\n                res = self._download_webpage_handle(url_or_request, video_id, note, errnote, fatal, encoding=encoding)\n                success = True\n            except compat_http_client.IncompleteRead as e:\n                try_count += 1\n                if try_count >= tries:\n                    raise e\n                self._sleep(timeout, video_id)\n        if res is False:\n            return res\n        else:\n            content, _ = res\n            return content",
        "begin_line": 435,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011904761904761904,
            "pseudo_dstar_susp": 0.006578947368421052,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.006578947368421052,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._download_xml#454",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._download_xml(self, url_or_request, video_id, note='Downloading XML', errnote='Unable to download XML', transform_source=None, fatal=True, encoding=None)",
        "snippet": "    def _download_xml(self, url_or_request, video_id,\n                      note='Downloading XML', errnote='Unable to download XML',\n                      transform_source=None, fatal=True, encoding=None):\n        \"\"\"Return the xml as an xml.etree.ElementTree.Element\"\"\"\n        xml_string = self._download_webpage(\n            url_or_request, video_id, note, errnote, fatal=fatal, encoding=encoding)\n        if xml_string is False:\n            return xml_string\n        if transform_source:\n            xml_string = transform_source(xml_string)\n        return compat_etree_fromstring(xml_string.encode('utf-8'))",
        "begin_line": 454,
        "end_line": 464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015151515151515152,
            "pseudo_dstar_susp": 0.0014792899408284023,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0014792899408284023,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._download_json#466",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._download_json(self, url_or_request, video_id, note='Downloading JSON metadata', errnote='Unable to download JSON metadata', transform_source=None, fatal=True, encoding=None)",
        "snippet": "    def _download_json(self, url_or_request, video_id,\n                       note='Downloading JSON metadata',\n                       errnote='Unable to download JSON metadata',\n                       transform_source=None,\n                       fatal=True, encoding=None):\n        json_string = self._download_webpage(\n            url_or_request, video_id, note, errnote, fatal=fatal,\n            encoding=encoding)\n        if (not fatal) and json_string is False:\n            return None\n        return self._parse_json(\n            json_string, video_id, transform_source=transform_source, fatal=fatal)",
        "begin_line": 466,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0034129692832764505,
            "pseudo_dstar_susp": 0.003367003367003367,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.003367003367003367,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._parse_json#479",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._parse_json(self, json_string, video_id, transform_source=None, fatal=True)",
        "snippet": "    def _parse_json(self, json_string, video_id, transform_source=None, fatal=True):\n        if transform_source:\n            json_string = transform_source(json_string)\n        try:\n            return json.loads(json_string)\n        except ValueError as ve:\n            errmsg = '%s: Failed to parse JSON ' % video_id\n            if fatal:\n                raise ExtractorError(errmsg, cause=ve)\n            else:\n                self.report_warning(errmsg + str(ve))",
        "begin_line": 479,
        "end_line": 489,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032679738562091504,
            "pseudo_dstar_susp": 0.0029850746268656717,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0029850746268656717,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.to_screen#496",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.to_screen(self, msg)",
        "snippet": "    def to_screen(self, msg):\n        \"\"\"Print msg to screen, prefixing it with '[ie_name]'\"\"\"\n        self._downloader.to_screen('[%s] %s' % (self.IE_NAME, msg))",
        "begin_line": 496,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.03333333333333333,
            "pseudo_dstar_susp": 0.014084507042253521,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.014084507042253521,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.report_download_webpage#504",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.report_download_webpage(self, video_id)",
        "snippet": "    def report_download_webpage(self, video_id):\n        \"\"\"Report webpage download.\"\"\"\n        self.to_screen('%s: Downloading webpage' % video_id)",
        "begin_line": 504,
        "end_line": 506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004081632653061225,
            "pseudo_dstar_susp": 0.004081632653061225,
            "pseudo_tarantula_susp": 0.0016638935108153079,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.0016638935108153079
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.report_age_confirmation#508",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.report_age_confirmation(self)",
        "snippet": "    def report_age_confirmation(self):\n        \"\"\"Report attempt to confirm age.\"\"\"\n        self.to_screen('Confirming age')",
        "begin_line": 508,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000847457627118644,
            "pseudo_dstar_susp": 0.0008333333333333334,
            "pseudo_tarantula_susp": 0.002325581395348837,
            "pseudo_op2_susp": 0.0008333333333333334,
            "pseudo_barinel_susp": 0.002325581395348837
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.url_result#530",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.url_result(url, ie=None, video_id=None, video_title=None)",
        "snippet": "    def url_result(url, ie=None, video_id=None, video_title=None):\n        \"\"\"Returns a URL that points to a page that should be processed\"\"\"\n        # TODO: ie should be the class used for getting the info\n        video_info = {'_type': 'url',\n                      'url': url,\n                      'ie_key': ie}\n        if video_id is not None:\n            video_info['id'] = video_id\n        if video_title is not None:\n            video_info['title'] = video_title\n        return video_info",
        "begin_line": 530,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022026431718061676,
            "pseudo_dstar_susp": 0.0022271714922048997,
            "pseudo_tarantula_susp": 0.0007698229407236335,
            "pseudo_op2_susp": 0.0022271714922048997,
            "pseudo_barinel_susp": 0.0007698229407236335
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.playlist_result#543",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.playlist_result(entries, playlist_id=None, playlist_title=None, playlist_description=None)",
        "snippet": "    def playlist_result(entries, playlist_id=None, playlist_title=None, playlist_description=None):\n        \"\"\"Returns a playlist\"\"\"\n        video_info = {'_type': 'playlist',\n                      'entries': entries}\n        if playlist_id:\n            video_info['id'] = playlist_id\n        if playlist_title:\n            video_info['title'] = playlist_title\n        if playlist_description:\n            video_info['description'] = playlist_description\n        return video_info",
        "begin_line": 543,
        "end_line": 553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014245014245014246,
            "pseudo_dstar_susp": 0.0013605442176870747,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0013605442176870747,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._search_regex#555",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None)",
        "snippet": "    def _search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n        \"\"\"\n        Perform a regex search on the given string, using a single or a list of\n        patterns returning the first matching group.\n        In case of failure return a default value or raise a WARNING or a\n        RegexNotFoundError, depending on fatal, specifying the field name.\n        \"\"\"\n        if isinstance(pattern, (str, compat_str, compiled_regex_type)):\n            mobj = re.search(pattern, string, flags)\n        else:\n            for p in pattern:\n                mobj = re.search(p, string, flags)\n                if mobj:\n                    break\n\n        if not self._downloader.params.get('no_color') and os.name != 'nt' and sys.stderr.isatty():\n            _name = '\\033[0;34m%s\\033[0m' % name\n        else:\n            _name = name\n\n        if mobj:\n            if group is None:\n                # return the first matching group\n                return next(g for g in mobj.groups() if g is not None)\n            else:\n                return mobj.group(group)\n        elif default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            raise RegexNotFoundError('Unable to extract %s' % _name)\n        else:\n            self._downloader.report_warning('unable to extract %s' % _name + bug_reports_message())\n            return None",
        "begin_line": 555,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035714285714285713,
            "pseudo_dstar_susp": 0.0035587188612099642,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0035587188612099642,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._html_search_regex#589",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._html_search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None)",
        "snippet": "    def _html_search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n        \"\"\"\n        Like _search_regex, but strips HTML tags and unescapes entities.\n        \"\"\"\n        res = self._search_regex(pattern, string, name, default, fatal, flags, group)\n        if res:\n            return clean_html(res).strip()\n        else:\n            return res",
        "begin_line": 589,
        "end_line": 597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0033783783783783786,
            "pseudo_dstar_susp": 0.0033444816053511705,
            "pseudo_tarantula_susp": 0.0010615711252653928,
            "pseudo_op2_susp": 0.0033444816053511705,
            "pseudo_barinel_susp": 0.0010615711252653928
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._get_login_info#599",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._get_login_info(self)",
        "snippet": "    def _get_login_info(self):\n        \"\"\"\n        Get the login info as (username, password)\n        It will look in the netrc file using the _NETRC_MACHINE value\n        If there's no info available, return (None, None)\n        \"\"\"\n        if self._downloader is None:\n            return (None, None)\n\n        username = None\n        password = None\n        downloader_params = self._downloader.params\n\n        # Attempt to use provided username and password or .netrc data\n        if downloader_params.get('username', None) is not None:\n            username = downloader_params['username']\n            password = downloader_params['password']\n        elif downloader_params.get('usenetrc', False):\n            try:\n                info = netrc.netrc().authenticators(self._NETRC_MACHINE)\n                if info is not None:\n                    username = info[0]\n                    password = info[2]\n                else:\n                    raise netrc.NetrcParseError('No authenticators for %s' % self._NETRC_MACHINE)\n            except (IOError, netrc.NetrcParseError) as err:\n                self._downloader.report_warning('parsing .netrc: %s' % compat_str(err))\n\n        return (username, password)",
        "begin_line": 599,
        "end_line": 627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002890173410404624,
            "pseudo_dstar_susp": 0.002421307506053269,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.002421307506053269,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_regexes#647",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_regexes(prop)",
        "snippet": "    def _og_regexes(prop):\n        content_re = r'content=(?:\"([^\"]+?)\"|\\'([^\\']+?)\\'|\\s*([^\\s\"\\'=<>`]+?))'\n        property_re = (r'(?:name|property)=(?:\\'og:%(prop)s\\'|\"og:%(prop)s\"|\\s*og:%(prop)s\\b)'\n                       % {'prop': re.escape(prop)})\n        template = r'<meta[^>]+?%s[^>]+?%s'\n        return [\n            template % (property_re, content_re),\n            template % (content_re, property_re),\n        ]",
        "begin_line": 647,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024449877750611247,
            "pseudo_dstar_susp": 0.0017761989342806395,
            "pseudo_tarantula_susp": 0.0016181229773462784,
            "pseudo_op2_susp": 0.0017761989342806395,
            "pseudo_barinel_susp": 0.0016181229773462784
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._meta_regex#658",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._meta_regex(prop)",
        "snippet": "    def _meta_regex(prop):\n        return r'''(?isx)<meta\n                    (?=[^>]+(?:itemprop|name|property|id|http-equiv)=([\"\\']?)%s\\1)\n                    [^>]+?content=([\"\\'])(?P<content>.*?)\\2''' % re.escape(prop)",
        "begin_line": 658,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.001326259946949602,
            "pseudo_tarantula_susp": 0.0013679890560875513,
            "pseudo_op2_susp": 0.001326259946949602,
            "pseudo_barinel_susp": 0.0013679890560875513
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_search_property#663",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_search_property(self, prop, html, name=None, **kargs)",
        "snippet": "    def _og_search_property(self, prop, html, name=None, **kargs):\n        if name is None:\n            name = 'OpenGraph %s' % prop\n        escaped = self._search_regex(self._og_regexes(prop), html, name, flags=re.DOTALL, **kargs)\n        if escaped is None:\n            return None\n        return unescapeHTML(escaped)",
        "begin_line": 663,
        "end_line": 669,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022471910112359553,
            "pseudo_dstar_susp": 0.001440922190201729,
            "pseudo_tarantula_susp": 0.0015527950310559005,
            "pseudo_op2_susp": 0.001440922190201729,
            "pseudo_barinel_susp": 0.0015527950310559005
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_search_thumbnail#671",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_search_thumbnail(self, html, **kargs)",
        "snippet": "    def _og_search_thumbnail(self, html, **kargs):\n        return self._og_search_property('image', html, 'thumbnail URL', fatal=False, **kargs)",
        "begin_line": 671,
        "end_line": 672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_search_description#674",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_search_description(self, html, **kargs)",
        "snippet": "    def _og_search_description(self, html, **kargs):\n        return self._og_search_property('description', html, fatal=False, **kargs)",
        "begin_line": 674,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001394700139470014,
            "pseudo_dstar_susp": 0.001272264631043257,
            "pseudo_tarantula_susp": 0.0017857142857142857,
            "pseudo_op2_susp": 0.001272264631043257,
            "pseudo_barinel_susp": 0.0017857142857142857
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_search_title#677",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_search_title(self, html, **kargs)",
        "snippet": "    def _og_search_title(self, html, **kargs):\n        return self._og_search_property('title', html, **kargs)",
        "begin_line": 677,
        "end_line": 678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_search_video_url#680",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_search_video_url(self, html, name='video url', secure=True, **kargs)",
        "snippet": "    def _og_search_video_url(self, html, name='video url', secure=True, **kargs):\n        regexes = self._og_regexes('video') + self._og_regexes('video:url')\n        if secure:\n            regexes = self._og_regexes('video:secure_url') + regexes\n        return self._html_search_regex(regexes, html, name, **kargs)",
        "begin_line": 680,
        "end_line": 684,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010940919037199124,
            "pseudo_dstar_susp": 0.0009033423667570009,
            "pseudo_tarantula_susp": 0.0019047619047619048,
            "pseudo_op2_susp": 0.0009033423667570009,
            "pseudo_barinel_susp": 0.0019047619047619048
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._og_search_url#686",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._og_search_url(self, html, **kargs)",
        "snippet": "    def _og_search_url(self, html, **kargs):\n        return self._og_search_property('url', html, **kargs)",
        "begin_line": 686,
        "end_line": 687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._html_search_meta#689",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._html_search_meta(self, name, html, display_name=None, fatal=False, **kwargs)",
        "snippet": "    def _html_search_meta(self, name, html, display_name=None, fatal=False, **kwargs):\n        if display_name is None:\n            display_name = name\n        return self._html_search_regex(\n            self._meta_regex(name),\n            html, display_name, fatal=fatal, group='content', **kwargs)",
        "begin_line": 689,
        "end_line": 694,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.001326259946949602,
            "pseudo_tarantula_susp": 0.0013679890560875513,
            "pseudo_op2_susp": 0.001326259946949602,
            "pseudo_barinel_susp": 0.0013679890560875513
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._rta_search#699",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._rta_search(self, html)",
        "snippet": "    def _rta_search(self, html):\n        # See http://www.rtalabel.org/index.php?content=howtofaq#single\n        if re.search(r'(?ix)<meta\\s+name=\"rating\"\\s+'\n                     r'     content=\"RTA-5042-1996-1400-1577-RTA\"',\n                     html):\n            return 18\n        return 0",
        "begin_line": 699,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011350737797956867,
            "pseudo_dstar_susp": 0.0011933174224343676,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0011933174224343676,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._family_friendly_search#723",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._family_friendly_search(self, html)",
        "snippet": "    def _family_friendly_search(self, html):\n        # See http://schema.org/VideoObject\n        family_friendly = self._html_search_meta('isFamilyFriendly', html)\n\n        if not family_friendly:\n            return None\n\n        RATING_TABLE = {\n            '1': 0,\n            'true': 0,\n            '0': 18,\n            'false': 18,\n        }\n        return RATING_TABLE.get(family_friendly.lower(), None)",
        "begin_line": 723,
        "end_line": 736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._sort_formats#764",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._sort_formats(self, formats, field_preference=None)",
        "snippet": "    def _sort_formats(self, formats, field_preference=None):\n        if not formats:\n            raise ExtractorError('No video formats found')\n\n        def _formats_key(f):\n            # TODO remove the following workaround\n            from ..utils import determine_ext\n            if not f.get('ext') and 'url' in f:\n                f['ext'] = determine_ext(f['url'])\n\n            if isinstance(field_preference, (list, tuple)):\n                return tuple(f.get(field) if f.get(field) is not None else -1 for field in field_preference)\n\n            preference = f.get('preference')\n            if preference is None:\n                proto = f.get('protocol')\n                if proto is None:\n                    proto = compat_urllib_parse_urlparse(f.get('url', '')).scheme\n\n                preference = 0 if proto in ['http', 'https'] else -0.1\n                if f.get('ext') in ['f4f', 'f4m']:  # Not yet supported\n                    preference -= 0.5\n\n            if f.get('vcodec') == 'none':  # audio only\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['aac', 'mp3', 'm4a', 'webm', 'ogg', 'opus']\n                else:\n                    ORDER = ['webm', 'opus', 'ogg', 'mp3', 'aac', 'm4a']\n                ext_preference = 0\n                try:\n                    audio_ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    audio_ext_preference = -1\n            else:\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['flv', 'mp4', 'webm']\n                else:\n                    ORDER = ['webm', 'flv', 'mp4']\n                try:\n                    ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    ext_preference = -1\n                audio_ext_preference = 0\n\n            return (\n                preference,\n                f.get('language_preference') if f.get('language_preference') is not None else -1,\n                f.get('quality') if f.get('quality') is not None else -1,\n                f.get('tbr') if f.get('tbr') is not None else -1,\n                f.get('filesize') if f.get('filesize') is not None else -1,\n                f.get('vbr') if f.get('vbr') is not None else -1,\n                f.get('height') if f.get('height') is not None else -1,\n                f.get('width') if f.get('width') is not None else -1,\n                ext_preference,\n                f.get('abr') if f.get('abr') is not None else -1,\n                audio_ext_preference,\n                f.get('fps') if f.get('fps') is not None else -1,\n                f.get('filesize_approx') if f.get('filesize_approx') is not None else -1,\n                f.get('source_preference') if f.get('source_preference') is not None else -1,\n                f.get('format_id') if f.get('format_id') is not None else '',\n            )\n        formats.sort(key=_formats_key)",
        "begin_line": 764,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021929824561403508,
            "pseudo_dstar_susp": 0.0015503875968992248,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0015503875968992248,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._formats_key#768",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._formats_key(f)",
        "snippet": "        def _formats_key(f):\n            # TODO remove the following workaround\n            from ..utils import determine_ext\n            if not f.get('ext') and 'url' in f:\n                f['ext'] = determine_ext(f['url'])\n\n            if isinstance(field_preference, (list, tuple)):\n                return tuple(f.get(field) if f.get(field) is not None else -1 for field in field_preference)\n\n            preference = f.get('preference')\n            if preference is None:\n                proto = f.get('protocol')\n                if proto is None:\n                    proto = compat_urllib_parse_urlparse(f.get('url', '')).scheme\n\n                preference = 0 if proto in ['http', 'https'] else -0.1\n                if f.get('ext') in ['f4f', 'f4m']:  # Not yet supported\n                    preference -= 0.5\n\n            if f.get('vcodec') == 'none':  # audio only\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['aac', 'mp3', 'm4a', 'webm', 'ogg', 'opus']\n                else:\n                    ORDER = ['webm', 'opus', 'ogg', 'mp3', 'aac', 'm4a']\n                ext_preference = 0\n                try:\n                    audio_ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    audio_ext_preference = -1\n            else:\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['flv', 'mp4', 'webm']\n                else:\n                    ORDER = ['webm', 'flv', 'mp4']\n                try:\n                    ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    ext_preference = -1\n                audio_ext_preference = 0\n\n            return (\n                preference,\n                f.get('language_preference') if f.get('language_preference') is not None else -1,\n                f.get('quality') if f.get('quality') is not None else -1,\n                f.get('tbr') if f.get('tbr') is not None else -1,\n                f.get('filesize') if f.get('filesize') is not None else -1,\n                f.get('vbr') if f.get('vbr') is not None else -1,\n                f.get('height') if f.get('height') is not None else -1,\n                f.get('width') if f.get('width') is not None else -1,\n                ext_preference,\n                f.get('abr') if f.get('abr') is not None else -1,\n                audio_ext_preference,\n                f.get('fps') if f.get('fps') is not None else -1,\n                f.get('filesize_approx') if f.get('filesize_approx') is not None else -1,\n                f.get('source_preference') if f.get('source_preference') is not None else -1,\n                f.get('format_id') if f.get('format_id') is not None else '',\n            )",
        "begin_line": 768,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001447178002894356,
            "pseudo_dstar_susp": 0.0015037593984962407,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.0015037593984962407,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._check_formats#827",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._check_formats(self, formats, video_id)",
        "snippet": "    def _check_formats(self, formats, video_id):\n        if formats:\n            formats[:] = filter(\n                lambda f: self._is_valid_url(\n                    f['url'], video_id,\n                    item='%s video format' % f.get('format_id') if f.get('format_id') else 'video'),\n                formats)",
        "begin_line": 827,
        "end_line": 833,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._is_valid_url#835",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._is_valid_url(self, url, video_id, item='video')",
        "snippet": "    def _is_valid_url(self, url, video_id, item='video'):\n        url = self._proto_relative_url(url, scheme='http:')\n        # For now assume non HTTP(S) URLs always valid\n        if not (url.startswith('http://') or url.startswith('https://')):\n            return True\n        try:\n            self._request_webpage(url, video_id, 'Checking %s URL' % item)\n            return True\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_urllib_error.URLError):\n                self.to_screen(\n                    '%s: %s URL is invalid, skipping' % (video_id, item))\n                return False\n            raise",
        "begin_line": 835,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006939625260235947,
            "pseudo_dstar_susp": 0.0007587253414264037,
            "pseudo_tarantula_susp": 0.0005817335660267597,
            "pseudo_op2_susp": 0.0007587253414264037,
            "pseudo_barinel_susp": 0.0005817335660267597
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.http_scheme#850",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.http_scheme(self)",
        "snippet": "    def http_scheme(self):\n        \"\"\" Either \"http:\" or \"https:\", depending on the user's preferences \"\"\"\n        return (\n            'http:'\n            if self._downloader.params.get('prefer_insecure', False)\n            else 'https:')",
        "begin_line": 850,
        "end_line": 855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008517887563884157,
            "pseudo_dstar_susp": 0.000856898029134533,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.000856898029134533,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._proto_relative_url#857",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._proto_relative_url(self, url, scheme=None)",
        "snippet": "    def _proto_relative_url(self, url, scheme=None):\n        if url is None:\n            return url\n        if url.startswith('//'):\n            if scheme is None:\n                scheme = self.http_scheme()\n            return scheme + url\n        else:\n            return url",
        "begin_line": 857,
        "end_line": 865,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._extract_f4m_formats#874",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._extract_f4m_formats(self, manifest_url, video_id, preference=None, f4m_id=None, transform_source=lambda s: fix_xml_ampersands(s).strip(), fatal=True)",
        "snippet": "    def _extract_f4m_formats(self, manifest_url, video_id, preference=None, f4m_id=None,\n                             transform_source=lambda s: fix_xml_ampersands(s).strip(),\n                             fatal=True):\n        manifest = self._download_xml(\n            manifest_url, video_id, 'Downloading f4m manifest',\n            'Unable to download f4m manifest',\n            # Some manifests may be malformed, e.g. prosiebensat1 generated manifests\n            # (see https://github.com/rg3/youtube-dl/issues/6215#issuecomment-121704244)\n            transform_source=transform_source,\n            fatal=fatal)\n\n        if manifest is False:\n            return manifest\n\n        formats = []\n        manifest_version = '1.0'\n        media_nodes = manifest.findall('{http://ns.adobe.com/f4m/1.0}media')\n        if not media_nodes:\n            manifest_version = '2.0'\n            media_nodes = manifest.findall('{http://ns.adobe.com/f4m/2.0}media')\n        base_url = xpath_text(\n            manifest, ['{http://ns.adobe.com/f4m/1.0}baseURL', '{http://ns.adobe.com/f4m/2.0}baseURL'],\n            'base URL', default=None)\n        if base_url:\n            base_url = base_url.strip()\n        for i, media_el in enumerate(media_nodes):\n            if manifest_version == '2.0':\n                media_url = media_el.attrib.get('href') or media_el.attrib.get('url')\n                if not media_url:\n                    continue\n                manifest_url = (\n                    media_url if media_url.startswith('http://') or media_url.startswith('https://')\n                    else ((base_url or '/'.join(manifest_url.split('/')[:-1])) + '/' + media_url))\n                # If media_url is itself a f4m manifest do the recursive extraction\n                # since bitrates in parent manifest (this one) and media_url manifest\n                # may differ leading to inability to resolve the format by requested\n                # bitrate in f4m downloader\n                if determine_ext(manifest_url) == 'f4m':\n                    f4m_formats = self._extract_f4m_formats(\n                        manifest_url, video_id, preference, f4m_id, fatal=fatal)\n                    if f4m_formats:\n                        formats.extend(f4m_formats)\n                    continue\n            tbr = int_or_none(media_el.attrib.get('bitrate'))\n            formats.append({\n                'format_id': '-'.join(filter(None, [f4m_id, compat_str(i if tbr is None else tbr)])),\n                'url': manifest_url,\n                'ext': 'flv',\n                'tbr': tbr,\n                'width': int_or_none(media_el.attrib.get('width')),\n                'height': int_or_none(media_el.attrib.get('height')),\n                'preference': preference,\n            })\n        self._sort_formats(formats)\n\n        return formats",
        "begin_line": 874,
        "end_line": 929,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008445945945945946,
            "pseudo_dstar_susp": 0.0008503401360544217,
            "pseudo_tarantula_susp": 0.00102880658436214,
            "pseudo_op2_susp": 0.0008503401360544217,
            "pseudo_barinel_susp": 0.00102880658436214
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._extract_m3u8_formats#931",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._extract_m3u8_formats(self, m3u8_url, video_id, ext=None, entry_protocol='m3u8', preference=None, m3u8_id=None, note=None, errnote=None, fatal=True)",
        "snippet": "    def _extract_m3u8_formats(self, m3u8_url, video_id, ext=None,\n                              entry_protocol='m3u8', preference=None,\n                              m3u8_id=None, note=None, errnote=None,\n                              fatal=True):\n\n        formats = [{\n            'format_id': '-'.join(filter(None, [m3u8_id, 'meta'])),\n            'url': m3u8_url,\n            'ext': ext,\n            'protocol': 'm3u8',\n            'preference': preference - 1 if preference else -1,\n            'resolution': 'multiple',\n            'format_note': 'Quality selection URL',\n        }]\n\n        format_url = lambda u: (\n            u\n            if re.match(r'^https?://', u)\n            else compat_urlparse.urljoin(m3u8_url, u))\n\n        res = self._download_webpage_handle(\n            m3u8_url, video_id,\n            note=note or 'Downloading m3u8 information',\n            errnote=errnote or 'Failed to download m3u8 information',\n            fatal=fatal)\n        if res is False:\n            return res\n        m3u8_doc, urlh = res\n        m3u8_url = urlh.geturl()\n        last_info = None\n        last_media = None\n        kv_rex = re.compile(\n            r'(?P<key>[a-zA-Z_-]+)=(?P<val>\"[^\"]+\"|[^\",]+)(?:,|$)')\n        for line in m3u8_doc.splitlines():\n            if line.startswith('#EXT-X-STREAM-INF:'):\n                last_info = {}\n                for m in kv_rex.finditer(line):\n                    v = m.group('val')\n                    if v.startswith('\"'):\n                        v = v[1:-1]\n                    last_info[m.group('key')] = v\n            elif line.startswith('#EXT-X-MEDIA:'):\n                last_media = {}\n                for m in kv_rex.finditer(line):\n                    v = m.group('val')\n                    if v.startswith('\"'):\n                        v = v[1:-1]\n                    last_media[m.group('key')] = v\n            elif line.startswith('#') or not line.strip():\n                continue\n            else:\n                if last_info is None:\n                    formats.append({'url': format_url(line)})\n                    continue\n                tbr = int_or_none(last_info.get('BANDWIDTH'), scale=1000)\n                format_id = []\n                if m3u8_id:\n                    format_id.append(m3u8_id)\n                last_media_name = last_media.get('NAME') if last_media and last_media.get('TYPE') != 'SUBTITLES' else None\n                format_id.append(last_media_name if last_media_name else '%d' % (tbr if tbr else len(formats)))\n                f = {\n                    'format_id': '-'.join(format_id),\n                    'url': format_url(line.strip()),\n                    'tbr': tbr,\n                    'ext': ext,\n                    'protocol': entry_protocol,\n                    'preference': preference,\n                }\n                codecs = last_info.get('CODECS')\n                if codecs:\n                    # TODO: looks like video codec is not always necessarily goes first\n                    va_codecs = codecs.split(',')\n                    if va_codecs[0]:\n                        f['vcodec'] = va_codecs[0].partition('.')[0]\n                    if len(va_codecs) > 1 and va_codecs[1]:\n                        f['acodec'] = va_codecs[1].partition('.')[0]\n                resolution = last_info.get('RESOLUTION')\n                if resolution:\n                    width_str, height_str = resolution.split('x')\n                    f['width'] = int(width_str)\n                    f['height'] = int(height_str)\n                if last_media is not None:\n                    f['m3u8_media'] = last_media\n                    last_media = None\n                formats.append(f)\n                last_info = {}\n        self._sort_formats(formats)\n        return formats",
        "begin_line": 931,
        "end_line": 1018,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010741138560687433,
            "pseudo_dstar_susp": 0.000946969696969697,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.000946969696969697,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._xpath_ns#1021",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._xpath_ns(path, namespace=None)",
        "snippet": "    def _xpath_ns(path, namespace=None):\n        if not namespace:\n            return path\n        out = []\n        for c in path.split('/'):\n            if not c or c == '.':\n                out.append(c)\n            else:\n                out.append('{%s}%s' % (namespace, c))\n        return '/'.join(out)",
        "begin_line": 1021,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005288207297726071,
            "pseudo_dstar_susp": 0.000630119722747322,
            "pseudo_tarantula_susp": 0.0004805382027871216,
            "pseudo_op2_susp": 0.000630119722747322,
            "pseudo_barinel_susp": 0.0004805382027871216
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._extract_smil_formats#1032",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._extract_smil_formats(self, smil_url, video_id, fatal=True, f4m_params=None)",
        "snippet": "    def _extract_smil_formats(self, smil_url, video_id, fatal=True, f4m_params=None):\n        smil = self._download_smil(smil_url, video_id, fatal=fatal)\n\n        if smil is False:\n            assert not fatal\n            return []\n\n        namespace = self._parse_smil_namespace(smil)\n\n        return self._parse_smil_formats(\n            smil, smil_url, video_id, namespace=namespace, f4m_params=f4m_params)",
        "begin_line": 1032,
        "end_line": 1042,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._download_smil#1050",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._download_smil(self, smil_url, video_id, fatal=True)",
        "snippet": "    def _download_smil(self, smil_url, video_id, fatal=True):\n        return self._download_xml(\n            smil_url, video_id, 'Downloading SMIL file',\n            'Unable to download SMIL file', fatal=fatal)",
        "begin_line": 1050,
        "end_line": 1053,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00046511627906976747,
            "pseudo_dstar_susp": 0.00046490004649000463,
            "pseudo_tarantula_susp": 0.000468384074941452,
            "pseudo_op2_susp": 0.00046490004649000463,
            "pseudo_barinel_susp": 0.000468384074941452
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._parse_smil#1055",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._parse_smil(self, smil, smil_url, video_id, f4m_params=None)",
        "snippet": "    def _parse_smil(self, smil, smil_url, video_id, f4m_params=None):\n        namespace = self._parse_smil_namespace(smil)\n\n        formats = self._parse_smil_formats(\n            smil, smil_url, video_id, namespace=namespace, f4m_params=f4m_params)\n        subtitles = self._parse_smil_subtitles(smil, namespace=namespace)\n\n        video_id = os.path.splitext(url_basename(smil_url))[0]\n        title = None\n        description = None\n        upload_date = None\n        for meta in smil.findall(self._xpath_ns('./head/meta', namespace)):\n            name = meta.attrib.get('name')\n            content = meta.attrib.get('content')\n            if not name or not content:\n                continue\n            if not title and name == 'title':\n                title = content\n            elif not description and name in ('description', 'abstract'):\n                description = content\n            elif not upload_date and name == 'date':\n                upload_date = unified_strdate(content)\n\n        thumbnails = [{\n            'id': image.get('type'),\n            'url': image.get('src'),\n            'width': int_or_none(image.get('width')),\n            'height': int_or_none(image.get('height')),\n        } for image in smil.findall(self._xpath_ns('.//image', namespace)) if image.get('src')]\n\n        return {\n            'id': video_id,\n            'title': title or video_id,\n            'description': description,\n            'upload_date': upload_date,\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'subtitles': subtitles,\n        }",
        "begin_line": 1055,
        "end_line": 1093,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._parse_smil_namespace#1095",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._parse_smil_namespace(self, smil)",
        "snippet": "    def _parse_smil_namespace(self, smil):\n        return self._search_regex(\n            r'(?i)^{([^}]+)?}smil$', smil.tag, 'namespace', default=None)",
        "begin_line": 1095,
        "end_line": 1097,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._parse_smil_formats#1099",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._parse_smil_formats(self, smil, smil_url, video_id, namespace=None, f4m_params=None, transform_rtmp_url=None)",
        "snippet": "    def _parse_smil_formats(self, smil, smil_url, video_id, namespace=None, f4m_params=None, transform_rtmp_url=None):\n        base = smil_url\n        for meta in smil.findall(self._xpath_ns('./head/meta', namespace)):\n            b = meta.get('base') or meta.get('httpBase')\n            if b:\n                base = b\n                break\n\n        formats = []\n        rtmp_count = 0\n        http_count = 0\n\n        videos = smil.findall(self._xpath_ns('.//video', namespace))\n        for video in videos:\n            src = video.get('src')\n            if not src:\n                continue\n\n            bitrate = float_or_none(video.get('system-bitrate') or video.get('systemBitrate'), 1000)\n            filesize = int_or_none(video.get('size') or video.get('fileSize'))\n            width = int_or_none(video.get('width'))\n            height = int_or_none(video.get('height'))\n            proto = video.get('proto')\n            ext = video.get('ext')\n            src_ext = determine_ext(src)\n            streamer = video.get('streamer') or base\n\n            if proto == 'rtmp' or streamer.startswith('rtmp'):\n                rtmp_count += 1\n                formats.append({\n                    'url': streamer,\n                    'play_path': src,\n                    'ext': 'flv',\n                    'format_id': 'rtmp-%d' % (rtmp_count if bitrate is None else bitrate),\n                    'tbr': bitrate,\n                    'filesize': filesize,\n                    'width': width,\n                    'height': height,\n                })\n                if transform_rtmp_url:\n                    streamer, src = transform_rtmp_url(streamer, src)\n                    formats[-1].update({\n                        'url': streamer,\n                        'play_path': src,\n                    })\n                continue\n\n            src_url = src if src.startswith('http') else compat_urlparse.urljoin(base, src)\n\n            if proto == 'm3u8' or src_ext == 'm3u8':\n                m3u8_formats = self._extract_m3u8_formats(\n                    src_url, video_id, ext or 'mp4', m3u8_id='hls', fatal=False)\n                if m3u8_formats:\n                    formats.extend(m3u8_formats)\n                continue\n\n            if src_ext == 'f4m':\n                f4m_url = src_url\n                if not f4m_params:\n                    f4m_params = {\n                        'hdcore': '3.2.0',\n                        'plugin': 'flowplayer-3.2.0.1',\n                    }\n                f4m_url += '&' if '?' in f4m_url else '?'\n                f4m_url += compat_urllib_parse.urlencode(f4m_params)\n                f4m_formats = self._extract_f4m_formats(f4m_url, video_id, f4m_id='hds', fatal=False)\n                if f4m_formats:\n                    formats.extend(f4m_formats)\n                continue\n\n            if src_url.startswith('http') and self._is_valid_url(src, video_id):\n                http_count += 1\n                formats.append({\n                    'url': src_url,\n                    'ext': ext or src_ext or 'flv',\n                    'format_id': 'http-%d' % (bitrate or http_count),\n                    'tbr': bitrate,\n                    'filesize': filesize,\n                    'width': width,\n                    'height': height,\n                })\n                continue\n\n        self._sort_formats(formats)\n\n        return formats",
        "begin_line": 1099,
        "end_line": 1184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005279831045406547,
            "pseudo_dstar_susp": 0.0006293266205160479,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0006293266205160479,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._parse_smil_subtitles#1186",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._parse_smil_subtitles(self, smil, namespace=None, subtitles_lang='en')",
        "snippet": "    def _parse_smil_subtitles(self, smil, namespace=None, subtitles_lang='en'):\n        subtitles = {}\n        for num, textstream in enumerate(smil.findall(self._xpath_ns('.//textstream', namespace))):\n            src = textstream.get('src')\n            if not src:\n                continue\n            ext = textstream.get('ext') or determine_ext(src)\n            if not ext:\n                type_ = textstream.get('type')\n                SUBTITLES_TYPES = {\n                    'text/vtt': 'vtt',\n                    'text/srt': 'srt',\n                    'application/smptett+xml': 'tt',\n                }\n                if type_ in SUBTITLES_TYPES:\n                    ext = SUBTITLES_TYPES[type_]\n            lang = textstream.get('systemLanguage') or textstream.get('systemLanguageName') or textstream.get('lang') or subtitles_lang\n            subtitles.setdefault(lang, []).append({\n                'url': src,\n                'ext': ext,\n            })\n        return subtitles",
        "begin_line": 1186,
        "end_line": 1207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._extract_xspf_playlist#1209",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._extract_xspf_playlist(self, playlist_url, playlist_id, fatal=True)",
        "snippet": "    def _extract_xspf_playlist(self, playlist_url, playlist_id, fatal=True):\n        xspf = self._download_xml(\n            playlist_url, playlist_id, 'Downloading xpsf playlist',\n            'Unable to download xspf manifest', fatal=fatal)\n        if xspf is False:\n            return []\n        return self._parse_xspf(xspf, playlist_id)",
        "begin_line": 1209,
        "end_line": 1215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._live_title#1252",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._live_title(self, name)",
        "snippet": "    def _live_title(self, name):\n        \"\"\" Generate the title for a live video \"\"\"\n        now = datetime.datetime.now()\n        now_str = now.strftime(\"%Y-%m-%d %H:%M\")\n        return name + ' ' + now_str",
        "begin_line": 1252,
        "end_line": 1256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009407337723424271,
            "pseudo_dstar_susp": 0.000846740050804403,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.000846740050804403,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._set_cookie#1280",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._set_cookie(self, domain, name, value, expire_time=None)",
        "snippet": "    def _set_cookie(self, domain, name, value, expire_time=None):\n        cookie = compat_cookiejar.Cookie(\n            0, name, value, None, None, domain, None,\n            None, '/', True, False, expire_time, '', None, None, None)\n        self._downloader.cookiejar.set_cookie(cookie)",
        "begin_line": 1280,
        "end_line": 1284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008264462809917355,
            "pseudo_dstar_susp": 0.0008163265306122449,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008163265306122449,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.get_testcases#1292",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.get_testcases(self, include_onlymatching=False)",
        "snippet": "    def get_testcases(self, include_onlymatching=False):\n        t = getattr(self, '_TEST', None)\n        if t:\n            assert not hasattr(self, '_TESTS'), \\\n                '%s has _TEST and _TESTS' % type(self).__name__\n            tests = [t]\n        else:\n            tests = getattr(self, '_TESTS', [])\n        for t in tests:\n            if not include_onlymatching and t.get('only_matching', False):\n                continue\n            t['name'] = type(self).__name__[:-len('IE')]\n            yield t",
        "begin_line": 1292,
        "end_line": 1304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor.extract_subtitles#1321",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor.extract_subtitles(self, *args, **kwargs)",
        "snippet": "    def extract_subtitles(self, *args, **kwargs):\n        if (self._downloader.params.get('writesubtitles', False) or\n                self._downloader.params.get('listsubtitles')):\n            return self._get_subtitles(*args, **kwargs)\n        return {}",
        "begin_line": 1321,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.common.InfoExtractor._merge_subtitles#1340",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.InfoExtractor",
        "signature": "youtube_dl.extractor.common.InfoExtractor._merge_subtitles(cls, subtitle_dict1, subtitle_dict2)",
        "snippet": "    def _merge_subtitles(cls, subtitle_dict1, subtitle_dict2):\n        \"\"\" Merge two subtitle dictionaries, language by language. \"\"\"\n        ret = dict(subtitle_dict1)\n        for lang in subtitle_dict2:\n            ret[lang] = cls._merge_subtitle_items(subtitle_dict1.get(lang, []), subtitle_dict2[lang])\n        return ret",
        "begin_line": 1340,
        "end_line": 1345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.common.SearchInfoExtractor._make_valid_url#1365",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.SearchInfoExtractor",
        "signature": "youtube_dl.extractor.common.SearchInfoExtractor._make_valid_url(cls)",
        "snippet": "    def _make_valid_url(cls):\n        return r'%s(?P<prefix>|[1-9][0-9]*|all):(?P<query>[\\s\\S]+)' % cls._SEARCH_KEY",
        "begin_line": 1365,
        "end_line": 1366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00411522633744856,
            "pseudo_dstar_susp": 0.00425531914893617,
            "pseudo_tarantula_susp": 0.001176470588235294,
            "pseudo_op2_susp": 0.00425531914893617,
            "pseudo_barinel_susp": 0.001176470588235294
        }
    },
    {
        "name": "youtube_dl.extractor.common.SearchInfoExtractor.suitable#1369",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.SearchInfoExtractor",
        "signature": "youtube_dl.extractor.common.SearchInfoExtractor.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        return re.match(cls._make_valid_url(), url) is not None",
        "begin_line": 1369,
        "end_line": 1370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00411522633744856,
            "pseudo_dstar_susp": 0.00425531914893617,
            "pseudo_tarantula_susp": 0.001176470588235294,
            "pseudo_op2_susp": 0.00425531914893617,
            "pseudo_barinel_susp": 0.001176470588235294
        }
    },
    {
        "name": "youtube_dl.extractor.common.SearchInfoExtractor._real_extract#1372",
        "src_path": "youtube_dl/extractor/common.py",
        "class_name": "youtube_dl.extractor.common.SearchInfoExtractor",
        "signature": "youtube_dl.extractor.common.SearchInfoExtractor._real_extract(self, query)",
        "snippet": "    def _real_extract(self, query):\n        mobj = re.match(self._make_valid_url(), query)\n        if mobj is None:\n            raise ExtractorError('Invalid search query \"%s\"' % query)\n\n        prefix = mobj.group('prefix')\n        query = mobj.group('query')\n        if prefix == '':\n            return self._get_n_results(query, 1)\n        elif prefix == 'all':\n            return self._get_n_results(query, self._MAX_RESULTS)\n        else:\n            n = int(prefix)\n            if n <= 0:\n                raise ExtractorError('invalid download number %s for query \"%s\"' % (n, query))\n            elif n > self._MAX_RESULTS:\n                self._downloader.report_warning('%s returns max %i results (you requested %i)' % (self._SEARCH_KEY, self._MAX_RESULTS, n))\n                n = self._MAX_RESULTS\n            return self._get_n_results(query, n)",
        "begin_line": 1372,
        "end_line": 1390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.mtv.MTVServicesEmbeddedIE._extract_url#232",
        "src_path": "youtube_dl/extractor/mtv.py",
        "class_name": "youtube_dl.extractor.mtv.MTVServicesEmbeddedIE",
        "signature": "youtube_dl.extractor.mtv.MTVServicesEmbeddedIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//media.mtvnservices.com/embed/.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 232,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.udemy.UdemyCourseIE.suitable#226",
        "src_path": "youtube_dl/extractor/udemy.py",
        "class_name": "youtube_dl.extractor.udemy.UdemyCourseIE",
        "signature": "youtube_dl.extractor.udemy.UdemyCourseIE.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        return False if UdemyIE.suitable(url) else super(UdemyCourseIE, cls).suitable(url)",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0006285355122564425,
            "pseudo_tarantula_susp": 0.000468384074941452,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000468384074941452
        }
    },
    {
        "name": "youtube_dl.extractor.adobetv.AdobeTVPlaylistBaseIE._extract_playlist_entries#74",
        "src_path": "youtube_dl/extractor/adobetv.py",
        "class_name": "youtube_dl.extractor.adobetv.AdobeTVPlaylistBaseIE",
        "signature": "youtube_dl.extractor.adobetv.AdobeTVPlaylistBaseIE._extract_playlist_entries(self, url, display_id)",
        "snippet": "    def _extract_playlist_entries(self, url, display_id):\n        page = self._download_json(url, display_id)\n        entries = self._parse_page_data(page['data'])\n        for page_num in range(2, page['paging']['pages'] + 1):\n            entries.extend(self._parse_page_data(\n                self._download_json(url + '&page=%d' % page_num, display_id)['data']))\n        return entries",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024271844660194173,
            "pseudo_dstar_susp": 0.0022371364653243847,
            "pseudo_tarantula_susp": 0.0010416666666666667,
            "pseudo_op2_susp": 0.0022371364653243847,
            "pseudo_barinel_susp": 0.0010416666666666667
        }
    },
    {
        "name": "youtube_dl.extractor.adobetv.AdobeTVShowIE._real_extract#99",
        "src_path": "youtube_dl/extractor/adobetv.py",
        "class_name": "youtube_dl.extractor.adobetv.AdobeTVShowIE",
        "signature": "youtube_dl.extractor.adobetv.AdobeTVShowIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        language, show_urlname = re.match(self._VALID_URL, url).groups()\n        if not language:\n            language = 'en'\n        query = 'language=%s&show_urlname=%s' % (language, show_urlname)\n\n        show_data = self._download_json(self._API_BASE_URL + 'show/get/?%s' % query, show_urlname)['data'][0]\n\n        return self.playlist_result(\n            self._extract_playlist_entries(self._API_BASE_URL + 'episode/?%s' % query, show_urlname),\n            compat_str(show_data['id']),\n            show_data['show_name'],\n            show_data['show_description'])",
        "begin_line": 99,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002277904328018223,
            "pseudo_dstar_susp": 0.0017953321364452424,
            "pseudo_tarantula_susp": 0.0010121457489878543,
            "pseudo_op2_susp": 0.0017953321364452424,
            "pseudo_barinel_susp": 0.0010121457489878543
        }
    },
    {
        "name": "youtube_dl.extractor.adobetv.AdobeTVChannelIE._real_extract#128",
        "src_path": "youtube_dl/extractor/adobetv.py",
        "class_name": "youtube_dl.extractor.adobetv.AdobeTVChannelIE",
        "signature": "youtube_dl.extractor.adobetv.AdobeTVChannelIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        language, channel_urlname, category_urlname = re.match(self._VALID_URL, url).groups()\n        if not language:\n            language = 'en'\n        query = 'language=%s&channel_urlname=%s' % (language, channel_urlname)\n        if category_urlname:\n            query += '&category_urlname=%s' % category_urlname\n\n        return self.playlist_result(\n            self._extract_playlist_entries(self._API_BASE_URL + 'show/?%s' % query, channel_urlname),\n            channel_urlname)",
        "begin_line": 128,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012626262626262627,
            "pseudo_dstar_susp": 0.0012578616352201257,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0012578616352201257,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "youtube_dl.extractor.adobetv.AdobeTVVideoIE._real_extract#157",
        "src_path": "youtube_dl/extractor/adobetv.py",
        "class_name": "youtube_dl.extractor.adobetv.AdobeTVVideoIE",
        "signature": "youtube_dl.extractor.adobetv.AdobeTVVideoIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(url + '?format=json', video_id)\n\n        formats = [{\n            'format_id': '%s-%s' % (determine_ext(source['src']), source.get('height')),\n            'url': source['src'],\n            'width': int_or_none(source.get('width')),\n            'height': int_or_none(source.get('height')),\n            'tbr': int_or_none(source.get('bitrate')),\n        } for source in video_data['sources']]\n        self._sort_formats(formats)\n\n        # For both metadata and downloaded files the duration varies among\n        # formats. I just pick the max one\n        duration = max(filter(None, [\n            float_or_none(source.get('duration'), scale=1000)\n            for source in video_data['sources']]))\n\n        subtitles = {}\n        for translation in video_data.get('translations', []):\n            lang_id = translation.get('language_w3c') or ISO639Utils.long2short(translation['language_medium'])\n            if lang_id not in subtitles:\n                subtitles[lang_id] = []\n            subtitles[lang_id].append({\n                'url': translation['vttPath'],\n                'ext': 'vtt',\n            })\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': video_data['title'],\n            'description': video_data.get('description'),\n            'thumbnail': video_data['video'].get('poster'),\n            'duration': duration,\n            'subtitles': subtitles,\n        }",
        "begin_line": 157,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002398081534772182,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0012755102040816326,
            "pseudo_op2_susp": 0.002403846153846154,
            "pseudo_barinel_susp": 0.0012755102040816326
        }
    },
    {
        "name": "youtube_dl.postprocessor.metadatafromtitle.MetadataFromTitlePP.__init__#14",
        "src_path": "youtube_dl/postprocessor/metadatafromtitle.py",
        "class_name": "youtube_dl.postprocessor.metadatafromtitle.MetadataFromTitlePP",
        "signature": "youtube_dl.postprocessor.metadatafromtitle.MetadataFromTitlePP.__init__(self, downloader, titleformat)",
        "snippet": "    def __init__(self, downloader, titleformat):\n        super(MetadataFromTitlePP, self).__init__(downloader)\n        self._titleformat = titleformat\n        self._titleregex = self.format_to_regex(titleformat)",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.postprocessor.metadatafromtitle.MetadataFromTitlePP.format_to_regex#19",
        "src_path": "youtube_dl/postprocessor/metadatafromtitle.py",
        "class_name": "youtube_dl.postprocessor.metadatafromtitle.MetadataFromTitlePP",
        "signature": "youtube_dl.postprocessor.metadatafromtitle.MetadataFromTitlePP.format_to_regex(self, fmt)",
        "snippet": "    def format_to_regex(self, fmt):\n        \"\"\"\n        Converts a string like\n           '%(title)s - %(artist)s'\n        to a regex like\n           '(?P<title>.+)\\ \\-\\ (?P<artist>.+)'\n        \"\"\"\n        lastpos = 0\n        regex = \"\"\n        # replace %(..)s with regex group and escape other string parts\n        for match in re.finditer(r'%\\((\\w+)\\)s', fmt):\n            regex += re.escape(fmt[lastpos:match.start()])\n            regex += r'(?P<' + match.group(1) + '>.+)'\n            lastpos = match.end()\n        if lastpos < len(fmt):\n            regex += re.escape(fmt[lastpos:len(fmt)])\n        return regex",
        "begin_line": 19,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.theplatform.ThePlatformBaseIE._extract_theplatform_smil#32",
        "src_path": "youtube_dl/extractor/theplatform.py",
        "class_name": "youtube_dl.extractor.theplatform.ThePlatformBaseIE",
        "signature": "youtube_dl.extractor.theplatform.ThePlatformBaseIE._extract_theplatform_smil(self, smil_url, video_id, note='Downloading SMIL data')",
        "snippet": "    def _extract_theplatform_smil(self, smil_url, video_id, note='Downloading SMIL data'):\n        meta = self._download_xml(smil_url, video_id, note=note)\n        try:\n            error_msg = next(\n                n.attrib['abstract']\n                for n in meta.findall(_x('.//smil:ref'))\n                if n.attrib.get('title') == 'Geographic Restriction' or n.attrib.get('title') == 'Expired')\n        except StopIteration:\n            pass\n        else:\n            raise ExtractorError(error_msg, expected=True)\n\n        formats = self._parse_smil_formats(\n            meta, smil_url, video_id, namespace=default_ns,\n            # the parameters are from syfy.com, other sites may use others,\n            # they also work for nbc.com\n            f4m_params={'g': 'UXWGVKRWHFSP', 'hdcore': '3.0.3'},\n            transform_rtmp_url=lambda streamer, src: (streamer, 'mp4:' + src))\n\n        for _format in formats:\n            ext = determine_ext(_format['url'])\n            if ext == 'once':\n                _format['ext'] = 'mp4'\n\n        self._sort_formats(formats)\n\n        subtitles = self._parse_smil_subtitles(meta, default_ns)\n\n        return formats, subtitles",
        "begin_line": 32,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.theplatform.ThePlatformBaseIE.get_metadata#62",
        "src_path": "youtube_dl/extractor/theplatform.py",
        "class_name": "youtube_dl.extractor.theplatform.ThePlatformBaseIE",
        "signature": "youtube_dl.extractor.theplatform.ThePlatformBaseIE.get_metadata(self, path, video_id)",
        "snippet": "    def get_metadata(self, path, video_id):\n        info_url = 'http://link.theplatform.com/s/%s?format=preview' % path\n        info = self._download_json(info_url, video_id)\n\n        subtitles = {}\n        captions = info.get('captions')\n        if isinstance(captions, list):\n            for caption in captions:\n                lang, src, mime = caption.get('lang', 'en'), caption.get('src'), caption.get('type')\n                subtitles[lang] = [{\n                    'ext': 'srt' if mime == 'text/srt' else 'ttml',\n                    'url': src,\n                }]\n\n        return {\n            'title': info['title'],\n            'subtitles': subtitles,\n            'description': info['description'],\n            'thumbnail': info['defaultThumbnailUrl'],\n            'duration': int_or_none(info.get('duration'), 1000),\n        }",
        "begin_line": 62,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.theplatform.ThePlatformIE._real_extract#167",
        "src_path": "youtube_dl/extractor/theplatform.py",
        "class_name": "youtube_dl.extractor.theplatform.ThePlatformIE",
        "signature": "youtube_dl.extractor.theplatform.ThePlatformIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        provider_id = mobj.group('provider_id')\n        video_id = mobj.group('id')\n\n        if not provider_id:\n            provider_id = 'dJ5BDC'\n\n        path = provider_id\n        if mobj.group('media'):\n            path += '/media'\n        path += '/' + video_id\n\n        qs_dict = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        if 'guid' in qs_dict:\n            webpage = self._download_webpage(url, video_id)\n            scripts = re.findall(r'<script[^>]+src=\"([^\"]+)\"', webpage)\n            feed_id = None\n            # feed id usually locates in the last script.\n            # Seems there's no pattern for the interested script filename, so\n            # I try one by one\n            for script in reversed(scripts):\n                feed_script = self._download_webpage(\n                    self._proto_relative_url(script, 'http:'),\n                    video_id, 'Downloading feed script')\n                feed_id = self._search_regex(\n                    r'defaultFeedId\\s*:\\s*\"([^\"]+)\"', feed_script,\n                    'default feed id', default=None)\n                if feed_id is not None:\n                    break\n            if feed_id is None:\n                raise ExtractorError('Unable to find feed id')\n            return self.url_result('http://feed.theplatform.com/f/%s/%s?byGuid=%s' % (\n                provider_id, feed_id, qs_dict['guid'][0]))\n\n        if smuggled_data.get('force_smil_url', False):\n            smil_url = url\n        # Explicitly specified SMIL (see https://github.com/rg3/youtube-dl/issues/7385)\n        elif '/guid/' in url:\n            headers = {}\n            source_url = smuggled_data.get('source_url')\n            if source_url:\n                headers['Referer'] = source_url\n            request = sanitized_Request(url, headers=headers)\n            webpage = self._download_webpage(request, video_id)\n            smil_url = self._search_regex(\n                r'<link[^>]+href=([\"\\'])(?P<url>.+?)\\1[^>]+type=[\"\\']application/smil\\+xml',\n                webpage, 'smil url', group='url')\n            path = self._search_regex(\n                r'link\\.theplatform\\.com/s/((?:[^/?#&]+/)+[^/?#&]+)', smil_url, 'path')\n            smil_url += '?' if '?' not in smil_url else '&' + 'formats=m3u,mpeg4&format=SMIL'\n        elif mobj.group('config'):\n            config_url = url + '&form=json'\n            config_url = config_url.replace('swf/', 'config/')\n            config_url = config_url.replace('onsite/', 'onsite/config/')\n            config = self._download_json(config_url, video_id, 'Downloading config')\n            if 'releaseUrl' in config:\n                release_url = config['releaseUrl']\n            else:\n                release_url = 'http://link.theplatform.com/s/%s?mbr=true' % path\n            smil_url = release_url + '&format=SMIL&formats=MPEG4&manifest=f4m'\n        else:\n            smil_url = 'http://link.theplatform.com/s/%s/meta.smil?format=smil&mbr=true' % path\n\n        sig = smuggled_data.get('sig')\n        if sig:\n            smil_url = self._sign_url(smil_url, sig['key'], sig['secret'])\n\n        formats, subtitles = self._extract_theplatform_smil(smil_url, video_id)\n\n        ret = self.get_metadata(path, video_id)\n        combined_subtitles = self._merge_subtitles(ret.get('subtitles', {}), subtitles)\n        ret.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': combined_subtitles,\n        })\n\n        return ret",
        "begin_line": 167,
        "end_line": 247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.allocine.AllocineIE._real_extract#52",
        "src_path": "youtube_dl/extractor/allocine.py",
        "class_name": "youtube_dl.extractor.allocine.AllocineIE",
        "signature": "youtube_dl.extractor.allocine.AllocineIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        typ = mobj.group('typ')\n        display_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        if typ == 'film':\n            video_id = self._search_regex(r'href=\"/video/player_gen_cmedia=([0-9]+).+\"', webpage, 'video id')\n        else:\n            player = self._search_regex(r'data-player=\\'([^\\']+)\\'>', webpage, 'data player')\n\n            player_data = json.loads(player)\n            video_id = compat_str(player_data['refMedia'])\n\n        xml = self._download_xml('http://www.allocine.fr/ws/AcVisiondataV4.ashx?media=%s' % video_id, display_id)\n\n        video = xml.find('.//AcVisionVideo').attrib\n        quality = qualities(['ld', 'md', 'hd'])\n\n        formats = []\n        for k, v in video.items():\n            if re.match(r'.+_path', k):\n                format_id = k.split('_')[0]\n                formats.append({\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'url': v,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video['videoTitle'],\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n        }",
        "begin_line": 52,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002840909090909091,
            "pseudo_dstar_susp": 0.002881844380403458,
            "pseudo_tarantula_susp": 0.0010775862068965517,
            "pseudo_op2_susp": 0.002881844380403458,
            "pseudo_barinel_susp": 0.0010775862068965517
        }
    },
    {
        "name": "youtube_dl.postprocessor.common.PostProcessor.__init__#34",
        "src_path": "youtube_dl/postprocessor/common.py",
        "class_name": "youtube_dl.postprocessor.common.PostProcessor",
        "signature": "youtube_dl.postprocessor.common.PostProcessor.__init__(self, downloader=None)",
        "snippet": "    def __init__(self, downloader=None):\n        self._downloader = downloader",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.postprocessor.common.PostProcessor.set_downloader#37",
        "src_path": "youtube_dl/postprocessor/common.py",
        "class_name": "youtube_dl.postprocessor.common.PostProcessor",
        "signature": "youtube_dl.postprocessor.common.PostProcessor.set_downloader(self, downloader)",
        "snippet": "    def set_downloader(self, downloader):\n        \"\"\"Sets the downloader for this PP.\"\"\"\n        self._downloader = downloader",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.audiomack.AudiomackIE._real_extract#45",
        "src_path": "youtube_dl/extractor/audiomack.py",
        "class_name": "youtube_dl.extractor.audiomack.AudiomackIE",
        "signature": "youtube_dl.extractor.audiomack.AudiomackIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        # URLs end with [uploader name]/[uploader title]\n        # this title is whatever the user types in, and is rarely\n        # the proper song title.  Real metadata is in the api response\n        album_url_tag = self._match_id(url)\n\n        # Request the extended version of the api for extra fields like artist and title\n        api_response = self._download_json(\n            'http://www.audiomack.com/api/music/url/song/%s?extended=1&_=%d' % (\n                album_url_tag, time.time()),\n            album_url_tag)\n\n        # API is inconsistent with errors\n        if 'url' not in api_response or not api_response['url'] or 'error' in api_response:\n            raise ExtractorError('Invalid url %s', url)\n\n        # Audiomack wraps a lot of soundcloud tracks in their branded wrapper\n        # if so, pass the work off to the soundcloud extractor\n        if SoundcloudIE.suitable(api_response['url']):\n            return {'_type': 'url', 'url': api_response['url'], 'ie_key': 'Soundcloud'}\n\n        return {\n            'id': api_response.get('id', album_url_tag),\n            'uploader': api_response.get('artist'),\n            'title': api_response.get('title'),\n            'url': api_response['url'],\n        }",
        "begin_line": 45,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002347417840375587,
            "pseudo_dstar_susp": 0.0027100271002710027,
            "pseudo_tarantula_susp": 0.0005681818181818182,
            "pseudo_op2_susp": 0.0027100271002710027,
            "pseudo_barinel_susp": 0.0005681818181818182
        }
    },
    {
        "name": "youtube_dl.extractor.buzzfeed.BuzzFeedIE._real_extract#53",
        "src_path": "youtube_dl/extractor/buzzfeed.py",
        "class_name": "youtube_dl.extractor.buzzfeed.BuzzFeedIE",
        "signature": "youtube_dl.extractor.buzzfeed.BuzzFeedIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        webpage = self._download_webpage(url, playlist_id)\n\n        all_buckets = re.findall(\n            r'(?s)<div class=\"video-embed[^\"]*\"..*?rel:bf_bucket_data=\\'([^\\']+)\\'',\n            webpage)\n\n        entries = []\n        for bd_json in all_buckets:\n            bd = json.loads(bd_json)\n            video = bd.get('video') or bd.get('progload_video')\n            if not video:\n                continue\n            entries.append(self.url_result(video['url']))\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'entries': entries,\n        }",
        "begin_line": 53,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022222222222222222,
            "pseudo_dstar_susp": 0.0022727272727272726,
            "pseudo_tarantula_susp": 0.0007552870090634441,
            "pseudo_op2_susp": 0.0022727272727272726,
            "pseudo_barinel_susp": 0.0007552870090634441
        }
    },
    {
        "name": "youtube_dl.extractor.aol.AolIE._real_extract#41",
        "src_path": "youtube_dl/extractor/aol.py",
        "class_name": "youtube_dl.extractor.aol.AolIE",
        "signature": "youtube_dl.extractor.aol.AolIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        playlist_id = mobj.group('playlist_id')\n        if not playlist_id or self._downloader.params.get('noplaylist'):\n            return self.url_result('5min:%s' % video_id)\n\n        self.to_screen('Downloading playlist %s - add --no-playlist to just download video %s' % (playlist_id, video_id))\n\n        webpage = self._download_webpage(url, playlist_id)\n        title = self._html_search_regex(\n            r'<h1 class=\"video-title[^\"]*\">(.+?)</h1>', webpage, 'title')\n        playlist_html = self._search_regex(\n            r\"(?s)<ul\\s+class='video-related[^']*'>(.*?)</ul>\", webpage,\n            'playlist HTML')\n        entries = [{\n            '_type': 'url',\n            'url': 'aol-video:%s' % m.group('id'),\n            'ie_key': 'Aol',\n        } for m in re.finditer(\n            r\"<a\\s+href='.*videoid=(?P<id>[0-9]+)'\\s+class='video-thumb'>\",\n            playlist_html)]\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'display_id': mobj.group('playlist_display_id'),\n            'title': title,\n            'entries': entries,\n        }",
        "begin_line": 41,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002617801047120419,
            "pseudo_dstar_susp": 0.0028011204481792717,
            "pseudo_tarantula_susp": 0.0007874015748031496,
            "pseudo_op2_susp": 0.0028011204481792717,
            "pseudo_barinel_susp": 0.0007874015748031496
        }
    },
    {
        "name": "youtube_dl.extractor.acast.ACastIE._real_extract#31",
        "src_path": "youtube_dl/extractor/acast.py",
        "class_name": "youtube_dl.extractor.acast.ACastIE",
        "signature": "youtube_dl.extractor.acast.ACastIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        channel, display_id = re.match(self._VALID_URL, url).groups()\n        cast_data = self._download_json(self._API_BASE_URL + 'channels/%s/acasts/%s/playback' % (channel, display_id), display_id)\n\n        return {\n            'id': compat_str(cast_data['id']),\n            'display_id': display_id,\n            'url': cast_data['blings'][0]['audio'],\n            'title': cast_data['name'],\n            'description': cast_data.get('description'),\n            'thumbnail': cast_data.get('image'),\n            'timestamp': int_or_none(cast_data.get('publishingDate')),\n            'duration': int_or_none(cast_data.get('duration')),\n        }",
        "begin_line": 31,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00273224043715847,
            "pseudo_dstar_susp": 0.002544529262086514,
            "pseudo_tarantula_susp": 0.001034126163391934,
            "pseudo_op2_susp": 0.002544529262086514,
            "pseudo_barinel_susp": 0.001034126163391934
        }
    },
    {
        "name": "youtube_dl.extractor.acast.ACastChannelIE.suitable#61",
        "src_path": "youtube_dl/extractor/acast.py",
        "class_name": "youtube_dl.extractor.acast.ACastChannelIE",
        "signature": "youtube_dl.extractor.acast.ACastChannelIE.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        return False if ACastIE.suitable(url) else super(ACastChannelIE, cls).suitable(url)",
        "begin_line": 61,
        "end_line": 62,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.0011682242990654205,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.0011682242990654205
        }
    },
    {
        "name": "youtube_dl.extractor.acast.ACastChannelIE._real_extract#64",
        "src_path": "youtube_dl/extractor/acast.py",
        "class_name": "youtube_dl.extractor.acast.ACastChannelIE",
        "signature": "youtube_dl.extractor.acast.ACastChannelIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        channel_data = self._download_json(self._API_BASE_URL + 'channels/%s' % display_id, display_id)\n        casts = self._download_json(self._API_BASE_URL + 'channels/%s/acasts' % display_id, display_id)\n        entries = [self.url_result('https://www.acast.com/%s/%s' % (display_id, cast['url']), 'ACast') for cast in casts]\n\n        return self.playlist_result(entries, compat_str(channel_data['id']), channel_data['name'], channel_data.get('description'))",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0026246719160104987,
            "pseudo_dstar_susp": 0.002680965147453083,
            "pseudo_tarantula_susp": 0.0008802816901408451,
            "pseudo_op2_susp": 0.002680965147453083,
            "pseudo_barinel_susp": 0.0008802816901408451
        }
    },
    {
        "name": "youtube_dl.aes.aes_ctr_decrypt#11",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.aes_ctr_decrypt(data, key, counter)",
        "snippet": "def aes_ctr_decrypt(data, key, counter):\n    \"\"\"\n    Decrypt with aes in counter mode\n\n    @param {int[]} data        cipher\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {instance} counter  Instance whose next_value function (@returns {int[]}  16-Byte block)\n                               returns the next counter block\n    @returns {int[]}           decrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    decrypted_data = []\n    for i in range(block_count):\n        counter_block = counter.next_value()\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        block += [0] * (BLOCK_SIZE_BYTES - len(block))\n\n        cipher_counter_block = aes_encrypt(counter_block, expanded_key)\n        decrypted_data += xor(block, cipher_counter_block)\n    decrypted_data = decrypted_data[:len(data)]\n\n    return decrypted_data",
        "begin_line": 11,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.aes_cbc_decrypt#37",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.aes_cbc_decrypt(data, key, iv)",
        "snippet": "def aes_cbc_decrypt(data, key, iv):\n    \"\"\"\n    Decrypt with aes in CBC mode\n\n    @param {int[]} data        cipher\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {int[]} iv          16-Byte IV\n    @returns {int[]}           decrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    decrypted_data = []\n    previous_cipher_block = iv\n    for i in range(block_count):\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        block += [0] * (BLOCK_SIZE_BYTES - len(block))\n\n        decrypted_block = aes_decrypt(block, expanded_key)\n        decrypted_data += xor(decrypted_block, previous_cipher_block)\n        previous_cipher_block = block\n    decrypted_data = decrypted_data[:len(data)]\n\n    return decrypted_data",
        "begin_line": 37,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.key_expansion#63",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.key_expansion(data)",
        "snippet": "def key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    data = data[:]  # copy\n    rcon_iteration = 1\n    key_size_bytes = len(data)\n    expanded_key_size_bytes = (key_size_bytes // 4 + 7) * BLOCK_SIZE_BYTES\n\n    while len(data) < expanded_key_size_bytes:\n        temp = data[-4:]\n        temp = key_schedule_core(temp, rcon_iteration)\n        rcon_iteration += 1\n        data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        for _ in range(3):\n            temp = data[-4:]\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        if key_size_bytes == 32:\n            temp = data[-4:]\n            temp = sub_bytes(temp)\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        for _ in range(3 if key_size_bytes == 32 else 2 if key_size_bytes == 24 else 0):\n            temp = data[-4:]\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n    data = data[:expanded_key_size_bytes]\n\n    return data",
        "begin_line": 63,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.aes_encrypt#98",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.aes_encrypt(data, expanded_key)",
        "snippet": "def aes_encrypt(data, expanded_key):\n    \"\"\"\n    Encrypt one block with aes\n\n    @param {int[]} data          16-Byte state\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte cipher\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n    for i in range(1, rounds + 1):\n        data = sub_bytes(data)\n        data = shift_rows(data)\n        if i != rounds:\n            data = mix_columns(data)\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES])\n\n    return data",
        "begin_line": 98,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.aes_decrypt#119",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.aes_decrypt(data, expanded_key)",
        "snippet": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    for i in range(rounds, 0, -1):\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES])\n        if i != rounds:\n            data = mix_columns_inv(data)\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data",
        "begin_line": 119,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.aes_decrypt_text#140",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.aes_decrypt_text(data, password, key_size_bytes)",
        "snippet": "def aes_decrypt_text(data, password, key_size_bytes):\n    \"\"\"\n    Decrypt text\n    - The first 8 Bytes of decoded 'data' are the 8 high Bytes of the counter\n    - The cipher key is retrieved by encrypting the first 16 Byte of 'password'\n      with the first 'key_size_bytes' Bytes from 'password' (if necessary filled with 0's)\n    - Mode of operation is 'counter'\n\n    @param {str} data                    Base64 encoded string\n    @param {str,unicode} password        Password (will be encoded with utf-8)\n    @param {int} key_size_bytes          Possible values: 16 for 128-Bit, 24 for 192-Bit or 32 for 256-Bit\n    @returns {str}                       Decrypted data\n    \"\"\"\n    NONCE_LENGTH_BYTES = 8\n\n    data = bytes_to_intlist(base64.b64decode(data.encode('utf-8')))\n    password = bytes_to_intlist(password.encode('utf-8'))\n\n    key = password[:key_size_bytes] + [0] * (key_size_bytes - len(password))\n    key = aes_encrypt(key[:BLOCK_SIZE_BYTES], key_expansion(key)) * (key_size_bytes // BLOCK_SIZE_BYTES)\n\n    nonce = data[:NONCE_LENGTH_BYTES]\n    cipher = data[NONCE_LENGTH_BYTES:]\n\n    class Counter:\n        __value = nonce + [0] * (BLOCK_SIZE_BYTES - NONCE_LENGTH_BYTES)\n\n        def next_value(self):\n            temp = self.__value\n            self.__value = inc(self.__value)\n            return temp\n\n    decrypted_data = aes_ctr_decrypt(cipher, key, Counter())\n    plaintext = intlist_to_bytes(decrypted_data)\n\n    return plaintext",
        "begin_line": 140,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.Counter.aes_decrypt_text#140",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes.Counter",
        "signature": "youtube_dl.aes.Counter.aes_decrypt_text(data, password, key_size_bytes)",
        "snippet": "def aes_decrypt_text(data, password, key_size_bytes):\n    \"\"\"\n    Decrypt text\n    - The first 8 Bytes of decoded 'data' are the 8 high Bytes of the counter\n    - The cipher key is retrieved by encrypting the first 16 Byte of 'password'\n      with the first 'key_size_bytes' Bytes from 'password' (if necessary filled with 0's)\n    - Mode of operation is 'counter'\n\n    @param {str} data                    Base64 encoded string\n    @param {str,unicode} password        Password (will be encoded with utf-8)\n    @param {int} key_size_bytes          Possible values: 16 for 128-Bit, 24 for 192-Bit or 32 for 256-Bit\n    @returns {str}                       Decrypted data\n    \"\"\"\n    NONCE_LENGTH_BYTES = 8\n\n    data = bytes_to_intlist(base64.b64decode(data.encode('utf-8')))\n    password = bytes_to_intlist(password.encode('utf-8'))\n\n    key = password[:key_size_bytes] + [0] * (key_size_bytes - len(password))\n    key = aes_encrypt(key[:BLOCK_SIZE_BYTES], key_expansion(key)) * (key_size_bytes // BLOCK_SIZE_BYTES)\n\n    nonce = data[:NONCE_LENGTH_BYTES]\n    cipher = data[NONCE_LENGTH_BYTES:]\n\n    class Counter:\n        __value = nonce + [0] * (BLOCK_SIZE_BYTES - NONCE_LENGTH_BYTES)\n\n        def next_value(self):\n            temp = self.__value\n            self.__value = inc(self.__value)\n            return temp\n\n    decrypted_data = aes_ctr_decrypt(cipher, key, Counter())\n    plaintext = intlist_to_bytes(decrypted_data)\n\n    return plaintext",
        "begin_line": 140,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.Counter.next_value#167",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes.Counter",
        "signature": "youtube_dl.aes.Counter.next_value(self)",
        "snippet": "        def next_value(self):\n            temp = self.__value\n            self.__value = inc(self.__value)\n            return temp",
        "begin_line": 167,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.sub_bytes#252",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.sub_bytes(data)",
        "snippet": "def sub_bytes(data):\n    return [SBOX[x] for x in data]",
        "begin_line": 252,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.sub_bytes_inv#256",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.sub_bytes_inv(data)",
        "snippet": "def sub_bytes_inv(data):\n    return [SBOX_INV[x] for x in data]",
        "begin_line": 256,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.rotate#260",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.rotate(data)",
        "snippet": "def rotate(data):\n    return data[1:] + [data[0]]",
        "begin_line": 260,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.key_schedule_core#264",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.key_schedule_core(data, rcon_iteration)",
        "snippet": "def key_schedule_core(data, rcon_iteration):\n    data = rotate(data)\n    data = sub_bytes(data)\n    data[0] = data[0] ^ RCON[rcon_iteration]\n\n    return data",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.xor#272",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.xor(data1, data2)",
        "snippet": "def xor(data1, data2):\n    return [x ^ y for x, y in zip(data1, data2)]",
        "begin_line": 272,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.rijndael_mul#276",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.rijndael_mul(a, b)",
        "snippet": "def rijndael_mul(a, b):\n    if(a == 0 or b == 0):\n        return 0\n    return RIJNDAEL_EXP_TABLE[(RIJNDAEL_LOG_TABLE[a] + RIJNDAEL_LOG_TABLE[b]) % 0xFF]",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.mix_column#282",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.mix_column(data, matrix)",
        "snippet": "def mix_column(data, matrix):\n    data_mixed = []\n    for row in range(4):\n        mixed = 0\n        for column in range(4):\n            # xor is (+) and (-)\n            mixed ^= rijndael_mul(data[column], matrix[row][column])\n        data_mixed.append(mixed)\n    return data_mixed",
        "begin_line": 282,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.mix_columns#293",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.mix_columns(data, matrix=MIX_COLUMN_MATRIX)",
        "snippet": "def mix_columns(data, matrix=MIX_COLUMN_MATRIX):\n    data_mixed = []\n    for i in range(4):\n        column = data[i * 4: (i + 1) * 4]\n        data_mixed += mix_column(column, matrix)\n    return data_mixed",
        "begin_line": 293,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.mix_columns_inv#301",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.mix_columns_inv(data)",
        "snippet": "def mix_columns_inv(data):\n    return mix_columns(data, MIX_COLUMN_MATRIX_INV)",
        "begin_line": 301,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.shift_rows#305",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.shift_rows(data)",
        "snippet": "def shift_rows(data):\n    data_shifted = []\n    for column in range(4):\n        for row in range(4):\n            data_shifted.append(data[((column + row) & 0b11) * 4 + row])\n    return data_shifted",
        "begin_line": 305,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.shift_rows_inv#313",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.shift_rows_inv(data)",
        "snippet": "def shift_rows_inv(data):\n    data_shifted = []\n    for column in range(4):\n        for row in range(4):\n            data_shifted.append(data[((column - row) & 0b11) * 4 + row])\n    return data_shifted",
        "begin_line": 313,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.aes.inc#321",
        "src_path": "youtube_dl/aes.py",
        "class_name": "youtube_dl.aes",
        "signature": "youtube_dl.aes.inc(data)",
        "snippet": "def inc(data):\n    data = data[:]  # copy\n    for i in range(len(data) - 1, -1, -1):\n        if data[i] == 255:\n            data[i] = 0\n        else:\n            data[i] = data[i] + 1\n            break\n    return data",
        "begin_line": 321,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.pladform.PladformIE._extract_url#50",
        "src_path": "youtube_dl/extractor/pladform.py",
        "class_name": "youtube_dl.extractor.pladform.PladformIE",
        "signature": "youtube_dl.extractor.pladform.PladformIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>(?:https?:)?//out\\.pladform\\.ru/player\\?.+?)\"', webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.bandcamp.BandcampAlbumIE._real_extract#163",
        "src_path": "youtube_dl/extractor/bandcamp.py",
        "class_name": "youtube_dl.extractor.bandcamp.BandcampAlbumIE",
        "signature": "youtube_dl.extractor.bandcamp.BandcampAlbumIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        uploader_id = mobj.group('subdomain')\n        album_id = mobj.group('album_id')\n        playlist_id = album_id or uploader_id\n        webpage = self._download_webpage(url, playlist_id)\n        tracks_paths = re.findall(r'<a href=\"(.*?)\" itemprop=\"url\">', webpage)\n        if not tracks_paths:\n            raise ExtractorError('The page doesn\\'t contain any tracks')\n        entries = [\n            self.url_result(compat_urlparse.urljoin(url, t_path), ie=BandcampIE.ie_key())\n            for t_path in tracks_paths]\n        title = self._search_regex(\n            r'album_title\\s*:\\s*\"(.*?)\"', webpage, 'title', fatal=False)\n        return {\n            '_type': 'playlist',\n            'uploader_id': uploader_id,\n            'id': playlist_id,\n            'title': title,\n            'entries': entries,\n        }",
        "begin_line": 163,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013679890560875513,
            "pseudo_dstar_susp": 0.0013422818791946308,
            "pseudo_tarantula_susp": 0.0009569377990430622,
            "pseudo_op2_susp": 0.0013422818791946308,
            "pseudo_barinel_susp": 0.0009569377990430622
        }
    },
    {
        "name": "youtube_dl.postprocessor.ffmpeg.FFmpegPostProcessor.get_versions#50",
        "src_path": "youtube_dl/postprocessor/ffmpeg.py",
        "class_name": "youtube_dl.postprocessor.ffmpeg.FFmpegPostProcessor",
        "signature": "youtube_dl.postprocessor.ffmpeg.FFmpegPostProcessor.get_versions(downloader=None)",
        "snippet": "    def get_versions(downloader=None):\n        return FFmpegPostProcessor(downloader)._versions",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.postprocessor.ffmpeg.FFmpegPostProcessor._determine_executables#53",
        "src_path": "youtube_dl/postprocessor/ffmpeg.py",
        "class_name": "youtube_dl.postprocessor.ffmpeg.FFmpegPostProcessor",
        "signature": "youtube_dl.postprocessor.ffmpeg.FFmpegPostProcessor._determine_executables(self)",
        "snippet": "    def _determine_executables(self):\n        programs = ['avprobe', 'avconv', 'ffmpeg', 'ffprobe']\n        prefer_ffmpeg = False\n\n        self.basename = None\n        self.probe_basename = None\n\n        self._paths = None\n        self._versions = None\n        if self._downloader:\n            prefer_ffmpeg = self._downloader.params.get('prefer_ffmpeg', False)\n            location = self._downloader.params.get('ffmpeg_location')\n            if location is not None:\n                if not os.path.exists(location):\n                    self._downloader.report_warning(\n                        'ffmpeg-location %s does not exist! '\n                        'Continuing without avconv/ffmpeg.' % (location))\n                    self._versions = {}\n                    return\n                elif not os.path.isdir(location):\n                    basename = os.path.splitext(os.path.basename(location))[0]\n                    if basename not in programs:\n                        self._downloader.report_warning(\n                            'Cannot identify executable %s, its basename should be one of %s. '\n                            'Continuing without avconv/ffmpeg.' %\n                            (location, ', '.join(programs)))\n                        self._versions = {}\n                        return None\n                    location = os.path.dirname(os.path.abspath(location))\n                    if basename in ('ffmpeg', 'ffprobe'):\n                        prefer_ffmpeg = True\n\n                self._paths = dict(\n                    (p, os.path.join(location, p)) for p in programs)\n                self._versions = dict(\n                    (p, get_exe_version(self._paths[p], args=['-version']))\n                    for p in programs)\n        if self._versions is None:\n            self._versions = dict(\n                (p, get_exe_version(p, args=['-version'])) for p in programs)\n            self._paths = dict((p, p) for p in programs)\n\n        if prefer_ffmpeg:\n            prefs = ('ffmpeg', 'avconv')\n        else:\n            prefs = ('avconv', 'ffmpeg')\n        for p in prefs:\n            if self._versions[p]:\n                self.basename = p\n                break\n\n        if prefer_ffmpeg:\n            prefs = ('ffprobe', 'avprobe')\n        else:\n            prefs = ('avprobe', 'ffprobe')\n        for p in prefs:\n            if self._versions[p]:\n                self.probe_basename = p\n                break",
        "begin_line": 53,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.preferredencoding#74",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.preferredencoding()",
        "snippet": "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        'TEST'.encode(pref)\n    except Exception:\n        pref = 'UTF-8'\n\n    return pref",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.write_json_file#89",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.write_json_file(obj, fn)",
        "snippet": "def write_json_file(obj, fn):\n    \"\"\" Encode obj as JSON and write it to fn, atomically if possible \"\"\"\n\n    fn = encodeFilename(fn)\n    if sys.version_info < (3, 0) and sys.platform != 'win32':\n        encoding = get_filesystem_encoding()\n        # os.path.basename returns a bytes object, but NamedTemporaryFile\n        # will fail if the filename contains non ascii characters unless we\n        # use a unicode object\n        path_basename = lambda f: os.path.basename(fn).decode(encoding)\n        # the same for os.path.dirname\n        path_dirname = lambda f: os.path.dirname(fn).decode(encoding)\n    else:\n        path_basename = os.path.basename\n        path_dirname = os.path.dirname\n\n    args = {\n        'suffix': '.tmp',\n        'prefix': path_basename(fn) + '.',\n        'dir': path_dirname(fn),\n        'delete': False,\n    }\n\n    # In Python 2.x, json.dump expects a bytestream.\n    # In Python 3.x, it writes to a character stream\n    if sys.version_info < (3, 0):\n        args['mode'] = 'wb'\n    else:\n        args.update({\n            'mode': 'w',\n            'encoding': 'utf-8',\n        })\n\n    tf = tempfile.NamedTemporaryFile(**compat_kwargs(args))\n\n    try:\n        with tf:\n            json.dump(obj, tf)\n        if sys.platform == 'win32':\n            # Need to remove existing file on Windows, else os.rename raises\n            # WindowsError or FileExistsError.\n            try:\n                os.unlink(fn)\n            except OSError:\n                pass\n        os.rename(tf.name, fn)\n    except Exception:\n        try:\n            os.remove(tf.name)\n        except OSError:\n            pass\n        raise",
        "begin_line": 89,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028011204481792717,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.000942507068803016,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.000942507068803016
        }
    },
    {
        "name": "youtube_dl.utils.find_xpath_attr#144",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.find_xpath_attr(node, xpath, key, val=None)",
        "snippet": "    def find_xpath_attr(node, xpath, key, val=None):\n        \"\"\" Find the xpath xpath[@key=val] \"\"\"\n        assert re.match(r'^[a-zA-Z_-]+$', key)\n        if val:\n            assert re.match(r'^[a-zA-Z0-9@\\s:._-]*$', val)\n        expr = xpath + ('[@%s]' % key if val is None else \"[@%s='%s']\" % (key, val))\n        return node.find(expr)",
        "begin_line": 144,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.xpath_with_ns#169",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.xpath_with_ns(path, ns_map)",
        "snippet": "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
        "begin_line": 169,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.xpath_element#181",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT)",
        "snippet": "def xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT):\n    def _find_xpath(xpath):\n        if sys.version_info < (2, 7):  # Crazy 2.6\n            xpath = xpath.encode('ascii')\n        return node.find(xpath)\n\n    if isinstance(xpath, (str, compat_str)):\n        n = _find_xpath(xpath)\n    else:\n        for xp in xpath:\n            n = _find_xpath(xp)\n            if n is not None:\n                break\n\n    if n is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element %s' % name)\n        else:\n            return None\n    return n",
        "begin_line": 181,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils._find_xpath#182",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils._find_xpath(xpath)",
        "snippet": "    def _find_xpath(xpath):\n        if sys.version_info < (2, 7):  # Crazy 2.6\n            xpath = xpath.encode('ascii')\n        return node.find(xpath)",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.xpath_attr#221",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT)",
        "snippet": "def xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT):\n    n = find_xpath_attr(node, xpath, key)\n    if n is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = '%s[@%s]' % (xpath, key) if name is None else name\n            raise ExtractorError('Could not find XML attribute %s' % name)\n        else:\n            return None\n    return n.attrib[key]",
        "begin_line": 221,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.get_element_by_attribute#239",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.get_element_by_attribute(attribute, value, html)",
        "snippet": "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n\n    m = re.search(r'''(?xs)\n        <([a-zA-Z0-9:._-]+)\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n         \\s+%s=['\"]?%s['\"]?\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n        \\s*>\n        (?P<content>.*?)\n        </\\1>\n    ''' % (re.escape(attribute), re.escape(value)), html)\n\n    if not m:\n        return None\n    res = m.group('content')\n\n    if res.startswith('\"') or res.startswith(\"'\"):\n        res = res[1:-1]\n\n    return unescapeHTML(res)",
        "begin_line": 239,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.clean_html#262",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.clean_html(html)",
        "snippet": "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n\n    if html is None:  # Convenience for sanitizing descriptions etc.\n        return html\n\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
        "begin_line": 262,
        "end_line": 276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.002380952380952381,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.002380952380952381,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.sanitize_open#279",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.sanitize_open(filename, open_mode)",
        "snippet": "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == '-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = sanitize_path(filename)\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(alt_filename), open_mode)\n            return (stream, alt_filename)",
        "begin_line": 279,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.timeconvert#311",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.timeconvert(timestr)",
        "snippet": "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
        "begin_line": 311,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001142857142857143,
            "pseudo_dstar_susp": 0.0011890606420927466,
            "pseudo_tarantula_susp": 0.0005685048322910744,
            "pseudo_op2_susp": 0.0011890606420927466,
            "pseudo_barinel_susp": 0.0005685048322910744
        }
    },
    {
        "name": "youtube_dl.utils.sanitize_filename#320",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.sanitize_filename(s, restricted=False, is_id=False)",
        "snippet": "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    # Handle timestamps\n    s = re.sub(r'[0-9]+(?::[0-9]+)+', lambda m: m.group(0).replace(':', '_'), s)\n    result = ''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if result.startswith('-'):\n            result = '_' + result[len('-'):]\n        result = result.lstrip('.')\n        if not result:\n            result = '_'\n    return result",
        "begin_line": 320,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004807692307692308,
            "pseudo_dstar_susp": 0.00558659217877095,
            "pseudo_tarantula_susp": 0.001524390243902439,
            "pseudo_op2_susp": 0.00558659217877095,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "youtube_dl.utils.replace_insane#325",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.replace_insane(char)",
        "snippet": "    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char",
        "begin_line": 325,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004672897196261682,
            "pseudo_dstar_susp": 0.005405405405405406,
            "pseudo_tarantula_susp": 0.001349527665317139,
            "pseudo_op2_susp": 0.005405405405405406,
            "pseudo_barinel_susp": 0.001349527665317139
        }
    },
    {
        "name": "youtube_dl.utils.sanitize_path#358",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.sanitize_path(s)",
        "snippet": "def sanitize_path(s):\n    \"\"\"Sanitizes and normalizes path on Windows\"\"\"\n    if sys.platform != 'win32':\n        return s\n    drive_or_unc, _ = os.path.splitdrive(s)\n    if sys.version_info < (2, 7) and not drive_or_unc:\n        drive_or_unc, _ = os.path.splitunc(s)\n    norm_path = os.path.normpath(remove_start(s, drive_or_unc)).split(os.path.sep)\n    if drive_or_unc:\n        norm_path.pop(0)\n    sanitized_path = [\n        path_part if path_part in ['.', '..'] else re.sub('(?:[/<>:\"\\\\|\\\\\\\\?\\\\*]|[\\s.]$)', '#', path_part)\n        for path_part in norm_path]\n    if drive_or_unc:\n        sanitized_path.insert(0, drive_or_unc + os.path.sep)\n    return os.path.join(*sanitized_path)",
        "begin_line": 358,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0049504950495049506,
            "pseudo_dstar_susp": 0.005747126436781609,
            "pseudo_tarantula_susp": 0.0013054830287206266,
            "pseudo_op2_susp": 0.005747126436781609,
            "pseudo_barinel_susp": 0.0013054830287206266
        }
    },
    {
        "name": "youtube_dl.utils.sanitized_Request#378",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.sanitized_Request(url, *args, **kwargs)",
        "snippet": "def sanitized_Request(url, *args, **kwargs):\n    return compat_urllib_request.Request(\n        'http:%s' % url if url.startswith('//') else url, *args, **kwargs)",
        "begin_line": 378,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.05263157894736842,
            "pseudo_dstar_susp": 0.008,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.008,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.utils.orderedSet#383",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.orderedSet(iterable)",
        "snippet": "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
        "begin_line": 383,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007369196757553427,
            "pseudo_dstar_susp": 0.0007987220447284345,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.0007987220447284345,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.utils._htmlentity_transform#392",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils._htmlentity_transform(entity)",
        "snippet": "def _htmlentity_transform(entity):\n    \"\"\"Transforms an HTML entity to a character.\"\"\"\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(r'#(x[0-9a-fA-F]+|[0-9]+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith('x'):\n            base = 16\n            numstr = '0%s' % numstr\n        else:\n            base = 10\n        # See https://github.com/rg3/youtube-dl/issues/7518\n        try:\n            return compat_chr(int(numstr, base))\n        except ValueError:\n            pass\n\n    # Unknown entity in name, return its literal representation\n    return '&%s;' % entity",
        "begin_line": 392,
        "end_line": 413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011507479861910242,
            "pseudo_dstar_susp": 0.001092896174863388,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.001092896174863388,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.utils.unescapeHTML#416",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.unescapeHTML(s)",
        "snippet": "def unescapeHTML(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n\n    return re.sub(\n        r'&([^;]+);', lambda m: _htmlentity_transform(m.group(1)), s)",
        "begin_line": 416,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028653295128939827,
            "pseudo_dstar_susp": 0.002777777777777778,
            "pseudo_tarantula_susp": 0.000946969696969697,
            "pseudo_op2_susp": 0.002777777777777778,
            "pseudo_barinel_susp": 0.000946969696969697
        }
    },
    {
        "name": "youtube_dl.utils.encodeFilename#437",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.encodeFilename(s, for_subprocess=False)",
        "snippet": "def encodeFilename(s, for_subprocess=False):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == compat_str\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    # Pass '' directly to use Unicode APIs on Windows 2000 and up\n    # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n    # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n    if not for_subprocess and sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        return s\n\n    return s.encode(get_subprocess_encoding(), 'ignore')",
        "begin_line": 437,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018726591760299626,
            "pseudo_dstar_susp": 0.0017667844522968198,
            "pseudo_tarantula_susp": 0.0008,
            "pseudo_op2_susp": 0.0017667844522968198,
            "pseudo_barinel_susp": 0.0008
        }
    },
    {
        "name": "youtube_dl.utils.encodeArgument#468",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.encodeArgument(s)",
        "snippet": "def encodeArgument(s):\n    if not isinstance(s, compat_str):\n        # Legacy code that uses byte strings\n        # Uncomment the following line after fixing all post processors\n        # assert False, 'Internal error: %r should be of type %r, is %r' % (s, compat_str, type(s))\n        s = s.decode('ascii')\n    return encodeFilename(s, True)",
        "begin_line": 468,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.make_HTTPS_handler#500",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.make_HTTPS_handler(params, **kwargs)",
        "snippet": "def make_HTTPS_handler(params, **kwargs):\n    opts_no_check_certificate = params.get('nocheckcertificate', False)\n    if hasattr(ssl, 'create_default_context'):  # Python >= 3.4 or 2.7.9\n        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n        if opts_no_check_certificate:\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n        try:\n            return YoutubeDLHTTPSHandler(params, context=context, **kwargs)\n        except TypeError:\n            # Python 2.7.8\n            # (create_default_context present but HTTPSHandler has no context=)\n            pass\n\n    if sys.version_info < (3, 2):\n        return YoutubeDLHTTPSHandler(params, **kwargs)\n    else:  # Python < 3.4\n        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        return YoutubeDLHTTPSHandler(params, context=context, **kwargs)",
        "begin_line": 500,
        "end_line": 522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.02127659574468085,
            "pseudo_tarantula_susp": 0.001226993865030675,
            "pseudo_op2_susp": 0.02127659574468085,
            "pseudo_barinel_susp": 0.001226993865030675
        }
    },
    {
        "name": "youtube_dl.utils.bug_reports_message#525",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.bug_reports_message()",
        "snippet": "def bug_reports_message():\n    if ytdl_is_updateable():\n        update_cmd = 'type  youtube-dl -U  to update'\n    else:\n        update_cmd = 'see  https://yt-dl.org/update  on how to update'\n    msg = '; please report this issue on https://yt-dl.org/bug .'\n    msg += ' Make sure you are using the latest version; %s.' % update_cmd\n    msg += ' Be sure to call youtube-dl with the --verbose flag and include its complete output.'\n    return msg",
        "begin_line": 525,
        "end_line": 533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006097560975609756,
            "pseudo_dstar_susp": 0.0045662100456621,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0045662100456621,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.ExtractorError.__init__#539",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.ExtractorError",
        "signature": "youtube_dl.utils.ExtractorError.__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)",
        "snippet": "    def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n        \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n        If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n        \"\"\"\n\n        if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n            expected = True\n        if video_id is not None:\n            msg = video_id + ': ' + msg\n        if cause:\n            msg += ' (caused by %r)' % cause\n        if not expected:\n            msg += bug_reports_message()\n        super(ExtractorError, self).__init__(msg)\n\n        self.traceback = tb\n        self.exc_info = sys.exc_info()  # preserve original exception\n        self.cause = cause\n        self.video_id = video_id",
        "begin_line": 539,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006097560975609756,
            "pseudo_dstar_susp": 0.004807692307692308,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.004807692307692308,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.ExtractorError.format_traceback#559",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.ExtractorError",
        "signature": "youtube_dl.utils.ExtractorError.format_traceback(self)",
        "snippet": "    def format_traceback(self):\n        if self.traceback is None:\n            return None\n        return ''.join(traceback.format_tb(self.traceback))",
        "begin_line": 559,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005434782608695652,
            "pseudo_dstar_susp": 0.004651162790697674,
            "pseudo_tarantula_susp": 0.0019569471624266144,
            "pseudo_op2_susp": 0.004651162790697674,
            "pseudo_barinel_susp": 0.0019569471624266144
        }
    },
    {
        "name": "youtube_dl.utils.DownloadError.__init__#585",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.DownloadError",
        "signature": "youtube_dl.utils.DownloadError.__init__(self, msg, exc_info=None)",
        "snippet": "    def __init__(self, msg, exc_info=None):\n        \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n        super(DownloadError, self).__init__(msg)\n        self.exc_info = exc_info",
        "begin_line": 585,
        "end_line": 588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005780346820809248,
            "pseudo_dstar_susp": 0.005,
            "pseudo_tarantula_susp": 0.0017667844522968198,
            "pseudo_op2_susp": 0.005,
            "pseudo_barinel_susp": 0.0017667844522968198
        }
    },
    {
        "name": "youtube_dl.utils._create_http_connection#639",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils._create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs)",
        "snippet": "def _create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs):\n    # Working around python 2 bug (see http://bugs.python.org/issue17849) by limiting\n    # expected HTTP responses to meet HTTP/1.0 or later (see also\n    # https://github.com/rg3/youtube-dl/issues/6727)\n    if sys.version_info < (3, 0):\n        kwargs[b'strict'] = True\n    hc = http_class(*args, **kwargs)\n    source_address = ydl_handler._params.get('source_address')\n    if source_address is not None:\n        sa = (source_address, 0)\n        if hasattr(hc, 'source_address'):  # Python 2.7+\n            hc.source_address = sa\n        else:  # Python 2.6\n            def _hc_connect(self, *args, **kwargs):\n                sock = compat_socket_create_connection(\n                    (self.host, self.port), self.timeout, sa)\n                if is_https:\n                    self.sock = ssl.wrap_socket(\n                        sock, self.key_file, self.cert_file,\n                        ssl_version=ssl.PROTOCOL_TLSv1)\n                else:\n                    self.sock = sock\n            hc.connect = functools.partial(_hc_connect, hc)\n\n    return hc",
        "begin_line": 639,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.022222222222222223,
            "pseudo_dstar_susp": 0.011764705882352941,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.011764705882352941,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.utils.handle_youtubedl_headers#666",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.handle_youtubedl_headers(headers)",
        "snippet": "def handle_youtubedl_headers(headers):\n    filtered_headers = headers\n\n    if 'Youtubedl-no-compression' in filtered_headers:\n        filtered_headers = dict((k, v) for k, v in filtered_headers.items() if k.lower() != 'accept-encoding')\n        del filtered_headers['Youtubedl-no-compression']\n\n    return filtered_headers",
        "begin_line": 666,
        "end_line": 673,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.022222222222222223,
            "pseudo_dstar_susp": 0.011764705882352941,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.011764705882352941,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHandler.__init__#694",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHandler",
        "signature": "youtube_dl.utils.YoutubeDLHandler.__init__(self, params, *args, **kwargs)",
        "snippet": "    def __init__(self, params, *args, **kwargs):\n        compat_urllib_request.HTTPHandler.__init__(self, *args, **kwargs)\n        self._params = params",
        "begin_line": 694,
        "end_line": 696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.02127659574468085,
            "pseudo_tarantula_susp": 0.001226993865030675,
            "pseudo_op2_susp": 0.02127659574468085,
            "pseudo_barinel_susp": 0.001226993865030675
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHandler.http_open#698",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHandler",
        "signature": "youtube_dl.utils.YoutubeDLHandler.http_open(self, req)",
        "snippet": "    def http_open(self, req):\n        return self.do_open(functools.partial(\n            _create_http_connection, self, compat_http_client.HTTPConnection, False),\n            req)",
        "begin_line": 698,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005291005291005291,
            "pseudo_dstar_susp": 0.006134969325153374,
            "pseudo_tarantula_susp": 0.0013422818791946308,
            "pseudo_op2_susp": 0.006134969325153374,
            "pseudo_barinel_susp": 0.0013422818791946308
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHandler.addinfourl_wrapper#711",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHandler",
        "signature": "youtube_dl.utils.YoutubeDLHandler.addinfourl_wrapper(stream, headers, url, code)",
        "snippet": "    def addinfourl_wrapper(stream, headers, url, code):\n        if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n            return compat_urllib_request.addinfourl(stream, headers, url, code)\n        ret = compat_urllib_request.addinfourl(stream, headers, url)\n        ret.code = code\n        return ret",
        "begin_line": 711,
        "end_line": 716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004201680672268907,
            "pseudo_dstar_susp": 0.004166666666666667,
            "pseudo_tarantula_susp": 0.0016891891891891893,
            "pseudo_op2_susp": 0.004166666666666667,
            "pseudo_barinel_susp": 0.0016891891891891893
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHandler.http_request#718",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHandler",
        "signature": "youtube_dl.utils.YoutubeDLHandler.http_request(self, req)",
        "snippet": "    def http_request(self, req):\n        # According to RFC 3986, URLs can not contain non-ASCII characters, however this is not\n        # always respected by websites, some tend to give out URLs with non percent-encoded\n        # non-ASCII characters (see telemb.py, ard.py [#3412])\n        # urllib chokes on URLs with non-ASCII characters (see http://bugs.python.org/issue3991)\n        # To work around aforementioned issue we will replace request's original URL with\n        # percent-encoded one\n        # Since redirects are also affected (e.g. http://www.southpark.de/alle-episoden/s18e09)\n        # the code of this workaround has been moved here from YoutubeDL.urlopen()\n        url = req.get_full_url()\n        url_escaped = escape_url(url)\n\n        # Substitute URL if any change after escaping\n        if url != url_escaped:\n            req_type = HEADRequest if req.get_method() == 'HEAD' else compat_urllib_request.Request\n            new_req = req_type(\n                url_escaped, data=req.data, headers=req.headers,\n                origin_req_host=req.origin_req_host, unverifiable=req.unverifiable)\n            new_req.timeout = req.timeout\n            req = new_req\n\n        for h, v in std_headers.items():\n            # Capitalize is needed because of Python bug 2275: http://bugs.python.org/issue2275\n            # The dict keys are capitalized because of this bug by urllib\n            if h.capitalize() not in req.headers:\n                req.add_header(h, v)\n\n        req.headers = handle_youtubedl_headers(req.headers)\n\n        if sys.version_info < (2, 7) and '#' in req.get_full_url():\n            # Python 2.6 is brain-dead when it comes to fragments\n            req._Request__original = req._Request__original.partition('#')[0]\n            req._Request__r_type = req._Request__r_type.partition('#')[0]\n\n        return req",
        "begin_line": 718,
        "end_line": 752,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.022222222222222223,
            "pseudo_dstar_susp": 0.011764705882352941,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.011764705882352941,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHandler.http_response#754",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHandler",
        "signature": "youtube_dl.utils.YoutubeDLHandler.http_response(self, req, resp)",
        "snippet": "    def http_response(self, req, resp):\n        old_resp = resp\n        # gzip\n        if resp.headers.get('Content-encoding', '') == 'gzip':\n            content = resp.read()\n            gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n            try:\n                uncompressed = io.BytesIO(gz.read())\n            except IOError as original_ioerror:\n                # There may be junk add the end of the file\n                # See http://stackoverflow.com/q/4928560/35070 for details\n                for i in range(1, 1024):\n                    try:\n                        gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                        uncompressed = io.BytesIO(gz.read())\n                    except IOError:\n                        continue\n                    break\n                else:\n                    raise original_ioerror\n            resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n            resp.msg = old_resp.msg\n        # deflate\n        if resp.headers.get('Content-encoding', '') == 'deflate':\n            gz = io.BytesIO(self.deflate(resp.read()))\n            resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n            resp.msg = old_resp.msg\n        # Percent-encode redirect URL of Location HTTP header to satisfy RFC 3986 (see\n        # https://github.com/rg3/youtube-dl/issues/6457).\n        if 300 <= resp.code < 400:\n            location = resp.headers.get('Location')\n            if location:\n                # As of RFC 2616 default charset is iso-8859-1 that is respected by python 3\n                if sys.version_info >= (3, 0):\n                    location = location.encode('iso-8859-1').decode('utf-8')\n                location_escaped = escape_url(location)\n                if location != location_escaped:\n                    del resp.headers['Location']\n                    resp.headers['Location'] = location_escaped\n        return resp",
        "begin_line": 754,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.1111111111111111,
            "pseudo_dstar_susp": 0.008264462809917356,
            "pseudo_tarantula_susp": 0.0018867924528301887,
            "pseudo_op2_susp": 0.008264462809917356,
            "pseudo_barinel_susp": 0.0018867924528301887
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHTTPSHandler.__init__#800",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHTTPSHandler",
        "signature": "youtube_dl.utils.YoutubeDLHTTPSHandler.__init__(self, params, https_conn_class=None, *args, **kwargs)",
        "snippet": "    def __init__(self, params, https_conn_class=None, *args, **kwargs):\n        compat_urllib_request.HTTPSHandler.__init__(self, *args, **kwargs)\n        self._https_conn_class = https_conn_class or compat_http_client.HTTPSConnection\n        self._params = params",
        "begin_line": 800,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.02127659574468085,
            "pseudo_tarantula_susp": 0.001226993865030675,
            "pseudo_op2_susp": 0.02127659574468085,
            "pseudo_barinel_susp": 0.001226993865030675
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLHTTPSHandler.https_open#805",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLHTTPSHandler",
        "signature": "youtube_dl.utils.YoutubeDLHTTPSHandler.https_open(self, req)",
        "snippet": "    def https_open(self, req):\n        kwargs = {}\n        if hasattr(self, '_context'):  # python > 2.6\n            kwargs['context'] = self._context\n        if hasattr(self, '_check_hostname'):  # python 3.x\n            kwargs['check_hostname'] = self._check_hostname\n        return self.do_open(functools.partial(\n            _create_http_connection, self, self._https_conn_class, True),\n            req, **kwargs)",
        "begin_line": 805,
        "end_line": 813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004347826086956522,
            "pseudo_dstar_susp": 0.004347826086956522,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.004347826086956522,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLCookieProcessor.__init__#817",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLCookieProcessor",
        "signature": "youtube_dl.utils.YoutubeDLCookieProcessor.__init__(self, cookiejar=None)",
        "snippet": "    def __init__(self, cookiejar=None):\n        compat_urllib_request.HTTPCookieProcessor.__init__(self, cookiejar)",
        "begin_line": 817,
        "end_line": 818,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.02127659574468085,
            "pseudo_tarantula_susp": 0.001226993865030675,
            "pseudo_op2_susp": 0.02127659574468085,
            "pseudo_barinel_susp": 0.001226993865030675
        }
    },
    {
        "name": "youtube_dl.utils.YoutubeDLCookieProcessor.http_response#820",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.YoutubeDLCookieProcessor",
        "signature": "youtube_dl.utils.YoutubeDLCookieProcessor.http_response(self, request, response)",
        "snippet": "    def http_response(self, request, response):\n        # Python 2 will choke on next HTTP request in row if there are non-ASCII\n        # characters in Set-Cookie HTTP header of last response (see\n        # https://github.com/rg3/youtube-dl/issues/6769).\n        # In order to at least prevent crashing we will percent encode Set-Cookie\n        # header before HTTPCookieProcessor starts processing it.\n        # if sys.version_info < (3, 0) and response.headers:\n        #     for set_cookie_header in ('Set-Cookie', 'Set-Cookie2'):\n        #         set_cookie = response.headers.get(set_cookie_header)\n        #         if set_cookie:\n        #             set_cookie_escaped = compat_urllib_parse.quote(set_cookie, b\"%/;:@&=+$,!~*'()?#[] \")\n        #             if set_cookie != set_cookie_escaped:\n        #                 del response.headers[set_cookie_header]\n        #                 response.headers[set_cookie_header] = set_cookie_escaped\n        return compat_urllib_request.HTTPCookieProcessor.http_response(self, request, response)",
        "begin_line": 820,
        "end_line": 834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.1111111111111111,
            "pseudo_dstar_susp": 0.008264462809917356,
            "pseudo_tarantula_susp": 0.0018867924528301887,
            "pseudo_op2_susp": 0.008264462809917356,
            "pseudo_barinel_susp": 0.0018867924528301887
        }
    },
    {
        "name": "youtube_dl.utils.parse_iso8601#840",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.parse_iso8601(date_str, delimiter='T', timezone=None)",
        "snippet": "def parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date \"\"\"\n\n    if date_str is None:\n        return None\n\n    date_str = re.sub(r'\\.[0-9]+', '', date_str)\n\n    if timezone is None:\n        m = re.search(\n            r'(?:Z$| ?(?P<sign>\\+|-)(?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})$)',\n            date_str)\n        if not m:\n            timezone = datetime.timedelta()\n        else:\n            date_str = date_str[:-len(m.group(0))]\n            if not m.group('sign'):\n                timezone = datetime.timedelta()\n            else:\n                sign = 1 if m.group('sign') == '+' else -1\n                timezone = datetime.timedelta(\n                    hours=sign * int(m.group('hours')),\n                    minutes=sign * int(m.group('minutes')))\n    try:\n        date_format = '%Y-%m-%d{0}%H:%M:%S'.format(delimiter)\n        dt = datetime.datetime.strptime(date_str, date_format) - timezone\n        return calendar.timegm(dt.timetuple())\n    except ValueError:\n        pass",
        "begin_line": 840,
        "end_line": 868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012484394506866417,
            "pseudo_dstar_susp": 0.0011668611435239206,
            "pseudo_tarantula_susp": 0.0021321961620469083,
            "pseudo_op2_susp": 0.0011668611435239206,
            "pseudo_barinel_susp": 0.0021321961620469083
        }
    },
    {
        "name": "youtube_dl.utils.unified_strdate#871",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.unified_strdate(date_str, day_first=True)",
        "snippet": "def unified_strdate(date_str, day_first=True):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n\n    if date_str is None:\n        return None\n    upload_date = None\n    # Replace commas\n    date_str = date_str.replace(',', ' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    if not re.match(r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$', date_str):\n        date_str = re.sub(r' ?(\\+|-)[0-9]{2}:?[0-9]{2}$', '', date_str)\n    # Remove AM/PM + timezone\n    date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n\n    format_expressions = [\n        '%d %B %Y',\n        '%d %b %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%b %dst %Y %I:%M%p',\n        '%b %dnd %Y %I:%M%p',\n        '%b %dth %Y %I:%M%p',\n        '%Y %m %d',\n        '%Y-%m-%d',\n        '%Y/%m/%d',\n        '%Y/%m/%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S.%f',\n        '%d.%m.%Y %H:%M',\n        '%d.%m.%Y %H.%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M:%S.%f',\n        '%Y-%m-%dT%H:%M',\n    ]\n    if day_first:\n        format_expressions.extend([\n            '%d-%m-%Y',\n            '%d.%m.%Y',\n            '%d/%m/%Y',\n            '%d/%m/%y',\n            '%d/%m/%Y %H:%M:%S',\n        ])\n    else:\n        format_expressions.extend([\n            '%m-%d-%Y',\n            '%m.%d.%Y',\n            '%m/%d/%Y',\n            '%m/%d/%y',\n            '%m/%d/%Y %H:%M:%S',\n        ])\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    if upload_date is not None:\n        return compat_str(upload_date)",
        "begin_line": 871,
        "end_line": 934,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009940357852882703,
            "pseudo_dstar_susp": 0.0009285051067780873,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0009285051067780873,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.determine_ext#937",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.determine_ext(url, default_ext='unknown_video')",
        "snippet": "def determine_ext(url, default_ext='unknown_video'):\n    if url is None:\n        return default_ext\n    guess = url.partition('?')[0].rpartition('.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    elif guess.rstrip('/') in (\n            'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'aac',\n            'flv', 'f4v', 'f4a', 'f4b',\n            'webm', 'ogg', 'ogv', 'oga', 'ogx', 'spx', 'opus',\n            'mkv', 'mka', 'mk3d',\n            'avi', 'divx',\n            'mov',\n            'asf', 'wmv', 'wma',\n            '3gp', '3g2',\n            'mp3',\n            'flac',\n            'ape',\n            'wav',\n            'f4f', 'f4m', 'm3u8', 'smil'):\n        return guess.rstrip('/')\n    else:\n        return default_ext",
        "begin_line": 937,
        "end_line": 959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005955926146515784,
            "pseudo_dstar_susp": 0.0006337135614702154,
            "pseudo_tarantula_susp": 0.0005583472920156337,
            "pseudo_op2_susp": 0.0006337135614702154,
            "pseudo_barinel_susp": 0.0005580357142857143
        }
    },
    {
        "name": "youtube_dl.utils.date_from_str#966",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.date_from_str(date_str)",
        "snippet": "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str in ('now', 'today'):\n        return today\n    if date_str == 'yesterday':\n        return today - datetime.timedelta(days=1)\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        # A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
        "begin_line": 966,
        "end_line": 992,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012787723785166241,
            "pseudo_dstar_susp": 0.0012642225031605564,
            "pseudo_tarantula_susp": 0.0009372071227741331,
            "pseudo_op2_susp": 0.0012642225031605564,
            "pseudo_barinel_susp": 0.0009372071227741331
        }
    },
    {
        "name": "youtube_dl.utils.DateRange.__init__#1008",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.DateRange",
        "signature": "youtube_dl.utils.DateRange.__init__(self, start=None, end=None)",
        "snippet": "    def __init__(self, start=None, end=None):\n        \"\"\"start and end must be strings in the format accepted by date\"\"\"\n        if start is not None:\n            self.start = date_from_str(start)\n        else:\n            self.start = datetime.datetime.min.date()\n        if end is not None:\n            self.end = date_from_str(end)\n        else:\n            self.end = datetime.datetime.max.date()\n        if self.start > self.end:\n            raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
        "begin_line": 1008,
        "end_line": 1019,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012787723785166241,
            "pseudo_dstar_susp": 0.0012642225031605564,
            "pseudo_tarantula_susp": 0.0009372071227741331,
            "pseudo_op2_susp": 0.0012642225031605564,
            "pseudo_barinel_susp": 0.0009372071227741331
        }
    },
    {
        "name": "youtube_dl.utils.DateRange.__contains__#1026",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.DateRange",
        "signature": "youtube_dl.utils.DateRange.__contains__(self, date)",
        "snippet": "    def __contains__(self, date):\n        \"\"\"Check if the date is in the range\"\"\"\n        if not isinstance(date, datetime.date):\n            date = date_from_str(date)\n        return self.start <= date <= self.end",
        "begin_line": 1026,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012787723785166241,
            "pseudo_dstar_susp": 0.0012642225031605564,
            "pseudo_tarantula_susp": 0.0009372071227741331,
            "pseudo_op2_susp": 0.0012642225031605564,
            "pseudo_barinel_susp": 0.0009372071227741331
        }
    },
    {
        "name": "youtube_dl.utils.platform_name#1036",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.platform_name()",
        "snippet": "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
        "begin_line": 1036,
        "end_line": 1043,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.write_string#1121",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.write_string(s, out=None, encoding=None)",
        "snippet": "def write_string(s, out=None, encoding=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == compat_str\n\n    if sys.platform == 'win32' and encoding is None and hasattr(out, 'fileno'):\n        if _windows_write_string(s, out):\n            return\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        byt = s.encode(encoding or preferredencoding(), 'ignore')\n        out.write(byt)\n    elif hasattr(out, 'buffer'):\n        enc = encoding or getattr(out, 'encoding', None) or preferredencoding()\n        byt = s.encode(enc, 'ignore')\n        out.buffer.write(byt)\n    else:\n        out.write(s)\n    out.flush()",
        "begin_line": 1121,
        "end_line": 1140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011111111111111112,
            "pseudo_dstar_susp": 0.007751937984496124,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.007751937984496124,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.bytes_to_intlist#1143",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.bytes_to_intlist(bs)",
        "snippet": "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
        "begin_line": 1143,
        "end_line": 1149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.intlist_to_bytes#1152",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.intlist_to_bytes(xs)",
        "snippet": "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    return struct_pack('%dB' % len(xs), *xs)",
        "begin_line": 1152,
        "end_line": 1155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.get_filesystem_encoding#1254",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.get_filesystem_encoding()",
        "snippet": "def get_filesystem_encoding():\n    encoding = sys.getfilesystemencoding()\n    return encoding if encoding is not None else 'utf-8'",
        "begin_line": 1254,
        "end_line": 1256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.shell_quote#1259",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.shell_quote(args)",
        "snippet": "def shell_quote(args):\n    quoted_args = []\n    encoding = get_filesystem_encoding()\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return ' '.join(quoted_args)",
        "begin_line": 1259,
        "end_line": 1267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.smuggle_url#1270",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.smuggle_url(url, data)",
        "snippet": "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {'__youtubedl_smuggle': json.dumps(data)})\n    return url + '#' + sdata",
        "begin_line": 1270,
        "end_line": 1275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005743825387708214,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005743825387708214,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.unsmuggle_url#1278",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.unsmuggle_url(smug_url, default=None)",
        "snippet": "def unsmuggle_url(smug_url, default=None):\n    if '#__youtubedl_smuggle' not in smug_url:\n        return smug_url, default\n    url, _, sdata = smug_url.rpartition('#')\n    jsond = compat_parse_qs(sdata)['__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
        "begin_line": 1278,
        "end_line": 1284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008,
            "pseudo_dstar_susp": 0.0008271298593879239,
            "pseudo_tarantula_susp": 0.0010362694300518134,
            "pseudo_op2_susp": 0.0008271298593879239,
            "pseudo_barinel_susp": 0.0010362694300518134
        }
    },
    {
        "name": "youtube_dl.utils.format_bytes#1287",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.format_bytes(bytes)",
        "snippet": "def format_bytes(bytes):\n    if bytes is None:\n        return 'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return '%.2f%s' % (converted, suffix)",
        "begin_line": 1287,
        "end_line": 1298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011806375442739079,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0012330456226880395,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.parse_filesize#1301",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.parse_filesize(s)",
        "snippet": "def parse_filesize(s):\n    if s is None:\n        return None\n\n    # The lower-case forms are of course incorrect and inofficial,\n    # but we support those too\n    _UNIT_TABLE = {\n        'B': 1,\n        'b': 1,\n        'KiB': 1024,\n        'KB': 1000,\n        'kB': 1024,\n        'Kb': 1000,\n        'MiB': 1024 ** 2,\n        'MB': 1000 ** 2,\n        'mB': 1024 ** 2,\n        'Mb': 1000 ** 2,\n        'GiB': 1024 ** 3,\n        'GB': 1000 ** 3,\n        'gB': 1024 ** 3,\n        'Gb': 1000 ** 3,\n        'TiB': 1024 ** 4,\n        'TB': 1000 ** 4,\n        'tB': 1024 ** 4,\n        'Tb': 1000 ** 4,\n        'PiB': 1024 ** 5,\n        'PB': 1000 ** 5,\n        'pB': 1024 ** 5,\n        'Pb': 1000 ** 5,\n        'EiB': 1024 ** 6,\n        'EB': 1000 ** 6,\n        'eB': 1024 ** 6,\n        'Eb': 1000 ** 6,\n        'ZiB': 1024 ** 7,\n        'ZB': 1000 ** 7,\n        'zB': 1024 ** 7,\n        'Zb': 1000 ** 7,\n        'YiB': 1024 ** 8,\n        'YB': 1000 ** 8,\n        'yB': 1024 ** 8,\n        'Yb': 1000 ** 8,\n    }\n\n    units_re = '|'.join(re.escape(u) for u in _UNIT_TABLE)\n    m = re.match(\n        r'(?P<num>[0-9]+(?:[,.][0-9]*)?)\\s*(?P<unit>%s)' % units_re, s)\n    if not m:\n        return None\n\n    num_str = m.group('num').replace(',', '.')\n    mult = _UNIT_TABLE[m.group('unit')]\n    return int(float(num_str) * mult)",
        "begin_line": 1301,
        "end_line": 1352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005837711617046118,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005837711617046118,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.fix_xml_ampersands#1374",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.fix_xml_ampersands(xml_str)",
        "snippet": "def fix_xml_ampersands(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return re.sub(\n        r'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',\n        '&amp;',\n        xml_str)",
        "begin_line": 1374,
        "end_line": 1379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000630119722747322,
            "pseudo_dstar_susp": 0.0007147962830593281,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0007147962830593281,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.remove_start#1397",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.remove_start(s, start)",
        "snippet": "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
        "begin_line": 1397,
        "end_line": 1400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009442870632672333,
            "pseudo_dstar_susp": 0.0008561643835616438,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008561643835616438,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.remove_end#1403",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.remove_end(s, end)",
        "snippet": "def remove_end(s, end):\n    if s.endswith(end):\n        return s[:-len(end)]\n    return s",
        "begin_line": 1403,
        "end_line": 1406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008130081300813008,
            "pseudo_dstar_susp": 0.0007942811755361397,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007942811755361397,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.remove_quotes#1409",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.remove_quotes(s)",
        "snippet": "def remove_quotes(s):\n    if s is None or len(s) < 2:\n        return s\n    for quote in ('\"', \"'\", ):\n        if s[0] == quote and s[-1] == quote:\n            return s[1:-1]\n    return s",
        "begin_line": 1409,
        "end_line": 1415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.url_basename#1418",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.url_basename(url)",
        "snippet": "def url_basename(url):\n    path = compat_urlparse.urlparse(url).path\n    return path.strip('/').split('/')[-1]",
        "begin_line": 1418,
        "end_line": 1420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003125,
            "pseudo_dstar_susp": 0.003194888178913738,
            "pseudo_tarantula_susp": 0.0009174311926605505,
            "pseudo_op2_susp": 0.003194888178913738,
            "pseudo_barinel_susp": 0.0009174311926605505
        }
    },
    {
        "name": "youtube_dl.utils.HEADRequest.get_method#1424",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.HEADRequest",
        "signature": "youtube_dl.utils.HEADRequest.get_method(self)",
        "snippet": "    def get_method(self):\n        return \"HEAD\"",
        "begin_line": 1424,
        "end_line": 1425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012165450121654502,
            "pseudo_dstar_susp": 0.0013531799729364006,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0013531799729364006,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.int_or_none#1428",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.int_or_none(v, scale=1, default=None, get_attr=None, invscale=1)",
        "snippet": "def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v == '':\n        v = None\n    if v is None:\n        return default\n    try:\n        return int(v) * invscale // scale\n    except ValueError:\n        return default",
        "begin_line": 1428,
        "end_line": 1439,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013175230566534915,
            "pseudo_dstar_susp": 0.0013458950201884253,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0013458950201884253,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.str_or_none#1442",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.str_or_none(v, default=None)",
        "snippet": "def str_or_none(v, default=None):\n    return default if v is None else compat_str(v)",
        "begin_line": 1442,
        "end_line": 1443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.str_to_int#1446",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.str_to_int(int_str)",
        "snippet": "def str_to_int(int_str):\n    \"\"\" A more relaxed version of int_or_none \"\"\"\n    if int_str is None:\n        return None\n    int_str = re.sub(r'[,\\.\\+]', '', int_str)\n    return int(int_str)",
        "begin_line": 1446,
        "end_line": 1451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007598784194528875,
            "pseudo_dstar_susp": 0.0007390983000739098,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007390983000739098,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.float_or_none#1454",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.float_or_none(v, scale=1, invscale=1, default=None)",
        "snippet": "def float_or_none(v, scale=1, invscale=1, default=None):\n    if v is None:\n        return default\n    try:\n        return float(v) * invscale / scale\n    except ValueError:\n        return default",
        "begin_line": 1454,
        "end_line": 1460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000968054211035818,
            "pseudo_dstar_susp": 0.0009276437847866419,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0009276437847866419,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.parse_duration#1463",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.parse_duration(s)",
        "snippet": "def parse_duration(s):\n    if not isinstance(s, compat_basestring):\n        return None\n\n    s = s.strip()\n\n    m = re.match(\n        r'''(?ix)(?:P?T)?\n        (?:\n            (?P<only_mins>[0-9.]+)\\s*(?:mins?\\.?|minutes?)\\s*|\n            (?P<only_hours>[0-9.]+)\\s*(?:hours?)|\n\n            \\s*(?P<hours_reversed>[0-9]+)\\s*(?:[:h]|hours?)\\s*(?P<mins_reversed>[0-9]+)\\s*(?:[:m]|mins?\\.?|minutes?)\\s*|\n            (?:\n                (?:\n                    (?:(?P<days>[0-9]+)\\s*(?:[:d]|days?)\\s*)?\n                    (?P<hours>[0-9]+)\\s*(?:[:h]|hours?)\\s*\n                )?\n                (?P<mins>[0-9]+)\\s*(?:[:m]|mins?|minutes?)\\s*\n            )?\n            (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*(?:s|secs?|seconds?)?\n        )$''', s)\n    if not m:\n        return None\n    res = 0\n    if m.group('only_mins'):\n        return float_or_none(m.group('only_mins'), invscale=60)\n    if m.group('only_hours'):\n        return float_or_none(m.group('only_hours'), invscale=60 * 60)\n    if m.group('secs'):\n        res += int(m.group('secs'))\n    if m.group('mins_reversed'):\n        res += int(m.group('mins_reversed')) * 60\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n    if m.group('hours'):\n        res += int(m.group('hours')) * 60 * 60\n    if m.group('hours_reversed'):\n        res += int(m.group('hours_reversed')) * 60 * 60\n    if m.group('days'):\n        res += int(m.group('days')) * 24 * 60 * 60\n    if m.group('ms'):\n        res += float(m.group('ms'))\n    return res",
        "begin_line": 1463,
        "end_line": 1506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008849557522123894,
            "pseudo_dstar_susp": 0.0009107468123861566,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0009107468123861566,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.prepend_extension#1509",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.prepend_extension(filename, ext, expected_real_ext=None)",
        "snippet": "def prepend_extension(filename, ext, expected_real_ext=None):\n    name, real_ext = os.path.splitext(filename)\n    return (\n        '{0}.{1}{2}'.format(name, ext, real_ext)\n        if not expected_real_ext or real_ext[1:] == expected_real_ext\n        else '{0}.{1}'.format(filename, ext))",
        "begin_line": 1509,
        "end_line": 1514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.replace_extension#1517",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.replace_extension(filename, ext, expected_real_ext=None)",
        "snippet": "def replace_extension(filename, ext, expected_real_ext=None):\n    name, real_ext = os.path.splitext(filename)\n    return '{0}.{1}'.format(\n        name if not expected_real_ext or real_ext[1:] == expected_real_ext else filename,\n        ext)",
        "begin_line": 1517,
        "end_line": 1521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019267822736030828,
            "pseudo_dstar_susp": 0.0016750418760469012,
            "pseudo_tarantula_susp": 0.0008264462809917355,
            "pseudo_op2_susp": 0.0016750418760469012,
            "pseudo_barinel_susp": 0.0008264462809917355
        }
    },
    {
        "name": "youtube_dl.utils.get_exe_version#1534",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.get_exe_version(exe, args=['--version'], version_re=None, unrecognized='present')",
        "snippet": "def get_exe_version(exe, args=['--version'],\n                    version_re=None, unrecognized='present'):\n    \"\"\" Returns the version of the specified executable,\n    or False if the executable is not present \"\"\"\n    try:\n        out, _ = subprocess.Popen(\n            [encodeArgument(exe)] + args,\n            stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()\n    except OSError:\n        return False\n    if isinstance(out, bytes):  # Python 2.x\n        out = out.decode('ascii', 'ignore')\n    return detect_exe_version(out, version_re, unrecognized)",
        "begin_line": 1534,
        "end_line": 1546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007733952049497294,
            "pseudo_dstar_susp": 0.0007496251874062968,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.detect_exe_version#1549",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.detect_exe_version(output, version_re=None, unrecognized='present')",
        "snippet": "def detect_exe_version(output, version_re=None, unrecognized='present'):\n    assert isinstance(output, compat_str)\n    if version_re is None:\n        version_re = r'version\\s+([-0-9._a-zA-Z]+)'\n    m = re.search(version_re, output)\n    if m:\n        return m.group(1)\n    else:\n        return unrecognized",
        "begin_line": 1549,
        "end_line": 1557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.OnDemandPagedList.__init__#1567",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.OnDemandPagedList",
        "signature": "youtube_dl.utils.OnDemandPagedList.__init__(self, pagefunc, pagesize)",
        "snippet": "    def __init__(self, pagefunc, pagesize):\n        self._pagefunc = pagefunc\n        self._pagesize = pagesize",
        "begin_line": 1567,
        "end_line": 1569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000481000481000481,
            "pseudo_dstar_susp": 0.00047961630695443646,
            "pseudo_tarantula_susp": 0.0005032712632108706,
            "pseudo_op2_susp": 0.00047961630695443646,
            "pseudo_barinel_susp": 0.0005032712632108706
        }
    },
    {
        "name": "youtube_dl.utils.OnDemandPagedList.getslice#1571",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.OnDemandPagedList",
        "signature": "youtube_dl.utils.OnDemandPagedList.getslice(self, start=0, end=None)",
        "snippet": "    def getslice(self, start=0, end=None):\n        res = []\n        for pagenum in itertools.count(start // self._pagesize):\n            firstid = pagenum * self._pagesize\n            nextfirstid = pagenum * self._pagesize + self._pagesize\n            if start >= nextfirstid:\n                continue\n\n            page_results = list(self._pagefunc(pagenum))\n\n            startv = (\n                start % self._pagesize\n                if firstid <= start < nextfirstid\n                else 0)\n\n            endv = (\n                ((end - 1) % self._pagesize) + 1\n                if (end is not None and firstid <= end <= nextfirstid)\n                else None)\n\n            if startv != 0 or endv is not None:\n                page_results = page_results[startv:endv]\n            res.extend(page_results)\n\n            # A little optimization - if current page is not \"full\", ie. does\n            # not contain page_size videos then we can assume that this page\n            # is the last one - there are no more ids on further pages -\n            # i.e. no need to query again.\n            if len(page_results) + startv < self._pagesize:\n                break\n\n            # If we got the whole page, but the next page is not interesting,\n            # break out early as well\n            if end == nextfirstid:\n                break\n        return res",
        "begin_line": 1571,
        "end_line": 1606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.InAdvancePagedList.__init__#1610",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.InAdvancePagedList",
        "signature": "youtube_dl.utils.InAdvancePagedList.__init__(self, pagefunc, pagecount, pagesize)",
        "snippet": "    def __init__(self, pagefunc, pagecount, pagesize):\n        self._pagefunc = pagefunc\n        self._pagecount = pagecount\n        self._pagesize = pagesize",
        "begin_line": 1610,
        "end_line": 1613,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.InAdvancePagedList.getslice#1615",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.InAdvancePagedList",
        "signature": "youtube_dl.utils.InAdvancePagedList.getslice(self, start=0, end=None)",
        "snippet": "    def getslice(self, start=0, end=None):\n        res = []\n        start_page = start // self._pagesize\n        end_page = (\n            self._pagecount if end is None else (end // self._pagesize + 1))\n        skip_elems = start - start_page * self._pagesize\n        only_more = None if end is None else end - start\n        for pagenum in range(start_page, end_page):\n            page = list(self._pagefunc(pagenum))\n            if skip_elems:\n                page = page[skip_elems:]\n                skip_elems = None\n            if only_more is not None:\n                if len(page) < only_more:\n                    only_more -= len(page)\n                else:\n                    page = page[:only_more]\n                    res.extend(page)\n                    break\n            res.extend(page)\n        return res",
        "begin_line": 1615,
        "end_line": 1635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.uppercase_escape#1638",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.uppercase_escape(s)",
        "snippet": "def uppercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\U[0-9a-fA-F]{8}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
        "begin_line": 1638,
        "end_line": 1643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.lowercase_escape#1646",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.lowercase_escape(s)",
        "snippet": "def lowercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\u[0-9a-fA-F]{4}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
        "begin_line": 1646,
        "end_line": 1651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.escape_rfc3986#1654",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.escape_rfc3986(s)",
        "snippet": "def escape_rfc3986(s):\n    \"\"\"Escape non-ASCII characters as suggested by RFC 3986\"\"\"\n    if sys.version_info < (3, 0) and isinstance(s, compat_str):\n        s = s.encode('utf-8')\n    return compat_urllib_parse.quote(s, b\"%/;:@&=+$,!~*'()?#[]\")",
        "begin_line": 1654,
        "end_line": 1658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.015873015873015872,
            "pseudo_dstar_susp": 0.00980392156862745,
            "pseudo_tarantula_susp": 0.0013986013986013986,
            "pseudo_op2_susp": 0.00980392156862745,
            "pseudo_barinel_susp": 0.0013986013986013986
        }
    },
    {
        "name": "youtube_dl.utils.escape_url#1661",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.escape_url(url)",
        "snippet": "def escape_url(url):\n    \"\"\"Escape URL as suggested by RFC 3986\"\"\"\n    url_parsed = compat_urllib_parse_urlparse(url)\n    return url_parsed._replace(\n        path=escape_rfc3986(url_parsed.path),\n        params=escape_rfc3986(url_parsed.params),\n        query=escape_rfc3986(url_parsed.query),\n        fragment=escape_rfc3986(url_parsed.fragment)\n    ).geturl()",
        "begin_line": 1661,
        "end_line": 1669,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.017241379310344827,
            "pseudo_dstar_susp": 0.01020408163265306,
            "pseudo_tarantula_susp": 0.0014124293785310734,
            "pseudo_op2_susp": 0.01020408163265306,
            "pseudo_barinel_susp": 0.0014124293785310734
        }
    },
    {
        "name": "youtube_dl.utils.read_batch_urls#1689",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.read_batch_urls(batch_fd)",
        "snippet": "def read_batch_urls(batch_fd):\n    def fixup(url):\n        if not isinstance(url, compat_str):\n            url = url.decode('utf-8', 'replace')\n        BOM_UTF8 = '\\xef\\xbb\\xbf'\n        if url.startswith(BOM_UTF8):\n            url = url[len(BOM_UTF8):]\n        url = url.strip()\n        if url.startswith(('#', ';', ']')):\n            return False\n        return url\n\n    with contextlib.closing(batch_fd) as fd:\n        return [url for url in map(fixup, fd) if url]",
        "begin_line": 1689,
        "end_line": 1702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.fixup#1690",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.fixup(url)",
        "snippet": "    def fixup(url):\n        if not isinstance(url, compat_str):\n            url = url.decode('utf-8', 'replace')\n        BOM_UTF8 = '\\xef\\xbb\\xbf'\n        if url.startswith(BOM_UTF8):\n            url = url[len(BOM_UTF8):]\n        url = url.strip()\n        if url.startswith(('#', ';', ']')):\n            return False\n        return url",
        "begin_line": 1690,
        "end_line": 1699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.urlencode_postdata#1705",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.urlencode_postdata(*args, **kargs)",
        "snippet": "def urlencode_postdata(*args, **kargs):\n    return compat_urllib_parse.urlencode(*args, **kargs).encode('ascii')",
        "begin_line": 1705,
        "end_line": 1706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.encode#1710",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.encode(v)",
        "snippet": "    def encode(v):\n        return v.encode(encoding) if isinstance(v, compat_basestring) else v",
        "begin_line": 1710,
        "end_line": 1711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.parse_age_limit#1724",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.parse_age_limit(s)",
        "snippet": "def parse_age_limit(s):\n    if s is None:\n        return None\n    m = re.match(r'^(?P<age>\\d{1,2})\\+?$', s)\n    return int(m.group('age')) if m else US_RATINGS.get(s, None)",
        "begin_line": 1724,
        "end_line": 1728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.strip_jsonp#1731",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.strip_jsonp(code)",
        "snippet": "def strip_jsonp(code):\n    return re.sub(\n        r'(?s)^[a-zA-Z0-9_]+\\s*\\(\\s*(.*)\\);?\\s*?(?://[^\\n]*)*$', r'\\1', code)",
        "begin_line": 1731,
        "end_line": 1733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000794912559618442,
            "pseudo_dstar_susp": 0.0007867820613690008,
            "pseudo_tarantula_susp": 0.002036659877800407,
            "pseudo_op2_susp": 0.0007867820613690008,
            "pseudo_barinel_susp": 0.002036659877800407
        }
    },
    {
        "name": "youtube_dl.utils.js_to_json#1736",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.js_to_json(code)",
        "snippet": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        if v.startswith('\"'):\n            v = re.sub(r\"\\\\'\", \"'\", v[1:-1])\n        elif v.startswith(\"'\"):\n            v = v[1:-1]\n            v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n                '\\\\\\\\': '\\\\\\\\',\n                \"\\\\'\": \"'\",\n                '\"': '\\\\\"',\n            }[m.group(0)], v)\n        return '\"%s\"' % v\n\n    res = re.sub(r'''(?x)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^'\\\\]*'|\n        [a-zA-Z_][.a-zA-Z_0-9]*\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*[\\]}])', lambda m: m.group(1), res)\n    return res",
        "begin_line": 1736,
        "end_line": 1758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008032128514056225,
            "pseudo_dstar_susp": 0.0008410428931875525,
            "pseudo_tarantula_susp": 0.000777000777000777,
            "pseudo_op2_susp": 0.0008410428931875525,
            "pseudo_barinel_susp": 0.000777000777000777
        }
    },
    {
        "name": "youtube_dl.utils.fix_kv#1737",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.fix_kv(m)",
        "snippet": "    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        if v.startswith('\"'):\n            v = re.sub(r\"\\\\'\", \"'\", v[1:-1])\n        elif v.startswith(\"'\"):\n            v = v[1:-1]\n            v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n                '\\\\\\\\': '\\\\\\\\',\n                \"\\\\'\": \"'\",\n                '\"': '\\\\\"',\n            }[m.group(0)], v)\n        return '\"%s\"' % v",
        "begin_line": 1737,
        "end_line": 1750,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008032128514056225,
            "pseudo_dstar_susp": 0.0008410428931875525,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.0008410428931875525,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.utils.qualities#1761",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.qualities(quality_ids)",
        "snippet": "def qualities(quality_ids):\n    \"\"\" Get a numeric quality value out of a list of possible values \"\"\"\n    def q(qid):\n        try:\n            return quality_ids.index(qid)\n        except ValueError:\n            return -1\n    return q",
        "begin_line": 1761,
        "end_line": 1768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011312217194570137,
            "pseudo_dstar_susp": 0.0009242144177449168,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0009242144177449168,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.q#1763",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.q(qid)",
        "snippet": "    def q(qid):\n        try:\n            return quality_ids.index(qid)\n        except ValueError:\n            return -1",
        "begin_line": 1763,
        "end_line": 1767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008620689655172414,
            "pseudo_dstar_susp": 0.0008375209380234506,
            "pseudo_tarantula_susp": 0.002398081534772182,
            "pseudo_op2_susp": 0.0008375209380234506,
            "pseudo_barinel_susp": 0.002398081534772182
        }
    },
    {
        "name": "youtube_dl.utils.limit_length#1774",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.limit_length(s, length)",
        "snippet": "def limit_length(s, length):\n    \"\"\" Add ellipses to overly long strings \"\"\"\n    if s is None:\n        return None\n    ELLIPSES = '...'\n    if len(s) > length:\n        return s[:length - len(ELLIPSES)] + ELLIPSES\n    return s",
        "begin_line": 1774,
        "end_line": 1781,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.version_tuple#1784",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.version_tuple(v)",
        "snippet": "def version_tuple(v):\n    return tuple(int(e) for e in re.split(r'[-.]', v))",
        "begin_line": 1784,
        "end_line": 1785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.ytdl_is_updateable#1797",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.ytdl_is_updateable()",
        "snippet": "def ytdl_is_updateable():\n    \"\"\" Returns if youtube-dl can be updated with -U \"\"\"\n    from zipimport import zipimporter\n\n    return isinstance(globals().get('__loader__'), zipimporter) or hasattr(sys, 'frozen')",
        "begin_line": 1797,
        "end_line": 1801,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005952380952380952,
            "pseudo_dstar_susp": 0.004484304932735426,
            "pseudo_tarantula_susp": 0.002352941176470588,
            "pseudo_op2_susp": 0.004484304932735426,
            "pseudo_barinel_susp": 0.002352941176470588
        }
    },
    {
        "name": "youtube_dl.utils.args_to_str#1804",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.args_to_str(args)",
        "snippet": "def args_to_str(args):\n    # Get a short string representation for a subprocess command\n    return ' '.join(shlex_quote(a) for a in args)",
        "begin_line": 1804,
        "end_line": 1806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.urlhandle_detect_ext#1819",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.urlhandle_detect_ext(url_handle)",
        "snippet": "def urlhandle_detect_ext(url_handle):\n    try:\n        url_handle.headers\n        getheader = lambda h: url_handle.headers[h]\n    except AttributeError:  # Python < 3\n        getheader = url_handle.info().getheader\n\n    cd = getheader('Content-Disposition')\n    if cd:\n        m = re.match(r'attachment;\\s*filename=\"(?P<filename>[^\"]+)\"', cd)\n        if m:\n            e = determine_ext(m.group('filename'), default_ext=None)\n            if e:\n                return e\n\n    return mimetype2ext(getheader('Content-Type'))",
        "begin_line": 1819,
        "end_line": 1834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.age_restricted#1841",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.age_restricted(content_limit, age_limit)",
        "snippet": "def age_restricted(content_limit, age_limit):\n    \"\"\" Returns True iff the content should be blocked \"\"\"\n\n    if age_limit is None:  # No limit set\n        return False\n    if content_limit is None:\n        return False  # Content available for everyone\n    return age_limit < content_limit",
        "begin_line": 1841,
        "end_line": 1848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024691358024691358,
            "pseudo_dstar_susp": 0.0024691358024691358,
            "pseudo_tarantula_susp": 0.0008525149190110827,
            "pseudo_op2_susp": 0.0024691358024691358,
            "pseudo_barinel_susp": 0.0008525149190110827
        }
    },
    {
        "name": "youtube_dl.utils.is_html#1851",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.is_html(first_bytes)",
        "snippet": "def is_html(first_bytes):\n    \"\"\" Detect whether a file contains HTML by examining its first bytes. \"\"\"\n\n    BOMS = [\n        (b'\\xef\\xbb\\xbf', 'utf-8'),\n        (b'\\x00\\x00\\xfe\\xff', 'utf-32-be'),\n        (b'\\xff\\xfe\\x00\\x00', 'utf-32-le'),\n        (b'\\xff\\xfe', 'utf-16-le'),\n        (b'\\xfe\\xff', 'utf-16-be'),\n    ]\n    for bom, enc in BOMS:\n        if first_bytes.startswith(bom):\n            s = first_bytes[len(bom):].decode(enc, 'replace')\n            break\n    else:\n        s = first_bytes.decode('utf-8', 'replace')\n\n    return re.match(r'^\\s*<', s)",
        "begin_line": 1851,
        "end_line": 1868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011013215859030838,
            "pseudo_dstar_susp": 0.0011750881316098707,
            "pseudo_tarantula_susp": 0.0005305039787798408,
            "pseudo_op2_susp": 0.0011750881316098707,
            "pseudo_barinel_susp": 0.0005305039787798408
        }
    },
    {
        "name": "youtube_dl.utils.determine_protocol#1871",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.determine_protocol(info_dict)",
        "snippet": "def determine_protocol(info_dict):\n    protocol = info_dict.get('protocol')\n    if protocol is not None:\n        return protocol\n\n    url = info_dict['url']\n    if url.startswith('rtmp'):\n        return 'rtmp'\n    elif url.startswith('mms'):\n        return 'mms'\n    elif url.startswith('rtsp'):\n        return 'rtsp'\n\n    ext = determine_ext(url)\n    if ext == 'm3u8':\n        return 'm3u8'\n    elif ext == 'f4m':\n        return 'f4m'\n\n    return compat_urllib_parse_urlparse(url).scheme",
        "begin_line": 1871,
        "end_line": 1890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013404825737265416,
            "pseudo_dstar_susp": 0.0014144271570014145,
            "pseudo_tarantula_susp": 0.000697350069735007,
            "pseudo_op2_susp": 0.0014144271570014145,
            "pseudo_barinel_susp": 0.000697350069735007
        }
    },
    {
        "name": "youtube_dl.utils.render_table#1893",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.render_table(header_row, data)",
        "snippet": "def render_table(header_row, data):\n    \"\"\" Render a list of rows, each as a list of values \"\"\"\n    table = [header_row] + data\n    max_lens = [max(len(compat_str(v)) for v in col) for col in zip(*table)]\n    format_str = ' '.join('%-' + compat_str(ml + 1) + 's' for ml in max_lens[:-1]) + '%s'\n    return '\\n'.join(format_str % tuple(row) for row in table)",
        "begin_line": 1893,
        "end_line": 1898,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils._match_one#1901",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils._match_one(filter_part, dct)",
        "snippet": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?:\n            (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n            (?P<strval>(?![0-9.])[a-z0-9A-Z]*)\n        )\n        \\s*$\n        ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        if m.group('strval') is not None:\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('strval')\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        actual_value = dct.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>%s)\\s*(?P<key>[a-z_]+)\n        \\s*$\n        ''' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
        "begin_line": 1901,
        "end_line": 1957,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.match_str#1960",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.match_str(filter_str, dct)",
        "snippet": "def match_str(filter_str, dct):\n    \"\"\" Filter a dictionary with a simple string syntax. Returns True (=passes filter) or false \"\"\"\n\n    return all(\n        _match_one(filter_part, dct) for filter_part in filter_str.split('&'))",
        "begin_line": 1960,
        "end_line": 1964,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils._match_func#1968",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils._match_func(info_dict)",
        "snippet": "    def _match_func(info_dict):\n        if match_str(filter_str, info_dict):\n            return None\n        else:\n            video_title = info_dict.get('title', info_dict.get('id', 'video'))\n            return '%s does not pass filter %s, skipping ..' % (video_title, filter_str)",
        "begin_line": 1968,
        "end_line": 1973,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.match_filter_func#1967",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.match_filter_func(filter_str)",
        "snippet": "def match_filter_func(filter_str):\n    def _match_func(info_dict):\n        if match_str(filter_str, info_dict):\n            return None\n        else:\n            video_title = info_dict.get('title', info_dict.get('id', 'video'))\n            return '%s does not pass filter %s, skipping ..' % (video_title, filter_str)\n    return _match_func",
        "begin_line": 1967,
        "end_line": 1974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.parse_dfxp_time_expr#1977",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.parse_dfxp_time_expr(time_expr)",
        "snippet": "def parse_dfxp_time_expr(time_expr):\n    if not time_expr:\n        return\n\n    mobj = re.match(r'^(?P<time_offset>\\d+(?:\\.\\d+)?)s?$', time_expr)\n    if mobj:\n        return float(mobj.group('time_offset'))\n\n    mobj = re.match(r'^(\\d+):(\\d\\d):(\\d\\d(?:\\.\\d+)?)$', time_expr)\n    if mobj:\n        return 3600 * int(mobj.group(1)) + 60 * int(mobj.group(2)) + float(mobj.group(3))",
        "begin_line": 1977,
        "end_line": 1987,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.utils.srt_subtitles_timecode#1990",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.srt_subtitles_timecode(seconds)",
        "snippet": "def srt_subtitles_timecode(seconds):\n    return '%02d:%02d:%02d,%03d' % (seconds / 3600, (seconds % 3600) / 60, seconds % 60, (seconds % 1) * 1000)",
        "begin_line": 1990,
        "end_line": 1991,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.dfxp2srt#1994",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.dfxp2srt(dfxp_data)",
        "snippet": "def dfxp2srt(dfxp_data):\n    _x = functools.partial(xpath_with_ns, ns_map={\n        'ttml': 'http://www.w3.org/ns/ttml',\n        'ttaf1': 'http://www.w3.org/2006/10/ttaf1',\n    })\n\n    def parse_node(node):\n        str_or_empty = functools.partial(str_or_none, default='')\n\n        out = str_or_empty(node.text)\n\n        for child in node:\n            if child.tag in (_x('ttml:br'), _x('ttaf1:br'), 'br'):\n                out += '\\n' + str_or_empty(child.tail)\n            elif child.tag in (_x('ttml:span'), _x('ttaf1:span'), 'span'):\n                out += str_or_empty(parse_node(child))\n            else:\n                out += str_or_empty(xml.etree.ElementTree.tostring(child))\n\n        return out\n\n    dfxp = compat_etree_fromstring(dfxp_data.encode('utf-8'))\n    out = []\n    paras = dfxp.findall(_x('.//ttml:p')) or dfxp.findall(_x('.//ttaf1:p')) or dfxp.findall('.//p')\n\n    if not paras:\n        raise ValueError('Invalid dfxp/TTML subtitle')\n\n    for para, index in zip(paras, itertools.count(1)):\n        begin_time = parse_dfxp_time_expr(para.attrib.get('begin'))\n        end_time = parse_dfxp_time_expr(para.attrib.get('end'))\n        dur = parse_dfxp_time_expr(para.attrib.get('dur'))\n        if begin_time is None:\n            continue\n        if not end_time:\n            if not dur:\n                continue\n            end_time = begin_time + dur\n        out.append('%d\\n%s --> %s\\n%s\\n\\n' % (\n            index,\n            srt_subtitles_timecode(begin_time),\n            srt_subtitles_timecode(end_time),\n            parse_node(para)))\n\n    return ''.join(out)",
        "begin_line": 1994,
        "end_line": 2038,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.parse_node#2000",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.parse_node(node)",
        "snippet": "    def parse_node(node):\n        str_or_empty = functools.partial(str_or_none, default='')\n\n        out = str_or_empty(node.text)\n\n        for child in node:\n            if child.tag in (_x('ttml:br'), _x('ttaf1:br'), 'br'):\n                out += '\\n' + str_or_empty(child.tail)\n            elif child.tag in (_x('ttml:span'), _x('ttaf1:span'), 'span'):\n                out += str_or_empty(parse_node(child))\n            else:\n                out += str_or_empty(xml.etree.ElementTree.tostring(child))\n\n        return out",
        "begin_line": 2000,
        "end_line": 2013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.cli_option#2041",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.cli_option(params, command_option, param)",
        "snippet": "def cli_option(params, command_option, param):\n    param = params.get(param)\n    return [command_option, param] if param is not None else []",
        "begin_line": 2041,
        "end_line": 2043,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.cli_bool_option#2046",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None)",
        "snippet": "def cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None):\n    param = params.get(param)\n    assert isinstance(param, bool)\n    if separator:\n        return [command_option + separator + (true_value if param else false_value)]\n    return [command_option, true_value if param else false_value]",
        "begin_line": 2046,
        "end_line": 2051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.cli_valueless_option#2054",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils",
        "signature": "youtube_dl.utils.cli_valueless_option(params, command_option, param, expected_value=True)",
        "snippet": "def cli_valueless_option(params, command_option, param, expected_value=True):\n    param = params.get(param)\n    return [command_option] if param == expected_value else []",
        "begin_line": 2054,
        "end_line": 2056,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.utils.ISO639Utils.long2short#2262",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.ISO639Utils",
        "signature": "youtube_dl.utils.ISO639Utils.long2short(cls, code)",
        "snippet": "    def long2short(cls, code):\n        \"\"\"Convert language code from ISO 639-2/T to ISO 639-1\"\"\"\n        for short_name, long_name in cls._lang_map.items():\n            if long_name == code:\n                return short_name",
        "begin_line": 2262,
        "end_line": 2266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.utils.PerRequestProxyHandler.__init__#2530",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.PerRequestProxyHandler",
        "signature": "youtube_dl.utils.PerRequestProxyHandler.__init__(self, proxies=None)",
        "snippet": "    def __init__(self, proxies=None):\n        # Set default handlers\n        for type in ('http', 'https'):\n            setattr(self, '%s_open' % type,\n                    lambda r, proxy='__noproxy__', type=type, meth=self.proxy_open:\n                        meth(r, proxy, type))\n        return compat_urllib_request.ProxyHandler.__init__(self, proxies)",
        "begin_line": 2530,
        "end_line": 2536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.03333333333333333,
            "pseudo_dstar_susp": 0.02127659574468085,
            "pseudo_tarantula_susp": 0.0014792899408284023,
            "pseudo_op2_susp": 0.02127659574468085,
            "pseudo_barinel_susp": 0.0014792899408284023
        }
    },
    {
        "name": "youtube_dl.utils.PerRequestProxyHandler.proxy_open#2538",
        "src_path": "youtube_dl/utils.py",
        "class_name": "youtube_dl.utils.PerRequestProxyHandler",
        "signature": "youtube_dl.utils.PerRequestProxyHandler.proxy_open(self, req, proxy, type)",
        "snippet": "    def proxy_open(self, req, proxy, type):\n        req_proxy = req.headers.get('Ytdl-request-proxy')\n        if req_proxy is not None:\n            proxy = req_proxy\n            del req.headers['Ytdl-request-proxy']\n\n        if proxy == '__noproxy__':\n            return None  # No Proxy\n        return compat_urllib_request.ProxyHandler.proxy_open(\n            self, req, proxy, type)",
        "begin_line": 2538,
        "end_line": 2547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.03333333333333333,
            "pseudo_dstar_susp": 0.014084507042253521,
            "pseudo_tarantula_susp": 0.001834862385321101,
            "pseudo_op2_susp": 0.014084507042253521,
            "pseudo_barinel_susp": 0.001834862385321101
        }
    },
    {
        "name": "youtube_dl.extractor.lynda.LyndaBaseIE._login#27",
        "src_path": "youtube_dl/extractor/lynda.py",
        "class_name": "youtube_dl.extractor.lynda.LyndaBaseIE",
        "signature": "youtube_dl.extractor.lynda.LyndaBaseIE._login(self)",
        "snippet": "    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            return\n\n        login_form = {\n            'username': username.encode('utf-8'),\n            'password': password.encode('utf-8'),\n            'remember': 'false',\n            'stayPut': 'false'\n        }\n        request = sanitized_Request(\n            self._LOGIN_URL, compat_urllib_parse.urlencode(login_form).encode('utf-8'))\n        login_page = self._download_webpage(\n            request, None, 'Logging in as %s' % username)\n\n        # Not (yet) logged in\n        m = re.search(r'loginResultJson\\s*=\\s*\\'(?P<json>[^\\']+)\\';', login_page)\n        if m is not None:\n            response = m.group('json')\n            response_json = json.loads(response)\n            state = response_json['state']\n\n            if state == 'notlogged':\n                raise ExtractorError(\n                    'Unable to login, incorrect username and/or password',\n                    expected=True)\n\n            # This is when we get popup:\n            # > You're already logged in to lynda.com on two devices.\n            # > If you log in here, we'll log you out of another device.\n            # So, we need to confirm this.\n            if state == 'conflicted':\n                confirm_form = {\n                    'username': '',\n                    'password': '',\n                    'resolve': 'true',\n                    'remember': 'false',\n                    'stayPut': 'false',\n                }\n                request = sanitized_Request(\n                    self._LOGIN_URL, compat_urllib_parse.urlencode(confirm_form).encode('utf-8'))\n                login_page = self._download_webpage(\n                    request, None,\n                    'Confirming log in and log out from another device')\n\n        if all(not re.search(p, login_page) for p in ('isLoggedIn\\s*:\\s*true', r'logout\\.aspx', r'>Log out<')):\n            if 'login error' in login_page:\n                mobj = re.search(\n                    r'(?s)<h1[^>]+class=\"topmost\">(?P<title>[^<]+)</h1>\\s*<div>(?P<description>.+?)</div>',\n                    login_page)\n                if mobj:\n                    raise ExtractorError(\n                        'lynda returned error: %s - %s'\n                        % (mobj.group('title'), clean_html(mobj.group('description'))),\n                        expected=True)\n            raise ExtractorError('Unable to log in')",
        "begin_line": 27,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.lynda.LyndaIE._real_extract#117",
        "src_path": "youtube_dl/extractor/lynda.py",
        "class_name": "youtube_dl.extractor.lynda.LyndaIE",
        "signature": "youtube_dl.extractor.lynda.LyndaIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://www.lynda.com/ajax/player?videoId=%s&type=video' % video_id,\n            video_id, 'Downloading video JSON')\n\n        if 'Status' in video:\n            raise ExtractorError(\n                'lynda returned error: %s' % video['Message'], expected=True)\n\n        if video.get('HasAccess') is False:\n            self.raise_login_required('Video %s is only available for members' % video_id)\n\n        video_id = compat_str(video.get('ID') or video_id)\n        duration = int_or_none(video.get('DurationInSeconds'))\n        title = video['Title']\n\n        formats = []\n\n        fmts = video.get('Formats')\n        if fmts:\n            formats.extend([{\n                'url': f['Url'],\n                'ext': f.get('Extension'),\n                'width': int_or_none(f.get('Width')),\n                'height': int_or_none(f.get('Height')),\n                'filesize': int_or_none(f.get('FileSize')),\n                'format_id': compat_str(f.get('Resolution')) if f.get('Resolution') else None,\n            } for f in fmts if f.get('Url')])\n\n        prioritized_streams = video.get('PrioritizedStreams')\n        if prioritized_streams:\n            for prioritized_stream_id, prioritized_stream in prioritized_streams.items():\n                formats.extend([{\n                    'url': video_url,\n                    'width': int_or_none(format_id),\n                    'format_id': '%s-%s' % (prioritized_stream_id, format_id),\n                } for format_id, video_url in prioritized_stream.items()])\n\n        self._check_formats(formats, video_id)\n        self._sort_formats(formats)\n\n        subtitles = self.extract_subtitles(video_id)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'subtitles': subtitles,\n            'formats': formats\n        }",
        "begin_line": 117,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.lynda.LyndaIE._fix_subtitles#170",
        "src_path": "youtube_dl/extractor/lynda.py",
        "class_name": "youtube_dl.extractor.lynda.LyndaIE",
        "signature": "youtube_dl.extractor.lynda.LyndaIE._fix_subtitles(self, subs)",
        "snippet": "    def _fix_subtitles(self, subs):\n        srt = ''\n        seq_counter = 0\n        for pos in range(0, len(subs) - 1):\n            seq_current = subs[pos]\n            m_current = re.match(self._TIMECODE_REGEX, seq_current['Timecode'])\n            if m_current is None:\n                continue\n            seq_next = subs[pos + 1]\n            m_next = re.match(self._TIMECODE_REGEX, seq_next['Timecode'])\n            if m_next is None:\n                continue\n            appear_time = m_current.group('timecode')\n            disappear_time = m_next.group('timecode')\n            text = seq_current['Caption'].strip()\n            if text:\n                seq_counter += 1\n                srt += '%s\\r\\n%s --> %s\\r\\n%s\\r\\n\\r\\n' % (seq_counter, appear_time, disappear_time, text)\n        if srt:\n            return srt",
        "begin_line": 170,
        "end_line": 189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.lynda.LyndaIE._get_subtitles#191",
        "src_path": "youtube_dl/extractor/lynda.py",
        "class_name": "youtube_dl.extractor.lynda.LyndaIE",
        "signature": "youtube_dl.extractor.lynda.LyndaIE._get_subtitles(self, video_id)",
        "snippet": "    def _get_subtitles(self, video_id):\n        url = 'http://www.lynda.com/ajax/player?videoId=%s&type=transcript' % video_id\n        subs = self._download_json(url, None, False)\n        if subs:\n            return {'en': [{'ext': 'srt', 'data': self._fix_subtitles(subs)}]}\n        else:\n            return {}",
        "begin_line": 191,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.ooyala.OoyalaBaseIE._extract#17",
        "src_path": "youtube_dl/extractor/ooyala.py",
        "class_name": "youtube_dl.extractor.ooyala.OoyalaBaseIE",
        "signature": "youtube_dl.extractor.ooyala.OoyalaBaseIE._extract(self, content_tree_url, video_id, domain='example.org')",
        "snippet": "    def _extract(self, content_tree_url, video_id, domain='example.org'):\n        content_tree = self._download_json(content_tree_url, video_id)['content_tree']\n        metadata = content_tree[list(content_tree)[0]]\n        embed_code = metadata['embed_code']\n        pcode = metadata.get('asset_pcode') or embed_code\n        video_info = {\n            'id': embed_code,\n            'title': metadata['title'],\n            'description': metadata.get('description'),\n            'thumbnail': metadata.get('thumbnail_image') or metadata.get('promo_image'),\n            'duration': float_or_none(metadata.get('duration'), 1000),\n        }\n\n        urls = []\n        formats = []\n        for supported_format in ('mp4', 'm3u8', 'hds', 'rtmp'):\n            auth_data = self._download_json(\n                'http://player.ooyala.com/sas/player_api/v1/authorization/embed_code/%s/%s?' % (pcode, embed_code) + compat_urllib_parse.urlencode({'domain': domain, 'supportedFormats': supported_format}),\n                video_id, 'Downloading %s JSON' % supported_format)\n\n            cur_auth_data = auth_data['authorization_data'][embed_code]\n\n            if cur_auth_data['authorized']:\n                for stream in cur_auth_data['streams']:\n                    url = base64.b64decode(stream['url']['data'].encode('ascii')).decode('utf-8')\n                    if url in urls:\n                        continue\n                    urls.append(url)\n                    delivery_type = stream['delivery_type']\n                    if delivery_type == 'hls' or '.m3u8' in url:\n                        m3u8_formats = self._extract_m3u8_formats(url, embed_code, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                        if m3u8_formats:\n                            formats.extend(m3u8_formats)\n                    elif delivery_type == 'hds' or '.f4m' in url:\n                        f4m_formats = self._extract_f4m_formats(url, embed_code, f4m_id='hds', fatal=False)\n                        if f4m_formats:\n                            formats.extend(f4m_formats)\n                    elif '.smil' in url:\n                        smil_formats = self._extract_smil_formats(url, embed_code, fatal=False)\n                        if smil_formats:\n                            formats.extend(smil_formats)\n                    else:\n                        formats.append({\n                            'url': url,\n                            'ext': stream.get('delivery_type'),\n                            'vcodec': stream.get('video_codec'),\n                            'format_id': delivery_type,\n                            'width': int_or_none(stream.get('width')),\n                            'height': int_or_none(stream.get('height')),\n                            'abr': int_or_none(stream.get('audio_bitrate')),\n                            'vbr': int_or_none(stream.get('video_bitrate')),\n                            'fps': float_or_none(stream.get('framerate')),\n                        })\n            else:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, cur_auth_data['message']), expected=True)\n        self._sort_formats(formats)\n\n        video_info['formats'] = formats\n        return video_info",
        "begin_line": 17,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012706480304955528,
            "pseudo_dstar_susp": 0.0011467889908256881,
            "pseudo_tarantula_susp": 0.002004008016032064,
            "pseudo_op2_susp": 0.0011467889908256881,
            "pseudo_barinel_susp": 0.002004008016032064
        }
    },
    {
        "name": "youtube_dl.extractor.pbs.PBSIE._extract_webpage#355",
        "src_path": "youtube_dl/extractor/pbs.py",
        "class_name": "youtube_dl.extractor.pbs.PBSIE",
        "signature": "youtube_dl.extractor.pbs.PBSIE._extract_webpage(self, url)",
        "snippet": "    def _extract_webpage(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        presumptive_id = mobj.group('presumptive_id')\n        display_id = presumptive_id\n        if presumptive_id:\n            webpage = self._download_webpage(url, display_id)\n\n            upload_date = unified_strdate(self._search_regex(\n                r'<input type=\"hidden\" id=\"air_date_[0-9]+\" value=\"([^\"]+)\"',\n                webpage, 'upload date', default=None))\n\n            # tabbed frontline videos\n            tabbed_videos = re.findall(\n                r'<div[^>]+class=\"videotab[^\"]*\"[^>]+vid=\"(\\d+)\"', webpage)\n            if tabbed_videos:\n                return tabbed_videos, presumptive_id, upload_date\n\n            MEDIA_ID_REGEXES = [\n                r\"div\\s*:\\s*'videoembed'\\s*,\\s*mediaid\\s*:\\s*'(\\d+)'\",  # frontline video embed\n                r'class=\"coveplayerid\">([^<]+)<',                       # coveplayer\n                r'<section[^>]+data-coveid=\"(\\d+)\"',                    # coveplayer from http://www.pbs.org/wgbh/frontline/film/real-csi/\n                r'<input type=\"hidden\" id=\"pbs_video_id_[0-9]+\" value=\"([0-9]+)\"/>',  # jwplayer\n            ]\n\n            media_id = self._search_regex(\n                MEDIA_ID_REGEXES, webpage, 'media ID', fatal=False, default=None)\n            if media_id:\n                return media_id, presumptive_id, upload_date\n\n            # Fronline video embedded via flp\n            video_id = self._search_regex(\n                r'videoid\\s*:\\s*\"([\\d+a-z]{7,})\"', webpage, 'videoid', default=None)\n            if video_id:\n                # pkg_id calculation is reverse engineered from\n                # http://www.pbs.org/wgbh/pages/frontline/js/flp2012.js\n                prg_id = self._search_regex(\n                    r'videoid\\s*:\\s*\"([\\d+a-z]{7,})\"', webpage, 'videoid')[7:]\n                if 'q' in prg_id:\n                    prg_id = prg_id.split('q')[1]\n                prg_id = int(prg_id, 16)\n                getdir = self._download_json(\n                    'http://www.pbs.org/wgbh/pages/frontline/.json/getdir/getdir%d.json' % prg_id,\n                    presumptive_id, 'Downloading getdir JSON',\n                    transform_source=strip_jsonp)\n                return getdir['mid'], presumptive_id, upload_date\n\n            for iframe in re.findall(r'(?s)<iframe(.+?)></iframe>', webpage):\n                url = self._search_regex(\n                    r'src=([\"\\'])(?P<url>.+?partnerplayer.+?)\\1', iframe,\n                    'player URL', default=None, group='url')\n                if url:\n                    break\n\n            mobj = re.match(self._VALID_URL, url)\n\n        player_id = mobj.group('player_id')\n        if not display_id:\n            display_id = player_id\n        if player_id:\n            player_page = self._download_webpage(\n                url, display_id, note='Downloading player page',\n                errnote='Could not download player page')\n            video_id = self._search_regex(\n                r'<div\\s+id=\"video_([0-9]+)\"', player_page, 'video ID')\n        else:\n            video_id = mobj.group('id')\n            display_id = video_id\n\n        return video_id, display_id, None",
        "begin_line": 355,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007733952049497294,
            "pseudo_dstar_susp": 0.0007496251874062968,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007496251874062968,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.senateisvp.SenateISVPIE._search_iframe_url#82",
        "src_path": "youtube_dl/extractor/senateisvp.py",
        "class_name": "youtube_dl.extractor.senateisvp.SenateISVPIE",
        "signature": "youtube_dl.extractor.senateisvp.SenateISVPIE._search_iframe_url(webpage)",
        "snippet": "    def _search_iframe_url(webpage):\n        mobj = re.search(\n            r\"<iframe[^>]+src=['\\\"](?P<url>http://www\\.senate\\.gov/isvp/?\\?[^'\\\"]+)['\\\"]\",\n            webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 82,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.abc7news.Abc7NewsIE._real_extract#36",
        "src_path": "youtube_dl/extractor/abc7news.py",
        "class_name": "youtube_dl.extractor.abc7news.Abc7NewsIE",
        "signature": "youtube_dl.extractor.abc7news.Abc7NewsIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        m3u8 = self._html_search_meta(\n            'contentURL', webpage, 'm3u8 url', fatal=True)\n\n        formats = self._extract_m3u8_formats(m3u8, display_id, 'mp4')\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage).strip()\n        description = self._og_search_description(webpage).strip()\n        thumbnail = self._og_search_thumbnail(webpage)\n        timestamp = parse_iso8601(self._search_regex(\n            r'<div class=\"meta\">\\s*<time class=\"timeago\" datetime=\"([^\"]+)\">',\n            webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'rel=\"author\">([^<]+)</a>',\n            webpage, 'uploader', default=None)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'formats': formats,\n        }",
        "begin_line": 36,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003076923076923077,
            "pseudo_dstar_susp": 0.003125,
            "pseudo_tarantula_susp": 0.0013315579227696406,
            "pseudo_op2_susp": 0.003125,
            "pseudo_barinel_susp": 0.0013315579227696406
        }
    },
    {
        "name": "youtube_dl.extractor.addanime.AddAnimeIE._real_extract#34",
        "src_path": "youtube_dl/extractor/addanime.py",
        "class_name": "youtube_dl.extractor.addanime.AddAnimeIE",
        "signature": "youtube_dl.extractor.addanime.AddAnimeIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        try:\n            webpage = self._download_webpage(url, video_id)\n        except ExtractorError as ee:\n            if not isinstance(ee.cause, compat_HTTPError) or \\\n               ee.cause.code != 503:\n                raise\n\n            redir_webpage = ee.cause.read().decode('utf-8')\n            action = self._search_regex(\n                r'<form id=\"challenge-form\" action=\"([^\"]+)\"',\n                redir_webpage, 'Redirect form')\n            vc = self._search_regex(\n                r'<input type=\"hidden\" name=\"jschl_vc\" value=\"([^\"]+)\"/>',\n                redir_webpage, 'redirect vc value')\n            av = re.search(\n                r'a\\.value = ([0-9]+)[+]([0-9]+)[*]([0-9]+);',\n                redir_webpage)\n            if av is None:\n                raise ExtractorError('Cannot find redirect math task')\n            av_res = int(av.group(1)) + int(av.group(2)) * int(av.group(3))\n\n            parsed_url = compat_urllib_parse_urlparse(url)\n            av_val = av_res + len(parsed_url.netloc)\n            confirm_url = (\n                parsed_url.scheme + '://' + parsed_url.netloc +\n                action + '?' +\n                compat_urllib_parse.urlencode({\n                    'jschl_vc': vc, 'jschl_answer': compat_str(av_val)}))\n            self._download_webpage(\n                confirm_url, video_id,\n                note='Confirming after redirect')\n            webpage = self._download_webpage(url, video_id)\n\n        FORMATS = ('normal', 'hq')\n        quality = qualities(FORMATS)\n        formats = []\n        for format_id in FORMATS:\n            rex = r\"var %s_video_file = '(.*?)';\" % re.escape(format_id)\n            video_url = self._search_regex(rex, webpage, 'video file URLx',\n                                           fatal=False)\n            if not video_url:\n                continue\n            formats.append({\n                'format_id': format_id,\n                'url': video_url,\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n        video_title = self._og_search_title(webpage)\n        video_description = self._og_search_description(webpage)\n\n        return {\n            '_type': 'video',\n            'id': video_id,\n            'formats': formats,\n            'title': video_title,\n            'description': video_description\n        }",
        "begin_line": 34,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031645569620253164,
            "pseudo_dstar_susp": 0.003278688524590164,
            "pseudo_tarantula_susp": 0.0007818608287724785,
            "pseudo_op2_susp": 0.003278688524590164,
            "pseudo_barinel_susp": 0.0007818608287724785
        }
    },
    {
        "name": "youtube_dl.extractor.viki.VikiBaseIE._prepare_call#33",
        "src_path": "youtube_dl/extractor/viki.py",
        "class_name": "youtube_dl.extractor.viki.VikiBaseIE",
        "signature": "youtube_dl.extractor.viki.VikiBaseIE._prepare_call(self, path, timestamp=None, post_data=None)",
        "snippet": "    def _prepare_call(self, path, timestamp=None, post_data=None):\n        path += '?' if '?' not in path else '&'\n        if not timestamp:\n            timestamp = int(time.time())\n        query = self._API_QUERY_TEMPLATE % (path, self._APP, timestamp)\n        if self._token:\n            query += '&token=%s' % self._token\n        sig = hmac.new(\n            self._APP_SECRET.encode('ascii'),\n            query.encode('ascii'),\n            hashlib.sha1\n        ).hexdigest()\n        url = self._API_URL_TEMPLATE % (query, sig)\n        return sanitized_Request(\n            url, json.dumps(post_data).encode('utf-8')) if post_data else url",
        "begin_line": 33,
        "end_line": 47,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.viki.VikiBaseIE._real_initialize#70",
        "src_path": "youtube_dl/extractor/viki.py",
        "class_name": "youtube_dl.extractor.viki.VikiBaseIE",
        "signature": "youtube_dl.extractor.viki.VikiBaseIE._real_initialize(self)",
        "snippet": "    def _real_initialize(self):\n        self._login()",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.viki.VikiBaseIE._login#73",
        "src_path": "youtube_dl/extractor/viki.py",
        "class_name": "youtube_dl.extractor.viki.VikiBaseIE",
        "signature": "youtube_dl.extractor.viki.VikiBaseIE._login(self)",
        "snippet": "    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_form = {\n            'login_id': username,\n            'password': password,\n        }\n\n        login = self._call_api(\n            'sessions.json', None,\n            'Logging in as %s' % username, post_data=login_form)\n\n        self._token = login.get('token')\n        if not self._token:\n            self.report_warning('Unable to get session token, login has probably failed')",
        "begin_line": 73,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000676132521974307,
            "pseudo_dstar_susp": 0.0006523157208088715,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.0006523157208088715,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "youtube_dl.extractor.viki.VikiIE._real_extract#199",
        "src_path": "youtube_dl/extractor/viki.py",
        "class_name": "youtube_dl.extractor.viki.VikiIE",
        "signature": "youtube_dl.extractor.viki.VikiIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._call_api(\n            'videos/%s.json' % video_id, video_id, 'Downloading video JSON')\n\n        title = self.dict_selection(video.get('titles', {}), 'en')\n        if not title:\n            title = 'Episode %d' % video.get('number') if video.get('type') == 'episode' else video.get('id') or video_id\n            container_titles = video.get('container', {}).get('titles', {})\n            container_title = self.dict_selection(container_titles, 'en')\n            title = '%s - %s' % (container_title, title)\n\n        description = self.dict_selection(video.get('descriptions', {}), 'en')\n\n        duration = int_or_none(video.get('duration'))\n        timestamp = parse_iso8601(video.get('created_at'))\n        uploader = video.get('author')\n        like_count = int_or_none(video.get('likes', {}).get('count'))\n        age_limit = parse_age_limit(video.get('rating'))\n\n        thumbnails = []\n        for thumbnail_id, thumbnail in video.get('images', {}).items():\n            thumbnails.append({\n                'id': thumbnail_id,\n                'url': thumbnail.get('url'),\n            })\n\n        subtitles = {}\n        for subtitle_lang, _ in video.get('subtitle_completions', {}).items():\n            subtitles[subtitle_lang] = [{\n                'ext': subtitles_format,\n                'url': self._prepare_call(\n                    'videos/%s/subtitles/%s.%s' % (video_id, subtitle_lang, subtitles_format)),\n            } for subtitles_format in ('srt', 'vtt')]\n\n        result = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'like_count': like_count,\n            'age_limit': age_limit,\n            'thumbnails': thumbnails,\n            'subtitles': subtitles,\n        }\n\n        streams = self._call_api(\n            'videos/%s/streams.json' % video_id, video_id,\n            'Downloading video streams JSON')\n\n        if 'external' in streams:\n            result.update({\n                '_type': 'url_transparent',\n                'url': streams['external']['url'],\n            })\n            return result\n\n        formats = []\n        for format_id, stream_dict in streams.items():\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None))\n            for protocol, format_dict in stream_dict.items():\n                if format_id == 'm3u8':\n                    formats = self._extract_m3u8_formats(\n                        format_dict['url'], video_id, 'mp4', m3u8_id='m3u8-%s' % protocol)\n                else:\n                    formats.append({\n                        'url': format_dict['url'],\n                        'format_id': '%s-%s' % (format_id, protocol),\n                        'height': height,\n                    })\n        self._sort_formats(formats)\n\n        result['formats'] = formats\n        return result",
        "begin_line": 199,
        "end_line": 276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.globo.GloboIE._real_extract#332",
        "src_path": "youtube_dl/extractor/globo.py",
        "class_name": "youtube_dl.extractor.globo.GloboIE",
        "signature": "youtube_dl.extractor.globo.GloboIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            self._API_URL_TEMPLATE % video_id, video_id)['videos'][0]\n\n        title = video['title']\n\n        formats = []\n        for resource in video['resources']:\n            resource_id = resource.get('_id')\n            if not resource_id or resource_id.endswith('manifest'):\n                continue\n\n            security = self._download_json(\n                self._SECURITY_URL_TEMPLATE % (video_id, resource_id),\n                video_id, 'Downloading security hash for %s' % resource_id)\n\n            security_hash = security.get('hash')\n            if not security_hash:\n                message = security.get('message')\n                if message:\n                    raise ExtractorError(\n                        '%s returned error: %s' % (self.IE_NAME, message), expected=True)\n                continue\n\n            hash_code = security_hash[:2]\n            received_time = int(security_hash[2:12])\n            received_random = security_hash[12:22]\n            received_md5 = security_hash[22:]\n\n            sign_time = received_time + self._RESIGN_EXPIRATION\n            padding = '%010d' % random.randint(1, 10000000000)\n\n            signed_md5 = self.MD5.b64_md5(received_md5 + compat_str(sign_time) + padding)\n            signed_hash = hash_code + compat_str(received_time) + received_random + compat_str(sign_time) + padding + signed_md5\n\n            resource_url = resource['url']\n            signed_url = '%s?h=%s&k=%s' % (resource_url, signed_hash, 'flash')\n            if resource_id.endswith('m3u8') or resource_url.endswith('.m3u8'):\n                m3u8_formats = self._extract_m3u8_formats(\n                    signed_url, resource_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False)\n                if m3u8_formats:\n                    formats.extend(m3u8_formats)\n            else:\n                formats.append({\n                    'url': signed_url,\n                    'format_id': 'http-%s' % resource_id,\n                    'height': int_or_none(resource.get('height')),\n                })\n\n        self._sort_formats(formats)\n\n        duration = float_or_none(video.get('duration'), 1000)\n        uploader = video.get('channel')\n        uploader_id = str_or_none(video.get('channel_id'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'formats': formats\n        }",
        "begin_line": 332,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.globo.GloboArticleIE.suitable#431",
        "src_path": "youtube_dl/extractor/globo.py",
        "class_name": "youtube_dl.extractor.globo.GloboArticleIE",
        "signature": "youtube_dl.extractor.globo.GloboArticleIE.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        return False if GloboIE.suitable(url) else super(GloboArticleIE, cls).suitable(url)",
        "begin_line": 431,
        "end_line": 432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0006285355122564425,
            "pseudo_tarantula_susp": 0.000468384074941452,
            "pseudo_op2_susp": 0.0006285355122564425,
            "pseudo_barinel_susp": 0.000468384074941452
        }
    },
    {
        "name": "youtube_dl.extractor.globo.GloboArticleIE._real_extract#434",
        "src_path": "youtube_dl/extractor/globo.py",
        "class_name": "youtube_dl.extractor.globo.GloboArticleIE",
        "signature": "youtube_dl.extractor.globo.GloboArticleIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex(self._VIDEOID_REGEXES, webpage, 'video id')\n        return self.url_result('globo:%s' % video_id, 'Globo')",
        "begin_line": 434,
        "end_line": 438,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.brightcove.BrightcoveLegacyIE._extract_brightcove_urls#199",
        "src_path": "youtube_dl/extractor/brightcove.py",
        "class_name": "youtube_dl.extractor.brightcove.BrightcoveLegacyIE",
        "signature": "youtube_dl.extractor.brightcove.BrightcoveLegacyIE._extract_brightcove_urls(cls, webpage)",
        "snippet": "    def _extract_brightcove_urls(cls, webpage):\n        \"\"\"Return a list of all Brightcove URLs from the webpage \"\"\"\n\n        url_m = re.search(\n            r'<meta\\s+property=[\\'\"]og:video[\\'\"]\\s+content=[\\'\"](https?://(?:secure|c)\\.brightcove.com/[^\\'\"]+)[\\'\"]',\n            webpage)\n        if url_m:\n            url = unescapeHTML(url_m.group(1))\n            # Some sites don't add it, we can't download with this url, for example:\n            # http://www.ktvu.com/videos/news/raw-video-caltrain-releases-video-of-man-almost/vCTZdY/\n            if 'playerKey' in url or 'videoId' in url:\n                return [url]\n\n        matches = re.findall(\n            r'''(?sx)<object\n            (?:\n                [^>]+?class=[\\'\"][^>]*?BrightcoveExperience.*?[\\'\"] |\n                [^>]*?>\\s*<param\\s+name=\"movie\"\\s+value=\"https?://[^/]*brightcove\\.com/\n            ).+?>\\s*</object>''',\n            webpage)\n        if matches:\n            return list(filter(None, [cls._build_brighcove_url(m) for m in matches]))\n\n        return list(filter(None, [\n            cls._build_brighcove_url_from_js(custom_bc)\n            for custom_bc in re.findall(r'(customBC\\.createVideo\\(.+?\\);)', webpage)]))",
        "begin_line": 199,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.brightcove.BrightcoveLegacyIE._get_video_info#251",
        "src_path": "youtube_dl/extractor/brightcove.py",
        "class_name": "youtube_dl.extractor.brightcove.BrightcoveLegacyIE",
        "signature": "youtube_dl.extractor.brightcove.BrightcoveLegacyIE._get_video_info(self, video_id, query_str, query, referer=None)",
        "snippet": "    def _get_video_info(self, video_id, query_str, query, referer=None):\n        request_url = self._FEDERATED_URL_TEMPLATE % query_str\n        req = sanitized_Request(request_url)\n        linkBase = query.get('linkBaseURL')\n        if linkBase is not None:\n            referer = linkBase[0]\n        if referer is not None:\n            req.add_header('Referer', referer)\n        webpage = self._download_webpage(req, video_id)\n\n        error_msg = self._html_search_regex(\n            r\"<h1>We're sorry.</h1>([\\s\\n]*<p>.*?</p>)+\", webpage,\n            'error message', default=None)\n        if error_msg is not None:\n            raise ExtractorError(\n                'brightcove said: %s' % error_msg, expected=True)\n\n        self.report_extraction(video_id)\n        info = self._search_regex(r'var experienceJSON = ({.*});', webpage, 'json')\n        info = json.loads(info)['data']\n        video_info = info['programmedContent']['videoPlayer']['mediaDTO']\n        video_info['_youtubedl_adServerURL'] = info.get('adServerURL')\n\n        return self._extract_video_info(video_info)",
        "begin_line": 251,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011494252873563218,
            "pseudo_dstar_susp": 0.0009671179883945841,
            "pseudo_tarantula_susp": 0.0015503875968992248,
            "pseudo_op2_susp": 0.0009671179883945841,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "youtube_dl.extractor.brightcove.BrightcoveNewIE._extract_urls#402",
        "src_path": "youtube_dl/extractor/brightcove.py",
        "class_name": "youtube_dl.extractor.brightcove.BrightcoveNewIE",
        "signature": "youtube_dl.extractor.brightcove.BrightcoveNewIE._extract_urls(webpage)",
        "snippet": "    def _extract_urls(webpage):\n        # Reference:\n        # 1. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/publish-video.html#setvideoiniframe\n        # 2. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/publish-video.html#setvideousingjavascript\n        # 3. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/embed-in-page.html\n        # 4. https://support.brightcove.com/en/video-cloud/docs/dynamically-assigning-videos-player\n\n        entries = []\n\n        # Look for iframe embeds [1]\n        for _, url in re.findall(\n                r'<iframe[^>]+src=([\"\\'])((?:https?:)//players\\.brightcove\\.net/\\d+/[^/]+/index\\.html.+?)\\1', webpage):\n            entries.append(url)\n\n        # Look for embed_in_page embeds [2]\n        for video_id, account_id, player_id, embed in re.findall(\n                # According to examples from [3] it's unclear whether video id\n                # may be optional and what to do when it is\n                # According to [4] data-video-id may be prefixed with ref:\n                r'''(?sx)\n                    <video[^>]+\n                        data-video-id=[\"\\']((?:ref:)?\\d+)[\"\\'][^>]*>.*?\n                    </video>.*?\n                    <script[^>]+\n                        src=[\"\\'](?:https?:)?//players\\.brightcove\\.net/\n                        (\\d+)/([\\da-f-]+)_([^/]+)/index\\.min\\.js\n                ''', webpage):\n            entries.append(\n                'http://players.brightcove.net/%s/%s_%s/index.html?videoId=%s'\n                % (account_id, player_id, embed, video_id))\n\n        return entries",
        "begin_line": 402,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011350737797956867,
            "pseudo_dstar_susp": 0.0011933174224343676,
            "pseudo_tarantula_susp": 0.0010570824524312897,
            "pseudo_op2_susp": 0.0011933174224343676,
            "pseudo_barinel_susp": 0.0010570824524312897
        }
    },
    {
        "name": "youtube_dl.extractor.brightcove.BrightcoveNewIE._real_extract#435",
        "src_path": "youtube_dl/extractor/brightcove.py",
        "class_name": "youtube_dl.extractor.brightcove.BrightcoveNewIE",
        "signature": "youtube_dl.extractor.brightcove.BrightcoveNewIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        account_id, player_id, embed, video_id = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(\n            'http://players.brightcove.net/%s/%s_%s/index.min.js'\n            % (account_id, player_id, embed), video_id)\n\n        policy_key = None\n\n        catalog = self._search_regex(\n            r'catalog\\(({.+?})\\);', webpage, 'catalog', default=None)\n        if catalog:\n            catalog = self._parse_json(\n                js_to_json(catalog), video_id, fatal=False)\n            if catalog:\n                policy_key = catalog.get('policyKey')\n\n        if not policy_key:\n            policy_key = self._search_regex(\n                r'policyKey\\s*:\\s*([\"\\'])(?P<pk>.+?)\\1',\n                webpage, 'policy key', group='pk')\n\n        req = sanitized_Request(\n            'https://edge.api.brightcove.com/playback/v1/accounts/%s/videos/%s'\n            % (account_id, video_id),\n            headers={'Accept': 'application/json;pk=%s' % policy_key})\n        json_data = self._download_json(req, video_id)\n\n        title = json_data['name']\n\n        formats = []\n        for source in json_data.get('sources', []):\n            source_type = source.get('type')\n            src = source.get('src')\n            if source_type == 'application/x-mpegURL':\n                if not src:\n                    continue\n                m3u8_formats = self._extract_m3u8_formats(\n                    src, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False)\n                if m3u8_formats:\n                    formats.extend(m3u8_formats)\n            else:\n                streaming_src = source.get('streaming_src')\n                stream_name, app_name = source.get('stream_name'), source.get('app_name')\n                if not src and not streaming_src and (not stream_name or not app_name):\n                    continue\n                tbr = float_or_none(source.get('avg_bitrate'), 1000)\n                height = int_or_none(source.get('height'))\n                f = {\n                    'tbr': tbr,\n                    'width': int_or_none(source.get('width')),\n                    'height': height,\n                    'filesize': int_or_none(source.get('size')),\n                    'container': source.get('container'),\n                    'vcodec': source.get('codec'),\n                    'ext': source.get('container').lower(),\n                }\n\n                def build_format_id(kind):\n                    format_id = kind\n                    if tbr:\n                        format_id += '-%dk' % int(tbr)\n                    if height:\n                        format_id += '-%dp' % height\n                    return format_id\n\n                if src or streaming_src:\n                    f.update({\n                        'url': src or streaming_src,\n                        'format_id': build_format_id('http' if src else 'http-streaming'),\n                        'preference': 2 if src else 1,\n                    })\n                else:\n                    f.update({\n                        'url': app_name,\n                        'play_path': stream_name,\n                        'format_id': build_format_id('rtmp'),\n                    })\n                formats.append(f)\n        self._sort_formats(formats)\n\n        description = json_data.get('description')\n        thumbnail = json_data.get('thumbnail')\n        timestamp = parse_iso8601(json_data.get('published_at'))\n        duration = float_or_none(json_data.get('duration'), 1000)\n        tags = json_data.get('tags', [])\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader_id': account_id,\n            'formats': formats,\n            'tags': tags,\n        }",
        "begin_line": 435,
        "end_line": 533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007830853563038371,
            "pseudo_dstar_susp": 0.00078125,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.00078125,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.brightcove.BrightcoveNewIE.build_format_id#494",
        "src_path": "youtube_dl/extractor/brightcove.py",
        "class_name": "youtube_dl.extractor.brightcove.BrightcoveNewIE",
        "signature": "youtube_dl.extractor.brightcove.BrightcoveNewIE.build_format_id(kind)",
        "snippet": "                def build_format_id(kind):\n                    format_id = kind\n                    if tbr:\n                        format_id += '-%dk' % int(tbr)\n                    if height:\n                        format_id += '-%dp' % height\n                    return format_id",
        "begin_line": 494,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.ted.TEDIE._extract_info#110",
        "src_path": "youtube_dl/extractor/ted.py",
        "class_name": "youtube_dl.extractor.ted.TEDIE",
        "signature": "youtube_dl.extractor.ted.TEDIE._extract_info(self, webpage)",
        "snippet": "    def _extract_info(self, webpage):\n        info_json = self._search_regex(r'q\\(\"\\w+.init\",({.+})\\)</script>',\n                                       webpage, 'info json')\n        return json.loads(info_json)",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007117437722419929,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.ted.TEDIE._real_extract#115",
        "src_path": "youtube_dl/extractor/ted.py",
        "class_name": "youtube_dl.extractor.ted.TEDIE",
        "signature": "youtube_dl.extractor.ted.TEDIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url, re.VERBOSE)\n        if m.group('type').startswith('embed'):\n            desktop_url = m.group('proto') + 'www' + m.group('urlmain')\n            return self.url_result(desktop_url, 'TED')\n        name = m.group('name')\n        if m.group('type_talk'):\n            return self._talk_info(url, name)\n        elif m.group('type_watch'):\n            return self._watch_info(url, name)\n        else:\n            return self._playlist_videos_info(url, name)",
        "begin_line": 115,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.extractor.ted.TEDIE._talk_info#145",
        "src_path": "youtube_dl/extractor/ted.py",
        "class_name": "youtube_dl.extractor.ted.TEDIE",
        "signature": "youtube_dl.extractor.ted.TEDIE._talk_info(self, url, video_name)",
        "snippet": "    def _talk_info(self, url, video_name):\n        webpage = self._download_webpage(url, video_name)\n        self.report_extraction(video_name)\n\n        talk_info = self._extract_info(webpage)['talks'][0]\n\n        external = talk_info.get('external')\n        if external:\n            service = external['service']\n            self.to_screen('Found video from %s' % service)\n            ext_url = None\n            if service.lower() == 'youtube':\n                ext_url = external.get('code')\n            return {\n                '_type': 'url',\n                'url': ext_url or external['uri'],\n            }\n\n        formats = [{\n            'url': format_url,\n            'format_id': format_id,\n            'format': format_id,\n        } for (format_id, format_url) in talk_info['nativeDownloads'].items() if format_url is not None]\n        if formats:\n            for f in formats:\n                finfo = self._NATIVE_FORMATS.get(f['format_id'])\n                if finfo:\n                    f.update(finfo)\n\n        for format_id, resources in talk_info['resources'].items():\n            if format_id == 'h264':\n                for resource in resources:\n                    bitrate = int_or_none(resource.get('bitrate'))\n                    formats.append({\n                        'url': resource['file'],\n                        'format_id': '%s-%sk' % (format_id, bitrate),\n                        'tbr': bitrate,\n                    })\n            elif format_id == 'rtmp':\n                streamer = talk_info.get('streamer')\n                if not streamer:\n                    continue\n                for resource in resources:\n                    formats.append({\n                        'format_id': '%s-%s' % (format_id, resource.get('name')),\n                        'url': streamer,\n                        'play_path': resource['file'],\n                        'ext': 'flv',\n                        'width': int_or_none(resource.get('width')),\n                        'height': int_or_none(resource.get('height')),\n                        'tbr': int_or_none(resource.get('bitrate')),\n                    })\n            elif format_id == 'hls':\n                hls_formats = self._extract_m3u8_formats(\n                    resources.get('stream'), video_name, 'mp4', m3u8_id=format_id)\n                for f in hls_formats:\n                    if f.get('format_id') == 'hls-meta':\n                        continue\n                    if not f.get('height'):\n                        f['vcodec'] = 'none'\n                    else:\n                        f['acodec'] = 'none'\n                formats.extend(hls_formats)\n\n        audio_download = talk_info.get('audioDownload')\n        if audio_download:\n            formats.append({\n                'url': audio_download,\n                'format_id': 'audio',\n                'vcodec': 'none',\n                'preference': -0.5,\n            })\n\n        self._sort_formats(formats)\n\n        video_id = compat_str(talk_info['id'])\n\n        thumbnail = talk_info['thumb']\n        if not thumbnail.startswith('http'):\n            thumbnail = 'http://' + thumbnail\n        return {\n            'id': video_id,\n            'title': talk_info['title'].strip(),\n            'uploader': talk_info['speaker'],\n            'thumbnail': thumbnail,\n            'description': self._og_search_description(webpage),\n            'subtitles': self._get_subtitles(video_id, talk_info),\n            'formats': formats,\n            'duration': talk_info.get('duration'),\n        }",
        "begin_line": 145,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.archiveorg.ArchiveOrgIE._real_extract#33",
        "src_path": "youtube_dl/extractor/archiveorg.py",
        "class_name": "youtube_dl.extractor.archiveorg.ArchiveOrgIE",
        "signature": "youtube_dl.extractor.archiveorg.ArchiveOrgIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        json_url = url + ('&' if '?' in url else '?') + 'output=json'\n        data = self._download_json(json_url, video_id)\n\n        def get_optional(data_dict, field):\n            return data_dict['metadata'].get(field, [None])[0]\n\n        title = get_optional(data, 'title')\n        description = get_optional(data, 'description')\n        uploader = get_optional(data, 'creator')\n        upload_date = unified_strdate(get_optional(data, 'date'))\n\n        formats = [\n            {\n                'format': fdata['format'],\n                'url': 'http://' + data['server'] + data['dir'] + fn,\n                'file_size': int(fdata['size']),\n            }\n            for fn, fdata in data['files'].items()\n            if 'Video' in fdata['format']]\n\n        self._sort_formats(formats)\n\n        return {\n            '_type': 'video',\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'thumbnail': data.get('misc', {}).get('image'),\n        }",
        "begin_line": 33,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002145922746781116,
            "pseudo_dstar_susp": 0.0014684287812041115,
            "pseudo_tarantula_susp": 0.0010204081632653062,
            "pseudo_op2_susp": 0.0014684287812041115,
            "pseudo_barinel_susp": 0.0010204081632653062
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.__init__#30",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.__init__(self, code, objects=None)",
        "snippet": "    def __init__(self, code, objects=None):\n        if objects is None:\n            objects = {}\n        self.code = code\n        self._functions = {}\n        self._objects = objects",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.0002960331557134399,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.interpret_statement#37",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.interpret_statement(self, stmt, local_vars, allow_recursion=100)",
        "snippet": "    def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n        if allow_recursion < 0:\n            raise ExtractorError('Recursion limit reached')\n\n        should_abort = False\n        stmt = stmt.lstrip()\n        stmt_m = re.match(r'var\\s', stmt)\n        if stmt_m:\n            expr = stmt[len(stmt_m.group(0)):]\n        else:\n            return_m = re.match(r'return(?:\\s+|$)', stmt)\n            if return_m:\n                expr = stmt[len(return_m.group(0)):]\n                should_abort = True\n            else:\n                # Try interpreting it as an expression\n                expr = stmt\n\n        v = self.interpret_expression(expr, local_vars, allow_recursion)\n        return v, should_abort",
        "begin_line": 37,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.0003009328919650918,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.interpret_expression#58",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.interpret_expression(self, expr, local_vars, allow_recursion)",
        "snippet": "    def interpret_expression(self, expr, local_vars, allow_recursion):\n        expr = expr.strip()\n\n        if expr == '':  # Empty expression\n            return None\n\n        if expr.startswith('('):\n            parens_count = 0\n            for m in re.finditer(r'[()]', expr):\n                if m.group(0) == '(':\n                    parens_count += 1\n                else:\n                    parens_count -= 1\n                    if parens_count == 0:\n                        sub_expr = expr[1:m.start()]\n                        sub_result = self.interpret_expression(\n                            sub_expr, local_vars, allow_recursion)\n                        remaining_expr = expr[m.end():].strip()\n                        if not remaining_expr:\n                            return sub_result\n                        else:\n                            expr = json.dumps(sub_result) + remaining_expr\n                        break\n            else:\n                raise ExtractorError('Premature end of parens in %r' % expr)\n\n        for op, opfunc in _ASSIGN_OPERATORS:\n            m = re.match(r'''(?x)\n                (?P<out>%s)(?:\\[(?P<index>[^\\]]+?)\\])?\n                \\s*%s\n                (?P<expr>.*)$''' % (_NAME_RE, re.escape(op)), expr)\n            if not m:\n                continue\n            right_val = self.interpret_expression(\n                m.group('expr'), local_vars, allow_recursion - 1)\n\n            if m.groupdict().get('index'):\n                lvar = local_vars[m.group('out')]\n                idx = self.interpret_expression(\n                    m.group('index'), local_vars, allow_recursion)\n                assert isinstance(idx, int)\n                cur = lvar[idx]\n                val = opfunc(cur, right_val)\n                lvar[idx] = val\n                return val\n            else:\n                cur = local_vars.get(m.group('out'))\n                val = opfunc(cur, right_val)\n                local_vars[m.group('out')] = val\n                return val\n\n        if expr.isdigit():\n            return int(expr)\n\n        var_m = re.match(\n            r'(?!if|return|true|false)(?P<name>%s)$' % _NAME_RE,\n            expr)\n        if var_m:\n            return local_vars[var_m.group('name')]\n\n        try:\n            return json.loads(expr)\n        except ValueError:\n            pass\n\n        m = re.match(\n            r'(?P<var>%s)\\.(?P<member>[^(]+)(?:\\(+(?P<args>[^()]*)\\))?$' % _NAME_RE,\n            expr)\n        if m:\n            variable = m.group('var')\n            member = m.group('member')\n            arg_str = m.group('args')\n\n            if variable in local_vars:\n                obj = local_vars[variable]\n            else:\n                if variable not in self._objects:\n                    self._objects[variable] = self.extract_object(variable)\n                obj = self._objects[variable]\n\n            if arg_str is None:\n                # Member access\n                if member == 'length':\n                    return len(obj)\n                return obj[member]\n\n            assert expr.endswith(')')\n            # Function call\n            if arg_str == '':\n                argvals = tuple()\n            else:\n                argvals = tuple([\n                    self.interpret_expression(v, local_vars, allow_recursion)\n                    for v in arg_str.split(',')])\n\n            if member == 'split':\n                assert argvals == ('',)\n                return list(obj)\n            if member == 'join':\n                assert len(argvals) == 1\n                return argvals[0].join(obj)\n            if member == 'reverse':\n                assert len(argvals) == 0\n                obj.reverse()\n                return obj\n            if member == 'slice':\n                assert len(argvals) == 1\n                return obj[argvals[0]:]\n            if member == 'splice':\n                assert isinstance(obj, list)\n                index, howMany = argvals\n                res = []\n                for i in range(index, min(index + howMany, len(obj))):\n                    res.append(obj.pop(index))\n                return res\n\n            return obj[member](argvals)\n\n        m = re.match(\n            r'(?P<in>%s)\\[(?P<idx>.+)\\]$' % _NAME_RE, expr)\n        if m:\n            val = local_vars[m.group('in')]\n            idx = self.interpret_expression(\n                m.group('idx'), local_vars, allow_recursion - 1)\n            return val[idx]\n\n        for op, opfunc in _OPERATORS:\n            m = re.match(r'(?P<x>.+?)%s(?P<y>.+)' % re.escape(op), expr)\n            if not m:\n                continue\n            x, abort = self.interpret_statement(\n                m.group('x'), local_vars, allow_recursion - 1)\n            if abort:\n                raise ExtractorError(\n                    'Premature left-side return of %s in %r' % (op, expr))\n            y, abort = self.interpret_statement(\n                m.group('y'), local_vars, allow_recursion - 1)\n            if abort:\n                raise ExtractorError(\n                    'Premature right-side return of %s in %r' % (op, expr))\n            return opfunc(x, y)\n\n        m = re.match(\n            r'^(?P<func>%s)\\((?P<args>[a-zA-Z0-9_$,]+)\\)$' % _NAME_RE, expr)\n        if m:\n            fname = m.group('func')\n            argvals = tuple([\n                int(v) if v.isdigit() else local_vars[v]\n                for v in m.group('args').split(',')])\n            if fname not in self._functions:\n                self._functions[fname] = self.extract_function(fname)\n            return self._functions[fname](argvals)\n\n        raise ExtractorError('Unsupported JS expression %r' % expr)",
        "begin_line": 58,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.extract_object#213",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.extract_object(self, objname)",
        "snippet": "    def extract_object(self, objname):\n        obj = {}\n        obj_m = re.search(\n            (r'(?:var\\s+)?%s\\s*=\\s*\\{' % re.escape(objname)) +\n            r'\\s*(?P<fields>([a-zA-Z$0-9]+\\s*:\\s*function\\(.*?\\)\\s*\\{.*?\\}(?:,\\s*)?)*)' +\n            r'\\}\\s*;',\n            self.code)\n        fields = obj_m.group('fields')\n        # Currently, it only supports function definitions\n        fields_m = re.finditer(\n            r'(?P<key>[a-zA-Z$0-9]+)\\s*:\\s*function'\n            r'\\((?P<args>[a-z,]+)\\){(?P<code>[^}]+)}',\n            fields)\n        for f in fields_m:\n            argnames = f.group('args').split(',')\n            obj[f.group('key')] = self.build_function(argnames, f.group('code'))\n\n        return obj",
        "begin_line": 213,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.0003081664098613251,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.extract_function#232",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.extract_function(self, funcname)",
        "snippet": "    def extract_function(self, funcname):\n        func_m = re.search(\n            r'''(?x)\n                (?:function\\s+%s|[{;,]%s\\s*=\\s*function|var\\s+%s\\s*=\\s*function)\\s*\n                \\((?P<args>[^)]*)\\)\\s*\n                \\{(?P<code>[^}]+)\\}''' % (\n                re.escape(funcname), re.escape(funcname), re.escape(funcname)),\n            self.code)\n        if func_m is None:\n            raise ExtractorError('Could not find JS function %r' % funcname)\n        argnames = func_m.group('args').split(',')\n\n        return self.build_function(argnames, func_m.group('code'))",
        "begin_line": 232,
        "end_line": 244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.0002960331557134399,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.call_function#246",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.call_function(self, funcname, *args)",
        "snippet": "    def call_function(self, funcname, *args):\n        f = self.extract_function(funcname)\n        return f(args)",
        "begin_line": 246,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00030193236714975844,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.build_function#250",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.build_function(self, argnames, code)",
        "snippet": "    def build_function(self, argnames, code):\n        def resf(args):\n            local_vars = dict(zip(argnames, args))\n            for stmt in code.split(';'):\n                res, abort = self.interpret_statement(stmt, local_vars)\n                if abort:\n                    break\n            return res\n        return resf",
        "begin_line": 250,
        "end_line": 258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.0002960331557134399,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.jsinterp.JSInterpreter.resf#251",
        "src_path": "youtube_dl/jsinterp.py",
        "class_name": "youtube_dl.jsinterp.JSInterpreter",
        "signature": "youtube_dl.jsinterp.JSInterpreter.resf(args)",
        "snippet": "        def resf(args):\n            local_vars = dict(zip(argnames, args))\n            for stmt in code.split(';'):\n                res, abort = self.interpret_statement(stmt, local_vars)\n                if abort:\n                    break\n            return res",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.0002960331557134399,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.rutv.RUTVIE._extract_url#105",
        "src_path": "youtube_dl/extractor/rutv.py",
        "class_name": "youtube_dl.extractor.rutv.RUTVIE",
        "signature": "youtube_dl.extractor.rutv.RUTVIE._extract_url(cls, webpage)",
        "snippet": "    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://player\\.(?:rutv\\.ru|vgtrk\\.com)/(?:iframe/(?:swf|video|live)/id|index/iframe/cast_id)/.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n        mobj = re.search(\n            r'<meta[^>]+?property=([\"\\'])og:video\\1[^>]+?content=([\"\\'])(?P<url>https?://player\\.(?:rutv\\.ru|vgtrk\\.com)/flash2v/container\\.swf\\?id=.+?\\2)',\n            webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 105,
        "end_line": 115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.nrk.NRKTVIE._real_extract#214",
        "src_path": "youtube_dl/extractor/nrk.py",
        "class_name": "youtube_dl.extractor.nrk.NRKTVIE",
        "signature": "youtube_dl.extractor.nrk.NRKTVIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        part_id = mobj.group('part_id')\n        base_url = mobj.group('baseurl')\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta(\n            'title', webpage, 'title')\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n\n        thumbnail = self._html_search_regex(\n            r'data-posterimage=\"([^\"]+)\"',\n            webpage, 'thumbnail', fatal=False)\n        upload_date = unified_strdate(self._html_search_meta(\n            'rightsfrom', webpage, 'upload date', fatal=False))\n        duration = float_or_none(self._html_search_regex(\n            r'data-duration=\"([^\"]+)\"',\n            webpage, 'duration', fatal=False))\n\n        # playlist\n        parts = re.findall(\n            r'<a href=\"#del=(\\d+)\"[^>]+data-argument=\"([^\"]+)\">([^<]+)</a>', webpage)\n        if parts:\n            entries = []\n            for current_part_id, stream_url, part_title in parts:\n                if part_id and current_part_id != part_id:\n                    continue\n                video_part_id = '%s-part%s' % (video_id, current_part_id)\n                formats = self._extract_f4m(stream_url, video_part_id)\n                entries.append({\n                    'id': video_part_id,\n                    'title': part_title,\n                    'description': description,\n                    'thumbnail': thumbnail,\n                    'upload_date': upload_date,\n                    'formats': formats,\n                })\n            if part_id:\n                if entries:\n                    return entries[0]\n            else:\n                playlist = self.playlist_result(entries, video_id, title, description)\n                playlist.update({\n                    'thumbnail': thumbnail,\n                    'upload_date': upload_date,\n                    'duration': duration,\n                })\n                return playlist\n\n        formats = []\n\n        f4m_url = re.search(r'data-media=\"([^\"]+)\"', webpage)\n        if f4m_url:\n            formats.extend(self._extract_f4m(f4m_url.group(1), video_id))\n\n        m3u8_url = re.search(r'data-hls-media=\"([^\"]+)\"', webpage)\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(m3u8_url.group(1), video_id, 'mp4', m3u8_id='hls'))\n        self._sort_formats(formats)\n\n        subtitles_url = self._html_search_regex(\n            r'data-subtitlesurl\\s*=\\s*([\"\\'])(?P<url>.+?)\\1',\n            webpage, 'subtitle URL', default=None, group='url')\n        subtitles = {}\n        if subtitles_url:\n            subtitles['no'] = [{\n                'ext': 'ttml',\n                'url': compat_urlparse.urljoin(base_url, subtitles_url),\n            }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }",
        "begin_line": 214,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.democracynow.DemocracynowIE._real_extract#38",
        "src_path": "youtube_dl/extractor/democracynow.py",
        "class_name": "youtube_dl.extractor.democracynow.DemocracynowIE",
        "signature": "youtube_dl.extractor.democracynow.DemocracynowIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        description = self._og_search_description(webpage)\n\n        json_data = self._parse_json(self._search_regex(\n            r'<script[^>]+type=\"text/json\"[^>]*>\\s*({[^>]+})', webpage, 'json'),\n            display_id)\n        video_id = None\n        formats = []\n\n        default_lang = 'en'\n\n        subtitles = {}\n\n        def add_subtitle_item(lang, info_dict):\n            if lang not in subtitles:\n                subtitles[lang] = []\n            subtitles[lang].append(info_dict)\n\n        # chapter_file are not subtitles\n        if 'caption_file' in json_data:\n            add_subtitle_item(default_lang, {\n                'url': compat_urlparse.urljoin(url, json_data['caption_file']),\n            })\n\n        for subtitle_item in json_data.get('captions', []):\n            lang = subtitle_item.get('language', '').lower() or default_lang\n            add_subtitle_item(lang, {\n                'url': compat_urlparse.urljoin(url, subtitle_item['url']),\n            })\n\n        for key in ('file', 'audio', 'video'):\n            media_url = json_data.get(key, '')\n            if not media_url:\n                continue\n            media_url = re.sub(r'\\?.*', '', compat_urlparse.urljoin(url, media_url))\n            video_id = video_id or remove_start(os.path.splitext(url_basename(media_url))[0], 'dn')\n            formats.append({\n                'url': media_url,\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id or display_id,\n            'title': json_data['title'],\n            'description': description,\n            'subtitles': subtitles,\n            'formats': formats,\n        }",
        "begin_line": 38,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.ceskatelevize.CeskaTelevizeIE._real_extract#79",
        "src_path": "youtube_dl/extractor/ceskatelevize.py",
        "class_name": "youtube_dl.extractor.ceskatelevize.CeskaTelevizeIE",
        "signature": "youtube_dl.extractor.ceskatelevize.CeskaTelevizeIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        url = url.replace('/porady/', '/ivysilani/').replace('/video/', '')\n\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        NOT_AVAILABLE_STRING = 'This content is not available at your territory due to limited copyright.'\n        if '%s</p>' % NOT_AVAILABLE_STRING in webpage:\n            raise ExtractorError(NOT_AVAILABLE_STRING, expected=True)\n\n        typ = self._html_search_regex(\n            r'getPlaylistUrl\\(\\[\\{\"type\":\"(.+?)\",\"id\":\".+?\"\\}\\],', webpage, 'type')\n        episode_id = self._html_search_regex(\n            r'getPlaylistUrl\\(\\[\\{\"type\":\".+?\",\"id\":\"(.+?)\"\\}\\],', webpage, 'episode_id')\n\n        data = {\n            'playlist[0][type]': typ,\n            'playlist[0][id]': episode_id,\n            'requestUrl': compat_urllib_parse_urlparse(url).path,\n            'requestSource': 'iVysilani',\n        }\n\n        req = sanitized_Request(\n            'http://www.ceskatelevize.cz/ivysilani/ajax/get-client-playlist',\n            data=compat_urllib_parse.urlencode(data))\n\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n        req.add_header('x-addr', '127.0.0.1')\n        req.add_header('X-Requested-With', 'XMLHttpRequest')\n        req.add_header('Referer', url)\n\n        playlistpage = self._download_json(req, playlist_id)\n\n        playlist_url = playlistpage['url']\n        if playlist_url == 'error_region':\n            raise ExtractorError(NOT_AVAILABLE_STRING, expected=True)\n\n        req = sanitized_Request(compat_urllib_parse_unquote(playlist_url))\n        req.add_header('Referer', url)\n\n        playlist_title = self._og_search_title(webpage)\n        playlist_description = self._og_search_description(webpage)\n\n        playlist = self._download_json(req, playlist_id)['playlist']\n        playlist_len = len(playlist)\n\n        entries = []\n        for item in playlist:\n            formats = []\n            for format_id, stream_url in item['streamUrls'].items():\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url, playlist_id, 'mp4', entry_protocol='m3u8_native'))\n            self._sort_formats(formats)\n\n            item_id = item.get('id') or item['assetId']\n            title = item['title']\n\n            duration = float_or_none(item.get('duration'))\n            thumbnail = item.get('previewImageUrl')\n\n            subtitles = {}\n            if item.get('type') == 'VOD':\n                subs = item.get('subtitles')\n                if subs:\n                    subtitles = self.extract_subtitles(episode_id, subs)\n\n            entries.append({\n                'id': item_id,\n                'title': playlist_title if playlist_len == 1 else '%s (%s)' % (playlist_title, title),\n                'description': playlist_description if playlist_len == 1 else None,\n                'thumbnail': thumbnail,\n                'duration': duration,\n                'formats': formats,\n                'subtitles': subtitles,\n            })\n\n        return self.playlist_result(entries, playlist_id, playlist_title, playlist_description)",
        "begin_line": 79,
        "end_line": 157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000749063670411985,
            "pseudo_dstar_susp": 0.0007072135785007072,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007072135785007072,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.sportbox.SportBoxEmbedIE._extract_urls#87",
        "src_path": "youtube_dl/extractor/sportbox.py",
        "class_name": "youtube_dl.extractor.sportbox.SportBoxEmbedIE",
        "signature": "youtube_dl.extractor.sportbox.SportBoxEmbedIE._extract_urls(webpage)",
        "snippet": "    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=\"(https?://news\\.sportbox\\.ru/vdl/player[^\"]+)\"',\n            webpage)",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.bliptv.BlipTVIE._extract_url#119",
        "src_path": "youtube_dl/extractor/bliptv.py",
        "class_name": "youtube_dl.extractor.bliptv.BlipTVIE",
        "signature": "youtube_dl.extractor.bliptv.BlipTVIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        mobj = re.search(r'<meta\\s[^>]*https?://api\\.blip\\.tv/\\w+/redirect/\\w+/(\\d+)', webpage)\n        if mobj:\n            return 'http://blip.tv/a/a-' + mobj.group(1)\n        mobj = re.search(r'<(?:iframe|embed|object)\\s[^>]*(https?://(?:\\w+\\.)?blip\\.tv/(?:play/|api\\.swf#)[a-zA-Z0-9_]+)', webpage)\n        if mobj:\n            return mobj.group(1)",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.bliptv.BlipTVIE._real_extract#127",
        "src_path": "youtube_dl/extractor/bliptv.py",
        "class_name": "youtube_dl.extractor.bliptv.BlipTVIE",
        "signature": "youtube_dl.extractor.bliptv.BlipTVIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        lookup_id = mobj.group('lookup_id')\n\n        # See https://github.com/rg3/youtube-dl/issues/857 and\n        # https://github.com/rg3/youtube-dl/issues/4197\n        if lookup_id:\n            urlh = self._request_webpage(\n                'http://blip.tv/play/%s' % lookup_id, lookup_id, 'Resolving lookup id')\n            url = compat_urlparse.urlparse(urlh.geturl())\n            qs = compat_urlparse.parse_qs(url.query)\n            mobj = re.match(self._VALID_URL, qs['file'][0])\n\n        video_id = mobj.group('id')\n\n        rss = self._download_xml('http://blip.tv/rss/flash/%s' % video_id, video_id, 'Downloading video RSS')\n\n        def _x(p):\n            return xpath_with_ns(p, {\n                'blip': 'http://blip.tv/dtd/blip/1.0',\n                'media': 'http://search.yahoo.com/mrss/',\n                'itunes': 'http://www.itunes.com/dtds/podcast-1.0.dtd',\n            })\n\n        item = rss.find('channel/item')\n\n        video_id = xpath_text(item, _x('blip:item_id'), 'video id') or lookup_id\n        title = xpath_text(item, 'title', 'title', fatal=True)\n        description = clean_html(xpath_text(item, _x('blip:puredescription'), 'description'))\n        timestamp = parse_iso8601(xpath_text(item, _x('blip:datestamp'), 'timestamp'))\n        uploader = xpath_text(item, _x('blip:user'), 'uploader')\n        uploader_id = xpath_text(item, _x('blip:userid'), 'uploader id')\n        duration = int_or_none(xpath_text(item, _x('blip:runtime'), 'duration'))\n        media_thumbnail = item.find(_x('media:thumbnail'))\n        thumbnail = (media_thumbnail.get('url') if media_thumbnail is not None\n                     else xpath_text(item, 'image', 'thumbnail'))\n        categories = [category.text for category in item.findall('category') if category is not None]\n\n        formats = []\n        subtitles_urls = {}\n\n        media_group = item.find(_x('media:group'))\n        for media_content in media_group.findall(_x('media:content')):\n            url = media_content.get('url')\n            role = media_content.get(_x('blip:role'))\n            msg = self._download_webpage(\n                url + '?showplayer=20140425131715&referrer=http://blip.tv&mask=7&skin=flashvars&view=url',\n                video_id, 'Resolving URL for %s' % role)\n            real_url = compat_urlparse.parse_qs(msg.strip())['message'][0]\n\n            media_type = media_content.get('type')\n            if media_type == 'text/srt' or url.endswith('.srt'):\n                LANGS = {\n                    'english': 'en',\n                }\n                lang = role.rpartition('-')[-1].strip().lower()\n                langcode = LANGS.get(lang, lang)\n                subtitles_urls[langcode] = url\n            elif media_type.startswith('video/'):\n                formats.append({\n                    'url': real_url,\n                    'format_id': role,\n                    'format_note': media_type,\n                    'vcodec': media_content.get(_x('blip:vcodec')) or 'none',\n                    'acodec': media_content.get(_x('blip:acodec')),\n                    'filesize': media_content.get('filesize'),\n                    'width': int_or_none(media_content.get('width')),\n                    'height': int_or_none(media_content.get('height')),\n                })\n        self._check_formats(formats, video_id)\n        self._sort_formats(formats)\n\n        subtitles = self.extract_subtitles(video_id, subtitles_urls)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'formats': formats,\n            'subtitles': subtitles,\n        }",
        "begin_line": 127,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.walla.WallaIE._real_extract#36",
        "src_path": "youtube_dl/extractor/walla.py",
        "class_name": "youtube_dl.extractor.walla.WallaIE",
        "signature": "youtube_dl.extractor.walla.WallaIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        video = self._download_xml(\n            'http://video2.walla.co.il/?w=null/null/%s/@@/video/flv_pl' % video_id,\n            display_id)\n\n        item = video.find('./items/item')\n\n        title = xpath_text(item, './title', 'title')\n        description = xpath_text(item, './synopsis', 'description')\n        thumbnail = xpath_text(item, './preview_pic', 'thumbnail')\n        duration = int_or_none(xpath_text(item, './duration', 'duration'))\n\n        subtitles = {}\n        for subtitle in item.findall('./subtitles/subtitle'):\n            lang = xpath_text(subtitle, './title')\n            subtitles[self._SUBTITLE_LANGS.get(lang, lang)] = [{\n                'ext': 'srt',\n                'url': xpath_text(subtitle, './src'),\n            }]\n\n        formats = []\n        for quality in item.findall('./qualities/quality'):\n            format_id = xpath_text(quality, './title')\n            fmt = {\n                'url': 'rtmp://wafla.walla.co.il/vod',\n                'play_path': xpath_text(quality, './src'),\n                'player_url': 'http://isc.walla.co.il/w9/swf/video_swf/vod/WallaMediaPlayerAvod.swf',\n                'page_url': url,\n                'ext': 'flv',\n                'format_id': xpath_text(quality, './title'),\n            }\n            m = re.search(r'^(?P<height>\\d+)[Pp]', format_id)\n            if m:\n                fmt['height'] = int(m.group('height'))\n            formats.append(fmt)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }",
        "begin_line": 36,
        "end_line": 86,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007874015748031496,
            "pseudo_dstar_susp": 0.0007656967840735069,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007656967840735069,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.abc.ABCIE._real_extract#53",
        "src_path": "youtube_dl/extractor/abc.py",
        "class_name": "youtube_dl.extractor.abc.ABCIE",
        "signature": "youtube_dl.extractor.abc.ABCIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        mobj = re.search(\n            r'inline(?P<type>Video|Audio|YouTube)Data\\.push\\((?P<json_data>[^)]+)\\);',\n            webpage)\n        if mobj is None:\n            raise ExtractorError('Unable to extract video urls')\n\n        urls_info = self._parse_json(\n            mobj.group('json_data'), video_id, transform_source=js_to_json)\n\n        if not isinstance(urls_info, list):\n            urls_info = [urls_info]\n\n        if mobj.group('type') == 'YouTube':\n            return self.playlist_result([\n                self.url_result(url_info['url']) for url_info in urls_info])\n\n        formats = [{\n            'url': url_info['url'],\n            'vcodec': url_info.get('codec') if mobj.group('type') == 'Video' else 'none',\n            'width': int_or_none(url_info.get('width')),\n            'height': int_or_none(url_info.get('height')),\n            'tbr': int_or_none(url_info.get('bitrate')),\n            'filesize': int_or_none(url_info.get('filesize')),\n        } for url_info in urls_info]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }",
        "begin_line": 53,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.5,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.0011587485515643105,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.0011587485515643105
        }
    },
    {
        "name": "youtube_dl.extractor.xhamster.XHamsterEmbedIE._extract_urls#160",
        "src_path": "youtube_dl/extractor/xhamster.py",
        "class_name": "youtube_dl.extractor.xhamster.XHamsterEmbedIE",
        "signature": "youtube_dl.extractor.xhamster.XHamsterEmbedIE._extract_urls(webpage)",
        "snippet": "    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?xhamster\\.com/xembed\\.php\\?video=\\d+)\\1',\n            webpage)]",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.nbc.NBCSportsVPlayerIE._extract_url#92",
        "src_path": "youtube_dl/extractor/nbc.py",
        "class_name": "youtube_dl.extractor.nbc.NBCSportsVPlayerIE",
        "signature": "youtube_dl.extractor.nbc.NBCSportsVPlayerIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        iframe_m = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://vplayer\\.nbcsports\\.com/[^\"]+)\"', webpage)\n        if iframe_m:\n            return iframe_m.group('url')",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.vimple.SprutoBaseIE._extract_spruto#8",
        "src_path": "youtube_dl/extractor/vimple.py",
        "class_name": "youtube_dl.extractor.vimple.SprutoBaseIE",
        "signature": "youtube_dl.extractor.vimple.SprutoBaseIE._extract_spruto(self, spruto, video_id)",
        "snippet": "    def _extract_spruto(self, spruto, video_id):\n        playlist = spruto['playlist'][0]\n        title = playlist['title']\n        video_id = playlist.get('videoId') or video_id\n        thumbnail = playlist.get('posterUrl') or playlist.get('thumbnailUrl')\n        duration = int_or_none(playlist.get('duration'))\n\n        formats = [{\n            'url': f['url'],\n        } for f in playlist['video']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }",
        "begin_line": 8,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009208103130755065,
            "pseudo_dstar_susp": 0.0008673026886383347,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008673026886383347,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.neteasemusic.NetEaseMusicProgramIE._real_extract#373",
        "src_path": "youtube_dl/extractor/neteasemusic.py",
        "class_name": "youtube_dl.extractor.neteasemusic.NetEaseMusicProgramIE",
        "signature": "youtube_dl.extractor.neteasemusic.NetEaseMusicProgramIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        program_id = self._match_id(url)\n\n        info = self.query_api(\n            'dj/program/detail?id=%s' % program_id,\n            program_id, 'Downloading program info')['program']\n\n        name = info['name']\n        description = info['description']\n\n        if not info['songs'] or self._downloader.params.get('noplaylist'):\n            if info['songs']:\n                self.to_screen(\n                    'Downloading just the main audio %s because of --no-playlist'\n                    % info['mainSong']['id'])\n\n            formats = self.extract_formats(info['mainSong'])\n            self._sort_formats(formats)\n\n            return {\n                'id': program_id,\n                'title': name,\n                'description': description,\n                'creator': info['dj']['brand'],\n                'timestamp': self.convert_milliseconds(info['createTime']),\n                'thumbnail': info['coverUrl'],\n                'duration': self.convert_milliseconds(info.get('duration', 0)),\n                'formats': formats,\n            }\n\n        self.to_screen(\n            'Downloading playlist %s - add --no-playlist to just download the main audio %s'\n            % (program_id, info['mainSong']['id']))\n\n        song_ids = [info['mainSong']['id']]\n        song_ids.extend([song['id'] for song in info['songs']])\n        entries = [\n            self.url_result('http://music.163.com/#/song?id=%s' % song_id,\n                            'NetEaseMusic', song_id)\n            for song_id in song_ids\n        ]\n        return self.playlist_result(entries, program_id, name, description)",
        "begin_line": 373,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.neteasemusic.NetEaseMusicDjRadioIE._real_extract#432",
        "src_path": "youtube_dl/extractor/neteasemusic.py",
        "class_name": "youtube_dl.extractor.neteasemusic.NetEaseMusicDjRadioIE",
        "signature": "youtube_dl.extractor.neteasemusic.NetEaseMusicDjRadioIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        dj_id = self._match_id(url)\n\n        name = None\n        desc = None\n        entries = []\n        for offset in compat_itertools_count(start=0, step=self._PAGE_SIZE):\n            info = self.query_api(\n                'dj/program/byradio?asc=false&limit=%d&radioId=%s&offset=%d'\n                % (self._PAGE_SIZE, dj_id, offset),\n                dj_id, 'Downloading dj programs - %d' % offset)\n\n            entries.extend([\n                self.url_result(\n                    'http://music.163.com/#/program?id=%s' % program['id'],\n                    'NetEaseMusicProgram', program['id'])\n                for program in info['programs']\n            ])\n\n            if name is None:\n                radio = info['programs'][0]['radio']\n                name = radio['name']\n                desc = radio['desc']\n\n            if not info['more']:\n                break\n\n        return self.playlist_result(entries, dj_id, name, desc)",
        "begin_line": 432,
        "end_line": 459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.francetv.GenerationQuoiIE._real_extract#315",
        "src_path": "youtube_dl/extractor/francetv.py",
        "class_name": "youtube_dl.extractor.francetv.GenerationQuoiIE",
        "signature": "youtube_dl.extractor.francetv.GenerationQuoiIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        info_url = compat_urlparse.urljoin(url, '/medias/video/%s.json' % display_id)\n        info_json = self._download_webpage(info_url, display_id)\n        info = json.loads(info_json)\n        return self.url_result('http://www.dailymotion.com/video/%s' % info['id'],\n                               ie='Dailymotion')",
        "begin_line": 315,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.francetv.CultureboxIE._real_extract#342",
        "src_path": "youtube_dl/extractor/francetv.py",
        "class_name": "youtube_dl.extractor.francetv.CultureboxIE",
        "signature": "youtube_dl.extractor.francetv.CultureboxIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('name')\n\n        webpage = self._download_webpage(url, name)\n\n        if \">Ce live n'est plus disponible en replay<\" in webpage:\n            raise ExtractorError('Video %s is not available' % name, expected=True)\n\n        video_id, catalogue = self._search_regex(\n            r'\"http://videos\\.francetv\\.fr/video/([^@]+@[^\"]+)\"', webpage, 'video id').split('@')\n\n        return self._extract_video(video_id, catalogue)",
        "begin_line": 342,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE.report_following_redirect#1082",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE.report_following_redirect(self, new_url)",
        "snippet": "    def report_following_redirect(self, new_url):\n        \"\"\"Report information extraction.\"\"\"\n        self._downloader.to_screen('[redirect] Following redirect to %s' % new_url)",
        "begin_line": 1082,
        "end_line": 1084,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010214504596527069,
            "pseudo_dstar_susp": 0.0011160714285714285,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0011160714285714285,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE._extract_rss#1086",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE._extract_rss(self, url, video_id, doc)",
        "snippet": "    def _extract_rss(self, url, video_id, doc):\n        playlist_title = doc.find('./channel/title').text\n        playlist_desc_el = doc.find('./channel/description')\n        playlist_desc = None if playlist_desc_el is None else playlist_desc_el.text\n\n        entries = []\n        for it in doc.findall('./channel/item'):\n            next_url = xpath_text(it, 'link', fatal=False)\n            if not next_url:\n                enclosure_nodes = it.findall('./enclosure')\n                for e in enclosure_nodes:\n                    next_url = e.attrib.get('url')\n                    if next_url:\n                        break\n\n            if not next_url:\n                continue\n\n            entries.append({\n                '_type': 'url',\n                'url': next_url,\n                'title': it.find('title').text,\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': url,\n            'title': playlist_title,\n            'description': playlist_desc,\n            'entries': entries,\n        }",
        "begin_line": 1086,
        "end_line": 1116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE._extract_camtasia#1118",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE._extract_camtasia(self, url, video_id, webpage)",
        "snippet": "    def _extract_camtasia(self, url, video_id, webpage):\n        \"\"\" Returns None if no camtasia video can be found. \"\"\"\n\n        camtasia_cfg = self._search_regex(\n            r'fo\\.addVariable\\(\\s*\"csConfigFile\",\\s*\"([^\"]+)\"\\s*\\);',\n            webpage, 'camtasia configuration file', default=None)\n        if camtasia_cfg is None:\n            return None\n\n        title = self._html_search_meta('DC.title', webpage, fatal=True)\n\n        camtasia_url = compat_urlparse.urljoin(url, camtasia_cfg)\n        camtasia_cfg = self._download_xml(\n            camtasia_url, video_id,\n            note='Downloading camtasia configuration',\n            errnote='Failed to download camtasia configuration')\n        fileset_node = camtasia_cfg.find('./playlist/array/fileset')\n\n        entries = []\n        for n in fileset_node.getchildren():\n            url_n = n.find('./uri')\n            if url_n is None:\n                continue\n\n            entries.append({\n                'id': os.path.splitext(url_n.text.rpartition('/')[2])[0],\n                'title': '%s - %s' % (title, n.tag),\n                'url': compat_urlparse.urljoin(url, url_n.text),\n                'duration': float_or_none(n.find('./duration').text),\n            })\n\n        return {\n            '_type': 'playlist',\n            'entries': entries,\n            'title': title,\n        }",
        "begin_line": 1118,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011135857461024498,
            "pseudo_dstar_susp": 0.0011547344110854503,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0011547344110854503,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE._real_extract#1155",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        if url.startswith('//'):\n            return {\n                '_type': 'url',\n                'url': self.http_scheme() + url,\n            }\n\n        parsed_url = compat_urlparse.urlparse(url)\n        if not parsed_url.scheme:\n            default_search = self._downloader.params.get('default_search')\n            if default_search is None:\n                default_search = 'fixup_error'\n\n            if default_search in ('auto', 'auto_warning', 'fixup_error'):\n                if '/' in url:\n                    self._downloader.report_warning('The url doesn\\'t specify the protocol, trying with http')\n                    return self.url_result('http://' + url)\n                elif default_search != 'fixup_error':\n                    if default_search == 'auto_warning':\n                        if re.match(r'^(?:url|URL)$', url):\n                            raise ExtractorError(\n                                'Invalid URL:  %r . Call youtube-dl like this:  youtube-dl -v \"https://www.youtube.com/watch?v=BaW_jenozKc\"  ' % url,\n                                expected=True)\n                        else:\n                            self._downloader.report_warning(\n                                'Falling back to youtube search for  %s . Set --default-search \"auto\" to suppress this warning.' % url)\n                    return self.url_result('ytsearch:' + url)\n\n            if default_search in ('error', 'fixup_error'):\n                raise ExtractorError(\n                    '%r is not a valid URL. '\n                    'Set --default-search \"ytsearch\" (or run  youtube-dl \"ytsearch:%s\" ) to search YouTube'\n                    % (url, url), expected=True)\n            else:\n                if ':' not in default_search:\n                    default_search += ':'\n                return self.url_result(default_search + url)\n\n        url, smuggled_data = unsmuggle_url(url)\n        force_videoid = None\n        is_intentional = smuggled_data and smuggled_data.get('to_generic')\n        if smuggled_data and 'force_videoid' in smuggled_data:\n            force_videoid = smuggled_data['force_videoid']\n            video_id = force_videoid\n        else:\n            video_id = compat_urllib_parse_unquote(os.path.splitext(url.rstrip('/').split('/')[-1])[0])\n\n        self.to_screen('%s: Requesting header' % video_id)\n\n        head_req = HEADRequest(url)\n        head_response = self._request_webpage(\n            head_req, video_id,\n            note=False, errnote='Could not send HEAD request to %s' % url,\n            fatal=False)\n\n        if head_response is not False:\n            # Check for redirect\n            new_url = head_response.geturl()\n            if url != new_url:\n                self.report_following_redirect(new_url)\n                if force_videoid:\n                    new_url = smuggle_url(\n                        new_url, {'force_videoid': force_videoid})\n                return self.url_result(new_url)\n\n        full_response = None\n        if head_response is False:\n            request = sanitized_Request(url)\n            request.add_header('Accept-Encoding', '*')\n            full_response = self._request_webpage(request, video_id)\n            head_response = full_response\n\n        # Check for direct link to a video\n        content_type = head_response.headers.get('Content-Type', '')\n        m = re.match(r'^(?P<type>audio|video|application(?=/ogg$))/(?P<format_id>.+)$', content_type)\n        if m:\n            upload_date = unified_strdate(\n                head_response.headers.get('Last-Modified'))\n            return {\n                'id': video_id,\n                'title': compat_urllib_parse_unquote(os.path.splitext(url_basename(url))[0]),\n                'direct': True,\n                'formats': [{\n                    'format_id': m.group('format_id'),\n                    'url': url,\n                    'vcodec': 'none' if m.group('type') == 'audio' else None\n                }],\n                'upload_date': upload_date,\n            }\n\n        if not self._downloader.params.get('test', False) and not is_intentional:\n            force = self._downloader.params.get('force_generic_extractor', False)\n            self._downloader.report_warning(\n                '%s on generic information extractor.' % ('Forcing' if force else 'Falling back'))\n\n        if not full_response:\n            request = sanitized_Request(url)\n            # Some webservers may serve compressed content of rather big size (e.g. gzipped flac)\n            # making it impossible to download only chunk of the file (yet we need only 512kB to\n            # test whether it's HTML or not). According to youtube-dl default Accept-Encoding\n            # that will always result in downloading the whole file that is not desirable.\n            # Therefore for extraction pass we have to override Accept-Encoding to any in order\n            # to accept raw bytes and being able to download only a chunk.\n            # It may probably better to solve this by checking Content-Type for application/octet-stream\n            # after HEAD request finishes, but not sure if we can rely on this.\n            request.add_header('Accept-Encoding', '*')\n            full_response = self._request_webpage(request, video_id)\n\n        # Maybe it's a direct link to a video?\n        # Be careful not to download the whole thing!\n        first_bytes = full_response.read(512)\n        if not is_html(first_bytes):\n            self._downloader.report_warning(\n                'URL could be a direct video link, returning it as such.')\n            upload_date = unified_strdate(\n                head_response.headers.get('Last-Modified'))\n            return {\n                'id': video_id,\n                'title': compat_urllib_parse_unquote(os.path.splitext(url_basename(url))[0]),\n                'direct': True,\n                'url': url,\n                'upload_date': upload_date,\n            }\n\n        webpage = self._webpage_read_content(\n            full_response, url, video_id, prefix=first_bytes)\n\n        self.report_extraction(video_id)\n\n        # Is it an RSS feed, a SMIL file or a XSPF playlist?\n        try:\n            doc = compat_etree_fromstring(webpage.encode('utf-8'))\n            if doc.tag == 'rss':\n                return self._extract_rss(url, video_id, doc)\n            elif re.match(r'^(?:{[^}]+})?smil$', doc.tag):\n                return self._parse_smil(doc, url, video_id)\n            elif doc.tag == '{http://xspf.org/ns/0/}playlist':\n                return self.playlist_result(self._parse_xspf(doc, video_id), video_id)\n        except compat_xml_parse_error:\n            pass\n\n        # Is it a Camtasia project?\n        camtasia_res = self._extract_camtasia(url, video_id, webpage)\n        if camtasia_res is not None:\n            return camtasia_res\n\n        # Sometimes embedded video player is hidden behind percent encoding\n        # (e.g. https://github.com/rg3/youtube-dl/issues/2448)\n        # Unescaping the whole page allows to handle those cases in a generic way\n        webpage = compat_urllib_parse_unquote(webpage)\n\n        # it's tempting to parse this further, but you would\n        # have to take into account all the variations like\n        #   Video Title - Site Name\n        #   Site Name | Video Title\n        #   Video Title - Tagline | Site Name\n        # and so on and so forth; it's just not practical\n        video_title = self._html_search_regex(\n            r'(?s)<title>(.*?)</title>', webpage, 'video title',\n            default='video')\n\n        # Try to detect age limit automatically\n        age_limit = self._rta_search(webpage)\n        # And then there are the jokers who advertise that they use RTA,\n        # but actually don't.\n        AGE_LIMIT_MARKERS = [\n            r'Proudly Labeled <a href=\"http://www.rtalabel.org/\" title=\"Restricted to Adults\">RTA</a>',\n        ]\n        if any(re.search(marker, webpage) for marker in AGE_LIMIT_MARKERS):\n            age_limit = 18\n\n        # video uploader is domain name\n        video_uploader = self._search_regex(\n            r'^(?:https?://)?([^/]*)/.*', url, 'video uploader')\n\n        # Helper method\n        def _playlist_from_matches(matches, getter=None, ie=None):\n            urlrs = orderedSet(\n                self.url_result(self._proto_relative_url(getter(m) if getter else m), ie)\n                for m in matches)\n            return self.playlist_result(\n                urlrs, playlist_id=video_id, playlist_title=video_title)\n\n        # Look for Brightcove Legacy Studio embeds\n        bc_urls = BrightcoveLegacyIE._extract_brightcove_urls(webpage)\n        if bc_urls:\n            self.to_screen('Brightcove video detected.')\n            entries = [{\n                '_type': 'url',\n                'url': smuggle_url(bc_url, {'Referer': url}),\n                'ie_key': 'BrightcoveLegacy'\n            } for bc_url in bc_urls]\n\n            return {\n                '_type': 'playlist',\n                'title': video_title,\n                'id': video_id,\n                'entries': entries,\n            }\n\n        # Look for Brightcove New Studio embeds\n        bc_urls = BrightcoveNewIE._extract_urls(webpage)\n        if bc_urls:\n            return _playlist_from_matches(bc_urls, ie='BrightcoveNew')\n\n        # Look for embedded rtl.nl player\n        matches = re.findall(\n            r'<iframe[^>]+?src=\"((?:https?:)?//(?:www\\.)?rtl\\.nl/system/videoplayer/[^\"]+(?:video_)?embed[^\"]+)\"',\n            webpage)\n        if matches:\n            return _playlist_from_matches(matches, ie='RtlNl')\n\n        vimeo_url = VimeoIE._extract_vimeo_url(url, webpage)\n        if vimeo_url is not None:\n            return self.url_result(vimeo_url)\n\n        vid_me_embed_url = self._search_regex(\n            r'src=[\\'\"](https?://vid\\.me/[^\\'\"]+)[\\'\"]',\n            webpage, 'vid.me embed', default=None)\n        if vid_me_embed_url is not None:\n            return self.url_result(vid_me_embed_url, 'Vidme')\n\n        # Look for embedded YouTube player\n        matches = re.findall(r'''(?x)\n            (?:\n                <iframe[^>]+?src=|\n                data-video-url=|\n                <embed[^>]+?src=|\n                embedSWF\\(?:\\s*|\n                new\\s+SWFObject\\(\n            )\n            ([\"\\'])\n                (?P<url>(?:https?:)?//(?:www\\.)?youtube(?:-nocookie)?\\.com/\n                (?:embed|v|p)/.+?)\n            \\1''', webpage)\n        if matches:\n            return _playlist_from_matches(\n                matches, lambda m: unescapeHTML(m[1]))\n\n        # Look for lazyYT YouTube embed\n        matches = re.findall(\n            r'class=\"lazyYT\" data-youtube-id=\"([^\"]+)\"', webpage)\n        if matches:\n            return _playlist_from_matches(matches, lambda m: unescapeHTML(m))\n\n        # Look for embedded Dailymotion player\n        matches = re.findall(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.com/embed/video/.+?)\\1', webpage)\n        if matches:\n            return _playlist_from_matches(\n                matches, lambda m: unescapeHTML(m[1]))\n\n        # Look for embedded Dailymotion playlist player (#3822)\n        m = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.[a-z]{2,3}/widget/jukebox\\?.+?)\\1', webpage)\n        if m:\n            playlists = re.findall(\n                r'list\\[\\]=/playlist/([^/]+)/', unescapeHTML(m.group('url')))\n            if playlists:\n                return _playlist_from_matches(\n                    playlists, lambda p: '//dailymotion.com/playlist/%s' % p)\n\n        # Look for embedded Wistia player\n        match = re.search(\n            r'<(?:meta[^>]+?content|iframe[^>]+?src)=([\"\\'])(?P<url>(?:https?:)?//(?:fast\\.)?wistia\\.net/embed/iframe/.+?)\\1', webpage)\n        if match:\n            embed_url = self._proto_relative_url(\n                unescapeHTML(match.group('url')))\n            return {\n                '_type': 'url_transparent',\n                'url': embed_url,\n                'ie_key': 'Wistia',\n                'uploader': video_uploader,\n                'title': video_title,\n                'id': video_id,\n            }\n\n        match = re.search(r'(?:id=[\"\\']wistia_|data-wistia-?id=[\"\\']|Wistia\\.embed\\([\"\\'])(?P<id>[^\"\\']+)', webpage)\n        if match:\n            return {\n                '_type': 'url_transparent',\n                'url': 'http://fast.wistia.net/embed/iframe/{0:}'.format(match.group('id')),\n                'ie_key': 'Wistia',\n                'uploader': video_uploader,\n                'title': video_title,\n                'id': match.group('id')\n            }\n\n        # Look for embedded blip.tv player\n        bliptv_url = BlipTVIE._extract_url(webpage)\n        if bliptv_url:\n            return self.url_result(bliptv_url, 'BlipTV')\n\n        # Look for SVT player\n        svt_url = SVTIE._extract_url(webpage)\n        if svt_url:\n            return self.url_result(svt_url, 'SVT')\n\n        # Look for embedded condenast player\n        matches = re.findall(\n            r'<iframe\\s+(?:[a-zA-Z-]+=\"[^\"]+\"\\s+)*?src=\"(https?://player\\.cnevids\\.com/embed/[^\"]+\")',\n            webpage)\n        if matches:\n            return {\n                '_type': 'playlist',\n                'entries': [{\n                    '_type': 'url',\n                    'ie_key': 'CondeNast',\n                    'url': ma,\n                } for ma in matches],\n                'title': video_title,\n                'id': video_id,\n            }\n\n        # Look for Bandcamp pages with custom domain\n        mobj = re.search(r'<meta property=\"og:url\"[^>]*?content=\"(.*?bandcamp\\.com.*?)\"', webpage)\n        if mobj is not None:\n            burl = unescapeHTML(mobj.group(1))\n            # Don't set the extractor because it can be a track url or an album\n            return self.url_result(burl)\n\n        # Look for embedded Vevo player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:cache\\.)?vevo\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded Viddler player\n        mobj = re.search(\n            r'<(?:iframe[^>]+?src|param[^>]+?value)=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?viddler\\.com/(?:embed|player)/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for NYTimes player\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//graphics8\\.nytimes\\.com/bcvideo/[^/]+/iframe/embed\\.html.+?)\\1>',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for Libsyn player\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//html5-player\\.libsyn\\.com/embed/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for Ooyala videos\n        mobj = (re.search(r'player\\.ooyala\\.com/[^\"?]+[?#][^\"]*?(?:embedCode|ec)=(?P<ec>[^\"&]+)', webpage) or\n                re.search(r'OO\\.Player\\.create\\([\\'\"].*?[\\'\"],\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage) or\n                re.search(r'SBN\\.VideoLinkset\\.ooyala\\([\\'\"](?P<ec>.{32})[\\'\"]\\)', webpage) or\n                re.search(r'data-ooyala-video-id\\s*=\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage))\n        if mobj is not None:\n            return OoyalaIE._build_url_result(smuggle_url(mobj.group('ec'), {'domain': url}))\n\n        # Look for multiple Ooyala embeds on SBN network websites\n        mobj = re.search(r'SBN\\.VideoLinkset\\.entryGroup\\((\\[.*?\\])', webpage)\n        if mobj is not None:\n            embeds = self._parse_json(mobj.group(1), video_id, fatal=False)\n            if embeds:\n                return _playlist_from_matches(\n                    embeds, getter=lambda v: OoyalaIE._url_for_embed_code(smuggle_url(v['provider_video_id'], {'domain': url})), ie='Ooyala')\n\n        # Look for Aparat videos\n        mobj = re.search(r'<iframe .*?src=\"(http://www\\.aparat\\.com/video/[^\"]+)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group(1), 'Aparat')\n\n        # Look for MPORA videos\n        mobj = re.search(r'<iframe .*?src=\"(http://mpora\\.(?:com|de)/videos/[^\"]+)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group(1), 'Mpora')\n\n        # Look for embedded NovaMov-based player\n        mobj = re.search(\n            r'''(?x)<(?:pagespeed_)?iframe[^>]+?src=([\"\\'])\n                    (?P<url>http://(?:(?:embed|www)\\.)?\n                        (?:novamov\\.com|\n                           nowvideo\\.(?:ch|sx|eu|at|ag|co)|\n                           videoweed\\.(?:es|com)|\n                           movshare\\.(?:net|sx|ag)|\n                           divxstage\\.(?:eu|net|ch|co|at|ag))\n                        /embed\\.php.+?)\\1''', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded Facebook player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https://www\\.facebook\\.com/video/embed.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Facebook')\n\n        # Look for embedded VK player\n        mobj = re.search(r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://vk\\.com/video_ext\\.php.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'VK')\n\n        # Look for embedded ivi player\n        mobj = re.search(r'<embed[^>]+?src=([\"\\'])(?P<url>https?://(?:www\\.)?ivi\\.ru/video/player.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Ivi')\n\n        # Look for embedded Huffington Post player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://embed\\.live\\.huffingtonpost\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'HuffPost')\n\n        # Look for embed.ly\n        mobj = re.search(r'class=[\"\\']embedly-card[\"\\'][^>]href=[\"\\'](?P<url>[^\"\\']+)', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n        mobj = re.search(r'class=[\"\\']embedly-embed[\"\\'][^>]src=[\"\\'][^\"\\']*url=(?P<url>[^&]+)', webpage)\n        if mobj is not None:\n            return self.url_result(compat_urllib_parse_unquote(mobj.group('url')))\n\n        # Look for funnyordie embed\n        matches = re.findall(r'<iframe[^>]+?src=\"(https?://(?:www\\.)?funnyordie\\.com/embed/[^\"]+)\"', webpage)\n        if matches:\n            return _playlist_from_matches(\n                matches, getter=unescapeHTML, ie='FunnyOrDie')\n\n        # Look for BBC iPlayer embed\n        matches = re.findall(r'setPlaylist\\(\"(https?://www\\.bbc\\.co\\.uk/iplayer/[^/]+/[\\da-z]{8})\"\\)', webpage)\n        if matches:\n            return _playlist_from_matches(matches, ie='BBCCoUk')\n\n        # Look for embedded RUTV player\n        rutv_url = RUTVIE._extract_url(webpage)\n        if rutv_url:\n            return self.url_result(rutv_url, 'RUTV')\n\n        # Look for embedded TVC player\n        tvc_url = TVCIE._extract_url(webpage)\n        if tvc_url:\n            return self.url_result(tvc_url, 'TVC')\n\n        # Look for embedded SportBox player\n        sportbox_urls = SportBoxEmbedIE._extract_urls(webpage)\n        if sportbox_urls:\n            return _playlist_from_matches(sportbox_urls, ie='SportBoxEmbed')\n\n        # Look for embedded PornHub player\n        pornhub_url = PornHubIE._extract_url(webpage)\n        if pornhub_url:\n            return self.url_result(pornhub_url, 'PornHub')\n\n        # Look for embedded XHamster player\n        xhamster_urls = XHamsterEmbedIE._extract_urls(webpage)\n        if xhamster_urls:\n            return _playlist_from_matches(xhamster_urls, ie='XHamsterEmbed')\n\n        # Look for embedded Tvigle player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//cloud\\.tvigle\\.ru/video/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Tvigle')\n\n        # Look for embedded TED player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://embed(?:-ssl)?\\.ted\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'TED')\n\n        # Look for embedded Ustream videos\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>http://www\\.ustream\\.tv/embed/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Ustream')\n\n        # Look for embedded arte.tv player\n        mobj = re.search(\n            r'<script [^>]*?src=\"(?P<url>http://www\\.arte\\.tv/playerv2/embed[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'ArteTVEmbed')\n\n        # Look for embedded francetv player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?://)?embed\\.francetv\\.fr/\\?ue=.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded smotri.com player\n        smotri_url = SmotriIE._extract_url(webpage)\n        if smotri_url:\n            return self.url_result(smotri_url, 'Smotri')\n\n        # Look for embedded Myvi.ru player\n        myvi_url = MyviIE._extract_url(webpage)\n        if myvi_url:\n            return self.url_result(myvi_url)\n\n        # Look for embeded soundcloud player\n        mobj = re.search(\n            r'<iframe\\s+(?:[a-zA-Z0-9_-]+=\"[^\"]+\"\\s+)*src=\"(?P<url>https?://(?:w\\.)?soundcloud\\.com/player[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            url = unescapeHTML(mobj.group('url'))\n            return self.url_result(url)\n\n        # Look for embedded vulture.com player\n        mobj = re.search(\n            r'<iframe src=\"(?P<url>https?://video\\.vulture\\.com/[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            url = unescapeHTML(mobj.group('url'))\n            return self.url_result(url, ie='Vulture')\n\n        # Look for embedded mtvservices player\n        mtvservices_url = MTVServicesEmbeddedIE._extract_url(webpage)\n        if mtvservices_url:\n            return self.url_result(mtvservices_url, ie='MTVServicesEmbedded')\n\n        # Look for embedded yahoo player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:screen|movies)\\.yahoo\\.com/.+?\\.html\\?format=embed)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Yahoo')\n\n        # Look for embedded sbs.com.au player\n        mobj = re.search(\n            r'''(?x)\n            (?:\n                <meta\\s+property=\"og:video\"\\s+content=|\n                <iframe[^>]+?src=\n            )\n            ([\"\\'])(?P<url>https?://(?:www\\.)?sbs\\.com\\.au/ondemand/video/.+?)\\1''',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'SBS')\n\n        # Look for embedded Cinchcast player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://player\\.cinchcast\\.com/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Cinchcast')\n\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://m(?:lb)?\\.mlb\\.com/shared/video/embed/embed\\.html\\?.+?)\\1',\n            webpage)\n        if not mobj:\n            mobj = re.search(\n                r'data-video-link=[\"\\'](?P<url>http://m.mlb.com/video/[^\"\\']+)',\n                webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'MLB')\n\n        mobj = re.search(\n            r'<(?:iframe|script)[^>]+?src=([\"\\'])(?P<url>%s)\\1' % CondeNastIE.EMBED_URL,\n            webpage)\n        if mobj is not None:\n            return self.url_result(self._proto_relative_url(mobj.group('url'), scheme='http:'), 'CondeNast')\n\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://new\\.livestream\\.com/[^\"]+/player[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Livestream')\n\n        # Look for Zapiks embed\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://(?:www\\.)?zapiks\\.fr/index\\.php\\?.+?)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Zapiks')\n\n        # Look for Kaltura embeds\n        mobj = (re.search(r\"(?s)kWidget\\.(?:thumb)?[Ee]mbed\\(\\{.*?'wid'\\s*:\\s*'_?(?P<partner_id>[^']+)',.*?'entry_?[Ii]d'\\s*:\\s*'(?P<id>[^']+)',\", webpage) or\n                re.search(r'(?s)(?P<q1>[\"\\'])(?:https?:)?//cdnapi(?:sec)?\\.kaltura\\.com/.*?(?:p|partner_id)/(?P<partner_id>\\d+).*?(?P=q1).*?entry_?[Ii]d\\s*:\\s*(?P<q2>[\"\\'])(?P<id>.+?)(?P=q2)', webpage))\n        if mobj is not None:\n            return self.url_result(smuggle_url(\n                'kaltura:%(partner_id)s:%(id)s' % mobj.groupdict(),\n                {'source_url': url}), 'Kaltura')\n\n        # Look for Eagle.Platform embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://.+?\\.media\\.eagleplatform\\.com/index/player\\?.+?)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'EaglePlatform')\n\n        # Look for ClipYou (uses Eagle.Platform) embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"https?://(?P<host>media\\.clipyou\\.ru)/index/player\\?.*\\brecord_id=(?P<id>\\d+).*\"', webpage)\n        if mobj is not None:\n            return self.url_result('eagleplatform:%(host)s:%(id)s' % mobj.groupdict(), 'EaglePlatform')\n\n        # Look for Pladform embeds\n        pladform_url = PladformIE._extract_url(webpage)\n        if pladform_url:\n            return self.url_result(pladform_url)\n\n        # Look for Playwire embeds\n        mobj = re.search(\n            r'<script[^>]+data-config=([\"\\'])(?P<url>(?:https?:)?//config\\.playwire\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for 5min embeds\n        mobj = re.search(\n            r'<meta[^>]+property=\"og:video\"[^>]+content=\"https?://embed\\.5min\\.com/(?P<id>[0-9]+)/?', webpage)\n        if mobj is not None:\n            return self.url_result('5min:%s' % mobj.group('id'), 'FiveMin')\n\n        # Look for Crooks and Liars embeds\n        mobj = re.search(\n            r'<(?:iframe[^>]+src|param[^>]+value)=([\"\\'])(?P<url>(?:https?:)?//embed\\.crooksandliars\\.com/(?:embed|v)/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for NBC Sports VPlayer embeds\n        nbc_sports_url = NBCSportsVPlayerIE._extract_url(webpage)\n        if nbc_sports_url:\n            return self.url_result(nbc_sports_url, 'NBCSportsVPlayer')\n\n        # Look for UDN embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>%s)\"' % UDNEmbedIE._PROTOCOL_RELATIVE_VALID_URL, webpage)\n        if mobj is not None:\n            return self.url_result(\n                compat_urlparse.urljoin(url, mobj.group('url')), 'UDNEmbed')\n\n        # Look for Senate ISVP iframe\n        senate_isvp_url = SenateISVPIE._search_iframe_url(webpage)\n        if senate_isvp_url:\n            return self.url_result(senate_isvp_url, 'SenateISVP')\n\n        # Look for Dailymotion Cloud videos\n        dmcloud_url = DailymotionCloudIE._extract_dmcloud_url(webpage)\n        if dmcloud_url:\n            return self.url_result(dmcloud_url, 'DailymotionCloud')\n\n        # Look for OnionStudios embeds\n        onionstudios_url = OnionStudiosIE._extract_url(webpage)\n        if onionstudios_url:\n            return self.url_result(onionstudios_url)\n\n        # Look for SnagFilms embeds\n        snagfilms_url = SnagFilmsEmbedIE._extract_url(webpage)\n        if snagfilms_url:\n            return self.url_result(snagfilms_url)\n\n        # Look for ScreenwaveMedia embeds\n        mobj = re.search(ScreenwaveMediaIE.EMBED_PATTERN, webpage)\n        if mobj is not None:\n            return self.url_result(unescapeHTML(mobj.group('url')), 'ScreenwaveMedia')\n\n        # Look for AdobeTVVideo embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=[\\'\"]((?:https?:)?//video\\.tv\\.adobe\\.com/v/\\d+[^\"]+)[\\'\"]',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group(1))),\n                'AdobeTVVideo')\n\n        def check_video(vurl):\n            if YoutubeIE.suitable(vurl):\n                return True\n            vpath = compat_urlparse.urlparse(vurl).path\n            vext = determine_ext(vpath)\n            return '.' in vpath and vext not in ('swf', 'png', 'jpg', 'srt', 'sbv', 'sub', 'vtt', 'ttml')\n\n        def filter_video(urls):\n            return list(filter(check_video, urls))\n\n        # Start with something easy: JW Player in SWFObject\n        found = filter_video(re.findall(r'flashvars: [\\'\"](?:.*&)?file=(http[^\\'\"&]*)', webpage))\n        if not found:\n            # Look for gorilla-vid style embedding\n            found = filter_video(re.findall(r'''(?sx)\n                (?:\n                    jw_plugins|\n                    JWPlayerOptions|\n                    jwplayer\\s*\\(\\s*[\"'][^'\"]+[\"']\\s*\\)\\s*\\.setup\n                )\n                .*?\n                ['\"]?file['\"]?\\s*:\\s*[\"\\'](.*?)[\"\\']''', webpage))\n        if not found:\n            # Broaden the search a little bit\n            found = filter_video(re.findall(r'[^A-Za-z0-9]?(?:file|source)=(http[^\\'\"&]*)', webpage))\n        if not found:\n            # Broaden the findall a little bit: JWPlayer JS loader\n            found = filter_video(re.findall(\n                r'[^A-Za-z0-9]?(?:file|video_url)[\"\\']?:\\s*[\"\\'](http(?![^\\'\"]+\\.[0-9]+[\\'\"])[^\\'\"]+)[\"\\']', webpage))\n        if not found:\n            # Flow player\n            found = filter_video(re.findall(r'''(?xs)\n                flowplayer\\(\"[^\"]+\",\\s*\n                    \\{[^}]+?\\}\\s*,\n                    \\s*\\{[^}]+? [\"']?clip[\"']?\\s*:\\s*\\{\\s*\n                        [\"']?url[\"']?\\s*:\\s*[\"']([^\"']+)[\"']\n            ''', webpage))\n        if not found:\n            # Cinerama player\n            found = re.findall(\n                r\"cinerama\\.embedPlayer\\(\\s*\\'[^']+\\',\\s*'([^']+)'\", webpage)\n        if not found:\n            # Try to find twitter cards info\n            found = filter_video(re.findall(\n                r'<meta (?:property|name)=\"twitter:player:stream\" (?:content|value)=\"(.+?)\"', webpage))\n        if not found:\n            # We look for Open Graph info:\n            # We have to match any number spaces between elements, some sites try to align them (eg.: statigr.am)\n            m_video_type = re.findall(r'<meta.*?property=\"og:video:type\".*?content=\"video/(.*?)\"', webpage)\n            # We only look in og:video if the MIME type is a video, don't try if it's a Flash player:\n            if m_video_type is not None:\n                found = filter_video(re.findall(r'<meta.*?property=\"og:video\".*?content=\"(.*?)\"', webpage))\n        if not found:\n            # HTML5 video\n            found = re.findall(r'(?s)<(?:video|audio)[^<]*(?:>.*?<source[^>]*)?\\s+src=[\"\\'](.*?)[\"\\']', webpage)\n        if not found:\n            REDIRECT_REGEX = r'[0-9]{,2};\\s*(?:URL|url)=\\'?([^\\'\"]+)'\n            found = re.search(\n                r'(?i)<meta\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\s+)*http-equiv=\"refresh\")'\n                r'(?:[a-z-]+=\"[^\"]+\"\\s+)*?content=\"%s' % REDIRECT_REGEX,\n                webpage)\n            if not found:\n                # Look also in Refresh HTTP header\n                refresh_header = head_response.headers.get('Refresh')\n                if refresh_header:\n                    # In python 2 response HTTP headers are bytestrings\n                    if sys.version_info < (3, 0) and isinstance(refresh_header, str):\n                        refresh_header = refresh_header.decode('iso-8859-1')\n                    found = re.search(REDIRECT_REGEX, refresh_header)\n            if found:\n                new_url = compat_urlparse.urljoin(url, unescapeHTML(found.group(1)))\n                self.report_following_redirect(new_url)\n                return {\n                    '_type': 'url',\n                    'url': new_url,\n                }\n        if not found:\n            raise UnsupportedError(url)\n\n        entries = []\n        for video_url in found:\n            video_url = video_url.replace('\\\\/', '/')\n            video_url = compat_urlparse.urljoin(url, video_url)\n            video_id = compat_urllib_parse_unquote(os.path.basename(video_url))\n\n            # Sometimes, jwplayer extraction will result in a YouTube URL\n            if YoutubeIE.suitable(video_url):\n                entries.append(self.url_result(video_url, 'Youtube'))\n                continue\n\n            # here's a fun little line of code for you:\n            video_id = os.path.splitext(video_id)[0]\n\n            entry_info_dict = {\n                'id': video_id,\n                'uploader': video_uploader,\n                'title': video_title,\n                'age_limit': age_limit,\n            }\n\n            ext = determine_ext(video_url)\n            if ext == 'smil':\n                entry_info_dict['formats'] = self._extract_smil_formats(video_url, video_id)\n            elif ext == 'xspf':\n                return self.playlist_result(self._extract_xspf_playlist(video_url, video_id), video_id)\n            elif ext == 'm3u8':\n                entry_info_dict['formats'] = self._extract_m3u8_formats(video_url, video_id, ext='mp4')\n            else:\n                entry_info_dict['url'] = video_url\n\n            entries.append(entry_info_dict)\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            for num, e in enumerate(entries, start=1):\n                # 'url' results don't have a title\n                if e.get('title') is not None:\n                    e['title'] = '%s (%d)' % (e['title'], num)\n            return {\n                '_type': 'playlist',\n                'entries': entries,\n            }",
        "begin_line": 1155,
        "end_line": 1935,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011976047904191617,
            "pseudo_dstar_susp": 0.0013333333333333333,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0013333333333333333,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE._playlist_from_matches#1331",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE._playlist_from_matches(matches, getter=None, ie=None)",
        "snippet": "        def _playlist_from_matches(matches, getter=None, ie=None):\n            urlrs = orderedSet(\n                self.url_result(self._proto_relative_url(getter(m) if getter else m), ie)\n                for m in matches)\n            return self.playlist_result(\n                urlrs, playlist_id=video_id, playlist_title=video_title)",
        "begin_line": 1331,
        "end_line": 1336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001122334455667789,
            "pseudo_dstar_susp": 0.001160092807424594,
            "pseudo_tarantula_susp": 0.000546448087431694,
            "pseudo_op2_susp": 0.001160092807424594,
            "pseudo_barinel_susp": 0.000546448087431694
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE.check_video#1813",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE.check_video(vurl)",
        "snippet": "        def check_video(vurl):\n            if YoutubeIE.suitable(vurl):\n                return True\n            vpath = compat_urlparse.urlparse(vurl).path\n            vext = determine_ext(vpath)\n            return '.' in vpath and vext not in ('swf', 'png', 'jpg', 'srt', 'sbv', 'sub', 'vtt', 'ttml')",
        "begin_line": 1813,
        "end_line": 1818,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008673026886383347,
            "pseudo_dstar_susp": 0.0009606147934678194,
            "pseudo_tarantula_susp": 0.0005524861878453039,
            "pseudo_op2_susp": 0.0009606147934678194,
            "pseudo_barinel_susp": 0.0005524861878453039
        }
    },
    {
        "name": "youtube_dl.extractor.generic.GenericIE.filter_video#1820",
        "src_path": "youtube_dl/extractor/generic.py",
        "class_name": "youtube_dl.extractor.generic.GenericIE",
        "signature": "youtube_dl.extractor.generic.GenericIE.filter_video(urls)",
        "snippet": "        def filter_video(urls):\n            return list(filter(check_video, urls))",
        "begin_line": 1820,
        "end_line": 1821,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008673026886383347,
            "pseudo_dstar_susp": 0.0009606147934678194,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0009606147934678194,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.downloader.http.HttpFD.real_download#20",
        "src_path": "youtube_dl/downloader/http.py",
        "class_name": "youtube_dl.downloader.http.HttpFD",
        "signature": "youtube_dl.downloader.http.HttpFD.real_download(self, filename, info_dict)",
        "snippet": "    def real_download(self, filename, info_dict):\n        url = info_dict['url']\n        tmpfilename = self.temp_name(filename)\n        stream = None\n\n        # Do not include the Accept-Encoding header\n        headers = {'Youtubedl-no-compression': 'True'}\n        add_headers = info_dict.get('http_headers')\n        if add_headers:\n            headers.update(add_headers)\n        basic_request = sanitized_Request(url, None, headers)\n        request = sanitized_Request(url, None, headers)\n\n        is_test = self.params.get('test', False)\n\n        if is_test:\n            request.add_header('Range', 'bytes=0-%s' % str(self._TEST_FILE_SIZE - 1))\n\n        # Establish possible resume length\n        if os.path.isfile(encodeFilename(tmpfilename)):\n            resume_len = os.path.getsize(encodeFilename(tmpfilename))\n        else:\n            resume_len = 0\n\n        open_mode = 'wb'\n        if resume_len != 0:\n            if self.params.get('continuedl', True):\n                self.report_resuming_byte(resume_len)\n                request.add_header('Range', 'bytes=%d-' % resume_len)\n                open_mode = 'ab'\n            else:\n                resume_len = 0\n\n        count = 0\n        retries = self.params.get('retries', 0)\n        while count <= retries:\n            # Establish connection\n            try:\n                data = self.ydl.urlopen(request)\n                # When trying to resume, Content-Range HTTP header of response has to be checked\n                # to match the value of requested Range HTTP header. This is due to a webservers\n                # that don't support resuming and serve a whole file with no Content-Range\n                # set in response despite of requested Range (see\n                # https://github.com/rg3/youtube-dl/issues/6057#issuecomment-126129799)\n                if resume_len > 0:\n                    content_range = data.headers.get('Content-Range')\n                    if content_range:\n                        content_range_m = re.search(r'bytes (\\d+)-', content_range)\n                        # Content-Range is present and matches requested Range, resume is possible\n                        if content_range_m and resume_len == int(content_range_m.group(1)):\n                            break\n                    # Content-Range is either not present or invalid. Assuming remote webserver is\n                    # trying to send the whole file, resume is not possible, so wiping the local file\n                    # and performing entire redownload\n                    self.report_unable_to_resume()\n                    resume_len = 0\n                    open_mode = 'wb'\n                break\n            except (compat_urllib_error.HTTPError, ) as err:\n                if (err.code < 500 or err.code >= 600) and err.code != 416:\n                    # Unexpected HTTP error\n                    raise\n                elif err.code == 416:\n                    # Unable to resume (requested range not satisfiable)\n                    try:\n                        # Open the connection again without the range header\n                        data = self.ydl.urlopen(basic_request)\n                        content_length = data.info()['Content-Length']\n                    except (compat_urllib_error.HTTPError, ) as err:\n                        if err.code < 500 or err.code >= 600:\n                            raise\n                    else:\n                        # Examine the reported length\n                        if (content_length is not None and\n                                (resume_len - 100 < int(content_length) < resume_len + 100)):\n                            # The file had already been fully downloaded.\n                            # Explanation to the above condition: in issue #175 it was revealed that\n                            # YouTube sometimes adds or removes a few bytes from the end of the file,\n                            # changing the file size slightly and causing problems for some users. So\n                            # I decided to implement a suggested change and consider the file\n                            # completely downloaded if the file size differs less than 100 bytes from\n                            # the one in the hard drive.\n                            self.report_file_already_downloaded(filename)\n                            self.try_rename(tmpfilename, filename)\n                            self._hook_progress({\n                                'filename': filename,\n                                'status': 'finished',\n                                'downloaded_bytes': resume_len,\n                                'total_bytes': resume_len,\n                            })\n                            return True\n                        else:\n                            # The length does not match, we start the download over\n                            self.report_unable_to_resume()\n                            resume_len = 0\n                            open_mode = 'wb'\n                            break\n            except socket.error as e:\n                if e.errno != errno.ECONNRESET:\n                    # Connection reset is no problem, just retry\n                    raise\n\n            # Retry\n            count += 1\n            if count <= retries:\n                self.report_retry(count, retries)\n\n        if count > retries:\n            self.report_error('giving up after %s retries' % retries)\n            return False\n\n        data_len = data.info().get('Content-length', None)\n\n        # Range HTTP header may be ignored/unsupported by a webserver\n        # (e.g. extractor/scivee.py, extractor/bambuser.py).\n        # However, for a test we still would like to download just a piece of a file.\n        # To achieve this we limit data_len to _TEST_FILE_SIZE and manually control\n        # block size when downloading a file.\n        if is_test and (data_len is None or int(data_len) > self._TEST_FILE_SIZE):\n            data_len = self._TEST_FILE_SIZE\n\n        if data_len is not None:\n            data_len = int(data_len) + resume_len\n            min_data_len = self.params.get(\"min_filesize\", None)\n            max_data_len = self.params.get(\"max_filesize\", None)\n            if min_data_len is not None and data_len < min_data_len:\n                self.to_screen('\\r[download] File is smaller than min-filesize (%s bytes < %s bytes). Aborting.' % (data_len, min_data_len))\n                return False\n            if max_data_len is not None and data_len > max_data_len:\n                self.to_screen('\\r[download] File is larger than max-filesize (%s bytes > %s bytes). Aborting.' % (data_len, max_data_len))\n                return False\n\n        byte_counter = 0 + resume_len\n        block_size = self.params.get('buffersize', 1024)\n        start = time.time()\n\n        # measure time over whole while-loop, so slow_down() and best_block_size() work together properly\n        now = None  # needed for slow_down() in the first loop run\n        before = start  # start measuring\n        while True:\n\n            # Download and write\n            data_block = data.read(block_size if not is_test else min(block_size, data_len - byte_counter))\n            byte_counter += len(data_block)\n\n            # exit loop when download is finished\n            if len(data_block) == 0:\n                break\n\n            # Open destination file just in time\n            if stream is None:\n                try:\n                    (stream, tmpfilename) = sanitize_open(tmpfilename, open_mode)\n                    assert stream is not None\n                    filename = self.undo_temp_name(tmpfilename)\n                    self.report_destination(filename)\n                except (OSError, IOError) as err:\n                    self.report_error('unable to open for writing: %s' % str(err))\n                    return False\n\n                if self.params.get('xattr_set_filesize', False) and data_len is not None:\n                    try:\n                        import xattr\n                        xattr.setxattr(tmpfilename, 'user.ytdl.filesize', str(data_len))\n                    except(OSError, IOError, ImportError) as err:\n                        self.report_error('unable to set filesize xattr: %s' % str(err))\n\n            try:\n                stream.write(data_block)\n            except (IOError, OSError) as err:\n                self.to_stderr('\\n')\n                self.report_error('unable to write data: %s' % str(err))\n                return False\n\n            # Apply rate limit\n            self.slow_down(start, now, byte_counter - resume_len)\n\n            # end measuring of one loop run\n            now = time.time()\n            after = now\n\n            # Adjust block size\n            if not self.params.get('noresizebuffer', False):\n                block_size = self.best_block_size(after - before, len(data_block))\n\n            before = after\n\n            # Progress message\n            speed = self.calc_speed(start, now, byte_counter - resume_len)\n            if data_len is None:\n                eta = None\n            else:\n                eta = self.calc_eta(start, time.time(), data_len - resume_len, byte_counter - resume_len)\n\n            self._hook_progress({\n                'status': 'downloading',\n                'downloaded_bytes': byte_counter,\n                'total_bytes': data_len,\n                'tmpfilename': tmpfilename,\n                'filename': filename,\n                'eta': eta,\n                'speed': speed,\n                'elapsed': now - start,\n            })\n\n            if is_test and byte_counter == data_len:\n                break\n\n        if stream is None:\n            self.to_stderr('\\n')\n            self.report_error('Did not get any data blocks')\n            return False\n        if tmpfilename != '-':\n            stream.close()\n\n        if data_len is not None and byte_counter != data_len:\n            raise ContentTooShortError(byte_counter, int(data_len))\n        self.try_rename(tmpfilename, filename)\n\n        # Update file modification time\n        if self.params.get('updatetime', True):\n            info_dict['filetime'] = self.try_utime(filename, data.info().get('last-modified', None))\n\n        self._hook_progress({\n            'downloaded_bytes': byte_counter,\n            'total_bytes': byte_counter,\n            'filename': filename,\n            'status': 'finished',\n            'elapsed': time.time() - start,\n        })\n\n        return True",
        "begin_line": 20,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003389830508474576,
            "pseudo_dstar_susp": 0.0034482758620689655,
            "pseudo_tarantula_susp": 0.0009514747859181732,
            "pseudo_op2_susp": 0.0034482758620689655,
            "pseudo_barinel_susp": 0.0009514747859181732
        }
    },
    {
        "name": "youtube_dl.extractor.__init__.gen_extractors#871",
        "src_path": "youtube_dl/extractor/__init__.py",
        "class_name": "youtube_dl.extractor.__init__",
        "signature": "youtube_dl.extractor.__init__.gen_extractors()",
        "snippet": "def gen_extractors():\n    \"\"\" Return a list of an instance of every supported extractor.\n    The order does matter; the first extractor matched is the one handling the URL.\n    \"\"\"\n    return [klass() for klass in _ALL_CLASSES]",
        "begin_line": 871,
        "end_line": 875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006138735420503376,
            "pseudo_dstar_susp": 0.0006385696040868455,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0006385696040868455,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.extractor.__init__.get_info_extractor#889",
        "src_path": "youtube_dl/extractor/__init__.py",
        "class_name": "youtube_dl.extractor.__init__",
        "signature": "youtube_dl.extractor.__init__.get_info_extractor(ie_name)",
        "snippet": "def get_info_extractor(ie_name):\n    \"\"\"Returns the info extractor class with the given ie_name\"\"\"\n    return globals()[ie_name + 'IE']",
        "begin_line": 889,
        "end_line": 891,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006622516556291391,
            "pseudo_dstar_susp": 0.047619047619047616,
            "pseudo_tarantula_susp": 0.0010787486515641855,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.0010787486515641855
        }
    },
    {
        "name": "youtube_dl.cache.Cache.__init__#16",
        "src_path": "youtube_dl/cache.py",
        "class_name": "youtube_dl.cache.Cache",
        "signature": "youtube_dl.cache.Cache.__init__(self, ydl)",
        "snippet": "    def __init__(self, ydl):\n        self._ydl = ydl",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.029411764705882353,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0012547051442910915,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0012547051442910915
        }
    },
    {
        "name": "youtube_dl.cache.Cache.enabled#34",
        "src_path": "youtube_dl/cache.py",
        "class_name": "youtube_dl.cache.Cache",
        "signature": "youtube_dl.cache.Cache.enabled(self)",
        "snippet": "    def enabled(self):\n        return self._ydl.params.get('cachedir') is not False",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.cache.Cache.store#37",
        "src_path": "youtube_dl/cache.py",
        "class_name": "youtube_dl.cache.Cache",
        "signature": "youtube_dl.cache.Cache.store(self, section, key, data, dtype='json')",
        "snippet": "    def store(self, section, key, data, dtype='json'):\n        assert dtype in ('json',)\n\n        if not self.enabled:\n            return\n\n        fn = self._get_cache_fn(section, key, dtype)\n        try:\n            try:\n                os.makedirs(os.path.dirname(fn))\n            except OSError as ose:\n                if ose.errno != errno.EEXIST:\n                    raise\n            write_json_file(data, fn)\n        except Exception:\n            tb = traceback.format_exc()\n            self._ydl.report_warning(\n                'Writing cache to %r failed: %s' % (fn, tb))",
        "begin_line": 37,
        "end_line": 54,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.cache.Cache.load#56",
        "src_path": "youtube_dl/cache.py",
        "class_name": "youtube_dl.cache.Cache",
        "signature": "youtube_dl.cache.Cache.load(self, section, key, dtype='json', default=None)",
        "snippet": "    def load(self, section, key, dtype='json', default=None):\n        assert dtype in ('json',)\n\n        if not self.enabled:\n            return default\n\n        cache_fn = self._get_cache_fn(section, key, dtype)\n        try:\n            try:\n                with io.open(cache_fn, 'r', encoding='utf-8') as cachef:\n                    return json.load(cachef)\n            except ValueError:\n                try:\n                    file_size = os.path.getsize(cache_fn)\n                except (OSError, IOError) as oe:\n                    file_size = str(oe)\n                self._ydl.report_warning(\n                    'Cache retrieval from %s failed (%s)' % (cache_fn, file_size))\n        except IOError:\n            pass  # No cache available\n\n        return default",
        "begin_line": 56,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.cache.Cache.remove#79",
        "src_path": "youtube_dl/cache.py",
        "class_name": "youtube_dl.cache.Cache",
        "signature": "youtube_dl.cache.Cache.remove(self)",
        "snippet": "    def remove(self):\n        if not self.enabled:\n            self._ydl.to_screen('Cache is disabled (Did you combine --no-cache-dir and --rm-cache-dir?)')\n            return\n\n        cachedir = self._get_root_dir()\n        if not any((term in cachedir) for term in ('cache', 'tmp')):\n            raise Exception('Not removing directory %s - this does not look like a cache dir' % cachedir)\n\n        self._ydl.to_screen(\n            'Removing cache dir %s .' % cachedir, skip_eol=True)\n        if os.path.exists(cachedir):\n            self._ydl.to_screen('.', skip_eol=True)\n            shutil.rmtree(cachedir)\n        self._ydl.to_screen('.')",
        "begin_line": 79,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.atttechchannel.ATTTechChannelIE._real_extract#26",
        "src_path": "youtube_dl/extractor/atttechchannel.py",
        "class_name": "youtube_dl.extractor.atttechchannel.ATTTechChannelIE",
        "signature": "youtube_dl.extractor.atttechchannel.ATTTechChannelIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r\"url\\s*:\\s*'(rtmp://[^']+)'\",\n            webpage, 'video URL')\n\n        video_id = self._search_regex(\n            r'mediaid\\s*=\\s*(\\d+)',\n            webpage, 'video id', fatal=False)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'[Rr]elease\\s+date:\\s*(\\d{1,2}/\\d{1,2}/\\d{4})',\n            webpage, 'upload date', fatal=False), False)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'ext': 'flv',\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n        }",
        "begin_line": 26,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002932551319648094,
            "pseudo_dstar_susp": 0.0028653295128939827,
            "pseudo_tarantula_susp": 0.0009124087591240876,
            "pseudo_op2_susp": 0.0028653295128939827,
            "pseudo_barinel_susp": 0.0009124087591240876
        }
    },
    {
        "name": "youtube_dl.extractor.ard.ARDMediathekIE._real_extract#145",
        "src_path": "youtube_dl/extractor/ard.py",
        "class_name": "youtube_dl.extractor.ard.ARDMediathekIE",
        "signature": "youtube_dl.extractor.ard.ARDMediathekIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        # determine video id from url\n        m = re.match(self._VALID_URL, url)\n\n        numid = re.search(r'documentId=([0-9]+)', url)\n        if numid:\n            video_id = numid.group(1)\n        else:\n            video_id = m.group('video_id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>Der gew\u00fcnschte Beitrag ist nicht mehr verf\u00fcgbar.<' in webpage:\n            raise ExtractorError('Video %s is no longer available' % video_id, expected=True)\n\n        if 'Diese Sendung ist f\u00fcr Jugendliche unter 12 Jahren nicht geeignet. Der Clip ist deshalb nur von 20 bis 6 Uhr verf\u00fcgbar.' in webpage:\n            raise ExtractorError('This program is only suitable for those aged 12 and older. Video %s is therefore only available between 20 pm and 6 am.' % video_id, expected=True)\n\n        if re.search(r'[\\?&]rss($|[=&])', url):\n            doc = compat_etree_fromstring(webpage.encode('utf-8'))\n            if doc.tag == 'rss':\n                return GenericIE()._extract_rss(url, video_id, doc)\n\n        title = self._html_search_regex(\n            [r'<h1(?:\\s+class=\"boxTopHeadline\")?>(.*?)</h1>',\n             r'<meta name=\"dcterms.title\" content=\"(.*?)\"/>',\n             r'<h4 class=\"headline\">(.*?)</h4>'],\n            webpage, 'title')\n        description = self._html_search_meta(\n            'dcterms.abstract', webpage, 'description', default=None)\n        if description is None:\n            description = self._html_search_meta(\n                'description', webpage, 'meta description')\n\n        # Thumbnail is sometimes not present.\n        # It is in the mobile version, but that seems to use a different URL\n        # structure altogether.\n        thumbnail = self._og_search_thumbnail(webpage, default=None)\n\n        media_streams = re.findall(r'''(?x)\n            mediaCollection\\.addMediaStream\\([0-9]+,\\s*[0-9]+,\\s*\"[^\"]*\",\\s*\n            \"([^\"]+)\"''', webpage)\n\n        if media_streams:\n            QUALITIES = qualities(['lo', 'hi', 'hq'])\n            formats = []\n            for furl in set(media_streams):\n                if furl.endswith('.f4m'):\n                    fid = 'f4m'\n                else:\n                    fid_m = re.match(r'.*\\.([^.]+)\\.[^.]+$', furl)\n                    fid = fid_m.group(1) if fid_m else None\n                formats.append({\n                    'quality': QUALITIES(fid),\n                    'format_id': fid,\n                    'url': furl,\n                })\n            self._sort_formats(formats)\n            info = {\n                'formats': formats,\n            }\n        else:  # request JSON file\n            info = self._extract_media_info(\n                'http://www.ardmediathek.de/play/media/%s' % video_id, webpage, video_id)\n\n        info.update({\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        })\n\n        return info",
        "begin_line": 145,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003215434083601286,
            "pseudo_dstar_susp": 0.003246753246753247,
            "pseudo_tarantula_susp": 0.000877963125548727,
            "pseudo_op2_susp": 0.003246753246753247,
            "pseudo_barinel_susp": 0.000877963125548727
        }
    },
    {
        "name": "youtube_dl.extractor.ard.ARDIE._real_extract#236",
        "src_path": "youtube_dl/extractor/ard.py",
        "class_name": "youtube_dl.extractor.ard.ARDIE",
        "signature": "youtube_dl.extractor.ard.ARDIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n\n        player_url = mobj.group('mainurl') + '~playerXml.xml'\n        doc = self._download_xml(player_url, display_id)\n        video_node = doc.find('./video')\n        upload_date = unified_strdate(xpath_text(\n            video_node, './broadcastDate'))\n        thumbnail = xpath_text(video_node, './/teaserImage//variant/url')\n\n        formats = []\n        for a in video_node.findall('.//asset'):\n            f = {\n                'format_id': a.attrib['type'],\n                'width': int_or_none(a.find('./frameWidth').text),\n                'height': int_or_none(a.find('./frameHeight').text),\n                'vbr': int_or_none(a.find('./bitrateVideo').text),\n                'abr': int_or_none(a.find('./bitrateAudio').text),\n                'vcodec': a.find('./codecVideo').text,\n                'tbr': int_or_none(a.find('./totalBitrate').text),\n            }\n            if a.find('./serverPrefix').text:\n                f['url'] = a.find('./serverPrefix').text\n                f['playpath'] = a.find('./fileName').text\n            else:\n                f['url'] = a.find('./fileName').text\n            formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': mobj.group('id'),\n            'formats': formats,\n            'display_id': display_id,\n            'title': video_node.find('./title').text,\n            'duration': parse_duration(video_node.find('./duration').text),\n            'upload_date': upload_date,\n            'thumbnail': thumbnail,\n        }",
        "begin_line": 236,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022988505747126436,
            "pseudo_dstar_susp": 0.0023923444976076554,
            "pseudo_tarantula_susp": 0.0010183299389002036,
            "pseudo_op2_susp": 0.0023923444976076554,
            "pseudo_barinel_susp": 0.0010183299389002036
        }
    },
    {
        "name": "youtube_dl.downloader.rtmp.rtmpdump_version#18",
        "src_path": "youtube_dl/downloader/rtmp.py",
        "class_name": "youtube_dl.downloader.rtmp",
        "signature": "youtube_dl.downloader.rtmp.rtmpdump_version()",
        "snippet": "def rtmpdump_version():\n    return get_exe_version(\n        'rtmpdump', ['--help'], r'(?i)RTMPDump\\s*v?([0-9a-zA-Z._-]+)')",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.svt.SVTIE._extract_url#68",
        "src_path": "youtube_dl/extractor/svt.py",
        "class_name": "youtube_dl.extractor.svt.SVTIE",
        "signature": "youtube_dl.extractor.svt.SVTIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        mobj = re.search(\n            r'(?:<iframe src|href)=\"(?P<url>%s[^\"]*)\"' % SVTIE._VALID_URL, webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 68,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._set_language#57",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor",
        "signature": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._set_language(self)",
        "snippet": "    def _set_language(self):\n        self._set_cookie(\n            '.youtube.com', 'PREF', 'f1=50000000&hl=en',\n            # YouTube sets the expire time to about two months\n            expire_time=time.time() + 2 * 30 * 24 * 3600)",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008605851979345956,
            "pseudo_dstar_susp": 0.0008525149190110827,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008525149190110827,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._ids_to_results#63",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor",
        "signature": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._ids_to_results(self, ids)",
        "snippet": "    def _ids_to_results(self, ids):\n        return [\n            self.url_result(vid_id, 'Youtube', video_id=vid_id)\n            for vid_id in ids]",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._login#68",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor",
        "signature": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._login(self)",
        "snippet": "    def _login(self):\n        \"\"\"\n        Attempt to log in to YouTube.\n        True is returned if successful or skipped.\n        False is returned if login failed.\n\n        If _LOGIN_REQUIRED is set and no authentication was provided, an error is raised.\n        \"\"\"\n        (username, password) = self._get_login_info()\n        # No authentication to be performed\n        if username is None:\n            if self._LOGIN_REQUIRED:\n                raise ExtractorError('No login info available, needed for using %s.' % self.IE_NAME, expected=True)\n            return True\n\n        login_page = self._download_webpage(\n            self._LOGIN_URL, None,\n            note='Downloading login page',\n            errnote='unable to fetch login page', fatal=False)\n        if login_page is False:\n            return\n\n        galx = self._search_regex(r'(?s)<input.+?name=\"GALX\".+?value=\"(.+?)\"',\n                                  login_page, 'Login GALX parameter')\n\n        # Log in\n        login_form_strs = {\n            'continue': 'https://www.youtube.com/signin?action_handle_signin=true&feature=sign_in_button&hl=en_US&nomobiletemp=1',\n            'Email': username,\n            'GALX': galx,\n            'Passwd': password,\n\n            'PersistentCookie': 'yes',\n            '_utf8': '\u9731',\n            'bgresponse': 'js_disabled',\n            'checkConnection': '',\n            'checkedDomains': 'youtube',\n            'dnConn': '',\n            'pstMsg': '0',\n            'rmShown': '1',\n            'secTok': '',\n            'signIn': 'Sign in',\n            'timeStmp': '',\n            'service': 'youtube',\n            'uilel': '3',\n            'hl': 'en_US',\n        }\n\n        login_data = compat_urllib_parse.urlencode(encode_dict(login_form_strs)).encode('ascii')\n\n        req = sanitized_Request(self._LOGIN_URL, login_data)\n        login_results = self._download_webpage(\n            req, None,\n            note='Logging in', errnote='unable to log in', fatal=False)\n        if login_results is False:\n            return False\n\n        if re.search(r'id=\"errormsg_0_Passwd\"', login_results) is not None:\n            raise ExtractorError('Please use your account password and a two-factor code instead of an application-specific password.', expected=True)\n\n        # Two-Factor\n        # TODO add SMS and phone call support - these require making a request and then prompting the user\n\n        if re.search(r'(?i)<form[^>]* id=\"challenge\"', login_results) is not None:\n            tfa_code = self._get_tfa_info('2-step verification code')\n\n            if not tfa_code:\n                self._downloader.report_warning(\n                    'Two-factor authentication required. Provide it either interactively or with --twofactor <code>'\n                    '(Note that only TOTP (Google Authenticator App) codes work at this time.)')\n                return False\n\n            tfa_code = remove_start(tfa_code, 'G-')\n\n            tfa_form_strs = self._form_hidden_inputs('challenge', login_results)\n\n            tfa_form_strs.update({\n                'Pin': tfa_code,\n                'TrustDevice': 'on',\n            })\n\n            tfa_data = compat_urllib_parse.urlencode(encode_dict(tfa_form_strs)).encode('ascii')\n\n            tfa_req = sanitized_Request(self._TWOFACTOR_URL, tfa_data)\n            tfa_results = self._download_webpage(\n                tfa_req, None,\n                note='Submitting TFA code', errnote='unable to submit tfa', fatal=False)\n\n            if tfa_results is False:\n                return False\n\n            if re.search(r'(?i)<form[^>]* id=\"challenge\"', tfa_results) is not None:\n                self._downloader.report_warning('Two-factor code expired or invalid. Please try again, or use a one-use backup code instead.')\n                return False\n            if re.search(r'(?i)<form[^>]* id=\"gaia_loginform\"', tfa_results) is not None:\n                self._downloader.report_warning('unable to log in - did the page structure change?')\n                return False\n            if re.search(r'smsauth-interstitial-reviewsettings', tfa_results) is not None:\n                self._downloader.report_warning('Your Google account has a security notice. Please log in on your web browser, resolve the notice, and try again.')\n                return False\n\n        if re.search(r'(?i)<form[^>]* id=\"gaia_loginform\"', login_results) is not None:\n            self._downloader.report_warning('unable to log in: bad username or password')\n            return False\n        return True",
        "begin_line": 68,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011325028312570782,
            "pseudo_dstar_susp": 0.0009191176470588235,
            "pseudo_tarantula_susp": 0.002398081534772182,
            "pseudo_op2_susp": 0.0009191176470588235,
            "pseudo_barinel_susp": 0.002398081534772182
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._real_initialize#174",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor",
        "signature": "youtube_dl.extractor.youtube.YoutubeBaseInfoExtractor._real_initialize(self)",
        "snippet": "    def _real_initialize(self):\n        if self._downloader is None:\n            return\n        self._set_language()\n        if not self._login():\n            return",
        "begin_line": 174,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000784313725490196,
            "pseudo_dstar_susp": 0.0008032128514056225,
            "pseudo_tarantula_susp": 0.0010660980810234541,
            "pseudo_op2_susp": 0.0008032128514056225,
            "pseudo_barinel_susp": 0.0010660980810234541
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeIE.__init__#751",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeIE.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(YoutubeIE, self).__init__(*args, **kwargs)\n        self._player_cache = {}",
        "begin_line": 751,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006666666666666667,
            "pseudo_dstar_susp": 0.007874015748031496,
            "pseudo_tarantula_susp": 0.0011976047904191617,
            "pseudo_op2_susp": 0.007874015748031496,
            "pseudo_barinel_susp": 0.0011976047904191617
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeIE._parse_sig_js#860",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeIE._parse_sig_js(self, jscode)",
        "snippet": "    def _parse_sig_js(self, jscode):\n        funcname = self._search_regex(\n            r'\\.sig\\|\\|([a-zA-Z0-9$]+)\\(', jscode,\n            'Initial JS player signature function name')\n\n        jsi = JSInterpreter(jscode)\n        initial_function = jsi.extract_function(funcname)\n        return lambda s: initial_function([s])",
        "begin_line": 860,
        "end_line": 867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeIE._get_ytplayer_config#932",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeIE._get_ytplayer_config(self, video_id, webpage)",
        "snippet": "    def _get_ytplayer_config(self, video_id, webpage):\n        patterns = (\n            # User data may contain arbitrary character sequences that may affect\n            # JSON extraction with regex, e.g. when '};' is contained the second\n            # regex won't capture the whole JSON. Yet working around by trying more\n            # concrete regex first keeping in mind proper quoted string handling\n            # to be implemented in future that will replace this workaround (see\n            # https://github.com/rg3/youtube-dl/issues/7468,\n            # https://github.com/rg3/youtube-dl/pull/7599)\n            r';ytplayer\\.config\\s*=\\s*({.+?});ytplayer',\n            r';ytplayer\\.config\\s*=\\s*({.+?});',\n        )\n        config = self._search_regex(\n            patterns, webpage, 'ytplayer.config', default=None)\n        if config:\n            return self._parse_json(\n                uppercase_escape(config), video_id, fatal=False)",
        "begin_line": 932,
        "end_line": 948,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008264462809917355,
            "pseudo_dstar_susp": 0.0008163265306122449,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008163265306122449,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeIE.extract_id#1003",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeIE.extract_id(cls, url)",
        "snippet": "    def extract_id(cls, url):\n        mobj = re.match(cls._VALID_URL, url, re.VERBOSE)\n        if mobj is None:\n            raise ExtractorError('Invalid URL: %s' % url)\n        video_id = mobj.group(2)\n        return video_id",
        "begin_line": 1003,
        "end_line": 1008,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008077544426494346,
            "pseudo_dstar_susp": 0.0008058017727639,
            "pseudo_tarantula_susp": 0.001524390243902439,
            "pseudo_op2_susp": 0.0008058017727639,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeIE._real_extract#1096",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        proto = (\n            'http' if self._downloader.params.get('prefer_insecure', False)\n            else 'https')\n\n        start_time = None\n        end_time = None\n        parsed_url = compat_urllib_parse_urlparse(url)\n        for component in [parsed_url.fragment, parsed_url.query]:\n            query = compat_parse_qs(component)\n            if start_time is None and 't' in query:\n                start_time = parse_duration(query['t'][0])\n            if start_time is None and 'start' in query:\n                start_time = parse_duration(query['start'][0])\n            if end_time is None and 'end' in query:\n                end_time = parse_duration(query['end'][0])\n\n        # Extract original video URL from URL with redirection, like age verification, using next_url parameter\n        mobj = re.search(self._NEXT_URL_RE, url)\n        if mobj:\n            url = proto + '://www.youtube.com/' + compat_urllib_parse_unquote(mobj.group(1)).lstrip('/')\n        video_id = self.extract_id(url)\n\n        # Get video webpage\n        url = proto + '://www.youtube.com/watch?v=%s&gl=US&hl=en&has_verified=1&bpctr=9999999999' % video_id\n        video_webpage = self._download_webpage(url, video_id)\n\n        # Attempt to extract SWF player URL\n        mobj = re.search(r'swfConfig.*?\"(https?:\\\\/\\\\/.*?watch.*?-.*?\\.swf)\"', video_webpage)\n        if mobj is not None:\n            player_url = re.sub(r'\\\\(.)', r'\\1', mobj.group(1))\n        else:\n            player_url = None\n\n        dash_mpds = []\n\n        def add_dash_mpd(video_info):\n            dash_mpd = video_info.get('dashmpd')\n            if dash_mpd and dash_mpd[0] not in dash_mpds:\n                dash_mpds.append(dash_mpd[0])\n\n        # Get video info\n        embed_webpage = None\n        is_live = None\n        if re.search(r'player-age-gate-content\">', video_webpage) is not None:\n            age_gate = True\n            # We simulate the access to the video from www.youtube.com/v/{video_id}\n            # this can be viewed without login into Youtube\n            url = proto + '://www.youtube.com/embed/%s' % video_id\n            embed_webpage = self._download_webpage(url, video_id, 'Downloading embed webpage')\n            data = compat_urllib_parse.urlencode({\n                'video_id': video_id,\n                'eurl': 'https://youtube.googleapis.com/v/' + video_id,\n                'sts': self._search_regex(\n                    r'\"sts\"\\s*:\\s*(\\d+)', embed_webpage, 'sts', default=''),\n            })\n            video_info_url = proto + '://www.youtube.com/get_video_info?' + data\n            video_info_webpage = self._download_webpage(\n                video_info_url, video_id,\n                note='Refetching age-gated info webpage',\n                errnote='unable to download video info webpage')\n            video_info = compat_parse_qs(video_info_webpage)\n            add_dash_mpd(video_info)\n        else:\n            age_gate = False\n            video_info = None\n            # Try looking directly into the video webpage\n            ytplayer_config = self._get_ytplayer_config(video_id, video_webpage)\n            if ytplayer_config:\n                args = ytplayer_config['args']\n                if args.get('url_encoded_fmt_stream_map'):\n                    # Convert to the same format returned by compat_parse_qs\n                    video_info = dict((k, [v]) for k, v in args.items())\n                    add_dash_mpd(video_info)\n                if args.get('livestream') == '1' or args.get('live_playback') == 1:\n                    is_live = True\n            if not video_info or self._downloader.params.get('youtube_include_dash_manifest', True):\n                # We also try looking in get_video_info since it may contain different dashmpd\n                # URL that points to a DASH manifest with possibly different itag set (some itags\n                # are missing from DASH manifest pointed by webpage's dashmpd, some - from DASH\n                # manifest pointed by get_video_info's dashmpd).\n                # The general idea is to take a union of itags of both DASH manifests (for example\n                # video with such 'manifest behavior' see https://github.com/rg3/youtube-dl/issues/6093)\n                self.report_video_info_webpage_download(video_id)\n                for el_type in ['&el=info', '&el=embedded', '&el=detailpage', '&el=vevo', '']:\n                    video_info_url = (\n                        '%s://www.youtube.com/get_video_info?&video_id=%s%s&ps=default&eurl=&gl=US&hl=en'\n                        % (proto, video_id, el_type))\n                    video_info_webpage = self._download_webpage(\n                        video_info_url,\n                        video_id, note=False,\n                        errnote='unable to download video info webpage')\n                    get_video_info = compat_parse_qs(video_info_webpage)\n                    if get_video_info.get('use_cipher_signature') != ['True']:\n                        add_dash_mpd(get_video_info)\n                    if not video_info:\n                        video_info = get_video_info\n                    if 'token' in get_video_info:\n                        # Different get_video_info requests may report different results, e.g.\n                        # some may report video unavailability, but some may serve it without\n                        # any complaint (see https://github.com/rg3/youtube-dl/issues/7362,\n                        # the original webpage as well as el=info and el=embedded get_video_info\n                        # requests report video unavailability due to geo restriction while\n                        # el=detailpage succeeds and returns valid data). This is probably\n                        # due to YouTube measures against IP ranges of hosting providers.\n                        # Working around by preferring the first succeeded video_info containing\n                        # the token if no such video_info yet was found.\n                        if 'token' not in video_info:\n                            video_info = get_video_info\n                        break\n        if 'token' not in video_info:\n            if 'reason' in video_info:\n                if 'The uploader has not made this video available in your country.' in video_info['reason']:\n                    regions_allowed = self._html_search_meta('regionsAllowed', video_webpage, default=None)\n                    if regions_allowed:\n                        raise ExtractorError('YouTube said: This video is available in %s only' % (\n                            ', '.join(map(ISO3166Utils.short2full, regions_allowed.split(',')))),\n                            expected=True)\n                raise ExtractorError(\n                    'YouTube said: %s' % video_info['reason'][0],\n                    expected=True, video_id=video_id)\n            else:\n                raise ExtractorError(\n                    '\"token\" parameter not in video info for unknown reason',\n                    video_id=video_id)\n\n        # title\n        if 'title' in video_info:\n            video_title = video_info['title'][0]\n        else:\n            self._downloader.report_warning('Unable to extract video title')\n            video_title = '_'\n\n        # description\n        video_description = get_element_by_id(\"eow-description\", video_webpage)\n        if video_description:\n            video_description = re.sub(r'''(?x)\n                <a\\s+\n                    (?:[a-zA-Z-]+=\"[^\"]+\"\\s+)*?\n                    title=\"([^\"]+)\"\\s+\n                    (?:[a-zA-Z-]+=\"[^\"]+\"\\s+)*?\n                    class=\"yt-uix-redirect-link\"\\s*>\n                [^<]+\n                </a>\n            ''', r'\\1', video_description)\n            video_description = clean_html(video_description)\n        else:\n            fd_mobj = re.search(r'<meta name=\"description\" content=\"([^\"]+)\"', video_webpage)\n            if fd_mobj:\n                video_description = unescapeHTML(fd_mobj.group(1))\n            else:\n                video_description = ''\n\n        if 'multifeed_metadata_list' in video_info and not smuggled_data.get('force_singlefeed', False):\n            if not self._downloader.params.get('noplaylist'):\n                entries = []\n                feed_ids = []\n                multifeed_metadata_list = compat_urllib_parse_unquote_plus(video_info['multifeed_metadata_list'][0])\n                for feed in multifeed_metadata_list.split(','):\n                    feed_data = compat_parse_qs(feed)\n                    entries.append({\n                        '_type': 'url_transparent',\n                        'ie_key': 'Youtube',\n                        'url': smuggle_url(\n                            '%s://www.youtube.com/watch?v=%s' % (proto, feed_data['id'][0]),\n                            {'force_singlefeed': True}),\n                        'title': '%s (%s)' % (video_title, feed_data['title'][0]),\n                    })\n                    feed_ids.append(feed_data['id'][0])\n                self.to_screen(\n                    'Downloading multifeed video (%s) - add --no-playlist to just download video %s'\n                    % (', '.join(feed_ids), video_id))\n                return self.playlist_result(entries, video_id, video_title, video_description)\n            self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n\n        if 'view_count' in video_info:\n            view_count = int(video_info['view_count'][0])\n        else:\n            view_count = None\n\n        # Check for \"rental\" videos\n        if 'ypc_video_rental_bar_text' in video_info and 'author' not in video_info:\n            raise ExtractorError('\"rental\" videos not supported')\n\n        # Start extracting information\n        self.report_information_extraction(video_id)\n\n        # uploader\n        if 'author' not in video_info:\n            raise ExtractorError('Unable to extract uploader name')\n        video_uploader = compat_urllib_parse_unquote_plus(video_info['author'][0])\n\n        # uploader_id\n        video_uploader_id = None\n        mobj = re.search(r'<link itemprop=\"url\" href=\"http://www.youtube.com/(?:user|channel)/([^\"]+)\">', video_webpage)\n        if mobj is not None:\n            video_uploader_id = mobj.group(1)\n        else:\n            self._downloader.report_warning('unable to extract uploader nickname')\n\n        # thumbnail image\n        # We try first to get a high quality image:\n        m_thumb = re.search(r'<span itemprop=\"thumbnail\".*?href=\"(.*?)\">',\n                            video_webpage, re.DOTALL)\n        if m_thumb is not None:\n            video_thumbnail = m_thumb.group(1)\n        elif 'thumbnail_url' not in video_info:\n            self._downloader.report_warning('unable to extract video thumbnail')\n            video_thumbnail = None\n        else:   # don't panic if we can't find it\n            video_thumbnail = compat_urllib_parse_unquote_plus(video_info['thumbnail_url'][0])\n\n        # upload date\n        upload_date = self._html_search_meta(\n            'datePublished', video_webpage, 'upload date', default=None)\n        if not upload_date:\n            upload_date = self._search_regex(\n                [r'(?s)id=\"eow-date.*?>(.*?)</span>',\n                 r'id=\"watch-uploader-info\".*?>.*?(?:Published|Uploaded|Streamed live|Started) on (.+?)</strong>'],\n                video_webpage, 'upload date', default=None)\n            if upload_date:\n                upload_date = ' '.join(re.sub(r'[/,-]', r' ', mobj.group(1)).split())\n        upload_date = unified_strdate(upload_date)\n\n        m_music = re.search(\n            r'<h4[^>]+class=\"title\"[^>]*>\\s*Music\\s*</h4>\\s*<ul[^>]*>\\s*<li>(?P<title>.+?) by (?P<creator>.+?)(?:\\(.+?\\))?</li',\n            video_webpage)\n        if m_music:\n            video_alt_title = remove_quotes(unescapeHTML(m_music.group('title')))\n            video_creator = clean_html(m_music.group('creator'))\n        else:\n            video_alt_title = video_creator = None\n\n        m_cat_container = self._search_regex(\n            r'(?s)<h4[^>]*>\\s*Category\\s*</h4>\\s*<ul[^>]*>(.*?)</ul>',\n            video_webpage, 'categories', default=None)\n        if m_cat_container:\n            category = self._html_search_regex(\n                r'(?s)<a[^<]+>(.*?)</a>', m_cat_container, 'category',\n                default=None)\n            video_categories = None if category is None else [category]\n        else:\n            video_categories = None\n\n        video_tags = [\n            unescapeHTML(m.group('content'))\n            for m in re.finditer(self._meta_regex('og:video:tag'), video_webpage)]\n\n        def _extract_count(count_name):\n            return str_to_int(self._search_regex(\n                r'-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\d,]+)</span>'\n                % re.escape(count_name),\n                video_webpage, count_name, default=None))\n\n        like_count = _extract_count('like')\n        dislike_count = _extract_count('dislike')\n\n        # subtitles\n        video_subtitles = self.extract_subtitles(video_id, video_webpage)\n        automatic_captions = self.extract_automatic_captions(video_id, video_webpage)\n\n        if 'length_seconds' not in video_info:\n            self._downloader.report_warning('unable to extract video duration')\n            video_duration = None\n        else:\n            video_duration = int(compat_urllib_parse_unquote_plus(video_info['length_seconds'][0]))\n\n        # annotations\n        video_annotations = None\n        if self._downloader.params.get('writeannotations', False):\n            video_annotations = self._extract_annotations(video_id)\n\n        def _map_to_format_list(urlmap):\n            formats = []\n            for itag, video_real_url in urlmap.items():\n                dct = {\n                    'format_id': itag,\n                    'url': video_real_url,\n                    'player_url': player_url,\n                }\n                if itag in self._formats:\n                    dct.update(self._formats[itag])\n                formats.append(dct)\n            return formats\n\n        if 'conn' in video_info and video_info['conn'][0].startswith('rtmp'):\n            self.report_rtmp_download()\n            formats = [{\n                'format_id': '_rtmp',\n                'protocol': 'rtmp',\n                'url': video_info['conn'][0],\n                'player_url': player_url,\n            }]\n        elif len(video_info.get('url_encoded_fmt_stream_map', [''])[0]) >= 1 or len(video_info.get('adaptive_fmts', [''])[0]) >= 1:\n            encoded_url_map = video_info.get('url_encoded_fmt_stream_map', [''])[0] + ',' + video_info.get('adaptive_fmts', [''])[0]\n            if 'rtmpe%3Dyes' in encoded_url_map:\n                raise ExtractorError('rtmpe downloads are not supported, see https://github.com/rg3/youtube-dl/issues/343 for more information.', expected=True)\n            formats = []\n            for url_data_str in encoded_url_map.split(','):\n                url_data = compat_parse_qs(url_data_str)\n                if 'itag' not in url_data or 'url' not in url_data:\n                    continue\n                format_id = url_data['itag'][0]\n                url = url_data['url'][0]\n\n                if 'sig' in url_data:\n                    url += '&signature=' + url_data['sig'][0]\n                elif 's' in url_data:\n                    encrypted_sig = url_data['s'][0]\n                    ASSETS_RE = r'\"assets\":.+?\"js\":\\s*(\"[^\"]+\")'\n\n                    jsplayer_url_json = self._search_regex(\n                        ASSETS_RE,\n                        embed_webpage if age_gate else video_webpage,\n                        'JS player URL (1)', default=None)\n                    if not jsplayer_url_json and not age_gate:\n                        # We need the embed website after all\n                        if embed_webpage is None:\n                            embed_url = proto + '://www.youtube.com/embed/%s' % video_id\n                            embed_webpage = self._download_webpage(\n                                embed_url, video_id, 'Downloading embed webpage')\n                        jsplayer_url_json = self._search_regex(\n                            ASSETS_RE, embed_webpage, 'JS player URL')\n\n                    player_url = json.loads(jsplayer_url_json)\n                    if player_url is None:\n                        player_url_json = self._search_regex(\n                            r'ytplayer\\.config.*?\"url\"\\s*:\\s*(\"[^\"]+\")',\n                            video_webpage, 'age gate player URL')\n                        player_url = json.loads(player_url_json)\n\n                    if self._downloader.params.get('verbose'):\n                        if player_url is None:\n                            player_version = 'unknown'\n                            player_desc = 'unknown'\n                        else:\n                            if player_url.endswith('swf'):\n                                player_version = self._search_regex(\n                                    r'-(.+?)(?:/watch_as3)?\\.swf$', player_url,\n                                    'flash player', fatal=False)\n                                player_desc = 'flash player %s' % player_version\n                            else:\n                                player_version = self._search_regex(\n                                    [r'html5player-([^/]+?)(?:/html5player(?:-new)?)?\\.js', r'(?:www|player)-([^/]+)/base\\.js'],\n                                    player_url,\n                                    'html5 player', fatal=False)\n                                player_desc = 'html5 player %s' % player_version\n\n                        parts_sizes = self._signature_cache_id(encrypted_sig)\n                        self.to_screen('{%s} signature length %s, %s' %\n                                       (format_id, parts_sizes, player_desc))\n\n                    signature = self._decrypt_signature(\n                        encrypted_sig, video_id, player_url, age_gate)\n                    url += '&signature=' + signature\n                if 'ratebypass' not in url:\n                    url += '&ratebypass=yes'\n\n                # Some itags are not included in DASH manifest thus corresponding formats will\n                # lack metadata (see https://github.com/rg3/youtube-dl/pull/5993).\n                # Trying to extract metadata from url_encoded_fmt_stream_map entry.\n                mobj = re.search(r'^(?P<width>\\d+)[xX](?P<height>\\d+)$', url_data.get('size', [''])[0])\n                width, height = (int(mobj.group('width')), int(mobj.group('height'))) if mobj else (None, None)\n                dct = {\n                    'format_id': format_id,\n                    'url': url,\n                    'player_url': player_url,\n                    'filesize': int_or_none(url_data.get('clen', [None])[0]),\n                    'tbr': float_or_none(url_data.get('bitrate', [None])[0], 1000),\n                    'width': width,\n                    'height': height,\n                    'fps': int_or_none(url_data.get('fps', [None])[0]),\n                    'format_note': url_data.get('quality_label', [None])[0] or url_data.get('quality', [None])[0],\n                }\n                type_ = url_data.get('type', [None])[0]\n                if type_:\n                    type_split = type_.split(';')\n                    kind_ext = type_split[0].split('/')\n                    if len(kind_ext) == 2:\n                        kind, ext = kind_ext\n                        dct['ext'] = ext\n                        if kind in ('audio', 'video'):\n                            codecs = None\n                            for mobj in re.finditer(\n                                    r'(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\']?)(?P<val>.+?)(?P=quote)(?:;|$)', type_):\n                                if mobj.group('key') == 'codecs':\n                                    codecs = mobj.group('val')\n                                    break\n                            if codecs:\n                                codecs = codecs.split(',')\n                                if len(codecs) == 2:\n                                    acodec, vcodec = codecs[0], codecs[1]\n                                else:\n                                    acodec, vcodec = (codecs[0], 'none') if kind == 'audio' else ('none', codecs[0])\n                                dct.update({\n                                    'acodec': acodec,\n                                    'vcodec': vcodec,\n                                })\n                if format_id in self._formats:\n                    dct.update(self._formats[format_id])\n                formats.append(dct)\n        elif video_info.get('hlsvp'):\n            manifest_url = video_info['hlsvp'][0]\n            url_map = self._extract_from_m3u8(manifest_url, video_id)\n            formats = _map_to_format_list(url_map)\n            # Accept-Encoding header causes failures in live streams on Youtube and Youtube Gaming\n            for a_format in formats:\n                a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = 'True'\n        else:\n            raise ExtractorError('no conn, hlsvp or url_encoded_fmt_stream_map information found in video info')\n\n        # Look for the DASH manifest\n        if self._downloader.params.get('youtube_include_dash_manifest', True):\n            dash_mpd_fatal = True\n            for dash_manifest_url in dash_mpds:\n                dash_formats = {}\n                try:\n                    for df in self._parse_dash_manifest(\n                            video_id, dash_manifest_url, player_url, age_gate, dash_mpd_fatal):\n                        # Do not overwrite DASH format found in some previous DASH manifest\n                        if df['format_id'] not in dash_formats:\n                            dash_formats[df['format_id']] = df\n                        # Additional DASH manifests may end up in HTTP Error 403 therefore\n                        # allow them to fail without bug report message if we already have\n                        # some DASH manifest succeeded. This is temporary workaround to reduce\n                        # burst of bug reports until we figure out the reason and whether it\n                        # can be fixed at all.\n                        dash_mpd_fatal = False\n                except (ExtractorError, KeyError) as e:\n                    self.report_warning(\n                        'Skipping DASH manifest: %r' % e, video_id)\n                if dash_formats:\n                    # Remove the formats we found through non-DASH, they\n                    # contain less info and it can be wrong, because we use\n                    # fixed values (for example the resolution). See\n                    # https://github.com/rg3/youtube-dl/issues/5774 for an\n                    # example.\n                    formats = [f for f in formats if f['format_id'] not in dash_formats.keys()]\n                    formats.extend(dash_formats.values())\n\n        # Check for malformed aspect ratio\n        stretched_m = re.search(\n            r'<meta\\s+property=\"og:video:tag\".*?content=\"yt:stretch=(?P<w>[0-9]+):(?P<h>[0-9]+)\">',\n            video_webpage)\n        if stretched_m:\n            w = float(stretched_m.group('w'))\n            h = float(stretched_m.group('h'))\n            # yt:stretch may hold invalid ratio data (e.g. for Q39EVAstoRM ratio is 17:0).\n            # We will only process correct ratios.\n            if w > 0 and h > 0:\n                ratio = w / h\n                for f in formats:\n                    if f.get('vcodec') != 'none':\n                        f['stretched_ratio'] = ratio\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'uploader': video_uploader,\n            'uploader_id': video_uploader_id,\n            'upload_date': upload_date,\n            'creator': video_creator,\n            'title': video_title,\n            'alt_title': video_alt_title,\n            'thumbnail': video_thumbnail,\n            'description': video_description,\n            'categories': video_categories,\n            'tags': video_tags,\n            'subtitles': video_subtitles,\n            'automatic_captions': automatic_captions,\n            'duration': video_duration,\n            'age_limit': 18 if age_gate else 0,\n            'annotations': video_annotations,\n            'webpage_url': proto + '://www.youtube.com/watch?v=%s' % video_id,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'average_rating': float_or_none(video_info.get('avg_rating', [None])[0]),\n            'formats': formats,\n            'is_live': is_live,\n            'start_time': start_time,\n            'end_time': end_time,\n        }",
        "begin_line": 1096,
        "end_line": 1581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016420361247947454,
            "pseudo_dstar_susp": 0.0012953367875647669,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0012953367875647669,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeIE.add_dash_mpd#1134",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeIE.add_dash_mpd(video_info)",
        "snippet": "        def add_dash_mpd(video_info):\n            dash_mpd = video_info.get('dashmpd')\n            if dash_mpd and dash_mpd[0] not in dash_mpds:\n                dash_mpds.append(dash_mpd[0])",
        "begin_line": 1134,
        "end_line": 1137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007874015748031496,
            "pseudo_dstar_susp": 0.0007656967840735069,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0007656967840735069,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubePlaylistIE._real_initialize#1678",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubePlaylistIE",
        "signature": "youtube_dl.extractor.youtube.YoutubePlaylistIE._real_initialize(self)",
        "snippet": "    def _real_initialize(self):\n        self._login()",
        "begin_line": 1678,
        "end_line": 1679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012468827930174563,
            "pseudo_dstar_susp": 0.0010649627263045794,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0010649627263045794,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubePlaylistIE._extract_mix#1681",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubePlaylistIE",
        "signature": "youtube_dl.extractor.youtube.YoutubePlaylistIE._extract_mix(self, playlist_id)",
        "snippet": "    def _extract_mix(self, playlist_id):\n        # The mixes are generated from a single video\n        # the id of the playlist is just 'RD' + video_id\n        url = 'https://youtube.com/watch?v=%s&list=%s' % (playlist_id[-11:], playlist_id)\n        webpage = self._download_webpage(\n            url, playlist_id, 'Downloading Youtube mix')\n        search_title = lambda class_name: get_element_by_attribute('class', class_name, webpage)\n        title_span = (\n            search_title('playlist-title') or\n            search_title('title long-title') or\n            search_title('title'))\n        title = clean_html(title_span)\n        ids = orderedSet(re.findall(\n            r'''(?xs)data-video-username=\".*?\".*?\n                       href=\"/watch\\?v=([0-9A-Za-z_-]{11})&amp;[^\"]*?list=%s''' % re.escape(playlist_id),\n            webpage))\n        url_results = self._ids_to_results(ids)\n\n        return self.playlist_result(url_results, playlist_id, title)",
        "begin_line": 1681,
        "end_line": 1699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubePlaylistIE._extract_playlist#1701",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubePlaylistIE",
        "signature": "youtube_dl.extractor.youtube.YoutubePlaylistIE._extract_playlist(self, playlist_id)",
        "snippet": "    def _extract_playlist(self, playlist_id):\n        url = self._TEMPLATE_URL % playlist_id\n        page = self._download_webpage(url, playlist_id)\n\n        for match in re.findall(r'<div class=\"yt-alert-message\">([^<]+)</div>', page):\n            match = match.strip()\n            # Check if the playlist exists or is private\n            if re.match(r'[^<]*(The|This) playlist (does not exist|is private)[^<]*', match):\n                raise ExtractorError(\n                    'The playlist doesn\\'t exist or is private, use --username or '\n                    '--netrc to access it.',\n                    expected=True)\n            elif re.match(r'[^<]*Invalid parameters[^<]*', match):\n                raise ExtractorError(\n                    'Invalid parameters. Maybe URL is incorrect.',\n                    expected=True)\n            elif re.match(r'[^<]*Choose your language[^<]*', match):\n                continue\n            else:\n                self.report_warning('Youtube gives an alert message: ' + match)\n\n        playlist_title = self._html_search_regex(\n            r'(?s)<h1 class=\"pl-header-title[^\"]*\"[^>]*>\\s*(.*?)\\s*</h1>',\n            page, 'title')\n\n        return self.playlist_result(self._entries(page, playlist_id), playlist_id, playlist_title)",
        "begin_line": 1701,
        "end_line": 1726,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012437810945273632,
            "pseudo_dstar_susp": 0.0010351966873706005,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0010351966873706005,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubePlaylistIE._real_extract#1728",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubePlaylistIE",
        "signature": "youtube_dl.extractor.youtube.YoutubePlaylistIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        # Extract playlist id\n        mobj = re.match(self._VALID_URL, url)\n        if mobj is None:\n            raise ExtractorError('Invalid URL: %s' % url)\n        playlist_id = mobj.group(1) or mobj.group(2)\n\n        # Check if it's a video-specific URL\n        query_dict = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        if 'v' in query_dict:\n            video_id = query_dict['v'][0]\n            if self._downloader.params.get('noplaylist'):\n                self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n                return self.url_result(video_id, 'Youtube', video_id=video_id)\n            else:\n                self.to_screen('Downloading playlist %s - add --no-playlist to just download video %s' % (playlist_id, video_id))\n\n        if playlist_id.startswith('RD') or playlist_id.startswith('UL'):\n            # Mixes require a custom extraction process\n            return self._extract_mix(playlist_id)\n\n        return self._extract_playlist(playlist_id)",
        "begin_line": 1728,
        "end_line": 1749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012468827930174563,
            "pseudo_dstar_susp": 0.0010649627263045794,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0010649627263045794,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeChannelIE._real_extract#1777",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeChannelIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeChannelIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n\n        url = self._TEMPLATE_URL % channel_id\n\n        # Channel by page listing is restricted to 35 pages of 30 items, i.e. 1050 videos total (see #5778)\n        # Workaround by extracting as a playlist if managed to obtain channel playlist URL\n        # otherwise fallback on channel by page extraction\n        channel_page = self._download_webpage(\n            url + '?view=57', channel_id,\n            'Downloading channel page', fatal=False)\n        if channel_page is False:\n            channel_playlist_id = False\n        else:\n            channel_playlist_id = self._html_search_meta(\n                'channelId', channel_page, 'channel id', default=None)\n            if not channel_playlist_id:\n                channel_playlist_id = self._search_regex(\n                    r'data-(?:channel-external-|yt)id=\"([^\"]+)\"',\n                    channel_page, 'channel id', default=None)\n        if channel_playlist_id and channel_playlist_id.startswith('UC'):\n            playlist_id = 'UU' + channel_playlist_id[2:]\n            return self.url_result(\n                compat_urlparse.urljoin(url, '/playlist?list=%s' % playlist_id), 'YoutubePlaylist')\n\n        channel_page = self._download_webpage(url, channel_id, 'Downloading page #1')\n        autogenerated = re.search(r'''(?x)\n                class=\"[^\"]*?(?:\n                    channel-header-autogenerated-label|\n                    yt-channel-title-autogenerated\n                )[^\"]*\"''', channel_page) is not None\n\n        if autogenerated:\n            # The videos are contained in a single page\n            # the ajax pages can't be used, they are empty\n            entries = [\n                self.url_result(\n                    video_id, 'Youtube', video_id=video_id,\n                    video_title=video_title)\n                for video_id, video_title in self.extract_videos_from_page(channel_page)]\n            return self.playlist_result(entries, channel_id)\n\n        return self.playlist_result(self._entries(channel_page, channel_id), channel_id)",
        "begin_line": 1777,
        "end_line": 1819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008130081300813008,
            "pseudo_dstar_susp": 0.0008058017727639,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0008058017727639,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeUserIE.suitable#1840",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeUserIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeUserIE.suitable(cls, url)",
        "snippet": "    def suitable(cls, url):\n        # Don't return True if the url can be extracted with other youtube\n        # extractor, the regex would is too permissive and it would match.\n        other_ies = iter(klass for (name, klass) in globals().items() if name.endswith('IE') and klass is not cls)\n        if any(ie.suitable(url) for ie in other_ies):\n            return False\n        else:\n            return super(YoutubeUserIE, cls).suitable(url)",
        "begin_line": 1840,
        "end_line": 1847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001201923076923077,
            "pseudo_dstar_susp": 0.0013404825737265416,
            "pseudo_tarantula_susp": 0.0005032712632108706,
            "pseudo_op2_susp": 0.0013404825737265416,
            "pseudo_barinel_susp": 0.0005032712632108706
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeSearchURLIE._real_extract#1937",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeSearchURLIE",
        "signature": "youtube_dl.extractor.youtube.YoutubeSearchURLIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        query = compat_urllib_parse_unquote_plus(mobj.group('query'))\n\n        webpage = self._download_webpage(url, query)\n        result_code = self._search_regex(\n            r'(?s)<ol[^>]+class=\"item-section\"(.*?)</ol>', webpage, 'result HTML')\n\n        part_codes = re.findall(\n            r'(?s)<h3[^>]+class=\"[^\"]*yt-lockup-title[^\"]*\"[^>]*>(.*?)</h3>', result_code)\n        entries = []\n        for part_code in part_codes:\n            part_title = self._html_search_regex(\n                [r'(?s)title=\"([^\"]+)\"', r'>([^<]+)</a>'], part_code, 'item title', fatal=False)\n            part_url_snippet = self._html_search_regex(\n                r'(?s)href=\"([^\"]+)\"', part_code, 'item URL')\n            part_url = compat_urlparse.urljoin(\n                'https://www.youtube.com/', part_url_snippet)\n            entries.append({\n                '_type': 'url',\n                'url': part_url,\n                'title': part_title,\n            })\n\n        return {\n            '_type': 'playlist',\n            'entries': entries,\n            'title': query,\n        }",
        "begin_line": 1937,
        "end_line": 1965,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.youtube.YoutubeFeedsInfoExtractor.IE_NAME#1995",
        "src_path": "youtube_dl/extractor/youtube.py",
        "class_name": "youtube_dl.extractor.youtube.YoutubeFeedsInfoExtractor",
        "signature": "youtube_dl.extractor.youtube.YoutubeFeedsInfoExtractor.IE_NAME(self)",
        "snippet": "    def IE_NAME(self):\n        return 'youtube:%s' % self._FEED_NAME",
        "begin_line": 1995,
        "end_line": 1996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.000315955766192733,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.dailymotion.DailymotionBaseInfoExtractor._build_request#24",
        "src_path": "youtube_dl/extractor/dailymotion.py",
        "class_name": "youtube_dl.extractor.dailymotion.DailymotionBaseInfoExtractor",
        "signature": "youtube_dl.extractor.dailymotion.DailymotionBaseInfoExtractor._build_request(url)",
        "snippet": "    def _build_request(url):\n        \"\"\"Build a request with the family filter disabled\"\"\"\n        request = sanitized_Request(url)\n        request.add_header('Cookie', 'family_filter=off; ff=off')\n        return request",
        "begin_line": 24,
        "end_line": 28,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006024096385542169,
            "pseudo_dstar_susp": 0.0005920663114268798,
            "pseudo_tarantula_susp": 0.0009950248756218905,
            "pseudo_op2_susp": 0.0005920663114268798,
            "pseudo_barinel_susp": 0.0009950248756218905
        }
    },
    {
        "name": "youtube_dl.extractor.dailymotion.DailymotionBaseInfoExtractor._download_webpage_no_ff#34",
        "src_path": "youtube_dl/extractor/dailymotion.py",
        "class_name": "youtube_dl.extractor.dailymotion.DailymotionBaseInfoExtractor",
        "signature": "youtube_dl.extractor.dailymotion.DailymotionBaseInfoExtractor._download_webpage_no_ff(self, url, *args, **kwargs)",
        "snippet": "    def _download_webpage_no_ff(self, url, *args, **kwargs):\n        request = self._build_request(url)\n        return self._download_webpage(request, *args, **kwargs)",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007674597083653108,
            "pseudo_dstar_susp": 0.00078003120124805,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.00078003120124805,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "youtube_dl.extractor.dailymotion.DailymotionIE._real_extract#110",
        "src_path": "youtube_dl/extractor/dailymotion.py",
        "class_name": "youtube_dl.extractor.dailymotion.DailymotionIE",
        "signature": "youtube_dl.extractor.dailymotion.DailymotionIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage_no_ff(\n            'https://www.dailymotion.com/video/%s' % video_id, video_id)\n\n        age_limit = self._rta_search(webpage)\n\n        description = self._og_search_description(webpage) or self._html_search_meta(\n            'description', webpage, 'description')\n\n        view_count = str_to_int(self._search_regex(\n            [r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:(\\d+)\"',\n             r'video_views_count[^>]+>\\s+([\\d\\.,]+)'],\n            webpage, 'view count', fatal=False))\n        comment_count = int_or_none(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserComments:(\\d+)\"',\n            webpage, 'comment count', fatal=False))\n\n        player_v5 = self._search_regex(\n            [r'buildPlayer\\(({.+?})\\);\\n',  # See https://github.com/rg3/youtube-dl/issues/7826\n             r'playerV5\\s*=\\s*dmp\\.create\\([^,]+?,\\s*({.+?})\\);',\n             r'buildPlayer\\(({.+?})\\);'],\n            webpage, 'player v5', default=None)\n        if player_v5:\n            player = self._parse_json(player_v5, video_id)\n            metadata = player['metadata']\n\n            self._check_error(metadata)\n\n            formats = []\n            for quality, media_list in metadata['qualities'].items():\n                for media in media_list:\n                    media_url = media.get('url')\n                    if not media_url:\n                        continue\n                    type_ = media.get('type')\n                    if type_ == 'application/vnd.lumberjack.manifest':\n                        continue\n                    ext = determine_ext(media_url)\n                    if type_ == 'application/x-mpegURL' or ext == 'm3u8':\n                        m3u8_formats = self._extract_m3u8_formats(\n                            media_url, video_id, 'mp4', m3u8_id='hls', fatal=False)\n                        if m3u8_formats:\n                            formats.extend(m3u8_formats)\n                    elif type_ == 'application/f4m' or ext == 'f4m':\n                        f4m_formats = self._extract_f4m_formats(\n                            media_url, video_id, preference=-1, f4m_id='hds', fatal=False)\n                        if f4m_formats:\n                            formats.extend(f4m_formats)\n                    else:\n                        f = {\n                            'url': media_url,\n                            'format_id': quality,\n                        }\n                        m = re.search(r'H264-(?P<width>\\d+)x(?P<height>\\d+)', media_url)\n                        if m:\n                            f.update({\n                                'width': int(m.group('width')),\n                                'height': int(m.group('height')),\n                            })\n                        formats.append(f)\n            self._sort_formats(formats)\n\n            title = metadata['title']\n            duration = int_or_none(metadata.get('duration'))\n            timestamp = int_or_none(metadata.get('created_time'))\n            thumbnail = metadata.get('poster_url')\n            uploader = metadata.get('owner', {}).get('screenname')\n            uploader_id = metadata.get('owner', {}).get('id')\n\n            subtitles = {}\n            subtitles_data = metadata.get('subtitles', {}).get('data', {})\n            if subtitles_data and isinstance(subtitles_data, dict):\n                for subtitle_lang, subtitle in subtitles_data.items():\n                    subtitles[subtitle_lang] = [{\n                        'ext': determine_ext(subtitle_url),\n                        'url': subtitle_url,\n                    } for subtitle_url in subtitle.get('urls', [])]\n\n            return {\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': duration,\n                'timestamp': timestamp,\n                'uploader': uploader,\n                'uploader_id': uploader_id,\n                'age_limit': age_limit,\n                'view_count': view_count,\n                'comment_count': comment_count,\n                'formats': formats,\n                'subtitles': subtitles,\n            }\n\n        # vevo embed\n        vevo_id = self._search_regex(\n            r'<link rel=\"video_src\" href=\"[^\"]*?vevo.com[^\"]*?video=(?P<id>[\\w]*)',\n            webpage, 'vevo embed', default=None)\n        if vevo_id:\n            return self.url_result('vevo:%s' % vevo_id, 'Vevo')\n\n        # fallback old player\n        embed_page = self._download_webpage_no_ff(\n            'https://www.dailymotion.com/embed/video/%s' % video_id,\n            video_id, 'Downloading embed page')\n\n        timestamp = parse_iso8601(self._html_search_meta(\n            'video:release_date', webpage, 'upload date'))\n\n        info = self._parse_json(\n            self._search_regex(\n                r'var info = ({.*?}),$', embed_page,\n                'video info', flags=re.MULTILINE),\n            video_id)\n\n        self._check_error(info)\n\n        formats = []\n        for (key, format_id) in self._FORMATS:\n            video_url = info.get(key)\n            if video_url is not None:\n                m_size = re.search(r'H264-(\\d+)x(\\d+)', video_url)\n                if m_size is not None:\n                    width, height = map(int_or_none, (m_size.group(1), m_size.group(2)))\n                else:\n                    width, height = None, None\n                formats.append({\n                    'url': video_url,\n                    'ext': 'mp4',\n                    'format_id': format_id,\n                    'width': width,\n                    'height': height,\n                })\n        self._sort_formats(formats)\n\n        # subtitles\n        video_subtitles = self.extract_subtitles(video_id, webpage)\n\n        title = self._og_search_title(webpage, default=None)\n        if title is None:\n            title = self._html_search_regex(\n                r'(?s)<span\\s+id=\"video_title\"[^>]*>(.*?)</span>', webpage,\n                'title')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'uploader': info['owner.screenname'],\n            'timestamp': timestamp,\n            'title': title,\n            'description': description,\n            'subtitles': video_subtitles,\n            'thumbnail': info['thumbnail_url'],\n            'age_limit': age_limit,\n            'view_count': view_count,\n            'duration': info['duration']\n        }",
        "begin_line": 110,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00141643059490085,
            "pseudo_dstar_susp": 0.0015313935681470138,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0015313935681470138,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.dailymotion.DailymotionPlaylistIE._extract_entries#305",
        "src_path": "youtube_dl/extractor/dailymotion.py",
        "class_name": "youtube_dl.extractor.dailymotion.DailymotionPlaylistIE",
        "signature": "youtube_dl.extractor.dailymotion.DailymotionPlaylistIE._extract_entries(self, id)",
        "snippet": "    def _extract_entries(self, id):\n        video_ids = set()\n        processed_urls = set()\n        for pagenum in itertools.count(1):\n            page_url = self._PAGE_TEMPLATE % (id, pagenum)\n            webpage, urlh = self._download_webpage_handle_no_ff(\n                page_url, id, 'Downloading page %s' % pagenum)\n            if urlh.geturl() in processed_urls:\n                self.report_warning('Stopped at duplicated page %s, which is the same as %s' % (\n                    page_url, urlh.geturl()), id)\n                break\n\n            processed_urls.add(urlh.geturl())\n\n            for video_id in re.findall(r'data-xid=\"(.+?)\"', webpage):\n                if video_id not in video_ids:\n                    yield self.url_result('http://www.dailymotion.com/video/%s' % video_id, 'Dailymotion')\n                    video_ids.add(video_id)\n\n            if re.search(self._MORE_PAGES_INDICATOR, webpage) is None:\n                break",
        "begin_line": 305,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.dailymotion.DailymotionUserIE._real_extract#364",
        "src_path": "youtube_dl/extractor/dailymotion.py",
        "class_name": "youtube_dl.extractor.dailymotion.DailymotionUserIE",
        "signature": "youtube_dl.extractor.dailymotion.DailymotionUserIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user = mobj.group('user')\n        webpage = self._download_webpage(\n            'https://www.dailymotion.com/user/%s' % user, user)\n        full_user = unescapeHTML(self._html_search_regex(\n            r'<a class=\"nav-image\" title=\"([^\"]+)\" href=\"/%s\">' % re.escape(user),\n            webpage, 'user'))\n\n        return {\n            '_type': 'playlist',\n            'id': user,\n            'title': full_user,\n            'entries': self._extract_entries(user),\n        }",
        "begin_line": 364,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0006105006105006105,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006105006105006105,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.dailymotion.DailymotionCloudIE._extract_dmcloud_url#398",
        "src_path": "youtube_dl/extractor/dailymotion.py",
        "class_name": "youtube_dl.extractor.dailymotion.DailymotionCloudIE",
        "signature": "youtube_dl.extractor.dailymotion.DailymotionCloudIE._extract_dmcloud_url(self, webpage)",
        "snippet": "    def _extract_dmcloud_url(self, webpage):\n        mobj = re.search(r'<iframe[^>]+src=[\\'\"](%s)[\\'\"]' % self._VALID_EMBED_URL, webpage)\n        if mobj:\n            return mobj.group(1)\n\n        mobj = re.search(\n            r'<input[^>]+id=[\\'\"]dmcloudUrlEmissionSelect[\\'\"][^>]+value=[\\'\"](%s)[\\'\"]' % self._VALID_EMBED_URL,\n            webpage)\n        if mobj:\n            return mobj.group(1)",
        "begin_line": 398,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.onionstudios.OnionStudiosIE._extract_url#31",
        "src_path": "youtube_dl/extractor/onionstudios.py",
        "class_name": "youtube_dl.extractor.onionstudios.OnionStudiosIE",
        "signature": "youtube_dl.extractor.onionstudios.OnionStudiosIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?onionstudios\\.com/embed.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00033200531208499334,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoBaseInfoExtractor._login#35",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoBaseInfoExtractor",
        "signature": "youtube_dl.extractor.vimeo.VimeoBaseInfoExtractor._login(self)",
        "snippet": "    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            if self._LOGIN_REQUIRED:\n                raise ExtractorError('No login info available, needed for using %s.' % self.IE_NAME, expected=True)\n            return\n        self.report_login()\n        webpage = self._download_webpage(self._LOGIN_URL, None, False)\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        data = urlencode_postdata(encode_dict({\n            'action': 'login',\n            'email': username,\n            'password': password,\n            'service': 'vimeo',\n            'token': token,\n        }))\n        login_request = sanitized_Request(self._LOGIN_URL, data)\n        login_request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        login_request.add_header('Referer', self._LOGIN_URL)\n        self._set_vimeo_cookie('vuid', vuid)\n        self._download_webpage(login_request, None, False, 'Wrong login info')",
        "begin_line": 35,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007668711656441718,
            "pseudo_dstar_susp": 0.0007627765064836003,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.0007627765064836003,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoIE._real_initialize#261",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoIE._real_initialize(self)",
        "snippet": "    def _real_initialize(self):\n        self._login()",
        "begin_line": 261,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoIE._real_extract#264",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        url, data = unsmuggle_url(url)\n        headers = std_headers\n        if data is not None:\n            headers = headers.copy()\n            headers.update(data)\n        if 'Referer' not in headers:\n            headers['Referer'] = url\n\n        # Extract ID from URL\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        orig_url = url\n        if mobj.group('pro') or mobj.group('player'):\n            url = 'https://player.vimeo.com/video/' + video_id\n        else:\n            url = 'https://vimeo.com/' + video_id\n\n        # Retrieve video webpage to extract further information\n        request = sanitized_Request(url, None, headers)\n        try:\n            webpage = self._download_webpage(request, video_id)\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 403:\n                errmsg = ee.cause.read()\n                if b'Because of its privacy settings, this video cannot be played here' in errmsg:\n                    raise ExtractorError(\n                        'Cannot download embed-only video without embedding '\n                        'URL. Please call youtube-dl with the URL of the page '\n                        'that embeds this video.',\n                        expected=True)\n            raise\n\n        # Now we begin extracting as much information as we can from what we\n        # retrieved. First we extract the information common to all extractors,\n        # and latter we extract those that are Vimeo specific.\n        self.report_extraction(video_id)\n\n        vimeo_config = self._search_regex(\n            r'vimeo\\.config\\s*=\\s*(?:({.+?})|_extend\\([^,]+,\\s+({.+?})\\));', webpage,\n            'vimeo config', default=None)\n        if vimeo_config:\n            seed_status = self._parse_json(vimeo_config, video_id).get('seed_status', {})\n            if seed_status.get('state') == 'failed':\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, seed_status['title']),\n                    expected=True)\n\n        # Extract the config JSON\n        try:\n            try:\n                config_url = self._html_search_regex(\n                    r' data-config-url=\"(.+?)\"', webpage,\n                    'config URL', default=None)\n                if not config_url:\n                    # Sometimes new react-based page is served instead of old one that require\n                    # different config URL extraction approach (see\n                    # https://github.com/rg3/youtube-dl/pull/7209)\n                    vimeo_clip_page_config = self._search_regex(\n                        r'vimeo\\.clip_page_config\\s*=\\s*({.+?});', webpage,\n                        'vimeo clip page config')\n                    config_url = self._parse_json(\n                        vimeo_clip_page_config, video_id)['player']['config_url']\n                config_json = self._download_webpage(config_url, video_id)\n                config = json.loads(config_json)\n            except RegexNotFoundError:\n                # For pro videos or player.vimeo.com urls\n                # We try to find out to which variable is assigned the config dic\n                m_variable_name = re.search('(\\w)\\.video\\.id', webpage)\n                if m_variable_name is not None:\n                    config_re = r'%s=({[^}].+?});' % re.escape(m_variable_name.group(1))\n                else:\n                    config_re = [r' = {config:({.+?}),assets:', r'(?:[abc])=({.+?});']\n                config = self._search_regex(config_re, webpage, 'info section',\n                                            flags=re.DOTALL)\n                config = json.loads(config)\n        except Exception as e:\n            if re.search('The creator of this video has not given you permission to embed it on this domain.', webpage):\n                raise ExtractorError('The author has restricted the access to this video, try with the \"--referer\" option')\n\n            if re.search(r'<form[^>]+?id=\"pw_form\"', webpage) is not None:\n                if data and '_video_password_verified' in data:\n                    raise ExtractorError('video password verification failed!')\n                self._verify_video_password(url, video_id, webpage)\n                return self._real_extract(\n                    smuggle_url(url, {'_video_password_verified': 'verified'}))\n            else:\n                raise ExtractorError('Unable to extract info section',\n                                     cause=e)\n        else:\n            if config.get('view') == 4:\n                config = self._verify_player_video_password(url, video_id)\n\n        # Extract title\n        video_title = config[\"video\"][\"title\"]\n\n        # Extract uploader and uploader_id\n        video_uploader = config[\"video\"][\"owner\"][\"name\"]\n        video_uploader_id = config[\"video\"][\"owner\"][\"url\"].split('/')[-1] if config[\"video\"][\"owner\"][\"url\"] else None\n\n        # Extract video thumbnail\n        video_thumbnail = config[\"video\"].get(\"thumbnail\")\n        if video_thumbnail is None:\n            video_thumbs = config[\"video\"].get(\"thumbs\")\n            if video_thumbs and isinstance(video_thumbs, dict):\n                _, video_thumbnail = sorted((int(width if width.isdigit() else 0), t_url) for (width, t_url) in video_thumbs.items())[-1]\n\n        # Extract video description\n\n        video_description = self._html_search_regex(\n            r'(?s)<div\\s+class=\"[^\"]*description[^\"]*\"[^>]*>(.*?)</div>',\n            webpage, 'description', default=None)\n        if not video_description:\n            video_description = self._html_search_meta(\n                'description', webpage, default=None)\n        if not video_description and mobj.group('pro'):\n            orig_webpage = self._download_webpage(\n                orig_url, video_id,\n                note='Downloading webpage for description',\n                fatal=False)\n            if orig_webpage:\n                video_description = self._html_search_meta(\n                    'description', orig_webpage, default=None)\n        if not video_description and not mobj.group('player'):\n            self._downloader.report_warning('Cannot find video description')\n\n        # Extract video duration\n        video_duration = int_or_none(config[\"video\"].get(\"duration\"))\n\n        # Extract upload date\n        video_upload_date = None\n        mobj = re.search(r'<time[^>]+datetime=\"([^\"]+)\"', webpage)\n        if mobj is not None:\n            video_upload_date = unified_strdate(mobj.group(1))\n\n        try:\n            view_count = int(self._search_regex(r'UserPlays:(\\d+)', webpage, 'view count'))\n            like_count = int(self._search_regex(r'UserLikes:(\\d+)', webpage, 'like count'))\n            comment_count = int(self._search_regex(r'UserComments:(\\d+)', webpage, 'comment count'))\n        except RegexNotFoundError:\n            # This info is only available in vimeo.com/{id} urls\n            view_count = None\n            like_count = None\n            comment_count = None\n\n        formats = []\n        download_request = sanitized_Request('https://vimeo.com/%s?action=load_download_config' % video_id, headers={\n            'X-Requested-With': 'XMLHttpRequest'})\n        download_data = self._download_json(download_request, video_id, fatal=False)\n        if download_data:\n            source_file = download_data.get('source_file')\n            if source_file and not source_file.get('is_cold') and not source_file.get('is_defrosting'):\n                formats.append({\n                    'url': source_file['download_url'],\n                    'ext': source_file['extension'].lower(),\n                    'width': int_or_none(source_file.get('width')),\n                    'height': int_or_none(source_file.get('height')),\n                    'filesize': parse_filesize(source_file.get('size')),\n                    'format_id': source_file.get('public_name', 'Original'),\n                    'preference': 1,\n                })\n        config_files = config['video'].get('files') or config['request'].get('files', {})\n        for f in config_files.get('progressive', []):\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            formats.append({\n                'url': video_url,\n                'format_id': 'http-%s' % f.get('quality'),\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'fps': int_or_none(f.get('fps')),\n                'tbr': int_or_none(f.get('bitrate')),\n            })\n        m3u8_url = config_files.get('hls', {}).get('url')\n        if m3u8_url:\n            m3u8_formats = self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            if m3u8_formats:\n                formats.extend(m3u8_formats)\n        # Bitrates are completely broken. Single m3u8 may contain entries in kbps and bps\n        # at the same time without actual units specified. This lead to wrong sorting.\n        self._sort_formats(formats, field_preference=('preference', 'height', 'width', 'fps', 'format_id'))\n\n        subtitles = {}\n        text_tracks = config['request'].get('text_tracks')\n        if text_tracks:\n            for tt in text_tracks:\n                subtitles[tt['lang']] = [{\n                    'ext': 'vtt',\n                    'url': 'https://vimeo.com' + tt['url'],\n                }]\n\n        return {\n            'id': video_id,\n            'uploader': video_uploader,\n            'uploader_id': video_uploader_id,\n            'upload_date': video_upload_date,\n            'title': video_title,\n            'thumbnail': video_thumbnail,\n            'description': video_description,\n            'duration': video_duration,\n            'formats': formats,\n            'webpage_url': url,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'subtitles': subtitles,\n        }",
        "begin_line": 264,
        "end_line": 472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006086427267194157,
            "pseudo_dstar_susp": 0.0006901311249137336,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0006901311249137336,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoChannelIE._title_and_entries#523",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoChannelIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoChannelIE._title_and_entries(self, list_id, base_url)",
        "snippet": "    def _title_and_entries(self, list_id, base_url):\n        for pagenum in itertools.count(1):\n            page_url = self._page_url(base_url, pagenum)\n            webpage = self._download_webpage(\n                page_url, list_id,\n                'Downloading page %s' % pagenum)\n\n            if pagenum == 1:\n                webpage = self._login_list_password(page_url, list_id, webpage)\n                yield self._extract_list_title(webpage)\n\n            for video_id in re.findall(r'id=\"clip_(\\d+?)\"', webpage):\n                yield self.url_result('https://vimeo.com/%s' % video_id, 'Vimeo')\n\n            if re.search(self._MORE_PAGES_INDICATOR, webpage, re.DOTALL) is None:\n                break",
        "begin_line": 523,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoChannelIE._extract_videos#540",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoChannelIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoChannelIE._extract_videos(self, list_id, base_url)",
        "snippet": "    def _extract_videos(self, list_id, base_url):\n        title_and_entries = self._title_and_entries(list_id, base_url)\n        list_title = next(title_and_entries)\n        return self.playlist_result(title_and_entries, list_id, list_title)",
        "begin_line": 540,
        "end_line": 543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006086427267194157,
            "pseudo_dstar_susp": 0.0006901311249137336,
            "pseudo_tarantula_susp": 0.0005524861878453039,
            "pseudo_op2_susp": 0.0006901311249137336,
            "pseudo_barinel_susp": 0.0005524861878453039
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoGroupsIE._extract_list_title#614",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoGroupsIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoGroupsIE._extract_list_title(self, webpage)",
        "snippet": "    def _extract_list_title(self, webpage):\n        return self._og_search_title(webpage)",
        "begin_line": 614,
        "end_line": 615,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoGroupsIE._real_extract#617",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoGroupsIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoGroupsIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('name')\n        return self._extract_videos(name, 'https://vimeo.com/groups/%s' % name)",
        "begin_line": 617,
        "end_line": 620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.vimeo.VimeoLikesIE._real_extract#697",
        "src_path": "youtube_dl/extractor/vimeo.py",
        "class_name": "youtube_dl.extractor.vimeo.VimeoLikesIE",
        "signature": "youtube_dl.extractor.vimeo.VimeoLikesIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        user_id = self._match_id(url)\n        webpage = self._download_webpage(url, user_id)\n        page_count = self._int(\n            self._search_regex(\n                r'''(?x)<li><a\\s+href=\"[^\"]+\"\\s+data-page=\"([0-9]+)\">\n                    .*?</a></li>\\s*<li\\s+class=\"pagination_next\">\n                ''', webpage, 'page count'),\n            'page count', fatal=True)\n        PAGE_SIZE = 12\n        title = self._html_search_regex(\n            r'(?s)<h1>(.+?)</h1>', webpage, 'title', fatal=False)\n        description = self._html_search_meta('description', webpage)\n\n        def _get_page(idx):\n            page_url = 'https://vimeo.com/user%s/likes/page:%d/sort:date' % (\n                user_id, idx + 1)\n            webpage = self._download_webpage(\n                page_url, user_id,\n                note='Downloading page %d/%d' % (idx + 1, page_count))\n            video_list = self._search_regex(\n                r'(?s)<ol class=\"js-browse_list[^\"]+\"[^>]*>(.*?)</ol>',\n                webpage, 'video content')\n            paths = re.findall(\n                r'<li[^>]*>\\s*<a\\s+href=\"([^\"]+)\"', video_list)\n            for path in paths:\n                yield {\n                    '_type': 'url',\n                    'url': compat_urlparse.urljoin(page_url, path),\n                }\n\n        pl = InAdvancePagedList(_get_page, page_count, PAGE_SIZE)\n\n        return {\n            '_type': 'playlist',\n            'id': 'user%s_likes' % user_id,\n            'title': title,\n            'description': description,\n            'entries': pl,\n        }",
        "begin_line": 697,
        "end_line": 736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.npo.NPOIE._real_extract#143",
        "src_path": "youtube_dl/extractor/npo.py",
        "class_name": "youtube_dl.extractor.npo.NPOIE",
        "signature": "youtube_dl.extractor.npo.NPOIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._get_info(video_id)",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.npo.NPOIE._get_info#147",
        "src_path": "youtube_dl/extractor/npo.py",
        "class_name": "youtube_dl.extractor.npo.NPOIE",
        "signature": "youtube_dl.extractor.npo.NPOIE._get_info(self, video_id)",
        "snippet": "    def _get_info(self, video_id):\n        metadata = self._download_json(\n            'http://e.omroep.nl/metadata/%s' % video_id,\n            video_id,\n            # We have to remove the javascript callback\n            transform_source=strip_jsonp,\n        )\n\n        # For some videos actual video id (prid) is different (e.g. for\n        # http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698\n        # video id is POMS_WNL_853698 but prid is POW_00996502)\n        video_id = metadata.get('prid') or video_id\n\n        # titel is too generic in some cases so utilize aflevering_titel as well\n        # when available (e.g. http://tegenlicht.vpro.nl/afleveringen/2014-2015/access-to-africa.html)\n        title = metadata['titel']\n        sub_title = metadata.get('aflevering_titel')\n        if sub_title and sub_title != title:\n            title += ': %s' % sub_title\n\n        token = self._get_token(video_id)\n\n        formats = []\n\n        pubopties = metadata.get('pubopties')\n        if pubopties:\n            quality = qualities(['adaptive', 'wmv_sb', 'h264_sb', 'wmv_bb', 'h264_bb', 'wvc1_std', 'h264_std'])\n            for format_id in pubopties:\n                format_info = self._download_json(\n                    'http://ida.omroep.nl/odi/?prid=%s&puboptions=%s&adaptive=yes&token=%s'\n                    % (video_id, format_id, token),\n                    video_id, 'Downloading %s JSON' % format_id)\n                if format_info.get('error_code', 0) or format_info.get('errorcode', 0):\n                    continue\n                streams = format_info.get('streams')\n                if streams:\n                    video_info = self._download_json(\n                        streams[0] + '&type=json',\n                        video_id, 'Downloading %s stream JSON' % format_id)\n                else:\n                    video_info = format_info\n                video_url = video_info.get('url')\n                if not video_url:\n                    continue\n                if format_id == 'adaptive':\n                    formats.extend(self._extract_m3u8_formats(video_url, video_id))\n                else:\n                    formats.append({\n                        'url': video_url,\n                        'format_id': format_id,\n                        'quality': quality(format_id),\n                    })\n\n        streams = metadata.get('streams')\n        if streams:\n            for i, stream in enumerate(streams):\n                stream_url = stream.get('url')\n                if not stream_url:\n                    continue\n                if '.asf' not in stream_url:\n                    formats.append({\n                        'url': stream_url,\n                        'quality': stream.get('kwaliteit'),\n                    })\n                    continue\n                asx = self._download_xml(\n                    stream_url, video_id,\n                    'Downloading stream %d ASX playlist' % i,\n                    transform_source=fix_xml_ampersands)\n                ref = asx.find('./ENTRY/Ref')\n                if ref is None:\n                    continue\n                video_url = ref.get('href')\n                if not video_url:\n                    continue\n                formats.append({\n                    'url': video_url,\n                    'ext': stream.get('formaat', 'asf'),\n                    'quality': stream.get('kwaliteit'),\n                })\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if metadata.get('tt888') == 'ja':\n            subtitles['nl'] = [{\n                'ext': 'vtt',\n                'url': 'http://e.omroep.nl/tt888/%s' % video_id,\n            }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': metadata.get('info'),\n            'thumbnail': metadata.get('images', [{'url': None}])[-1]['url'],\n            'upload_date': unified_strdate(metadata.get('gidsdatum')),\n            'duration': parse_duration(metadata.get('tijdsduur')),\n            'formats': formats,\n            'subtitles': subtitles,\n        }",
        "begin_line": 147,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005099439061703213,
            "pseudo_dstar_susp": 0.0005022601707684581,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0005022601707684581,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "youtube_dl.extractor.npo.VPROIE._real_extract#444",
        "src_path": "youtube_dl/extractor/npo.py",
        "class_name": "youtube_dl.extractor.npo.VPROIE",
        "signature": "youtube_dl.extractor.npo.VPROIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('npo:%s' % video_id if not video_id.startswith('http') else video_id)\n            for video_id in re.findall(r'data-media-id=\"([^\"]+)\"', webpage)\n        ]\n\n        playlist_title = self._search_regex(\n            r'<title>\\s*([^>]+?)\\s*-\\s*Teledoc\\s*-\\s*VPRO\\s*</title>',\n            webpage, 'playlist title', default=None) or self._og_search_title(webpage)\n\n        return self.playlist_result(entries, playlist_id, playlist_title)",
        "begin_line": 444,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005592841163310962,
            "pseudo_dstar_susp": 0.0005446623093681918,
            "pseudo_tarantula_susp": 0.0049261083743842365,
            "pseudo_op2_susp": 0.0005446623093681918,
            "pseudo_barinel_susp": 0.0049261083743842365
        }
    },
    {
        "name": "youtube_dl.extractor.snagfilms.SnagFilmsEmbedIE._extract_url#41",
        "src_path": "youtube_dl/extractor/snagfilms.py",
        "class_name": "youtube_dl.extractor.snagfilms.SnagFilmsEmbedIE",
        "signature": "youtube_dl.extractor.snagfilms.SnagFilmsEmbedIE._extract_url(webpage)",
        "snippet": "    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:embed\\.)?snagfilms\\.com/embed/player.+?)\\1',\n            webpage)\n        if mobj:\n            return mobj.group('url')",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    },
    {
        "name": "youtube_dl.extractor.fivemin.FiveMinIE._real_extract#93",
        "src_path": "youtube_dl/extractor/fivemin.py",
        "class_name": "youtube_dl.extractor.fivemin.FiveMinIE",
        "signature": "youtube_dl.extractor.fivemin.FiveMinIE._real_extract(self, url)",
        "snippet": "    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        embed_url = 'https://embed.5min.com/playerseed/?playList=%s' % video_id\n        embed_page = self._download_webpage(embed_url, video_id,\n                                            'Downloading embed page')\n        sid = self._search_regex(r'sid=(\\d+)', embed_page, 'sid')\n        query = compat_urllib_parse.urlencode({\n            'func': 'GetResults',\n            'playlist': video_id,\n            'sid': sid,\n            'isPlayerSeed': 'true',\n            'url': embed_url,\n        })\n        response = self._download_json(\n            'https://syn.5min.com/handlers/SenseHandler.ashx?' + query,\n            video_id)\n        if not response['success']:\n            raise ExtractorError(\n                '%s said: %s' % (\n                    self.IE_NAME,\n                    self._ERRORS.get(response['errorMessage'], response['errorMessage'])),\n                expected=True)\n        info = response['binding'][0]\n\n        formats = []\n        parsed_video_url = compat_urllib_parse_urlparse(compat_parse_qs(\n            compat_urllib_parse_urlparse(info['EmbededURL']).query)['videoUrl'][0])\n        for rendition in info['Renditions']:\n            if rendition['RenditionType'] == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(rendition['Url'], video_id, m3u8_id='hls'))\n            elif rendition['RenditionType'] == 'aac':\n                continue\n            else:\n                rendition_url = compat_urlparse.urlunparse(parsed_video_url._replace(path=replace_extension(parsed_video_url.path.replace('//', '/%s/' % rendition['ID']), rendition['RenditionType'])))\n                quality = self._QUALITIES.get(rendition['ID'], {})\n                formats.append({\n                    'format_id': '%s-%d' % (rendition['RenditionType'], rendition['ID']),\n                    'url': rendition_url,\n                    'width': quality.get('width'),\n                    'height': quality.get('height'),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['Title'],\n            'thumbnail': info.get('ThumbURL'),\n            'duration': parse_duration(info.get('Duration')),\n            'formats': formats,\n        }",
        "begin_line": 93,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017921146953405018,
            "pseudo_dstar_susp": 0.002257336343115124,
            "pseudo_tarantula_susp": 0.0005973715651135006,
            "pseudo_op2_susp": 0.002257336343115124,
            "pseudo_barinel_susp": 0.0005973715651135006
        }
    },
    {
        "name": "youtube_dl.downloader.__init__.get_suitable_downloader#28",
        "src_path": "youtube_dl/downloader/__init__.py",
        "class_name": "youtube_dl.downloader.__init__",
        "signature": "youtube_dl.downloader.__init__.get_suitable_downloader(info_dict, params={})",
        "snippet": "def get_suitable_downloader(info_dict, params={}):\n    \"\"\"Get the downloader class that can handle the info dict.\"\"\"\n    protocol = determine_protocol(info_dict)\n    info_dict['protocol'] = protocol\n\n    external_downloader = params.get('external_downloader')\n    if external_downloader is not None:\n        ed = get_external_downloader(external_downloader)\n        if ed.supports(info_dict):\n            return ed\n\n    if protocol == 'm3u8' and params.get('hls_prefer_native'):\n        return NativeHlsFD\n\n    return PROTOCOL_MAP.get(protocol, HttpFD)",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031446540880503146,
            "pseudo_dstar_susp": 0.003257328990228013,
            "pseudo_tarantula_susp": 0.0007861635220125787,
            "pseudo_op2_susp": 0.003257328990228013,
            "pseudo_barinel_susp": 0.0007861635220125787
        }
    },
    {
        "name": "youtube_dl.extractor.smotri.SmotriIE._extract_url#143",
        "src_path": "youtube_dl/extractor/smotri.py",
        "class_name": "youtube_dl.extractor.smotri.SmotriIE",
        "signature": "youtube_dl.extractor.smotri.SmotriIE._extract_url(cls, webpage)",
        "snippet": "    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<embed[^>]src=([\"\\'])(?P<url>http://pics\\.smotri\\.com/(?:player|scrubber_custom8)\\.swf\\?file=v.+?\\1)',\n            webpage)\n        if mobj is not None:\n            return mobj.group('url')\n\n        mobj = re.search(\n            r'''(?x)<div\\s+class=\"video_file\">http://smotri\\.com/video/download/file/[^<]+</div>\\s*\n                    <div\\s+class=\"video_image\">[^<]+</div>\\s*\n                    <div\\s+class=\"video_id\">(?P<id>[^<]+)</div>''', webpage)\n        if mobj is not None:\n            return 'http://smotri.com/video/view/?id=%s' % mobj.group('id')",
        "begin_line": 143,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035829451809387314,
            "pseudo_dstar_susp": 0.00035829451809387314,
            "pseudo_tarantula_susp": 0.00035829451809387314,
            "pseudo_op2_susp": 0.00039603960396039607,
            "pseudo_barinel_susp": 0.00035829451809387314
        }
    }
]