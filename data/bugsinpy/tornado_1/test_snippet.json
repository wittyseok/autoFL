[
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.initialize#48",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.initialize(self, close_future=None, compression_options=None)",
        "snippet": "    def initialize(self, close_future=None, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.get_compression_options#52",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.get_compression_options(self)",
        "snippet": "    def get_compression_options(self):\n        return self.compression_options",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.on_close#55",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.on_close(self)",
        "snippet": "    def on_close(self):\n        if self.close_future is not None:\n            self.close_future.set_result((self.close_code, self.close_reason))",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.EchoHandler.on_message#62",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.EchoHandler",
        "signature": "tornado.test.websocket_test.EchoHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        try:\n            yield self.write_message(message, isinstance(message, bytes))\n        except asyncio.CancelledError:\n            pass\n        except WebSocketClosedError:\n            pass",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ErrorInOnMessageHandler.on_message#72",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ErrorInOnMessageHandler",
        "signature": "tornado.test.websocket_test.ErrorInOnMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        1 / 0",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderHandler.open#77",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderHandler",
        "signature": "tornado.test.websocket_test.HeaderHandler.open(self)",
        "snippet": "    def open(self):\n        methods_to_test = [\n            functools.partial(self.write, \"This should not work\"),\n            functools.partial(self.redirect, \"http://localhost/elsewhere\"),\n            functools.partial(self.set_header, \"X-Test\", \"\"),\n            functools.partial(self.set_cookie, \"Chocolate\", \"Chip\"),\n            functools.partial(self.set_status, 503),\n            self.flush,\n            self.finish,\n        ]\n        for method in methods_to_test:\n            try:\n                # In a websocket context, many RequestHandler methods\n                # raise RuntimeErrors.\n                method()\n                raise Exception(\"did not get expected exception\")\n            except RuntimeError:\n                pass\n        self.write_message(self.request.headers.get(\"X-Test\", \"\"))",
        "begin_line": 77,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderEchoHandler.set_default_headers#99",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderEchoHandler",
        "signature": "tornado.test.websocket_test.HeaderEchoHandler.set_default_headers(self)",
        "snippet": "    def set_default_headers(self):\n        self.set_header(\"X-Extra-Response-Header\", \"Extra-Response-Value\")",
        "begin_line": 99,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderEchoHandler.prepare#102",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderEchoHandler",
        "signature": "tornado.test.websocket_test.HeaderEchoHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        for k, v in self.request.headers.get_all():\n            if k.lower().startswith(\"x-test\"):\n                self.set_header(k, v)",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.NonWebSocketHandler.get#109",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.NonWebSocketHandler",
        "signature": "tornado.test.websocket_test.NonWebSocketHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(\"ok\")",
        "begin_line": 109,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CloseReasonHandler.open#114",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CloseReasonHandler",
        "signature": "tornado.test.websocket_test.CloseReasonHandler.open(self)",
        "snippet": "    def open(self):\n        self.on_close_called = False\n        self.close(1001, \"goodbye\")",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.AsyncPrepareHandler.prepare#121",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.AsyncPrepareHandler",
        "signature": "tornado.test.websocket_test.AsyncPrepareHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        yield gen.moment",
        "begin_line": 121,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.AsyncPrepareHandler.on_message#124",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.AsyncPrepareHandler",
        "signature": "tornado.test.websocket_test.AsyncPrepareHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(message)",
        "begin_line": 124,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PathArgsHandler.open#129",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PathArgsHandler",
        "signature": "tornado.test.websocket_test.PathArgsHandler.open(self, arg)",
        "snippet": "    def open(self, arg):\n        self.write_message(arg)",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CoroutineOnMessageHandler.initialize#134",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.CoroutineOnMessageHandler.initialize(self, **kwargs)",
        "snippet": "    def initialize(self, **kwargs):\n        super(CoroutineOnMessageHandler, self).initialize(**kwargs)\n        self.sleeping = 0",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CoroutineOnMessageHandler.on_message#139",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.CoroutineOnMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        if self.sleeping > 0:\n            self.write_message(\"another coroutine is already sleeping\")\n        self.sleeping += 1\n        yield gen.sleep(0.01)\n        self.sleeping -= 1\n        self.write_message(message)",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.RenderMessageHandler.on_message#149",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.RenderMessageHandler",
        "signature": "tornado.test.websocket_test.RenderMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(self.render_string(\"message.html\", message=message))",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.SubprotocolHandler.initialize#154",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.SubprotocolHandler",
        "signature": "tornado.test.websocket_test.SubprotocolHandler.initialize(self, **kwargs)",
        "snippet": "    def initialize(self, **kwargs):\n        super(SubprotocolHandler, self).initialize(**kwargs)\n        self.select_subprotocol_called = False",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.SubprotocolHandler.select_subprotocol#158",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.SubprotocolHandler",
        "signature": "tornado.test.websocket_test.SubprotocolHandler.select_subprotocol(self, subprotocols)",
        "snippet": "    def select_subprotocol(self, subprotocols):\n        if self.select_subprotocol_called:\n            raise Exception(\"select_subprotocol called twice\")\n        self.select_subprotocol_called = True\n        if \"goodproto\" in subprotocols:\n            return \"goodproto\"\n        return None",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.SubprotocolHandler.open#166",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.SubprotocolHandler",
        "signature": "tornado.test.websocket_test.SubprotocolHandler.open(self)",
        "snippet": "    def open(self):\n        if not self.select_subprotocol_called:\n            raise Exception(\"select_subprotocol not called\")\n        self.write_message(\"subprotocol=%s\" % self.selected_subprotocol)",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.OpenCoroutineHandler.initialize#173",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.OpenCoroutineHandler",
        "signature": "tornado.test.websocket_test.OpenCoroutineHandler.initialize(self, test, **kwargs)",
        "snippet": "    def initialize(self, test, **kwargs):\n        super(OpenCoroutineHandler, self).initialize(**kwargs)\n        self.test = test\n        self.open_finished = False",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.OpenCoroutineHandler.open#179",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.OpenCoroutineHandler",
        "signature": "tornado.test.websocket_test.OpenCoroutineHandler.open(self)",
        "snippet": "    def open(self):\n        yield self.test.message_sent.wait()\n        yield gen.sleep(0.010)\n        self.open_finished = True",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.OpenCoroutineHandler.on_message#184",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.OpenCoroutineHandler",
        "signature": "tornado.test.websocket_test.OpenCoroutineHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        if not self.open_finished:\n            raise Exception(\"on_message called before open finished\")\n        self.write_message(\"ok\")",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ErrorInOpenHandler.open#191",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ErrorInOpenHandler",
        "signature": "tornado.test.websocket_test.ErrorInOpenHandler.open(self)",
        "snippet": "    def open(self):\n        raise Exception(\"boom\")",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ErrorInAsyncOpenHandler.open#196",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ErrorInAsyncOpenHandler",
        "signature": "tornado.test.websocket_test.ErrorInAsyncOpenHandler.open(self)",
        "snippet": "    async def open(self):\n        await asyncio.sleep(0)\n        raise Exception(\"boom\")",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.NoDelayHandler.open#202",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.NoDelayHandler",
        "signature": "tornado.test.websocket_test.NoDelayHandler.open(self)",
        "snippet": "    def open(self):\n        self.set_nodelay(True)\n        self.write_message(\"hello\")",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect#209",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketBaseTestCase",
        "signature": "tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect(self, path, **kwargs)",
        "snippet": "    def ws_connect(self, path, **kwargs):\n        ws = yield websocket_connect(\n            \"ws://127.0.0.1:%d%s\" % (self.get_http_port(), path), **kwargs\n        )\n        raise gen.Return(ws)",
        "begin_line": 209,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.get_app#217",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()  # type: Future[None]\n        return Application(\n            [\n                (\"/echo\", EchoHandler, dict(close_future=self.close_future)),\n                (\"/non_ws\", NonWebSocketHandler),\n                (\"/header\", HeaderHandler, dict(close_future=self.close_future)),\n                (\n                    \"/header_echo\",\n                    HeaderEchoHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\n                    \"/close_reason\",\n                    CloseReasonHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\n                    \"/error_in_on_message\",\n                    ErrorInOnMessageHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\n                    \"/async_prepare\",\n                    AsyncPrepareHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\n                    \"/path_args/(.*)\",\n                    PathArgsHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\n                    \"/coroutine\",\n                    CoroutineOnMessageHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\"/render\", RenderMessageHandler, dict(close_future=self.close_future)),\n                (\n                    \"/subprotocol\",\n                    SubprotocolHandler,\n                    dict(close_future=self.close_future),\n                ),\n                (\n                    \"/open_coroutine\",\n                    OpenCoroutineHandler,\n                    dict(close_future=self.close_future, test=self),\n                ),\n                (\"/error_in_open\", ErrorInOpenHandler),\n                (\"/error_in_async_open\", ErrorInAsyncOpenHandler),\n                (\"/nodelay\", NoDelayHandler),\n            ],\n            template_loader=DictLoader({\"message.html\": \"<b>{{ message }}</b>\"}),\n        )",
        "begin_line": 217,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.get_http_client#272",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # These tests require HTTP/1; force the use of SimpleAsyncHTTPClient.\n        return SimpleAsyncHTTPClient()",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.tearDown#276",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(WebSocketTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 276,
        "end_line": 278,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_http_request#280",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_http_request(self)",
        "snippet": "    def test_http_request(self):\n        # WS server, HTTP client.\n        response = self.fetch(\"/echo\")\n        self.assertEqual(response.code, 400)",
        "begin_line": 280,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_missing_websocket_key#285",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_missing_websocket_key(self)",
        "snippet": "    def test_missing_websocket_key(self):\n        response = self.fetch(\n            \"/echo\",\n            headers={\n                \"Connection\": \"Upgrade\",\n                \"Upgrade\": \"WebSocket\",\n                \"Sec-WebSocket-Version\": \"13\",\n            },\n        )\n        self.assertEqual(response.code, 400)",
        "begin_line": 285,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version#296",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version(self)",
        "snippet": "    def test_bad_websocket_version(self):\n        response = self.fetch(\n            \"/echo\",\n            headers={\n                \"Connection\": \"Upgrade\",\n                \"Upgrade\": \"WebSocket\",\n                \"Sec-WebSocket-Version\": \"12\",\n            },\n        )\n        self.assertEqual(response.code, 426)",
        "begin_line": 296,
        "end_line": 305,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_gen#308",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_gen(self)",
        "snippet": "    def test_websocket_gen(self):\n        ws = yield self.ws_connect(\"/echo\")\n        yield ws.write_message(\"hello\")\n        response = yield ws.read_message()\n        self.assertEqual(response, \"hello\")",
        "begin_line": 308,
        "end_line": 312,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks#314",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks(self)",
        "snippet": "    def test_websocket_callbacks(self):\n        websocket_connect(\n            \"ws://127.0.0.1:%d/echo\" % self.get_http_port(), callback=self.stop\n        )\n        ws = self.wait().result()\n        ws.write_message(\"hello\")\n        ws.read_message(self.stop)\n        response = self.wait().result()\n        self.assertEqual(response, \"hello\")\n        self.close_future.add_done_callback(lambda f: self.stop())\n        ws.close()\n        self.wait()",
        "begin_line": 314,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_binary_message#328",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_binary_message(self)",
        "snippet": "    def test_binary_message(self):\n        ws = yield self.ws_connect(\"/echo\")\n        ws.write_message(b\"hello \\xe9\", binary=True)\n        response = yield ws.read_message()\n        self.assertEqual(response, b\"hello \\xe9\")",
        "begin_line": 328,
        "end_line": 332,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_unicode_message#335",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_unicode_message(self)",
        "snippet": "    def test_unicode_message(self):\n        ws = yield self.ws_connect(\"/echo\")\n        ws.write_message(u\"hello \\u00e9\")\n        response = yield ws.read_message()\n        self.assertEqual(response, u\"hello \\u00e9\")",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_render_message#342",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_render_message(self)",
        "snippet": "    def test_render_message(self):\n        ws = yield self.ws_connect(\"/render\")\n        ws.write_message(\"hello\")\n        response = yield ws.read_message()\n        self.assertEqual(response, \"<b>hello</b>\")",
        "begin_line": 342,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_error_in_on_message#349",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_error_in_on_message(self)",
        "snippet": "    def test_error_in_on_message(self):\n        ws = yield self.ws_connect(\"/error_in_on_message\")\n        ws.write_message(\"hello\")\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = yield ws.read_message()\n        self.assertIs(response, None)",
        "begin_line": 349,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail#357",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail(self)",
        "snippet": "    def test_websocket_http_fail(self):\n        with self.assertRaises(HTTPError) as cm:\n            yield self.ws_connect(\"/notfound\")\n        self.assertEqual(cm.exception.code, 404)",
        "begin_line": 357,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_success#363",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_success(self)",
        "snippet": "    def test_websocket_http_success(self):\n        with self.assertRaises(WebSocketError):\n            yield self.ws_connect(\"/non_ws\")",
        "begin_line": 363,
        "end_line": 365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail#368",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail(self)",
        "snippet": "    def test_websocket_network_fail(self):\n        sock, port = bind_unused_port()\n        sock.close()\n        with self.assertRaises(IOError):\n            with ExpectLog(gen_log, \".*\"):\n                yield websocket_connect(\n                    \"ws://127.0.0.1:%d/\" % port, connect_timeout=3600\n                )",
        "begin_line": 368,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data#378",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data(self)",
        "snippet": "    def test_websocket_close_buffered_data(self):\n        ws = yield websocket_connect(\"ws://127.0.0.1:%d/echo\" % self.get_http_port())\n        ws.write_message(\"hello\")\n        ws.write_message(\"world\")\n        # Close the underlying stream.\n        ws.stream.close()",
        "begin_line": 378,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_headers#386",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_headers(self)",
        "snippet": "    def test_websocket_headers(self):\n        # Ensure that arbitrary headers can be passed through websocket_connect.\n        ws = yield websocket_connect(\n            HTTPRequest(\n                \"ws://127.0.0.1:%d/header\" % self.get_http_port(),\n                headers={\"X-Test\": \"hello\"},\n            )\n        )\n        response = yield ws.read_message()\n        self.assertEqual(response, \"hello\")",
        "begin_line": 386,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo#398",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo(self)",
        "snippet": "    def test_websocket_header_echo(self):\n        # Ensure that headers can be returned in the response.\n        # Specifically, that arbitrary headers passed through websocket_connect\n        # can be returned.\n        ws = yield websocket_connect(\n            HTTPRequest(\n                \"ws://127.0.0.1:%d/header_echo\" % self.get_http_port(),\n                headers={\"X-Test-Hello\": \"hello\"},\n            )\n        )\n        self.assertEqual(ws.headers.get(\"X-Test-Hello\"), \"hello\")\n        self.assertEqual(\n            ws.headers.get(\"X-Extra-Response-Header\"), \"Extra-Response-Value\"\n        )",
        "begin_line": 398,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_server_close_reason#414",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_server_close_reason(self)",
        "snippet": "    def test_server_close_reason(self):\n        ws = yield self.ws_connect(\"/close_reason\")\n        msg = yield ws.read_message()\n        # A message of None means the other side closed the connection.\n        self.assertIs(msg, None)\n        self.assertEqual(ws.close_code, 1001)\n        self.assertEqual(ws.close_reason, \"goodbye\")\n        # The on_close callback is called no matter which side closed.\n        code, reason = yield self.close_future\n        # The client echoed the close code it received to the server,\n        # so the server's close code (returned via close_future) is\n        # the same.\n        self.assertEqual(code, 1001)",
        "begin_line": 414,
        "end_line": 426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_client_close_reason#429",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_client_close_reason(self)",
        "snippet": "    def test_client_close_reason(self):\n        ws = yield self.ws_connect(\"/echo\")\n        ws.close(1001, \"goodbye\")\n        code, reason = yield self.close_future\n        self.assertEqual(code, 1001)\n        self.assertEqual(reason, \"goodbye\")",
        "begin_line": 429,
        "end_line": 434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_write_after_close#437",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_write_after_close(self)",
        "snippet": "    def test_write_after_close(self):\n        ws = yield self.ws_connect(\"/close_reason\")\n        msg = yield ws.read_message()\n        self.assertIs(msg, None)\n        with self.assertRaises(WebSocketClosedError):\n            ws.write_message(\"hello\")",
        "begin_line": 437,
        "end_line": 442,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_async_prepare#445",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_async_prepare(self)",
        "snippet": "    def test_async_prepare(self):\n        # Previously, an async prepare method triggered a bug that would\n        # result in a timeout on test shutdown (and a memory leak).\n        ws = yield self.ws_connect(\"/async_prepare\")\n        ws.write_message(\"hello\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello\")",
        "begin_line": 445,
        "end_line": 451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_path_args#454",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_path_args(self)",
        "snippet": "    def test_path_args(self):\n        ws = yield self.ws_connect(\"/path_args/hello\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello\")",
        "begin_line": 454,
        "end_line": 457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_coroutine#460",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_coroutine(self)",
        "snippet": "    def test_coroutine(self):\n        ws = yield self.ws_connect(\"/coroutine\")\n        # Send both messages immediately, coroutine must process one at a time.\n        yield ws.write_message(\"hello1\")\n        yield ws.write_message(\"hello2\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello1\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello2\")",
        "begin_line": 460,
        "end_line": 468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path#471",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path(self)",
        "snippet": "    def test_check_origin_valid_no_path(self):\n        port = self.get_http_port()\n\n        url = \"ws://127.0.0.1:%d/echo\" % port\n        headers = {\"Origin\": \"http://127.0.0.1:%d\" % port}\n\n        ws = yield websocket_connect(HTTPRequest(url, headers=headers))\n        ws.write_message(\"hello\")\n        response = yield ws.read_message()\n        self.assertEqual(response, \"hello\")",
        "begin_line": 471,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path#483",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path(self)",
        "snippet": "    def test_check_origin_valid_with_path(self):\n        port = self.get_http_port()\n\n        url = \"ws://127.0.0.1:%d/echo\" % port\n        headers = {\"Origin\": \"http://127.0.0.1:%d/something\" % port}\n\n        ws = yield websocket_connect(HTTPRequest(url, headers=headers))\n        ws.write_message(\"hello\")\n        response = yield ws.read_message()\n        self.assertEqual(response, \"hello\")",
        "begin_line": 483,
        "end_line": 492,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url#495",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url(self)",
        "snippet": "    def test_check_origin_invalid_partial_url(self):\n        port = self.get_http_port()\n\n        url = \"ws://127.0.0.1:%d/echo\" % port\n        headers = {\"Origin\": \"127.0.0.1:%d\" % port}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers))\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 495,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid#506",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid(self)",
        "snippet": "    def test_check_origin_invalid(self):\n        port = self.get_http_port()\n\n        url = \"ws://127.0.0.1:%d/echo\" % port\n        # Host is 127.0.0.1, which should not be accessible from some other\n        # domain\n        headers = {\"Origin\": \"http://somewhereelse.com\"}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers))\n\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 506,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains#520",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains(self)",
        "snippet": "    def test_check_origin_invalid_subdomains(self):\n        port = self.get_http_port()\n\n        url = \"ws://localhost:%d/echo\" % port\n        # Subdomains should be disallowed by default.  If we could pass a\n        # resolver to websocket_connect we could test sibling domains as well.\n        headers = {\"Origin\": \"http://subtenant.localhost\"}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers))\n\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 520,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_subprotocols#534",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_subprotocols(self)",
        "snippet": "    def test_subprotocols(self):\n        ws = yield self.ws_connect(\n            \"/subprotocol\", subprotocols=[\"badproto\", \"goodproto\"]\n        )\n        self.assertEqual(ws.selected_subprotocol, \"goodproto\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"subprotocol=goodproto\")",
        "begin_line": 534,
        "end_line": 540,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_subprotocols_not_offered#543",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_subprotocols_not_offered(self)",
        "snippet": "    def test_subprotocols_not_offered(self):\n        ws = yield self.ws_connect(\"/subprotocol\")\n        self.assertIs(ws.selected_subprotocol, None)\n        res = yield ws.read_message()\n        self.assertEqual(res, \"subprotocol=None\")",
        "begin_line": 543,
        "end_line": 547,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_open_coroutine#550",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_open_coroutine(self)",
        "snippet": "    def test_open_coroutine(self):\n        self.message_sent = Event()\n        ws = yield self.ws_connect(\"/open_coroutine\")\n        yield ws.write_message(\"hello\")\n        self.message_sent.set()\n        res = yield ws.read_message()\n        self.assertEqual(res, \"ok\")",
        "begin_line": 550,
        "end_line": 556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_error_in_open#559",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_error_in_open(self)",
        "snippet": "    def test_error_in_open(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            ws = yield self.ws_connect(\"/error_in_open\")\n            res = yield ws.read_message()\n        self.assertIsNone(res)",
        "begin_line": 559,
        "end_line": 563,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_error_in_async_open#566",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_error_in_async_open(self)",
        "snippet": "    def test_error_in_async_open(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            ws = yield self.ws_connect(\"/error_in_async_open\")\n            res = yield ws.read_message()\n        self.assertIsNone(res)",
        "begin_line": 566,
        "end_line": 570,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_nodelay#573",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_nodelay(self)",
        "snippet": "    def test_nodelay(self):\n        ws = yield self.ws_connect(\"/nodelay\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello\")",
        "begin_line": 573,
        "end_line": 576,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.NativeCoroutineOnMessageHandler.initialize#580",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.NativeCoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.NativeCoroutineOnMessageHandler.initialize(self, **kwargs)",
        "snippet": "    def initialize(self, **kwargs):\n        super().initialize(**kwargs)\n        self.sleeping = 0",
        "begin_line": 580,
        "end_line": 582,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.NativeCoroutineOnMessageHandler.on_message#584",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.NativeCoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.NativeCoroutineOnMessageHandler.on_message(self, message)",
        "snippet": "    async def on_message(self, message):\n        if self.sleeping > 0:\n            self.write_message(\"another coroutine is already sleeping\")\n        self.sleeping += 1\n        await gen.sleep(0.01)\n        self.sleeping -= 1\n        self.write_message(message)",
        "begin_line": 584,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app#594",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest",
        "signature": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([(\"/native\", NativeCoroutineOnMessageHandler)])",
        "begin_line": 594,
        "end_line": 595,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine#598",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest",
        "signature": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine(self)",
        "snippet": "    def test_native_coroutine(self):\n        ws = yield self.ws_connect(\"/native\")\n        # Send both messages immediately, coroutine must process one at a time.\n        yield ws.write_message(\"hello1\")\n        yield ws.write_message(\"hello2\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello1\")\n        res = yield ws.read_message()\n        self.assertEqual(res, \"hello2\")",
        "begin_line": 598,
        "end_line": 606,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_app#612",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_app(self)",
        "snippet": "    def get_app(self):\n        class LimitedHandler(TestWebSocketHandler):\n            @property\n            def max_message_size(self):\n                return 1024\n\n            def on_message(self, message):\n                self.write_message(str(len(message)))\n\n        return Application(\n            [\n                (\n                    \"/echo\",\n                    EchoHandler,\n                    dict(compression_options=self.get_server_compression_options()),\n                ),\n                (\n                    \"/limited\",\n                    LimitedHandler,\n                    dict(compression_options=self.get_server_compression_options()),\n                ),\n            ]\n        )",
        "begin_line": 612,
        "end_line": 634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.LimitedHandler.get_app#612",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.LimitedHandler",
        "signature": "tornado.test.websocket_test.LimitedHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class LimitedHandler(TestWebSocketHandler):\n            @property\n            def max_message_size(self):\n                return 1024\n\n            def on_message(self, message):\n                self.write_message(str(len(message)))\n\n        return Application(\n            [\n                (\n                    \"/echo\",\n                    EchoHandler,\n                    dict(compression_options=self.get_server_compression_options()),\n                ),\n                (\n                    \"/limited\",\n                    LimitedHandler,\n                    dict(compression_options=self.get_server_compression_options()),\n                ),\n            ]\n        )",
        "begin_line": 612,
        "end_line": 634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.LimitedHandler.max_message_size#615",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.LimitedHandler",
        "signature": "tornado.test.websocket_test.LimitedHandler.max_message_size(self)",
        "snippet": "            def max_message_size(self):\n                return 1024",
        "begin_line": 615,
        "end_line": 616,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.LimitedHandler.on_message#618",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.LimitedHandler",
        "signature": "tornado.test.websocket_test.LimitedHandler.on_message(self, message)",
        "snippet": "            def on_message(self, message):\n                self.write_message(str(len(message)))",
        "begin_line": 618,
        "end_line": 619,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options#636",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return None",
        "begin_line": 636,
        "end_line": 637,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options#639",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return None",
        "begin_line": 639,
        "end_line": 640,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.test_message_sizes#643",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.test_message_sizes(self)",
        "snippet": "    def test_message_sizes(self):\n        ws = yield self.ws_connect(\n            \"/echo\", compression_options=self.get_client_compression_options()\n        )\n        # Send the same message three times so we can measure the\n        # effect of the context_takeover options.\n        for i in range(3):\n            ws.write_message(self.MESSAGE)\n            response = yield ws.read_message()\n            self.assertEqual(response, self.MESSAGE)\n        self.assertEqual(ws.protocol._message_bytes_out, len(self.MESSAGE) * 3)\n        self.assertEqual(ws.protocol._message_bytes_in, len(self.MESSAGE) * 3)\n        self.verify_wire_bytes(ws.protocol._wire_bytes_in, ws.protocol._wire_bytes_out)",
        "begin_line": 643,
        "end_line": 655,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.test_size_limit#658",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.test_size_limit(self)",
        "snippet": "    def test_size_limit(self):\n        ws = yield self.ws_connect(\n            \"/limited\", compression_options=self.get_client_compression_options()\n        )\n        # Small messages pass through.\n        ws.write_message(\"a\" * 128)\n        response = yield ws.read_message()\n        self.assertEqual(response, \"128\")\n        # This message is too big after decompression, but it compresses\n        # down to a size that will pass the initial checks.\n        ws.write_message(\"a\" * 2048)\n        response = yield ws.read_message()\n        self.assertIsNone(response)",
        "begin_line": 658,
        "end_line": 670,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes#676",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.UncompressedTestMixin",
        "signature": "tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes(self, bytes_in, bytes_out)",
        "snippet": "    def verify_wire_bytes(self, bytes_in, bytes_out):\n        # Bytes out includes the 4-byte mask key per message.\n        self.assertEqual(bytes_out, 3 * (len(self.MESSAGE) + 6))\n        self.assertEqual(bytes_in, 3 * (len(self.MESSAGE) + 2))",
        "begin_line": 676,
        "end_line": 679,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options#688",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerOnlyCompressionTest",
        "signature": "tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return {}",
        "begin_line": 688,
        "end_line": 689,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options#693",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientOnlyCompressionTest",
        "signature": "tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return {}",
        "begin_line": 693,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options#698",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return {}",
        "begin_line": 698,
        "end_line": 699,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options#701",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return {}",
        "begin_line": 701,
        "end_line": 702,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes#704",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes(self, bytes_in, bytes_out)",
        "snippet": "    def verify_wire_bytes(self, bytes_in, bytes_out):\n        self.assertLess(bytes_out, 3 * (len(self.MESSAGE) + 6))\n        self.assertLess(bytes_in, 3 * (len(self.MESSAGE) + 2))\n        # Bytes out includes the 4 bytes mask key per message.\n        self.assertEqual(bytes_out, bytes_in + 12)",
        "begin_line": 704,
        "end_line": 708,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaskFunctionMixin.test_mask#713",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaskFunctionMixin",
        "signature": "tornado.test.websocket_test.MaskFunctionMixin.test_mask(self)",
        "snippet": "    def test_mask(self):\n        self.assertEqual(self.mask(b\"abcd\", b\"\"), b\"\")\n        self.assertEqual(self.mask(b\"abcd\", b\"b\"), b\"\\x03\")\n        self.assertEqual(self.mask(b\"abcd\", b\"54321\"), b\"TVPVP\")\n        self.assertEqual(self.mask(b\"ZXCV\", b\"98765432\"), b\"c`t`olpd\")\n        # Include test cases with \\x00 bytes (to ensure that the C\n        # extension isn't depending on null-terminated strings) and\n        # bytes with the high bit set (to smoke out signedness issues).\n        self.assertEqual(\n            self.mask(b\"\\x00\\x01\\x02\\x03\", b\"\\xff\\xfb\\xfd\\xfc\\xfe\\xfa\"),\n            b\"\\xff\\xfa\\xff\\xff\\xfe\\xfb\",\n        )\n        self.assertEqual(\n            self.mask(b\"\\xff\\xfb\\xfd\\xfc\", b\"\\x00\\x01\\x02\\x03\\x04\\x05\"),\n            b\"\\xff\\xfa\\xff\\xff\\xfb\\xfe\",\n        )",
        "begin_line": 713,
        "end_line": 728,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PythonMaskFunctionTest.mask#732",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PythonMaskFunctionTest",
        "signature": "tornado.test.websocket_test.PythonMaskFunctionTest.mask(self, mask, data)",
        "snippet": "    def mask(self, mask, data):\n        return _websocket_mask_python(mask, data)",
        "begin_line": 732,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CythonMaskFunctionTest.mask#738",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CythonMaskFunctionTest",
        "signature": "tornado.test.websocket_test.CythonMaskFunctionTest.mask(self, mask, data)",
        "snippet": "    def mask(self, mask, data):\n        return speedups.websocket_mask(mask, data)",
        "begin_line": 738,
        "end_line": 739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerPeriodicPingTest.get_app#743",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ServerPeriodicPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_pong(self, data):\n                self.write_message(\"got pong\")\n\n        return Application([(\"/\", PingHandler)], websocket_ping_interval=0.01)",
        "begin_line": 743,
        "end_line": 748,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#743",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_pong(self, data):\n                self.write_message(\"got pong\")\n\n        return Application([(\"/\", PingHandler)], websocket_ping_interval=0.01)",
        "begin_line": 743,
        "end_line": 748,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_pong#745",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_pong(self, data)",
        "snippet": "            def on_pong(self, data):\n                self.write_message(\"got pong\")",
        "begin_line": 745,
        "end_line": 746,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping#751",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping(self)",
        "snippet": "    def test_server_ping(self):\n        ws = yield self.ws_connect(\"/\")\n        for i in range(3):\n            response = yield ws.read_message()\n            self.assertEqual(response, \"got pong\")",
        "begin_line": 751,
        "end_line": 755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientPeriodicPingTest.get_app#760",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ClientPeriodicPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(\"got ping\")\n\n        return Application([(\"/\", PingHandler)])",
        "begin_line": 760,
        "end_line": 765,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#760",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(\"got ping\")\n\n        return Application([(\"/\", PingHandler)])",
        "begin_line": 760,
        "end_line": 765,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_ping#762",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_ping(self, data)",
        "snippet": "            def on_ping(self, data):\n                self.write_message(\"got ping\")",
        "begin_line": 762,
        "end_line": 763,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping#768",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping(self)",
        "snippet": "    def test_client_ping(self):\n        ws = yield self.ws_connect(\"/\", ping_interval=0.01)\n        for i in range(3):\n            response = yield ws.read_message()\n            self.assertEqual(response, \"got ping\")",
        "begin_line": 768,
        "end_line": 772,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ManualPingTest.get_app#777",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ManualPingTest",
        "signature": "tornado.test.websocket_test.ManualPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(data, binary=isinstance(data, bytes))\n\n        return Application([(\"/\", PingHandler)])",
        "begin_line": 777,
        "end_line": 782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#777",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(data, binary=isinstance(data, bytes))\n\n        return Application([(\"/\", PingHandler)])",
        "begin_line": 777,
        "end_line": 782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_ping#779",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_ping(self, data)",
        "snippet": "            def on_ping(self, data):\n                self.write_message(data, binary=isinstance(data, bytes))",
        "begin_line": 779,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ManualPingTest.test_manual_ping#785",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ManualPingTest",
        "signature": "tornado.test.websocket_test.ManualPingTest.test_manual_ping(self)",
        "snippet": "    def test_manual_ping(self):\n        ws = yield self.ws_connect(\"/\")\n\n        self.assertRaises(ValueError, ws.ping, \"a\" * 126)\n\n        ws.ping(\"hello\")\n        resp = yield ws.read_message()\n        # on_ping always sees bytes.\n        self.assertEqual(resp, b\"hello\")\n\n        ws.ping(b\"binary hello\")\n        resp = yield ws.read_message()\n        self.assertEqual(resp, b\"binary hello\")",
        "begin_line": 785,
        "end_line": 797,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaxMessageSizeTest.get_app#801",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaxMessageSizeTest",
        "signature": "tornado.test.websocket_test.MaxMessageSizeTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([(\"/\", EchoHandler)], websocket_max_message_size=1024)",
        "begin_line": 801,
        "end_line": 802,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaxMessageSizeTest.test_large_message#805",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaxMessageSizeTest",
        "signature": "tornado.test.websocket_test.MaxMessageSizeTest.test_large_message(self)",
        "snippet": "    def test_large_message(self):\n        ws = yield self.ws_connect(\"/\")\n\n        # Write a message that is allowed.\n        msg = \"a\" * 1024\n        ws.write_message(msg)\n        resp = yield ws.read_message()\n        self.assertEqual(resp, msg)\n\n        # Write a message that is too large.\n        ws.write_message(msg + \"b\")\n        resp = yield ws.read_message()\n        # A message of None means the other side closed the connection.\n        self.assertIs(resp, None)\n        self.assertEqual(ws.close_code, 1009)\n        self.assertEqual(ws.close_reason, \"message too big\")",
        "begin_line": 805,
        "end_line": 820,
        "comment": "",
        "is_bug": false
    }
]