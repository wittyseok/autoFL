[
    {
        "name": "test.parameter_test.Baz.run#64",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Baz",
        "signature": "test.parameter_test.Baz.run(self)",
        "snippet": "    def run(self):\n        Baz._val = self.bool\n        Baz._val_true = self.bool_true\n        Baz._val_explicit = self.bool_explicit",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ListFoo.run#73",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ListFoo",
        "signature": "test.parameter_test.ListFoo.run(self)",
        "snippet": "    def run(self):\n        ListFoo._val = self.my_list",
        "begin_line": 73,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TupleFoo.run#80",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TupleFoo",
        "signature": "test.parameter_test.TupleFoo.run(self)",
        "snippet": "    def run(self):\n        TupleFoo._val = self.my_tuple",
        "begin_line": 80,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ForgotParam.run#87",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ForgotParam",
        "signature": "test.parameter_test.ForgotParam.run(self)",
        "snippet": "    def run(self):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ForgotParamDep.requires#93",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ForgotParamDep",
        "signature": "test.parameter_test.ForgotParamDep.requires(self)",
        "snippet": "    def requires(self):\n        return ForgotParam()",
        "begin_line": 93,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ForgotParamDep.run#96",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ForgotParamDep",
        "signature": "test.parameter_test.ForgotParamDep.run(self)",
        "snippet": "    def run(self):\n        pass",
        "begin_line": 96,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.BananaDep.output#104",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.BananaDep",
        "signature": "test.parameter_test.BananaDep.output(self)",
        "snippet": "    def output(self):\n        return MockTarget('banana-dep-%s-%s' % (self.x, self.y))",
        "begin_line": 104,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.BananaDep.run#107",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.BananaDep",
        "signature": "test.parameter_test.BananaDep.run(self)",
        "snippet": "    def run(self):\n        self.output().open('w').close()",
        "begin_line": 107,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Banana.requires#116",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Banana",
        "signature": "test.parameter_test.Banana.requires(self)",
        "snippet": "    def requires(self):\n        if self.style is None:\n            return BananaDep()  # will fail\n        elif self.style == 'x-arg':\n            return BananaDep(self.x)\n        elif self.style == 'y-kwarg':\n            return BananaDep(y=self.y)\n        elif self.style == 'x-arg-y-arg':\n            return BananaDep(self.x, self.y)\n        else:\n            raise Exception('unknown style')",
        "begin_line": 116,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Banana.output#128",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Banana",
        "signature": "test.parameter_test.Banana.output(self)",
        "snippet": "    def output(self):\n        return MockTarget('banana-%s-%s' % (self.x, self.y))",
        "begin_line": 128,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Banana.run#131",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Banana",
        "signature": "test.parameter_test.Banana.run(self)",
        "snippet": "    def run(self):\n        self.output().open('w').close()",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test._value#154",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test",
        "signature": "test.parameter_test._value(parameter)",
        "snippet": "def _value(parameter):\n    \"\"\"\n    A hackish way to get the \"value\" of a parameter.\n\n    Previously Parameter exposed ``param_obj._value``. This is replacement for\n    that so I don't need to rewrite all test cases.\n    \"\"\"\n    class DummyLuigiTask(luigi.Task):\n        param = parameter\n\n    return DummyLuigiTask().param",
        "begin_line": 154,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.DummyLuigiTask._value#154",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.DummyLuigiTask",
        "signature": "test.parameter_test.DummyLuigiTask._value(parameter)",
        "snippet": "def _value(parameter):\n    \"\"\"\n    A hackish way to get the \"value\" of a parameter.\n\n    Previously Parameter exposed ``param_obj._value``. This is replacement for\n    that so I don't need to rewrite all test cases.\n    \"\"\"\n    class DummyLuigiTask(luigi.Task):\n        param = parameter\n\n    return DummyLuigiTask().param",
        "begin_line": 154,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_default_param#169",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_default_param(self)",
        "snippet": "    def test_default_param(self):\n        self.assertEqual(WithDefault().x, 'xyz')",
        "begin_line": 169,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_missing_param#172",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_missing_param(self)",
        "snippet": "    def test_missing_param(self):\n        def create_a():\n            return A()\n        self.assertRaises(luigi.parameter.MissingParameterException, create_a)",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#173",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A()",
        "begin_line": 173,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_unknown_param#177",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_unknown_param(self)",
        "snippet": "    def test_unknown_param(self):\n        def create_a():\n            return A(p=5, q=4)\n        self.assertRaises(luigi.parameter.UnknownParameterException, create_a)",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#178",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A(p=5, q=4)",
        "begin_line": 178,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_unknown_param_2#182",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_unknown_param_2(self)",
        "snippet": "    def test_unknown_param_2(self):\n        def create_a():\n            return A(1, 2, 3)\n        self.assertRaises(luigi.parameter.UnknownParameterException, create_a)",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#183",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A(1, 2, 3)",
        "begin_line": 183,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_duplicated_param#187",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_duplicated_param(self)",
        "snippet": "    def test_duplicated_param(self):\n        def create_a():\n            return A(5, p=7)\n        self.assertRaises(luigi.parameter.DuplicateParameterException, create_a)",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#188",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A(5, p=7)",
        "begin_line": 188,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parameter_registration#192",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parameter_registration(self)",
        "snippet": "    def test_parameter_registration(self):\n        self.assertEqual(len(Foo.get_params()), 2)",
        "begin_line": 192,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_task_creation#195",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_task_creation(self)",
        "snippet": "    def test_task_creation(self):\n        f = Foo(\"barval\", p2=5)\n        self.assertEqual(len(f.get_params()), 2)\n        self.assertEqual(f.bar, \"barval\")\n        self.assertEqual(f.p2, 5)\n        self.assertEqual(f.not_a_param, \"lol\")",
        "begin_line": 195,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_bool_parsing#202",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_bool_parsing(self)",
        "snippet": "    def test_bool_parsing(self):\n        self.run_locally(['Baz'])\n        self.assertFalse(Baz._val)\n        self.assertTrue(Baz._val_true)\n        self.assertFalse(Baz._val_explicit)\n\n        self.run_locally(['Baz', '--bool', '--bool-true'])\n        self.assertTrue(Baz._val)\n        self.assertTrue(Baz._val_true)\n\n        self.run_locally(['Baz', '--bool-explicit', 'true'])\n        self.assertTrue(Baz._val_explicit)\n\n        self.run_locally(['Baz', '--bool-explicit', 'false'])\n        self.assertFalse(Baz._val_explicit)",
        "begin_line": 202,
        "end_line": 216,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_bool_default#218",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_bool_default(self)",
        "snippet": "    def test_bool_default(self):\n        self.assertTrue(WithDefaultTrue().x)\n        self.assertFalse(WithDefaultFalse().x)",
        "begin_line": 218,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_bool_coerce#222",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_bool_coerce(self)",
        "snippet": "    def test_bool_coerce(self):\n        self.assertTrue(WithDefaultTrue(x='true').x)\n        self.assertFalse(WithDefaultTrue(x='false').x)",
        "begin_line": 222,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_bool_no_coerce_none#226",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_bool_no_coerce_none(self)",
        "snippet": "    def test_bool_no_coerce_none(self):\n        self.assertIsNone(WithDefaultTrue(x=None).x)",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_forgot_param#229",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_forgot_param(self)",
        "snippet": "    def test_forgot_param(self):\n        self.assertRaises(luigi.parameter.MissingParameterException, self.run_locally, ['ForgotParam'],)",
        "begin_line": 229,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_forgot_param_in_dep#233",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_forgot_param_in_dep(self, emails)",
        "snippet": "    def test_forgot_param_in_dep(self, emails):\n        # A programmatic missing parameter will cause an error email to be sent\n        self.run_locally(['ForgotParamDep'])\n        self.assertNotEqual(emails, [])",
        "begin_line": 233,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_default_param_cmdline#238",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_default_param_cmdline(self)",
        "snippet": "    def test_default_param_cmdline(self):\n        self.assertEqual(WithDefault().x, 'xyz')",
        "begin_line": 238,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_default_param_cmdline_2#241",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_default_param_cmdline_2(self)",
        "snippet": "    def test_default_param_cmdline_2(self):\n        self.assertEqual(WithDefault().x, 'xyz')",
        "begin_line": 241,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_insignificant_parameter#244",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_insignificant_parameter(self)",
        "snippet": "    def test_insignificant_parameter(self):\n        class InsignificantParameterTask(luigi.Task):\n            foo = luigi.Parameter(significant=False, default='foo_default')\n            bar = luigi.Parameter()\n\n        t1 = InsignificantParameterTask(foo='x', bar='y')\n        self.assertEqual(str(t1), 'InsignificantParameterTask(bar=y)')\n\n        t2 = InsignificantParameterTask('u', 'z')\n        self.assertEqual(t2.foo, 'u')\n        self.assertEqual(t2.bar, 'z')\n        self.assertEqual(str(t2), 'InsignificantParameterTask(bar=z)')",
        "begin_line": 244,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.InsignificantParameterTask.test_insignificant_parameter#244",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.InsignificantParameterTask",
        "signature": "test.parameter_test.InsignificantParameterTask.test_insignificant_parameter(self)",
        "snippet": "    def test_insignificant_parameter(self):\n        class InsignificantParameterTask(luigi.Task):\n            foo = luigi.Parameter(significant=False, default='foo_default')\n            bar = luigi.Parameter()\n\n        t1 = InsignificantParameterTask(foo='x', bar='y')\n        self.assertEqual(str(t1), 'InsignificantParameterTask(bar=y)')\n\n        t2 = InsignificantParameterTask('u', 'z')\n        self.assertEqual(t2.foo, 'u')\n        self.assertEqual(t2.bar, 'z')\n        self.assertEqual(str(t2), 'InsignificantParameterTask(bar=z)')",
        "begin_line": 244,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_local_significant_param#257",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_local_significant_param(self)",
        "snippet": "    def test_local_significant_param(self):\n        \"\"\" Obviously, if anything should be positional, so should local\n        significant parameters \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--label-company=disney\"\n            x = luigi.Parameter(significant=True)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 257,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_significant_param#257",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_significant_param(self)",
        "snippet": "    def test_local_significant_param(self):\n        \"\"\" Obviously, if anything should be positional, so should local\n        significant parameters \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--label-company=disney\"\n            x = luigi.Parameter(significant=True)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 257,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_local_insignificant_param#268",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_local_insignificant_param(self)",
        "snippet": "    def test_local_insignificant_param(self):\n        \"\"\" Ensure we have the same behavior as in before a78338c  \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=True\"\n            x = luigi.Parameter(significant=False)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 268,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_insignificant_param#268",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_insignificant_param(self)",
        "snippet": "    def test_local_insignificant_param(self):\n        \"\"\" Ensure we have the same behavior as in before a78338c  \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=True\"\n            x = luigi.Parameter(significant=False)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 268,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_nonpositional_param#278",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_nonpositional_param(self)",
        "snippet": "    def test_nonpositional_param(self):\n        \"\"\" Ensure we have the same behavior as in before a78338c  \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=10\"\n            x = luigi.Parameter(significant=False, positional=False)\n\n        MyTask(x='arg')\n        self.assertRaises(luigi.parameter.UnknownParameterException,\n                          lambda: MyTask('arg'))",
        "begin_line": 278,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_nonpositional_param#278",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_nonpositional_param(self)",
        "snippet": "    def test_nonpositional_param(self):\n        \"\"\" Ensure we have the same behavior as in before a78338c  \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=10\"\n            x = luigi.Parameter(significant=False, positional=False)\n\n        MyTask(x='arg')\n        self.assertRaises(luigi.parameter.UnknownParameterException,\n                          lambda: MyTask('arg'))",
        "begin_line": 278,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_enum_param_valid#288",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_enum_param_valid(self)",
        "snippet": "    def test_enum_param_valid(self):\n        p = luigi.parameter.EnumParameter(enum=MyEnum)\n        self.assertEqual(MyEnum.A, p.parse('A'))",
        "begin_line": 288,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_enum_param_invalid#292",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_enum_param_invalid(self)",
        "snippet": "    def test_enum_param_invalid(self):\n        p = luigi.parameter.EnumParameter(enum=MyEnum)\n        self.assertRaises(ValueError, lambda: p.parse('B'))",
        "begin_line": 292,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_enum_param_missing#296",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_enum_param_missing(self)",
        "snippet": "    def test_enum_param_missing(self):\n        self.assertRaises(ParameterException, lambda: luigi.parameter.EnumParameter())",
        "begin_line": 296,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_list_serialize_parse#299",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_list_serialize_parse(self)",
        "snippet": "    def test_list_serialize_parse(self):\n        a = luigi.ListParameter()\n        b_list = [1, 2, 3]\n        self.assertEqual(b_list, a.parse(a.serialize(b_list)))",
        "begin_line": 299,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_tuple_serialize_parse#304",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_tuple_serialize_parse(self)",
        "snippet": "    def test_tuple_serialize_parse(self):\n        a = luigi.TupleParameter()\n        b_tuple = ((1, 2), (3, 4))\n        self.assertEqual(b_tuple, a.parse(a.serialize(b_tuple)))",
        "begin_line": 304,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parse_list_without_batch_method#309",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parse_list_without_batch_method(self)",
        "snippet": "    def test_parse_list_without_batch_method(self):\n        param = luigi.Parameter()\n        for xs in [], ['x'], ['x', 'y']:\n            self.assertRaises(NotImplementedError, param._parse_list, xs)",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parse_empty_list_raises_value_error#314",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parse_empty_list_raises_value_error(self)",
        "snippet": "    def test_parse_empty_list_raises_value_error(self):\n        for batch_method in (max, min, tuple, ','.join):\n            param = luigi.Parameter(batch_method=batch_method)\n            self.assertRaises(ValueError, param._parse_list, [])",
        "begin_line": 314,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parse_int_list_max#319",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parse_int_list_max(self)",
        "snippet": "    def test_parse_int_list_max(self):\n        param = luigi.IntParameter(batch_method=max)\n        self.assertEqual(17, param._parse_list(['7', '17', '5']))",
        "begin_line": 319,
        "end_line": 321,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parse_string_list_max#323",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parse_string_list_max(self)",
        "snippet": "    def test_parse_string_list_max(self):\n        param = luigi.Parameter(batch_method=max)\n        self.assertEqual('7', param._parse_list(['7', '17', '5']))",
        "begin_line": 323,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parse_list_as_tuple#327",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parse_list_as_tuple(self)",
        "snippet": "    def test_parse_list_as_tuple(self):\n        param = luigi.IntParameter(batch_method=tuple)\n        self.assertEqual((7, 17, 5), param._parse_list(['7', '17', '5']))",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_warn_on_default_none#332",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_warn_on_default_none(self, warnings)",
        "snippet": "    def test_warn_on_default_none(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.Parameter(default=None)\n\n        TestConfig()\n        warnings.warn.assert_called_once_with('Parameter \"param\" with value \"None\" is not of type string.')",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestConfig.test_warn_on_default_none#332",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestConfig",
        "signature": "test.parameter_test.TestConfig.test_warn_on_default_none(self, warnings)",
        "snippet": "    def test_warn_on_default_none(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.Parameter(default=None)\n\n        TestConfig()\n        warnings.warn.assert_called_once_with('Parameter \"param\" with value \"None\" is not of type string.')",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_no_warn_on_string#340",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_no_warn_on_string(self, warnings)",
        "snippet": "    def test_no_warn_on_string(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.Parameter(default=None)\n\n        TestConfig(param=\"str\")\n        warnings.warn.assert_not_called()",
        "begin_line": 340,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestConfig.test_no_warn_on_string#340",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestConfig",
        "signature": "test.parameter_test.TestConfig.test_no_warn_on_string(self, warnings)",
        "snippet": "    def test_no_warn_on_string(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.Parameter(default=None)\n\n        TestConfig(param=\"str\")\n        warnings.warn.assert_not_called()",
        "begin_line": 340,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_no_warn_on_none_in_optional#348",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_no_warn_on_none_in_optional(self, warnings)",
        "snippet": "    def test_no_warn_on_none_in_optional(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.OptionalParameter(default=None)\n\n        TestConfig()\n        warnings.warn.assert_not_called()",
        "begin_line": 348,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestConfig.test_no_warn_on_none_in_optional#348",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestConfig",
        "signature": "test.parameter_test.TestConfig.test_no_warn_on_none_in_optional(self, warnings)",
        "snippet": "    def test_no_warn_on_none_in_optional(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.OptionalParameter(default=None)\n\n        TestConfig()\n        warnings.warn.assert_not_called()",
        "begin_line": 348,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_no_warn_on_string_in_optional#356",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_no_warn_on_string_in_optional(self, warnings)",
        "snippet": "    def test_no_warn_on_string_in_optional(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.OptionalParameter(default=None)\n\n        TestConfig(param='value')\n        warnings.warn.assert_not_called()",
        "begin_line": 356,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestConfig.test_no_warn_on_string_in_optional#356",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestConfig",
        "signature": "test.parameter_test.TestConfig.test_no_warn_on_string_in_optional(self, warnings)",
        "snippet": "    def test_no_warn_on_string_in_optional(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.OptionalParameter(default=None)\n\n        TestConfig(param='value')\n        warnings.warn.assert_not_called()",
        "begin_line": 356,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_warn_on_bad_type_in_optional#364",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_warn_on_bad_type_in_optional(self, warnings)",
        "snippet": "    def test_warn_on_bad_type_in_optional(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.OptionalParameter()\n\n        TestConfig(param=1)\n        warnings.warn.assert_called_once_with('OptionalParameter \"param\" with value \"1\" is not of type string or None.')",
        "begin_line": 364,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestConfig.test_warn_on_bad_type_in_optional#364",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestConfig",
        "signature": "test.parameter_test.TestConfig.test_warn_on_bad_type_in_optional(self, warnings)",
        "snippet": "    def test_warn_on_bad_type_in_optional(self, warnings):\n        class TestConfig(luigi.Config):\n            param = luigi.OptionalParameter()\n\n        TestConfig(param=1)\n        warnings.warn.assert_called_once_with('OptionalParameter \"param\" with value \"1\" is not of type string or None.')",
        "begin_line": 364,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_optional_parameter_parse_none#371",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_optional_parameter_parse_none(self)",
        "snippet": "    def test_optional_parameter_parse_none(self):\n        self.assertIsNone(luigi.OptionalParameter().parse(''))",
        "begin_line": 371,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_optional_parameter_parse_string#374",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_optional_parameter_parse_string(self)",
        "snippet": "    def test_optional_parameter_parse_string(self):\n        self.assertEqual('test', luigi.OptionalParameter().parse('test'))",
        "begin_line": 374,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_optional_parameter_serialize_none#377",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_optional_parameter_serialize_none(self)",
        "snippet": "    def test_optional_parameter_serialize_none(self):\n        self.assertEqual('', luigi.OptionalParameter().serialize(None))",
        "begin_line": 377,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_optional_parameter_serialize_string#380",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_optional_parameter_serialize_string(self)",
        "snippet": "    def test_optional_parameter_serialize_string(self):\n        self.assertEqual('test', luigi.OptionalParameter().serialize('test'))",
        "begin_line": 380,
        "end_line": 381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_date#385",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_date(self)",
        "snippet": "    def test_date(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DateParameter()\n        p = luigi.parameter.DateParameter()\n        self.assertEqual(hash(Foo(args=datetime.date(2000, 1, 1)).args), hash(p.parse('2000-1-1')))",
        "begin_line": 385,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_date#385",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_date(self)",
        "snippet": "    def test_date(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DateParameter()\n        p = luigi.parameter.DateParameter()\n        self.assertEqual(hash(Foo(args=datetime.date(2000, 1, 1)).args), hash(p.parse('2000-1-1')))",
        "begin_line": 385,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_dateminute#391",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_dateminute(self)",
        "snippet": "    def test_dateminute(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DateMinuteParameter()\n        p = luigi.parameter.DateMinuteParameter()\n        self.assertEqual(hash(Foo(args=datetime.datetime(2000, 1, 1, 12, 0)).args), hash(p.parse('2000-1-1T1200')))",
        "begin_line": 391,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_dateminute#391",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_dateminute(self)",
        "snippet": "    def test_dateminute(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DateMinuteParameter()\n        p = luigi.parameter.DateMinuteParameter()\n        self.assertEqual(hash(Foo(args=datetime.datetime(2000, 1, 1, 12, 0)).args), hash(p.parse('2000-1-1T1200')))",
        "begin_line": 391,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_dateinterval#397",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_dateinterval(self)",
        "snippet": "    def test_dateinterval(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DateIntervalParameter()\n        p = luigi.parameter.DateIntervalParameter()\n        di = luigi.date_interval.Custom(datetime.date(2000, 1, 1), datetime.date(2000, 2, 12))\n        self.assertEqual(hash(Foo(args=di).args), hash(p.parse('2000-01-01-2000-02-12')))",
        "begin_line": 397,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_dateinterval#397",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_dateinterval(self)",
        "snippet": "    def test_dateinterval(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DateIntervalParameter()\n        p = luigi.parameter.DateIntervalParameter()\n        di = luigi.date_interval.Custom(datetime.date(2000, 1, 1), datetime.date(2000, 2, 12))\n        self.assertEqual(hash(Foo(args=di).args), hash(p.parse('2000-01-01-2000-02-12')))",
        "begin_line": 397,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_timedelta#404",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_timedelta(self)",
        "snippet": "    def test_timedelta(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TimeDeltaParameter()\n        p = luigi.parameter.TimeDeltaParameter()\n        self.assertEqual(hash(Foo(args=datetime.timedelta(days=2, hours=3, minutes=2)).args), hash(p.parse('P2DT3H2M')))",
        "begin_line": 404,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_timedelta#404",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_timedelta(self)",
        "snippet": "    def test_timedelta(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TimeDeltaParameter()\n        p = luigi.parameter.TimeDeltaParameter()\n        self.assertEqual(hash(Foo(args=datetime.timedelta(days=2, hours=3, minutes=2)).args), hash(p.parse('P2DT3H2M')))",
        "begin_line": 404,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_boolean#410",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_boolean(self)",
        "snippet": "    def test_boolean(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.BoolParameter()\n\n        p = luigi.parameter.BoolParameter()\n\n        self.assertEqual(hash(Foo(args=True).args), hash(p.parse('true')))\n        self.assertEqual(hash(Foo(args=False).args), hash(p.parse('false')))",
        "begin_line": 410,
        "end_line": 417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_boolean#410",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_boolean(self)",
        "snippet": "    def test_boolean(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.BoolParameter()\n\n        p = luigi.parameter.BoolParameter()\n\n        self.assertEqual(hash(Foo(args=True).args), hash(p.parse('true')))\n        self.assertEqual(hash(Foo(args=False).args), hash(p.parse('false')))",
        "begin_line": 410,
        "end_line": 417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_int#419",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_int(self)",
        "snippet": "    def test_int(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.IntParameter()\n\n        p = luigi.parameter.IntParameter()\n        self.assertEqual(hash(Foo(args=1).args), hash(p.parse('1')))",
        "begin_line": 419,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_int#419",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_int(self)",
        "snippet": "    def test_int(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.IntParameter()\n\n        p = luigi.parameter.IntParameter()\n        self.assertEqual(hash(Foo(args=1).args), hash(p.parse('1')))",
        "begin_line": 419,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_float#426",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_float(self)",
        "snippet": "    def test_float(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.FloatParameter()\n\n        p = luigi.parameter.FloatParameter()\n        self.assertEqual(hash(Foo(args=1.0).args), hash(p.parse('1')))",
        "begin_line": 426,
        "end_line": 431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_float#426",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_float(self)",
        "snippet": "    def test_float(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.FloatParameter()\n\n        p = luigi.parameter.FloatParameter()\n        self.assertEqual(hash(Foo(args=1.0).args), hash(p.parse('1')))",
        "begin_line": 426,
        "end_line": 431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_enum#433",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_enum(self)",
        "snippet": "    def test_enum(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.EnumParameter(enum=MyEnum)\n\n        p = luigi.parameter.EnumParameter(enum=MyEnum)\n        self.assertEqual(hash(Foo(args=MyEnum.A).args), hash(p.parse('A')))",
        "begin_line": 433,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_enum#433",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_enum(self)",
        "snippet": "    def test_enum(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.EnumParameter(enum=MyEnum)\n\n        p = luigi.parameter.EnumParameter(enum=MyEnum)\n        self.assertEqual(hash(Foo(args=MyEnum.A).args), hash(p.parse('A')))",
        "begin_line": 433,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_dict#440",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_dict(self)",
        "snippet": "    def test_dict(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DictParameter()\n\n        p = luigi.parameter.DictParameter()\n        self.assertEqual(hash(Foo(args=dict(foo=1, bar=\"hello\")).args), hash(p.parse('{\"foo\":1,\"bar\":\"hello\"}')))",
        "begin_line": 440,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_dict#440",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_dict(self)",
        "snippet": "    def test_dict(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.DictParameter()\n\n        p = luigi.parameter.DictParameter()\n        self.assertEqual(hash(Foo(args=dict(foo=1, bar=\"hello\")).args), hash(p.parse('{\"foo\":1,\"bar\":\"hello\"}')))",
        "begin_line": 440,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_list#447",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_list(self)",
        "snippet": "    def test_list(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.ListParameter()\n\n        p = luigi.parameter.ListParameter()\n        self.assertEqual(hash(Foo(args=[1, \"hello\"]).args), hash(p.normalize(p.parse('[1,\"hello\"]'))))",
        "begin_line": 447,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_list#447",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_list(self)",
        "snippet": "    def test_list(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.ListParameter()\n\n        p = luigi.parameter.ListParameter()\n        self.assertEqual(hash(Foo(args=[1, \"hello\"]).args), hash(p.normalize(p.parse('[1,\"hello\"]'))))",
        "begin_line": 447,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_list_dict#454",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_list_dict(self)",
        "snippet": "    def test_list_dict(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.ListParameter()\n\n        p = luigi.parameter.ListParameter()\n        self.assertEqual(hash(Foo(args=[{'foo': 'bar'}, {'doge': 'wow'}]).args),\n                         hash(p.normalize(p.parse('[{\"foo\": \"bar\"}, {\"doge\": \"wow\"}]'))))",
        "begin_line": 454,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_list_dict#454",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_list_dict(self)",
        "snippet": "    def test_list_dict(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.ListParameter()\n\n        p = luigi.parameter.ListParameter()\n        self.assertEqual(hash(Foo(args=[{'foo': 'bar'}, {'doge': 'wow'}]).args),\n                         hash(p.normalize(p.parse('[{\"foo\": \"bar\"}, {\"doge\": \"wow\"}]'))))",
        "begin_line": 454,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_list_nested#462",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_list_nested(self)",
        "snippet": "    def test_list_nested(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.ListParameter()\n\n        p = luigi.parameter.ListParameter()\n        self.assertEqual(hash(Foo(args=[['foo', 'bar'], ['doge', 'wow']]).args),\n                         hash(p.normalize(p.parse('[[\"foo\", \"bar\"], [\"doge\", \"wow\"]]'))))",
        "begin_line": 462,
        "end_line": 468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_list_nested#462",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_list_nested(self)",
        "snippet": "    def test_list_nested(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.ListParameter()\n\n        p = luigi.parameter.ListParameter()\n        self.assertEqual(hash(Foo(args=[['foo', 'bar'], ['doge', 'wow']]).args),\n                         hash(p.normalize(p.parse('[[\"foo\", \"bar\"], [\"doge\", \"wow\"]]'))))",
        "begin_line": 462,
        "end_line": 468,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_tuple#470",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_tuple(self)",
        "snippet": "    def test_tuple(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TupleParameter()\n\n        p = luigi.parameter.TupleParameter()\n        self.assertEqual(hash(Foo(args=(1, \"hello\")).args), hash(p.parse('(1,\"hello\")')))",
        "begin_line": 470,
        "end_line": 475,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_tuple#470",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_tuple(self)",
        "snippet": "    def test_tuple(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TupleParameter()\n\n        p = luigi.parameter.TupleParameter()\n        self.assertEqual(hash(Foo(args=(1, \"hello\")).args), hash(p.parse('(1,\"hello\")')))",
        "begin_line": 470,
        "end_line": 475,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_tuple_dict#477",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_tuple_dict(self)",
        "snippet": "    def test_tuple_dict(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TupleParameter()\n\n        p = luigi.parameter.TupleParameter()\n        self.assertEqual(hash(Foo(args=({'foo': 'bar'}, {'doge': 'wow'})).args),\n                         hash(p.normalize(p.parse('({\"foo\": \"bar\"}, {\"doge\": \"wow\"})'))))",
        "begin_line": 477,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_tuple_dict#477",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_tuple_dict(self)",
        "snippet": "    def test_tuple_dict(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TupleParameter()\n\n        p = luigi.parameter.TupleParameter()\n        self.assertEqual(hash(Foo(args=({'foo': 'bar'}, {'doge': 'wow'})).args),\n                         hash(p.normalize(p.parse('({\"foo\": \"bar\"}, {\"doge\": \"wow\"})'))))",
        "begin_line": 477,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_tuple_nested#485",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_tuple_nested(self)",
        "snippet": "    def test_tuple_nested(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TupleParameter()\n\n        p = luigi.parameter.TupleParameter()\n        self.assertEqual(hash(Foo(args=(('foo', 'bar'), ('doge', 'wow'))).args),\n                         hash(p.normalize(p.parse('((\"foo\", \"bar\"), (\"doge\", \"wow\"))'))))",
        "begin_line": 485,
        "end_line": 491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_tuple_nested#485",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_tuple_nested(self)",
        "snippet": "    def test_tuple_nested(self):\n        class Foo(luigi.Task):\n            args = luigi.parameter.TupleParameter()\n\n        p = luigi.parameter.TupleParameter()\n        self.assertEqual(hash(Foo(args=(('foo', 'bar'), ('doge', 'wow'))).args),\n                         hash(p.normalize(p.parse('((\"foo\", \"bar\"), (\"doge\", \"wow\"))'))))",
        "begin_line": 485,
        "end_line": 491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParametersHashability.test_task#493",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParametersHashability",
        "signature": "test.parameter_test.TestParametersHashability.test_task(self)",
        "snippet": "    def test_task(self):\n        class Bar(luigi.Task):\n            pass\n\n        class Foo(luigi.Task):\n            args = luigi.parameter.TaskParameter()\n\n        p = luigi.parameter.TaskParameter()\n        self.assertEqual(hash(Foo(args=Bar).args), hash(p.parse('Bar')))",
        "begin_line": 493,
        "end_line": 501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Bar.test_task#493",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Bar",
        "signature": "test.parameter_test.Bar.test_task(self)",
        "snippet": "    def test_task(self):\n        class Bar(luigi.Task):\n            pass\n\n        class Foo(luigi.Task):\n            args = luigi.parameter.TaskParameter()\n\n        p = luigi.parameter.TaskParameter()\n        self.assertEqual(hash(Foo(args=Bar).args), hash(p.parse('Bar')))",
        "begin_line": 493,
        "end_line": 501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Foo.test_task#493",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Foo",
        "signature": "test.parameter_test.Foo.test_task(self)",
        "snippet": "    def test_task(self):\n        class Bar(luigi.Task):\n            pass\n\n        class Foo(luigi.Task):\n            args = luigi.parameter.TaskParameter()\n\n        p = luigi.parameter.TaskParameter()\n        self.assertEqual(hash(Foo(args=Bar).args), hash(p.parse('Bar')))",
        "begin_line": 493,
        "end_line": 501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.setUp#506",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.setUp(self)",
        "snippet": "    def setUp(self):\n        super(TestNewStyleGlobalParameters, self).setUp()\n        MockTarget.fs.clear()",
        "begin_line": 506,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.expect_keys#510",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.expect_keys(self, expected)",
        "snippet": "    def expect_keys(self, expected):\n        self.assertEqual(set(MockTarget.fs.get_all_data().keys()), set(expected))",
        "begin_line": 510,
        "end_line": 511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg#513",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg(self)",
        "snippet": "    def test_x_arg(self):\n        self.run_locally(['Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-def'])",
        "begin_line": 513,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override#517",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override(self)",
        "snippet": "    def test_x_arg_override(self):\n        self.run_locally(['Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg', '--BananaDep-y', 'xyz'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-xyz'])",
        "begin_line": 517,
        "end_line": 519,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override_stupid#521",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override_stupid(self)",
        "snippet": "    def test_x_arg_override_stupid(self):\n        self.run_locally(['Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg', '--BananaDep-x', 'blabla'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-def'])",
        "begin_line": 521,
        "end_line": 523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg#525",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg(self)",
        "snippet": "    def test_x_arg_y_arg(self):\n        self.run_locally(['Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg-y-arg'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-bar'])",
        "begin_line": 525,
        "end_line": 527,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override#529",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override(self)",
        "snippet": "    def test_x_arg_y_arg_override(self):\n        self.run_locally(['Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg-y-arg', '--BananaDep-y', 'xyz'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-bar'])",
        "begin_line": 529,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override_all#533",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override_all(self)",
        "snippet": "    def test_x_arg_y_arg_override_all(self):\n        self.run_locally(['Banana', '--x', 'foo',\n                          '--y', 'bar', '--style', 'x-arg-y-arg', '--BananaDep-y',\n                          'xyz', '--BananaDep-x', 'blabla'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-bar'])",
        "begin_line": 533,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override#539",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override(self)",
        "snippet": "    def test_y_arg_override(self):\n        self.run_locally(['Banana', '--x', 'foo', '--y', 'bar', '--style', 'y-kwarg', '--BananaDep-x', 'xyz'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-xyz-bar'])",
        "begin_line": 539,
        "end_line": 541,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_both#543",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_both(self)",
        "snippet": "    def test_y_arg_override_both(self):\n        self.run_locally(['Banana', '--x', 'foo',\n                          '--y', 'bar', '--style', 'y-kwarg', '--BananaDep-x', 'xyz',\n                          '--BananaDep-y', 'blah'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-xyz-bar'])",
        "begin_line": 543,
        "end_line": 547,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_banana#549",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_banana(self)",
        "snippet": "    def test_y_arg_override_banana(self):\n        self.run_locally(['Banana', '--y', 'bar', '--style', 'y-kwarg', '--BananaDep-x', 'xyz', '--Banana-x', 'baz'])\n        self.expect_keys(['banana-baz-bar', 'banana-dep-xyz-bar'])",
        "begin_line": 549,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.run_and_check#556",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.run_and_check(self, args)",
        "snippet": "    def run_and_check(self, args):\n        run_exit_status = self.run_locally(args)\n        self.assertTrue(run_exit_status)\n        return run_exit_status",
        "begin_line": 556,
        "end_line": 559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_1#562",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_1(self)",
        "snippet": "    def test_use_config_class_1(self):\n        self.assertEqual(MyConfig().mc_p, 99)\n        self.assertEqual(MyConfig().mc_q, 73)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 55)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 99)",
        "begin_line": 562,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_2#569",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_2(self)",
        "snippet": "    def test_use_config_class_2(self):\n        self.assertEqual(MyConfig().mc_p, 99)\n        self.assertEqual(MyConfig().mc_q, 73)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 55)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 99)",
        "begin_line": 569,
        "end_line": 573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_more_args#576",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_more_args(self)",
        "snippet": "    def test_use_config_class_more_args(self):\n        self.assertEqual(MyConfig().mc_p, 99)\n        self.assertEqual(MyConfig().mc_q, 42)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 55)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 123)",
        "begin_line": 576,
        "end_line": 580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration#584",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration(self)",
        "snippet": "    def test_use_config_class_with_configuration(self):\n        self.assertEqual(MyConfig().mc_p, 666)\n        self.assertEqual(MyConfig().mc_q, 777)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 555)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 99)",
        "begin_line": 584,
        "end_line": 588,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration_2#592",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration_2(self)",
        "snippet": "    def test_use_config_class_with_configuration_2(self):\n        self.assertEqual(MyConfig().mc_p, 222)\n        self.assertEqual(MyConfig().mc_q, 73)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 555)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 888)",
        "begin_line": 592,
        "end_line": 596,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_misc_1#598",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_misc_1(self)",
        "snippet": "    def test_misc_1(self):\n        class Dogs(luigi.Config):\n            n_dogs = luigi.IntParameter()\n\n        class CatsWithoutSection(luigi.Config):\n            use_cmdline_section = False\n            n_cats = luigi.IntParameter()\n\n        with luigi.cmdline_parser.CmdlineParser.global_instance(['--n-cats', '123', '--Dogs-n-dogs', '456', 'WithDefault'], allow_override=True):\n            self.assertEqual(Dogs().n_dogs, 456)\n            self.assertEqual(CatsWithoutSection().n_cats, 123)\n\n        with luigi.cmdline_parser.CmdlineParser.global_instance(['WithDefault', '--n-cats', '321', '--Dogs-n-dogs', '654'], allow_override=True):\n            self.assertEqual(Dogs().n_dogs, 654)\n            self.assertEqual(CatsWithoutSection().n_cats, 321)",
        "begin_line": 598,
        "end_line": 612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Dogs.test_misc_1#598",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Dogs",
        "signature": "test.parameter_test.Dogs.test_misc_1(self)",
        "snippet": "    def test_misc_1(self):\n        class Dogs(luigi.Config):\n            n_dogs = luigi.IntParameter()\n\n        class CatsWithoutSection(luigi.Config):\n            use_cmdline_section = False\n            n_cats = luigi.IntParameter()\n\n        with luigi.cmdline_parser.CmdlineParser.global_instance(['--n-cats', '123', '--Dogs-n-dogs', '456', 'WithDefault'], allow_override=True):\n            self.assertEqual(Dogs().n_dogs, 456)\n            self.assertEqual(CatsWithoutSection().n_cats, 123)\n\n        with luigi.cmdline_parser.CmdlineParser.global_instance(['WithDefault', '--n-cats', '321', '--Dogs-n-dogs', '654'], allow_override=True):\n            self.assertEqual(Dogs().n_dogs, 654)\n            self.assertEqual(CatsWithoutSection().n_cats, 321)",
        "begin_line": 598,
        "end_line": 612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.CatsWithoutSection.test_misc_1#598",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.CatsWithoutSection",
        "signature": "test.parameter_test.CatsWithoutSection.test_misc_1(self)",
        "snippet": "    def test_misc_1(self):\n        class Dogs(luigi.Config):\n            n_dogs = luigi.IntParameter()\n\n        class CatsWithoutSection(luigi.Config):\n            use_cmdline_section = False\n            n_cats = luigi.IntParameter()\n\n        with luigi.cmdline_parser.CmdlineParser.global_instance(['--n-cats', '123', '--Dogs-n-dogs', '456', 'WithDefault'], allow_override=True):\n            self.assertEqual(Dogs().n_dogs, 456)\n            self.assertEqual(CatsWithoutSection().n_cats, 123)\n\n        with luigi.cmdline_parser.CmdlineParser.global_instance(['WithDefault', '--n-cats', '321', '--Dogs-n-dogs', '654'], allow_override=True):\n            self.assertEqual(Dogs().n_dogs, 654)\n            self.assertEqual(CatsWithoutSection().n_cats, 321)",
        "begin_line": 598,
        "end_line": 612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_global_significant_param_warning#615",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_global_significant_param_warning(self)",
        "snippet": "        def test_global_significant_param_warning(self):\n            \"\"\" We don't want any kind of global param to be positional \"\"\"\n            with self.assertWarnsRegex(DeprecationWarning, 'is_global support is removed. Assuming positional=False'):\n                class MyTask(luigi.Task):\n                    # This could typically be called \"--test-dry-run\"\n                    x_g1 = luigi.Parameter(default='y', is_global=True, significant=True)\n\n            self.assertRaises(luigi.parameter.UnknownParameterException,\n                              lambda: MyTask('arg'))",
        "begin_line": 615,
        "end_line": 623,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_global_significant_param_warning#615",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_global_significant_param_warning(self)",
        "snippet": "        def test_global_significant_param_warning(self):\n            \"\"\" We don't want any kind of global param to be positional \"\"\"\n            with self.assertWarnsRegex(DeprecationWarning, 'is_global support is removed. Assuming positional=False'):\n                class MyTask(luigi.Task):\n                    # This could typically be called \"--test-dry-run\"\n                    x_g1 = luigi.Parameter(default='y', is_global=True, significant=True)\n\n            self.assertRaises(luigi.parameter.UnknownParameterException,\n                              lambda: MyTask('arg'))",
        "begin_line": 615,
        "end_line": 623,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_global_insignificant_param_warning#625",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_global_insignificant_param_warning(self)",
        "snippet": "        def test_global_insignificant_param_warning(self):\n            \"\"\" We don't want any kind of global param to be positional \"\"\"\n            with self.assertWarnsRegex(DeprecationWarning, 'is_global support is removed. Assuming positional=False'):\n                class MyTask(luigi.Task):\n                    # This could typically be \"--yarn-pool=development\"\n                    x_g2 = luigi.Parameter(default='y', is_global=True, significant=False)\n\n            self.assertRaises(luigi.parameter.UnknownParameterException,\n                              lambda: MyTask('arg'))",
        "begin_line": 625,
        "end_line": 633,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_global_insignificant_param_warning#625",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_global_insignificant_param_warning(self)",
        "snippet": "        def test_global_insignificant_param_warning(self):\n            \"\"\" We don't want any kind of global param to be positional \"\"\"\n            with self.assertWarnsRegex(DeprecationWarning, 'is_global support is removed. Assuming positional=False'):\n                class MyTask(luigi.Task):\n                    # This could typically be \"--yarn-pool=development\"\n                    x_g2 = luigi.Parameter(default='y', is_global=True, significant=False)\n\n            self.assertRaises(luigi.parameter.UnknownParameterException,\n                              lambda: MyTask('arg'))",
        "begin_line": 625,
        "end_line": 633,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testNoSection#638",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testNoSection(self)",
        "snippet": "    def testNoSection(self):\n        self.assertRaises(ParameterException, lambda: _value(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 638,
        "end_line": 639,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testNoValue#642",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testNoValue(self)",
        "snippet": "    def testNoValue(self):\n        self.assertRaises(ParameterException, lambda: _value(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 642,
        "end_line": 643,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefault#646",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefault(self)",
        "snippet": "    def testDefault(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"baz\", LocalA().p)\n        self.assertEqual(\"boo\", LocalA(p=\"boo\").p)",
        "begin_line": 646,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalA.testDefault#646",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalA",
        "signature": "test.parameter_test.LocalA.testDefault(self)",
        "snippet": "    def testDefault(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"baz\", LocalA().p)\n        self.assertEqual(\"boo\", LocalA(p=\"boo\").p)",
        "begin_line": 646,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateHour#654",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateHour(self)",
        "snippet": "    def testDateHour(self):\n        p = luigi.DateHourParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 0, 0), _value(p))",
        "begin_line": 654,
        "end_line": 656,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateHourWithInterval#659",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateHourWithInterval(self)",
        "snippet": "    def testDateHourWithInterval(self):\n        p = luigi.DateHourParameter(config_path=dict(section=\"foo\", name=\"bar\"), interval=2)\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 0, 0), _value(p))",
        "begin_line": 659,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateMinute#664",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateMinute(self)",
        "snippet": "    def testDateMinute(self):\n        p = luigi.DateMinuteParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 30, 0), _value(p))",
        "begin_line": 664,
        "end_line": 666,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateWithMinuteInterval#669",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateWithMinuteInterval(self)",
        "snippet": "    def testDateWithMinuteInterval(self):\n        p = luigi.DateMinuteParameter(config_path=dict(section=\"foo\", name=\"bar\"), interval=2)\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 30, 0), _value(p))",
        "begin_line": 669,
        "end_line": 671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateMinuteDeprecated#674",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateMinuteDeprecated(self)",
        "snippet": "    def testDateMinuteDeprecated(self):\n        p = luigi.DateMinuteParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        if six.PY3:\n            with self.assertWarnsRegex(DeprecationWarning, 'Using \"H\" between hours and minutes is deprecated, omit it instead.'):\n                self.assertEqual(datetime.datetime(2001, 2, 3, 4, 30, 0), _value(p))\n        else:\n            self.assertEqual(datetime.datetime(2001, 2, 3, 4, 30, 0), _value(p))",
        "begin_line": 674,
        "end_line": 680,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateSecond#683",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateSecond(self)",
        "snippet": "    def testDateSecond(self):\n        p = luigi.DateSecondParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 5, 6), _value(p))",
        "begin_line": 683,
        "end_line": 685,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateSecondWithInterval#688",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateSecondWithInterval(self)",
        "snippet": "    def testDateSecondWithInterval(self):\n        p = luigi.DateSecondParameter(config_path=dict(section=\"foo\", name=\"bar\"), interval=2)\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 5, 6), _value(p))",
        "begin_line": 688,
        "end_line": 690,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDate#693",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDate(self)",
        "snippet": "    def testDate(self):\n        p = luigi.DateParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.date(2001, 2, 3), _value(p))",
        "begin_line": 693,
        "end_line": 695,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateWithInterval#698",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateWithInterval(self)",
        "snippet": "    def testDateWithInterval(self):\n        p = luigi.DateParameter(config_path=dict(section=\"foo\", name=\"bar\"),\n                                interval=3, start=datetime.date(2001, 2, 1))\n        self.assertEqual(datetime.date(2001, 2, 1), _value(p))",
        "begin_line": 698,
        "end_line": 701,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testMonthParameter#704",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testMonthParameter(self)",
        "snippet": "    def testMonthParameter(self):\n        p = luigi.MonthParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.date(2015, 7, 1), _value(p))",
        "begin_line": 704,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testMonthWithIntervalParameter#709",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testMonthWithIntervalParameter(self)",
        "snippet": "    def testMonthWithIntervalParameter(self):\n        p = luigi.MonthParameter(config_path=dict(section=\"foo\", name=\"bar\"),\n                                 interval=13, start=datetime.date(2014, 1, 1))\n        self.assertEqual(datetime.date(2015, 2, 1), _value(p))",
        "begin_line": 709,
        "end_line": 712,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testYearParameter#715",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testYearParameter(self)",
        "snippet": "    def testYearParameter(self):\n        p = luigi.YearParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.date(2015, 1, 1), _value(p))",
        "begin_line": 715,
        "end_line": 717,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testYearWithIntervalParameter#720",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testYearWithIntervalParameter(self)",
        "snippet": "    def testYearWithIntervalParameter(self):\n        p = luigi.YearParameter(config_path=dict(section=\"foo\", name=\"bar\"),\n                                start=datetime.date(2011, 1, 1), interval=5)\n        self.assertEqual(datetime.date(2011, 1, 1), _value(p))",
        "begin_line": 720,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testInt#726",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testInt(self)",
        "snippet": "    def testInt(self):\n        p = luigi.IntParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(123, _value(p))",
        "begin_line": 726,
        "end_line": 728,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testBool#731",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testBool(self)",
        "snippet": "    def testBool(self):\n        p = luigi.BoolParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(True, _value(p))",
        "begin_line": 731,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testBoolConfigOutranksDefault#736",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testBoolConfigOutranksDefault(self)",
        "snippet": "    def testBoolConfigOutranksDefault(self):\n        p = luigi.BoolParameter(default=True, config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(False, _value(p))",
        "begin_line": 736,
        "end_line": 738,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateInterval#741",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateInterval(self)",
        "snippet": "    def testDateInterval(self):\n        p = luigi.DateIntervalParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        expected = luigi.date_interval.Custom.parse(\"2001-02-03-2001-02-28\")\n        self.assertEqual(expected, _value(p))",
        "begin_line": 741,
        "end_line": 744,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaNoSeconds#747",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaNoSeconds(self)",
        "snippet": "    def testTimeDeltaNoSeconds(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(seconds=0), _value(p))",
        "begin_line": 747,
        "end_line": 749,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaNoDays#752",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaNoDays(self)",
        "snippet": "    def testTimeDeltaNoDays(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=0), _value(p))",
        "begin_line": 752,
        "end_line": 754,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta#757",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta(self)",
        "snippet": "    def testTimeDelta(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=1), _value(p))",
        "begin_line": 757,
        "end_line": 759,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaPlural#762",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaPlural(self)",
        "snippet": "    def testTimeDeltaPlural(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(seconds=2), _value(p))",
        "begin_line": 762,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaMultiple#767",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaMultiple(self)",
        "snippet": "    def testTimeDeltaMultiple(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(weeks=3, hours=4, minutes=5), _value(p))",
        "begin_line": 767,
        "end_line": 769,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601#772",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601(self)",
        "snippet": "    def testTimeDelta8601(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=4, hours=12, minutes=30, seconds=5), _value(p))",
        "begin_line": 772,
        "end_line": 774,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601NoTimeComponent#777",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601NoTimeComponent(self)",
        "snippet": "    def testTimeDelta8601NoTimeComponent(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=5), _value(p))",
        "begin_line": 777,
        "end_line": 779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601Weeks#782",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601Weeks(self)",
        "snippet": "    def testTimeDelta8601Weeks(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(weeks=5), _value(p))",
        "begin_line": 782,
        "end_line": 784,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601YearMonthNotSupported#787",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601YearMonthNotSupported(self)",
        "snippet": "    def testTimeDelta8601YearMonthNotSupported(self):\n        def f():\n            return _value(luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")))\n        self.assertRaises(luigi.parameter.ParameterException, f)  # ISO 8601 durations with years or months are not supported",
        "begin_line": 787,
        "end_line": 790,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.f#788",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.f()",
        "snippet": "        def f():\n            return _value(luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")))",
        "begin_line": 788,
        "end_line": 789,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MAfterT#793",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MAfterT(self)",
        "snippet": "    def testTimeDelta8601MAfterT(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(minutes=6), _value(p))",
        "begin_line": 793,
        "end_line": 795,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MBeforeT#798",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MBeforeT(self)",
        "snippet": "    def testTimeDelta8601MBeforeT(self):\n        def f():\n            return _value(luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")))\n        self.assertRaises(luigi.parameter.ParameterException, f)  # ISO 8601 durations with months are not supported",
        "begin_line": 798,
        "end_line": 801,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.f#799",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.f()",
        "snippet": "        def f():\n            return _value(luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")))",
        "begin_line": 799,
        "end_line": 800,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoSection#803",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoSection(self)",
        "snippet": "    def testHasDefaultNoSection(self):\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: _value(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 803,
        "end_line": 805,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoValue#808",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoValue(self)",
        "snippet": "    def testHasDefaultNoValue(self):\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: _value(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 808,
        "end_line": 810,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultWithBoth#813",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultWithBoth(self)",
        "snippet": "    def testHasDefaultWithBoth(self):\n        self.assertTrue(_value(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 813,
        "end_line": 814,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefault#817",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefault(self)",
        "snippet": "    def testWithDefault(self):\n        p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"), default='blah')\n        self.assertEqual('baz', _value(p))  # config overrides default",
        "begin_line": 817,
        "end_line": 819,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefaultAndMissing#821",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefaultAndMissing(self)",
        "snippet": "    def testWithDefaultAndMissing(self):\n        p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"), default='blah')\n        self.assertEqual('blah', _value(p))",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskName#826",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskName(self)",
        "snippet": "    def testDefaultFromTaskName(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter()\n\n        self.assertEqual(\"p_default\", LocalA().p)\n        self.assertEqual(\"boo\", LocalA(p=\"boo\").p)",
        "begin_line": 826,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalA.testDefaultFromTaskName#826",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalA",
        "signature": "test.parameter_test.LocalA.testDefaultFromTaskName(self)",
        "snippet": "    def testDefaultFromTaskName(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter()\n\n        self.assertEqual(\"p_default\", LocalA().p)\n        self.assertEqual(\"boo\", LocalA(p=\"boo\").p)",
        "begin_line": 826,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameInt#834",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameInt(self)",
        "snippet": "    def testDefaultFromTaskNameInt(self):\n        class LocalA(luigi.Task):\n            p = luigi.IntParameter()\n\n        self.assertEqual(999, LocalA().p)\n        self.assertEqual(777, LocalA(p=777).p)",
        "begin_line": 834,
        "end_line": 839,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalA.testDefaultFromTaskNameInt#834",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalA",
        "signature": "test.parameter_test.LocalA.testDefaultFromTaskNameInt(self)",
        "snippet": "    def testDefaultFromTaskNameInt(self):\n        class LocalA(luigi.Task):\n            p = luigi.IntParameter()\n\n        self.assertEqual(999, LocalA().p)\n        self.assertEqual(777, LocalA(p=777).p)",
        "begin_line": 834,
        "end_line": 839,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromConfigWithTaskNameToo#842",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromConfigWithTaskNameToo(self)",
        "snippet": "    def testDefaultFromConfigWithTaskNameToo(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"p_default\", LocalA().p)\n        self.assertEqual(\"boo\", LocalA(p=\"boo\").p)",
        "begin_line": 842,
        "end_line": 847,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalA.testDefaultFromConfigWithTaskNameToo#842",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalA",
        "signature": "test.parameter_test.LocalA.testDefaultFromConfigWithTaskNameToo(self)",
        "snippet": "    def testDefaultFromConfigWithTaskNameToo(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"p_default\", LocalA().p)\n        self.assertEqual(\"boo\", LocalA(p=\"boo\").p)",
        "begin_line": 842,
        "end_line": 847,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameWithDefault#850",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameWithDefault(self)",
        "snippet": "    def testDefaultFromTaskNameWithDefault(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_2\", LocalA().p)\n        self.assertEqual(\"boo_2\", LocalA(p=\"boo_2\").p)",
        "begin_line": 850,
        "end_line": 855,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalA.testDefaultFromTaskNameWithDefault#850",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalA",
        "signature": "test.parameter_test.LocalA.testDefaultFromTaskNameWithDefault(self)",
        "snippet": "    def testDefaultFromTaskNameWithDefault(self):\n        class LocalA(luigi.Task):\n            p = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_2\", LocalA().p)\n        self.assertEqual(\"boo_2\", LocalA(p=\"boo_2\").p)",
        "begin_line": 850,
        "end_line": 855,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithLongParameterName#858",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithLongParameterName(self)",
        "snippet": "    def testWithLongParameterName(self):\n        class MyClass(luigi.Task):\n            p_wohoo = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_3\", MyClass().p_wohoo)\n        self.assertEqual(\"boo_2\", MyClass(p_wohoo=\"boo_2\").p_wohoo)",
        "begin_line": 858,
        "end_line": 863,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.testWithLongParameterName#858",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.testWithLongParameterName(self)",
        "snippet": "    def testWithLongParameterName(self):\n        class MyClass(luigi.Task):\n            p_wohoo = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_3\", MyClass().p_wohoo)\n        self.assertEqual(\"boo_2\", MyClass(p_wohoo=\"boo_2\").p_wohoo)",
        "begin_line": 858,
        "end_line": 863,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testSettingOtherMember#866",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testSettingOtherMember(self)",
        "snippet": "    def testSettingOtherMember(self):\n        class LocalA(luigi.Task):\n            pass\n\n        self.assertEqual(123, luigi.tools.range.RangeDaily(of=LocalA).days_back)\n        self.assertEqual(70, luigi.tools.range.RangeDaily(of=LocalA, days_back=70).days_back)",
        "begin_line": 866,
        "end_line": 871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalA.testSettingOtherMember#866",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalA",
        "signature": "test.parameter_test.LocalA.testSettingOtherMember(self)",
        "snippet": "    def testSettingOtherMember(self):\n        class LocalA(luigi.Task):\n            pass\n\n        self.assertEqual(123, luigi.tools.range.RangeDaily(of=LocalA).days_back)\n        self.assertEqual(70, luigi.tools.range.RangeDaily(of=LocalA, days_back=70).days_back)",
        "begin_line": 866,
        "end_line": 871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineWithDefault#874",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineWithDefault(self)",
        "snippet": "    def testCommandLineWithDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass(luigi.Task):\n            p_not_global = luigi.Parameter(default='banana')\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_locally(['MyClass']))\n        self.assertFalse(self.run_locally(['MyClass', '--p-not-global', '124']))\n        self.assertFalse(self.run_locally(['MyClass', '--MyClass-p-not-global', '124']))",
        "begin_line": 874,
        "end_line": 894,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.testCommandLineWithDefault#874",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.testCommandLineWithDefault(self)",
        "snippet": "    def testCommandLineWithDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass(luigi.Task):\n            p_not_global = luigi.Parameter(default='banana')\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_locally(['MyClass']))\n        self.assertFalse(self.run_locally(['MyClass', '--p-not-global', '124']))\n        self.assertFalse(self.run_locally(['MyClass', '--MyClass-p-not-global', '124']))",
        "begin_line": 874,
        "end_line": 894,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.complete#882",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.complete(self)",
        "snippet": "            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True",
        "begin_line": 882,
        "end_line": 887,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.run#889",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 889,
        "end_line": 890,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineNoDefault#897",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineNoDefault(self)",
        "snippet": "    def testCommandLineNoDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass2(luigi.Task):\n            \"\"\" TODO: Make luigi clean it's register for tests. Hate this 2 dance. \"\"\"\n            p_not_global_no_default = luigi.Parameter()\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_locally(['MyClass2']))\n        self.assertFalse(self.run_locally(['MyClass2', '--p-not-global-no-default', '124']))\n        self.assertFalse(self.run_locally(['MyClass2', '--MyClass2-p-not-global-no-default', '124']))",
        "begin_line": 897,
        "end_line": 919,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass2.testCommandLineNoDefault#897",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass2",
        "signature": "test.parameter_test.MyClass2.testCommandLineNoDefault(self)",
        "snippet": "    def testCommandLineNoDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass2(luigi.Task):\n            \"\"\" TODO: Make luigi clean it's register for tests. Hate this 2 dance. \"\"\"\n            p_not_global_no_default = luigi.Parameter()\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_locally(['MyClass2']))\n        self.assertFalse(self.run_locally(['MyClass2', '--p-not-global-no-default', '124']))\n        self.assertFalse(self.run_locally(['MyClass2', '--MyClass2-p-not-global-no-default', '124']))",
        "begin_line": 897,
        "end_line": 919,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass2.complete#906",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass2",
        "signature": "test.parameter_test.MyClass2.complete(self)",
        "snippet": "            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True",
        "begin_line": 906,
        "end_line": 912,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass2.run#914",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass2",
        "signature": "test.parameter_test.MyClass2.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 914,
        "end_line": 915,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithNamespaceConfig#922",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithNamespaceConfig(self)",
        "snippet": "    def testWithNamespaceConfig(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            p = luigi.IntParameter()\n\n        self.assertEqual(999, A().p)\n        self.assertEqual(777, A(p=777).p)",
        "begin_line": 922,
        "end_line": 928,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testWithNamespaceConfig#922",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testWithNamespaceConfig(self)",
        "snippet": "    def testWithNamespaceConfig(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            p = luigi.IntParameter()\n\n        self.assertEqual(999, A().p)\n        self.assertEqual(777, A(p=777).p)",
        "begin_line": 922,
        "end_line": 928,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithNamespaceCli#930",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithNamespaceCli(self)",
        "snippet": "    def testWithNamespaceCli(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            p = luigi.IntParameter(default=100)\n            expected = luigi.IntParameter()\n\n            def complete(self):\n                if self.p != self.expected:\n                    raise ValueError\n                return True\n\n        self.assertTrue(self.run_locally_split('mynamespace.A --expected 100'))\n        # TODO(arash): Why is `--p 200` hanging with multiprocessing stuff?\n        # self.assertTrue(self.run_locally_split('mynamespace.A --p 200 --expected 200'))\n        self.assertTrue(self.run_locally_split('mynamespace.A --mynamespace.A-p 200 --expected 200'))\n        self.assertFalse(self.run_locally_split('mynamespace.A --A-p 200 --expected 200'))",
        "begin_line": 930,
        "end_line": 945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testWithNamespaceCli#930",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testWithNamespaceCli(self)",
        "snippet": "    def testWithNamespaceCli(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            p = luigi.IntParameter(default=100)\n            expected = luigi.IntParameter()\n\n            def complete(self):\n                if self.p != self.expected:\n                    raise ValueError\n                return True\n\n        self.assertTrue(self.run_locally_split('mynamespace.A --expected 100'))\n        # TODO(arash): Why is `--p 200` hanging with multiprocessing stuff?\n        # self.assertTrue(self.run_locally_split('mynamespace.A --p 200 --expected 200'))\n        self.assertTrue(self.run_locally_split('mynamespace.A --mynamespace.A-p 200 --expected 200'))\n        self.assertFalse(self.run_locally_split('mynamespace.A --A-p 200 --expected 200'))",
        "begin_line": 930,
        "end_line": 945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.complete#936",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.complete(self)",
        "snippet": "            def complete(self):\n                if self.p != self.expected:\n                    raise ValueError\n                return True",
        "begin_line": 936,
        "end_line": 939,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testListWithNamespaceCli#947",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testListWithNamespaceCli(self)",
        "snippet": "    def testListWithNamespaceCli(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            l_param = luigi.ListParameter(default=[1, 2, 3])\n            expected = luigi.ListParameter()\n\n            def complete(self):\n                if self.l_param != self.expected:\n                    raise ValueError\n                return True\n\n        self.assertTrue(self.run_locally_split('mynamespace.A --expected [1,2,3]'))\n        self.assertTrue(self.run_locally_split('mynamespace.A --mynamespace.A-l [1,2,3] --expected [1,2,3]'))",
        "begin_line": 947,
        "end_line": 959,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testListWithNamespaceCli#947",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testListWithNamespaceCli(self)",
        "snippet": "    def testListWithNamespaceCli(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            l_param = luigi.ListParameter(default=[1, 2, 3])\n            expected = luigi.ListParameter()\n\n            def complete(self):\n                if self.l_param != self.expected:\n                    raise ValueError\n                return True\n\n        self.assertTrue(self.run_locally_split('mynamespace.A --expected [1,2,3]'))\n        self.assertTrue(self.run_locally_split('mynamespace.A --mynamespace.A-l [1,2,3] --expected [1,2,3]'))",
        "begin_line": 947,
        "end_line": 959,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.complete#953",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.complete(self)",
        "snippet": "            def complete(self):\n                if self.l_param != self.expected:\n                    raise ValueError\n                return True",
        "begin_line": 953,
        "end_line": 956,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTupleWithNamespaceCli#961",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTupleWithNamespaceCli(self)",
        "snippet": "    def testTupleWithNamespaceCli(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            t = luigi.TupleParameter(default=((1, 2), (3, 4)))\n            expected = luigi.TupleParameter()\n\n            def complete(self):\n                if self.t != self.expected:\n                    raise ValueError\n                return True\n\n        self.assertTrue(self.run_locally_split('mynamespace.A --expected ((1,2),(3,4))'))\n        self.assertTrue(self.run_locally_split('mynamespace.A --mynamespace.A-t ((1,2),(3,4)) --expected ((1,2),(3,4))'))",
        "begin_line": 961,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testTupleWithNamespaceCli#961",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testTupleWithNamespaceCli(self)",
        "snippet": "    def testTupleWithNamespaceCli(self):\n        class A(luigi.Task):\n            task_namespace = 'mynamespace'\n            t = luigi.TupleParameter(default=((1, 2), (3, 4)))\n            expected = luigi.TupleParameter()\n\n            def complete(self):\n                if self.t != self.expected:\n                    raise ValueError\n                return True\n\n        self.assertTrue(self.run_locally_split('mynamespace.A --expected ((1,2),(3,4))'))\n        self.assertTrue(self.run_locally_split('mynamespace.A --mynamespace.A-t ((1,2),(3,4)) --expected ((1,2),(3,4))'))",
        "begin_line": 961,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.complete#967",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.complete(self)",
        "snippet": "            def complete(self):\n                if self.t != self.expected:\n                    raise ValueError\n                return True",
        "begin_line": 967,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testListConfig#976",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testListConfig(self)",
        "snippet": "    def testListConfig(self):\n        self.assertTrue(_value(luigi.ListParameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 976,
        "end_line": 977,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTupleConfig#980",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTupleConfig(self)",
        "snippet": "    def testTupleConfig(self):\n        self.assertTrue(_value(luigi.TupleParameter(config_path=dict(section=\"foo\", name=\"bar\"))))",
        "begin_line": 980,
        "end_line": 981,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testNumericalParameter#984",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testNumericalParameter(self)",
        "snippet": "    def testNumericalParameter(self):\n        p = luigi.NumericalParameter(min_value=-3, max_value=7, var_type=int, config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(-3, _value(p))",
        "begin_line": 984,
        "end_line": 986,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testChoiceParameter#989",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testChoiceParameter(self)",
        "snippet": "    def testChoiceParameter(self):\n        p = luigi.ChoiceParameter(var_type=int, choices=[1, 2, 3], config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(3, _value(p))",
        "begin_line": 989,
        "end_line": 991,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort#997",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort(self)",
        "snippet": "    def testOverrideSchedulerPort(self):\n        if six.PY3:\n            with self.assertWarnsRegex(DeprecationWarning, r'default-scheduler-port is deprecated'):\n                env_params = luigi.interface.core()\n        else:\n            env_params = luigi.interface.core()\n        self.assertEqual(env_params.scheduler_port, 6543)",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort2#1006",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort2(self)",
        "snippet": "    def testOverrideSchedulerPort2(self):\n        if six.PY3:\n            with self.assertWarnsRegex(DeprecationWarning, r'scheduler_port \\(with dashes\\) should be avoided'):\n                env_params = luigi.interface.core()\n        else:\n            env_params = luigi.interface.core()\n        self.assertEqual(env_params.scheduler_port, 6544)",
        "begin_line": 1006,
        "end_line": 1012,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort3#1015",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort3(self)",
        "snippet": "    def testOverrideSchedulerPort3(self):\n        env_params = luigi.interface.core()\n        self.assertEqual(env_params.scheduler_port, 6545)",
        "begin_line": 1015,
        "end_line": 1017,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestSerializeDateParameters.testSerialize#1022",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestSerializeDateParameters",
        "signature": "test.parameter_test.TestSerializeDateParameters.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n        date = datetime.date(2013, 2, 3)\n        self.assertEqual(luigi.DateParameter().serialize(date), '2013-02-03')\n        self.assertEqual(luigi.YearParameter().serialize(date), '2013')\n        self.assertEqual(luigi.MonthParameter().serialize(date), '2013-02')\n        dt = datetime.datetime(2013, 2, 3, 4, 5)\n        self.assertEqual(luigi.DateHourParameter().serialize(dt), '2013-02-03T04')",
        "begin_line": 1022,
        "end_line": 1028,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestSerializeTimeDeltaParameters.testSerialize#1033",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestSerializeTimeDeltaParameters",
        "signature": "test.parameter_test.TestSerializeTimeDeltaParameters.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n        tdelta = timedelta(weeks=5, days=4, hours=3, minutes=2, seconds=1)\n        self.assertEqual(luigi.TimeDeltaParameter().serialize(tdelta), '5 w 4 d 3 h 2 m 1 s')\n        tdelta = timedelta(seconds=0)\n        self.assertEqual(luigi.TimeDeltaParameter().serialize(tdelta), '0 w 0 d 0 h 0 m 0 s')",
        "begin_line": 1033,
        "end_line": 1037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestTaskParameter.testUsage#1042",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestTaskParameter",
        "signature": "test.parameter_test.TestTaskParameter.testUsage(self)",
        "snippet": "    def testUsage(self):\n\n        class MetaTask(luigi.Task):\n            task_namespace = \"mynamespace\"\n            a = luigi.TaskParameter()\n\n            def run(self):\n                self.__class__.saved_value = self.a\n\n        class OtherTask(luigi.Task):\n            task_namespace = \"other_namespace\"\n\n        self.assertEqual(MetaTask(a=MetaTask).a, MetaTask)\n        self.assertEqual(MetaTask(a=OtherTask).a, OtherTask)\n\n        # So I first thought this \"should\" work, but actually it should not,\n        # because it should not need to parse values known at run-time\n        self.assertRaises(AttributeError,\n                          lambda: MetaTask(a=\"mynamespace.MetaTask\"))\n\n        # But is should be able to parse command line arguments\n        self.assertRaises(luigi.task_register.TaskClassNotFoundException,\n                          lambda: (self.run_locally_split('mynamespace.MetaTask --a blah')))\n        self.assertRaises(luigi.task_register.TaskClassNotFoundException,\n                          lambda: (self.run_locally_split('mynamespace.MetaTask --a Taskk')))\n        self.assertTrue(self.run_locally_split('mynamespace.MetaTask --a mynamespace.MetaTask'))\n        self.assertEqual(MetaTask.saved_value, MetaTask)\n        self.assertTrue(self.run_locally_split('mynamespace.MetaTask --a other_namespace.OtherTask'))\n        self.assertEqual(MetaTask.saved_value, OtherTask)",
        "begin_line": 1042,
        "end_line": 1070,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MetaTask.testUsage#1042",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MetaTask",
        "signature": "test.parameter_test.MetaTask.testUsage(self)",
        "snippet": "    def testUsage(self):\n\n        class MetaTask(luigi.Task):\n            task_namespace = \"mynamespace\"\n            a = luigi.TaskParameter()\n\n            def run(self):\n                self.__class__.saved_value = self.a\n\n        class OtherTask(luigi.Task):\n            task_namespace = \"other_namespace\"\n\n        self.assertEqual(MetaTask(a=MetaTask).a, MetaTask)\n        self.assertEqual(MetaTask(a=OtherTask).a, OtherTask)\n\n        # So I first thought this \"should\" work, but actually it should not,\n        # because it should not need to parse values known at run-time\n        self.assertRaises(AttributeError,\n                          lambda: MetaTask(a=\"mynamespace.MetaTask\"))\n\n        # But is should be able to parse command line arguments\n        self.assertRaises(luigi.task_register.TaskClassNotFoundException,\n                          lambda: (self.run_locally_split('mynamespace.MetaTask --a blah')))\n        self.assertRaises(luigi.task_register.TaskClassNotFoundException,\n                          lambda: (self.run_locally_split('mynamespace.MetaTask --a Taskk')))\n        self.assertTrue(self.run_locally_split('mynamespace.MetaTask --a mynamespace.MetaTask'))\n        self.assertEqual(MetaTask.saved_value, MetaTask)\n        self.assertTrue(self.run_locally_split('mynamespace.MetaTask --a other_namespace.OtherTask'))\n        self.assertEqual(MetaTask.saved_value, OtherTask)",
        "begin_line": 1042,
        "end_line": 1070,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MetaTask.run#1048",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MetaTask",
        "signature": "test.parameter_test.MetaTask.run(self)",
        "snippet": "            def run(self):\n                self.__class__.saved_value = self.a",
        "begin_line": 1048,
        "end_line": 1049,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OtherTask.testUsage#1042",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OtherTask",
        "signature": "test.parameter_test.OtherTask.testUsage(self)",
        "snippet": "    def testUsage(self):\n\n        class MetaTask(luigi.Task):\n            task_namespace = \"mynamespace\"\n            a = luigi.TaskParameter()\n\n            def run(self):\n                self.__class__.saved_value = self.a\n\n        class OtherTask(luigi.Task):\n            task_namespace = \"other_namespace\"\n\n        self.assertEqual(MetaTask(a=MetaTask).a, MetaTask)\n        self.assertEqual(MetaTask(a=OtherTask).a, OtherTask)\n\n        # So I first thought this \"should\" work, but actually it should not,\n        # because it should not need to parse values known at run-time\n        self.assertRaises(AttributeError,\n                          lambda: MetaTask(a=\"mynamespace.MetaTask\"))\n\n        # But is should be able to parse command line arguments\n        self.assertRaises(luigi.task_register.TaskClassNotFoundException,\n                          lambda: (self.run_locally_split('mynamespace.MetaTask --a blah')))\n        self.assertRaises(luigi.task_register.TaskClassNotFoundException,\n                          lambda: (self.run_locally_split('mynamespace.MetaTask --a Taskk')))\n        self.assertTrue(self.run_locally_split('mynamespace.MetaTask --a mynamespace.MetaTask'))\n        self.assertEqual(MetaTask.saved_value, MetaTask)\n        self.assertTrue(self.run_locally_split('mynamespace.MetaTask --a other_namespace.OtherTask'))\n        self.assertEqual(MetaTask.saved_value, OtherTask)",
        "begin_line": 1042,
        "end_line": 1070,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestTaskParameter.testSerialize#1072",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestTaskParameter",
        "signature": "test.parameter_test.TestTaskParameter.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n\n        class OtherTask(luigi.Task):\n\n            def complete(self):\n                return True\n\n        class DepTask(luigi.Task):\n\n            dep = luigi.TaskParameter()\n            ran = False\n\n            def complete(self):\n                return self.__class__.ran\n\n            def requires(self):\n                return self.dep()\n\n            def run(self):\n                self.__class__.ran = True\n\n        class MainTask(luigi.Task):\n\n            def run(self):\n                yield DepTask(dep=OtherTask)\n\n        # OtherTask is serialized because it is used as an argument for DepTask.\n        self.assertTrue(self.run_locally(['MainTask']))",
        "begin_line": 1072,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OtherTask.testSerialize#1072",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OtherTask",
        "signature": "test.parameter_test.OtherTask.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n\n        class OtherTask(luigi.Task):\n\n            def complete(self):\n                return True\n\n        class DepTask(luigi.Task):\n\n            dep = luigi.TaskParameter()\n            ran = False\n\n            def complete(self):\n                return self.__class__.ran\n\n            def requires(self):\n                return self.dep()\n\n            def run(self):\n                self.__class__.ran = True\n\n        class MainTask(luigi.Task):\n\n            def run(self):\n                yield DepTask(dep=OtherTask)\n\n        # OtherTask is serialized because it is used as an argument for DepTask.\n        self.assertTrue(self.run_locally(['MainTask']))",
        "begin_line": 1072,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OtherTask.complete#1076",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OtherTask",
        "signature": "test.parameter_test.OtherTask.complete(self)",
        "snippet": "            def complete(self):\n                return True",
        "begin_line": 1076,
        "end_line": 1077,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.DepTask.testSerialize#1072",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.DepTask",
        "signature": "test.parameter_test.DepTask.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n\n        class OtherTask(luigi.Task):\n\n            def complete(self):\n                return True\n\n        class DepTask(luigi.Task):\n\n            dep = luigi.TaskParameter()\n            ran = False\n\n            def complete(self):\n                return self.__class__.ran\n\n            def requires(self):\n                return self.dep()\n\n            def run(self):\n                self.__class__.ran = True\n\n        class MainTask(luigi.Task):\n\n            def run(self):\n                yield DepTask(dep=OtherTask)\n\n        # OtherTask is serialized because it is used as an argument for DepTask.\n        self.assertTrue(self.run_locally(['MainTask']))",
        "begin_line": 1072,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.DepTask.complete#1084",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.DepTask",
        "signature": "test.parameter_test.DepTask.complete(self)",
        "snippet": "            def complete(self):\n                return self.__class__.ran",
        "begin_line": 1084,
        "end_line": 1085,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.DepTask.requires#1087",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.DepTask",
        "signature": "test.parameter_test.DepTask.requires(self)",
        "snippet": "            def requires(self):\n                return self.dep()",
        "begin_line": 1087,
        "end_line": 1088,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.DepTask.run#1090",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.DepTask",
        "signature": "test.parameter_test.DepTask.run(self)",
        "snippet": "            def run(self):\n                self.__class__.ran = True",
        "begin_line": 1090,
        "end_line": 1091,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MainTask.testSerialize#1072",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MainTask",
        "signature": "test.parameter_test.MainTask.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n\n        class OtherTask(luigi.Task):\n\n            def complete(self):\n                return True\n\n        class DepTask(luigi.Task):\n\n            dep = luigi.TaskParameter()\n            ran = False\n\n            def complete(self):\n                return self.__class__.ran\n\n            def requires(self):\n                return self.dep()\n\n            def run(self):\n                self.__class__.ran = True\n\n        class MainTask(luigi.Task):\n\n            def run(self):\n                yield DepTask(dep=OtherTask)\n\n        # OtherTask is serialized because it is used as an argument for DepTask.\n        self.assertTrue(self.run_locally(['MainTask']))",
        "begin_line": 1072,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MainTask.run#1095",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MainTask",
        "signature": "test.parameter_test.MainTask.run(self)",
        "snippet": "            def run(self):\n                yield DepTask(dep=OtherTask)",
        "begin_line": 1095,
        "end_line": 1096,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestSerializeTupleParameter.testSerialize#1103",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestSerializeTupleParameter",
        "signature": "test.parameter_test.TestSerializeTupleParameter.testSerialize(self)",
        "snippet": "    def testSerialize(self):\n        the_tuple = (1, 2, 3)\n\n        self.assertEqual(luigi.TupleParameter().parse(luigi.TupleParameter().serialize(the_tuple)), the_tuple)",
        "begin_line": 1103,
        "end_line": 1106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.NewStyleParameters822Test.test_subclasses#1116",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.NewStyleParameters822Test",
        "signature": "test.parameter_test.NewStyleParameters822Test.test_subclasses(self)",
        "snippet": "    def test_subclasses(self):\n        class BarBaseClass(luigi.Task):\n            x = luigi.Parameter(default='bar_base_default')\n\n        class BarSubClass(BarBaseClass):\n            pass\n\n        in_parse(['BarSubClass', '--x', 'xyz', '--BarBaseClass-x', 'xyz'],\n                 lambda task: self.assertEqual(task.x, 'xyz'))\n\n        # https://github.com/spotify/luigi/issues/822#issuecomment-77782714\n        in_parse(['BarBaseClass', '--BarBaseClass-x', 'xyz'],\n                 lambda task: self.assertEqual(task.x, 'xyz'))",
        "begin_line": 1116,
        "end_line": 1128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.BarBaseClass.test_subclasses#1116",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.BarBaseClass",
        "signature": "test.parameter_test.BarBaseClass.test_subclasses(self)",
        "snippet": "    def test_subclasses(self):\n        class BarBaseClass(luigi.Task):\n            x = luigi.Parameter(default='bar_base_default')\n\n        class BarSubClass(BarBaseClass):\n            pass\n\n        in_parse(['BarSubClass', '--x', 'xyz', '--BarBaseClass-x', 'xyz'],\n                 lambda task: self.assertEqual(task.x, 'xyz'))\n\n        # https://github.com/spotify/luigi/issues/822#issuecomment-77782714\n        in_parse(['BarBaseClass', '--BarBaseClass-x', 'xyz'],\n                 lambda task: self.assertEqual(task.x, 'xyz'))",
        "begin_line": 1116,
        "end_line": 1128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.BarSubClass.test_subclasses#1116",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.BarSubClass",
        "signature": "test.parameter_test.BarSubClass.test_subclasses(self)",
        "snippet": "    def test_subclasses(self):\n        class BarBaseClass(luigi.Task):\n            x = luigi.Parameter(default='bar_base_default')\n\n        class BarSubClass(BarBaseClass):\n            pass\n\n        in_parse(['BarSubClass', '--x', 'xyz', '--BarBaseClass-x', 'xyz'],\n                 lambda task: self.assertEqual(task.x, 'xyz'))\n\n        # https://github.com/spotify/luigi/issues/822#issuecomment-77782714\n        in_parse(['BarBaseClass', '--BarBaseClass-x', 'xyz'],\n                 lambda task: self.assertEqual(task.x, 'xyz'))",
        "begin_line": 1116,
        "end_line": 1128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalParameters1304Test.test_local_params#1141",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalParameters1304Test",
        "signature": "test.parameter_test.LocalParameters1304Test.test_local_params(self)",
        "snippet": "    def test_local_params(self):\n\n        class MyTask(RunOnceTask):\n            param1 = luigi.IntParameter()\n            param2 = luigi.BoolParameter(default=False)\n\n            def requires(self):\n                if self.param1 > 0:\n                    yield MyTask(param1=(self.param1 - 1))\n\n            def run(self):\n                assert self.param1 == 1 or not self.param2\n                self.comp = True\n\n        self.assertTrue(self.run_locally_split('MyTask --param1 1 --param2'))",
        "begin_line": 1141,
        "end_line": 1155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_params#1141",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_params(self)",
        "snippet": "    def test_local_params(self):\n\n        class MyTask(RunOnceTask):\n            param1 = luigi.IntParameter()\n            param2 = luigi.BoolParameter(default=False)\n\n            def requires(self):\n                if self.param1 > 0:\n                    yield MyTask(param1=(self.param1 - 1))\n\n            def run(self):\n                assert self.param1 == 1 or not self.param2\n                self.comp = True\n\n        self.assertTrue(self.run_locally_split('MyTask --param1 1 --param2'))",
        "begin_line": 1141,
        "end_line": 1155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.requires#1147",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.requires(self)",
        "snippet": "            def requires(self):\n                if self.param1 > 0:\n                    yield MyTask(param1=(self.param1 - 1))",
        "begin_line": 1147,
        "end_line": 1149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.run#1151",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.run(self)",
        "snippet": "            def run(self):\n                assert self.param1 == 1 or not self.param2\n                self.comp = True",
        "begin_line": 1151,
        "end_line": 1153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalParameters1304Test.test_local_takes_precedence#1157",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalParameters1304Test",
        "signature": "test.parameter_test.LocalParameters1304Test.test_local_takes_precedence(self)",
        "snippet": "    def test_local_takes_precedence(self):\n\n        class MyTask(luigi.Task):\n            param = luigi.IntParameter()\n\n            def complete(self):\n                return False\n\n            def run(self):\n                assert self.param == 5\n\n        self.assertTrue(self.run_locally_split('MyTask --param 5 --MyTask-param 6'))",
        "begin_line": 1157,
        "end_line": 1168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_takes_precedence#1157",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_takes_precedence(self)",
        "snippet": "    def test_local_takes_precedence(self):\n\n        class MyTask(luigi.Task):\n            param = luigi.IntParameter()\n\n            def complete(self):\n                return False\n\n            def run(self):\n                assert self.param == 5\n\n        self.assertTrue(self.run_locally_split('MyTask --param 5 --MyTask-param 6'))",
        "begin_line": 1157,
        "end_line": 1168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.complete#1162",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 1162,
        "end_line": 1163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.run#1165",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.run(self)",
        "snippet": "            def run(self):\n                assert self.param == 5",
        "begin_line": 1165,
        "end_line": 1166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalParameters1304Test.test_local_only_affects_root#1170",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalParameters1304Test",
        "signature": "test.parameter_test.LocalParameters1304Test.test_local_only_affects_root(self)",
        "snippet": "    def test_local_only_affects_root(self):\n\n        class MyTask(RunOnceTask):\n            param = luigi.IntParameter(default=3)\n\n            def requires(self):\n                assert self.param != 3\n                if self.param == 5:\n                    yield MyTask()\n\n        # It would be a cyclic dependency if local took precedence\n        self.assertTrue(self.run_locally_split('MyTask --param 5 --MyTask-param 6'))",
        "begin_line": 1170,
        "end_line": 1181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_only_affects_root#1170",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_only_affects_root(self)",
        "snippet": "    def test_local_only_affects_root(self):\n\n        class MyTask(RunOnceTask):\n            param = luigi.IntParameter(default=3)\n\n            def requires(self):\n                assert self.param != 3\n                if self.param == 5:\n                    yield MyTask()\n\n        # It would be a cyclic dependency if local took precedence\n        self.assertTrue(self.run_locally_split('MyTask --param 5 --MyTask-param 6'))",
        "begin_line": 1170,
        "end_line": 1181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.requires#1175",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.requires(self)",
        "snippet": "            def requires(self):\n                assert self.param != 3\n                if self.param == 5:\n                    yield MyTask()",
        "begin_line": 1175,
        "end_line": 1178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.LocalParameters1304Test.test_range_doesnt_propagate_args#1183",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.LocalParameters1304Test",
        "signature": "test.parameter_test.LocalParameters1304Test.test_range_doesnt_propagate_args(self)",
        "snippet": "    def test_range_doesnt_propagate_args(self):\n        \"\"\"\n        Ensure that ``--task Range --of Blah --blah-arg 123`` doesn't work.\n\n        This will of course not work unless support is explicitly added for it.\n        But being a bit paranoid here and adding this test case so that if\n        somebody decides to add it in the future, they'll be redircted to the\n        dicussion in #1304\n        \"\"\"\n\n        class Blah(RunOnceTask):\n            date = luigi.DateParameter()\n            blah_arg = luigi.IntParameter()\n\n        # The SystemExit is assumed to be thrown by argparse\n        self.assertRaises(SystemExit, self.run_locally_split, 'RangeDailyBase --of Blah --start 2015-01-01 --task-limit 1 --blah-arg 123')\n        self.assertTrue(self.run_locally_split('RangeDailyBase --of Blah --start 2015-01-01 --task-limit 1 --Blah-blah-arg 123'))",
        "begin_line": 1183,
        "end_line": 1199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Blah.test_range_doesnt_propagate_args#1183",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Blah",
        "signature": "test.parameter_test.Blah.test_range_doesnt_propagate_args(self)",
        "snippet": "    def test_range_doesnt_propagate_args(self):\n        \"\"\"\n        Ensure that ``--task Range --of Blah --blah-arg 123`` doesn't work.\n\n        This will of course not work unless support is explicitly added for it.\n        But being a bit paranoid here and adding this test case so that if\n        somebody decides to add it in the future, they'll be redircted to the\n        dicussion in #1304\n        \"\"\"\n\n        class Blah(RunOnceTask):\n            date = luigi.DateParameter()\n            blah_arg = luigi.IntParameter()\n\n        # The SystemExit is assumed to be thrown by argparse\n        self.assertRaises(SystemExit, self.run_locally_split, 'RangeDailyBase --of Blah --start 2015-01-01 --task-limit 1 --blah-arg 123')\n        self.assertTrue(self.run_locally_split('RangeDailyBase --of Blah --start 2015-01-01 --task-limit 1 --Blah-blah-arg 123'))",
        "begin_line": 1183,
        "end_line": 1199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TaskAsParameterName1335Test.test_parameter_can_be_named_task#1203",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TaskAsParameterName1335Test",
        "signature": "test.parameter_test.TaskAsParameterName1335Test.test_parameter_can_be_named_task(self)",
        "snippet": "    def test_parameter_can_be_named_task(self):\n\n        class MyTask(luigi.Task):\n            # Indeed, this is not the most realistic example, but still ...\n            task = luigi.IntParameter()\n\n        self.assertTrue(self.run_locally_split('MyTask --task 5'))",
        "begin_line": 1203,
        "end_line": 1209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_parameter_can_be_named_task#1203",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_parameter_can_be_named_task(self)",
        "snippet": "    def test_parameter_can_be_named_task(self):\n\n        class MyTask(luigi.Task):\n            # Indeed, this is not the most realistic example, but still ...\n            task = luigi.IntParameter()\n\n        self.assertTrue(self.run_locally_split('MyTask --task 5'))",
        "begin_line": 1203,
        "end_line": 1209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__init__#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#94",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#108",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#110",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 110,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#130",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#147",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#152",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#157",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#168",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#182",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#191",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.temporary_unloaded_module#197",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.temporary_unloaded_module(python_file_contents)",
        "snippet": "def temporary_unloaded_module(python_file_contents):\n    \"\"\" Create an importable module\n\n    Return the name of importable module name given its file contents (source\n    code) \"\"\"\n    with tempfile.NamedTemporaryFile(\n            dir='test/',\n            prefix=\"_test_time_generated_module\",\n            suffix='.py') as temp_module_file:\n        temp_module_file.file.write(python_file_contents)\n        temp_module_file.file.flush()\n        temp_module_path = temp_module_file.name\n        temp_module_name = re.search(r'/(_test_time_generated_module.*).py',\n                                     temp_module_path).group(1)\n        yield temp_module_name",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]