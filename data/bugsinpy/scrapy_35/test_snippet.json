[
    {
        "name": "tests.test_crawler.CrawlerTestCase.setUp#15",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerTestCase",
        "signature": "tests.test_crawler.CrawlerTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.crawler = Crawler(DefaultSpider, Settings())",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerTestCase.test_deprecated_attribute_spiders#18",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerTestCase",
        "signature": "tests.test_crawler.CrawlerTestCase.test_deprecated_attribute_spiders(self)",
        "snippet": "    def test_deprecated_attribute_spiders(self):\n        with warnings.catch_warnings(record=True) as w:\n            spiders = self.crawler.spiders\n            self.assertEqual(len(w), 1)\n            self.assertIn(\"Crawler.spiders\", str(w[0].message))\n            sl_cls = load_object(self.crawler.settings['SPIDER_LOADER_CLASS'])\n            self.assertIsInstance(spiders, sl_cls)\n\n            self.crawler.spiders\n            self.assertEqual(len(w), 1, \"Warn deprecated access only once\")",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerTestCase.test_populate_spidercls_settings#29",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerTestCase",
        "signature": "tests.test_crawler.CrawlerTestCase.test_populate_spidercls_settings(self)",
        "snippet": "    def test_populate_spidercls_settings(self):\n        spider_settings = {'TEST1': 'spider', 'TEST2': 'spider'}\n        project_settings = {'TEST1': 'project', 'TEST3': 'project'}\n\n        class CustomSettingsSpider(DefaultSpider):\n            custom_settings = spider_settings\n\n        settings = Settings()\n        settings.setdict(project_settings, priority='project')\n        crawler = Crawler(CustomSettingsSpider, settings)\n\n        self.assertEqual(crawler.settings.get('TEST1'), 'spider')\n        self.assertEqual(crawler.settings.get('TEST2'), 'spider')\n        self.assertEqual(crawler.settings.get('TEST3'), 'project')\n\n        self.assertFalse(settings.frozen)\n        self.assertTrue(crawler.settings.frozen)",
        "begin_line": 29,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CustomSettingsSpider.test_populate_spidercls_settings#29",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CustomSettingsSpider",
        "signature": "tests.test_crawler.CustomSettingsSpider.test_populate_spidercls_settings(self)",
        "snippet": "    def test_populate_spidercls_settings(self):\n        spider_settings = {'TEST1': 'spider', 'TEST2': 'spider'}\n        project_settings = {'TEST1': 'project', 'TEST3': 'project'}\n\n        class CustomSettingsSpider(DefaultSpider):\n            custom_settings = spider_settings\n\n        settings = Settings()\n        settings.setdict(project_settings, priority='project')\n        crawler = Crawler(CustomSettingsSpider, settings)\n\n        self.assertEqual(crawler.settings.get('TEST1'), 'spider')\n        self.assertEqual(crawler.settings.get('TEST2'), 'spider')\n        self.assertEqual(crawler.settings.get('TEST3'), 'project')\n\n        self.assertFalse(settings.frozen)\n        self.assertTrue(crawler.settings.frozen)",
        "begin_line": 29,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerTestCase.test_crawler_accepts_dict#47",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerTestCase",
        "signature": "tests.test_crawler.CrawlerTestCase.test_crawler_accepts_dict(self)",
        "snippet": "    def test_crawler_accepts_dict(self):\n        crawler = Crawler(DefaultSpider, {'foo': 'bar'})\n        self.assertEqual(crawler.settings['foo'], 'bar')\n        self.assertEqual(\n            crawler.settings['RETRY_ENABLED'],\n            default_settings.RETRY_ENABLED\n        )\n        self.assertIsInstance(crawler.settings, Settings)",
        "begin_line": 47,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.SpiderLoaderWithWrongInterface.unneeded_method#60",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.SpiderLoaderWithWrongInterface",
        "signature": "tests.test_crawler.SpiderLoaderWithWrongInterface.unneeded_method(self)",
        "snippet": "    def unneeded_method(self):\n        pass",
        "begin_line": 60,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerRunnerTestCase.test_spider_manager_verify_interface#70",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerRunnerTestCase",
        "signature": "tests.test_crawler.CrawlerRunnerTestCase.test_spider_manager_verify_interface(self)",
        "snippet": "    def test_spider_manager_verify_interface(self):\n        settings = Settings({\n            'SPIDER_LOADER_CLASS': 'tests.test_crawler.SpiderLoaderWithWrongInterface'\n        })\n        with self.assertRaises(DoesNotImplement):\n            CrawlerRunner(settings)",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerRunnerTestCase.test_crawler_runner_accepts_dict#77",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerRunnerTestCase",
        "signature": "tests.test_crawler.CrawlerRunnerTestCase.test_crawler_runner_accepts_dict(self)",
        "snippet": "    def test_crawler_runner_accepts_dict(self):\n        runner = CrawlerRunner({'foo': 'bar'})\n        self.assertEqual(runner.settings['foo'], 'bar')\n        self.assertEqual(\n            runner.settings['RETRY_ENABLED'],\n            default_settings.RETRY_ENABLED\n        )\n        self.assertIsInstance(runner.settings, Settings)",
        "begin_line": 77,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerRunnerTestCase.test_deprecated_attribute_spiders#86",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerRunnerTestCase",
        "signature": "tests.test_crawler.CrawlerRunnerTestCase.test_deprecated_attribute_spiders(self)",
        "snippet": "    def test_deprecated_attribute_spiders(self):\n        with warnings.catch_warnings(record=True) as w:\n            runner = CrawlerRunner(Settings())\n            spiders = runner.spiders\n            self.assertEqual(len(w), 1)\n            self.assertIn(\"CrawlerRunner.spiders\", str(w[0].message))\n            self.assertIn(\"CrawlerRunner.spider_loader\", str(w[0].message))\n            sl_cls = load_object(runner.settings['SPIDER_LOADER_CLASS'])\n            self.assertIsInstance(spiders, sl_cls)",
        "begin_line": 86,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_crawler.CrawlerRunnerTestCase.test_spidermanager_deprecation#96",
        "src_path": "tests/test_crawler.py",
        "class_name": "tests.test_crawler.CrawlerRunnerTestCase",
        "signature": "tests.test_crawler.CrawlerRunnerTestCase.test_spidermanager_deprecation(self)",
        "snippet": "    def test_spidermanager_deprecation(self):\n        with warnings.catch_warnings(record=True) as w:\n            runner = CrawlerRunner({\n                'SPIDER_MANAGER_CLASS': 'tests.test_crawler.CustomSpiderLoader'\n            })\n            self.assertIsInstance(runner.spider_loader, CustomSpiderLoader)\n            self.assertEqual(len(w), 1)\n            self.assertIn('Please use SPIDER_LOADER_CLASS', str(w[0].message))",
        "begin_line": 96,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object#12",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object(self)",
        "snippet": "    def test_load_object(self):\n        obj = load_object('scrapy.utils.misc.load_object')\n        assert obj is load_object\n        self.assertRaises(ImportError, load_object, 'nomodule999.mod.function')\n        self.assertRaises(NameError, load_object, 'scrapy.utils.misc.load_object999')",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules#18",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules(self)",
        "snippet": "    def test_walk_modules(self):\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules',\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod1')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        self.assertRaises(ImportError, walk_modules, 'nomodule999')",
        "begin_line": 18,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg#43",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg(self)",
        "snippet": "    def test_walk_modules_egg(self):\n        egg = os.path.join(os.path.dirname(__file__), 'test.egg')\n        sys.path.append(egg)\n        try:\n            mods = walk_modules('testegg')\n            expected = [\n                'testegg.spiders',\n                'testegg.spiders.a',\n                'testegg.spiders.b',\n                'testegg'\n            ]\n            self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n        finally:\n            sys.path.remove(egg)",
        "begin_line": 43,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.TestItem",
        "signature": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    }
]