coverage run -m pytest pandas/tests/groupby/test_transform.py::test_pct_change
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 48 items

pandas/tests/groupby/test_transform.py ..xx..xx..xx..xxFFxxFFxx..xx..xx. [ 68%]
.xx..xxFFxxFFxx                                                          [100%]

=================================== FAILURES ===================================
____________________ test_pct_change[None-None-1-None-True] ____________________

test_series = True, freq = None, periods = 1, fill_method = None, limit = None

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
>           result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fdbd49d5fa0>
periods = 1, fill_method = None, limit = None, freq = None

    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None):
        """Calculate pct_change of each value to previous entry in group"""
        # TODO: Remove this conditional when #23918 is fixed
        if freq:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods, fill_method=fill_method, limit=limit, freq=freq
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/generic.py:812: TypeError
___________________ test_pct_change[None-None-1-None-False] ____________________

test_series = False, freq = None, periods = 1, fill_method = None, limit = None

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
            result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )
            tm.assert_series_equal(result, expected)
        else:
>           result = df.groupby("key").pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fdbd4e16b80>
periods = 1, fill_method = None, limit = None, freq = None, axis = 0

    @Substitution(name="groupby")
    @Appender(_common_see_also)
    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None, axis=0):
        """
        Calculate pct_change of each value to previous entry in group.
    
        Returns
        -------
        Series or DataFrame
            Percentage changes within each group.
        """
        if freq is not None or axis != 0:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods,
                    fill_method=fill_method,
                    limit=limit,
                    freq=freq,
                    axis=axis,
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/groupby.py:2365: TypeError
___________________ test_pct_change[None-None--1-None-True] ____________________

test_series = True, freq = None, periods = -1, fill_method = None, limit = None

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
>           result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fdbd462b190>
periods = -1, fill_method = None, limit = None, freq = None

    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None):
        """Calculate pct_change of each value to previous entry in group"""
        # TODO: Remove this conditional when #23918 is fixed
        if freq:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods, fill_method=fill_method, limit=limit, freq=freq
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/generic.py:812: TypeError
___________________ test_pct_change[None-None--1-None-False] ___________________

test_series = False, freq = None, periods = -1, fill_method = None, limit = None

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
            result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )
            tm.assert_series_equal(result, expected)
        else:
>           result = df.groupby("key").pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fdbd4804760>
periods = -1, fill_method = None, limit = None, freq = None, axis = 0

    @Substitution(name="groupby")
    @Appender(_common_see_also)
    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None, axis=0):
        """
        Calculate pct_change of each value to previous entry in group.
    
        Returns
        -------
        Series or DataFrame
            Percentage changes within each group.
        """
        if freq is not None or axis != 0:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods,
                    fill_method=fill_method,
                    limit=limit,
                    freq=freq,
                    axis=axis,
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/groupby.py:2365: TypeError
_____________________ test_pct_change[1-None-1-None-True] ______________________

test_series = True, freq = None, periods = 1, fill_method = None, limit = 1

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
>           result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fdbd43e1d90>
periods = 1, fill_method = None, limit = 1, freq = None

    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None):
        """Calculate pct_change of each value to previous entry in group"""
        # TODO: Remove this conditional when #23918 is fixed
        if freq:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods, fill_method=fill_method, limit=limit, freq=freq
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/generic.py:812: TypeError
_____________________ test_pct_change[1-None-1-None-False] _____________________

test_series = False, freq = None, periods = 1, fill_method = None, limit = 1

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
            result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )
            tm.assert_series_equal(result, expected)
        else:
>           result = df.groupby("key").pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fdbd4d58ee0>
periods = 1, fill_method = None, limit = 1, freq = None, axis = 0

    @Substitution(name="groupby")
    @Appender(_common_see_also)
    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None, axis=0):
        """
        Calculate pct_change of each value to previous entry in group.
    
        Returns
        -------
        Series or DataFrame
            Percentage changes within each group.
        """
        if freq is not None or axis != 0:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods,
                    fill_method=fill_method,
                    limit=limit,
                    freq=freq,
                    axis=axis,
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/groupby.py:2365: TypeError
_____________________ test_pct_change[1-None--1-None-True] _____________________

test_series = True, freq = None, periods = -1, fill_method = None, limit = 1

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
>           result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fdbd41e3c40>
periods = -1, fill_method = None, limit = 1, freq = None

    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None):
        """Calculate pct_change of each value to previous entry in group"""
        # TODO: Remove this conditional when #23918 is fixed
        if freq:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods, fill_method=fill_method, limit=limit, freq=freq
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/generic.py:812: TypeError
____________________ test_pct_change[1-None--1-None-False] _____________________

test_series = False, freq = None, periods = -1, fill_method = None, limit = 1

    @pytest.mark.parametrize("test_series", [True, False])
    @pytest.mark.parametrize(
        "freq",
        [
            None,
            pytest.param(
                "D",
                marks=pytest.mark.xfail(
                    reason="GH#23918 before method uses freq in vectorized approach"
                ),
            ),
        ],
    )
    @pytest.mark.parametrize("periods", [1, -1])
    @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
    @pytest.mark.parametrize("limit", [None, 1])
    def test_pct_change(test_series, freq, periods, fill_method, limit):
        # GH  21200, 21621, 30463
        vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
        keys = ["a", "b"]
        key_v = np.repeat(keys, len(vals))
        df = DataFrame({"key": key_v, "vals": vals * 2})
    
        df_g = df
        if fill_method is not None:
            df_g = getattr(df.groupby("key"), fill_method)(limit=limit)
        grp = df_g.groupby(df.key)
    
        expected = grp["vals"].obj / grp["vals"].shift(periods) - 1
    
        if test_series:
            result = df.groupby("key")["vals"].pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )
            tm.assert_series_equal(result, expected)
        else:
>           result = df.groupby("key").pct_change(
                periods=periods, fill_method=fill_method, limit=limit, freq=freq
            )

pandas/tests/groupby/test_transform.py:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fdbd4cbae50>
periods = -1, fill_method = None, limit = 1, freq = None, axis = 0

    @Substitution(name="groupby")
    @Appender(_common_see_also)
    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None, axis=0):
        """
        Calculate pct_change of each value to previous entry in group.
    
        Returns
        -------
        Series or DataFrame
            Percentage changes within each group.
        """
        if freq is not None or axis != 0:
            return self.apply(
                lambda x: x.pct_change(
                    periods=periods,
                    fill_method=fill_method,
                    limit=limit,
                    freq=freq,
                    axis=axis,
                )
            )
>       filled = getattr(self, fill_method)(limit=limit)
E       TypeError: getattr(): attribute name must be string

pandas/core/groupby/groupby.py:2365: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[None-None-1-None-True]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[None-None-1-None-False]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[None-None--1-None-True]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[None-None--1-None-False]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[1-None-1-None-True]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[1-None-1-None-False]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[1-None--1-None-True]
FAILED pandas/tests/groupby/test_transform.py::test_pct_change[1-None--1-None-False]
================== 8 failed, 16 passed, 24 xfailed in 20.91s ===================
