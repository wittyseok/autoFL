[
    {
        "name": "tornado.test.gen_test.GenEngineTest.setUp#35",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(GenEngineTest, self).setUp()\n        self.named_contexts = []",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.named_context#39",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.named_context(self, name)",
        "snippet": "    def named_context(self, name):\n        @contextlib.contextmanager\n        def context():\n            self.named_contexts.append(name)\n            try:\n                yield\n            finally:\n                self.assertEqual(self.named_contexts.pop(), name)\n        return context",
        "begin_line": 39,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.context#41",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.context()",
        "snippet": "        def context():\n            self.named_contexts.append(name)\n            try:\n                yield\n            finally:\n                self.assertEqual(self.named_contexts.pop(), name)",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.run_gen#49",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.run_gen(self, f)",
        "snippet": "    def run_gen(self, f):\n        f()\n        return self.wait()",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.delay_callback#53",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.delay_callback(self, iterations, callback, arg)",
        "snippet": "    def delay_callback(self, iterations, callback, arg):\n        \"\"\"Runs callback(arg) after a number of IOLoop iterations.\"\"\"\n        if iterations == 0:\n            callback(arg)\n        else:\n            self.io_loop.add_callback(functools.partial(\n                self.delay_callback, iterations - 1, callback, arg))",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.async_future#62",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.async_future(self, result, callback)",
        "snippet": "    def async_future(self, result, callback):\n        self.io_loop.add_callback(callback, result)",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.async_exception#66",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.async_exception(self, e)",
        "snippet": "    def async_exception(self, e):\n        yield gen.moment\n        raise e",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_no_yield#70",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_no_yield(self)",
        "snippet": "    def test_no_yield(self):\n        @gen.engine\n        def f():\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#72",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.stop()",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_inline_cb#76",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_inline_cb(self)",
        "snippet": "    def test_inline_cb(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback(\"k1\"))()\n            res = yield gen.Wait(\"k1\")\n            self.assertTrue(res is None)\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#78",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback(\"k1\"))()\n            res = yield gen.Wait(\"k1\")\n            self.assertTrue(res is None)\n            self.stop()",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_ioloop_cb#85",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_ioloop_cb(self)",
        "snippet": "    def test_ioloop_cb(self):\n        @gen.engine\n        def f():\n            self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n            yield gen.Wait(\"k1\")\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#87",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n            yield gen.Wait(\"k1\")\n            self.stop()",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_exception_phase1#93",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_exception_phase1(self)",
        "snippet": "    def test_exception_phase1(self):\n        @gen.engine\n        def f():\n            1 / 0\n        self.assertRaises(ZeroDivisionError, self.run_gen, f)",
        "begin_line": 93,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#95",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            1 / 0",
        "begin_line": 95,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_exception_phase2#99",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_exception_phase2(self)",
        "snippet": "    def test_exception_phase2(self):\n        @gen.engine\n        def f():\n            self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n            yield gen.Wait(\"k1\")\n            1 / 0\n        self.assertRaises(ZeroDivisionError, self.run_gen, f)",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#101",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n            yield gen.Wait(\"k1\")\n            1 / 0",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_exception_in_task_phase1#107",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_exception_in_task_phase1(self)",
        "snippet": "    def test_exception_in_task_phase1(self):\n        def fail_task(callback):\n            1 / 0\n\n        @gen.engine\n        def f():\n            try:\n                yield gen.Task(fail_task)\n                raise Exception(\"did not get expected exception\")\n            except ZeroDivisionError:\n                self.stop()\n        self.run_gen(f)",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.fail_task#108",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.fail_task(callback)",
        "snippet": "        def fail_task(callback):\n            1 / 0",
        "begin_line": 108,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#112",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            try:\n                yield gen.Task(fail_task)\n                raise Exception(\"did not get expected exception\")\n            except ZeroDivisionError:\n                self.stop()",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_exception_in_task_phase2#120",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_exception_in_task_phase2(self)",
        "snippet": "    def test_exception_in_task_phase2(self):\n        # This is the case that requires the use of stack_context in gen.engine\n        def fail_task(callback):\n            self.io_loop.add_callback(lambda: 1 / 0)\n\n        @gen.engine\n        def f():\n            try:\n                yield gen.Task(fail_task)\n                raise Exception(\"did not get expected exception\")\n            except ZeroDivisionError:\n                self.stop()\n        self.run_gen(f)",
        "begin_line": 120,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.fail_task#122",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.fail_task(callback)",
        "snippet": "        def fail_task(callback):\n            self.io_loop.add_callback(lambda: 1 / 0)",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#126",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            try:\n                yield gen.Task(fail_task)\n                raise Exception(\"did not get expected exception\")\n            except ZeroDivisionError:\n                self.stop()",
        "begin_line": 126,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_with_arg#134",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_with_arg(self)",
        "snippet": "    def test_with_arg(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback(\"k1\"))(42)\n            res = yield gen.Wait(\"k1\")\n            self.assertEqual(42, res)\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 134,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#136",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback(\"k1\"))(42)\n            res = yield gen.Wait(\"k1\")\n            self.assertEqual(42, res)\n            self.stop()",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_with_arg_tuple#143",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_with_arg_tuple(self)",
        "snippet": "    def test_with_arg_tuple(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback((1, 2)))((3, 4))\n            res = yield gen.Wait((1, 2))\n            self.assertEqual((3, 4), res)\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#145",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback((1, 2)))((3, 4))\n            res = yield gen.Wait((1, 2))\n            self.assertEqual((3, 4), res)\n            self.stop()",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_key_reuse#152",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_key_reuse(self)",
        "snippet": "    def test_key_reuse(self):\n        @gen.engine\n        def f():\n            yield gen.Callback(\"k1\")\n            yield gen.Callback(\"k1\")\n            self.stop()\n        self.assertRaises(gen.KeyReuseError, self.run_gen, f)",
        "begin_line": 152,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#154",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Callback(\"k1\")\n            yield gen.Callback(\"k1\")\n            self.stop()",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_key_reuse_tuple#160",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_key_reuse_tuple(self)",
        "snippet": "    def test_key_reuse_tuple(self):\n        @gen.engine\n        def f():\n            yield gen.Callback((1, 2))\n            yield gen.Callback((1, 2))\n            self.stop()\n        self.assertRaises(gen.KeyReuseError, self.run_gen, f)",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#162",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Callback((1, 2))\n            yield gen.Callback((1, 2))\n            self.stop()",
        "begin_line": 162,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_key_mismatch#168",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_key_mismatch(self)",
        "snippet": "    def test_key_mismatch(self):\n        @gen.engine\n        def f():\n            yield gen.Callback(\"k1\")\n            yield gen.Wait(\"k2\")\n            self.stop()\n        self.assertRaises(gen.UnknownKeyError, self.run_gen, f)",
        "begin_line": 168,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#170",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Callback(\"k1\")\n            yield gen.Wait(\"k2\")\n            self.stop()",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_key_mismatch_tuple#176",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_key_mismatch_tuple(self)",
        "snippet": "    def test_key_mismatch_tuple(self):\n        @gen.engine\n        def f():\n            yield gen.Callback((1, 2))\n            yield gen.Wait((2, 3))\n            self.stop()\n        self.assertRaises(gen.UnknownKeyError, self.run_gen, f)",
        "begin_line": 176,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#178",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Callback((1, 2))\n            yield gen.Wait((2, 3))\n            self.stop()",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_leaked_callback#184",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_leaked_callback(self)",
        "snippet": "    def test_leaked_callback(self):\n        @gen.engine\n        def f():\n            yield gen.Callback(\"k1\")\n            self.stop()\n        self.assertRaises(gen.LeakedCallbackError, self.run_gen, f)",
        "begin_line": 184,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#186",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Callback(\"k1\")\n            self.stop()",
        "begin_line": 186,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_leaked_callback_tuple#191",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_leaked_callback_tuple(self)",
        "snippet": "    def test_leaked_callback_tuple(self):\n        @gen.engine\n        def f():\n            yield gen.Callback((1, 2))\n            self.stop()\n        self.assertRaises(gen.LeakedCallbackError, self.run_gen, f)",
        "begin_line": 191,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#193",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Callback((1, 2))\n            self.stop()",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_parallel_callback#198",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_parallel_callback(self)",
        "snippet": "    def test_parallel_callback(self):\n        @gen.engine\n        def f():\n            for k in range(3):\n                self.io_loop.add_callback((yield gen.Callback(k)))\n            yield gen.Wait(1)\n            self.io_loop.add_callback((yield gen.Callback(3)))\n            yield gen.Wait(0)\n            yield gen.Wait(3)\n            yield gen.Wait(2)\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 198,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#200",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            for k in range(3):\n                self.io_loop.add_callback((yield gen.Callback(k)))\n            yield gen.Wait(1)\n            self.io_loop.add_callback((yield gen.Callback(3)))\n            yield gen.Wait(0)\n            yield gen.Wait(3)\n            yield gen.Wait(2)\n            self.stop()",
        "begin_line": 200,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_bogus_yield#211",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_bogus_yield(self)",
        "snippet": "    def test_bogus_yield(self):\n        @gen.engine\n        def f():\n            yield 42\n        self.assertRaises(gen.BadYieldError, self.run_gen, f)",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#213",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield 42",
        "begin_line": 213,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_bogus_yield_tuple#217",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_bogus_yield_tuple(self)",
        "snippet": "    def test_bogus_yield_tuple(self):\n        @gen.engine\n        def f():\n            yield (1, 2)\n        self.assertRaises(gen.BadYieldError, self.run_gen, f)",
        "begin_line": 217,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#219",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield (1, 2)",
        "begin_line": 219,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_reuse#223",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_reuse(self)",
        "snippet": "    def test_reuse(self):\n        @gen.engine\n        def f():\n            self.io_loop.add_callback((yield gen.Callback(0)))\n            yield gen.Wait(0)\n            self.stop()\n        self.run_gen(f)\n        self.run_gen(f)",
        "begin_line": 223,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#225",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.io_loop.add_callback((yield gen.Callback(0)))\n            yield gen.Wait(0)\n            self.stop()",
        "begin_line": 225,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_task#232",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_task(self)",
        "snippet": "    def test_task(self):\n        @gen.engine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 232,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#234",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            self.stop()",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_wait_all#239",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_wait_all(self)",
        "snippet": "    def test_wait_all(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback(\"k1\"))(\"v1\")\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            results = yield gen.WaitAll([\"k1\", \"k2\"])\n            self.assertEqual(results, [\"v1\", \"v2\"])\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 239,
        "end_line": 247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#241",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback(\"k1\"))(\"v1\")\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            results = yield gen.WaitAll([\"k1\", \"k2\"])\n            self.assertEqual(results, [\"v1\", \"v2\"])\n            self.stop()",
        "begin_line": 241,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_exception_in_yield#249",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_exception_in_yield(self)",
        "snippet": "    def test_exception_in_yield(self):\n        @gen.engine\n        def f():\n            try:\n                yield gen.Wait(\"k1\")\n                raise Exception(\"did not get expected exception\")\n            except gen.UnknownKeyError:\n                pass\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 249,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#251",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            try:\n                yield gen.Wait(\"k1\")\n                raise Exception(\"did not get expected exception\")\n            except gen.UnknownKeyError:\n                pass\n            self.stop()",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_resume_after_exception_in_yield#260",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_resume_after_exception_in_yield(self)",
        "snippet": "    def test_resume_after_exception_in_yield(self):\n        @gen.engine\n        def f():\n            try:\n                yield gen.Wait(\"k1\")\n                raise Exception(\"did not get expected exception\")\n            except gen.UnknownKeyError:\n                pass\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            self.assertEqual((yield gen.Wait(\"k2\")), \"v2\")\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 260,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#262",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            try:\n                yield gen.Wait(\"k1\")\n                raise Exception(\"did not get expected exception\")\n            except gen.UnknownKeyError:\n                pass\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            self.assertEqual((yield gen.Wait(\"k2\")), \"v2\")\n            self.stop()",
        "begin_line": 262,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_orphaned_callback#273",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_orphaned_callback(self)",
        "snippet": "    def test_orphaned_callback(self):\n        @gen.engine\n        def f():\n            self.orphaned_callback = yield gen.Callback(1)\n        try:\n            self.run_gen(f)\n            raise Exception(\"did not get expected exception\")\n        except gen.LeakedCallbackError:\n            pass\n        self.orphaned_callback()",
        "begin_line": 273,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#275",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.orphaned_callback = yield gen.Callback(1)",
        "begin_line": 275,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi#284",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi(self)",
        "snippet": "    def test_multi(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback(\"k1\"))(\"v1\")\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            results = yield [gen.Wait(\"k1\"), gen.Wait(\"k2\")]\n            self.assertEqual(results, [\"v1\", \"v2\"])\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 284,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#286",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback(\"k1\"))(\"v1\")\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            results = yield [gen.Wait(\"k1\"), gen.Wait(\"k2\")]\n            self.assertEqual(results, [\"v1\", \"v2\"])\n            self.stop()",
        "begin_line": 286,
        "end_line": 291,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_dict#294",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_dict(self)",
        "snippet": "    def test_multi_dict(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback(\"k1\"))(\"v1\")\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            results = yield dict(foo=gen.Wait(\"k1\"), bar=gen.Wait(\"k2\"))\n            self.assertEqual(results, dict(foo=\"v1\", bar=\"v2\"))\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 294,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#296",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback(\"k1\"))(\"v1\")\n            (yield gen.Callback(\"k2\"))(\"v2\")\n            results = yield dict(foo=gen.Wait(\"k1\"), bar=gen.Wait(\"k2\"))\n            self.assertEqual(results, dict(foo=\"v1\", bar=\"v2\"))\n            self.stop()",
        "begin_line": 296,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_yieldpoint_delayed#307",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_yieldpoint_delayed(self)",
        "snippet": "    def test_multi_yieldpoint_delayed(self):\n        @gen.engine\n        def f():\n            # callbacks run at different times\n            responses = yield gen.Multi([\n                gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ])\n            self.assertEqual(responses, [\"v1\", \"v2\"])\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 307,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#309",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            # callbacks run at different times\n            responses = yield gen.Multi([\n                gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ])\n            self.assertEqual(responses, [\"v1\", \"v2\"])\n            self.stop()",
        "begin_line": 309,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_yieldpoint_dict_delayed#319",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_yieldpoint_dict_delayed(self)",
        "snippet": "    def test_multi_yieldpoint_dict_delayed(self):\n        @gen.engine\n        def f():\n            # callbacks run at different times\n            responses = yield gen.Multi(dict(\n                foo=gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                bar=gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ))\n            self.assertEqual(responses, dict(foo=\"v1\", bar=\"v2\"))\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 319,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#321",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            # callbacks run at different times\n            responses = yield gen.Multi(dict(\n                foo=gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                bar=gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ))\n            self.assertEqual(responses, dict(foo=\"v1\", bar=\"v2\"))\n            self.stop()",
        "begin_line": 321,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_future_delayed#331",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_future_delayed(self)",
        "snippet": "    def test_multi_future_delayed(self):\n        @gen.engine\n        def f():\n            # callbacks run at different times\n            responses = yield gen.multi_future([\n                gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ])\n            self.assertEqual(responses, [\"v1\", \"v2\"])\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 331,
        "end_line": 341,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#333",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            # callbacks run at different times\n            responses = yield gen.multi_future([\n                gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ])\n            self.assertEqual(responses, [\"v1\", \"v2\"])\n            self.stop()",
        "begin_line": 333,
        "end_line": 340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_future_dict_delayed#343",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_future_dict_delayed(self)",
        "snippet": "    def test_multi_future_dict_delayed(self):\n        @gen.engine\n        def f():\n            # callbacks run at different times\n            responses = yield gen.multi_future(dict(\n                foo=gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                bar=gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ))\n            self.assertEqual(responses, dict(foo=\"v1\", bar=\"v2\"))\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 343,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#345",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            # callbacks run at different times\n            responses = yield gen.multi_future(dict(\n                foo=gen.Task(self.delay_callback, 3, arg=\"v1\"),\n                bar=gen.Task(self.delay_callback, 1, arg=\"v2\"),\n            ))\n            self.assertEqual(responses, dict(foo=\"v1\", bar=\"v2\"))\n            self.stop()",
        "begin_line": 345,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_performance#357",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_performance(self)",
        "snippet": "    def test_multi_performance(self):\n        # Yielding a list used to have quadratic performance; make\n        # sure a large list stays reasonable.  On my laptop a list of\n        # 2000 used to take 1.8s, now it takes 0.12.\n        start = time.time()\n        yield [gen.Task(self.io_loop.add_callback) for i in range(2000)]\n        end = time.time()\n        self.assertLess(end - start, 1.0)",
        "begin_line": 357,
        "end_line": 364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_empty#367",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_empty(self)",
        "snippet": "    def test_multi_empty(self):\n        # Empty lists or dicts should return the same type.\n        x = yield []\n        self.assertTrue(isinstance(x, list))\n        y = yield {}\n        self.assertTrue(isinstance(y, dict))",
        "begin_line": 367,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_mixed_types#375",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_mixed_types(self)",
        "snippet": "    def test_multi_mixed_types(self):\n        # A YieldPoint (Wait) and Future (Task) can be combined\n        # (and use the YieldPoint codepath)\n        (yield gen.Callback(\"k1\"))(\"v1\")\n        responses = yield [gen.Wait(\"k1\"),\n                           gen.Task(self.delay_callback, 3, arg=\"v2\")]\n        self.assertEqual(responses, [\"v1\", \"v2\"])",
        "begin_line": 375,
        "end_line": 381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_future#384",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_future(self)",
        "snippet": "    def test_future(self):\n        result = yield self.async_future(1)\n        self.assertEqual(result, 1)",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_future#389",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_future(self)",
        "snippet": "    def test_multi_future(self):\n        results = yield [self.async_future(1), self.async_future(2)]\n        self.assertEqual(results, [1, 2])",
        "begin_line": 389,
        "end_line": 391,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_future_duplicate#394",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_future_duplicate(self)",
        "snippet": "    def test_multi_future_duplicate(self):\n        f = self.async_future(2)\n        results = yield [self.async_future(1), f, self.async_future(3), f]\n        self.assertEqual(results, [1, 2, 3, 2])",
        "begin_line": 394,
        "end_line": 397,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_dict_future#400",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_dict_future(self)",
        "snippet": "    def test_multi_dict_future(self):\n        results = yield dict(foo=self.async_future(1), bar=self.async_future(2))\n        self.assertEqual(results, dict(foo=1, bar=2))",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_exceptions#405",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_exceptions(self)",
        "snippet": "    def test_multi_exceptions(self):\n        with ExpectLog(app_log, \"Multiple exceptions in yield list\"):\n            with self.assertRaises(RuntimeError) as cm:\n                yield gen.Multi([self.async_exception(RuntimeError(\"error 1\")),\n                                 self.async_exception(RuntimeError(\"error 2\"))])\n        self.assertEqual(str(cm.exception), \"error 1\")\n\n        # With only one exception, no error is logged.\n        with self.assertRaises(RuntimeError):\n            yield gen.Multi([self.async_exception(RuntimeError(\"error 1\")),\n                             self.async_future(2)])\n\n        # Exception logging may be explicitly quieted.\n        with self.assertRaises(RuntimeError):\n                yield gen.Multi([self.async_exception(RuntimeError(\"error 1\")),\n                                 self.async_exception(RuntimeError(\"error 2\"))],\n                                quiet_exceptions=RuntimeError)",
        "begin_line": 405,
        "end_line": 421,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_multi_future_exceptions#424",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_multi_future_exceptions(self)",
        "snippet": "    def test_multi_future_exceptions(self):\n        with ExpectLog(app_log, \"Multiple exceptions in yield list\"):\n            with self.assertRaises(RuntimeError) as cm:\n                yield [self.async_exception(RuntimeError(\"error 1\")),\n                       self.async_exception(RuntimeError(\"error 2\"))]\n        self.assertEqual(str(cm.exception), \"error 1\")\n\n        # With only one exception, no error is logged.\n        with self.assertRaises(RuntimeError):\n            yield [self.async_exception(RuntimeError(\"error 1\")),\n                   self.async_future(2)]\n\n        # Exception logging may be explicitly quieted.\n        with self.assertRaises(RuntimeError):\n                yield gen.multi_future(\n                    [self.async_exception(RuntimeError(\"error 1\")),\n                     self.async_exception(RuntimeError(\"error 2\"))],\n                    quiet_exceptions=RuntimeError)",
        "begin_line": 424,
        "end_line": 441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_arguments#443",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_arguments(self)",
        "snippet": "    def test_arguments(self):\n        @gen.engine\n        def f():\n            (yield gen.Callback(\"noargs\"))()\n            self.assertEqual((yield gen.Wait(\"noargs\")), None)\n            (yield gen.Callback(\"1arg\"))(42)\n            self.assertEqual((yield gen.Wait(\"1arg\")), 42)\n\n            (yield gen.Callback(\"kwargs\"))(value=42)\n            result = yield gen.Wait(\"kwargs\")\n            self.assertTrue(isinstance(result, gen.Arguments))\n            self.assertEqual(((), dict(value=42)), result)\n            self.assertEqual(dict(value=42), result.kwargs)\n\n            (yield gen.Callback(\"2args\"))(42, 43)\n            result = yield gen.Wait(\"2args\")\n            self.assertTrue(isinstance(result, gen.Arguments))\n            self.assertEqual(((42, 43), {}), result)\n            self.assertEqual((42, 43), result.args)\n\n            def task_func(callback):\n                callback(None, error=\"foo\")\n            result = yield gen.Task(task_func)\n            self.assertTrue(isinstance(result, gen.Arguments))\n            self.assertEqual(((None,), dict(error=\"foo\")), result)\n\n            self.stop()\n        self.run_gen(f)",
        "begin_line": 443,
        "end_line": 470,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#445",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            (yield gen.Callback(\"noargs\"))()\n            self.assertEqual((yield gen.Wait(\"noargs\")), None)\n            (yield gen.Callback(\"1arg\"))(42)\n            self.assertEqual((yield gen.Wait(\"1arg\")), 42)\n\n            (yield gen.Callback(\"kwargs\"))(value=42)\n            result = yield gen.Wait(\"kwargs\")\n            self.assertTrue(isinstance(result, gen.Arguments))\n            self.assertEqual(((), dict(value=42)), result)\n            self.assertEqual(dict(value=42), result.kwargs)\n\n            (yield gen.Callback(\"2args\"))(42, 43)\n            result = yield gen.Wait(\"2args\")\n            self.assertTrue(isinstance(result, gen.Arguments))\n            self.assertEqual(((42, 43), {}), result)\n            self.assertEqual((42, 43), result.args)\n\n            def task_func(callback):\n                callback(None, error=\"foo\")\n            result = yield gen.Task(task_func)\n            self.assertTrue(isinstance(result, gen.Arguments))\n            self.assertEqual(((None,), dict(error=\"foo\")), result)\n\n            self.stop()",
        "begin_line": 445,
        "end_line": 469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.task_func#463",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.task_func(callback)",
        "snippet": "            def task_func(callback):\n                callback(None, error=\"foo\")",
        "begin_line": 463,
        "end_line": 464,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_stack_context_leak#472",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_stack_context_leak(self)",
        "snippet": "    def test_stack_context_leak(self):\n        # regression test: repeated invocations of a gen-based\n        # function should not result in accumulated stack_contexts\n        def _stack_depth():\n            head = stack_context._state.contexts[1]\n            length = 0\n\n            while head is not None:\n                length += 1\n                head = head.old_contexts[1]\n\n            return length\n\n        @gen.engine\n        def inner(callback):\n            yield gen.Task(self.io_loop.add_callback)\n            callback()\n\n        @gen.engine\n        def outer():\n            for i in range(10):\n                yield gen.Task(inner)\n\n            stack_increase = _stack_depth() - initial_stack_depth\n            self.assertTrue(stack_increase <= 2)\n            self.stop()\n        initial_stack_depth = _stack_depth()\n        self.run_gen(outer)",
        "begin_line": 472,
        "end_line": 499,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest._stack_depth#475",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest._stack_depth()",
        "snippet": "        def _stack_depth():\n            head = stack_context._state.contexts[1]\n            length = 0\n\n            while head is not None:\n                length += 1\n                head = head.old_contexts[1]\n\n            return length",
        "begin_line": 475,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.inner#486",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.inner(callback)",
        "snippet": "        def inner(callback):\n            yield gen.Task(self.io_loop.add_callback)\n            callback()",
        "begin_line": 486,
        "end_line": 488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.outer#491",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.outer()",
        "snippet": "        def outer():\n            for i in range(10):\n                yield gen.Task(inner)\n\n            stack_increase = _stack_depth() - initial_stack_depth\n            self.assertTrue(stack_increase <= 2)\n            self.stop()",
        "begin_line": 491,
        "end_line": 497,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_stack_context_leak_exception#501",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_stack_context_leak_exception(self)",
        "snippet": "    def test_stack_context_leak_exception(self):\n        # same as previous, but with a function that exits with an exception\n        @gen.engine\n        def inner(callback):\n            yield gen.Task(self.io_loop.add_callback)\n            1 / 0\n\n        @gen.engine\n        def outer():\n            for i in range(10):\n                try:\n                    yield gen.Task(inner)\n                except ZeroDivisionError:\n                    pass\n            stack_increase = len(stack_context._state.contexts) - initial_stack_depth\n            self.assertTrue(stack_increase <= 2)\n            self.stop()\n        initial_stack_depth = len(stack_context._state.contexts)\n        self.run_gen(outer)",
        "begin_line": 501,
        "end_line": 519,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.inner#504",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.inner(callback)",
        "snippet": "        def inner(callback):\n            yield gen.Task(self.io_loop.add_callback)\n            1 / 0",
        "begin_line": 504,
        "end_line": 506,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.outer#509",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.outer()",
        "snippet": "        def outer():\n            for i in range(10):\n                try:\n                    yield gen.Task(inner)\n                except ZeroDivisionError:\n                    pass\n            stack_increase = len(stack_context._state.contexts) - initial_stack_depth\n            self.assertTrue(stack_increase <= 2)\n            self.stop()",
        "begin_line": 509,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.function_with_stack_context#521",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.function_with_stack_context(self, callback)",
        "snippet": "    def function_with_stack_context(self, callback):\n        # Technically this function should stack_context.wrap its callback\n        # upon entry.  However, it is very common for this step to be\n        # omitted.\n        def step2():\n            self.assertEqual(self.named_contexts, ['a'])\n            self.io_loop.add_callback(callback)\n\n        with stack_context.StackContext(self.named_context('a')):\n            self.io_loop.add_callback(step2)",
        "begin_line": 521,
        "end_line": 530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.step2#525",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.step2()",
        "snippet": "        def step2():\n            self.assertEqual(self.named_contexts, ['a'])\n            self.io_loop.add_callback(callback)",
        "begin_line": 525,
        "end_line": 527,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_wait_transfer_stack_context#533",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_wait_transfer_stack_context(self)",
        "snippet": "    def test_wait_transfer_stack_context(self):\n        # Wait should not pick up contexts from where callback was invoked,\n        # even if that function improperly fails to wrap its callback.\n        cb = yield gen.Callback('k1')\n        self.function_with_stack_context(cb)\n        self.assertEqual(self.named_contexts, [])\n        yield gen.Wait('k1')\n        self.assertEqual(self.named_contexts, [])",
        "begin_line": 533,
        "end_line": 540,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_task_transfer_stack_context#543",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_task_transfer_stack_context(self)",
        "snippet": "    def test_task_transfer_stack_context(self):\n        yield gen.Task(self.function_with_stack_context)\n        self.assertEqual(self.named_contexts, [])",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_raise_after_stop#547",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_raise_after_stop(self)",
        "snippet": "    def test_raise_after_stop(self):\n        # This pattern will be used in the following tests so make sure\n        # the exception propagates as expected.\n        @gen.engine\n        def f():\n            self.stop()\n            1 / 0\n\n        with self.assertRaises(ZeroDivisionError):\n            self.run_gen(f)",
        "begin_line": 547,
        "end_line": 556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#551",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.stop()\n            1 / 0",
        "begin_line": 551,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_sync_raise_return#558",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_sync_raise_return(self)",
        "snippet": "    def test_sync_raise_return(self):\n        # gen.Return is allowed in @gen.engine, but it may not be used\n        # to return a value.\n        @gen.engine\n        def f():\n            self.stop(42)\n            raise gen.Return()\n\n        result = self.run_gen(f)\n        self.assertEqual(result, 42)",
        "begin_line": 558,
        "end_line": 567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#562",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            self.stop(42)\n            raise gen.Return()",
        "begin_line": 562,
        "end_line": 564,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_async_raise_return#569",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_async_raise_return(self)",
        "snippet": "    def test_async_raise_return(self):\n        @gen.engine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            self.stop(42)\n            raise gen.Return()\n\n        result = self.run_gen(f)\n        self.assertEqual(result, 42)",
        "begin_line": 569,
        "end_line": 577,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#571",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            self.stop(42)\n            raise gen.Return()",
        "begin_line": 571,
        "end_line": 574,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_sync_raise_return_value#579",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_sync_raise_return_value(self)",
        "snippet": "    def test_sync_raise_return_value(self):\n        @gen.engine\n        def f():\n            raise gen.Return(42)\n\n        with self.assertRaises(gen.ReturnValueIgnoredError):\n            self.run_gen(f)",
        "begin_line": 579,
        "end_line": 585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#581",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            raise gen.Return(42)",
        "begin_line": 581,
        "end_line": 582,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_sync_raise_return_value_tuple#587",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_sync_raise_return_value_tuple(self)",
        "snippet": "    def test_sync_raise_return_value_tuple(self):\n        @gen.engine\n        def f():\n            raise gen.Return((1, 2))\n\n        with self.assertRaises(gen.ReturnValueIgnoredError):\n            self.run_gen(f)",
        "begin_line": 587,
        "end_line": 593,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#589",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            raise gen.Return((1, 2))",
        "begin_line": 589,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_async_raise_return_value#595",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_async_raise_return_value(self)",
        "snippet": "    def test_async_raise_return_value(self):\n        @gen.engine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            raise gen.Return(42)\n\n        with self.assertRaises(gen.ReturnValueIgnoredError):\n            self.run_gen(f)",
        "begin_line": 595,
        "end_line": 602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#597",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            raise gen.Return(42)",
        "begin_line": 597,
        "end_line": 599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_async_raise_return_value_tuple#604",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_async_raise_return_value_tuple(self)",
        "snippet": "    def test_async_raise_return_value_tuple(self):\n        @gen.engine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            raise gen.Return((1, 2))\n\n        with self.assertRaises(gen.ReturnValueIgnoredError):\n            self.run_gen(f)",
        "begin_line": 604,
        "end_line": 611,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#606",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            raise gen.Return((1, 2))",
        "begin_line": 606,
        "end_line": 608,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_return_value#613",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_return_value(self)",
        "snippet": "    def test_return_value(self):\n        # It is an error to apply @gen.engine to a function that returns\n        # a value.\n        @gen.engine\n        def f():\n            return 42\n\n        with self.assertRaises(gen.ReturnValueIgnoredError):\n            self.run_gen(f)",
        "begin_line": 613,
        "end_line": 621,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#617",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            return 42",
        "begin_line": 617,
        "end_line": 618,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_return_value_tuple#623",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_return_value_tuple(self)",
        "snippet": "    def test_return_value_tuple(self):\n        # It is an error to apply @gen.engine to a function that returns\n        # a value.\n        @gen.engine\n        def f():\n            return (1, 2)\n\n        with self.assertRaises(gen.ReturnValueIgnoredError):\n            self.run_gen(f)",
        "begin_line": 623,
        "end_line": 631,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#627",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            return (1, 2)",
        "begin_line": 627,
        "end_line": 628,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.test_task_refcounting#634",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.test_task_refcounting(self)",
        "snippet": "    def test_task_refcounting(self):\n        # On CPython, tasks and their arguments should be released immediately\n        # without waiting for garbage collection.\n        @gen.engine\n        def f():\n            class Foo(object):\n                pass\n            arg = Foo()\n            self.arg_ref = weakref.ref(arg)\n            task = gen.Task(self.io_loop.add_callback, arg=arg)\n            self.task_ref = weakref.ref(task)\n            yield task\n            self.stop()\n\n        self.run_gen(f)\n        self.assertIs(self.arg_ref(), None)\n        self.assertIs(self.task_ref(), None)",
        "begin_line": 634,
        "end_line": 650,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenEngineTest.f#638",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenEngineTest",
        "signature": "tornado.test.gen_test.GenEngineTest.f()",
        "snippet": "        def f():\n            class Foo(object):\n                pass\n            arg = Foo()\n            self.arg_ref = weakref.ref(arg)\n            task = gen.Task(self.io_loop.add_callback, arg=arg)\n            self.task_ref = weakref.ref(task)\n            yield task\n            self.stop()",
        "begin_line": 638,
        "end_line": 646,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.Foo.f#638",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.Foo",
        "signature": "tornado.test.gen_test.Foo.f()",
        "snippet": "        def f():\n            class Foo(object):\n                pass\n            arg = Foo()\n            self.arg_ref = weakref.ref(arg)\n            task = gen.Task(self.io_loop.add_callback, arg=arg)\n            self.task_ref = weakref.ref(task)\n            yield task\n            self.stop()",
        "begin_line": 638,
        "end_line": 646,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.setUp#654",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.setUp(self)",
        "snippet": "    def setUp(self):\n        # Stray StopIteration exceptions can lead to tests exiting prematurely,\n        # so we need explicit checks here to make sure the tests run all\n        # the way through.\n        self.finished = False\n        super(GenCoroutineTest, self).setUp()",
        "begin_line": 654,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.tearDown#661",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(GenCoroutineTest, self).tearDown()\n        assert self.finished",
        "begin_line": 661,
        "end_line": 663,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_sync_gen_return#666",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_sync_gen_return(self)",
        "snippet": "    def test_sync_gen_return(self):\n        @gen.coroutine\n        def f():\n            raise gen.Return(42)\n        result = yield f()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 666,
        "end_line": 672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#668",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            raise gen.Return(42)",
        "begin_line": 668,
        "end_line": 669,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_async_gen_return#675",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_async_gen_return(self)",
        "snippet": "    def test_async_gen_return(self):\n        @gen.coroutine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            raise gen.Return(42)\n        result = yield f()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 675,
        "end_line": 682,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#677",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            raise gen.Return(42)",
        "begin_line": 677,
        "end_line": 679,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_sync_return#685",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_sync_return(self)",
        "snippet": "    def test_sync_return(self):\n        @gen.coroutine\n        def f():\n            return 42\n        result = yield f()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 685,
        "end_line": 691,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#687",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            return 42",
        "begin_line": 687,
        "end_line": 688,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_async_return#695",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_async_return(self)",
        "snippet": "    def test_async_return(self):\n        # It is a compile-time error to return a value in a generator\n        # before Python 3.3, so we must test this with exec.\n        # Flatten the real global and local namespace into our fake globals:\n        # it's all global from the perspective of f().\n        global_namespace = dict(globals(), **locals())\n        local_namespace = {}\n        exec(textwrap.dedent(\"\"\"\n        @gen.coroutine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            return 42\n        \"\"\"), global_namespace, local_namespace)\n        result = yield local_namespace['f']()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 695,
        "end_line": 710,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_async_early_return#714",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_async_early_return(self)",
        "snippet": "    def test_async_early_return(self):\n        # A yield statement exists but is not executed, which means\n        # this function \"returns\" via an exception.  This exception\n        # doesn't happen before the exception handling is set up.\n        global_namespace = dict(globals(), **locals())\n        local_namespace = {}\n        exec(textwrap.dedent(\"\"\"\n        @gen.coroutine\n        def f():\n            if True:\n                return 42\n            yield gen.Task(self.io_loop.add_callback)\n        \"\"\"), global_namespace, local_namespace)\n        result = yield local_namespace['f']()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 714,
        "end_line": 729,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_sync_return_no_value#732",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_sync_return_no_value(self)",
        "snippet": "    def test_sync_return_no_value(self):\n        @gen.coroutine\n        def f():\n            return\n        result = yield f()\n        self.assertEqual(result, None)\n        self.finished = True",
        "begin_line": 732,
        "end_line": 738,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#734",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            return",
        "begin_line": 734,
        "end_line": 735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_async_return_no_value#741",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_async_return_no_value(self)",
        "snippet": "    def test_async_return_no_value(self):\n        # Without a return value we don't need python 3.3.\n        @gen.coroutine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            return\n        result = yield f()\n        self.assertEqual(result, None)\n        self.finished = True",
        "begin_line": 741,
        "end_line": 749,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#744",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            return",
        "begin_line": 744,
        "end_line": 746,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_sync_raise#752",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_sync_raise(self)",
        "snippet": "    def test_sync_raise(self):\n        @gen.coroutine\n        def f():\n            1 / 0\n        # The exception is raised when the future is yielded\n        # (or equivalently when its result method is called),\n        # not when the function itself is called).\n        future = f()\n        with self.assertRaises(ZeroDivisionError):\n            yield future\n        self.finished = True",
        "begin_line": 752,
        "end_line": 762,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#754",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            1 / 0",
        "begin_line": 754,
        "end_line": 755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_async_raise#765",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_async_raise(self)",
        "snippet": "    def test_async_raise(self):\n        @gen.coroutine\n        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            1 / 0\n        future = f()\n        with self.assertRaises(ZeroDivisionError):\n            yield future\n        self.finished = True",
        "begin_line": 765,
        "end_line": 773,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#767",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            yield gen.Task(self.io_loop.add_callback)\n            1 / 0",
        "begin_line": 767,
        "end_line": 769,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_pass_callback#776",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_pass_callback(self)",
        "snippet": "    def test_pass_callback(self):\n        @gen.coroutine\n        def f():\n            raise gen.Return(42)\n        result = yield gen.Task(f)\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 776,
        "end_line": 782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#778",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f()",
        "snippet": "        def f():\n            raise gen.Return(42)",
        "begin_line": 778,
        "end_line": 779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_replace_yieldpoint_exception#785",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_replace_yieldpoint_exception(self)",
        "snippet": "    def test_replace_yieldpoint_exception(self):\n        # Test exception handling: a coroutine can catch one exception\n        # raised by a yield point and raise a different one.\n        @gen.coroutine\n        def f1():\n            1 / 0\n\n        @gen.coroutine\n        def f2():\n            try:\n                yield f1()\n            except ZeroDivisionError:\n                raise KeyError()\n\n        future = f2()\n        with self.assertRaises(KeyError):\n            yield future\n        self.finished = True",
        "begin_line": 785,
        "end_line": 802,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f1#789",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f1()",
        "snippet": "        def f1():\n            1 / 0",
        "begin_line": 789,
        "end_line": 790,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f2#793",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f2()",
        "snippet": "        def f2():\n            try:\n                yield f1()\n            except ZeroDivisionError:\n                raise KeyError()",
        "begin_line": 793,
        "end_line": 797,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_swallow_yieldpoint_exception#805",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_swallow_yieldpoint_exception(self)",
        "snippet": "    def test_swallow_yieldpoint_exception(self):\n        # Test exception handling: a coroutine can catch an exception\n        # raised by a yield point and not raise a different one.\n        @gen.coroutine\n        def f1():\n            1 / 0\n\n        @gen.coroutine\n        def f2():\n            try:\n                yield f1()\n            except ZeroDivisionError:\n                raise gen.Return(42)\n\n        result = yield f2()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 805,
        "end_line": 821,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f1#809",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f1()",
        "snippet": "        def f1():\n            1 / 0",
        "begin_line": 809,
        "end_line": 810,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f2#813",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f2()",
        "snippet": "        def f2():\n            try:\n                yield f1()\n            except ZeroDivisionError:\n                raise gen.Return(42)",
        "begin_line": 813,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_replace_context_exception#824",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_replace_context_exception(self)",
        "snippet": "    def test_replace_context_exception(self):\n        # Test exception handling: exceptions thrown into the stack context\n        # can be caught and replaced.\n        # Note that this test and the following are for behavior that is\n        # not really supported any more:  coroutines no longer create a\n        # stack context automatically; but one is created after the first\n        # YieldPoint (i.e. not a Future).\n        @gen.coroutine\n        def f2():\n            (yield gen.Callback(1))()\n            yield gen.Wait(1)\n            self.io_loop.add_callback(lambda: 1 / 0)\n            try:\n                yield gen.Task(self.io_loop.add_timeout,\n                               self.io_loop.time() + 10)\n            except ZeroDivisionError:\n                raise KeyError()\n\n        future = f2()\n        with self.assertRaises(KeyError):\n            yield future\n        self.finished = True",
        "begin_line": 824,
        "end_line": 845,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f2#832",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f2()",
        "snippet": "        def f2():\n            (yield gen.Callback(1))()\n            yield gen.Wait(1)\n            self.io_loop.add_callback(lambda: 1 / 0)\n            try:\n                yield gen.Task(self.io_loop.add_timeout,\n                               self.io_loop.time() + 10)\n            except ZeroDivisionError:\n                raise KeyError()",
        "begin_line": 832,
        "end_line": 840,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_swallow_context_exception#848",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_swallow_context_exception(self)",
        "snippet": "    def test_swallow_context_exception(self):\n        # Test exception handling: exceptions thrown into the stack context\n        # can be caught and ignored.\n        @gen.coroutine\n        def f2():\n            (yield gen.Callback(1))()\n            yield gen.Wait(1)\n            self.io_loop.add_callback(lambda: 1 / 0)\n            try:\n                yield gen.Task(self.io_loop.add_timeout,\n                               self.io_loop.time() + 10)\n            except ZeroDivisionError:\n                raise gen.Return(42)\n\n        result = yield f2()\n        self.assertEqual(result, 42)\n        self.finished = True",
        "begin_line": 848,
        "end_line": 864,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f2#852",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f2()",
        "snippet": "        def f2():\n            (yield gen.Callback(1))()\n            yield gen.Wait(1)\n            self.io_loop.add_callback(lambda: 1 / 0)\n            try:\n                yield gen.Task(self.io_loop.add_timeout,\n                               self.io_loop.time() + 10)\n            except ZeroDivisionError:\n                raise gen.Return(42)",
        "begin_line": 852,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_moment#867",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_moment(self)",
        "snippet": "    def test_moment(self):\n        calls = []\n\n        @gen.coroutine\n        def f(name, yieldable):\n            for i in range(5):\n                calls.append(name)\n                yield yieldable\n        # First, confirm the behavior without moment: each coroutine\n        # monopolizes the event loop until it finishes.\n        immediate = Future()\n        immediate.set_result(None)\n        yield [f('a', immediate), f('b', immediate)]\n        self.assertEqual(''.join(calls), 'aaaaabbbbb')\n\n        # With moment, they take turns.\n        calls = []\n        yield [f('a', gen.moment), f('b', gen.moment)]\n        self.assertEqual(''.join(calls), 'ababababab')\n        self.finished = True\n\n        calls = []\n        yield [f('a', gen.moment), f('b', immediate)]\n        self.assertEqual(''.join(calls), 'abbbbbaaaa')",
        "begin_line": 867,
        "end_line": 890,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.f#871",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.f(name, yieldable)",
        "snippet": "        def f(name, yieldable):\n            for i in range(5):\n                calls.append(name)\n                yield yieldable",
        "begin_line": 871,
        "end_line": 874,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_sleep#893",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_sleep(self)",
        "snippet": "    def test_sleep(self):\n        yield gen.sleep(0.01)\n        self.finished = True",
        "begin_line": 893,
        "end_line": 895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.test_py3_leak_exception_context#899",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.test_py3_leak_exception_context(self)",
        "snippet": "    def test_py3_leak_exception_context(self):\n        class LeakedException(Exception):\n            pass\n\n        @gen.coroutine\n        def inner(iteration):\n            raise LeakedException(iteration)\n\n        try:\n            yield inner(1)\n        except LeakedException as e:\n            self.assertEqual(str(e), \"1\")\n            self.assertIsNone(e.__context__)\n\n        try:\n            yield inner(2)\n        except LeakedException as e:\n            self.assertEqual(str(e), \"2\")\n            self.assertIsNone(e.__context__)\n\n        self.finished = True",
        "begin_line": 899,
        "end_line": 919,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.LeakedException.test_py3_leak_exception_context#899",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.LeakedException",
        "signature": "tornado.test.gen_test.LeakedException.test_py3_leak_exception_context(self)",
        "snippet": "    def test_py3_leak_exception_context(self):\n        class LeakedException(Exception):\n            pass\n\n        @gen.coroutine\n        def inner(iteration):\n            raise LeakedException(iteration)\n\n        try:\n            yield inner(1)\n        except LeakedException as e:\n            self.assertEqual(str(e), \"1\")\n            self.assertIsNone(e.__context__)\n\n        try:\n            yield inner(2)\n        except LeakedException as e:\n            self.assertEqual(str(e), \"2\")\n            self.assertIsNone(e.__context__)\n\n        self.finished = True",
        "begin_line": 899,
        "end_line": 919,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineTest.inner#904",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineTest",
        "signature": "tornado.test.gen_test.GenCoroutineTest.inner(iteration)",
        "snippet": "        def inner(iteration):\n            raise LeakedException(iteration)",
        "begin_line": 904,
        "end_line": 905,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenSequenceHandler.get#924",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenSequenceHandler",
        "signature": "tornado.test.gen_test.GenSequenceHandler.get(self)",
        "snippet": "    def get(self):\n        self.io_loop = self.request.connection.stream.io_loop\n        self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n        yield gen.Wait(\"k1\")\n        self.write(\"1\")\n        self.io_loop.add_callback((yield gen.Callback(\"k2\")))\n        yield gen.Wait(\"k2\")\n        self.write(\"2\")\n        # reuse an old key\n        self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n        yield gen.Wait(\"k1\")\n        self.finish(\"3\")",
        "begin_line": 924,
        "end_line": 935,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineSequenceHandler.get#940",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineSequenceHandler",
        "signature": "tornado.test.gen_test.GenCoroutineSequenceHandler.get(self)",
        "snippet": "    def get(self):\n        self.io_loop = self.request.connection.stream.io_loop\n        self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n        yield gen.Wait(\"k1\")\n        self.write(\"1\")\n        self.io_loop.add_callback((yield gen.Callback(\"k2\")))\n        yield gen.Wait(\"k2\")\n        self.write(\"2\")\n        # reuse an old key\n        self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n        yield gen.Wait(\"k1\")\n        self.finish(\"3\")",
        "begin_line": 940,
        "end_line": 951,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler.get#957",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler",
        "signature": "tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler.get(self)",
        "snippet": "    def get(self):\n        self.io_loop = self.request.connection.stream.io_loop\n        self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n        yield gen.Wait(\"k1\")\n        self.write(\"1\")\n        self.io_loop.add_callback((yield gen.Callback(\"k2\")))\n        yield gen.Wait(\"k2\")\n        self.write(\"2\")\n        # reuse an old key\n        self.io_loop.add_callback((yield gen.Callback(\"k1\")))\n        yield gen.Wait(\"k1\")\n        # just write, don't finish\n        self.write(\"3\")",
        "begin_line": 957,
        "end_line": 969,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenTaskHandler.get#975",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenTaskHandler",
        "signature": "tornado.test.gen_test.GenTaskHandler.get(self)",
        "snippet": "    def get(self):\n        io_loop = self.request.connection.stream.io_loop\n        client = AsyncHTTPClient(io_loop=io_loop)\n        response = yield gen.Task(client.fetch, self.get_argument('url'))\n        response.rethrow()\n        self.finish(b\"got response: \" + response.body)",
        "begin_line": 975,
        "end_line": 980,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenExceptionHandler.get#986",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenExceptionHandler",
        "signature": "tornado.test.gen_test.GenExceptionHandler.get(self)",
        "snippet": "    def get(self):\n        # This test depends on the order of the two decorators.\n        io_loop = self.request.connection.stream.io_loop\n        yield gen.Task(io_loop.add_callback)\n        raise Exception(\"oops\")",
        "begin_line": 986,
        "end_line": 990,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenCoroutineExceptionHandler.get#995",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenCoroutineExceptionHandler",
        "signature": "tornado.test.gen_test.GenCoroutineExceptionHandler.get(self)",
        "snippet": "    def get(self):\n        # This test depends on the order of the two decorators.\n        io_loop = self.request.connection.stream.io_loop\n        yield gen.Task(io_loop.add_callback)\n        raise Exception(\"oops\")",
        "begin_line": 995,
        "end_line": 999,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenYieldExceptionHandler.get#1005",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenYieldExceptionHandler",
        "signature": "tornado.test.gen_test.GenYieldExceptionHandler.get(self)",
        "snippet": "    def get(self):\n        io_loop = self.request.connection.stream.io_loop\n        # Test the interaction of the two stack_contexts.\n\n        def fail_task(callback):\n            io_loop.add_callback(lambda: 1 / 0)\n        try:\n            yield gen.Task(fail_task)\n            raise Exception(\"did not get expected exception\")\n        except ZeroDivisionError:\n            self.finish('ok')",
        "begin_line": 1005,
        "end_line": 1015,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenYieldExceptionHandler.fail_task#1009",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenYieldExceptionHandler",
        "signature": "tornado.test.gen_test.GenYieldExceptionHandler.fail_task(callback)",
        "snippet": "        def fail_task(callback):\n            io_loop.add_callback(lambda: 1 / 0)",
        "begin_line": 1009,
        "end_line": 1010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.UndecoratedCoroutinesHandler.prepare#1020",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.UndecoratedCoroutinesHandler",
        "signature": "tornado.test.gen_test.UndecoratedCoroutinesHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.chunks = []\n        yield gen.Task(IOLoop.current().add_callback)\n        self.chunks.append('1')",
        "begin_line": 1020,
        "end_line": 1023,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.UndecoratedCoroutinesHandler.get#1026",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.UndecoratedCoroutinesHandler",
        "signature": "tornado.test.gen_test.UndecoratedCoroutinesHandler.get(self)",
        "snippet": "    def get(self):\n        self.chunks.append('2')\n        yield gen.Task(IOLoop.current().add_callback)\n        self.chunks.append('3')\n        yield gen.Task(IOLoop.current().add_callback)\n        self.write(''.join(self.chunks))",
        "begin_line": 1026,
        "end_line": 1031,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.AsyncPrepareErrorHandler.prepare#1036",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.AsyncPrepareErrorHandler",
        "signature": "tornado.test.gen_test.AsyncPrepareErrorHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        yield gen.Task(IOLoop.current().add_callback)\n        raise HTTPError(403)",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.AsyncPrepareErrorHandler.get#1040",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.AsyncPrepareErrorHandler",
        "signature": "tornado.test.gen_test.AsyncPrepareErrorHandler.get(self)",
        "snippet": "    def get(self):\n        self.finish('ok')",
        "begin_line": 1040,
        "end_line": 1041,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.get_app#1045",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([\n            ('/sequence', GenSequenceHandler),\n            ('/coroutine_sequence', GenCoroutineSequenceHandler),\n            ('/coroutine_unfinished_sequence',\n             GenCoroutineUnfinishedSequenceHandler),\n            ('/task', GenTaskHandler),\n            ('/exception', GenExceptionHandler),\n            ('/coroutine_exception', GenCoroutineExceptionHandler),\n            ('/yield_exception', GenYieldExceptionHandler),\n            ('/undecorated_coroutine', UndecoratedCoroutinesHandler),\n            ('/async_prepare_error', AsyncPrepareErrorHandler),\n        ])",
        "begin_line": 1045,
        "end_line": 1057,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_sequence_handler#1059",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_sequence_handler(self)",
        "snippet": "    def test_sequence_handler(self):\n        response = self.fetch('/sequence')\n        self.assertEqual(response.body, b\"123\")",
        "begin_line": 1059,
        "end_line": 1061,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_coroutine_sequence_handler#1063",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_coroutine_sequence_handler(self)",
        "snippet": "    def test_coroutine_sequence_handler(self):\n        response = self.fetch('/coroutine_sequence')\n        self.assertEqual(response.body, b\"123\")",
        "begin_line": 1063,
        "end_line": 1065,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_coroutine_unfinished_sequence_handler#1067",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_coroutine_unfinished_sequence_handler(self)",
        "snippet": "    def test_coroutine_unfinished_sequence_handler(self):\n        response = self.fetch('/coroutine_unfinished_sequence')\n        self.assertEqual(response.body, b\"123\")",
        "begin_line": 1067,
        "end_line": 1069,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_task_handler#1071",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_task_handler(self)",
        "snippet": "    def test_task_handler(self):\n        response = self.fetch('/task?url=%s' % url_escape(self.get_url('/sequence')))\n        self.assertEqual(response.body, b\"got response: 123\")",
        "begin_line": 1071,
        "end_line": 1073,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_exception_handler#1075",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_exception_handler(self)",
        "snippet": "    def test_exception_handler(self):\n        # Make sure we get an error and not a timeout\n        with ExpectLog(app_log, \"Uncaught exception GET /exception\"):\n            response = self.fetch('/exception')\n        self.assertEqual(500, response.code)",
        "begin_line": 1075,
        "end_line": 1079,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_coroutine_exception_handler#1081",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_coroutine_exception_handler(self)",
        "snippet": "    def test_coroutine_exception_handler(self):\n        # Make sure we get an error and not a timeout\n        with ExpectLog(app_log, \"Uncaught exception GET /coroutine_exception\"):\n            response = self.fetch('/coroutine_exception')\n        self.assertEqual(500, response.code)",
        "begin_line": 1081,
        "end_line": 1085,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_yield_exception_handler#1087",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_yield_exception_handler(self)",
        "snippet": "    def test_yield_exception_handler(self):\n        response = self.fetch('/yield_exception')\n        self.assertEqual(response.body, b'ok')",
        "begin_line": 1087,
        "end_line": 1089,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_undecorated_coroutines#1091",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_undecorated_coroutines(self)",
        "snippet": "    def test_undecorated_coroutines(self):\n        response = self.fetch('/undecorated_coroutine')\n        self.assertEqual(response.body, b'123')",
        "begin_line": 1091,
        "end_line": 1093,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.GenWebTest.test_async_prepare_error_handler#1095",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.GenWebTest",
        "signature": "tornado.test.gen_test.GenWebTest.test_async_prepare_error_handler(self)",
        "snippet": "    def test_async_prepare_error_handler(self):\n        response = self.fetch('/async_prepare_error')\n        self.assertEqual(response.code, 403)",
        "begin_line": 1095,
        "end_line": 1097,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WithTimeoutTest.test_timeout#1102",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WithTimeoutTest",
        "signature": "tornado.test.gen_test.WithTimeoutTest.test_timeout(self)",
        "snippet": "    def test_timeout(self):\n        with self.assertRaises(gen.TimeoutError):\n            yield gen.with_timeout(datetime.timedelta(seconds=0.1),\n                                   Future())",
        "begin_line": 1102,
        "end_line": 1105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WithTimeoutTest.test_completes_before_timeout#1108",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WithTimeoutTest",
        "signature": "tornado.test.gen_test.WithTimeoutTest.test_completes_before_timeout(self)",
        "snippet": "    def test_completes_before_timeout(self):\n        future = Future()\n        self.io_loop.add_timeout(datetime.timedelta(seconds=0.1),\n                                 lambda: future.set_result('asdf'))\n        result = yield gen.with_timeout(datetime.timedelta(seconds=3600),\n                                        future, io_loop=self.io_loop)\n        self.assertEqual(result, 'asdf')",
        "begin_line": 1108,
        "end_line": 1114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WithTimeoutTest.test_fails_before_timeout#1117",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WithTimeoutTest",
        "signature": "tornado.test.gen_test.WithTimeoutTest.test_fails_before_timeout(self)",
        "snippet": "    def test_fails_before_timeout(self):\n        future = Future()\n        self.io_loop.add_timeout(\n            datetime.timedelta(seconds=0.1),\n            lambda: future.set_exception(ZeroDivisionError()))\n        with self.assertRaises(ZeroDivisionError):\n            yield gen.with_timeout(datetime.timedelta(seconds=3600),\n                                   future, io_loop=self.io_loop)",
        "begin_line": 1117,
        "end_line": 1124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WithTimeoutTest.test_already_resolved#1127",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WithTimeoutTest",
        "signature": "tornado.test.gen_test.WithTimeoutTest.test_already_resolved(self)",
        "snippet": "    def test_already_resolved(self):\n        future = Future()\n        future.set_result('asdf')\n        result = yield gen.with_timeout(datetime.timedelta(seconds=3600),\n                                        future, io_loop=self.io_loop)\n        self.assertEqual(result, 'asdf')",
        "begin_line": 1127,
        "end_line": 1132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WithTimeoutTest.test_timeout_concurrent_future#1136",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WithTimeoutTest",
        "signature": "tornado.test.gen_test.WithTimeoutTest.test_timeout_concurrent_future(self)",
        "snippet": "    def test_timeout_concurrent_future(self):\n        with futures.ThreadPoolExecutor(1) as executor:\n            with self.assertRaises(gen.TimeoutError):\n                yield gen.with_timeout(self.io_loop.time(),\n                                       executor.submit(time.sleep, 0.1))",
        "begin_line": 1136,
        "end_line": 1140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WithTimeoutTest.test_completed_concurrent_future#1144",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WithTimeoutTest",
        "signature": "tornado.test.gen_test.WithTimeoutTest.test_completed_concurrent_future(self)",
        "snippet": "    def test_completed_concurrent_future(self):\n        with futures.ThreadPoolExecutor(1) as executor:\n            yield gen.with_timeout(datetime.timedelta(seconds=3600),\n                                   executor.submit(lambda: None))",
        "begin_line": 1144,
        "end_line": 1147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WaitIteratorTest.test_empty_iterator#1152",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WaitIteratorTest",
        "signature": "tornado.test.gen_test.WaitIteratorTest.test_empty_iterator(self)",
        "snippet": "    def test_empty_iterator(self):\n        g = gen.WaitIterator()\n        self.assertTrue(g.done(), 'empty generator iterated')\n\n        with self.assertRaises(ValueError):\n            g = gen.WaitIterator(False, bar=False)\n\n        self.assertEqual(g.current_index, None, \"bad nil current index\")\n        self.assertEqual(g.current_future, None, \"bad nil current future\")",
        "begin_line": 1152,
        "end_line": 1160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WaitIteratorTest.test_already_done#1163",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WaitIteratorTest",
        "signature": "tornado.test.gen_test.WaitIteratorTest.test_already_done(self)",
        "snippet": "    def test_already_done(self):\n        f1 = Future()\n        f2 = Future()\n        f3 = Future()\n        f1.set_result(24)\n        f2.set_result(42)\n        f3.set_result(84)\n\n        g = gen.WaitIterator(f1, f2, f3)\n        i = 0\n        while not g.done():\n            r = yield g.next()\n            # Order is not guaranteed, but the current implementation\n            # preserves ordering of already-done Futures.\n            if i == 0:\n                self.assertEqual(g.current_index, 0)\n                self.assertIs(g.current_future, f1)\n                self.assertEqual(r, 24)\n            elif i == 1:\n                self.assertEqual(g.current_index, 1)\n                self.assertIs(g.current_future, f2)\n                self.assertEqual(r, 42)\n            elif i == 2:\n                self.assertEqual(g.current_index, 2)\n                self.assertIs(g.current_future, f3)\n                self.assertEqual(r, 84)\n            i += 1\n\n        self.assertEqual(g.current_index, None, \"bad nil current index\")\n        self.assertEqual(g.current_future, None, \"bad nil current future\")\n\n        dg = gen.WaitIterator(f1=f1, f2=f2)\n\n        while not dg.done():\n            dr = yield dg.next()\n            if dg.current_index == \"f1\":\n                self.assertTrue(dg.current_future == f1 and dr == 24,\n                                \"WaitIterator dict status incorrect\")\n            elif dg.current_index == \"f2\":\n                self.assertTrue(dg.current_future == f2 and dr == 42,\n                                \"WaitIterator dict status incorrect\")\n            else:\n                self.fail(\"got bad WaitIterator index {}\".format(\n                    dg.current_index))\n\n            i += 1\n\n        self.assertEqual(dg.current_index, None, \"bad nil current index\")\n        self.assertEqual(dg.current_future, None, \"bad nil current future\")",
        "begin_line": 1163,
        "end_line": 1211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WaitIteratorTest.finish_coroutines#1213",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WaitIteratorTest",
        "signature": "tornado.test.gen_test.WaitIteratorTest.finish_coroutines(self, iteration, futures)",
        "snippet": "    def finish_coroutines(self, iteration, futures):\n        if iteration == 3:\n            futures[2].set_result(24)\n        elif iteration == 5:\n            futures[0].set_exception(ZeroDivisionError())\n        elif iteration == 8:\n            futures[1].set_result(42)\n            futures[3].set_result(84)\n\n        if iteration < 8:\n            self.io_loop.add_callback(self.finish_coroutines, iteration + 1, futures)",
        "begin_line": 1213,
        "end_line": 1223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WaitIteratorTest.test_iterator#1226",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WaitIteratorTest",
        "signature": "tornado.test.gen_test.WaitIteratorTest.test_iterator(self)",
        "snippet": "    def test_iterator(self):\n        futures = [Future(), Future(), Future(), Future()]\n\n        self.finish_coroutines(0, futures)\n\n        g = gen.WaitIterator(*futures)\n\n        i = 0\n        while not g.done():\n            try:\n                r = yield g.next()\n            except ZeroDivisionError:\n                self.assertIs(g.current_future, futures[0],\n                              'exception future invalid')\n            else:\n                if i == 0:\n                    self.assertEqual(r, 24, 'iterator value incorrect')\n                    self.assertEqual(g.current_index, 2, 'wrong index')\n                elif i == 2:\n                    self.assertEqual(r, 42, 'iterator value incorrect')\n                    self.assertEqual(g.current_index, 1, 'wrong index')\n                elif i == 3:\n                    self.assertEqual(r, 84, 'iterator value incorrect')\n                    self.assertEqual(g.current_index, 3, 'wrong index')\n            i += 1",
        "begin_line": 1226,
        "end_line": 1250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.gen_test.WaitIteratorTest.test_no_ref#1253",
        "src_path": "tornado/test/gen_test.py",
        "class_name": "tornado.test.gen_test.WaitIteratorTest",
        "signature": "tornado.test.gen_test.WaitIteratorTest.test_no_ref(self)",
        "snippet": "    def test_no_ref(self):\n        # In this usage, there is no direct hard reference to the\n        # WaitIterator itself, only the Future it returns. Since\n        # WaitIterator uses weak references internally to improve GC\n        # performance, this used to cause problems.\n        yield gen.with_timeout(datetime.timedelta(seconds=0.1),\n                               gen.WaitIterator(gen.sleep(0)).next())",
        "begin_line": 1253,
        "end_line": 1259,
        "comment": "",
        "is_bug": false
    }
]