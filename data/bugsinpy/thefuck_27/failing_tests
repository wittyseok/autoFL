coverage run -m pytest tests/rules/test_open.py::test_get_new_command
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 9 items

tests/rules/test_open.py ......FFF                                       [100%]

=================================== FAILURES ===================================
____________ test_get_new_command[command6-xdg-open http://foo.io] _____________

command = Command(script='xdg-open foo.io', stdout='', stderr='')
new_command = 'xdg-open http://foo.io'

    @pytest.mark.parametrize('command, new_command', [
        (Command('open foo.com'), 'open http://foo.com'),
        (Command('open foo.ly'), 'open http://foo.ly'),
        (Command('open foo.org'), 'open http://foo.org'),
        (Command('open foo.net'), 'open http://foo.net'),
        (Command('open foo.se'), 'open http://foo.se'),
        (Command('open foo.io'), 'open http://foo.io'),
        (Command('xdg-open foo.io'), 'xdg-open http://foo.io'),
        (Command('gnome-open foo.io'), 'gnome-open http://foo.io'),
        (Command('kde-open foo.io'), 'kde-open http://foo.io')])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'open http://pen foo.io' == 'xdg-open http://foo.io'
E         - open http://pen foo.io
E         ?             ----
E         + xdg-open http://foo.io
E         ? ++++

tests/rules/test_open.py:31: AssertionError
___________ test_get_new_command[command7-gnome-open http://foo.io] ____________

command = Command(script='gnome-open foo.io', stdout='', stderr='')
new_command = 'gnome-open http://foo.io'

    @pytest.mark.parametrize('command, new_command', [
        (Command('open foo.com'), 'open http://foo.com'),
        (Command('open foo.ly'), 'open http://foo.ly'),
        (Command('open foo.org'), 'open http://foo.org'),
        (Command('open foo.net'), 'open http://foo.net'),
        (Command('open foo.se'), 'open http://foo.se'),
        (Command('open foo.io'), 'open http://foo.io'),
        (Command('xdg-open foo.io'), 'xdg-open http://foo.io'),
        (Command('gnome-open foo.io'), 'gnome-open http://foo.io'),
        (Command('kde-open foo.io'), 'kde-open http://foo.io')])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'open http://-open foo.io' == 'gnome-open http://foo.io'
E         - open http://-open foo.io
E         ?             ------
E         + gnome-open http://foo.io
E         ? ++++++

tests/rules/test_open.py:31: AssertionError
____________ test_get_new_command[command8-kde-open http://foo.io] _____________

command = Command(script='kde-open foo.io', stdout='', stderr='')
new_command = 'kde-open http://foo.io'

    @pytest.mark.parametrize('command, new_command', [
        (Command('open foo.com'), 'open http://foo.com'),
        (Command('open foo.ly'), 'open http://foo.ly'),
        (Command('open foo.org'), 'open http://foo.org'),
        (Command('open foo.net'), 'open http://foo.net'),
        (Command('open foo.se'), 'open http://foo.se'),
        (Command('open foo.io'), 'open http://foo.io'),
        (Command('xdg-open foo.io'), 'xdg-open http://foo.io'),
        (Command('gnome-open foo.io'), 'gnome-open http://foo.io'),
        (Command('kde-open foo.io'), 'kde-open http://foo.io')])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'open http://pen foo.io' == 'kde-open http://foo.io'
E         - open http://pen foo.io
E         ?             ----
E         + kde-open http://foo.io
E         ? ++++

tests/rules/test_open.py:31: AssertionError
====================== 3 failed, 6 passed in 0.10 seconds ======================
