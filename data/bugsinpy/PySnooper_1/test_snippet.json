[
    {
        "name": "tests.samples.exception.bar#8",
        "src_path": "tests/samples/exception.py",
        "class_name": "tests.samples.exception",
        "signature": "tests.samples.exception.bar()",
        "snippet": "def bar():\n    try:\n        foo()\n    except Exception:\n        str(1)\n        raise",
        "begin_line": 8,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.get_function_arguments#18",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.get_function_arguments(function, exclude=())",
        "snippet": "def get_function_arguments(function, exclude=()):\n    try:\n        getfullargspec = inspect.getfullargspec\n    except AttributeError:\n        result = inspect.getargspec(function).args\n    else:\n        result = getfullargspec(function).args\n    for exclude_item in exclude:\n        result.remove(exclude_item)\n    return result",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEntry.__init__#31",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEntry",
        "signature": "tests.utils._BaseEntry.__init__(self, prefix='')",
        "snippet": "    def __init__(self, prefix=''):\n        self.prefix = prefix",
        "begin_line": 31,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEntry.__repr__#38",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEntry",
        "signature": "tests.utils._BaseEntry.__repr__(self)",
        "snippet": "    def __repr__(self):\n        init_arguments = get_function_arguments(self.__init__,\n                                                exclude=('self',))\n        attributes = {\n            key: repr(getattr(self, key)) for key in init_arguments\n                                              if getattr(self, key) is not None\n        }\n        return '%s(%s)' % (\n            type(self).__name__,\n            ', '.join('{key}={value}'.format(**locals()) for key, value\n                                                         in attributes.items())\n        )",
        "begin_line": 38,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseValueEntry.__init__#54",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseValueEntry",
        "signature": "tests.utils._BaseValueEntry.__init__(self, prefix='')",
        "snippet": "    def __init__(self, prefix=''):\n        _BaseEntry.__init__(self, prefix=prefix)\n        self.line_pattern = re.compile(\n            r\"\"\"^%s(?P<indent>(?: {4})*)(?P<preamble>[^:]*):\"\"\"\n            r\"\"\"\\.{2,7} (?P<content>.*)$\"\"\" % (re.escape(self.prefix),)\n        )",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseValueEntry.check#69",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseValueEntry",
        "signature": "tests.utils._BaseValueEntry.check(self, s)",
        "snippet": "    def check(self, s):\n        match = self.line_pattern.match(s)\n        if not match:\n            return False\n        _, preamble, content = match.groups()\n        return (self._check_preamble(preamble) and\n                                                  self._check_content(content))",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry.__init__#79",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry.__init__(self, name=None, value=None, stage=None, prefix='', name_regex=None, value_regex=None)",
        "snippet": "    def __init__(self, name=None, value=None, stage=None, prefix='',\n                 name_regex=None, value_regex=None):\n        _BaseValueEntry.__init__(self, prefix=prefix)\n        if name is not None:\n            assert name_regex is None\n        if value is not None:\n            assert value_regex is None\n        assert stage in (None, 'starting', 'new', 'modified')\n\n        self.name = name\n        self.value = value\n        self.stage = stage\n        self.name_regex = (None if name_regex is None else\n                           re.compile(name_regex))\n        self.value_regex = (None if value_regex is None else\n                            re.compile(value_regex))",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_preamble#100",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_preamble(self, preamble)",
        "snippet": "    def _check_preamble(self, preamble):\n        match = self._preamble_pattern.match(preamble)\n        if not match:\n            return False\n        stage = match.group('stage')\n        return self._check_stage(stage)",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_content#111",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_content(self, content)",
        "snippet": "    def _check_content(self, content):\n        match = self._content_pattern.match(content)\n        if not match:\n            return False\n        name, value = match.groups()\n        return self._check_name(name) and self._check_value(value)",
        "begin_line": 111,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_name#118",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_name(self, name)",
        "snippet": "    def _check_name(self, name):\n        if self.name is not None:\n            return name == self.name\n        elif self.name_regex is not None:\n            return self.name_regex.match(name)\n        else:\n            return True",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_value#126",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_value(self, value)",
        "snippet": "    def _check_value(self, value):\n        if self.value is not None:\n            return value == self.value\n        elif self.value_regex is not None:\n            return self.value_regex.match(value)\n        else:\n            return True",
        "begin_line": 126,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_stage#134",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_stage(self, stage)",
        "snippet": "    def _check_stage(self, stage):\n        stage = stage.lower()\n        if self.stage is None:\n            return stage in ('starting', 'new', 'modified')\n        else:\n            return stage == self.stage",
        "begin_line": 134,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry.__init__#143",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry.__init__(self, value=None, value_regex=None, prefix='')",
        "snippet": "    def __init__(self, value=None, value_regex=None, prefix=''):\n        _BaseValueEntry.__init__(self, prefix=prefix)\n        if value is not None:\n            assert value_regex is None\n\n        self.value = value\n        self.value_regex = (None if value_regex is None else\n                            re.compile(value_regex))",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry._check_preamble#156",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry._check_preamble(self, preamble)",
        "snippet": "    def _check_preamble(self, preamble):\n        return bool(self._preamble_pattern.match(preamble))",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry._check_content#159",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry._check_content(self, content)",
        "snippet": "    def _check_content(self, content):\n        return self._check_value(content)",
        "begin_line": 159,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry._check_value#162",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry._check_value(self, value)",
        "snippet": "    def _check_value(self, value):\n        if self.value is not None:\n            return value == self.value\n        elif self.value_regex is not None:\n            return self.value_regex.match(value)\n        else:\n            return True",
        "begin_line": 162,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.__init__#172",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.__init__(self, source=None, source_regex=None, thread_info=None, thread_info_regex=None, prefix='')",
        "snippet": "    def __init__(self, source=None, source_regex=None, thread_info=None,\n                 thread_info_regex=None, prefix=''):\n        _BaseEntry.__init__(self, prefix=prefix)\n        if type(self) is _BaseEventEntry:\n            raise TypeError\n        if source is not None:\n            assert source_regex is None\n        self.line_pattern = re.compile(\n            r\"\"\"^%s(?P<indent>(?: {4})*)[0-9:.]{15} \"\"\"\n            r\"\"\"(?P<thread_info>[0-9]+-[0-9A-Za-z_-]+[ ]+)?\"\"\"\n            r\"\"\"(?P<event_name>[a-z_]*) +(?P<line_number>[0-9]*) \"\"\"\n            r\"\"\"+(?P<source>.*)$\"\"\" % (re.escape(self.prefix,))\n        )\n\n        self.source = source\n        self.source_regex = (None if source_regex is None else\n                             re.compile(source_regex))\n        self.thread_info = thread_info\n        self.thread_info_regex = (None if thread_info_regex is None else\n                             re.compile(thread_info_regex))",
        "begin_line": 172,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry._check_source#197",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry._check_source(self, source)",
        "snippet": "    def _check_source(self, source):\n        if self.source is not None:\n            return source == self.source\n        elif self.source_regex is not None:\n            return self.source_regex.match(source)\n        else:\n            return True",
        "begin_line": 197,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry._check_thread_info#205",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry._check_thread_info(self, thread_info)",
        "snippet": "    def _check_thread_info(self, thread_info):\n        if self.thread_info is not None:\n            return thread_info == self.thread_info\n        elif self.thread_info_regex is not None:\n            return self.thread_info_regex.match(thread_info)\n        else:\n            return True",
        "begin_line": 205,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.check#213",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.check(self, s)",
        "snippet": "    def check(self, s):\n        match = self.line_pattern.match(s)\n        if not match:\n            return False\n        _, thread_info, event_name, _, source = match.groups()\n        return (event_name == self.event_name and\n                self._check_source(source) and\n                self._check_thread_info(thread_info))",
        "begin_line": 213,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.assert_output#247",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.assert_output(output, expected_entries, prefix=None)",
        "snippet": "def assert_output(output, expected_entries, prefix=None):\n    lines = tuple(filter(None, output.split('\\n')))\n\n    if prefix is not None:\n        for line in lines:\n            if not line.startswith(prefix):\n                raise OutputFailure(line)\n\n    any_mismatch = False\n    result = ''\n    template = '\\n{line!s:%s}   {expected_entry}  {arrow}' % max(map(len, lines))\n    for expected_entry, line in zip_longest(expected_entries, lines, fillvalue=\"\"):\n        mismatch = not (expected_entry and expected_entry.check(line))\n        any_mismatch |= mismatch\n        arrow = '<===' * mismatch\n        result += template.format(**locals())\n\n    if len(lines) != len(expected_entries):\n        result += '\\nOutput has {} lines, while we expect {} lines.'.format(\n                len(lines), len(expected_entries))\n\n    if any_mismatch:\n        raise OutputFailure(result)",
        "begin_line": 247,
        "end_line": 269,
        "comment": "",
        "is_bug": true
    },
    {
        "name": "tests.utils.assert_sample_output#272",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.assert_sample_output(module)",
        "snippet": "def assert_sample_output(module):\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        module.main()\n        \n    time = '21:10:42.298924'\n    time_pattern = re.sub(r'\\d', r'\\\\d', time)\n\n    def normalise(out):\n        return re.sub(time_pattern, time, out).strip()\n\n    output = output_capturer.string_io.getvalue()\n\n    try:\n        assert (\n                normalise(output) ==\n                normalise(module.expected_output)\n        )\n    except AssertionError:\n        print('\\n\\nActual Output:\\n\\n' + output)  # to copy paste into expected_output\n        raise  # show pytest diff (may need -vv flag to see in full)",
        "begin_line": 272,
        "end_line": 292,
        "comment": "",
        "is_bug": true
    },
    {
        "name": "tests.utils.normalise#280",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.normalise(out)",
        "snippet": "    def normalise(out):\n        return re.sub(time_pattern, time, out).strip()",
        "begin_line": 280,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_chinese.test_chinese#24",
        "src_path": "tests/test_chinese.py",
        "class_name": "tests.test_chinese",
        "signature": "tests.test_chinese.test_chinese()",
        "snippet": "def test_chinese():\n    with temp_file_tools.create_temp_folder(prefix='pysnooper') as folder:\n        path = folder / 'foo.log'\n        @pysnooper.snoop(path)\n        def foo():\n            a = 1\n            x = '\u5931\u8d25'\n            return 7\n\n        foo()\n        with path.open(encoding='utf-8') as file:\n            output = file.read()\n        assert_output(\n            output,\n            (\n                CallEntry(),\n                LineEntry(),\n                VariableEntry('a'),\n                LineEntry(u\"x = '\u5931\u8d25'\"),\n                VariableEntry(u'x', (u\"'\u5931\u8d25'\" if pycompat.PY3 else None)),\n                LineEntry(),\n                ReturnEntry(),\n                ReturnValueEntry('7')\n            ),\n        )",
        "begin_line": 24,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_chinese.foo#28",
        "src_path": "tests/test_chinese.py",
        "class_name": "tests.test_chinese",
        "signature": "tests.test_chinese.foo()",
        "snippet": "        def foo():\n            a = 1\n            x = '\u5931\u8d25'\n            return 7",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.main#5",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.main()",
        "snippet": "def main():\n    f2()",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.f2#9",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.f2()",
        "snippet": "def f2():\n    f3()",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    }
]