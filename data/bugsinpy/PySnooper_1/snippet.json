[
    {
        "name": "pysnooper.tracer.get_write_function#102",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer",
        "signature": "pysnooper.tracer.get_write_function(output, overwrite)",
        "snippet": "def get_write_function(output, overwrite):\n    is_path = isinstance(output, (pycompat.PathLike, str))\n    if overwrite and not is_path:\n        raise Exception('`overwrite=True` can only be used when writing '\n                        'content to file.')\n    if output is None:\n        def write(s):\n            stderr = sys.stderr\n            try:\n                stderr.write(s)\n            except UnicodeEncodeError:\n                # God damn Python 2\n                stderr.write(utils.shitcode(s))\n    elif is_path:\n        return FileWriter(output, overwrite).write\n    elif callable(output):\n        write = output\n    else:\n        assert isinstance(output, utils.WritableStream)\n\n        def write(s):\n            output.write(s)\n    return write",
        "begin_line": 102,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.write#108",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer",
        "signature": "pysnooper.tracer.write(s)",
        "snippet": "        def write(s):\n            stderr = sys.stderr\n            try:\n                stderr.write(s)\n            except UnicodeEncodeError:\n                # God damn Python 2\n                stderr.write(utils.shitcode(s))",
        "begin_line": 108,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.02,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.write#122",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer",
        "signature": "pysnooper.tracer.write(s)",
        "snippet": "        def write(s):\n            output.write(s)",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.02,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.FileWriter.__init__#128",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.FileWriter",
        "signature": "pysnooper.tracer.FileWriter.__init__(self, path, overwrite)",
        "snippet": "    def __init__(self, path, overwrite):\n        self.path = pycompat.text_type(path)\n        self.overwrite = overwrite",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.__init__#180",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.__init__(self, output=None, watch=(), watch_explode=(), depth=1, prefix='', overwrite=False, thread_info=False)",
        "snippet": "    def __init__(\n            self,\n            output=None,\n            watch=(),\n            watch_explode=(),\n            depth=1,\n            prefix='',\n            overwrite=False,\n            thread_info=False,\n    ):\n        self._write = get_write_function(output, overwrite)\n\n        self.watch = [\n            v if isinstance(v, BaseVariable) else CommonVariable(v)\n            for v in utils.ensure_tuple(watch)\n         ] + [\n             v if isinstance(v, BaseVariable) else Exploding(v)\n             for v in utils.ensure_tuple(watch_explode)\n        ]\n        self.frame_to_local_reprs = {}\n        self.depth = depth\n        self.prefix = prefix\n        self.thread_info = thread_info\n        self.thread_info_padding = 0\n        assert self.depth >= 1\n        self.target_codes = set()\n        self.target_frames = set()\n        self.thread_local = threading.local()",
        "begin_line": 180,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.006756756756756757,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.__call__#209",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.__call__(self, function)",
        "snippet": "    def __call__(self, function):\n        self.target_codes.add(function.__code__)\n\n        @functools.wraps(function)\n        def simple_wrapper(*args, **kwargs):\n            with self:\n                return function(*args, **kwargs)\n\n        @functools.wraps(function)\n        def generator_wrapper(*args, **kwargs):\n            gen = function(*args, **kwargs)\n            method, incoming = gen.send, None\n            while True:\n                with self:\n                    try:\n                        outgoing = method(incoming)\n                    except StopIteration:\n                        return\n                try:\n                    method, incoming = gen.send, (yield outgoing)\n                except Exception as e:\n                    method, incoming = gen.throw, e\n\n        if pycompat.iscoroutinefunction(function):\n            # return decorate(function, coroutine_wrapper)\n            raise NotImplementedError\n        elif inspect.isgeneratorfunction(function):\n            return generator_wrapper\n        else:\n            return simple_wrapper",
        "begin_line": 209,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.simple_wrapper#213",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.simple_wrapper(*args, **kwargs)",
        "snippet": "        def simple_wrapper(*args, **kwargs):\n            with self:\n                return function(*args, **kwargs)",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.005813953488372093,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.generator_wrapper#218",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.generator_wrapper(*args, **kwargs)",
        "snippet": "        def generator_wrapper(*args, **kwargs):\n            gen = function(*args, **kwargs)\n            method, incoming = gen.send, None\n            while True:\n                with self:\n                    try:\n                        outgoing = method(incoming)\n                    except StopIteration:\n                        return\n                try:\n                    method, incoming = gen.send, (yield outgoing)\n                except Exception as e:\n                    method, incoming = gen.throw, e",
        "begin_line": 218,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.__enter__#244",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.__enter__(self)",
        "snippet": "    def __enter__(self):\n        calling_frame = inspect.currentframe().f_back\n        if not self._is_internal_frame(calling_frame):\n            calling_frame.f_trace = self.trace\n            self.target_frames.add(calling_frame)\n\n        stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])\n        stack.append(sys.gettrace())\n        sys.settrace(self.trace)",
        "begin_line": 244,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.006756756756756757,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.__exit__#254",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.__exit__(self, exc_type, exc_value, exc_traceback)",
        "snippet": "    def __exit__(self, exc_type, exc_value, exc_traceback):\n        stack = self.thread_local.original_trace_functions\n        sys.settrace(stack.pop())\n        calling_frame = inspect.currentframe().f_back\n        self.target_frames.discard(calling_frame)\n        self.frame_to_local_reprs.pop(calling_frame, None)",
        "begin_line": 254,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.015384615384615385,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.tracer.Tracer._is_internal_frame#261",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer._is_internal_frame(self, frame)",
        "snippet": "    def _is_internal_frame(self, frame):\n        return frame.f_code.co_filename == Tracer.__enter__.__code__.co_filename",
        "begin_line": 261,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.utils._check_methods#12",
        "src_path": "pysnooper/utils.py",
        "class_name": "pysnooper.utils",
        "signature": "pysnooper.utils._check_methods(C, *methods)",
        "snippet": "def _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.utils.WritableStream.__subclasshook__#31",
        "src_path": "pysnooper/utils.py",
        "class_name": "pysnooper.utils.WritableStream",
        "signature": "pysnooper.utils.WritableStream.__subclasshook__(cls, C)",
        "snippet": "    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.utils.truncate#62",
        "src_path": "pysnooper/utils.py",
        "class_name": "pysnooper.utils",
        "signature": "pysnooper.utils.truncate(string, max_length)",
        "snippet": "def truncate(string, max_length):\n    if len(string) > max_length:\n        left = (max_length - 3) // 2\n        right = max_length - 3 - left\n        string = u'{}...{}'.format(string[:left], string[-right:])\n    return string",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.utils.ensure_tuple#70",
        "src_path": "pysnooper/utils.py",
        "class_name": "pysnooper.utils",
        "signature": "pysnooper.utils.ensure_tuple(x)",
        "snippet": "def ensure_tuple(x):\n    if isinstance(x, string_types):\n        x = (x,)\n    return tuple(x)",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.variables.needs_parentheses#10",
        "src_path": "pysnooper/variables.py",
        "class_name": "pysnooper.variables",
        "signature": "pysnooper.variables.needs_parentheses(source)",
        "snippet": "def needs_parentheses(source):\n    def code(s):\n        return compile(s, '<variable>', 'eval').co_code\n\n    return code('{}.x'.format(source)) != code('({}).x'.format(source))",
        "begin_line": 10,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.022727272727272728,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.variables.code#11",
        "src_path": "pysnooper/variables.py",
        "class_name": "pysnooper.variables",
        "signature": "pysnooper.variables.code(s)",
        "snippet": "    def code(s):\n        return compile(s, '<variable>', 'eval').co_code",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.01818181818181818,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.variables.BaseVariable.__init__#18",
        "src_path": "pysnooper/variables.py",
        "class_name": "pysnooper.variables.BaseVariable",
        "signature": "pysnooper.variables.BaseVariable.__init__(self, source, exclude=())",
        "snippet": "    def __init__(self, source, exclude=()):\n        self.source = source\n        self.exclude = utils.ensure_tuple(exclude)\n        self.code = compile(source, '<variable>', 'eval')\n        if needs_parentheses(source):\n            self.unambiguous_source = '({})'.format(source)\n        else:\n            self.unambiguous_source = source",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    },
    {
        "name": "pysnooper.variables.Indices.__getitem__#103",
        "src_path": "pysnooper/variables.py",
        "class_name": "pysnooper.variables.Indices",
        "signature": "pysnooper.variables.Indices.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        assert isinstance(item, slice)\n        result = deepcopy(self)\n        result._slice = item\n        return result",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010416666666666666,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.010416666666666666,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.010416666666666666
        }
    }
]