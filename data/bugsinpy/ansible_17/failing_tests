coverage run -m pytest test/units/module_utils/facts/test_facts.py::TestFactsLinuxHardwareGetMountFacts::test_get_mount_facts
============================= test session starts ==============================
platform linux -- Python 3.6.9, pytest-3.10.1, py-1.11.0, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/ansible, inifile:
plugins: mock-1.2
collected 1 item

test/units/module_utils/facts/test_facts.py F                            [100%]

=================================== FAILURES ===================================
___________ TestFactsLinuxHardwareGetMountFacts.test_get_mount_facts ___________

self = <units.module_utils.facts.test_facts.TestFactsLinuxHardwareGetMountFacts testMethod=test_get_mount_facts>
mock_lsblk_uuid = <MagicMock name='_udevadm_uuid' id='140187271809512'>
mock_find_bind_mounts = <MagicMock name='_lsblk_uuid' id='140187271809064'>
mock_mtab_entries = <MagicMock name='_find_bind_mounts' id='140187271359008'>
mock_udevadm_uuid = <MagicMock name='_mtab_entries' id='140187271367424'>

    @patch('ansible.module_utils.facts.hardware.linux.LinuxHardware._mtab_entries', return_value=MTAB_ENTRIES)
    @patch('ansible.module_utils.facts.hardware.linux.LinuxHardware._find_bind_mounts', return_value=BIND_MOUNTS)
    @patch('ansible.module_utils.facts.hardware.linux.LinuxHardware._lsblk_uuid', return_value=LSBLK_UUIDS)
    @patch('ansible.module_utils.facts.hardware.linux.LinuxHardware._udevadm_uuid', return_value=UDEVADM_UUID)
    def test_get_mount_facts(self,
                             mock_lsblk_uuid,
                             mock_find_bind_mounts,
                             mock_mtab_entries,
                             mock_udevadm_uuid):
        module = Mock()
        # Returns a LinuxHardware-ish
        lh = hardware.linux.LinuxHardware(module=module, load_on_init=False)
    
        # Nothing returned, just self.facts modified as a side effect
        mount_facts = lh.get_mount_facts()
        self.assertIsInstance(mount_facts, dict)
        self.assertIn('mounts', mount_facts)
        self.assertIsInstance(mount_facts['mounts'], list)
        self.assertIsInstance(mount_facts['mounts'][0], dict)
    
        # Find mounts with space in the mountpoint path
        mounts_with_space = [x for x in mount_facts['mounts'] if ' ' in x['mount']]
>       self.assertEqual(len(mounts_with_space), 1)
E       AssertionError: 0 != 1

test/units/module_utils/facts/test_facts.py:564: AssertionError
=========================== 1 failed in 0.24 seconds ===========================
