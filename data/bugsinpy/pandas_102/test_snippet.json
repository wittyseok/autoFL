[
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#9",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 9,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#42",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 42,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.int_frame#76",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.int_frame()",
        "snippet": "def int_frame():\n    \"\"\"\n    Fixture for DataFrame of ints with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                A  B  C  D\n    vpBeWjM651  1  0  1  0\n    5JyxmrP1En -1  0  0  0\n    qEDaoD49U2 -1  1  0  0\n    m66TkTfsFe  0  0  0  0\n    EHPaNzEUFm -1  0 -1  0\n    fpRJCevQhi  2  0  0  0\n    OlQvnmfi3Q  0  0 -2  0\n    ...        .. .. .. ..\n    uB1FPlz4uP  0  0  0  1\n    EcSe6yNzCU  0  0 -1  0\n    L50VudaiI8 -1  1 -2  0\n    y3bpw4nwIp  0 -1  0  0\n    H0RdLLwrCT  1  1  0  0\n    rY82K0vMwm  0  0  0  0\n    1OPIUjnkjk  2  0  0  0\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    # force these all to int64 to avoid platform testing issues\n    return DataFrame({c: s for c, s in df.items()}, dtype=np.int64)",
        "begin_line": 76,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.datetime_frame#107",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.datetime_frame()",
        "snippet": "def datetime_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                       A         B         C         D\n    2000-01-03 -1.122153  0.468535  0.122226  1.693711\n    2000-01-04  0.189378  0.486100  0.007864 -1.216052\n    2000-01-05  0.041401 -0.835752 -0.035279 -0.414357\n    2000-01-06  0.430050  0.894352  0.090719  0.036939\n    2000-01-07 -0.620982 -0.668211 -0.706153  1.466335\n    2000-01-10 -0.752633  0.328434 -0.815325  0.699674\n    2000-01-11 -2.236969  0.615737 -0.829076 -1.196106\n    ...              ...       ...       ...       ...\n    2000-02-03  1.642618 -0.579288  0.046005  1.385249\n    2000-02-04 -0.544873 -1.160962 -0.284071 -1.418351\n    2000-02-07 -2.656149 -0.601387  1.410148  0.444150\n    2000-02-08 -1.201881 -1.289040  0.772992 -1.445300\n    2000-02-09  1.377373  0.398619  1.008453 -0.928207\n    2000-02-10  0.473194 -0.636677  0.984058  0.511519\n    2000-02-11 -0.965556  0.408313 -1.312844 -0.381948\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getTimeSeriesData())",
        "begin_line": 107,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#136",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 136,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#167",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 167,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#201",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 201,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#235",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 235,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#253",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 253,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#277",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#289",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 289,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#306",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 306,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_series_with_name_not_matching_column#46",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_series_with_name_not_matching_column(self)",
        "snippet": "    def test_series_with_name_not_matching_column(self):\n        # GH#9232\n        x = pd.Series(range(5), name=1)\n        y = pd.Series(range(5), name=0)\n\n        result = pd.DataFrame(x, columns=[0])\n        expected = pd.DataFrame([], columns=[0])\n        tm.assert_frame_equal(result, expected)\n\n        result = pd.DataFrame(y, columns=[1])\n        expected = pd.DataFrame([], columns=[1])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 46,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_empty_constructor#77",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_empty_constructor(self, constructor)",
        "snippet": "    def test_empty_constructor(self, constructor):\n        expected = DataFrame()\n        result = constructor()\n        assert len(result.index) == 0\n        assert len(result.columns) == 0\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_emptylike_constructor#92",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_emptylike_constructor(self, emptylike, expected_index, expected_columns)",
        "snippet": "    def test_emptylike_constructor(self, emptylike, expected_index, expected_columns):\n        expected = DataFrame(index=expected_index, columns=expected_columns)\n        result = DataFrame(emptylike)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed#97",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed(self, float_string_frame)",
        "snippet": "    def test_constructor_mixed(self, float_string_frame):\n        index, data = tm.getMixedTypeDict()\n\n        # TODO(wesm), incomplete test?\n        indexed_frame = DataFrame(data, index=index)  # noqa\n        unindexed_frame = DataFrame(data)  # noqa\n\n        assert float_string_frame[\"foo\"].dtype == np.object_",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_cast_failure#106",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_cast_failure(self)",
        "snippet": "    def test_constructor_cast_failure(self):\n        foo = DataFrame({\"a\": [\"a\", \"b\", \"c\"]}, dtype=np.float64)\n        assert foo[\"a\"].dtype == object\n\n        # GH 3010, constructing with odd arrays\n        df = DataFrame(np.ones((4, 2)))\n\n        # this is ok\n        df[\"foo\"] = np.ones((4, 2)).tolist()\n\n        # this is not ok\n        msg = \"Wrong number of items passed 2, placement implies 1\"\n        with pytest.raises(ValueError, match=msg):\n            df[\"test\"] = np.ones((4, 2))\n\n        # this is ok\n        df[\"foo2\"] = np.ones((4, 2)).tolist()",
        "begin_line": 106,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_copy#124",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_copy(self)",
        "snippet": "    def test_constructor_dtype_copy(self):\n        orig_df = DataFrame({\"col1\": [1.0], \"col2\": [2.0], \"col3\": [3.0]})\n\n        new_df = pd.DataFrame(orig_df, dtype=float, copy=True)\n\n        new_df[\"col1\"] = 200.0\n        assert orig_df[\"col1\"][0] == 1.0",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_nocast_view#132",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_nocast_view(self)",
        "snippet": "    def test_constructor_dtype_nocast_view(self):\n        df = DataFrame([[1, 2]])\n        should_be_view = DataFrame(df, dtype=df[0].dtype)\n        should_be_view[0][0] = 99\n        assert df.values[0, 0] == 99\n\n        should_be_view = DataFrame(df.values, dtype=df[0].dtype)\n        should_be_view[0][0] = 97\n        assert df.values[0, 0] == 97",
        "begin_line": 132,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_list_data#142",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_list_data(self)",
        "snippet": "    def test_constructor_dtype_list_data(self):\n        df = DataFrame([[1, \"2\"], [None, \"a\"]], dtype=object)\n        assert df.loc[1, 0] is None\n        assert df.loc[0, 1] == \"2\"",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_frames#147",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_frames(self)",
        "snippet": "    def test_constructor_list_frames(self):\n        # see gh-3243\n        result = DataFrame([DataFrame()])\n        assert result.shape == (1, 0)\n\n        result = DataFrame([DataFrame(dict(A=np.arange(5)))])\n        assert isinstance(result.iloc[0, 0], DataFrame)",
        "begin_line": 147,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dtypes#155",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dtypes(self)",
        "snippet": "    def test_constructor_mixed_dtypes(self):\n        def _make_mixed_dtypes_df(typ, ad=None):\n\n            if typ == \"int\":\n                dtypes = MIXED_INT_DTYPES\n                arrays = [np.array(np.random.rand(10), dtype=d) for d in dtypes]\n            elif typ == \"float\":\n                dtypes = MIXED_FLOAT_DTYPES\n                arrays = [\n                    np.array(np.random.randint(10, size=10), dtype=d) for d in dtypes\n                ]\n\n            for d, a in zip(dtypes, arrays):\n                assert a.dtype == d\n            if ad is None:\n                ad = dict()\n            ad.update({d: a for d, a in zip(dtypes, arrays)})\n            return DataFrame(ad)\n\n        def _check_mixed_dtypes(df, dtypes=None):\n            if dtypes is None:\n                dtypes = MIXED_FLOAT_DTYPES + MIXED_INT_DTYPES\n            for d in dtypes:\n                if d in df:\n                    assert df.dtypes[d] == d\n\n        # mixed floating and integer coexist in the same frame\n        df = _make_mixed_dtypes_df(\"float\")\n        _check_mixed_dtypes(df)\n\n        # add lots of types\n        df = _make_mixed_dtypes_df(\"float\", dict(A=1, B=\"foo\", C=\"bar\"))\n        _check_mixed_dtypes(df)\n\n        # GH 622\n        df = _make_mixed_dtypes_df(\"int\")\n        _check_mixed_dtypes(df)",
        "begin_line": 155,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors._make_mixed_dtypes_df#156",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors._make_mixed_dtypes_df(typ, ad=None)",
        "snippet": "        def _make_mixed_dtypes_df(typ, ad=None):\n\n            if typ == \"int\":\n                dtypes = MIXED_INT_DTYPES\n                arrays = [np.array(np.random.rand(10), dtype=d) for d in dtypes]\n            elif typ == \"float\":\n                dtypes = MIXED_FLOAT_DTYPES\n                arrays = [\n                    np.array(np.random.randint(10, size=10), dtype=d) for d in dtypes\n                ]\n\n            for d, a in zip(dtypes, arrays):\n                assert a.dtype == d\n            if ad is None:\n                ad = dict()\n            ad.update({d: a for d, a in zip(dtypes, arrays)})\n            return DataFrame(ad)",
        "begin_line": 156,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors._check_mixed_dtypes#174",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors._check_mixed_dtypes(df, dtypes=None)",
        "snippet": "        def _check_mixed_dtypes(df, dtypes=None):\n            if dtypes is None:\n                dtypes = MIXED_FLOAT_DTYPES + MIXED_INT_DTYPES\n            for d in dtypes:\n                if d in df:\n                    assert df.dtypes[d] == d",
        "begin_line": 174,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_complex_dtypes#193",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_complex_dtypes(self)",
        "snippet": "    def test_constructor_complex_dtypes(self):\n        # GH10952\n        a = np.random.rand(10).astype(np.complex64)\n        b = np.random.rand(10).astype(np.complex128)\n\n        df = DataFrame({\"a\": a, \"b\": b})\n        assert a.dtype == df.a.dtype\n        assert b.dtype == df.b.dtype",
        "begin_line": 193,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_str_na_values#202",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_str_na_values(self, string_dtype)",
        "snippet": "    def test_constructor_dtype_str_na_values(self, string_dtype):\n        # https://github.com/pandas-dev/pandas/issues/21083\n        df = DataFrame({\"A\": [\"x\", None]}, dtype=string_dtype)\n        result = df.isna()\n        expected = DataFrame({\"A\": [False, True]})\n        tm.assert_frame_equal(result, expected)\n        assert df.iloc[1, 0] is None\n\n        df = DataFrame({\"A\": [\"x\", np.nan]}, dtype=string_dtype)\n        assert np.isnan(df.iloc[1, 0])",
        "begin_line": 202,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_rec#213",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_rec(self, float_frame)",
        "snippet": "    def test_constructor_rec(self, float_frame):\n        rec = float_frame.to_records(index=False)\n        rec.dtype.names = list(rec.dtype.names)[::-1]\n\n        index = float_frame.index\n\n        df = DataFrame(rec)\n        tm.assert_index_equal(df.columns, pd.Index(rec.dtype.names))\n\n        df2 = DataFrame(rec, index=index)\n        tm.assert_index_equal(df2.columns, pd.Index(rec.dtype.names))\n        tm.assert_index_equal(df2.index, index)\n\n        rng = np.arange(len(rec))[::-1]\n        df3 = DataFrame(rec, index=rng, columns=[\"C\", \"B\"])\n        expected = DataFrame(rec, index=rng).reindex(columns=[\"C\", \"B\"])\n        tm.assert_frame_equal(df3, expected)",
        "begin_line": 213,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_bool#231",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_bool(self)",
        "snippet": "    def test_constructor_bool(self):\n        df = DataFrame({0: np.ones(10, dtype=bool), 1: np.zeros(10, dtype=bool)})\n        assert df.values.dtype == np.bool_",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_overflow_int64#235",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_overflow_int64(self)",
        "snippet": "    def test_constructor_overflow_int64(self):\n        # see gh-14881\n        values = np.array([2 ** 64 - i for i in range(1, 10)], dtype=np.uint64)\n\n        result = DataFrame({\"a\": values})\n        assert result[\"a\"].dtype == np.uint64\n\n        # see gh-2355\n        data_scores = [\n            (6311132704823138710, 273),\n            (2685045978526272070, 23),\n            (8921811264899370420, 45),\n            (17019687244989530680, 270),\n            (9930107427299601010, 273),\n        ]\n        dtype = [(\"uid\", \"u8\"), (\"score\", \"u8\")]\n        data = np.zeros((len(data_scores),), dtype=dtype)\n        data[:] = data_scores\n        df_crawls = DataFrame(data)\n        assert df_crawls[\"uid\"].dtype == np.uint64",
        "begin_line": 235,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_int_overflow#267",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_int_overflow(self, values)",
        "snippet": "    def test_constructor_int_overflow(self, values):\n        # see gh-18584\n        value = values[0]\n        result = DataFrame(values)\n\n        assert result[0].dtype == object\n        assert result[0][0] == value",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordereddict#275",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordereddict(self)",
        "snippet": "    def test_constructor_ordereddict(self):\n        import random\n\n        nitems = 100\n        nums = list(range(nitems))\n        random.shuffle(nums)\n        expected = [\"A{i:d}\".format(i=i) for i in nums]\n        df = DataFrame(OrderedDict(zip(expected, [[0]] * nitems)))\n        assert expected == list(df.columns)",
        "begin_line": 275,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict#285",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict(self)",
        "snippet": "    def test_constructor_dict(self):\n        datetime_series = tm.makeTimeSeries(nper=30)\n        # test expects index shifted by 5\n        datetime_series_short = tm.makeTimeSeries(nper=30)[5:]\n\n        frame = DataFrame({\"col1\": datetime_series, \"col2\": datetime_series_short})\n\n        # col2 is padded with NaN\n        assert len(datetime_series) == 30\n        assert len(datetime_series_short) == 25\n\n        tm.assert_series_equal(frame[\"col1\"], datetime_series.rename(\"col1\"))\n\n        exp = pd.Series(\n            np.concatenate([[np.nan] * 5, datetime_series_short.values]),\n            index=datetime_series.index,\n            name=\"col2\",\n        )\n        tm.assert_series_equal(exp, frame[\"col2\"])\n\n        frame = DataFrame(\n            {\"col1\": datetime_series, \"col2\": datetime_series_short},\n            columns=[\"col2\", \"col3\", \"col4\"],\n        )\n\n        assert len(frame) == len(datetime_series_short)\n        assert \"col1\" not in frame\n        assert isna(frame[\"col3\"]).all()\n\n        # Corner cases\n        assert len(DataFrame()) == 0\n\n        # mix dict and array, wrong size - no spec for which error should raise\n        # first\n        with pytest.raises(ValueError):\n            DataFrame({\"A\": {\"a\": \"a\", \"b\": \"b\"}, \"B\": [\"a\", \"b\", \"c\"]})\n\n        # Length-one dict micro-optimization\n        frame = DataFrame({\"A\": {\"1\": 1, \"2\": 2}})\n        tm.assert_index_equal(frame.index, pd.Index([\"1\", \"2\"]))\n\n        # empty dict plus index\n        idx = Index([0, 1, 2])\n        frame = DataFrame({}, index=idx)\n        assert frame.index is idx\n\n        # empty dict with index and columns\n        idx = Index([0, 1, 2])\n        frame = DataFrame({}, index=idx, columns=idx)\n        assert frame.index is idx\n        assert frame.columns is idx\n        assert len(frame._series) == 3\n\n        # with dict of empty list and Series\n        frame = DataFrame({\"A\": [], \"B\": []}, columns=[\"A\", \"B\"])\n        tm.assert_index_equal(frame.index, Index([], dtype=np.int64))\n\n        # GH 14381\n        # Dict with None value\n        frame_none = DataFrame(dict(a=None), index=[0])\n        frame_none_list = DataFrame(dict(a=[None]), index=[0])\n        assert frame_none._get_value(0, \"a\") is None\n        assert frame_none_list._get_value(0, \"a\") is None\n        tm.assert_frame_equal(frame_none, frame_none_list)\n\n        # GH10856\n        # dict with scalar values should raise error, even if columns passed\n        msg = \"If using all scalar values, you must pass an index\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame({\"a\": 0.7})\n\n        with pytest.raises(ValueError, match=msg):\n            DataFrame({\"a\": 0.7}, columns=[\"a\"])",
        "begin_line": 285,
        "end_line": 357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_invalid_items_unused#360",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_invalid_items_unused(self, scalar)",
        "snippet": "    def test_constructor_invalid_items_unused(self, scalar):\n        # No error if invalid (scalar) value is in fact not used:\n        result = DataFrame({\"a\": scalar}, columns=[\"b\"])\n        expected = DataFrame(columns=[\"b\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_nan_key#367",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_nan_key(self, value)",
        "snippet": "    def test_constructor_dict_nan_key(self, value):\n        # GH 18455\n        cols = [1, value, 3]\n        idx = [\"a\", value]\n        values = [[0, 3], [1, 4], [2, 5]]\n        data = {cols[c]: Series(values[c], index=idx) for c in range(3)}\n        result = DataFrame(data).sort_values(1).sort_values(\"a\", axis=1)\n        expected = DataFrame(\n            np.arange(6, dtype=\"int64\").reshape(2, 3), index=idx, columns=cols\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = DataFrame(data, index=idx).sort_values(\"a\", axis=1)\n        tm.assert_frame_equal(result, expected)\n\n        result = DataFrame(data, index=idx, columns=cols)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 367,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_nan_tuple_key#386",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_nan_tuple_key(self, value)",
        "snippet": "    def test_constructor_dict_nan_tuple_key(self, value):\n        # GH 18455\n        cols = Index([(11, 21), (value, 22), (13, value)])\n        idx = Index([(\"a\", value), (value, 2)])\n        values = [[0, 3], [1, 4], [2, 5]]\n        data = {cols[c]: Series(values[c], index=idx) for c in range(3)}\n        result = DataFrame(data).sort_values((11, 21)).sort_values((\"a\", value), axis=1)\n        expected = DataFrame(\n            np.arange(6, dtype=\"int64\").reshape(2, 3), index=idx, columns=cols\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = DataFrame(data, index=idx).sort_values((\"a\", value), axis=1)\n        tm.assert_frame_equal(result, expected)\n\n        result = DataFrame(data, index=idx, columns=cols)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 386,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_order_insertion#404",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_order_insertion(self)",
        "snippet": "    def test_constructor_dict_order_insertion(self):\n        datetime_series = tm.makeTimeSeries(nper=30)\n        datetime_series_short = tm.makeTimeSeries(nper=25)\n\n        # GH19018\n        # initialization ordering: by insertion order if python>= 3.6\n        d = {\"b\": datetime_series_short, \"a\": datetime_series}\n        frame = DataFrame(data=d)\n        expected = DataFrame(data=d, columns=list(\"ba\"))\n        tm.assert_frame_equal(frame, expected)",
        "begin_line": 404,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_multi_index#415",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_multi_index(self)",
        "snippet": "    def test_constructor_multi_index(self):\n        # GH 4078\n        # construction error with mi and all-nan frame\n        tuples = [(2, 3), (3, 3), (3, 3)]\n        mi = MultiIndex.from_tuples(tuples)\n        df = DataFrame(index=mi, columns=mi)\n        assert pd.isna(df).values.ravel().all()\n\n        tuples = [(3, 3), (2, 3), (3, 3)]\n        mi = MultiIndex.from_tuples(tuples)\n        df = DataFrame(index=mi, columns=mi)\n        assert pd.isna(df).values.ravel().all()",
        "begin_line": 415,
        "end_line": 426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_2d_index#428",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_2d_index(self)",
        "snippet": "    def test_constructor_2d_index(self):\n        # GH 25416\n        # handling of 2d index in construction\n        df = pd.DataFrame([[1]], columns=[[1]], index=[1, 2])\n        expected = pd.DataFrame(\n            [1, 1],\n            index=pd.Int64Index([1, 2], dtype=\"int64\"),\n            columns=pd.MultiIndex(levels=[[1]], codes=[[0]]),\n        )\n        tm.assert_frame_equal(df, expected)\n\n        df = pd.DataFrame([[1]], columns=[[1]], index=[[1, 2]])\n        expected = pd.DataFrame(\n            [1, 1],\n            index=pd.MultiIndex(levels=[[1, 2]], codes=[[0, 1]]),\n            columns=pd.MultiIndex(levels=[[1]], codes=[[0]]),\n        )\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 428,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_error_msgs#447",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_error_msgs(self)",
        "snippet": "    def test_constructor_error_msgs(self):\n        msg = \"Empty data passed with indices specified.\"\n        # passing an empty array with columns specified.\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(np.empty(0), columns=list(\"abc\"))\n\n        msg = \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n        # mix dict and array, wrong size\n        with pytest.raises(ValueError, match=msg):\n            DataFrame({\"A\": {\"a\": \"a\", \"b\": \"b\"}, \"B\": [\"a\", \"b\", \"c\"]})\n\n        # wrong size ndarray, GH 3105\n        msg = r\"Shape of passed values is \\(4, 3\\), indices imply \\(3, 3\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(\n                np.arange(12).reshape((4, 3)),\n                columns=[\"foo\", \"bar\", \"baz\"],\n                index=pd.date_range(\"2000-01-01\", periods=3),\n            )\n\n        arr = np.array([[4, 5, 6]])\n        msg = r\"Shape of passed values is \\(1, 3\\), indices imply \\(1, 4\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(index=[0], columns=range(0, 4), data=arr)\n\n        arr = np.array([4, 5, 6])\n        msg = r\"Shape of passed values is \\(3, 1\\), indices imply \\(1, 4\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(index=[0], columns=range(0, 4), data=arr)\n\n        # higher dim raise exception\n        with pytest.raises(ValueError, match=\"Must pass 2-d input\"):\n            DataFrame(np.zeros((3, 3, 3)), columns=[\"A\", \"B\", \"C\"], index=[1])\n\n        # wrong size axis labels\n        msg = r\"Shape of passed values is \\(2, 3\\), indices imply \\(1, 3\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(np.random.rand(2, 3), columns=[\"A\", \"B\", \"C\"], index=[1])\n\n        msg = r\"Shape of passed values is \\(2, 3\\), indices imply \\(2, 2\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(np.random.rand(2, 3), columns=[\"A\", \"B\"], index=[1, 2])\n\n        # gh-26429\n        msg = \"2 columns passed, passed data had 10 columns\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame((range(10), range(10, 20)), columns=(\"ones\", \"twos\"))\n\n        msg = \"If using all scalar values, you must pass an index\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame({\"a\": False, \"b\": True})",
        "begin_line": 447,
        "end_line": 497,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_embedded_frames#499",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_embedded_frames(self)",
        "snippet": "    def test_constructor_with_embedded_frames(self):\n\n        # embedded data frames\n        df1 = DataFrame({\"a\": [1, 2, 3], \"b\": [3, 4, 5]})\n        df2 = DataFrame([df1, df1 + 10])\n\n        df2.dtypes\n        str(df2)\n\n        result = df2.loc[0, 0]\n        tm.assert_frame_equal(result, df1)\n\n        result = df2.loc[1, 0]\n        tm.assert_frame_equal(result, df1 + 10)",
        "begin_line": 499,
        "end_line": 512,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_subclass_dict#514",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_subclass_dict(self, float_frame)",
        "snippet": "    def test_constructor_subclass_dict(self, float_frame):\n        # Test for passing dict subclass to constructor\n        data = {\n            \"col1\": tm.TestSubDict((x, 10.0 * x) for x in range(10)),\n            \"col2\": tm.TestSubDict((x, 20.0 * x) for x in range(10)),\n        }\n        df = DataFrame(data)\n        refdf = DataFrame({col: dict(val.items()) for col, val in data.items()})\n        tm.assert_frame_equal(refdf, df)\n\n        data = tm.TestSubDict(data.items())\n        df = DataFrame(data)\n        tm.assert_frame_equal(refdf, df)\n\n        # try with defaultdict\n        from collections import defaultdict\n\n        data = {}\n        float_frame[\"B\"][:10] = np.nan\n        for k, v in float_frame.items():\n            dct = defaultdict(dict)\n            dct.update(v.to_dict())\n            data[k] = dct\n        frame = DataFrame(data)\n        expected = frame.reindex(index=float_frame.index)\n        tm.assert_frame_equal(float_frame, expected)",
        "begin_line": 514,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_block#541",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_block(self)",
        "snippet": "    def test_constructor_dict_block(self):\n        expected = np.array([[4.0, 3.0, 2.0, 1.0]])\n        df = DataFrame(\n            {\"d\": [4.0], \"c\": [3.0], \"b\": [2.0], \"a\": [1.0]},\n            columns=[\"d\", \"c\", \"b\", \"a\"],\n        )\n        tm.assert_numpy_array_equal(df.values, expected)",
        "begin_line": 541,
        "end_line": 547,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_cast#549",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_cast(self)",
        "snippet": "    def test_constructor_dict_cast(self):\n        # cast float tests\n        test_data = {\"A\": {\"1\": 1, \"2\": 2}, \"B\": {\"1\": \"1\", \"2\": \"2\", \"3\": \"3\"}}\n        frame = DataFrame(test_data, dtype=float)\n        assert len(frame) == 3\n        assert frame[\"B\"].dtype == np.float64\n        assert frame[\"A\"].dtype == np.float64\n\n        frame = DataFrame(test_data)\n        assert len(frame) == 3\n        assert frame[\"B\"].dtype == np.object_\n        assert frame[\"A\"].dtype == np.float64\n\n        # can't cast to float\n        test_data = {\n            \"A\": dict(zip(range(20), tm.makeStringIndex(20))),\n            \"B\": dict(zip(range(15), np.random.randn(15))),\n        }\n        frame = DataFrame(test_data, dtype=float)\n        assert len(frame) == 20\n        assert frame[\"A\"].dtype == np.object_\n        assert frame[\"B\"].dtype == np.float64",
        "begin_line": 549,
        "end_line": 570,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_dont_upcast#572",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_dont_upcast(self)",
        "snippet": "    def test_constructor_dict_dont_upcast(self):\n        d = {\"Col1\": {\"Row1\": \"A String\", \"Row2\": np.nan}}\n        df = DataFrame(d)\n        assert isinstance(df[\"Col1\"][\"Row2\"], float)\n\n        dm = DataFrame([[1, 2], [\"a\", \"b\"]], index=[1, 2], columns=[1, 2])\n        assert isinstance(dm[1][1], int)",
        "begin_line": 572,
        "end_line": 578,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_tuples#580",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_tuples(self)",
        "snippet": "    def test_constructor_dict_of_tuples(self):\n        # GH #1491\n        data = {\"a\": (1, 2, 3), \"b\": (4, 5, 6)}\n\n        result = DataFrame(data)\n        expected = DataFrame({k: list(v) for k, v in data.items()})\n        tm.assert_frame_equal(result, expected, check_dtype=False)",
        "begin_line": 580,
        "end_line": 586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_ranges#588",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_ranges(self)",
        "snippet": "    def test_constructor_dict_of_ranges(self):\n        # GH 26356\n        data = {\"a\": range(3), \"b\": range(3, 6)}\n\n        result = DataFrame(data)\n        expected = DataFrame({\"a\": [0, 1, 2], \"b\": [3, 4, 5]})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 588,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_iterators#596",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_iterators(self)",
        "snippet": "    def test_constructor_dict_of_iterators(self):\n        # GH 26349\n        data = {\"a\": iter(range(3)), \"b\": reversed(range(3))}\n\n        result = DataFrame(data)\n        expected = DataFrame({\"a\": [0, 1, 2], \"b\": [2, 1, 0]})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 596,
        "end_line": 602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_generators#604",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_generators(self)",
        "snippet": "    def test_constructor_dict_of_generators(self):\n        # GH 26349\n        data = {\"a\": (i for i in (range(3))), \"b\": (i for i in reversed(range(3)))}\n        result = DataFrame(data)\n        expected = DataFrame({\"a\": [0, 1, 2], \"b\": [2, 1, 0]})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 604,
        "end_line": 609,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_multiindex#611",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_multiindex(self)",
        "snippet": "    def test_constructor_dict_multiindex(self):\n        def check(result, expected):\n            return tm.assert_frame_equal(\n                result,\n                expected,\n                check_dtype=True,\n                check_index_type=True,\n                check_column_type=True,\n                check_names=True,\n            )\n\n        d = {\n            (\"a\", \"a\"): {(\"i\", \"i\"): 0, (\"i\", \"j\"): 1, (\"j\", \"i\"): 2},\n            (\"b\", \"a\"): {(\"i\", \"i\"): 6, (\"i\", \"j\"): 5, (\"j\", \"i\"): 4},\n            (\"b\", \"c\"): {(\"i\", \"i\"): 7, (\"i\", \"j\"): 8, (\"j\", \"i\"): 9},\n        }\n        _d = sorted(d.items())\n        df = DataFrame(d)\n        expected = DataFrame(\n            [x[1] for x in _d], index=MultiIndex.from_tuples([x[0] for x in _d])\n        ).T\n        expected.index = MultiIndex.from_tuples(expected.index)\n        check(df, expected)\n\n        d[\"z\"] = {\"y\": 123.0, (\"i\", \"i\"): 111, (\"i\", \"j\"): 111, (\"j\", \"i\"): 111}\n        _d.insert(0, (\"z\", d[\"z\"]))\n        expected = DataFrame(\n            [x[1] for x in _d], index=Index([x[0] for x in _d], tupleize_cols=False)\n        ).T\n        expected.index = Index(expected.index, tupleize_cols=False)\n        df = DataFrame(d)\n        df = df.reindex(columns=expected.columns, index=expected.index)\n        check(df, expected)",
        "begin_line": 611,
        "end_line": 643,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.check#612",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.check(result, expected)",
        "snippet": "        def check(result, expected):\n            return tm.assert_frame_equal(\n                result,\n                expected,\n                check_dtype=True,\n                check_index_type=True,\n                check_column_type=True,\n                check_names=True,\n            )",
        "begin_line": 612,
        "end_line": 620,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_datetime64_index#645",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_datetime64_index(self)",
        "snippet": "    def test_constructor_dict_datetime64_index(self):\n        # GH 10160\n        dates_as_str = [\"1984-02-19\", \"1988-11-06\", \"1989-12-03\", \"1990-03-15\"]\n\n        def create_data(constructor):\n            return {i: {constructor(s): 2 * i} for i, s in enumerate(dates_as_str)}\n\n        data_datetime64 = create_data(np.datetime64)\n        data_datetime = create_data(lambda x: datetime.strptime(x, \"%Y-%m-%d\"))\n        data_Timestamp = create_data(Timestamp)\n\n        expected = DataFrame(\n            [\n                {0: 0, 1: None, 2: None, 3: None},\n                {0: None, 1: 2, 2: None, 3: None},\n                {0: None, 1: None, 2: 4, 3: None},\n                {0: None, 1: None, 2: None, 3: 6},\n            ],\n            index=[Timestamp(dt) for dt in dates_as_str],\n        )\n\n        result_datetime64 = DataFrame(data_datetime64)\n        result_datetime = DataFrame(data_datetime)\n        result_Timestamp = DataFrame(data_Timestamp)\n        tm.assert_frame_equal(result_datetime64, expected)\n        tm.assert_frame_equal(result_datetime, expected)\n        tm.assert_frame_equal(result_Timestamp, expected)",
        "begin_line": 645,
        "end_line": 671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.create_data#649",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.create_data(constructor)",
        "snippet": "        def create_data(constructor):\n            return {i: {constructor(s): 2 * i} for i, s in enumerate(dates_as_str)}",
        "begin_line": 649,
        "end_line": 650,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_timedelta64_index#673",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_timedelta64_index(self)",
        "snippet": "    def test_constructor_dict_timedelta64_index(self):\n        # GH 10160\n        td_as_int = [1, 2, 3, 4]\n\n        def create_data(constructor):\n            return {i: {constructor(s): 2 * i} for i, s in enumerate(td_as_int)}\n\n        data_timedelta64 = create_data(lambda x: np.timedelta64(x, \"D\"))\n        data_timedelta = create_data(lambda x: timedelta(days=x))\n        data_Timedelta = create_data(lambda x: Timedelta(x, \"D\"))\n\n        expected = DataFrame(\n            [\n                {0: 0, 1: None, 2: None, 3: None},\n                {0: None, 1: 2, 2: None, 3: None},\n                {0: None, 1: None, 2: 4, 3: None},\n                {0: None, 1: None, 2: None, 3: 6},\n            ],\n            index=[Timedelta(td, \"D\") for td in td_as_int],\n        )\n\n        result_timedelta64 = DataFrame(data_timedelta64)\n        result_timedelta = DataFrame(data_timedelta)\n        result_Timedelta = DataFrame(data_Timedelta)\n        tm.assert_frame_equal(result_timedelta64, expected)\n        tm.assert_frame_equal(result_timedelta, expected)\n        tm.assert_frame_equal(result_Timedelta, expected)",
        "begin_line": 673,
        "end_line": 699,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.create_data#677",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.create_data(constructor)",
        "snippet": "        def create_data(constructor):\n            return {i: {constructor(s): 2 * i} for i, s in enumerate(td_as_int)}",
        "begin_line": 677,
        "end_line": 678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_period#701",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_period(self)",
        "snippet": "    def test_constructor_period(self):\n        # PeriodIndex\n        a = pd.PeriodIndex([\"2012-01\", \"NaT\", \"2012-04\"], freq=\"M\")\n        b = pd.PeriodIndex([\"2012-02-01\", \"2012-03-01\", \"NaT\"], freq=\"D\")\n        df = pd.DataFrame({\"a\": a, \"b\": b})\n        assert df[\"a\"].dtype == a.dtype\n        assert df[\"b\"].dtype == b.dtype\n\n        # list of periods\n        df = pd.DataFrame(\n            {\"a\": a.astype(object).tolist(), \"b\": b.astype(object).tolist()}\n        )\n        assert df[\"a\"].dtype == a.dtype\n        assert df[\"b\"].dtype == b.dtype",
        "begin_line": 701,
        "end_line": 714,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_nested_dict_frame_constructor#716",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_nested_dict_frame_constructor(self)",
        "snippet": "    def test_nested_dict_frame_constructor(self):\n        rng = pd.period_range(\"1/1/2000\", periods=5)\n        df = DataFrame(np.random.randn(10, 5), columns=rng)\n\n        data = {}\n        for col in df.columns:\n            for row in df.index:\n                data.setdefault(col, {})[row] = df._get_value(row, col)\n\n        result = DataFrame(data, columns=rng)\n        tm.assert_frame_equal(result, df)\n\n        data = {}\n        for col in df.columns:\n            for row in df.index:\n                data.setdefault(row, {})[col] = df._get_value(row, col)\n\n        result = DataFrame(data, index=rng).T\n        tm.assert_frame_equal(result, df)",
        "begin_line": 716,
        "end_line": 734,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors._check_basic_constructor#736",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors._check_basic_constructor(self, empty)",
        "snippet": "    def _check_basic_constructor(self, empty):\n        # mat: 2d matrix with shape (3, 2) to input. empty - makes sized\n        # objects\n        mat = empty((2, 3), dtype=float)\n        # 2-D input\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n\n        assert len(frame.index) == 2\n        assert len(frame.columns) == 3\n\n        # 1-D input\n        frame = DataFrame(empty((3,)), columns=[\"A\"], index=[1, 2, 3])\n        assert len(frame.index) == 3\n        assert len(frame.columns) == 1\n\n        # cast type\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2], dtype=np.int64)\n        assert frame.values.dtype == np.int64\n\n        # wrong size axis labels\n        msg = r\"Shape of passed values is \\(2, 3\\), indices imply \\(1, 3\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1])\n        msg = r\"Shape of passed values is \\(2, 3\\), indices imply \\(2, 2\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(mat, columns=[\"A\", \"B\"], index=[1, 2])\n\n        # higher dim raise exception\n        with pytest.raises(ValueError, match=\"Must pass 2-d input\"):\n            DataFrame(empty((3, 3, 3)), columns=[\"A\", \"B\", \"C\"], index=[1])\n\n        # automatic labeling\n        frame = DataFrame(mat)\n        tm.assert_index_equal(frame.index, pd.Int64Index(range(2)))\n        tm.assert_index_equal(frame.columns, pd.Int64Index(range(3)))\n\n        frame = DataFrame(mat, index=[1, 2])\n        tm.assert_index_equal(frame.columns, pd.Int64Index(range(3)))\n\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"])\n        tm.assert_index_equal(frame.index, pd.Int64Index(range(2)))\n\n        # 0-length axis\n        frame = DataFrame(empty((0, 3)))\n        assert len(frame.index) == 0\n\n        frame = DataFrame(empty((3, 0)))\n        assert len(frame.columns) == 0",
        "begin_line": 736,
        "end_line": 783,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray#785",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray(self)",
        "snippet": "    def test_constructor_ndarray(self):\n        self._check_basic_constructor(np.ones)\n\n        frame = DataFrame([\"foo\", \"bar\"], index=[0, 1], columns=[\"A\"])\n        assert len(frame) == 2",
        "begin_line": 785,
        "end_line": 789,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray#791",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray(self)",
        "snippet": "    def test_constructor_maskedarray(self):\n        self._check_basic_constructor(ma.masked_all)\n\n        # Check non-masked values\n        mat = ma.masked_all((2, 3), dtype=float)\n        mat[0, 0] = 1.0\n        mat[1, 2] = 2.0\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n        assert 1.0 == frame[\"A\"][1]\n        assert 2.0 == frame[\"C\"][2]\n\n        # what is this even checking??\n        mat = ma.masked_all((2, 3), dtype=float)\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n        assert np.all(~np.asarray(frame == frame))",
        "begin_line": 791,
        "end_line": 805,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_nonfloat#807",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_nonfloat(self)",
        "snippet": "    def test_constructor_maskedarray_nonfloat(self):\n        # masked int promoted to float\n        mat = ma.masked_all((2, 3), dtype=int)\n        # 2-D input\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n\n        assert len(frame.index) == 2\n        assert len(frame.columns) == 3\n        assert np.all(~np.asarray(frame == frame))\n\n        # cast type\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2], dtype=np.float64)\n        assert frame.values.dtype == np.float64\n\n        # Check non-masked values\n        mat2 = ma.copy(mat)\n        mat2[0, 0] = 1\n        mat2[1, 2] = 2\n        frame = DataFrame(mat2, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n        assert 1 == frame[\"A\"][1]\n        assert 2 == frame[\"C\"][2]\n\n        # masked np.datetime64 stays (use NaT as null)\n        mat = ma.masked_all((2, 3), dtype=\"M8[ns]\")\n        # 2-D input\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n\n        assert len(frame.index) == 2\n        assert len(frame.columns) == 3\n        assert isna(frame).values.all()\n\n        # cast type\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2], dtype=np.int64)\n        assert frame.values.dtype == np.int64\n\n        # Check non-masked values\n        mat2 = ma.copy(mat)\n        mat2[0, 0] = 1\n        mat2[1, 2] = 2\n        frame = DataFrame(mat2, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n        assert 1 == frame[\"A\"].view(\"i8\")[1]\n        assert 2 == frame[\"C\"].view(\"i8\")[2]\n\n        # masked bool promoted to object\n        mat = ma.masked_all((2, 3), dtype=bool)\n        # 2-D input\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n\n        assert len(frame.index) == 2\n        assert len(frame.columns) == 3\n        assert np.all(~np.asarray(frame == frame))\n\n        # cast type\n        frame = DataFrame(mat, columns=[\"A\", \"B\", \"C\"], index=[1, 2], dtype=object)\n        assert frame.values.dtype == object\n\n        # Check non-masked values\n        mat2 = ma.copy(mat)\n        mat2[0, 0] = True\n        mat2[1, 2] = False\n        frame = DataFrame(mat2, columns=[\"A\", \"B\", \"C\"], index=[1, 2])\n        assert frame[\"A\"][1] is True\n        assert frame[\"C\"][2] is False",
        "begin_line": 807,
        "end_line": 869,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_hardened#871",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_hardened(self)",
        "snippet": "    def test_constructor_maskedarray_hardened(self):\n        # Check numpy masked arrays with hard masks -- from GH24574\n        mat_hard = ma.masked_all((2, 2), dtype=float).harden_mask()\n        result = pd.DataFrame(mat_hard, columns=[\"A\", \"B\"], index=[1, 2])\n        expected = pd.DataFrame(\n            {\"A\": [np.nan, np.nan], \"B\": [np.nan, np.nan]},\n            columns=[\"A\", \"B\"],\n            index=[1, 2],\n            dtype=float,\n        )\n        tm.assert_frame_equal(result, expected)\n        # Check case where mask is hard but no data are masked\n        mat_hard = ma.ones((2, 2), dtype=float).harden_mask()\n        result = pd.DataFrame(mat_hard, columns=[\"A\", \"B\"], index=[1, 2])\n        expected = pd.DataFrame(\n            {\"A\": [1.0, 1.0], \"B\": [1.0, 1.0]},\n            columns=[\"A\", \"B\"],\n            index=[1, 2],\n            dtype=float,\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 871,
        "end_line": 891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedrecarray_dtype#893",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedrecarray_dtype(self)",
        "snippet": "    def test_constructor_maskedrecarray_dtype(self):\n        # Ensure constructor honors dtype\n        data = np.ma.array(\n            np.ma.zeros(5, dtype=[(\"date\", \"<f8\"), (\"price\", \"<f8\")]), mask=[False] * 5\n        )\n        data = data.view(mrecords.mrecarray)\n        result = pd.DataFrame(data, dtype=int)\n        expected = pd.DataFrame(np.zeros((5, 2), dtype=int), columns=[\"date\", \"price\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 893,
        "end_line": 901,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mrecarray#903",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mrecarray(self)",
        "snippet": "    def test_constructor_mrecarray(self):\n        # Ensure mrecarray produces frame identical to dict of masked arrays\n        # from GH3479\n\n        assert_fr_equal = functools.partial(\n            tm.assert_frame_equal,\n            check_index_type=True,\n            check_column_type=True,\n            check_frame_type=True,\n        )\n        arrays = [\n            (\"float\", np.array([1.5, 2.0])),\n            (\"int\", np.array([1, 2])),\n            (\"str\", np.array([\"abc\", \"def\"])),\n        ]\n        for name, arr in arrays[:]:\n            arrays.append(\n                (\"masked1_\" + name, np.ma.masked_array(arr, mask=[False, True]))\n            )\n        arrays.append((\"masked_all\", np.ma.masked_all((2,))))\n        arrays.append((\"masked_none\", np.ma.masked_array([1.0, 2.5], mask=False)))\n\n        # call assert_frame_equal for all selections of 3 arrays\n        for comb in itertools.combinations(arrays, 3):\n            names, data = zip(*comb)\n            mrecs = mrecords.fromarrays(data, names=names)\n\n            # fill the comb\n            comb = {k: (v.filled() if hasattr(v, \"filled\") else v) for k, v in comb}\n\n            expected = DataFrame(comb, columns=names)\n            result = DataFrame(mrecs)\n            assert_fr_equal(result, expected)\n\n            # specify columns\n            expected = DataFrame(comb, columns=names[::-1])\n            result = DataFrame(mrecs, columns=names[::-1])\n            assert_fr_equal(result, expected)\n\n            # specify index\n            expected = DataFrame(comb, columns=names, index=[1, 2])\n            result = DataFrame(mrecs, index=[1, 2])\n            assert_fr_equal(result, expected)",
        "begin_line": 903,
        "end_line": 945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_corner_shape#947",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_corner_shape(self)",
        "snippet": "    def test_constructor_corner_shape(self):\n        df = DataFrame(index=[])\n        assert df.values.shape == (0, 0)",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype#961",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype(self, data, index, columns, dtype, expected)",
        "snippet": "    def test_constructor_dtype(self, data, index, columns, dtype, expected):\n        df = DataFrame(data, index, columns, dtype)\n        assert df.values.dtype == expected",
        "begin_line": 961,
        "end_line": 963,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar_inference#965",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar_inference(self)",
        "snippet": "    def test_constructor_scalar_inference(self):\n        data = {\"int\": 1, \"bool\": True, \"float\": 3.0, \"complex\": 4j, \"object\": \"foo\"}\n        df = DataFrame(data, index=np.arange(10))\n\n        assert df[\"int\"].dtype == np.int64\n        assert df[\"bool\"].dtype == np.bool_\n        assert df[\"float\"].dtype == np.float64\n        assert df[\"complex\"].dtype == np.complex128\n        assert df[\"object\"].dtype == np.object_",
        "begin_line": 965,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_arrays_and_scalars#975",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_arrays_and_scalars(self)",
        "snippet": "    def test_constructor_arrays_and_scalars(self):\n        df = DataFrame({\"a\": np.random.randn(10), \"b\": True})\n        exp = DataFrame({\"a\": df[\"a\"].values, \"b\": [True] * 10})\n\n        tm.assert_frame_equal(df, exp)\n        with pytest.raises(ValueError, match=\"must pass an index\"):\n            DataFrame({\"a\": False, \"b\": True})",
        "begin_line": 975,
        "end_line": 981,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_DataFrame#983",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_DataFrame(self, float_frame)",
        "snippet": "    def test_constructor_DataFrame(self, float_frame):\n        df = DataFrame(float_frame)\n        tm.assert_frame_equal(df, float_frame)\n\n        df_casted = DataFrame(float_frame, dtype=np.int64)\n        assert df_casted.values.dtype == np.int64",
        "begin_line": 983,
        "end_line": 988,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_more#990",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_more(self, float_frame)",
        "snippet": "    def test_constructor_more(self, float_frame):\n        # used to be in test_matrix.py\n        arr = np.random.randn(10)\n        dm = DataFrame(arr, columns=[\"A\"], index=np.arange(10))\n        assert dm.values.ndim == 2\n\n        arr = np.random.randn(0)\n        dm = DataFrame(arr)\n        assert dm.values.ndim == 2\n        assert dm.values.ndim == 2\n\n        # no data specified\n        dm = DataFrame(columns=[\"A\", \"B\"], index=np.arange(10))\n        assert dm.values.shape == (10, 2)\n\n        dm = DataFrame(columns=[\"A\", \"B\"])\n        assert dm.values.shape == (0, 2)\n\n        dm = DataFrame(index=np.arange(10))\n        assert dm.values.shape == (10, 0)\n\n        # can't cast\n        mat = np.array([\"foo\", \"bar\"], dtype=object).reshape(2, 1)\n        with pytest.raises(ValueError, match=\"cast\"):\n            DataFrame(mat, index=[0, 1], columns=[0], dtype=float)\n\n        dm = DataFrame(DataFrame(float_frame._series))\n        tm.assert_frame_equal(dm, float_frame)\n\n        # int cast\n        dm = DataFrame(\n            {\"A\": np.ones(10, dtype=int), \"B\": np.ones(10, dtype=np.float64)},\n            index=np.arange(10),\n        )\n\n        assert len(dm.columns) == 2\n        assert dm.values.dtype == np.float64",
        "begin_line": 990,
        "end_line": 1026,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_list#1028",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_list(self)",
        "snippet": "    def test_constructor_empty_list(self):\n        df = DataFrame([], index=[])\n        expected = DataFrame(index=[])\n        tm.assert_frame_equal(df, expected)\n\n        # GH 9939\n        df = DataFrame([], columns=[\"A\", \"B\"])\n        expected = DataFrame({}, columns=[\"A\", \"B\"])\n        tm.assert_frame_equal(df, expected)\n\n        # Empty generator: list(empty_gen()) == []\n        def empty_gen():\n            return\n            yield\n\n        df = DataFrame(empty_gen(), columns=[\"A\", \"B\"])\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 1028,
        "end_line": 1044,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.empty_gen#1039",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.empty_gen()",
        "snippet": "        def empty_gen():\n            return\n            yield",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_lists#1046",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_lists(self)",
        "snippet": "    def test_constructor_list_of_lists(self):\n        # GH #484\n        df = DataFrame(data=[[1, \"a\"], [2, \"b\"]], columns=[\"num\", \"str\"])\n        assert is_integer_dtype(df[\"num\"])\n        assert df[\"str\"].dtype == np.object_\n\n        # GH 4851\n        # list of 0-dim ndarrays\n        expected = DataFrame({0: np.arange(10)})\n        data = [np.array(x) for x in range(10)]\n        result = DataFrame(data)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1046,
        "end_line": 1057,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_sequence_like#1059",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_sequence_like(self)",
        "snippet": "    def test_constructor_sequence_like(self):\n        # GH 3783\n        # collections.Squence like\n\n        class DummyContainer(abc.Sequence):\n            def __init__(self, lst):\n                self._lst = lst\n\n            def __getitem__(self, n):\n                return self._lst.__getitem__(n)\n\n            def __len__(self, n):\n                return self._lst.__len__()\n\n        lst_containers = [DummyContainer([1, \"a\"]), DummyContainer([2, \"b\"])]\n        columns = [\"num\", \"str\"]\n        result = DataFrame(lst_containers, columns=columns)\n        expected = DataFrame([[1, \"a\"], [2, \"b\"]], columns=columns)\n        tm.assert_frame_equal(result, expected, check_dtype=False)\n\n        # GH 4297\n        # support Array\n        import array\n\n        result = DataFrame({\"A\": array.array(\"i\", range(10))})\n        expected = DataFrame({\"A\": list(range(10))})\n        tm.assert_frame_equal(result, expected, check_dtype=False)\n\n        expected = DataFrame([list(range(10)), list(range(10))])\n        result = DataFrame([array.array(\"i\", range(10)), array.array(\"i\", range(10))])\n        tm.assert_frame_equal(result, expected, check_dtype=False)",
        "begin_line": 1059,
        "end_line": 1089,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.DummyContainer.test_constructor_sequence_like#1059",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.DummyContainer",
        "signature": "pandas.tests.frame.test_constructors.DummyContainer.test_constructor_sequence_like(self)",
        "snippet": "    def test_constructor_sequence_like(self):\n        # GH 3783\n        # collections.Squence like\n\n        class DummyContainer(abc.Sequence):\n            def __init__(self, lst):\n                self._lst = lst\n\n            def __getitem__(self, n):\n                return self._lst.__getitem__(n)\n\n            def __len__(self, n):\n                return self._lst.__len__()\n\n        lst_containers = [DummyContainer([1, \"a\"]), DummyContainer([2, \"b\"])]\n        columns = [\"num\", \"str\"]\n        result = DataFrame(lst_containers, columns=columns)\n        expected = DataFrame([[1, \"a\"], [2, \"b\"]], columns=columns)\n        tm.assert_frame_equal(result, expected, check_dtype=False)\n\n        # GH 4297\n        # support Array\n        import array\n\n        result = DataFrame({\"A\": array.array(\"i\", range(10))})\n        expected = DataFrame({\"A\": list(range(10))})\n        tm.assert_frame_equal(result, expected, check_dtype=False)\n\n        expected = DataFrame([list(range(10)), list(range(10))])\n        result = DataFrame([array.array(\"i\", range(10)), array.array(\"i\", range(10))])\n        tm.assert_frame_equal(result, expected, check_dtype=False)",
        "begin_line": 1059,
        "end_line": 1089,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.DummyContainer.__init__#1064",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.DummyContainer",
        "signature": "pandas.tests.frame.test_constructors.DummyContainer.__init__(self, lst)",
        "snippet": "            def __init__(self, lst):\n                self._lst = lst",
        "begin_line": 1064,
        "end_line": 1065,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.DummyContainer.__getitem__#1067",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.DummyContainer",
        "signature": "pandas.tests.frame.test_constructors.DummyContainer.__getitem__(self, n)",
        "snippet": "            def __getitem__(self, n):\n                return self._lst.__getitem__(n)",
        "begin_line": 1067,
        "end_line": 1068,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.DummyContainer.__len__#1070",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.DummyContainer",
        "signature": "pandas.tests.frame.test_constructors.DummyContainer.__len__(self, n)",
        "snippet": "            def __len__(self, n):\n                return self._lst.__len__()",
        "begin_line": 1070,
        "end_line": 1071,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_range#1091",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_range(self)",
        "snippet": "    def test_constructor_range(self):\n        # GH26342\n        result = DataFrame(range(10))\n        expected = DataFrame(list(range(10)))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1091,
        "end_line": 1095,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_ranges#1097",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_ranges(self)",
        "snippet": "    def test_constructor_list_of_ranges(self):\n        result = DataFrame([range(10), range(10)])\n        expected = DataFrame([list(range(10)), list(range(10))])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1097,
        "end_line": 1100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterable#1102",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterable(self)",
        "snippet": "    def test_constructor_iterable(self):\n        # GH 21987\n        class Iter:\n            def __iter__(self):\n                for i in range(10):\n                    yield [1, 2, 3]\n\n        expected = DataFrame([[1, 2, 3]] * 10)\n        result = DataFrame(Iter())\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1102,
        "end_line": 1111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.Iter.test_constructor_iterable#1102",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.Iter",
        "signature": "pandas.tests.frame.test_constructors.Iter.test_constructor_iterable(self)",
        "snippet": "    def test_constructor_iterable(self):\n        # GH 21987\n        class Iter:\n            def __iter__(self):\n                for i in range(10):\n                    yield [1, 2, 3]\n\n        expected = DataFrame([[1, 2, 3]] * 10)\n        result = DataFrame(Iter())\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1102,
        "end_line": 1111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.Iter.__iter__#1105",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.Iter",
        "signature": "pandas.tests.frame.test_constructors.Iter.__iter__(self)",
        "snippet": "            def __iter__(self):\n                for i in range(10):\n                    yield [1, 2, 3]",
        "begin_line": 1105,
        "end_line": 1107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterator#1113",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterator(self)",
        "snippet": "    def test_constructor_iterator(self):\n        result = DataFrame(iter(range(10)))\n        expected = DataFrame(list(range(10)))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1113,
        "end_line": 1116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_iterators#1118",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_iterators(self)",
        "snippet": "    def test_constructor_list_of_iterators(self):\n        result = DataFrame([iter(range(10)), iter(range(10))])\n        expected = DataFrame([list(range(10)), list(range(10))])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1118,
        "end_line": 1121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_generator#1123",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_generator(self)",
        "snippet": "    def test_constructor_generator(self):\n        # related #2305\n\n        gen1 = (i for i in range(10))\n        gen2 = (i for i in range(10))\n\n        expected = DataFrame([list(range(10)), list(range(10))])\n        result = DataFrame([gen1, gen2])\n        tm.assert_frame_equal(result, expected)\n\n        gen = ([i, \"a\"] for i in range(10))\n        result = DataFrame(gen)\n        expected = DataFrame({0: range(10), 1: \"a\"})\n        tm.assert_frame_equal(result, expected, check_dtype=False)",
        "begin_line": 1123,
        "end_line": 1136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_odicts#1138",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_odicts(self)",
        "snippet": "    def test_constructor_list_of_odicts(self):\n        data = [\n            OrderedDict([[\"a\", 1.5], [\"b\", 3], [\"c\", 4], [\"d\", 6]]),\n            OrderedDict([[\"a\", 1.5], [\"b\", 3], [\"d\", 6]]),\n            OrderedDict([[\"a\", 1.5], [\"d\", 6]]),\n            OrderedDict(),\n            OrderedDict([[\"a\", 1.5], [\"b\", 3], [\"c\", 4]]),\n            OrderedDict([[\"b\", 3], [\"c\", 4], [\"d\", 6]]),\n        ]\n\n        result = DataFrame(data)\n        expected = DataFrame.from_dict(\n            dict(zip(range(len(data)), data)), orient=\"index\"\n        )\n        tm.assert_frame_equal(result, expected.reindex(result.index))\n\n        result = DataFrame([{}])\n        expected = DataFrame(index=[0])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1138,
        "end_line": 1156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_preserve_order#1158",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_preserve_order(self)",
        "snippet": "    def test_constructor_ordered_dict_preserve_order(self):\n        # see gh-13304\n        expected = DataFrame([[2, 1]], columns=[\"b\", \"a\"])\n\n        data = OrderedDict()\n        data[\"b\"] = [2]\n        data[\"a\"] = [1]\n\n        result = DataFrame(data)\n        tm.assert_frame_equal(result, expected)\n\n        data = OrderedDict()\n        data[\"b\"] = 2\n        data[\"a\"] = 1\n\n        result = DataFrame([data])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1158,
        "end_line": 1174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_conflicting_orders#1176",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_conflicting_orders(self)",
        "snippet": "    def test_constructor_ordered_dict_conflicting_orders(self):\n        # the first dict element sets the ordering for the DataFrame,\n        # even if there are conflicting orders from subsequent ones\n        row_one = OrderedDict()\n        row_one[\"b\"] = 2\n        row_one[\"a\"] = 1\n\n        row_two = OrderedDict()\n        row_two[\"a\"] = 1\n        row_two[\"b\"] = 2\n\n        row_three = {\"b\": 2, \"a\": 1}\n\n        expected = DataFrame([[2, 1], [2, 1]], columns=[\"b\", \"a\"])\n        result = DataFrame([row_one, row_two])\n        tm.assert_frame_equal(result, expected)\n\n        expected = DataFrame([[2, 1], [2, 1], [2, 1]], columns=[\"b\", \"a\"])\n        result = DataFrame([row_one, row_two, row_three])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1176,
        "end_line": 1195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series#1197",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series(self)",
        "snippet": "    def test_constructor_list_of_series(self):\n        data = [\n            OrderedDict([[\"a\", 1.5], [\"b\", 3.0], [\"c\", 4.0]]),\n            OrderedDict([[\"a\", 1.5], [\"b\", 3.0], [\"c\", 6.0]]),\n        ]\n        sdict = OrderedDict(zip([\"x\", \"y\"], data))\n        idx = Index([\"a\", \"b\", \"c\"])\n\n        # all named\n        data2 = [\n            Series([1.5, 3, 4], idx, dtype=\"O\", name=\"x\"),\n            Series([1.5, 3, 6], idx, name=\"y\"),\n        ]\n        result = DataFrame(data2)\n        expected = DataFrame.from_dict(sdict, orient=\"index\")\n        tm.assert_frame_equal(result, expected)\n\n        # some unnamed\n        data2 = [\n            Series([1.5, 3, 4], idx, dtype=\"O\", name=\"x\"),\n            Series([1.5, 3, 6], idx),\n        ]\n        result = DataFrame(data2)\n\n        sdict = OrderedDict(zip([\"x\", \"Unnamed 0\"], data))\n        expected = DataFrame.from_dict(sdict, orient=\"index\")\n        tm.assert_frame_equal(result, expected)\n\n        # none named\n        data = [\n            OrderedDict([[\"a\", 1.5], [\"b\", 3], [\"c\", 4], [\"d\", 6]]),\n            OrderedDict([[\"a\", 1.5], [\"b\", 3], [\"d\", 6]]),\n            OrderedDict([[\"a\", 1.5], [\"d\", 6]]),\n            OrderedDict(),\n            OrderedDict([[\"a\", 1.5], [\"b\", 3], [\"c\", 4]]),\n            OrderedDict([[\"b\", 3], [\"c\", 4], [\"d\", 6]]),\n        ]\n        data = [\n            create_series_with_explicit_dtype(d, dtype_if_empty=object) for d in data\n        ]\n\n        result = DataFrame(data)\n        sdict = OrderedDict(zip(range(len(data)), data))\n        expected = DataFrame.from_dict(sdict, orient=\"index\")\n        tm.assert_frame_equal(result, expected.reindex(result.index))\n\n        result2 = DataFrame(data, index=np.arange(6))\n        tm.assert_frame_equal(result, result2)\n\n        result = DataFrame([Series(dtype=object)])\n        expected = DataFrame(index=[0])\n        tm.assert_frame_equal(result, expected)\n\n        data = [\n            OrderedDict([[\"a\", 1.5], [\"b\", 3.0], [\"c\", 4.0]]),\n            OrderedDict([[\"a\", 1.5], [\"b\", 3.0], [\"c\", 6.0]]),\n        ]\n        sdict = OrderedDict(zip(range(len(data)), data))\n\n        idx = Index([\"a\", \"b\", \"c\"])\n        data2 = [Series([1.5, 3, 4], idx, dtype=\"O\"), Series([1.5, 3, 6], idx)]\n        result = DataFrame(data2)\n        expected = DataFrame.from_dict(sdict, orient=\"index\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1197,
        "end_line": 1260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series_aligned_index#1262",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series_aligned_index(self)",
        "snippet": "    def test_constructor_list_of_series_aligned_index(self):\n        series = [pd.Series(i, index=[\"b\", \"a\", \"c\"], name=str(i)) for i in range(3)]\n        result = pd.DataFrame(series)\n        expected = pd.DataFrame(\n            {\"b\": [0, 1, 2], \"a\": [0, 1, 2], \"c\": [0, 1, 2]},\n            columns=[\"b\", \"a\", \"c\"],\n            index=[\"0\", \"1\", \"2\"],\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1262,
        "end_line": 1270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_derived_dicts#1272",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_derived_dicts(self)",
        "snippet": "    def test_constructor_list_of_derived_dicts(self):\n        class CustomDict(dict):\n            pass\n\n        d = {\"a\": 1.5, \"b\": 3}\n\n        data_custom = [CustomDict(d)]\n        data = [d]\n\n        result_custom = DataFrame(data_custom)\n        result = DataFrame(data)\n        tm.assert_frame_equal(result, result_custom)",
        "begin_line": 1272,
        "end_line": 1283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.CustomDict.test_constructor_list_of_derived_dicts#1272",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.CustomDict",
        "signature": "pandas.tests.frame.test_constructors.CustomDict.test_constructor_list_of_derived_dicts(self)",
        "snippet": "    def test_constructor_list_of_derived_dicts(self):\n        class CustomDict(dict):\n            pass\n\n        d = {\"a\": 1.5, \"b\": 3}\n\n        data_custom = [CustomDict(d)]\n        data = [d]\n\n        result_custom = DataFrame(data_custom)\n        result = DataFrame(data)\n        tm.assert_frame_equal(result, result_custom)",
        "begin_line": 1272,
        "end_line": 1283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ragged#1285",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ragged(self)",
        "snippet": "    def test_constructor_ragged(self):\n        data = {\"A\": np.random.randn(10), \"B\": np.random.randn(8)}\n        with pytest.raises(ValueError, match=\"arrays must all be same length\"):\n            DataFrame(data)",
        "begin_line": 1285,
        "end_line": 1288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar#1290",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar(self)",
        "snippet": "    def test_constructor_scalar(self):\n        idx = Index(range(3))\n        df = DataFrame({\"a\": 0}, index=idx)\n        expected = DataFrame({\"a\": [0, 0, 0]}, index=idx)\n        tm.assert_frame_equal(df, expected, check_dtype=False)",
        "begin_line": 1290,
        "end_line": 1294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_copy_bug#1296",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_copy_bug(self, float_frame)",
        "snippet": "    def test_constructor_Series_copy_bug(self, float_frame):\n        df = DataFrame(float_frame[\"A\"], index=float_frame.index, columns=[\"A\"])\n        df.copy()",
        "begin_line": 1296,
        "end_line": 1298,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dict_and_Series#1300",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dict_and_Series(self)",
        "snippet": "    def test_constructor_mixed_dict_and_Series(self):\n        data = {}\n        data[\"A\"] = {\"foo\": 1, \"bar\": 2, \"baz\": 3}\n        data[\"B\"] = Series([4, 3, 2, 1], index=[\"bar\", \"qux\", \"baz\", \"foo\"])\n\n        result = DataFrame(data)\n        assert result.index.is_monotonic\n\n        # ordering ambiguous, raise exception\n        with pytest.raises(ValueError, match=\"ambiguous ordering\"):\n            DataFrame({\"A\": [\"a\", \"b\"], \"B\": {\"a\": \"a\", \"b\": \"b\"}})\n\n        # this is OK though\n        result = DataFrame({\"A\": [\"a\", \"b\"], \"B\": Series([\"a\", \"b\"], index=[\"a\", \"b\"])})\n        expected = DataFrame({\"A\": [\"a\", \"b\"], \"B\": [\"a\", \"b\"]}, index=[\"a\", \"b\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1300,
        "end_line": 1315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_type_rows#1317",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_type_rows(self)",
        "snippet": "    def test_constructor_mixed_type_rows(self):\n        # Issue 25075\n        data = [[1, 2], (3, 4)]\n        result = DataFrame(data)\n        expected = DataFrame([[1, 2], [3, 4]])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1317,
        "end_line": 1322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_tuple#1335",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_tuple(self, tuples, lists)",
        "snippet": "    def test_constructor_tuple(self, tuples, lists):\n        # GH 25691\n        result = DataFrame(tuples)\n        expected = DataFrame(lists)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1335,
        "end_line": 1339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_tuples#1341",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_tuples(self)",
        "snippet": "    def test_constructor_list_of_tuples(self):\n        result = DataFrame({\"A\": [(1, 2), (3, 4)]})\n        expected = DataFrame({\"A\": Series([(1, 2), (3, 4)])})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1341,
        "end_line": 1344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_namedtuples#1346",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_namedtuples(self)",
        "snippet": "    def test_constructor_list_of_namedtuples(self):\n        # GH11181\n        from collections import namedtuple\n\n        named_tuple = namedtuple(\"Pandas\", list(\"ab\"))\n        tuples = [named_tuple(1, 3), named_tuple(2, 4)]\n        expected = DataFrame({\"a\": [1, 2], \"b\": [3, 4]})\n        result = DataFrame(tuples)\n        tm.assert_frame_equal(result, expected)\n\n        # with columns\n        expected = DataFrame({\"y\": [1, 2], \"z\": [3, 4]})\n        result = DataFrame(tuples, columns=[\"y\", \"z\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1346,
        "end_line": 1359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_dict_order#1361",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_dict_order(self)",
        "snippet": "    def test_constructor_list_of_dict_order(self):\n        # GH10056\n        data = [\n            {\"First\": 1, \"Second\": 4, \"Third\": 7, \"Fourth\": 10},\n            {\"Second\": 5, \"First\": 2, \"Fourth\": 11, \"Third\": 8},\n            {\"Second\": 6, \"First\": 3, \"Fourth\": 12, \"Third\": 9, \"YYY\": 14, \"XXX\": 13},\n        ]\n        expected = DataFrame(\n            {\n                \"First\": [1, 2, 3],\n                \"Second\": [4, 5, 6],\n                \"Third\": [7, 8, 9],\n                \"Fourth\": [10, 11, 12],\n                \"YYY\": [None, None, 14],\n                \"XXX\": [None, None, 13],\n            }\n        )\n        result = DataFrame(data)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1361,
        "end_line": 1379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_orient#1381",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_orient(self, float_string_frame)",
        "snippet": "    def test_constructor_orient(self, float_string_frame):\n        data_dict = float_string_frame.T._series\n        recons = DataFrame.from_dict(data_dict, orient=\"index\")\n        expected = float_string_frame.reindex(index=recons.index)\n        tm.assert_frame_equal(recons, expected)\n\n        # dict of sequence\n        a = {\"hi\": [32, 3, 3], \"there\": [3, 5, 3]}\n        rs = DataFrame.from_dict(a, orient=\"index\")\n        xp = DataFrame.from_dict(a).T.reindex(list(a.keys()))\n        tm.assert_frame_equal(rs, xp)",
        "begin_line": 1381,
        "end_line": 1391,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_ordered_dict#1393",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_ordered_dict(self)",
        "snippet": "    def test_constructor_from_ordered_dict(self):\n        # GH8425\n        a = OrderedDict(\n            [\n                (\"one\", OrderedDict([(\"col_a\", \"foo1\"), (\"col_b\", \"bar1\")])),\n                (\"two\", OrderedDict([(\"col_a\", \"foo2\"), (\"col_b\", \"bar2\")])),\n                (\"three\", OrderedDict([(\"col_a\", \"foo3\"), (\"col_b\", \"bar3\")])),\n            ]\n        )\n        expected = DataFrame.from_dict(a, orient=\"columns\").T\n        result = DataFrame.from_dict(a, orient=\"index\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1393,
        "end_line": 1404,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_dict_columns_parameter#1406",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_dict_columns_parameter(self)",
        "snippet": "    def test_from_dict_columns_parameter(self):\n        # GH 18529\n        # Test new columns parameter for from_dict that was added to make\n        # from_items(..., orient='index', columns=[...]) easier to replicate\n        result = DataFrame.from_dict(\n            OrderedDict([(\"A\", [1, 2]), (\"B\", [4, 5])]),\n            orient=\"index\",\n            columns=[\"one\", \"two\"],\n        )\n        expected = DataFrame([[1, 2], [4, 5]], index=[\"A\", \"B\"], columns=[\"one\", \"two\"])\n        tm.assert_frame_equal(result, expected)\n\n        msg = \"cannot use columns parameter with orient='columns'\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame.from_dict(\n                dict([(\"A\", [1, 2]), (\"B\", [4, 5])]),\n                orient=\"columns\",\n                columns=[\"one\", \"two\"],\n            )\n        with pytest.raises(ValueError, match=msg):\n            DataFrame.from_dict(\n                dict([(\"A\", [1, 2]), (\"B\", [4, 5])]), columns=[\"one\", \"two\"]\n            )",
        "begin_line": 1406,
        "end_line": 1428,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_dict_tuples#1438",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_dict_tuples(self, data_dict, keys)",
        "snippet": "    def test_constructor_from_dict_tuples(self, data_dict, keys):\n        # GH 16769\n        df = DataFrame.from_dict(data_dict)\n\n        result = df.columns\n        expected = Index(keys, dtype=\"object\", tupleize_cols=False)\n\n        tm.assert_index_equal(result, expected)",
        "begin_line": 1438,
        "end_line": 1445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named#1447",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named(self)",
        "snippet": "    def test_constructor_Series_named(self):\n        a = Series([1, 2, 3], index=[\"a\", \"b\", \"c\"], name=\"x\")\n        df = DataFrame(a)\n        assert df.columns[0] == \"x\"\n        tm.assert_index_equal(df.index, a.index)\n\n        # ndarray like\n        arr = np.random.randn(10)\n        s = Series(arr, name=\"x\")\n        df = DataFrame(s)\n        expected = DataFrame(dict(x=s))\n        tm.assert_frame_equal(df, expected)\n\n        s = Series(arr, index=range(3, 13))\n        df = DataFrame(s)\n        expected = DataFrame({0: s})\n        tm.assert_frame_equal(df, expected)\n\n        msg = r\"Shape of passed values is \\(10, 1\\), indices imply \\(10, 2\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(s, columns=[1, 2])\n\n        # #2234\n        a = Series([], name=\"x\", dtype=object)\n        df = DataFrame(a)\n        assert df.columns[0] == \"x\"\n\n        # series with name and w/o\n        s1 = Series(arr, name=\"x\")\n        df = DataFrame([s1, arr]).T\n        expected = DataFrame({\"x\": s1, \"Unnamed 0\": arr}, columns=[\"x\", \"Unnamed 0\"])\n        tm.assert_frame_equal(df, expected)\n\n        # this is a bit non-intuitive here; the series collapse down to arrays\n        df = DataFrame([arr, s1]).T\n        expected = DataFrame({1: s1, 0: arr}, columns=[0, 1])\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 1447,
        "end_line": 1483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named_and_columns#1485",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named_and_columns(self)",
        "snippet": "    def test_constructor_Series_named_and_columns(self):\n        # GH 9232 validation\n\n        s0 = Series(range(5), name=0)\n        s1 = Series(range(5), name=1)\n\n        # matching name and column gives standard frame\n        tm.assert_frame_equal(pd.DataFrame(s0, columns=[0]), s0.to_frame())\n        tm.assert_frame_equal(pd.DataFrame(s1, columns=[1]), s1.to_frame())\n\n        # non-matching produces empty frame\n        assert pd.DataFrame(s0, columns=[1]).empty\n        assert pd.DataFrame(s1, columns=[0]).empty",
        "begin_line": 1485,
        "end_line": 1497,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_differently_indexed#1499",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_differently_indexed(self)",
        "snippet": "    def test_constructor_Series_differently_indexed(self):\n        # name\n        s1 = Series([1, 2, 3], index=[\"a\", \"b\", \"c\"], name=\"x\")\n\n        # no name\n        s2 = Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n\n        other_index = Index([\"a\", \"b\"])\n\n        df1 = DataFrame(s1, index=other_index)\n        exp1 = DataFrame(s1.reindex(other_index))\n        assert df1.columns[0] == \"x\"\n        tm.assert_frame_equal(df1, exp1)\n\n        df2 = DataFrame(s2, index=other_index)\n        exp2 = DataFrame(s2.reindex(other_index))\n        assert df2.columns[0] == 0\n        tm.assert_index_equal(df2.index, other_index)\n        tm.assert_frame_equal(df2, exp2)",
        "begin_line": 1499,
        "end_line": 1517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_manager_resize#1519",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_manager_resize(self, float_frame)",
        "snippet": "    def test_constructor_manager_resize(self, float_frame):\n        index = list(float_frame.index[:5])\n        columns = list(float_frame.columns[:3])\n\n        result = DataFrame(float_frame._data, index=index, columns=columns)\n        tm.assert_index_equal(result.index, Index(index))\n        tm.assert_index_equal(result.columns, Index(columns))",
        "begin_line": 1519,
        "end_line": 1525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mix_series_nonseries#1527",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mix_series_nonseries(self, float_frame)",
        "snippet": "    def test_constructor_mix_series_nonseries(self, float_frame):\n        df = DataFrame(\n            {\"A\": float_frame[\"A\"], \"B\": list(float_frame[\"B\"])}, columns=[\"A\", \"B\"]\n        )\n        tm.assert_frame_equal(df, float_frame.loc[:, [\"A\", \"B\"]])\n\n        msg = \"does not match index length\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame({\"A\": float_frame[\"A\"], \"B\": list(float_frame[\"B\"])[:-2]})",
        "begin_line": 1527,
        "end_line": 1535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_miscast_na_int_dtype#1537",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_miscast_na_int_dtype(self)",
        "snippet": "    def test_constructor_miscast_na_int_dtype(self):\n        df = DataFrame([[np.nan, 1], [1, 0]], dtype=np.int64)\n        expected = DataFrame([[np.nan, 1], [1, 0]])\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 1537,
        "end_line": 1540,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_column_duplicates#1542",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_column_duplicates(self)",
        "snippet": "    def test_constructor_column_duplicates(self):\n        # it works! #2079\n        df = DataFrame([[8, 5]], columns=[\"a\", \"a\"])\n        edf = DataFrame([[8, 5]])\n        edf.columns = [\"a\", \"a\"]\n\n        tm.assert_frame_equal(df, edf)\n\n        idf = DataFrame.from_records([(8, 5)], columns=[\"a\", \"a\"])\n\n        tm.assert_frame_equal(idf, edf)\n\n        msg = \"If using all scalar values, you must pass an index\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame.from_dict(OrderedDict([(\"b\", 8), (\"a\", 5), (\"a\", 6)]))",
        "begin_line": 1542,
        "end_line": 1556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_with_string_dtype#1558",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_with_string_dtype(self)",
        "snippet": "    def test_constructor_empty_with_string_dtype(self):\n        # GH 9428\n        expected = DataFrame(index=[0, 1], columns=[0, 1], dtype=object)\n\n        df = DataFrame(index=[0, 1], columns=[0, 1], dtype=str)\n        tm.assert_frame_equal(df, expected)\n        df = DataFrame(index=[0, 1], columns=[0, 1], dtype=np.str_)\n        tm.assert_frame_equal(df, expected)\n        df = DataFrame(index=[0, 1], columns=[0, 1], dtype=np.unicode_)\n        tm.assert_frame_equal(df, expected)\n        df = DataFrame(index=[0, 1], columns=[0, 1], dtype=\"U5\")\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 1558,
        "end_line": 1569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_single_value#1571",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_single_value(self)",
        "snippet": "    def test_constructor_single_value(self):\n        # expecting single value upcasting here\n        df = DataFrame(0.0, index=[1, 2, 3], columns=[\"a\", \"b\", \"c\"])\n        tm.assert_frame_equal(\n            df, DataFrame(np.zeros(df.shape).astype(\"float64\"), df.index, df.columns)\n        )\n\n        df = DataFrame(0, index=[1, 2, 3], columns=[\"a\", \"b\", \"c\"])\n        tm.assert_frame_equal(\n            df, DataFrame(np.zeros(df.shape).astype(\"int64\"), df.index, df.columns)\n        )\n\n        df = DataFrame(\"a\", index=[1, 2], columns=[\"a\", \"c\"])\n        tm.assert_frame_equal(\n            df,\n            DataFrame(\n                np.array([[\"a\", \"a\"], [\"a\", \"a\"]], dtype=object),\n                index=[1, 2],\n                columns=[\"a\", \"c\"],\n            ),\n        )\n\n        msg = \"DataFrame constructor not properly called!\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(\"a\", [1, 2])\n        with pytest.raises(ValueError, match=msg):\n            DataFrame(\"a\", columns=[\"a\", \"c\"])\n\n        msg = \"incompatible data and dtype\"\n        with pytest.raises(TypeError, match=msg):\n            DataFrame(\"a\", [1, 2], [\"a\", \"c\"], float)",
        "begin_line": 1571,
        "end_line": 1601,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_datetimes#1603",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_datetimes(self)",
        "snippet": "    def test_constructor_with_datetimes(self):\n        intname = np.dtype(np.int_).name\n        floatname = np.dtype(np.float_).name\n        datetime64name = np.dtype(\"M8[ns]\").name\n        objectname = np.dtype(np.object_).name\n\n        # single item\n        df = DataFrame(\n            {\n                \"A\": 1,\n                \"B\": \"foo\",\n                \"C\": \"bar\",\n                \"D\": Timestamp(\"20010101\"),\n                \"E\": datetime(2001, 1, 2, 0, 0),\n            },\n            index=np.arange(10),\n        )\n        result = df.dtypes\n        expected = Series(\n            [np.dtype(\"int64\")]\n            + [np.dtype(objectname)] * 2\n            + [np.dtype(datetime64name)] * 2,\n            index=list(\"ABCDE\"),\n        )\n        tm.assert_series_equal(result, expected)\n\n        # check with ndarray construction ndim==0 (e.g. we are passing a ndim 0\n        # ndarray with a dtype specified)\n        df = DataFrame(\n            {\n                \"a\": 1.0,\n                \"b\": 2,\n                \"c\": \"foo\",\n                floatname: np.array(1.0, dtype=floatname),\n                intname: np.array(1, dtype=intname),\n            },\n            index=np.arange(10),\n        )\n        result = df.dtypes\n        expected = Series(\n            [np.dtype(\"float64\")]\n            + [np.dtype(\"int64\")]\n            + [np.dtype(\"object\")]\n            + [np.dtype(\"float64\")]\n            + [np.dtype(intname)],\n            index=[\"a\", \"b\", \"c\", floatname, intname],\n        )\n        tm.assert_series_equal(result, expected)\n\n        # check with ndarray construction ndim>0\n        df = DataFrame(\n            {\n                \"a\": 1.0,\n                \"b\": 2,\n                \"c\": \"foo\",\n                floatname: np.array([1.0] * 10, dtype=floatname),\n                intname: np.array([1] * 10, dtype=intname),\n            },\n            index=np.arange(10),\n        )\n        result = df.dtypes\n        expected = Series(\n            [np.dtype(\"float64\")]\n            + [np.dtype(\"int64\")]\n            + [np.dtype(\"object\")]\n            + [np.dtype(\"float64\")]\n            + [np.dtype(intname)],\n            index=[\"a\", \"b\", \"c\", floatname, intname],\n        )\n        tm.assert_series_equal(result, expected)\n\n        # GH 2809\n        ind = date_range(start=\"2000-01-01\", freq=\"D\", periods=10)\n        datetimes = [ts.to_pydatetime() for ts in ind]\n        datetime_s = Series(datetimes)\n        assert datetime_s.dtype == \"M8[ns]\"\n\n        # GH 2810\n        ind = date_range(start=\"2000-01-01\", freq=\"D\", periods=10)\n        datetimes = [ts.to_pydatetime() for ts in ind]\n        dates = [ts.date() for ts in ind]\n        df = DataFrame(datetimes, columns=[\"datetimes\"])\n        df[\"dates\"] = dates\n        result = df.dtypes\n        expected = Series(\n            [np.dtype(\"datetime64[ns]\"), np.dtype(\"object\")],\n            index=[\"datetimes\", \"dates\"],\n        )\n        tm.assert_series_equal(result, expected)\n\n        # GH 7594\n        # don't coerce tz-aware\n        import pytz\n\n        tz = pytz.timezone(\"US/Eastern\")\n        dt = tz.localize(datetime(2012, 1, 1))\n\n        df = DataFrame({\"End Date\": dt}, index=[0])\n        assert df.iat[0, 0] == dt\n        tm.assert_series_equal(\n            df.dtypes, Series({\"End Date\": \"datetime64[ns, US/Eastern]\"})\n        )\n\n        df = DataFrame([{\"End Date\": dt}])\n        assert df.iat[0, 0] == dt\n        tm.assert_series_equal(\n            df.dtypes, Series({\"End Date\": \"datetime64[ns, US/Eastern]\"})\n        )\n\n        # tz-aware (UTC and other tz's)\n        # GH 8411\n        dr = date_range(\"20130101\", periods=3)\n        df = DataFrame({\"value\": dr})\n        assert df.iat[0, 0].tz is None\n        dr = date_range(\"20130101\", periods=3, tz=\"UTC\")\n        df = DataFrame({\"value\": dr})\n        assert str(df.iat[0, 0].tz) == \"UTC\"\n        dr = date_range(\"20130101\", periods=3, tz=\"US/Eastern\")\n        df = DataFrame({\"value\": dr})\n        assert str(df.iat[0, 0].tz) == \"US/Eastern\"\n\n        # GH 7822\n        # preserver an index with a tz on dict construction\n        i = date_range(\"1/1/2011\", periods=5, freq=\"10s\", tz=\"US/Eastern\")\n\n        expected = DataFrame({\"a\": i.to_series().reset_index(drop=True)})\n        df = DataFrame()\n        df[\"a\"] = i\n        tm.assert_frame_equal(df, expected)\n\n        df = DataFrame({\"a\": i})\n        tm.assert_frame_equal(df, expected)\n\n        # multiples\n        i_no_tz = date_range(\"1/1/2011\", periods=5, freq=\"10s\")\n        df = DataFrame({\"a\": i, \"b\": i_no_tz})\n        expected = DataFrame({\"a\": i.to_series().reset_index(drop=True), \"b\": i_no_tz})\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 1603,
        "end_line": 1740,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_datetimes_with_nulls#1755",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_datetimes_with_nulls(self, arr)",
        "snippet": "    def test_constructor_datetimes_with_nulls(self, arr):\n        # gh-15869, GH#11220\n        result = DataFrame(arr).dtypes\n        expected = Series([np.dtype(\"datetime64[ns]\")])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1755,
        "end_line": 1759,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_for_list_with_dtypes#1761",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_for_list_with_dtypes(self)",
        "snippet": "    def test_constructor_for_list_with_dtypes(self):\n        # test list of lists/ndarrays\n        df = DataFrame([np.arange(5) for x in range(5)])\n        result = df.dtypes\n        expected = Series([np.dtype(\"int64\")] * 5)\n        tm.assert_series_equal(result, expected)\n\n        df = DataFrame([np.array(np.arange(5), dtype=\"int32\") for x in range(5)])\n        result = df.dtypes\n        expected = Series([np.dtype(\"int64\")] * 5)\n        tm.assert_series_equal(result, expected)\n\n        # overflow issue? (we always expecte int64 upcasting here)\n        df = DataFrame({\"a\": [2 ** 31, 2 ** 31 + 1]})\n        assert df.dtypes.iloc[0] == np.dtype(\"int64\")\n\n        # GH #2751 (construction with no index specified), make sure we cast to\n        # platform values\n        df = DataFrame([1, 2])\n        assert df.dtypes.iloc[0] == np.dtype(\"int64\")\n\n        df = DataFrame([1.0, 2.0])\n        assert df.dtypes.iloc[0] == np.dtype(\"float64\")\n\n        df = DataFrame({\"a\": [1, 2]})\n        assert df.dtypes.iloc[0] == np.dtype(\"int64\")\n\n        df = DataFrame({\"a\": [1.0, 2.0]})\n        assert df.dtypes.iloc[0] == np.dtype(\"float64\")\n\n        df = DataFrame({\"a\": 1}, index=range(3))\n        assert df.dtypes.iloc[0] == np.dtype(\"int64\")\n\n        df = DataFrame({\"a\": 1.0}, index=range(3))\n        assert df.dtypes.iloc[0] == np.dtype(\"float64\")\n\n        # with object list\n        df = DataFrame(\n            {\n                \"a\": [1, 2, 4, 7],\n                \"b\": [1.2, 2.3, 5.1, 6.3],\n                \"c\": list(\"abcd\"),\n                \"d\": [datetime(2000, 1, 1) for i in range(4)],\n                \"e\": [1.0, 2, 4.0, 7],\n            }\n        )\n        result = df.dtypes\n        expected = Series(\n            [\n                np.dtype(\"int64\"),\n                np.dtype(\"float64\"),\n                np.dtype(\"object\"),\n                np.dtype(\"datetime64[ns]\"),\n                np.dtype(\"float64\"),\n            ],\n            index=list(\"abcde\"),\n        )\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1761,
        "end_line": 1818,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_frame_copy#1820",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_frame_copy(self, float_frame)",
        "snippet": "    def test_constructor_frame_copy(self, float_frame):\n        cop = DataFrame(float_frame, copy=True)\n        cop[\"A\"] = 5\n        assert (cop[\"A\"] == 5).all()\n        assert not (float_frame[\"A\"] == 5).all()",
        "begin_line": 1820,
        "end_line": 1824,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray_copy#1826",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray_copy(self, float_frame)",
        "snippet": "    def test_constructor_ndarray_copy(self, float_frame):\n        df = DataFrame(float_frame.values)\n\n        float_frame.values[5] = 5\n        assert (df.values[5] == 5).all()\n\n        df = DataFrame(float_frame.values, copy=True)\n        float_frame.values[6] = 6\n        assert not (df.values[6] == 6).all()",
        "begin_line": 1826,
        "end_line": 1834,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_series_copy#1836",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_series_copy(self, float_frame)",
        "snippet": "    def test_constructor_series_copy(self, float_frame):\n        series = float_frame._series\n\n        df = DataFrame({\"A\": series[\"A\"]})\n        df[\"A\"][:] = 5\n\n        assert not (series[\"A\"] == 5).all()",
        "begin_line": 1836,
        "end_line": 1842,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_nas#1844",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_nas(self)",
        "snippet": "    def test_constructor_with_nas(self):\n        # GH 5016\n        # na's in indices\n\n        def check(df):\n            for i in range(len(df.columns)):\n                df.iloc[:, i]\n\n            indexer = np.arange(len(df.columns))[isna(df.columns)]\n\n            # No NaN found -> error\n            if len(indexer) == 0:\n                msg = (\n                    \"cannot do label indexing on\"\n                    r\" <class 'pandas\\.core\\.indexes\\.range\\.RangeIndex'>\"\n                    r\" with these indexers \\[nan\\] of <class 'float'>\"\n                )\n                with pytest.raises(TypeError, match=msg):\n                    df.loc[:, np.nan]\n            # single nan should result in Series\n            elif len(indexer) == 1:\n                tm.assert_series_equal(df.iloc[:, indexer[0]], df.loc[:, np.nan])\n            # multiple nans should result in DataFrame\n            else:\n                tm.assert_frame_equal(df.iloc[:, indexer], df.loc[:, np.nan])\n\n        df = DataFrame([[1, 2, 3], [4, 5, 6]], index=[1, np.nan])\n        check(df)\n\n        df = DataFrame([[1, 2, 3], [4, 5, 6]], columns=[1.1, 2.2, np.nan])\n        check(df)\n\n        df = DataFrame([[0, 1, 2, 3], [4, 5, 6, 7]], columns=[np.nan, 1.1, 2.2, np.nan])\n        check(df)\n\n        df = DataFrame(\n            [[0.0, 1, 2, 3.0], [4, 5, 6, 7]], columns=[np.nan, 1.1, 2.2, np.nan]\n        )\n        check(df)\n\n        # GH 21428 (non-unique columns)\n        df = DataFrame([[0.0, 1, 2, 3.0], [4, 5, 6, 7]], columns=[np.nan, 1, 2, 2])\n        check(df)",
        "begin_line": 1844,
        "end_line": 1886,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.check#1848",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.check(df)",
        "snippet": "        def check(df):\n            for i in range(len(df.columns)):\n                df.iloc[:, i]\n\n            indexer = np.arange(len(df.columns))[isna(df.columns)]\n\n            # No NaN found -> error\n            if len(indexer) == 0:\n                msg = (\n                    \"cannot do label indexing on\"\n                    r\" <class 'pandas\\.core\\.indexes\\.range\\.RangeIndex'>\"\n                    r\" with these indexers \\[nan\\] of <class 'float'>\"\n                )\n                with pytest.raises(TypeError, match=msg):\n                    df.loc[:, np.nan]\n            # single nan should result in Series\n            elif len(indexer) == 1:\n                tm.assert_series_equal(df.iloc[:, indexer[0]], df.loc[:, np.nan])\n            # multiple nans should result in DataFrame\n            else:\n                tm.assert_frame_equal(df.iloc[:, indexer], df.loc[:, np.nan])",
        "begin_line": 1848,
        "end_line": 1868,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_lists_to_object_dtype#1888",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_lists_to_object_dtype(self)",
        "snippet": "    def test_constructor_lists_to_object_dtype(self):\n        # from #1074\n        d = DataFrame({\"a\": [np.nan, False]})\n        assert d[\"a\"].dtype == np.object_\n        assert not d[\"a\"][1]",
        "begin_line": 1888,
        "end_line": 1892,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_categorical#1894",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_categorical(self)",
        "snippet": "    def test_constructor_categorical(self):\n\n        # GH8626\n\n        # dict creation\n        df = DataFrame({\"A\": list(\"abc\")}, dtype=\"category\")\n        expected = Series(list(\"abc\"), dtype=\"category\", name=\"A\")\n        tm.assert_series_equal(df[\"A\"], expected)\n\n        # to_frame\n        s = Series(list(\"abc\"), dtype=\"category\")\n        result = s.to_frame()\n        expected = Series(list(\"abc\"), dtype=\"category\", name=0)\n        tm.assert_series_equal(result[0], expected)\n        result = s.to_frame(name=\"foo\")\n        expected = Series(list(\"abc\"), dtype=\"category\", name=\"foo\")\n        tm.assert_series_equal(result[\"foo\"], expected)\n\n        # list-like creation\n        df = DataFrame(list(\"abc\"), dtype=\"category\")\n        expected = Series(list(\"abc\"), dtype=\"category\", name=0)\n        tm.assert_series_equal(df[0], expected)\n\n        # ndim != 1\n        df = DataFrame([Categorical(list(\"abc\"))])\n        expected = DataFrame({0: Series(list(\"abc\"), dtype=\"category\")})\n        tm.assert_frame_equal(df, expected)\n\n        df = DataFrame([Categorical(list(\"abc\")), Categorical(list(\"abd\"))])\n        expected = DataFrame(\n            {\n                0: Series(list(\"abc\"), dtype=\"category\"),\n                1: Series(list(\"abd\"), dtype=\"category\"),\n            },\n            columns=[0, 1],\n        )\n        tm.assert_frame_equal(df, expected)\n\n        # mixed\n        df = DataFrame([Categorical(list(\"abc\")), list(\"def\")])\n        expected = DataFrame(\n            {0: Series(list(\"abc\"), dtype=\"category\"), 1: list(\"def\")}, columns=[0, 1]\n        )\n        tm.assert_frame_equal(df, expected)\n\n        # invalid (shape)\n        msg = r\"Shape of passed values is \\(6, 2\\), indices imply \\(3, 2\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame([Categorical(list(\"abc\")), Categorical(list(\"abdefg\"))])\n\n        # ndim > 1\n        msg = \"> 1 ndim Categorical are not supported at this time\"\n        with pytest.raises(NotImplementedError, match=msg):\n            Categorical(np.array([list(\"abcd\")]))",
        "begin_line": 1894,
        "end_line": 1947,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_categorical_series#1949",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_categorical_series(self)",
        "snippet": "    def test_constructor_categorical_series(self):\n\n        items = [1, 2, 3, 1]\n        exp = Series(items).astype(\"category\")\n        res = Series(items, dtype=\"category\")\n        tm.assert_series_equal(res, exp)\n\n        items = [\"a\", \"b\", \"c\", \"a\"]\n        exp = Series(items).astype(\"category\")\n        res = Series(items, dtype=\"category\")\n        tm.assert_series_equal(res, exp)\n\n        # insert into frame with different index\n        # GH 8076\n        index = date_range(\"20000101\", periods=3)\n        expected = Series(\n            Categorical(values=[np.nan, np.nan, np.nan], categories=[\"a\", \"b\", \"c\"])\n        )\n        expected.index = index\n\n        expected = DataFrame({\"x\": expected})\n        df = DataFrame({\"x\": Series([\"a\", \"b\", \"c\"], dtype=\"category\")}, index=index)\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 1949,
        "end_line": 1971,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_to_records#1973",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_to_records(self)",
        "snippet": "    def test_from_records_to_records(self):\n        # from numpy documentation\n        arr = np.zeros((2,), dtype=(\"i4,f4,a10\"))\n        arr[:] = [(1, 2.0, \"Hello\"), (2, 3.0, \"World\")]\n\n        # TODO(wesm): unused\n        frame = DataFrame.from_records(arr)  # noqa\n\n        index = pd.Index(np.arange(len(arr))[::-1])\n        indexed_frame = DataFrame.from_records(arr, index=index)\n        tm.assert_index_equal(indexed_frame.index, index)\n\n        # without names, it should go to last ditch\n        arr2 = np.zeros((2, 3))\n        tm.assert_frame_equal(DataFrame.from_records(arr2), DataFrame(arr2))\n\n        # wrong length\n        msg = r\"Shape of passed values is \\(2, 3\\), indices imply \\(1, 3\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame.from_records(arr, index=index[:-1])\n\n        indexed_frame = DataFrame.from_records(arr, index=\"f1\")\n\n        # what to do?\n        records = indexed_frame.to_records()\n        assert len(records.dtype.names) == 3\n\n        records = indexed_frame.to_records(index=False)\n        assert len(records.dtype.names) == 2\n        assert \"index\" not in records.dtype.names",
        "begin_line": 1973,
        "end_line": 2002,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_nones#2004",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_nones(self)",
        "snippet": "    def test_from_records_nones(self):\n        tuples = [(1, 2, None, 3), (1, 2, None, 3), (None, 2, 5, 3)]\n\n        df = DataFrame.from_records(tuples, columns=[\"a\", \"b\", \"c\", \"d\"])\n        assert np.isnan(df[\"c\"][0])",
        "begin_line": 2004,
        "end_line": 2008,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_iterator#2010",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_iterator(self)",
        "snippet": "    def test_from_records_iterator(self):\n        arr = np.array(\n            [(1.0, 1.0, 2, 2), (3.0, 3.0, 4, 4), (5.0, 5.0, 6, 6), (7.0, 7.0, 8, 8)],\n            dtype=[\n                (\"x\", np.float64),\n                (\"u\", np.float32),\n                (\"y\", np.int64),\n                (\"z\", np.int32),\n            ],\n        )\n        df = DataFrame.from_records(iter(arr), nrows=2)\n        xp = DataFrame(\n            {\n                \"x\": np.array([1.0, 3.0], dtype=np.float64),\n                \"u\": np.array([1.0, 3.0], dtype=np.float32),\n                \"y\": np.array([2, 4], dtype=np.int64),\n                \"z\": np.array([2, 4], dtype=np.int32),\n            }\n        )\n        tm.assert_frame_equal(df.reindex_like(xp), xp)\n\n        # no dtypes specified here, so just compare with the default\n        arr = [(1.0, 2), (3.0, 4), (5.0, 6), (7.0, 8)]\n        df = DataFrame.from_records(iter(arr), columns=[\"x\", \"y\"], nrows=2)\n        tm.assert_frame_equal(df, xp.reindex(columns=[\"x\", \"y\"]), check_dtype=False)",
        "begin_line": 2010,
        "end_line": 2034,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_tuples_generator#2036",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_tuples_generator(self)",
        "snippet": "    def test_from_records_tuples_generator(self):\n        def tuple_generator(length):\n            for i in range(length):\n                letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                yield (i, letters[i % len(letters)], i / length)\n\n        columns_names = [\"Integer\", \"String\", \"Float\"]\n        columns = [\n            [i[j] for i in tuple_generator(10)] for j in range(len(columns_names))\n        ]\n        data = {\"Integer\": columns[0], \"String\": columns[1], \"Float\": columns[2]}\n        expected = DataFrame(data, columns=columns_names)\n\n        generator = tuple_generator(10)\n        result = DataFrame.from_records(generator, columns=columns_names)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2036,
        "end_line": 2051,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.tuple_generator#2037",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.tuple_generator(length)",
        "snippet": "        def tuple_generator(length):\n            for i in range(length):\n                letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                yield (i, letters[i % len(letters)], i / length)",
        "begin_line": 2037,
        "end_line": 2040,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_lists_generator#2053",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_lists_generator(self)",
        "snippet": "    def test_from_records_lists_generator(self):\n        def list_generator(length):\n            for i in range(length):\n                letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                yield [i, letters[i % len(letters)], i / length]\n\n        columns_names = [\"Integer\", \"String\", \"Float\"]\n        columns = [\n            [i[j] for i in list_generator(10)] for j in range(len(columns_names))\n        ]\n        data = {\"Integer\": columns[0], \"String\": columns[1], \"Float\": columns[2]}\n        expected = DataFrame(data, columns=columns_names)\n\n        generator = list_generator(10)\n        result = DataFrame.from_records(generator, columns=columns_names)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2053,
        "end_line": 2068,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.list_generator#2054",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.list_generator(length)",
        "snippet": "        def list_generator(length):\n            for i in range(length):\n                letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                yield [i, letters[i % len(letters)], i / length]",
        "begin_line": 2054,
        "end_line": 2057,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_columns_not_modified#2070",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_columns_not_modified(self)",
        "snippet": "    def test_from_records_columns_not_modified(self):\n        tuples = [(1, 2, 3), (1, 2, 3), (2, 5, 3)]\n\n        columns = [\"a\", \"b\", \"c\"]\n        original_columns = list(columns)\n\n        df = DataFrame.from_records(tuples, columns=columns, index=\"a\")  # noqa\n\n        assert columns == original_columns",
        "begin_line": 2070,
        "end_line": 2078,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_decimal#2080",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_decimal(self)",
        "snippet": "    def test_from_records_decimal(self):\n        from decimal import Decimal\n\n        tuples = [(Decimal(\"1.5\"),), (Decimal(\"2.5\"),), (None,)]\n\n        df = DataFrame.from_records(tuples, columns=[\"a\"])\n        assert df[\"a\"].dtype == object\n\n        df = DataFrame.from_records(tuples, columns=[\"a\"], coerce_float=True)\n        assert df[\"a\"].dtype == np.float64\n        assert np.isnan(df[\"a\"].values[-1])",
        "begin_line": 2080,
        "end_line": 2090,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_duplicates#2092",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_duplicates(self)",
        "snippet": "    def test_from_records_duplicates(self):\n        result = DataFrame.from_records([(1, 2, 3), (4, 5, 6)], columns=[\"a\", \"b\", \"a\"])\n\n        expected = DataFrame([(1, 2, 3), (4, 5, 6)], columns=[\"a\", \"b\", \"a\"])\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2092,
        "end_line": 2097,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_set_index_name#2099",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_set_index_name(self)",
        "snippet": "    def test_from_records_set_index_name(self):\n        def create_dict(order_id):\n            return {\n                \"order_id\": order_id,\n                \"quantity\": np.random.randint(1, 10),\n                \"price\": np.random.randint(1, 10),\n            }\n\n        documents = [create_dict(i) for i in range(10)]\n        # demo missing data\n        documents.append({\"order_id\": 10, \"quantity\": 5})\n\n        result = DataFrame.from_records(documents, index=\"order_id\")\n        assert result.index.name == \"order_id\"\n\n        # MultiIndex\n        result = DataFrame.from_records(documents, index=[\"order_id\", \"quantity\"])\n        assert result.index.names == (\"order_id\", \"quantity\")",
        "begin_line": 2099,
        "end_line": 2116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.create_dict#2100",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.create_dict(order_id)",
        "snippet": "        def create_dict(order_id):\n            return {\n                \"order_id\": order_id,\n                \"quantity\": np.random.randint(1, 10),\n                \"price\": np.random.randint(1, 10),\n            }",
        "begin_line": 2100,
        "end_line": 2105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_misc_brokenness#2118",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_misc_brokenness(self)",
        "snippet": "    def test_from_records_misc_brokenness(self):\n        # #2179\n\n        data = {1: [\"foo\"], 2: [\"bar\"]}\n\n        result = DataFrame.from_records(data, columns=[\"a\", \"b\"])\n        exp = DataFrame(data, columns=[\"a\", \"b\"])\n        tm.assert_frame_equal(result, exp)\n\n        # overlap in index/index_names\n\n        data = {\"a\": [1, 2, 3], \"b\": [4, 5, 6]}\n\n        result = DataFrame.from_records(data, index=[\"a\", \"b\", \"c\"])\n        exp = DataFrame(data, index=[\"a\", \"b\", \"c\"])\n        tm.assert_frame_equal(result, exp)\n\n        # GH 2623\n        rows = []\n        rows.append([datetime(2010, 1, 1), 1])\n        rows.append([datetime(2010, 1, 2), \"hi\"])  # test col upconverts to obj\n        df2_obj = DataFrame.from_records(rows, columns=[\"date\", \"test\"])\n        result = df2_obj.dtypes\n        expected = Series(\n            [np.dtype(\"datetime64[ns]\"), np.dtype(\"object\")], index=[\"date\", \"test\"]\n        )\n        tm.assert_series_equal(result, expected)\n\n        rows = []\n        rows.append([datetime(2010, 1, 1), 1])\n        rows.append([datetime(2010, 1, 2), 1])\n        df2_obj = DataFrame.from_records(rows, columns=[\"date\", \"test\"])\n        result = df2_obj.dtypes\n        expected = Series(\n            [np.dtype(\"datetime64[ns]\"), np.dtype(\"int64\")], index=[\"date\", \"test\"]\n        )\n        tm.assert_series_equal(result, expected)",
        "begin_line": 2118,
        "end_line": 2154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty#2156",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty(self)",
        "snippet": "    def test_from_records_empty(self):\n        # 3562\n        result = DataFrame.from_records([], columns=[\"a\", \"b\", \"c\"])\n        expected = DataFrame(columns=[\"a\", \"b\", \"c\"])\n        tm.assert_frame_equal(result, expected)\n\n        result = DataFrame.from_records([], columns=[\"a\", \"b\", \"b\"])\n        expected = DataFrame(columns=[\"a\", \"b\", \"b\"])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2156,
        "end_line": 2164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty_with_nonempty_fields_gh3682#2166",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty_with_nonempty_fields_gh3682(self)",
        "snippet": "    def test_from_records_empty_with_nonempty_fields_gh3682(self):\n        a = np.array([(1, 2)], dtype=[(\"id\", np.int64), (\"value\", np.int64)])\n        df = DataFrame.from_records(a, index=\"id\")\n        tm.assert_index_equal(df.index, Index([1], name=\"id\"))\n        assert df.index.name == \"id\"\n        tm.assert_index_equal(df.columns, Index([\"value\"]))\n\n        b = np.array([], dtype=[(\"id\", np.int64), (\"value\", np.int64)])\n        df = DataFrame.from_records(b, index=\"id\")\n        tm.assert_index_equal(df.index, Index([], name=\"id\"))\n        assert df.index.name == \"id\"",
        "begin_line": 2166,
        "end_line": 2176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_datetimes#2178",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_datetimes(self)",
        "snippet": "    def test_from_records_with_datetimes(self):\n\n        # this may fail on certain platforms because of a numpy issue\n        # related GH6140\n        if not is_platform_little_endian():\n            pytest.skip(\"known failure of test on non-little endian\")\n\n        # construction with a null in a recarray\n        # GH 6140\n        expected = DataFrame({\"EXPIRY\": [datetime(2005, 3, 1, 0, 0), None]})\n\n        arrdata = [np.array([datetime(2005, 3, 1, 0, 0), None])]\n        dtypes = [(\"EXPIRY\", \"<M8[ns]\")]\n\n        try:\n            recarray = np.core.records.fromarrays(arrdata, dtype=dtypes)\n        except (ValueError):\n            pytest.skip(\"known failure of numpy rec array creation\")\n\n        result = DataFrame.from_records(recarray)\n        tm.assert_frame_equal(result, expected)\n\n        # coercion should work too\n        arrdata = [np.array([datetime(2005, 3, 1, 0, 0), None])]\n        dtypes = [(\"EXPIRY\", \"<M8[m]\")]\n        recarray = np.core.records.fromarrays(arrdata, dtype=dtypes)\n        result = DataFrame.from_records(recarray)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2178,
        "end_line": 2205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_sequencelike#2207",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_sequencelike(self)",
        "snippet": "    def test_from_records_sequencelike(self):\n        df = DataFrame(\n            {\n                \"A\": np.array(np.random.randn(6), dtype=np.float64),\n                \"A1\": np.array(np.random.randn(6), dtype=np.float64),\n                \"B\": np.array(np.arange(6), dtype=np.int64),\n                \"C\": [\"foo\"] * 6,\n                \"D\": np.array([True, False] * 3, dtype=bool),\n                \"E\": np.array(np.random.randn(6), dtype=np.float32),\n                \"E1\": np.array(np.random.randn(6), dtype=np.float32),\n                \"F\": np.array(np.arange(6), dtype=np.int32),\n            }\n        )\n\n        # this is actually tricky to create the recordlike arrays and\n        # have the dtypes be intact\n        blocks = df._to_dict_of_blocks()\n        tuples = []\n        columns = []\n        dtypes = []\n        for dtype, b in blocks.items():\n            columns.extend(b.columns)\n            dtypes.extend([(c, np.dtype(dtype).descr[0][1]) for c in b.columns])\n        for i in range(len(df.index)):\n            tup = []\n            for _, b in blocks.items():\n                tup.extend(b.iloc[i].values)\n            tuples.append(tuple(tup))\n\n        recarray = np.array(tuples, dtype=dtypes).view(np.recarray)\n        recarray2 = df.to_records()\n        lists = [list(x) for x in tuples]\n\n        # tuples (lose the dtype info)\n        result = DataFrame.from_records(tuples, columns=columns).reindex(\n            columns=df.columns\n        )\n\n        # created recarray and with to_records recarray (have dtype info)\n        result2 = DataFrame.from_records(recarray, columns=columns).reindex(\n            columns=df.columns\n        )\n        result3 = DataFrame.from_records(recarray2, columns=columns).reindex(\n            columns=df.columns\n        )\n\n        # list of tupels (no dtype info)\n        result4 = DataFrame.from_records(lists, columns=columns).reindex(\n            columns=df.columns\n        )\n\n        tm.assert_frame_equal(result, df, check_dtype=False)\n        tm.assert_frame_equal(result2, df)\n        tm.assert_frame_equal(result3, df)\n        tm.assert_frame_equal(result4, df, check_dtype=False)\n\n        # tuples is in the order of the columns\n        result = DataFrame.from_records(tuples)\n        tm.assert_index_equal(result.columns, pd.RangeIndex(8))\n\n        # test exclude parameter & we are casting the results here (as we don't\n        # have dtype info to recover)\n        columns_to_test = [columns.index(\"C\"), columns.index(\"E1\")]\n\n        exclude = list(set(range(8)) - set(columns_to_test))\n        result = DataFrame.from_records(tuples, exclude=exclude)\n        result.columns = [columns[i] for i in sorted(columns_to_test)]\n        tm.assert_series_equal(result[\"C\"], df[\"C\"])\n        tm.assert_series_equal(result[\"E1\"], df[\"E1\"].astype(\"float64\"))\n\n        # empty case\n        result = DataFrame.from_records([], columns=[\"foo\", \"bar\", \"baz\"])\n        assert len(result) == 0\n        tm.assert_index_equal(result.columns, pd.Index([\"foo\", \"bar\", \"baz\"]))\n\n        result = DataFrame.from_records([])\n        assert len(result) == 0\n        assert len(result.columns) == 0",
        "begin_line": 2207,
        "end_line": 2284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_dictlike#2286",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_dictlike(self)",
        "snippet": "    def test_from_records_dictlike(self):\n\n        # test the dict methods\n        df = DataFrame(\n            {\n                \"A\": np.array(np.random.randn(6), dtype=np.float64),\n                \"A1\": np.array(np.random.randn(6), dtype=np.float64),\n                \"B\": np.array(np.arange(6), dtype=np.int64),\n                \"C\": [\"foo\"] * 6,\n                \"D\": np.array([True, False] * 3, dtype=bool),\n                \"E\": np.array(np.random.randn(6), dtype=np.float32),\n                \"E1\": np.array(np.random.randn(6), dtype=np.float32),\n                \"F\": np.array(np.arange(6), dtype=np.int32),\n            }\n        )\n\n        # columns is in a different order here than the actual items iterated\n        # from the dict\n        blocks = df._to_dict_of_blocks()\n        columns = []\n        for dtype, b in blocks.items():\n            columns.extend(b.columns)\n\n        asdict = {x: y for x, y in df.items()}\n        asdict2 = {x: y.values for x, y in df.items()}\n\n        # dict of series & dict of ndarrays (have dtype info)\n        results = []\n        results.append(DataFrame.from_records(asdict).reindex(columns=df.columns))\n        results.append(\n            DataFrame.from_records(asdict, columns=columns).reindex(columns=df.columns)\n        )\n        results.append(\n            DataFrame.from_records(asdict2, columns=columns).reindex(columns=df.columns)\n        )\n\n        for r in results:\n            tm.assert_frame_equal(r, df)",
        "begin_line": 2286,
        "end_line": 2323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_index_data#2325",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_index_data(self)",
        "snippet": "    def test_from_records_with_index_data(self):\n        df = DataFrame(np.random.randn(10, 3), columns=[\"A\", \"B\", \"C\"])\n\n        data = np.random.randn(10)\n        df1 = DataFrame.from_records(df, index=data)\n        tm.assert_index_equal(df1.index, Index(data))",
        "begin_line": 2325,
        "end_line": 2330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_bad_index_column#2332",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_bad_index_column(self)",
        "snippet": "    def test_from_records_bad_index_column(self):\n        df = DataFrame(np.random.randn(10, 3), columns=[\"A\", \"B\", \"C\"])\n\n        # should pass\n        df1 = DataFrame.from_records(df, index=[\"C\"])\n        tm.assert_index_equal(df1.index, Index(df.C))\n\n        df1 = DataFrame.from_records(df, index=\"C\")\n        tm.assert_index_equal(df1.index, Index(df.C))\n\n        # should fail\n        msg = r\"Shape of passed values is \\(10, 3\\), indices imply \\(1, 3\\)\"\n        with pytest.raises(ValueError, match=msg):\n            DataFrame.from_records(df, index=[2])\n        with pytest.raises(KeyError, match=r\"^2$\"):\n            DataFrame.from_records(df, index=2)",
        "begin_line": 2332,
        "end_line": 2347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_non_tuple#2349",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_non_tuple(self)",
        "snippet": "    def test_from_records_non_tuple(self):\n        class Record:\n            def __init__(self, *args):\n                self.args = args\n\n            def __getitem__(self, i):\n                return self.args[i]\n\n            def __iter__(self):\n                return iter(self.args)\n\n        recs = [Record(1, 2, 3), Record(4, 5, 6), Record(7, 8, 9)]\n        tups = [tuple(rec) for rec in recs]\n\n        result = DataFrame.from_records(recs)\n        expected = DataFrame.from_records(tups)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2349,
        "end_line": 2365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.Record.test_from_records_non_tuple#2349",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.Record",
        "signature": "pandas.tests.frame.test_constructors.Record.test_from_records_non_tuple(self)",
        "snippet": "    def test_from_records_non_tuple(self):\n        class Record:\n            def __init__(self, *args):\n                self.args = args\n\n            def __getitem__(self, i):\n                return self.args[i]\n\n            def __iter__(self):\n                return iter(self.args)\n\n        recs = [Record(1, 2, 3), Record(4, 5, 6), Record(7, 8, 9)]\n        tups = [tuple(rec) for rec in recs]\n\n        result = DataFrame.from_records(recs)\n        expected = DataFrame.from_records(tups)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2349,
        "end_line": 2365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.Record.__init__#2351",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.Record",
        "signature": "pandas.tests.frame.test_constructors.Record.__init__(self, *args)",
        "snippet": "            def __init__(self, *args):\n                self.args = args",
        "begin_line": 2351,
        "end_line": 2352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.Record.__getitem__#2354",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.Record",
        "signature": "pandas.tests.frame.test_constructors.Record.__getitem__(self, i)",
        "snippet": "            def __getitem__(self, i):\n                return self.args[i]",
        "begin_line": 2354,
        "end_line": 2355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.Record.__iter__#2357",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.Record",
        "signature": "pandas.tests.frame.test_constructors.Record.__iter__(self)",
        "snippet": "            def __iter__(self):\n                return iter(self.args)",
        "begin_line": 2357,
        "end_line": 2358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_len0_with_columns#2367",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_len0_with_columns(self)",
        "snippet": "    def test_from_records_len0_with_columns(self):\n        # #2633\n        result = DataFrame.from_records([], index=\"foo\", columns=[\"foo\", \"bar\"])\n        expected = Index([\"bar\"])\n\n        assert len(result) == 0\n        assert result.index.name == \"foo\"\n        tm.assert_index_equal(result.columns, expected)",
        "begin_line": 2367,
        "end_line": 2374,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_series_list_dict#2376",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_series_list_dict(self)",
        "snippet": "    def test_from_records_series_list_dict(self):\n        # GH27358\n        expected = DataFrame([[{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}]]).T\n        data = Series([[{\"a\": 1, \"b\": 2}], [{\"a\": 3, \"b\": 4}]])\n        result = DataFrame.from_records(data)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2376,
        "end_line": 2381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_to_frame_with_falsey_names#2383",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_to_frame_with_falsey_names(self)",
        "snippet": "    def test_to_frame_with_falsey_names(self):\n        # GH 16114\n        result = Series(name=0, dtype=object).to_frame().dtypes\n        expected = Series({0: object})\n        tm.assert_series_equal(result, expected)\n\n        result = DataFrame(Series(name=0, dtype=object)).dtypes\n        tm.assert_series_equal(result, expected)",
        "begin_line": 2383,
        "end_line": 2390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_range_dtype#2393",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_range_dtype(self, dtype)",
        "snippet": "    def test_constructor_range_dtype(self, dtype):\n        expected = DataFrame({\"A\": [0, 1, 2, 3, 4]}, dtype=dtype or \"int64\")\n\n        # GH 26342\n        result = DataFrame(range(5), columns=[\"A\"], dtype=dtype)\n        tm.assert_frame_equal(result, expected)\n\n        # GH 16804\n        result = DataFrame({\"A\": range(5)}, dtype=dtype)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2393,
        "end_line": 2402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_frame_from_list_subclass#2404",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_frame_from_list_subclass(self)",
        "snippet": "    def test_frame_from_list_subclass(self):\n        # GH21226\n        class List(list):\n            pass\n\n        expected = DataFrame([[1, 2, 3], [4, 5, 6]])\n        result = DataFrame(List([List([1, 2, 3]), List([4, 5, 6])]))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2404,
        "end_line": 2411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.List.test_frame_from_list_subclass#2404",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.List",
        "signature": "pandas.tests.frame.test_constructors.List.test_frame_from_list_subclass(self)",
        "snippet": "    def test_frame_from_list_subclass(self):\n        # GH21226\n        class List(list):\n            pass\n\n        expected = DataFrame([[1, 2, 3], [4, 5, 6]])\n        result = DataFrame(List([List([1, 2, 3]), List([4, 5, 6])]))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2404,
        "end_line": 2411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_extension_array#2422",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructors",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_extension_array(self, extension_arr)",
        "snippet": "    def test_constructor_with_extension_array(self, extension_arr):\n        # GH11363\n        expected = DataFrame(Series(extension_arr))\n        result = DataFrame(extension_arr)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2422,
        "end_line": 2426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_dict#2430",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_dict(self)",
        "snippet": "    def test_from_dict(self):\n\n        # 8260\n        # support datetime64 with tz\n\n        idx = Index(date_range(\"20130101\", periods=3, tz=\"US/Eastern\"), name=\"foo\")\n        dr = date_range(\"20130110\", periods=3)\n\n        # construction\n        df = DataFrame({\"A\": idx, \"B\": dr})\n        assert df[\"A\"].dtype, \"M8[ns, US/Eastern\"\n        assert df[\"A\"].name == \"A\"\n        tm.assert_series_equal(df[\"A\"], Series(idx, name=\"A\"))\n        tm.assert_series_equal(df[\"B\"], Series(dr, name=\"B\"))",
        "begin_line": 2430,
        "end_line": 2443,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_index#2445",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_index(self)",
        "snippet": "    def test_from_index(self):\n\n        # from index\n        idx2 = date_range(\"20130101\", periods=3, tz=\"US/Eastern\", name=\"foo\")\n        df2 = DataFrame(idx2)\n        tm.assert_series_equal(df2[\"foo\"], Series(idx2, name=\"foo\"))\n        df2 = DataFrame(Series(idx2))\n        tm.assert_series_equal(df2[\"foo\"], Series(idx2, name=\"foo\"))\n\n        idx2 = date_range(\"20130101\", periods=3, tz=\"US/Eastern\")\n        df2 = DataFrame(idx2)\n        tm.assert_series_equal(df2[0], Series(idx2, name=0))\n        df2 = DataFrame(Series(idx2))\n        tm.assert_series_equal(df2[0], Series(idx2, name=0))",
        "begin_line": 2445,
        "end_line": 2458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_dict_constructor_datetime64_1680#2460",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_dict_constructor_datetime64_1680(self)",
        "snippet": "    def test_frame_dict_constructor_datetime64_1680(self):\n        dr = date_range(\"1/1/2012\", periods=10)\n        s = Series(dr, index=dr)\n\n        # it works!\n        DataFrame({\"a\": \"foo\", \"b\": s}, index=dr)\n        DataFrame({\"a\": \"foo\", \"b\": s.values}, index=dr)",
        "begin_line": 2460,
        "end_line": 2466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_datetime64_mixed_index_ctor_1681#2468",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_datetime64_mixed_index_ctor_1681(self)",
        "snippet": "    def test_frame_datetime64_mixed_index_ctor_1681(self):\n        dr = date_range(\"2011/1/1\", \"2012/1/1\", freq=\"W-FRI\")\n        ts = Series(dr)\n\n        # it works!\n        d = DataFrame({\"A\": \"foo\", \"B\": ts}, index=dr)\n        assert d[\"B\"].isna().all()",
        "begin_line": 2468,
        "end_line": 2474,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_to_records#2476",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_to_records(self)",
        "snippet": "    def test_frame_timeseries_to_records(self):\n        index = date_range(\"1/1/2000\", periods=10)\n        df = DataFrame(np.random.randn(10, 3), index=index, columns=[\"a\", \"b\", \"c\"])\n\n        result = df.to_records()\n        result[\"index\"].dtype == \"M8[ns]\"\n\n        result = df.to_records(index=False)",
        "begin_line": 2476,
        "end_line": 2483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_column#2485",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_column(self)",
        "snippet": "    def test_frame_timeseries_column(self):\n        # GH19157\n        dr = date_range(start=\"20130101T10:00:00\", periods=3, freq=\"T\", tz=\"US/Eastern\")\n        result = DataFrame(dr, columns=[\"timestamps\"])\n        expected = DataFrame(\n            {\n                \"timestamps\": [\n                    Timestamp(\"20130101T10:00:00\", tz=\"US/Eastern\"),\n                    Timestamp(\"20130101T10:01:00\", tz=\"US/Eastern\"),\n                    Timestamp(\"20130101T10:02:00\", tz=\"US/Eastern\"),\n                ]\n            }\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2485,
        "end_line": 2498,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_nested_dict_construction#2500",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_nested_dict_construction(self)",
        "snippet": "    def test_nested_dict_construction(self):\n        # GH22227\n        columns = [\"Nevada\", \"Ohio\"]\n        pop = {\n            \"Nevada\": {2001: 2.4, 2002: 2.9},\n            \"Ohio\": {2000: 1.5, 2001: 1.7, 2002: 3.6},\n        }\n        result = pd.DataFrame(pop, index=[2001, 2002, 2003], columns=columns)\n        expected = pd.DataFrame(\n            [(2.4, 1.7), (2.9, 3.6), (np.nan, np.nan)],\n            columns=columns,\n            index=pd.Index([2001, 2002, 2003]),\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2500,
        "end_line": 2513,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_tzaware_object_array#2515",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_tzaware_object_array(self)",
        "snippet": "    def test_from_tzaware_object_array(self):\n        # GH#26825 2D object array of tzaware timestamps should not raise\n        dti = pd.date_range(\"2016-04-05 04:30\", periods=3, tz=\"UTC\")\n        data = dti._data.astype(object).reshape(1, -1)\n        df = pd.DataFrame(data)\n        assert df.shape == (1, 3)\n        assert (df.dtypes == dti.dtype).all()\n        assert (df == dti).all().all()",
        "begin_line": 2515,
        "end_line": 2522,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_tzaware_mixed_object_array#2524",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_tzaware_mixed_object_array(self)",
        "snippet": "    def test_from_tzaware_mixed_object_array(self):\n        # GH#26825\n        arr = np.array(\n            [\n                [\n                    Timestamp(\"2013-01-01 00:00:00\"),\n                    Timestamp(\"2013-01-02 00:00:00\"),\n                    Timestamp(\"2013-01-03 00:00:00\"),\n                ],\n                [\n                    Timestamp(\"2013-01-01 00:00:00-0500\", tz=\"US/Eastern\"),\n                    pd.NaT,\n                    Timestamp(\"2013-01-03 00:00:00-0500\", tz=\"US/Eastern\"),\n                ],\n                [\n                    Timestamp(\"2013-01-01 00:00:00+0100\", tz=\"CET\"),\n                    pd.NaT,\n                    Timestamp(\"2013-01-03 00:00:00+0100\", tz=\"CET\"),\n                ],\n            ],\n            dtype=object,\n        ).T\n        res = DataFrame(arr, columns=[\"A\", \"B\", \"C\"])\n\n        expected_dtypes = [\n            \"datetime64[ns]\",\n            \"datetime64[ns, US/Eastern]\",\n            \"datetime64[ns, CET]\",\n        ]\n        assert (res.dtypes == expected_dtypes).all()",
        "begin_line": 2524,
        "end_line": 2553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_2d_ndarray_with_dtype#2555",
        "src_path": "pandas/tests/frame/test_constructors.py",
        "class_name": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ",
        "signature": "pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_2d_ndarray_with_dtype(self)",
        "snippet": "    def test_from_2d_ndarray_with_dtype(self):\n        # GH#12513\n        array_dim2 = np.arange(10).reshape((5, 2))\n        df = pd.DataFrame(array_dim2, dtype=\"datetime64[ns, UTC]\")\n\n        expected = pd.DataFrame(array_dim2).astype(\"datetime64[ns, UTC]\")\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 2555,
        "end_line": 2561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#1",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 1,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#18",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 18,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    }
]