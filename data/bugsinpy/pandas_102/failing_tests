coverage run -m pytest pandas/tests/frame/test_constructors.py::TestDataFrameConstructorWithDatetimeTZ::test_from_2d_ndarray_with_dtype
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/frame/test_constructors.py F                                [100%]

=================================== FAILURES ===================================
____ TestDataFrameConstructorWithDatetimeTZ.test_from_2d_ndarray_with_dtype ____

self = <pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ object at 0x7f61832ad910>

    def test_from_2d_ndarray_with_dtype(self):
        # GH#12513
        array_dim2 = np.arange(10).reshape((5, 2))
>       df = pd.DataFrame(array_dim2, dtype="datetime64[ns, UTC]")

pandas/tests/frame/test_constructors.py:2558: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:458: in __init__
    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)
pandas/core/internals/construction.py:157: in init_ndarray
    return arrays_to_mgr([values], columns, index, columns, dtype=dtype)
pandas/core/internals/construction.py:64: in arrays_to_mgr
    index = extract_index(arrays)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

data = [array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7],
       [8, 9]])]

    def extract_index(data):
        index = None
        if len(data) == 0:
            index = Index([])
        elif len(data) > 0:
            raw_lengths = []
            indexes = []
    
            have_raw_arrays = False
            have_series = False
            have_dicts = False
    
            for val in data:
                if isinstance(val, ABCSeries):
                    have_series = True
                    indexes.append(val.index)
                elif isinstance(val, dict):
                    have_dicts = True
                    indexes.append(list(val.keys()))
                elif is_list_like(val) and getattr(val, "ndim", 1) == 1:
                    have_raw_arrays = True
                    raw_lengths.append(len(val))
    
            if not indexes and not raw_lengths:
>               raise ValueError("If using all scalar values, you must pass an index")
E               ValueError: If using all scalar values, you must pass an index

pandas/core/internals/construction.py:347: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/frame/test_constructors.py::TestDataFrameConstructorWithDatetimeTZ::test_from_2d_ndarray_with_dtype
============================== 1 failed in 0.53s ===============================
