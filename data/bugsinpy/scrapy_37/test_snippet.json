[
    {
        "name": "tests.test_http_request.RequestTest.test_init#27",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_init(self)",
        "snippet": "    def test_init(self):\n        # Request requires url in the constructor\n        self.assertRaises(Exception, self.request_class)\n\n        # url argument must be basestring\n        self.assertRaises(TypeError, self.request_class, 123)\n        r = self.request_class('http://www.example.com')\n\n        r = self.request_class(\"http://www.example.com\")\n        assert isinstance(r.url, str)\n        self.assertEqual(r.url, \"http://www.example.com\")\n        self.assertEqual(r.method, self.default_method)\n\n        assert isinstance(r.headers, Headers)\n        self.assertEqual(r.headers, self.default_headers)\n        self.assertEqual(r.meta, self.default_meta)\n\n        meta = {\"lala\": \"lolo\"}\n        headers = {b\"caca\": b\"coco\"}\n        r = self.request_class(\"http://www.example.com\", meta=meta, headers=headers, body=\"a body\")\n\n        assert r.meta is not meta\n        self.assertEqual(r.meta, meta)\n        assert r.headers is not headers\n        self.assertEqual(r.headers[b\"caca\"], b\"coco\")",
        "begin_line": 27,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_no_scheme#53",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_no_scheme(self)",
        "snippet": "    def test_url_no_scheme(self):\n        self.assertRaises(ValueError, self.request_class, 'foo')\n        self.assertRaises(ValueError, self.request_class, '/foo/')\n        self.assertRaises(ValueError, self.request_class, '/foo:bar')",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_headers#58",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_headers(self)",
        "snippet": "    def test_headers(self):\n        # Different ways of setting headers attribute\n        url = 'http://www.scrapy.org'\n        headers = {b'Accept':'gzip', b'Custom-Header':'nothing to tell you'}\n        r = self.request_class(url=url, headers=headers)\n        p = self.request_class(url=url, headers=r.headers)\n\n        self.assertEqual(r.headers, p.headers)\n        self.assertFalse(r.headers is headers)\n        self.assertFalse(p.headers is r.headers)\n\n        # headers must not be unicode\n        h = Headers({'key1': u'val1', u'key2': 'val2'})\n        h[u'newkey'] = u'newval'\n        for k, v in h.iteritems():\n            self.assertIsInstance(k, bytes)\n            for s in v:\n                self.assertIsInstance(s, bytes)",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_eq#77",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_eq(self)",
        "snippet": "    def test_eq(self):\n        url = 'http://www.scrapy.org'\n        r1 = self.request_class(url=url)\n        r2 = self.request_class(url=url)\n        self.assertNotEqual(r1, r2)\n\n        set_ = set()\n        set_.add(r1)\n        set_.add(r2)\n        self.assertEqual(len(set_), 2)",
        "begin_line": 77,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url#88",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url(self)",
        "snippet": "    def test_url(self):\n        r = self.request_class(url=\"http://www.scrapy.org/path\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/path\")",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_quoting#92",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_quoting(self)",
        "snippet": "    def test_url_quoting(self):\n        r = self.request_class(url=\"http://www.scrapy.org/blank%20space\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")\n        r = self.request_class(url=\"http://www.scrapy.org/blank space\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_encoding#98",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_encoding(self)",
        "snippet": "    def test_url_encoding(self):\n        r = self.request_class(url=u\"http://www.scrapy.org/price/\u00a3\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_encoding_other#102",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_encoding_other(self)",
        "snippet": "    def test_url_encoding_other(self):\n        # encoding affects only query part of URI, not path\n        # path part should always be UTF-8 encoded before percent-escaping\n        r = self.request_class(url=u\"http://www.scrapy.org/price/\u00a3\", encoding=\"utf-8\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n\n        r = self.request_class(url=u\"http://www.scrapy.org/price/\u00a3\", encoding=\"latin1\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_encoding_query#111",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_encoding_query(self)",
        "snippet": "    def test_url_encoding_query(self):\n        r1 = self.request_class(url=u\"http://www.scrapy.org/price/\u00a3?unit=\u00b5\")\n        self.assertEqual(r1.url, \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\")\n\n        # should be same as above\n        r2 = self.request_class(url=u\"http://www.scrapy.org/price/\u00a3?unit=\u00b5\", encoding=\"utf-8\")\n        self.assertEqual(r2.url, \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\")",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_encoding_query_latin1#119",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_encoding_query_latin1(self)",
        "snippet": "    def test_url_encoding_query_latin1(self):\n        # encoding is used for encoding query-string before percent-escaping;\n        # path is still UTF-8 encoded before percent-escaping\n        r3 = self.request_class(url=u\"http://www.scrapy.org/price/\u00b5?currency=\u00a3\", encoding=\"latin1\")\n        self.assertEqual(r3.url, \"http://www.scrapy.org/price/%C2%B5?currency=%A3\")",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_encoding_nonutf8_untouched#125",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_encoding_nonutf8_untouched(self)",
        "snippet": "    def test_url_encoding_nonutf8_untouched(self):\n        # percent-escaping sequences that do not match valid UTF-8 sequences\n        # should be kept untouched (just upper-cased perhaps)\n        #\n        # See https://tools.ietf.org/html/rfc3987#section-3.2\n        #\n        # \"Conversions from URIs to IRIs MUST NOT use any character encoding\n        # other than UTF-8 in steps 3 and 4, even if it might be possible to\n        # guess from the context that another character encoding than UTF-8 was\n        # used in the URI.  For example, the URI\n        # \"http://www.example.org/r%E9sum%E9.html\" might with some guessing be\n        # interpreted to contain two e-acute characters encoded as iso-8859-1.\n        # It must not be converted to an IRI containing these e-acute\n        # characters.  Otherwise, in the future the IRI will be mapped to\n        # \"http://www.example.org/r%C3%A9sum%C3%A9.html\", which is a different\n        # URI from \"http://www.example.org/r%E9sum%E9.html\".\n        r1 = self.request_class(url=u\"http://www.scrapy.org/price/%a3\")\n        self.assertEqual(r1.url, \"http://www.scrapy.org/price/%a3\")\n\n        r2 = self.request_class(url=u\"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n        self.assertEqual(r2.url, \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n\n        r3 = self.request_class(url=u\"http://www.scrapy.org/r\u00e9sum\u00e9/%a3\")\n        self.assertEqual(r3.url, \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n\n        r4 = self.request_class(url=u\"http://www.example.org/r%E9sum%E9.html\")\n        self.assertEqual(r4.url, \"http://www.example.org/r%E9sum%E9.html\")",
        "begin_line": 125,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_body#153",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_body(self)",
        "snippet": "    def test_body(self):\n        r1 = self.request_class(url=\"http://www.example.com/\")\n        assert r1.body == b''\n\n        r2 = self.request_class(url=\"http://www.example.com/\", body=b\"\")\n        assert isinstance(r2.body, bytes)\n        self.assertEqual(r2.encoding, 'utf-8') # default encoding\n\n        r3 = self.request_class(url=\"http://www.example.com/\", body=u\"Price: \\xa3100\", encoding='utf-8')\n        assert isinstance(r3.body, bytes)\n        self.assertEqual(r3.body, b\"Price: \\xc2\\xa3100\")\n\n        r4 = self.request_class(url=\"http://www.example.com/\", body=u\"Price: \\xa3100\", encoding='latin1')\n        assert isinstance(r4.body, bytes)\n        self.assertEqual(r4.body, b\"Price: \\xa3100\")",
        "begin_line": 153,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_ajax_url#169",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_ajax_url(self)",
        "snippet": "    def test_ajax_url(self):\n        # ascii url\n        r = self.request_class(url=\"http://www.example.com/ajax.html#!key=value\")\n        self.assertEqual(r.url, \"http://www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue\")\n        # unicode url\n        r = self.request_class(url=u\"http://www.example.com/ajax.html#!key=value\")\n        self.assertEqual(r.url, \"http://www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue\")",
        "begin_line": 169,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_copy#177",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        \"\"\"Test Request copy\"\"\"\n\n        def somecallback():\n            pass\n\n        r1 = self.request_class(\"http://www.example.com\", flags=['f1', 'f2'],\n                                callback=somecallback, errback=somecallback)\n        r1.meta['foo'] = 'bar'\n        r1.cb_kwargs['key'] = 'value'\n        r2 = r1.copy()\n\n        # make sure copy does not propagate callbacks\n        assert r1.callback is somecallback\n        assert r1.errback is somecallback\n        assert r2.callback is r1.callback\n        assert r2.errback is r2.errback\n\n        # make sure flags list is shallow copied\n        assert r1.flags is not r2.flags, \"flags must be a shallow copy, not identical\"\n        self.assertEqual(r1.flags, r2.flags)\n\n        # make sure cb_kwargs dict is shallow copied\n        assert r1.cb_kwargs is not r2.cb_kwargs, \"cb_kwargs must be a shallow copy, not identical\"\n        self.assertEqual(r1.cb_kwargs, r2.cb_kwargs)\n\n        # make sure meta dict is shallow copied\n        assert r1.meta is not r2.meta, \"meta must be a shallow copy, not identical\"\n        self.assertEqual(r1.meta, r2.meta)\n\n        # make sure headers attribute is shallow copied\n        assert r1.headers is not r2.headers, \"headers must be a shallow copy, not identical\"\n        self.assertEqual(r1.headers, r2.headers)\n        self.assertEqual(r1.encoding, r2.encoding)\n        self.assertEqual(r1.dont_filter, r2.dont_filter)",
        "begin_line": 177,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.somecallback#180",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.somecallback()",
        "snippet": "        def somecallback():\n            pass",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_copy_inherited_classes#215",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_copy_inherited_classes(self)",
        "snippet": "    def test_copy_inherited_classes(self):\n        \"\"\"Test Request children copies preserve their class\"\"\"\n\n        class CustomRequest(self.request_class):\n            pass\n\n        r1 = CustomRequest('http://www.example.com')\n        r2 = r1.copy()\n\n        assert type(r2) is CustomRequest",
        "begin_line": 215,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.CustomRequest.test_copy_inherited_classes#215",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.CustomRequest",
        "signature": "tests.test_http_request.CustomRequest.test_copy_inherited_classes(self)",
        "snippet": "    def test_copy_inherited_classes(self):\n        \"\"\"Test Request children copies preserve their class\"\"\"\n\n        class CustomRequest(self.request_class):\n            pass\n\n        r1 = CustomRequest('http://www.example.com')\n        r2 = r1.copy()\n\n        assert type(r2) is CustomRequest",
        "begin_line": 215,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_replace#226",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_replace(self)",
        "snippet": "    def test_replace(self):\n        \"\"\"Test Request.replace() method\"\"\"\n        r1 = self.request_class(\"http://www.example.com\", method='GET')\n        hdrs = Headers(r1.headers)\n        hdrs[b'key'] = b'value'\n        r2 = r1.replace(method=\"POST\", body=\"New body\", headers=hdrs)\n        self.assertEqual(r1.url, r2.url)\n        self.assertEqual((r1.method, r2.method), (\"GET\", \"POST\"))\n        self.assertEqual((r1.body, r2.body), (b'', b\"New body\"))\n        self.assertEqual((r1.headers, r2.headers), (self.default_headers, hdrs))\n\n        # Empty attributes (which may fail if not compared properly)\n        r3 = self.request_class(\"http://www.example.com\", meta={'a': 1}, dont_filter=True)\n        r4 = r3.replace(url=\"http://www.example.com/2\", body=b'', meta={}, dont_filter=False)\n        self.assertEqual(r4.url, \"http://www.example.com/2\")\n        self.assertEqual(r4.body, b'')\n        self.assertEqual(r4.meta, {})\n        assert r4.dont_filter is False",
        "begin_line": 226,
        "end_line": 243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_method_always_str#245",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_method_always_str(self)",
        "snippet": "    def test_method_always_str(self):\n        r = self.request_class(\"http://www.example.com\", method=u\"POST\")\n        assert isinstance(r.method, str)",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_immutable_attributes#249",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_immutable_attributes(self)",
        "snippet": "    def test_immutable_attributes(self):\n        r = self.request_class(\"http://example.com\")\n        self.assertRaises(AttributeError, setattr, r, 'url', 'http://example2.com')\n        self.assertRaises(AttributeError, setattr, r, 'body', 'xxx')",
        "begin_line": 249,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_callback_is_callable#254",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_callback_is_callable(self)",
        "snippet": "    def test_callback_is_callable(self):\n        def a_function():\n            pass\n        r = self.request_class('http://example.com')\n        self.assertIsNone(r.callback)\n        r = self.request_class('http://example.com', a_function)\n        self.assertIs(r.callback, a_function)\n        with self.assertRaises(TypeError):\n            self.request_class('http://example.com', 'a_function')",
        "begin_line": 254,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.a_function#255",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.a_function()",
        "snippet": "        def a_function():\n            pass",
        "begin_line": 255,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_errback_is_callable#264",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_errback_is_callable(self)",
        "snippet": "    def test_errback_is_callable(self):\n        def a_function():\n            pass\n        r = self.request_class('http://example.com')\n        self.assertIsNone(r.errback)\n        r = self.request_class('http://example.com', a_function, errback=a_function)\n        self.assertIs(r.errback, a_function)\n        with self.assertRaises(TypeError):\n            self.request_class('http://example.com', a_function, errback='a_function')",
        "begin_line": 264,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.a_function#265",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.a_function()",
        "snippet": "        def a_function():\n            pass",
        "begin_line": 265,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_from_curl#274",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_from_curl(self)",
        "snippet": "    def test_from_curl(self):\n        # Note: more curated tests regarding curl conversion are in\n        # `test_utils_curl.py`\n        curl_command = (\n            \"curl 'http://httpbin.org/post' -X POST -H 'Cookie: _gauges_unique\"\n            \"_year=1; _gauges_unique=1; _gauges_unique_month=1; _gauges_unique\"\n            \"_hour=1; _gauges_unique_day=1' -H 'Origin: http://httpbin.org' -H\"\n            \" 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-US,en;q\"\n            \"=0.9,ru;q=0.8,es;q=0.7' -H 'Upgrade-Insecure-Requests: 1' -H 'Use\"\n            \"r-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTM\"\n            \"L, like Gecko) Ubuntu Chromium/62.0.3202.75 Chrome/62.0.3202.75 S\"\n            \"afari/537.36' -H 'Content-Type: application /x-www-form-urlencode\"\n            \"d' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=\"\n            \"0.9,image/webp,image/apng,*/*;q=0.8' -H 'Cache-Control: max-age=0\"\n            \"' -H 'Referer: http://httpbin.org/forms/post' -H 'Connection: kee\"\n            \"p-alive' --data 'custname=John+Smith&custtel=500&custemail=jsmith\"\n            \"%40example.org&size=small&topping=cheese&topping=onion&delivery=1\"\n            \"2%3A15&comments=' --compressed\"\n        )\n        r = self.request_class.from_curl(curl_command)\n        self.assertEqual(r.method, \"POST\")\n        self.assertEqual(r.url, \"http://httpbin.org/post\")\n        self.assertEqual(r.body,\n                         b\"custname=John+Smith&custtel=500&custemail=jsmith%40\"\n                         b\"example.org&size=small&topping=cheese&topping=onion\"\n                         b\"&delivery=12%3A15&comments=\")\n        self.assertEqual(r.cookies, {\n            '_gauges_unique_year': '1',\n            '_gauges_unique': '1',\n            '_gauges_unique_month': '1',\n            '_gauges_unique_hour': '1',\n            '_gauges_unique_day': '1'\n        })\n        self.assertEqual(r.headers, {\n            b'Origin': [b'http://httpbin.org'],\n            b'Accept-Encoding': [b'gzip, deflate'],\n            b'Accept-Language': [b'en-US,en;q=0.9,ru;q=0.8,es;q=0.7'],\n            b'Upgrade-Insecure-Requests': [b'1'],\n            b'User-Agent': [b'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.'\n                            b'36 (KHTML, like Gecko) Ubuntu Chromium/62.0.3202'\n                            b'.75 Chrome/62.0.3202.75 Safari/537.36'],\n            b'Content-Type': [b'application /x-www-form-urlencoded'],\n            b'Accept': [b'text/html,application/xhtml+xml,application/xml;q=0.'\n                        b'9,image/webp,image/apng,*/*;q=0.8'],\n            b'Cache-Control': [b'max-age=0'],\n            b'Referer': [b'http://httpbin.org/forms/post'],\n            b'Connection': [b'keep-alive']})",
        "begin_line": 274,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_from_curl_with_kwargs#322",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_from_curl_with_kwargs(self)",
        "snippet": "    def test_from_curl_with_kwargs(self):\n        r = self.request_class.from_curl(\n            'curl -X PATCH \"http://example.org\"',\n            method=\"POST\",\n            meta={'key': 'value'}\n        )\n        self.assertEqual(r.method, \"POST\")\n        self.assertEqual(r.meta, {\"key\": \"value\"})",
        "begin_line": 322,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_from_curl_ignore_unknown_options#331",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_from_curl_ignore_unknown_options(self)",
        "snippet": "    def test_from_curl_ignore_unknown_options(self):\n        # By default: it works and ignores the unknown options: --foo and -z\n        with warnings.catch_warnings():  # avoid warning when executing tests\n            warnings.simplefilter('ignore')\n            r = self.request_class.from_curl(\n                'curl -X DELETE \"http://example.org\" --foo -z',\n            )\n            self.assertEqual(r.method, \"DELETE\")\n\n        # If `ignore_unknon_options` is set to `False` it raises an error with\n        # the unknown options: --foo and -z\n        self.assertRaises(\n            ValueError,\n            lambda: self.request_class.from_curl(\n                'curl -X PATCH \"http://example.org\" --foo -z',\n                ignore_unknown_options=False,\n            ),\n        )",
        "begin_line": 331,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.assertQueryEqual#355",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.assertQueryEqual(self, first, second, msg=None)",
        "snippet": "    def assertQueryEqual(self, first, second, msg=None):\n        first = to_native_str(first).split(\"&\")\n        second = to_native_str(second).split(\"&\")\n        return self.assertEqual(sorted(first), sorted(second), msg)",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_empty_formdata#360",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_empty_formdata(self)",
        "snippet": "    def test_empty_formdata(self):\n        r1 = self.request_class(\"http://www.example.com\", formdata={})\n        self.assertEqual(r1.body, b'')",
        "begin_line": 360,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_default_encoding_bytes#364",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_default_encoding_bytes(self)",
        "snippet": "    def test_default_encoding_bytes(self):\n        # using default encoding (utf-8)\n        data = {b'one': b'two', b'price': b'\\xc2\\xa3 100'}\n        r2 = self.request_class(\"http://www.example.com\", formdata=data)\n        self.assertEqual(r2.method, 'POST')\n        self.assertEqual(r2.encoding, 'utf-8')\n        self.assertQueryEqual(r2.body, b'price=%C2%A3+100&one=two')\n        self.assertEqual(r2.headers[b'Content-Type'], b'application/x-www-form-urlencoded')",
        "begin_line": 364,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_default_encoding_textual_data#373",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_default_encoding_textual_data(self)",
        "snippet": "    def test_default_encoding_textual_data(self):\n        # using default encoding (utf-8)\n        data = {u'\u00b5 one': u'two', u'price': u'\u00a3 100'}\n        r2 = self.request_class(\"http://www.example.com\", formdata=data)\n        self.assertEqual(r2.method, 'POST')\n        self.assertEqual(r2.encoding, 'utf-8')\n        self.assertQueryEqual(r2.body, b'price=%C2%A3+100&%C2%B5+one=two')\n        self.assertEqual(r2.headers[b'Content-Type'], b'application/x-www-form-urlencoded')",
        "begin_line": 373,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_default_encoding_mixed_data#382",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_default_encoding_mixed_data(self)",
        "snippet": "    def test_default_encoding_mixed_data(self):\n        # using default encoding (utf-8)\n        data = {u'\\u00b5one': b'two', b'price\\xc2\\xa3': u'\\u00a3 100'}\n        r2 = self.request_class(\"http://www.example.com\", formdata=data)\n        self.assertEqual(r2.method, 'POST')\n        self.assertEqual(r2.encoding, 'utf-8')\n        self.assertQueryEqual(r2.body, b'%C2%B5one=two&price%C2%A3=%C2%A3+100')\n        self.assertEqual(r2.headers[b'Content-Type'], b'application/x-www-form-urlencoded')",
        "begin_line": 382,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_custom_encoding_bytes#391",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_custom_encoding_bytes(self)",
        "snippet": "    def test_custom_encoding_bytes(self):\n        data = {b'\\xb5 one': b'two', b'price': b'\\xa3 100'}\n        r2 = self.request_class(\"http://www.example.com\", formdata=data,\n                                    encoding='latin1')\n        self.assertEqual(r2.method, 'POST')\n        self.assertEqual(r2.encoding, 'latin1')\n        self.assertQueryEqual(r2.body, b'price=%A3+100&%B5+one=two')\n        self.assertEqual(r2.headers[b'Content-Type'], b'application/x-www-form-urlencoded')",
        "begin_line": 391,
        "end_line": 398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_custom_encoding_textual_data#400",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_custom_encoding_textual_data(self)",
        "snippet": "    def test_custom_encoding_textual_data(self):\n        data = {'price': u'\u00a3 100'}\n        r3 = self.request_class(\"http://www.example.com\", formdata=data,\n                                    encoding='latin1')\n        self.assertEqual(r3.encoding, 'latin1')\n        self.assertEqual(r3.body, b'price=%A3+100')",
        "begin_line": 400,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_multi_key_values#407",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_multi_key_values(self)",
        "snippet": "    def test_multi_key_values(self):\n        # using multiples values for a single key\n        data = {'price': u'\\xa3 100', 'colours': ['red', 'blue', 'green']}\n        r3 = self.request_class(\"http://www.example.com\", formdata=data)\n        self.assertQueryEqual(r3.body,\n            b'colours=red&colours=blue&colours=green&price=%C2%A3+100')",
        "begin_line": 407,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_post#414",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_post(self)",
        "snippet": "    def test_from_response_post(self):\n        response = _buildresponse(\n            b\"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(set(fs[b'test']), {b'val1', b'val2'})\n        self.assertEqual(set(fs[b'one']), {b'two', b'three'})\n        self.assertEqual(fs[b'test2'], [b'xxx'])\n        self.assertEqual(fs[b'six'], [b'seven'])",
        "begin_line": 414,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_post_nonascii_bytes_utf8#434",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_post_nonascii_bytes_utf8(self)",
        "snippet": "    def test_from_response_post_nonascii_bytes_utf8(self):\n        response = _buildresponse(\n            b\"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test \\xc2\\xa3\" value=\"val1\">\n            <input type=\"hidden\" name=\"test \\xc2\\xa3\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx \\xc2\\xb5\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req, to_unicode=True)\n        self.assertEqual(set(fs[u'test \u00a3']), {u'val1', u'val2'})\n        self.assertEqual(set(fs[u'one']), {u'two', u'three'})\n        self.assertEqual(fs[u'test2'], [u'xxx \u00b5'])\n        self.assertEqual(fs[u'six'], [u'seven'])",
        "begin_line": 434,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_post_nonascii_bytes_latin1#454",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_post_nonascii_bytes_latin1(self)",
        "snippet": "    def test_from_response_post_nonascii_bytes_latin1(self):\n        response = _buildresponse(\n            b\"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test \\xa3\" value=\"val1\">\n            <input type=\"hidden\" name=\"test \\xa3\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx \\xb5\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\",\n            encoding='latin1',\n            )\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req, to_unicode=True, encoding='latin1')\n        self.assertEqual(set(fs[u'test \u00a3']), {u'val1', u'val2'})\n        self.assertEqual(set(fs[u'one']), {u'two', u'three'})\n        self.assertEqual(fs[u'test2'], [u'xxx \u00b5'])\n        self.assertEqual(fs[u'six'], [u'seven'])",
        "begin_line": 454,
        "end_line": 474,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_post_nonascii_unicode#476",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_post_nonascii_unicode(self)",
        "snippet": "    def test_from_response_post_nonascii_unicode(self):\n        response = _buildresponse(\n            u\"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test \u00a3\" value=\"val1\">\n            <input type=\"hidden\" name=\"test \u00a3\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx \u00b5\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req, to_unicode=True)\n        self.assertEqual(set(fs[u'test \u00a3']), {u'val1', u'val2'})\n        self.assertEqual(set(fs[u'one']), {u'two', u'three'})\n        self.assertEqual(fs[u'test2'], [u'xxx \u00b5'])\n        self.assertEqual(fs[u'six'], [u'seven'])",
        "begin_line": 476,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_duplicate_form_key#496",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_duplicate_form_key(self)",
        "snippet": "    def test_from_response_duplicate_form_key(self):\n        response = _buildresponse(\n                '<form></form>',\n                url='http://www.example.com')\n        req = self.request_class.from_response(response,\n                method='GET',\n                formdata=(('foo', 'bar'), ('foo', 'baz')))\n        self.assertEqual(urlparse(req.url).hostname, 'www.example.com')\n        self.assertEqual(urlparse(req.url).query, 'foo=bar&foo=baz')",
        "begin_line": 496,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_duplicate_form_key#506",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_duplicate_form_key(self)",
        "snippet": "    def test_from_response_override_duplicate_form_key(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            </form>\"\"\")\n        req = self.request_class.from_response(\n            response,\n            formdata=(('two', '2'), ('two', '4')))\n        fs = _qs(req)\n        self.assertEqual(fs[b'one'], [b'1'])\n        self.assertEqual(fs[b'two'], [b'2', b'4'])",
        "begin_line": 506,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_extra_headers#519",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_extra_headers(self)",
        "snippet": "    def test_from_response_extra_headers(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'},\n                headers={\"Accept-Encoding\": \"gzip,deflate\"})\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.headers['Accept-Encoding'], b'gzip,deflate')",
        "begin_line": 519,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_get#533",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_get(self)",
        "snippet": "    def test_from_response_get(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        r1 = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n        self.assertEqual(r1.method, 'GET')\n        self.assertEqual(urlparse(r1.url).hostname, \"www.example.com\")\n        self.assertEqual(urlparse(r1.url).path, \"/this/get.php\")\n        fs = _qs(r1)\n        self.assertEqual(set(fs[b'test']), set([b'val1', b'val2']))\n        self.assertEqual(set(fs[b'one']), set([b'two', b'three']))\n        self.assertEqual(fs[b'test2'], [b'xxx'])\n        self.assertEqual(fs[b'six'], [b'seven'])",
        "begin_line": 533,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_params#552",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_params(self)",
        "snippet": "    def test_from_response_override_params(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': '2'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'one'], [b'1'])\n        self.assertEqual(fs[b'two'], [b'2'])",
        "begin_line": 552,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_drop_params#563",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_drop_params(self)",
        "snippet": "    def test_from_response_drop_params(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': None})\n        fs = _qs(req)\n        self.assertEqual(fs[b'one'], [b'1'])\n        self.assertNotIn(b'two', fs)",
        "begin_line": 563,
        "end_line": 572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_method#574",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_method(self)",
        "snippet": "    def test_from_response_override_method(self):\n        response = _buildresponse(\n                '''<html><body>\n                <form action=\"/app\"></form>\n                </body></html>''')\n        request = FormRequest.from_response(response)\n        self.assertEqual(request.method, 'GET')\n        request = FormRequest.from_response(response, method='POST')\n        self.assertEqual(request.method, 'POST')",
        "begin_line": 574,
        "end_line": 582,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_url#584",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_url(self)",
        "snippet": "    def test_from_response_override_url(self):\n        response = _buildresponse(\n                '''<html><body>\n                <form action=\"/app\"></form>\n                </body></html>''')\n        request = FormRequest.from_response(response)\n        self.assertEqual(request.url, 'http://example.com/app')\n        request = FormRequest.from_response(response, url='http://foo.bar/absolute')\n        self.assertEqual(request.url, 'http://foo.bar/absolute')\n        request = FormRequest.from_response(response, url='/relative')\n        self.assertEqual(request.url, 'http://example.com/relative')",
        "begin_line": 584,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_case_insensitive#596",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_case_insensitive(self)",
        "snippet": "    def test_from_response_case_insensitive(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"SuBmIt\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"iMaGe\" name=\"i1\" src=\"http://my.image.org/1.jpg\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response)\n        fs = _qs(req)\n        self.assertEqual(fs[b'clickable1'], [b'clicked1'])\n        self.assertFalse(b'i1' in fs, fs)  # xpath in _get_inputs()\n        self.assertFalse(b'clickable2' in fs, fs)  # xpath in _get_clickable()",
        "begin_line": 596,
        "end_line": 607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_submit_first_clickable#609",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_submit_first_clickable(self)",
        "snippet": "    def test_from_response_submit_first_clickable(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': '2'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'clickable1'], [b'clicked1'])\n        self.assertFalse(b'clickable2' in fs, fs)\n        self.assertEqual(fs[b'one'], [b'1'])\n        self.assertEqual(fs[b'two'], [b'2'])",
        "begin_line": 609,
        "end_line": 622,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_submit_not_first_clickable#624",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_submit_not_first_clickable(self)",
        "snippet": "    def test_from_response_submit_not_first_clickable(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': '2'}, \\\n                                              clickdata={'name': 'clickable2'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'clickable2'], [b'clicked2'])\n        self.assertFalse(b'clickable1' in fs, fs)\n        self.assertEqual(fs[b'one'], [b'1'])\n        self.assertEqual(fs[b'two'], [b'2'])",
        "begin_line": 624,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_image_as_input#640",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_image_as_input(self)",
        "snippet": "    def test_from_response_dont_submit_image_as_input(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"hidden\" name=\"i1\" value=\"i1v\">\n            <input type=\"image\" name=\"i2\" src=\"http://my.image.org/1.jpg\">\n            <input type=\"submit\" name=\"i3\" value=\"i3v\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, dont_click=True)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v']})",
        "begin_line": 640,
        "end_line": 649,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_reset_as_input#651",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_reset_as_input(self)",
        "snippet": "    def test_from_response_dont_submit_reset_as_input(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"hidden\" name=\"i1\" value=\"i1v\">\n            <input type=\"text\" name=\"i2\" value=\"i2v\">\n            <input type=\"reset\" name=\"resetme\">\n            <input type=\"submit\" name=\"i3\" value=\"i3v\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, dont_click=True)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v'], b'i2': [b'i2v']})",
        "begin_line": 651,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_clickdata_does_not_ignore_image#663",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_clickdata_does_not_ignore_image(self)",
        "snippet": "    def test_from_response_clickdata_does_not_ignore_image(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"text\" name=\"i1\" value=\"i1v\">\n            <input id=\"image\" name=\"i2\" type=\"image\" value=\"i2v\" alt=\"Login\" src=\"http://my.image.org/1.jpg\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v'], b'i2': [b'i2v']})",
        "begin_line": 663,
        "end_line": 671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_multiple_clickdata#673",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_multiple_clickdata(self)",
        "snippet": "    def test_from_response_multiple_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n            <input type=\"hidden\" name=\"one\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"two\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, \\\n                clickdata={u'name': u'clickable', u'value': u'clicked2'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'clickable'], [b'clicked2'])\n        self.assertEqual(fs[b'one'], [b'clicked1'])\n        self.assertEqual(fs[b'two'], [b'clicked2'])",
        "begin_line": 673,
        "end_line": 686,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_unicode_clickdata#688",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_unicode_clickdata(self)",
        "snippet": "    def test_from_response_unicode_clickdata(self):\n        response = _buildresponse(\n            u\"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"price in \\u00a3\" value=\"\\u00a3 1000\">\n            <input type=\"submit\" name=\"price in \\u20ac\" value=\"\\u20ac 2000\">\n            <input type=\"hidden\" name=\"poundsign\" value=\"\\u00a3\">\n            <input type=\"hidden\" name=\"eurosign\" value=\"\\u20ac\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, \\\n                clickdata={u'name': u'price in \\u00a3'})\n        fs = _qs(req, to_unicode=True)\n        self.assertTrue(fs[u'price in \\u00a3'])",
        "begin_line": 688,
        "end_line": 699,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_unicode_clickdata_latin1#701",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_unicode_clickdata_latin1(self)",
        "snippet": "    def test_from_response_unicode_clickdata_latin1(self):\n        response = _buildresponse(\n            u\"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"price in \\u00a3\" value=\"\\u00a3 1000\">\n            <input type=\"submit\" name=\"price in \\u00a5\" value=\"\\u00a5 2000\">\n            <input type=\"hidden\" name=\"poundsign\" value=\"\\u00a3\">\n            <input type=\"hidden\" name=\"yensign\" value=\"\\u00a5\">\n            </form>\"\"\",\n            encoding='latin1')\n        req = self.request_class.from_response(response, \\\n                clickdata={u'name': u'price in \\u00a5'})\n        fs = _qs(req, to_unicode=True, encoding='latin1')\n        self.assertTrue(fs[u'price in \\u00a5'])",
        "begin_line": 701,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_multiple_forms_clickdata#715",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_multiple_forms_clickdata(self)",
        "snippet": "    def test_from_response_multiple_forms_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form name=\"form1\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"field1\" value=\"value1\">\n            </form>\n            <form name=\"form2\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n            <input type=\"hidden\" name=\"field2\" value=\"value2\">\n            </form>\n            \"\"\")\n        req = self.request_class.from_response(response, formname='form2', \\\n                clickdata={u'name': u'clickable'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'clickable'], [b'clicked2'])\n        self.assertEqual(fs[b'field2'], [b'value2'])\n        self.assertFalse(b'field1' in fs, fs)",
        "begin_line": 715,
        "end_line": 731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_clickable#733",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_clickable(self)",
        "snippet": "    def test_from_response_override_clickable(self):\n        response = _buildresponse('''<form><input type=\"submit\" name=\"clickme\" value=\"one\"> </form>''')\n        req = self.request_class.from_response(response, \\\n                formdata={'clickme': 'two'}, clickdata={'name': 'clickme'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'clickme'], [b'two'])",
        "begin_line": 733,
        "end_line": 738,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_dont_click#740",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_dont_click(self)",
        "snippet": "    def test_from_response_dont_click(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, dont_click=True)\n        fs = _qs(r1)\n        self.assertFalse(b'clickable1' in fs, fs)\n        self.assertFalse(b'clickable2' in fs, fs)",
        "begin_line": 740,
        "end_line": 751,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_ambiguous_clickdata#753",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_ambiguous_clickdata(self)",
        "snippet": "    def test_from_response_ambiguous_clickdata(self):\n        response = _buildresponse(\n            \"\"\"\n            <form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, clickdata={'type': 'submit'})",
        "begin_line": 753,
        "end_line": 763,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_non_matching_clickdata#765",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_non_matching_clickdata(self)",
        "snippet": "    def test_from_response_non_matching_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n            </form>\"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, clickdata={'nonexistent': 'notme'})",
        "begin_line": 765,
        "end_line": 771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_nr_index_clickdata#773",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_nr_index_clickdata(self)",
        "snippet": "    def test_from_response_nr_index_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\n            \"\"\")\n        req = self.request_class.from_response(response, clickdata={'nr': 1})\n        fs = _qs(req)\n        self.assertIn(b'clickable2', fs)\n        self.assertNotIn(b'clickable1', fs)",
        "begin_line": 773,
        "end_line": 783,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_invalid_nr_index_clickdata#785",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_invalid_nr_index_clickdata(self)",
        "snippet": "    def test_from_response_invalid_nr_index_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n            </form>\n            \"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, clickdata={'nr': 1})",
        "begin_line": 785,
        "end_line": 792,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_errors_noform#794",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_errors_noform(self)",
        "snippet": "    def test_from_response_errors_noform(self):\n        response = _buildresponse(\"\"\"<html></html>\"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response, response)",
        "begin_line": 794,
        "end_line": 796,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_invalid_html5#798",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_invalid_html5(self)",
        "snippet": "    def test_from_response_invalid_html5(self):\n        response = _buildresponse(\"\"\"<!DOCTYPE html><body></html><form>\"\"\"\n                                  \"\"\"<input type=\"text\" name=\"foo\" value=\"xxx\">\"\"\"\n                                  \"\"\"</form></body></html>\"\"\")\n        req = self.request_class.from_response(response, formdata={'bar': 'buz'})\n        fs = _qs(req)\n        self.assertEqual(fs, {b'foo': [b'xxx'], b'bar': [b'buz']})",
        "begin_line": 798,
        "end_line": 804,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_errors_formnumber#806",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_errors_formnumber(self)",
        "snippet": "    def test_from_response_errors_formnumber(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\")\n        self.assertRaises(IndexError, self.request_class.from_response, response, formnumber=1)",
        "begin_line": 806,
        "end_line": 813,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_noformname#815",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_noformname(self)",
        "snippet": "    def test_from_response_noformname(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formdata={'two':'3'})\n        self.assertEqual(r1.method, 'POST')\n        self.assertEqual(r1.headers['Content-type'], b'application/x-www-form-urlencoded')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'one': [b'1'], b'two': [b'3']})",
        "begin_line": 815,
        "end_line": 825,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_exists#827",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_exists(self)",
        "snippet": "    def test_from_response_formname_exists(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formname=\"form2\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'four': [b'4'], b'three': [b'3']})",
        "begin_line": 827,
        "end_line": 840,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexist#842",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexist(self)",
        "snippet": "    def test_from_response_formname_notexist(self):\n        response = _buildresponse(\n            \"\"\"<form name=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formname=\"form3\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'one': [b'1']})",
        "begin_line": 842,
        "end_line": 853,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_errors_formnumber#855",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_errors_formnumber(self)",
        "snippet": "    def test_from_response_formname_errors_formnumber(self):\n        response = _buildresponse(\n            \"\"\"<form name=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        self.assertRaises(IndexError, self.request_class.from_response, \\\n                          response, formname=\"form3\", formnumber=2)",
        "begin_line": 855,
        "end_line": 864,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formid_exists#866",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formid_exists(self)",
        "snippet": "    def test_from_response_formid_exists(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form id=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formid=\"form2\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'four': [b'4'], b'three': [b'3']})",
        "begin_line": 866,
        "end_line": 879,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexists_fallback_formid#881",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexists_fallback_formid(self)",
        "snippet": "    def test_from_response_formname_notexists_fallback_formid(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form id=\"form2\" name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formname=\"form3\", formid=\"form2\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'four': [b'4'], b'three': [b'3']})",
        "begin_line": 881,
        "end_line": 894,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formid_notexist#896",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formid_notexist(self)",
        "snippet": "    def test_from_response_formid_notexist(self):\n        response = _buildresponse(\n            \"\"\"<form id=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form id=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formid=\"form3\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'one': [b'1']})",
        "begin_line": 896,
        "end_line": 907,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formid_errors_formnumber#909",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formid_errors_formnumber(self)",
        "snippet": "    def test_from_response_formid_errors_formnumber(self):\n        response = _buildresponse(\n            \"\"\"<form id=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form id=\"form2\" name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        self.assertRaises(IndexError, self.request_class.from_response, \\\n                          response, formid=\"form3\", formnumber=2)",
        "begin_line": 909,
        "end_line": 918,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_select#920",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_select(self)",
        "snippet": "    def test_from_response_select(self):\n        res = _buildresponse(\n            '''<form>\n            <select name=\"i1\">\n                <option value=\"i1v1\">option 1</option>\n                <option value=\"i1v2\" selected>option 2</option>\n            </select>\n            <select name=\"i2\">\n                <option value=\"i2v1\">option 1</option>\n                <option value=\"i2v2\">option 2</option>\n            </select>\n            <select>\n                <option value=\"i3v1\">option 1</option>\n                <option value=\"i3v2\">option 2</option>\n            </select>\n            <select name=\"i4\" multiple>\n                <option value=\"i4v1\">option 1</option>\n                <option value=\"i4v2\" selected>option 2</option>\n                <option value=\"i4v3\" selected>option 3</option>\n            </select>\n            <select name=\"i5\" multiple>\n                <option value=\"i5v1\">option 1</option>\n                <option value=\"i5v2\">option 2</option>\n            </select>\n            <select name=\"i6\"></select>\n            <select name=\"i7\"/>\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req, to_unicode=True)\n        self.assertEqual(fs, {'i1': ['i1v2'], 'i2': ['i2v1'], 'i4': ['i4v2', 'i4v3']})",
        "begin_line": 920,
        "end_line": 949,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_radio#951",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_radio(self)",
        "snippet": "    def test_from_response_radio(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"radio\" name=\"i1\" value=\"i1v1\">\n            <input type=\"radio\" name=\"i1\" value=\"iv2\" checked>\n            <input type=\"radio\" name=\"i2\" checked>\n            <input type=\"radio\" name=\"i2\">\n            <input type=\"radio\" name=\"i3\" value=\"i3v1\">\n            <input type=\"radio\" name=\"i3\">\n            <input type=\"radio\" value=\"i4v1\">\n            <input type=\"radio\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'iv2'], b'i2': [b'on']})",
        "begin_line": 951,
        "end_line": 965,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_checkbox#967",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_checkbox(self)",
        "snippet": "    def test_from_response_checkbox(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"checkbox\" name=\"i1\" value=\"i1v1\">\n            <input type=\"checkbox\" name=\"i1\" value=\"iv2\" checked>\n            <input type=\"checkbox\" name=\"i2\" checked>\n            <input type=\"checkbox\" name=\"i2\">\n            <input type=\"checkbox\" name=\"i3\" value=\"i3v1\">\n            <input type=\"checkbox\" name=\"i3\">\n            <input type=\"checkbox\" value=\"i4v1\">\n            <input type=\"checkbox\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'iv2'], b'i2': [b'on']})",
        "begin_line": 967,
        "end_line": 981,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_input_text#983",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_input_text(self)",
        "snippet": "    def test_from_response_input_text(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"text\" name=\"i1\" value=\"i1v1\">\n            <input type=\"text\" name=\"i2\">\n            <input type=\"text\" value=\"i3v1\">\n            <input type=\"text\">\n            <input name=\"i4\" value=\"i4v1\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v1'], b'i2': [b''], b'i4': [b'i4v1']})",
        "begin_line": 983,
        "end_line": 994,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_input_hidden#996",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_input_hidden(self)",
        "snippet": "    def test_from_response_input_hidden(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"hidden\" name=\"i1\" value=\"i1v1\">\n            <input type=\"hidden\" name=\"i2\">\n            <input type=\"hidden\" value=\"i3v1\">\n            <input type=\"hidden\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v1'], b'i2': [b'']})",
        "begin_line": 996,
        "end_line": 1006,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_input_textarea#1008",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_input_textarea(self)",
        "snippet": "    def test_from_response_input_textarea(self):\n        res = _buildresponse(\n            '''<form>\n            <textarea name=\"i1\">i1v</textarea>\n            <textarea name=\"i2\"></textarea>\n            <textarea name=\"i3\"/>\n            <textarea>i4v</textarea>\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v'], b'i2': [b''], b'i3': [b'']})",
        "begin_line": 1008,
        "end_line": 1018,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_descendants#1020",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_descendants(self)",
        "snippet": "    def test_from_response_descendants(self):\n        res = _buildresponse(\n            '''<form>\n            <div>\n              <fieldset>\n                <input type=\"text\" name=\"i1\">\n                <select name=\"i2\">\n                    <option value=\"v1\" selected>\n                </select>\n              </fieldset>\n              <input type=\"radio\" name=\"i3\" value=\"i3v2\" checked>\n              <input type=\"checkbox\" name=\"i4\" value=\"i4v2\" checked>\n              <textarea name=\"i5\"></textarea>\n              <input type=\"hidden\" name=\"h1\" value=\"h1v\">\n              </div>\n            <input type=\"hidden\" name=\"h2\" value=\"h2v\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(set(fs), set([b'h2', b'i2', b'i1', b'i3', b'h1', b'i5', b'i4']))",
        "begin_line": 1020,
        "end_line": 1039,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_xpath#1041",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_xpath(self)",
        "snippet": "    def test_from_response_xpath(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form action=\"post2.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formxpath=\"//form[@action='post.php']\")\n        fs = _qs(r1)\n        self.assertEqual(fs[b'one'], [b'1'])\n\n        r1 = self.request_class.from_response(response, formxpath=\"//form/input[@name='four']\")\n        fs = _qs(r1)\n        self.assertEqual(fs[b'three'], [b'3'])\n\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, formxpath=\"//form/input[@name='abc']\")",
        "begin_line": 1041,
        "end_line": 1060,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_unicode_xpath#1062",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_unicode_xpath(self)",
        "snippet": "    def test_from_response_unicode_xpath(self):\n        response = _buildresponse(b'<form name=\"\\xd1\\x8a\"></form>')\n        r = self.request_class.from_response(response, formxpath=u\"//form[@name='\\u044a']\")\n        fs = _qs(r)\n        self.assertEqual(fs, {})\n\n        xpath = u\"//form[@name='\\u03b1']\"\n        encoded = xpath if six.PY3 else xpath.encode('unicode_escape')\n        self.assertRaisesRegex(ValueError, re.escape(encoded),\n                               self.request_class.from_response,\n                               response, formxpath=xpath)",
        "begin_line": 1062,
        "end_line": 1072,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_button_submit#1074",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_button_submit(self)",
        "snippet": "    def test_from_response_button_submit(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <button type=\"submit\" name=\"button1\" value=\"submit1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b'submit1'])",
        "begin_line": 1074,
        "end_line": 1089,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_button_notype#1091",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_button_notype(self)",
        "snippet": "    def test_from_response_button_notype(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <button name=\"button1\" value=\"submit1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b'submit1'])",
        "begin_line": 1091,
        "end_line": 1106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_submit_novalue#1108",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_submit_novalue(self)",
        "snippet": "    def test_from_response_submit_novalue(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <input type=\"submit\" name=\"button1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b''])",
        "begin_line": 1108,
        "end_line": 1123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_button_novalue#1125",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_button_novalue(self)",
        "snippet": "    def test_from_response_button_novalue(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <button type=\"submit\" name=\"button1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b''])",
        "begin_line": 1125,
        "end_line": 1140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_html_base_form_action#1142",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_html_base_form_action(self)",
        "snippet": "    def test_html_base_form_action(self):\n        response = _buildresponse(\n            \"\"\"\n            <html>\n                <head>\n                    <base href=\" http://b.com/\">\n                </head>\n                <body>\n                    <form action=\"test_form\">\n                    </form>\n                </body>\n            </html>\n            \"\"\",\n            url='http://a.com/'\n        )\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.url, 'http://b.com/test_form')",
        "begin_line": 1142,
        "end_line": 1158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_spaces_in_action#1160",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_spaces_in_action(self)",
        "snippet": "    def test_spaces_in_action(self):\n        resp = _buildresponse('<body><form action=\" path\\n\"></form></body>')\n        req = self.request_class.from_response(resp)\n        self.assertEqual(req.url, 'http://example.com/path')",
        "begin_line": 1160,
        "end_line": 1163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_css#1165",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_css(self)",
        "snippet": "    def test_from_response_css(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form action=\"post2.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formcss=\"form[action='post.php']\")\n        fs = _qs(r1)\n        self.assertEqual(fs[b'one'], [b'1'])\n\n        r1 = self.request_class.from_response(response, formcss=\"input[name='four']\")\n        fs = _qs(r1)\n        self.assertEqual(fs[b'three'], [b'3'])\n\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, formcss=\"input[name='abc']\")",
        "begin_line": 1165,
        "end_line": 1184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_valid_form_methods#1186",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_valid_form_methods(self)",
        "snippet": "    def test_from_response_valid_form_methods(self):\n        body = \"\"\"<form action=\"post.php\" method=\"%s\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\"\"\"\n\n        for method in self.request_class.valid_form_methods:\n            response = _buildresponse(body % method)\n            r = self.request_class.from_response(response)\n            self.assertEqual(r.method, method)\n\n        response = _buildresponse(body % 'UNKNOWN')\n        r = self.request_class.from_response(response)\n        self.assertEqual(r.method, 'GET')",
        "begin_line": 1186,
        "end_line": 1198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request._buildresponse#1201",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request",
        "signature": "tests.test_http_request._buildresponse(body, **kwargs)",
        "snippet": "def _buildresponse(body, **kwargs):\n    kwargs.setdefault('body', body)\n    kwargs.setdefault('url', 'http://example.com')\n    kwargs.setdefault('encoding', 'utf-8')\n    return HtmlResponse(**kwargs)",
        "begin_line": 1201,
        "end_line": 1205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request._qs#1208",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request",
        "signature": "tests.test_http_request._qs(req, encoding='utf-8', to_unicode=False)",
        "snippet": "def _qs(req, encoding='utf-8', to_unicode=False):\n    if req.method == 'POST':\n        qs = req.body\n    else:\n        qs = req.url.partition('?')[2]\n    if six.PY2:\n        uqs = unquote(to_native_str(qs, encoding))\n    elif six.PY3:\n        uqs = unquote_to_bytes(qs)\n    if to_unicode:\n        uqs = uqs.decode(encoding)\n    return parse_qs(uqs, True)",
        "begin_line": 1208,
        "end_line": 1219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.XmlRpcRequestTest._test_request#1228",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.XmlRpcRequestTest",
        "signature": "tests.test_http_request.XmlRpcRequestTest._test_request(self, **kwargs)",
        "snippet": "    def _test_request(self, **kwargs):\n        r = self.request_class('http://scrapytest.org/rpc2', **kwargs)\n        self.assertEqual(r.headers[b'Content-Type'], b'text/xml')\n        self.assertEqual(r.body,\n                         to_bytes(xmlrpclib.dumps(**kwargs),\n                                  encoding=kwargs.get('encoding', 'utf-8')))\n        self.assertEqual(r.method, 'POST')\n        self.assertEqual(r.encoding, kwargs.get('encoding', 'utf-8'))\n        self.assertTrue(r.dont_filter, True)",
        "begin_line": 1228,
        "end_line": 1236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.XmlRpcRequestTest.test_xmlrpc_dumps#1238",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.XmlRpcRequestTest",
        "signature": "tests.test_http_request.XmlRpcRequestTest.test_xmlrpc_dumps(self)",
        "snippet": "    def test_xmlrpc_dumps(self):\n        self._test_request(params=('value',))\n        self._test_request(params=('username', 'password'), methodname='login')\n        self._test_request(params=('response', ), methodresponse='login')\n        self._test_request(params=(u'pas\u00a3',), encoding='utf-8')\n        self._test_request(params=(None,), allow_none=1)\n        self.assertRaises(TypeError, self._test_request)\n        self.assertRaises(TypeError, self._test_request, params=(None,))",
        "begin_line": 1238,
        "end_line": 1245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.XmlRpcRequestTest.test_latin1#1247",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.XmlRpcRequestTest",
        "signature": "tests.test_http_request.XmlRpcRequestTest.test_latin1(self)",
        "snippet": "    def test_latin1(self):\n        self._test_request(params=(u'pas\u00a3',), encoding='latin1')",
        "begin_line": 1247,
        "end_line": 1248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.setUp#1256",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.setUp(self)",
        "snippet": "    def setUp(self):\n        warnings.simplefilter(\"always\")\n        super(JsonRequestTest, self).setUp()",
        "begin_line": 1256,
        "end_line": 1258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_data#1260",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_data(self)",
        "snippet": "    def test_data(self):\n        r1 = self.request_class(url=\"http://www.example.com/\")\n        self.assertEqual(r1.body, b'')\n\n        body = b'body'\n        r2 = self.request_class(url=\"http://www.example.com/\", body=body)\n        self.assertEqual(r2.body, body)\n\n        data = {\n            'name': 'value',\n        }\n        r3 = self.request_class(url=\"http://www.example.com/\", data=data)\n        self.assertEqual(r3.body, to_bytes(json.dumps(data)))\n\n        # empty data\n        r4 = self.request_class(url=\"http://www.example.com/\", data=[])\n        self.assertEqual(r4.body, to_bytes(json.dumps([])))",
        "begin_line": 1260,
        "end_line": 1276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_data_method#1278",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_data_method(self)",
        "snippet": "    def test_data_method(self):\n        # data is not passed\n        r1 = self.request_class(url=\"http://www.example.com/\")\n        self.assertEqual(r1.method, 'GET')\n\n        body = b'body'\n        r2 = self.request_class(url=\"http://www.example.com/\", body=body)\n        self.assertEqual(r2.method, 'GET')\n\n        data = {\n            'name': 'value',\n        }\n        r3 = self.request_class(url=\"http://www.example.com/\", data=data)\n        self.assertEqual(r3.method, 'POST')\n\n        # method passed explicitly\n        r4 = self.request_class(url=\"http://www.example.com/\", data=data, method='GET')\n        self.assertEqual(r4.method, 'GET')\n\n        r5 = self.request_class(url=\"http://www.example.com/\", data=[])\n        self.assertEqual(r5.method, 'POST')",
        "begin_line": 1278,
        "end_line": 1298,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_body_data#1300",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_body_data(self)",
        "snippet": "    def test_body_data(self):\n        \"\"\" passing both body and data should result a warning \"\"\"\n        body = b'body'\n        data = {\n            'name': 'value',\n        }\n        with warnings.catch_warnings(record=True) as _warnings:\n            r5 = self.request_class(url=\"http://www.example.com/\", body=body, data=data)\n            self.assertEqual(r5.body, body)\n            self.assertEqual(r5.method, 'GET')\n            self.assertEqual(len(_warnings), 1)\n            self.assertIn('data will be ignored', str(_warnings[0].message))",
        "begin_line": 1300,
        "end_line": 1311,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_empty_body_data#1313",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_empty_body_data(self)",
        "snippet": "    def test_empty_body_data(self):\n        \"\"\" passing any body value and data should result a warning \"\"\"\n        data = {\n            'name': 'value',\n        }\n        with warnings.catch_warnings(record=True) as _warnings:\n            r6 = self.request_class(url=\"http://www.example.com/\", body=b'', data=data)\n            self.assertEqual(r6.body, b'')\n            self.assertEqual(r6.method, 'GET')\n            self.assertEqual(len(_warnings), 1)\n            self.assertIn('data will be ignored', str(_warnings[0].message))",
        "begin_line": 1313,
        "end_line": 1323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_body_none_data#1325",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_body_none_data(self)",
        "snippet": "    def test_body_none_data(self):\n        data = {\n            'name': 'value',\n        }\n        with warnings.catch_warnings(record=True) as _warnings:\n            r7 = self.request_class(url=\"http://www.example.com/\", body=None, data=data)\n            self.assertEqual(r7.body, to_bytes(json.dumps(data)))\n            self.assertEqual(r7.method, 'POST')\n            self.assertEqual(len(_warnings), 0)",
        "begin_line": 1325,
        "end_line": 1333,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_body_data_none#1335",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_body_data_none(self)",
        "snippet": "    def test_body_data_none(self):\n        with warnings.catch_warnings(record=True) as _warnings:\n            r8 = self.request_class(url=\"http://www.example.com/\", body=None, data=None)\n            self.assertEqual(r8.method, 'GET')\n            self.assertEqual(len(_warnings), 0)",
        "begin_line": 1335,
        "end_line": 1339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_dumps_sort_keys#1341",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_dumps_sort_keys(self)",
        "snippet": "    def test_dumps_sort_keys(self):\n        \"\"\" Test that sort_keys=True is passed to json.dumps by default \"\"\"\n        data = {\n            'name': 'value',\n        }\n        with mock.patch('json.dumps', return_value=b'') as mock_dumps:\n            self.request_class(url=\"http://www.example.com/\", data=data)\n            kwargs = mock_dumps.call_args[1]\n            self.assertEqual(kwargs['sort_keys'], True)",
        "begin_line": 1341,
        "end_line": 1349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_dumps_kwargs#1351",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_dumps_kwargs(self)",
        "snippet": "    def test_dumps_kwargs(self):\n        \"\"\" Test that dumps_kwargs are passed to json.dumps \"\"\"\n        data = {\n            'name': 'value',\n        }\n        dumps_kwargs = {\n            'ensure_ascii': True,\n            'allow_nan': True,\n        }\n        with mock.patch('json.dumps', return_value=b'') as mock_dumps:\n            self.request_class(url=\"http://www.example.com/\", data=data, dumps_kwargs=dumps_kwargs)\n            kwargs = mock_dumps.call_args[1]\n            self.assertEqual(kwargs['ensure_ascii'], True)\n            self.assertEqual(kwargs['allow_nan'], True)",
        "begin_line": 1351,
        "end_line": 1364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_replace_data#1366",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_replace_data(self)",
        "snippet": "    def test_replace_data(self):\n        data1 = {\n            'name1': 'value1',\n        }\n        data2 = {\n            'name2': 'value2',\n        }\n        r1 = self.request_class(url=\"http://www.example.com/\", data=data1)\n        r2 = r1.replace(data=data2)\n        self.assertEqual(r2.body, to_bytes(json.dumps(data2)))",
        "begin_line": 1366,
        "end_line": 1375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_replace_sort_keys#1377",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_replace_sort_keys(self)",
        "snippet": "    def test_replace_sort_keys(self):\n        \"\"\" Test that replace provides sort_keys=True to json.dumps \"\"\"\n        data1 = {\n            'name1': 'value1',\n        }\n        data2 = {\n            'name2': 'value2',\n        }\n        r1 = self.request_class(url=\"http://www.example.com/\", data=data1)\n        with mock.patch('json.dumps', return_value=b'') as mock_dumps:\n            r1.replace(data=data2)\n            kwargs = mock_dumps.call_args[1]\n            self.assertEqual(kwargs['sort_keys'], True)",
        "begin_line": 1377,
        "end_line": 1389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.test_replace_dumps_kwargs#1391",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.test_replace_dumps_kwargs(self)",
        "snippet": "    def test_replace_dumps_kwargs(self):\n        \"\"\" Test that dumps_kwargs are provided to json.dumps when replace is called \"\"\"\n        data1 = {\n            'name1': 'value1',\n        }\n        data2 = {\n            'name2': 'value2',\n        }\n        dumps_kwargs = {\n            'ensure_ascii': True,\n            'allow_nan': True,\n        }\n        r1 = self.request_class(url=\"http://www.example.com/\", data=data1, dumps_kwargs=dumps_kwargs)\n        with mock.patch('json.dumps', return_value=b'') as mock_dumps:\n            r1.replace(data=data2)\n            kwargs = mock_dumps.call_args[1]\n            self.assertEqual(kwargs['ensure_ascii'], True)\n            self.assertEqual(kwargs['allow_nan'], True)",
        "begin_line": 1391,
        "end_line": 1408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.JsonRequestTest.tearDown#1410",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.JsonRequestTest",
        "signature": "tests.test_http_request.JsonRequestTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        warnings.resetwarnings()\n        super(JsonRequestTest, self).tearDown()",
        "begin_line": 1410,
        "end_line": 1412,
        "comment": "",
        "is_bug": false
    }
]