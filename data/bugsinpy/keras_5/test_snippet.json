[
    {
        "name": "tests.keras.utils.data_utils_test.use_spawn#38",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.use_spawn(func)",
        "snippet": "def use_spawn(func):\n    \"\"\"Decorator which uses `spawn` when possible.\n    This is useful on Travis to avoid memory issues.\n    \"\"\"\n\n    @six.wraps(func)\n    def wrapper(*args, **kwargs):\n        if sys.version_info > (3, 4) and os.name != 'nt':\n            mp.set_start_method('spawn', force=True)\n            out = func(*args, **kwargs)\n            mp.set_start_method('fork', force=True)\n        else:\n            out = func(*args, **kwargs)\n        return out\n\n    return wrapper",
        "begin_line": 38,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.wrapper#44",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.wrapper(*args, **kwargs)",
        "snippet": "    def wrapper(*args, **kwargs):\n        if sys.version_info > (3, 4) and os.name != 'nt':\n            mp.set_start_method('spawn', force=True)\n            out = func(*args, **kwargs)\n            mp.set_start_method('fork', force=True)\n        else:\n            out = func(*args, **kwargs)\n        return out",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.next#57",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.next(x)",
        "snippet": "    def next(x):\n        return x.next()",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.in_tmpdir#62",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.in_tmpdir(tmpdir)",
        "snippet": "def in_tmpdir(tmpdir):\n    \"\"\"Runs a function in a temporary directory.\n\n    Checks that the directory is empty afterwards.\n    \"\"\"\n    with tmpdir.as_cwd():\n        yield None\n    assert not tmpdir.listdir()",
        "begin_line": 62,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_data_utils#72",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_data_utils(in_tmpdir)",
        "snippet": "def test_data_utils(in_tmpdir):\n    \"\"\"Tests get_file from a url, plus extraction and validation.\n    \"\"\"\n    dirname = 'data_utils'\n\n    with open('test.txt', 'w') as text_file:\n        text_file.write('Float like a butterfly, sting like a bee.')\n\n    with tarfile.open('test.tar.gz', 'w:gz') as tar_file:\n        tar_file.add('test.txt')\n\n    with zipfile.ZipFile('test.zip', 'w') as zip_file:\n        zip_file.write('test.txt')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.tar.gz')))\n\n    path = get_file(dirname, origin, untar=True)\n    filepath = path + '.tar.gz'\n    data_keras_home = os.path.dirname(os.path.dirname(os.path.abspath(filepath)))\n    assert data_keras_home == os.path.dirname(K._config_path)\n    os.remove(filepath)\n\n    _keras_home = os.path.join(os.path.abspath('.'), '.keras')\n    if not os.path.exists(_keras_home):\n        os.makedirs(_keras_home)\n    os.environ['KERAS_HOME'] = _keras_home\n    reload_module(K)\n    path = get_file(dirname, origin, untar=True)\n    filepath = path + '.tar.gz'\n    data_keras_home = os.path.dirname(os.path.dirname(os.path.abspath(filepath)))\n    assert data_keras_home == os.path.dirname(K._config_path)\n    os.environ.pop('KERAS_HOME')\n    shutil.rmtree(_keras_home)\n    reload_module(K)\n\n    path = get_file(dirname, origin, untar=True)\n    filepath = path + '.tar.gz'\n    hashval_sha256 = _hash_file(filepath)\n    hashval_md5 = _hash_file(filepath, algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, untar=True)\n    path = get_file(filepath, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(filepath)\n    assert validate_file(filepath, hashval_sha256)\n    assert validate_file(filepath, hashval_md5)\n    os.remove(filepath)\n    os.remove('test.tar.gz')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.zip')))\n\n    hashval_sha256 = _hash_file('test.zip')\n    hashval_md5 = _hash_file('test.zip', algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, extract=True)\n    path = get_file(dirname, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(path)\n    assert validate_file(path, hashval_sha256)\n    assert validate_file(path, hashval_md5)\n\n    os.remove(path)\n    os.remove(os.path.join(os.path.dirname(path), 'test.txt'))\n    os.remove('test.txt')\n    os.remove('test.zip')",
        "begin_line": 72,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.__init__#143",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.__init__(self, it)",
        "snippet": "    def __init__(self, it):\n        self.it = it\n        self.lock = threading.Lock()",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.__iter__#147",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return self",
        "begin_line": 147,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.__next__#150",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.__next__(self)",
        "snippet": "    def __next__(self):\n        return self.next()",
        "begin_line": 150,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.next#153",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.next(self)",
        "snippet": "    def next(self):\n        with self.lock:\n            return next(self.it)",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_generator#158",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_generator(f)",
        "snippet": "def threadsafe_generator(f):\n    \"\"\"A decorator that takes a generator function and makes it thread-safe.\n    \"\"\"\n\n    def g(*a, **kw):\n        return threadsafe_iter(f(*a, **kw))\n\n    return g",
        "begin_line": 158,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.g#162",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.g(*a, **kw)",
        "snippet": "    def g(*a, **kw):\n        return threadsafe_iter(f(*a, **kw))",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.__init__#169",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.__init__(self, shape, value=1.0)",
        "snippet": "    def __init__(self, shape, value=1.0):\n        self.shape = shape\n        self.inner = value",
        "begin_line": 169,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.__getitem__#173",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        time.sleep(0.05)\n        return np.ones(self.shape, dtype=np.uint32) * item * self.inner",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.__len__#177",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.__len__(self)",
        "snippet": "    def __len__(self):\n        return 100",
        "begin_line": 177,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.on_epoch_end#180",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.on_epoch_end(self)",
        "snippet": "    def on_epoch_end(self):\n        self.inner *= 5.0",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.FaultSequence.__getitem__#185",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.FaultSequence",
        "signature": "tests.keras.utils.data_utils_test.FaultSequence.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        raise IndexError(item, 'is not present')",
        "begin_line": 185,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.FaultSequence.__len__#188",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.FaultSequence",
        "signature": "tests.keras.utils.data_utils_test.FaultSequence.__len__(self)",
        "snippet": "    def __len__(self):\n        return 100",
        "begin_line": 188,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.FaultSequence.on_epoch_end#191",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.FaultSequence",
        "signature": "tests.keras.utils.data_utils_test.FaultSequence.on_epoch_end(self)",
        "snippet": "    def on_epoch_end(self):\n        pass",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_generator_from_sequence_threads#196",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_generator_from_sequence_threads(ds)",
        "snippet": "def create_generator_from_sequence_threads(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_generator_from_sequence_pcs#201",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_generator_from_sequence_pcs(ds)",
        "snippet": "def create_generator_from_sequence_pcs(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_threads#206",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_threads()",
        "snippet": "def test_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        DummySequence([3, 10, 10, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n\n    \"\"\"\n     Not comparing the order since it is not guaranteed.\n     It may get ordered, but not a lot, one thread can take\n     the GIL before he was supposed to.\n    \"\"\"\n    assert len(set(acc) - set(range(100))) == 0, \"Output is not the same\"\n    enqueuer.stop()",
        "begin_line": 206,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_processes#225",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_processes()",
        "snippet": "def test_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 10, 10, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n    assert acc != list(range(100)), ('Order was keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
        "begin_line": 225,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_threadsafe#238",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_threadsafe()",
        "snippet": "def test_generator_enqueuer_threadsafe():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 10, 10, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(RuntimeError) as e:\n        [next(gen_output) for _ in range(10)]\n    assert 'thread-safe' in str(e.value)\n    enqueuer.stop()",
        "begin_line": 238,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_threads#251",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_threads()",
        "snippet": "def test_generator_enqueuer_fail_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        FaultSequence()), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_processes#261",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_processes()",
        "snippet": "def test_generator_enqueuer_fail_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        FaultSequence()), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
        "begin_line": 261,
        "end_line": 267,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads#270",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads()",
        "snippet": "def test_ordered_enqueuer_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 10, 10, 3]),\n                               use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with threads')\n    enqueuer.stop()",
        "begin_line": 270,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads_not_ordered#283",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads_not_ordered()",
        "snippet": "def test_ordered_enqueuer_threads_not_ordered():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 10, 10, 3]),\n                               use_multiprocessing=False,\n                               shuffle=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc != list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with threads')\n    enqueuer.stop()",
        "begin_line": 283,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_processes#298",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_processes()",
        "snippet": "def test_ordered_enqueuer_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 10, 10, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
        "begin_line": 298,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_threads#311",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_threads()",
        "snippet": "def test_ordered_enqueuer_fail_threads():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
        "begin_line": 311,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_on_epoch_end_processes#320",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_on_epoch_end_processes()",
        "snippet": "def test_on_epoch_end_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 10, 10, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(200):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[100:] == list([k * 5 for k in range(100)]), (\n        'Order was not keep in GeneratorEnqueuer with processes')\n    enqueuer.stop()",
        "begin_line": 320,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_context_switch#334",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_context_switch()",
        "snippet": "def test_context_switch():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 10, 10, 3]),\n                               use_multiprocessing=True)\n    enqueuer2 = OrderedEnqueuer(DummySequence([3, 10, 10, 3], value=15),\n                                use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    enqueuer2.start(3, 10)\n    gen_output = enqueuer.get()\n    gen_output2 = enqueuer2.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[-1] == 99\n    # One epoch is completed so enqueuer will switch the Sequence\n\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output2)[0, 0, 0, 0])\n    assert acc[-1] == 99 * 15\n    # One epoch has been completed so enqueuer2 will switch\n\n    # Be sure that both Sequence were updated\n    assert next(gen_output)[0, 0, 0, 0] == 0\n    assert next(gen_output)[0, 0, 0, 0] == 5\n    assert next(gen_output2)[0, 0, 0, 0] == 0\n    assert next(gen_output2)[0, 0, 0, 0] == 15 * 5\n\n    # Tear down everything\n    enqueuer.stop()\n    enqueuer2.stop()",
        "begin_line": 334,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_on_epoch_end_threads#366",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_on_epoch_end_threads()",
        "snippet": "def test_on_epoch_end_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 10, 10, 3]),\n                               use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list([k * 5 for k in range(100)]), (\n        'Order was not keep in GeneratorEnqueuer with processes')\n    enqueuer.stop()",
        "begin_line": 366,
        "end_line": 379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_processes#383",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_processes()",
        "snippet": "def test_ordered_enqueuer_fail_processes():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
        "begin_line": 383,
        "end_line": 388,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_threads#392",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_threads(ds)",
        "snippet": "def create_finite_generator_from_sequence_threads(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_pcs#397",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_pcs(ds)",
        "snippet": "def create_finite_generator_from_sequence_pcs(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
        "begin_line": 397,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_threads#404",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_threads()",
        "snippet": "def test_finite_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_threads(\n        DummySequence([3, 10, 10, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert set(acc) == set(range(100)), \"Output is not the same\"\n    enqueuer.stop()",
        "begin_line": 404,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_processes#417",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_processes()",
        "snippet": "def test_finite_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(\n        DummySequence([3, 10, 10, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert acc != list(range(100)), ('Order was keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
        "begin_line": 417,
        "end_line": 427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_missing_inputs#432",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_missing_inputs()",
        "snippet": "def test_missing_inputs():\n    missing_idx = 10\n\n    class TimeOutSequence(DummySequence):\n        def __getitem__(self, item):\n            if item == missing_idx:\n                time.sleep(120)\n            return super(TimeOutSequence, self).__getitem__(item)\n\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(\n        TimeOutSequence([3, 2, 2, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.warns(UserWarning, match='An input could not be retrieved.'):\n        for _ in range(4 * missing_idx):\n            next(gen_output)\n\n    enqueuer = OrderedEnqueuer(TimeOutSequence([3, 2, 2, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    warning_msg = \"The input {} could not be retrieved.\".format(missing_idx)\n    with pytest.warns(UserWarning, match=warning_msg):\n        for _ in range(11):\n            next(gen_output)",
        "begin_line": 432,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.TimeOutSequence.test_missing_inputs#432",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.TimeOutSequence",
        "signature": "tests.keras.utils.data_utils_test.TimeOutSequence.test_missing_inputs()",
        "snippet": "def test_missing_inputs():\n    missing_idx = 10\n\n    class TimeOutSequence(DummySequence):\n        def __getitem__(self, item):\n            if item == missing_idx:\n                time.sleep(120)\n            return super(TimeOutSequence, self).__getitem__(item)\n\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(\n        TimeOutSequence([3, 2, 2, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.warns(UserWarning, match='An input could not be retrieved.'):\n        for _ in range(4 * missing_idx):\n            next(gen_output)\n\n    enqueuer = OrderedEnqueuer(TimeOutSequence([3, 2, 2, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    warning_msg = \"The input {} could not be retrieved.\".format(missing_idx)\n    with pytest.warns(UserWarning, match=warning_msg):\n        for _ in range(11):\n            next(gen_output)",
        "begin_line": 432,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.TimeOutSequence.__getitem__#436",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.TimeOutSequence",
        "signature": "tests.keras.utils.data_utils_test.TimeOutSequence.__getitem__(self, item)",
        "snippet": "        def __getitem__(self, item):\n            if item == missing_idx:\n                time.sleep(120)\n            return super(TimeOutSequence, self).__getitem__(item)",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.legacy.conftest.clear_session_after_test#6",
        "src_path": "tests/keras/legacy/conftest.py",
        "class_name": "tests.keras.legacy.conftest",
        "signature": "tests.keras.legacy.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"This wrapper runs for all the tests in the legacy directory (recursively).\n    \"\"\"\n    with warnings.catch_warnings():\n        warnings.filterwarnings('ignore', message=r'(.+) Keras 2 ',\n                                category=UserWarning)\n        yield",
        "begin_line": 6,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.clear_session_after_test#6",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"Test wrapper to clean up after TensorFlow and CNTK tests.\n\n    This wrapper runs for all the tests in the keras test suite.\n    \"\"\"\n    yield\n    if K.backend() == 'tensorflow' or K.backend() == 'cntk':\n        K.clear_session()",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    }
]