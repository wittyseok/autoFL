coverage run -m pytest pandas/tests/extension/test_categorical.py::TestCasting::test_cast_category_to_extension_dtype
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 5 items

pandas/tests/extension/test_categorical.py F.FFF                         [100%]

=================================== FAILURES ===================================
_________ TestCasting.test_cast_category_to_extension_dtype[expected0] _________

self = <pandas.tests.extension.test_categorical.TestCasting object at 0x7f619266afa0>
expected = 0   2019-01-01 00:00:00+00:00
1   2020-01-01 00:00:00+00:00
dtype: datetime64[ns, UTC]

    @pytest.mark.parametrize(
        "expected",
        [
            pd.Series(["2019", "2020"], dtype="datetime64[ns, UTC]"),
            pd.Series([0, 0], dtype="timedelta64[ns]"),
            pd.Series([pd.Period("2019"), pd.Period("2020")], dtype="period[A-DEC]"),
            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype="interval"),
            pd.Series([1, np.nan], dtype="Int64"),
        ],
    )
    def test_cast_category_to_extension_dtype(self, expected):
        # GH 28668
>       result = expected.astype("category").astype(expected.dtype)

pandas/tests/extension/test_categorical.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/generic.py:5914: in astype
    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)
pandas/core/internals/managers.py:581: in astype
    return self.apply("astype", dtype=dtype, **kwargs)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:540: in astype
    return self._astype(dtype, copy=copy, errors=errors, **kwargs)
pandas/core/internals/blocks.py:594: in _astype
    values = self.values.astype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]
Categories (2, datetime64[ns, UTC]): [2019-01-01 00:00:00+00:00, 2020-01-01 00:00:00+00:00]
dtype = datetime64[ns, UTC], copy = True

    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:
        """
        Coerce this type to another dtype
    
        Parameters
        ----------
        dtype : numpy dtype or pandas type
        copy : bool, default True
            By default, astype always returns a newly allocated object.
            If copy is set to False and dtype is categorical, the original
            object is returned.
        """
        if is_categorical_dtype(dtype):
            dtype = cast(Union[str, CategoricalDtype], dtype)
    
            # GH 10696/18593
            dtype = self.dtype.update_dtype(dtype)
            self = self.copy() if copy else self
            if dtype == self.dtype:
                return self
            return self._set_dtype(dtype)
        if is_integer_dtype(dtype) and self.isna().any():
            msg = "Cannot convert float NaN to integer"
            raise ValueError(msg)
>       return np.array(self, dtype=dtype, copy=copy)
E       TypeError: data type not understood

pandas/core/arrays/categorical.py:526: TypeError
_________ TestCasting.test_cast_category_to_extension_dtype[expected2] _________

self = <pandas.tests.extension.test_categorical.TestCasting object at 0x7f61919cd730>
expected = 0    2019
1    2020
dtype: period[A-DEC]

    @pytest.mark.parametrize(
        "expected",
        [
            pd.Series(["2019", "2020"], dtype="datetime64[ns, UTC]"),
            pd.Series([0, 0], dtype="timedelta64[ns]"),
            pd.Series([pd.Period("2019"), pd.Period("2020")], dtype="period[A-DEC]"),
            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype="interval"),
            pd.Series([1, np.nan], dtype="Int64"),
        ],
    )
    def test_cast_category_to_extension_dtype(self, expected):
        # GH 28668
>       result = expected.astype("category").astype(expected.dtype)

pandas/tests/extension/test_categorical.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/generic.py:5914: in astype
    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)
pandas/core/internals/managers.py:581: in astype
    return self.apply("astype", dtype=dtype, **kwargs)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:540: in astype
    return self._astype(dtype, copy=copy, errors=errors, **kwargs)
pandas/core/internals/blocks.py:594: in _astype
    values = self.values.astype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [2019, 2020]
Categories (2, period[A-DEC]): [2019, 2020]
dtype = period[A-DEC], copy = True

    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:
        """
        Coerce this type to another dtype
    
        Parameters
        ----------
        dtype : numpy dtype or pandas type
        copy : bool, default True
            By default, astype always returns a newly allocated object.
            If copy is set to False and dtype is categorical, the original
            object is returned.
        """
        if is_categorical_dtype(dtype):
            dtype = cast(Union[str, CategoricalDtype], dtype)
    
            # GH 10696/18593
            dtype = self.dtype.update_dtype(dtype)
            self = self.copy() if copy else self
            if dtype == self.dtype:
                return self
            return self._set_dtype(dtype)
        if is_integer_dtype(dtype) and self.isna().any():
            msg = "Cannot convert float NaN to integer"
            raise ValueError(msg)
>       return np.array(self, dtype=dtype, copy=copy)
E       TypeError: data type not understood

pandas/core/arrays/categorical.py:526: TypeError
_________ TestCasting.test_cast_category_to_extension_dtype[expected3] _________

self = <pandas.tests.extension.test_categorical.TestCasting object at 0x7f6191cf5250>
expected = 0    (0, 1]
1    (1, 2]
dtype: interval

    @pytest.mark.parametrize(
        "expected",
        [
            pd.Series(["2019", "2020"], dtype="datetime64[ns, UTC]"),
            pd.Series([0, 0], dtype="timedelta64[ns]"),
            pd.Series([pd.Period("2019"), pd.Period("2020")], dtype="period[A-DEC]"),
            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype="interval"),
            pd.Series([1, np.nan], dtype="Int64"),
        ],
    )
    def test_cast_category_to_extension_dtype(self, expected):
        # GH 28668
>       result = expected.astype("category").astype(expected.dtype)

pandas/tests/extension/test_categorical.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/generic.py:5914: in astype
    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)
pandas/core/internals/managers.py:581: in astype
    return self.apply("astype", dtype=dtype, **kwargs)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:540: in astype
    return self._astype(dtype, copy=copy, errors=errors, **kwargs)
pandas/core/internals/blocks.py:594: in _astype
    values = self.values.astype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [(0, 1], (1, 2]]
Categories (2, interval[int64]): [(0, 1], (1, 2]]
dtype = interval[int64], copy = True

    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:
        """
        Coerce this type to another dtype
    
        Parameters
        ----------
        dtype : numpy dtype or pandas type
        copy : bool, default True
            By default, astype always returns a newly allocated object.
            If copy is set to False and dtype is categorical, the original
            object is returned.
        """
        if is_categorical_dtype(dtype):
            dtype = cast(Union[str, CategoricalDtype], dtype)
    
            # GH 10696/18593
            dtype = self.dtype.update_dtype(dtype)
            self = self.copy() if copy else self
            if dtype == self.dtype:
                return self
            return self._set_dtype(dtype)
        if is_integer_dtype(dtype) and self.isna().any():
            msg = "Cannot convert float NaN to integer"
            raise ValueError(msg)
>       return np.array(self, dtype=dtype, copy=copy)
E       TypeError: data type not understood

pandas/core/arrays/categorical.py:526: TypeError
_________ TestCasting.test_cast_category_to_extension_dtype[expected4] _________

self = <pandas.tests.extension.test_categorical.TestCasting object at 0x7f6191dbeac0>
expected = 0      1
1    NaN
dtype: Int64

    @pytest.mark.parametrize(
        "expected",
        [
            pd.Series(["2019", "2020"], dtype="datetime64[ns, UTC]"),
            pd.Series([0, 0], dtype="timedelta64[ns]"),
            pd.Series([pd.Period("2019"), pd.Period("2020")], dtype="period[A-DEC]"),
            pd.Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype="interval"),
            pd.Series([1, np.nan], dtype="Int64"),
        ],
    )
    def test_cast_category_to_extension_dtype(self, expected):
        # GH 28668
>       result = expected.astype("category").astype(expected.dtype)

pandas/tests/extension/test_categorical.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/generic.py:5914: in astype
    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)
pandas/core/internals/managers.py:581: in astype
    return self.apply("astype", dtype=dtype, **kwargs)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:540: in astype
    return self._astype(dtype, copy=copy, errors=errors, **kwargs)
pandas/core/internals/blocks.py:594: in _astype
    values = self.values.astype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [1, NaN]
Categories (1, int64): [1], dtype = Int64Dtype(), copy = True

    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:
        """
        Coerce this type to another dtype
    
        Parameters
        ----------
        dtype : numpy dtype or pandas type
        copy : bool, default True
            By default, astype always returns a newly allocated object.
            If copy is set to False and dtype is categorical, the original
            object is returned.
        """
        if is_categorical_dtype(dtype):
            dtype = cast(Union[str, CategoricalDtype], dtype)
    
            # GH 10696/18593
            dtype = self.dtype.update_dtype(dtype)
            self = self.copy() if copy else self
            if dtype == self.dtype:
                return self
            return self._set_dtype(dtype)
        if is_integer_dtype(dtype) and self.isna().any():
            msg = "Cannot convert float NaN to integer"
>           raise ValueError(msg)
E           ValueError: Cannot convert float NaN to integer

pandas/core/arrays/categorical.py:525: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/extension/test_categorical.py::TestCasting::test_cast_category_to_extension_dtype[expected0]
FAILED pandas/tests/extension/test_categorical.py::TestCasting::test_cast_category_to_extension_dtype[expected2]
FAILED pandas/tests/extension/test_categorical.py::TestCasting::test_cast_category_to_extension_dtype[expected3]
FAILED pandas/tests/extension/test_categorical.py::TestCasting::test_cast_category_to_extension_dtype[expected4]
========================= 4 failed, 1 passed in 2.08s ==========================

coverage run -m pytest pandas/tests/reshape/merge/test_merge.py::test_merge_on_cat_and_ext_array
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/reshape/merge/test_merge.py F                               [100%]

=================================== FAILURES ===================================
_______________________ test_merge_on_cat_and_ext_array ________________________

    def test_merge_on_cat_and_ext_array():
        # GH 28668
        right = DataFrame(
            {"a": Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype="interval")}
        )
        left = right.copy()
        left["a"] = left["a"].astype("category")
    
>       result = pd.merge(left, right, how="inner", on="a")

pandas/tests/reshape/merge/test_merge.py:2107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/merge.py:69: in merge
    op = _MergeOperation(
pandas/core/reshape/merge.py:615: in __init__
    self._maybe_coerce_merge_keys()
pandas/core/reshape/merge.py:1147: in _maybe_coerce_merge_keys
    self.left = self.left.assign(**{name: self.left[name].astype(typ)})
pandas/core/generic.py:5914: in astype
    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)
pandas/core/internals/managers.py:581: in astype
    return self.apply("astype", dtype=dtype, **kwargs)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:540: in astype
    return self._astype(dtype, copy=copy, errors=errors, **kwargs)
pandas/core/internals/blocks.py:594: in _astype
    values = self.values.astype(dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [(0, 1], (1, 2]]
Categories (2, interval[int64]): [(0, 1], (1, 2]]
dtype = interval[int64], copy = True

    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:
        """
        Coerce this type to another dtype
    
        Parameters
        ----------
        dtype : numpy dtype or pandas type
        copy : bool, default True
            By default, astype always returns a newly allocated object.
            If copy is set to False and dtype is categorical, the original
            object is returned.
        """
        if is_categorical_dtype(dtype):
            dtype = cast(Union[str, CategoricalDtype], dtype)
    
            # GH 10696/18593
            dtype = self.dtype.update_dtype(dtype)
            self = self.copy() if copy else self
            if dtype == self.dtype:
                return self
            return self._set_dtype(dtype)
        if is_integer_dtype(dtype) and self.isna().any():
            msg = "Cannot convert float NaN to integer"
            raise ValueError(msg)
>       return np.array(self, dtype=dtype, copy=copy)
E       TypeError: data type not understood

pandas/core/arrays/categorical.py:526: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/reshape/merge/test_merge.py::test_merge_on_cat_and_ext_array
============================== 1 failed in 1.15s ===============================
