coverage run -m pytest pandas/tests/arrays/categorical/test_replace.py::test_replace
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 13 items

pandas/tests/arrays/categorical/test_replace.py FFFFFFFFFFFFF            [100%]

=================================== FAILURES ===================================
____________________ test_replace[1-2-expected0-True-True] _____________________

to_replace = 1, value = 2
expected = 0    2
1    2
2    3
dtype: category
Categories (2, int64): [2, 3]
check_types = True, check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
____________________ test_replace[1-4-expected1-True-True] _____________________

to_replace = 1, value = 4
expected = 0    4
1    2
2    3
dtype: category
Categories (3, int64): [2, 3, 4]
check_types = True, check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
____________________ test_replace[4-1-expected2-True-True] _____________________

to_replace = 4, value = 1
expected = 0    1
1    2
2    3
dtype: category
Categories (3, int64): [1, 2, 3]
check_types = True, check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
____________________ test_replace[5-6-expected3-True-True] _____________________

to_replace = 5, value = 6
expected = 0    1
1    2
2    3
dtype: category
Categories (3, int64): [1, 2, 3]
check_types = True, check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
_______________ test_replace[to_replace4-2-expected4-True-True] ________________

to_replace = [1], value = 2, expected = [2, 2, 3], check_types = True
check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
>       result = s.replace(to_replace, value)

pandas/tests/arrays/categorical/test_replace.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4155: in replace
    return super().replace(
pandas/core/generic.py:6499: in replace
    new_data = self._data.replace(
pandas/core/internals/managers.py:568: in replace
    return self.apply("replace", value=value, **kwargs)
pandas/core/internals/managers.py:420: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:2960: in replace
    result.values.replace(to_replace, value, inplace=True)
pandas/core/arrays/categorical.py:2444: in replace
    if to_replace in cat.categories:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Int64Index([1, 2, 3], dtype='int64'), key = [1]

    def __contains__(self, key) -> bool:
        """
        Check if key is a float and has a decimal. If it has, return False.
        """
>       hash(key)
E       TypeError: unhashable type: 'list'

pandas/core/indexes/numeric.py:232: TypeError
_______________ test_replace[to_replace5-3-expected5-True-True] ________________

to_replace = [1, 2], value = 3, expected = [3, 3, 3], check_types = True
check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
>       result = s.replace(to_replace, value)

pandas/tests/arrays/categorical/test_replace.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4155: in replace
    return super().replace(
pandas/core/generic.py:6499: in replace
    new_data = self._data.replace(
pandas/core/internals/managers.py:568: in replace
    return self.apply("replace", value=value, **kwargs)
pandas/core/internals/managers.py:420: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:2960: in replace
    result.values.replace(to_replace, value, inplace=True)
pandas/core/arrays/categorical.py:2444: in replace
    if to_replace in cat.categories:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2]

    def __contains__(self, key) -> bool:
        """
        Check if key is a float and has a decimal. If it has, return False.
        """
>       hash(key)
E       TypeError: unhashable type: 'list'

pandas/core/indexes/numeric.py:232: TypeError
_______________ test_replace[to_replace6-4-expected6-True-True] ________________

to_replace = [1, 2], value = 4, expected = [4, 4, 3], check_types = True
check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
>       result = s.replace(to_replace, value)

pandas/tests/arrays/categorical/test_replace.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4155: in replace
    return super().replace(
pandas/core/generic.py:6499: in replace
    new_data = self._data.replace(
pandas/core/internals/managers.py:568: in replace
    return self.apply("replace", value=value, **kwargs)
pandas/core/internals/managers.py:420: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:2960: in replace
    result.values.replace(to_replace, value, inplace=True)
pandas/core/arrays/categorical.py:2444: in replace
    if to_replace in cat.categories:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2]

    def __contains__(self, key) -> bool:
        """
        Check if key is a float and has a decimal. If it has, return False.
        """
>       hash(key)
E       TypeError: unhashable type: 'list'

pandas/core/indexes/numeric.py:232: TypeError
_______________ test_replace[to_replace7-5-expected7-True-True] ________________

to_replace = (1, 2, 4), value = 5
expected = 0    5
1    5
2    3
dtype: category
Categories (2, int64): [3, 5]
check_types = True, check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
_______________ test_replace[to_replace8-2-expected8-True-True] ________________

to_replace = (5, 6), value = 2
expected = 0    1
1    2
2    3
dtype: category
Categories (3, int64): [1, 2, 3]
check_types = True, check_categorical = True

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
____________ test_replace[to_replace9-value9-expected9-False-False] ____________

to_replace = [1], value = [2]
expected = 0    2
1    2
2    3
dtype: category
Categories (2, int64): [2, 3]
check_types = False, check_categorical = False

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
__________ test_replace[to_replace10-value10-expected10-False-False] ___________

to_replace = [1, 4], value = [5, 2]
expected = 0    5
1    2
2    3
dtype: category
Categories (3, int64): [2, 3, 5]
check_types = False, check_categorical = False

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
___________________ test_replace[3-4-expected11-True-False] ____________________

to_replace = 3, value = '4'
expected = 0    1
1    2
2    4
dtype: category
Categories (3, object): [1, 2, 4]
check_types = True, check_categorical = False

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
        result = s.replace(to_replace, value)
        expected = pd.Series(expected, dtype="category")
        s.replace(to_replace, value, inplace=True)
>       tm.assert_series_equal(
            expected,
            result,
            check_dtype=check_types,
            check_categorical=check_categorical,
            check_category_order=False,
        )
E       TypeError: assert_series_equal() got an unexpected keyword argument 'check_category_order'

pandas/tests/arrays/categorical/test_replace.py:35: TypeError
______________ test_replace[to_replace12-5-expected12-True-False] ______________

to_replace = [1, 2, '3'], value = '5', expected = ['5', '5', 3]
check_types = True, check_categorical = False

    @pytest.mark.parametrize(
        "to_replace,value,expected,check_types,check_categorical",
        [
            # one-to-one
            (1, 2, [2, 2, 3], True, True),
            (1, 4, [4, 2, 3], True, True),
            (4, 1, [1, 2, 3], True, True),
            (5, 6, [1, 2, 3], True, True),
            # many-to-one
            ([1], 2, [2, 2, 3], True, True),
            ([1, 2], 3, [3, 3, 3], True, True),
            ([1, 2], 4, [4, 4, 3], True, True),
            ((1, 2, 4), 5, [5, 5, 3], True, True),
            ((5, 6), 2, [1, 2, 3], True, True),
            # many-to-many, handled outside of Categorical and results in separate dtype
            ([1], [2], [2, 2, 3], False, False),
            ([1, 4], [5, 2], [5, 2, 3], False, False),
            # check_categorical sorts categories, which crashes on mixed dtypes
            (3, "4", [1, 2, "4"], True, False),
            ([1, 2, "3"], "5", ["5", "5", 3], True, False),
        ],
    )
    def test_replace(to_replace, value, expected, check_types, check_categorical):
        # GH 31720
        s = pd.Series([1, 2, 3], dtype="category")
>       result = s.replace(to_replace, value)

pandas/tests/arrays/categorical/test_replace.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4155: in replace
    return super().replace(
pandas/core/generic.py:6499: in replace
    new_data = self._data.replace(
pandas/core/internals/managers.py:568: in replace
    return self.apply("replace", value=value, **kwargs)
pandas/core/internals/managers.py:420: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:2960: in replace
    result.values.replace(to_replace, value, inplace=True)
pandas/core/arrays/categorical.py:2444: in replace
    if to_replace in cat.categories:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Int64Index([1, 2, 3], dtype='int64'), key = [1, 2, '3']

    def __contains__(self, key) -> bool:
        """
        Check if key is a float and has a decimal. If it has, return False.
        """
>       hash(key)
E       TypeError: unhashable type: 'list'

pandas/core/indexes/numeric.py:232: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[1-2-expected0-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[1-4-expected1-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[4-1-expected2-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[5-6-expected3-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace4-2-expected4-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace5-3-expected5-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace6-4-expected6-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace7-5-expected7-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace8-2-expected8-True-True]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace9-value9-expected9-False-False]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace10-value10-expected10-False-False]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[3-4-expected11-True-False]
FAILED pandas/tests/arrays/categorical/test_replace.py::test_replace[to_replace12-5-expected12-True-False]
============================== 13 failed in 3.05s ==============================
