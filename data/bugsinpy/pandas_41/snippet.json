[
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim#413",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return self._data.ndim",
        "begin_line": 413,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030175015087507544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape#417",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape(self)",
        "snippet": "    def shape(self):\n        return self._data.shape",
        "begin_line": 417,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#437",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 437,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#447",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 447,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026588673225206064,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#483",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 483,
        "end_line": 487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030175015087507544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#494",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 494,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00029163021289005544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#497",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n        is_int = lib.is_integer(key)\n        if lib.is_scalar(key) and not is_int:\n            raise IndexError(\n                \"only integers, slices (`:`), ellipsis (`...`), \"\n                \"numpy.newaxis (`None`) and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n\n        getitem = self._data.__getitem__\n        if is_int:\n            val = getitem(key)\n            if lib.is_scalar(val):\n                # i.e. self.ndim == 1\n                return self._box_func(val)\n            return type(self)(val, dtype=self.dtype)\n\n        if com.is_bool_indexer(key):\n            # first convert to boolean, because check_array_indexer doesn't\n            # allow object dtype\n            if is_object_dtype(key):\n                key = np.asarray(key, dtype=bool)\n\n            key = check_array_indexer(self, key)\n            if key.all():\n                key = slice(0, None, None)\n            else:\n                key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n        elif isinstance(key, list) and len(key) == 1 and isinstance(key[0], slice):\n            # see https://github.com/pandas-dev/pandas/issues/31299, need to allow\n            # this for now (would otherwise raise in check_array_indexer)\n            pass\n        else:\n            key = check_array_indexer(self, key)\n\n        is_period = is_period_dtype(self)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n\n        result = getitem(key)\n        if result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            return result\n\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 497,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__#559",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__(self, key: Union[int, Sequence[int], Sequence[bool], slice], value: Union[NaTType, Any, Sequence[Any]])",
        "snippet": "    def __setitem__(\n        self,\n        key: Union[int, Sequence[int], Sequence[bool], slice],\n        value: Union[NaTType, Any, Sequence[Any]],\n    ) -> None:\n        # I'm fudging the types a bit here. \"Any\" above really depends\n        # on type(self). For PeriodArray, it's Period (or stuff coercible\n        # to a period in from_sequence). For DatetimeArray, it's Timestamp...\n        # I don't know if mypy can do that, possibly with Generics.\n        # https://mypy.readthedocs.io/en/latest/generics.html\n        if lib.is_scalar(value) and not isna(value):\n            value = com.maybe_box_datetimelike(value)\n\n        if is_list_like(value):\n            is_slice = isinstance(key, slice)\n\n            if lib.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n\n            if not is_slice:\n                key = cast(Sequence, key)\n                if len(key) != len(value) and not com.is_bool_indexer(key):\n                    msg = (\n                        f\"shape mismatch: value array of length '{len(key)}' \"\n                        \"does not match indexing result of length \"\n                        f\"'{len(value)}'.\"\n                    )\n                    raise ValueError(msg)\n                elif not len(key):\n                    return\n\n            value = type(self)._from_sequence(value, dtype=self.dtype)\n            self._check_compatible_with(value, setitem=True)\n            value = value.asi8\n        elif isinstance(value, self._scalar_type):\n            self._check_compatible_with(value, setitem=True)\n            value = self._unbox_scalar(value)\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            value = iNaT\n        else:\n            msg = (\n                f\"'value' should be a '{self._scalar_type.__name__}', 'NaT', \"\n                f\"or array of those. Got '{type(value).__name__}' instead.\"\n            )\n            raise TypeError(msg)\n\n        key = check_array_indexer(self, key)\n        self._data[key] = value\n        self._maybe_clear_freq()",
        "begin_line": 559,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#614",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        from pandas import Categorical\n\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8.ravel()).reshape(self.shape)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 614,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#652",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 652,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#731",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)",
        "snippet": "    def copy(self):\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 731,
        "end_line": 733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#899",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 899,
        "end_line": 903,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#906",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 906,
        "end_line": 910,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#912",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 912,
        "end_line": 935,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#988",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 988,
        "end_line": 992,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002591344908007256,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#1012",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tryies to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        if self.ndim != 1:\n            return None\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 1012,
        "end_line": 1023,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_datetimelike_scalar#1112",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_datetimelike_scalar(self, other)",
        "snippet": "    def _add_datetimelike_scalar(self, other):\n        # Overridden by TimedeltaArray\n        raise TypeError(f\"cannot add {type(self).__name__} and {type(other).__name__}\")",
        "begin_line": 1112,
        "end_line": 1114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#1132",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n\n        Returns\n        -------\n        Same type as self\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(self.shape, dtype=\"i8\")\n            new_values[:] = iNaT\n            return type(self)(new_values, dtype=self.dtype)\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n\n        new_freq = None\n        if isinstance(self.freq, Tick) or is_period_dtype(self.dtype):\n            # adding a scalar preserves freq\n            new_freq = self.freq\n\n        if new_freq is not None:\n            # fastpath that doesnt require inference\n            return type(self)(new_values, dtype=self.dtype, freq=new_freq)\n        return type(self)._from_sequence(new_values, dtype=self.dtype, freq=\"infer\")",
        "begin_line": 1132,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedelta_arraylike#1162",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedelta_arraylike(self, other)",
        "snippet": "    def _add_timedelta_arraylike(self, other):\n        \"\"\"\n        Add a delta of a TimedeltaIndex\n\n        Returns\n        -------\n        Same type as self\n        \"\"\"\n        # overriden by PeriodArray\n\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            # ndarray[timedelta64]; wrap in TimedeltaIndex for op\n            from pandas.core.arrays import TimedeltaArray\n\n            other = TimedeltaArray._from_sequence(other)\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        new_values = checked_add_with_arr(\n            self_i8, other_i8, arr_mask=self._isnan, b_mask=other._isnan\n        )\n        if self._hasnans or other._hasnans:\n            mask = (self._isnan) | (other._isnan)\n            new_values[mask] = iNaT\n\n        return type(self)._from_sequence(new_values, dtype=self.dtype, freq=\"infer\")",
        "begin_line": 1162,
        "end_line": 1190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__#1326",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._add_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._add_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(other)\n        elif is_object_dtype(other):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.add)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.add)\n        else:\n            # Includes Categorical, other ExtensionArrays\n            # For PeriodDtype, if self is a TimedeltaArray and other is a\n            #  PeriodArray with  a timedelta-like (i.e. Tick) freq, this\n            #  operation is valid.  Defer to the PeriodArray implementation.\n            #  In remaining cases, this will end up raising TypeError.\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1326,
        "end_line": 1371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1378",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(-other)\n        elif is_object_dtype(other):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.sub)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1378,
        "end_line": 1425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1658",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                f\"Inferred frequency {inferred_freq} from passed \"\n                \"values does not conform to passed frequency \"\n                f\"{freq.freqstr}\"\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1658,
        "end_line": 1690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1693",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1693,
        "end_line": 1717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#73",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq) -> Optional[DateOffset]:\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset\n\n    Examples\n    --------\n    >>> to_offset('5min')\n    <5 * Minutes>\n\n    >>> to_offset('1D1H')\n    <25 * Hours>\n\n    >>> to_offset(('W', 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, 'B'))\n    <2 * BusinessDays>\n\n    >>> to_offset(datetime.timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = _get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            splitted = re.split(libfreqs.opattern, freq)\n            if splitted[-1] != \"\" and not splitted[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(\n                splitted[0::4], splitted[1::4], splitted[2::4]\n            ):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = _get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError) as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 73,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#48",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method: Optional[str]=None)",
        "snippet": "    def __call__(\n        self,\n        args,\n        kwargs,\n        fname=None,\n        max_fname_arg_count=None,\n        method: Optional[str] = None,\n    ) -> None:\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 48,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#62",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008771929824561404,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0008771929824561404,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0008771929824561404
        }
    },
    {
        "name": "pandas.conftest.configure_tests#131",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    \"\"\"\n    Configure settings for all tests and test modules.\n    \"\"\"\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008771929824561404,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0008771929824561404,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0008771929824561404
        }
    },
    {
        "name": "pandas.conftest.add_imports#139",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    \"\"\"\n    Make `np` and `pd` names available for doctests.\n    \"\"\"\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 139,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008771929824561404,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0008771929824561404,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0008771929824561404
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__init__#275",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__init__(self, data, sparse_index=None, index=None, fill_value=None, kind='integer', dtype=None, copy=False)",
        "snippet": "    def __init__(\n        self,\n        data,\n        sparse_index=None,\n        index=None,\n        fill_value=None,\n        kind=\"integer\",\n        dtype=None,\n        copy=False,\n    ):\n\n        if fill_value is None and isinstance(dtype, SparseDtype):\n            fill_value = dtype.fill_value\n\n        if isinstance(data, type(self)):\n            # disable normal inference on dtype, sparse_index, & fill_value\n            if sparse_index is None:\n                sparse_index = data.sp_index\n            if fill_value is None:\n                fill_value = data.fill_value\n            if dtype is None:\n                dtype = data.dtype\n            # TODO: make kind=None, and use data.kind?\n            data = data.sp_values\n\n        # Handle use-provided dtype\n        if isinstance(dtype, str):\n            # Two options: dtype='int', regular numpy dtype\n            # or dtype='Sparse[int]', a sparse dtype\n            try:\n                dtype = SparseDtype.construct_from_string(dtype)\n            except TypeError:\n                dtype = pandas_dtype(dtype)\n\n        if isinstance(dtype, SparseDtype):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        if index is not None and not is_scalar(data):\n            raise Exception(\"must only pass scalars with an index\")\n\n        if is_scalar(data):\n            if index is not None:\n                if data is None:\n                    data = np.nan\n\n            if index is not None:\n                npoints = len(index)\n            elif sparse_index is None:\n                npoints = 1\n            else:\n                npoints = sparse_index.length\n\n            dtype = infer_dtype_from_scalar(data)[0]\n            data = construct_1d_arraylike_from_scalar(data, npoints, dtype)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        # TODO: disentangle the fill_value dtype inference from\n        # dtype inference\n        if data is None:\n            # XXX: What should the empty dtype be? Object or float?\n            data = np.array([], dtype=dtype)\n\n        if not is_array_like(data):\n            try:\n                # probably shared code in sanitize_series\n\n                data = sanitize_array(data, index=None)\n            except ValueError:\n                # NumPy may raise a ValueError on data like [1, []]\n                # we retry with object dtype here.\n                if dtype is None:\n                    dtype = object\n                    data = np.atleast_1d(np.asarray(data, dtype=dtype))\n                else:\n                    raise\n\n        if copy:\n            # TODO: avoid double copy when dtype forces cast.\n            data = data.copy()\n\n        if fill_value is None:\n            fill_value_dtype = data.dtype if dtype is None else dtype\n            if fill_value_dtype is None:\n                fill_value = np.nan\n            else:\n                fill_value = na_value_for_dtype(fill_value_dtype)\n\n        if isinstance(data, type(self)) and sparse_index is None:\n            sparse_index = data._sparse_index\n            sparse_values = np.asarray(data.sp_values, dtype=dtype)\n        elif sparse_index is None:\n            data = extract_array(data, extract_numpy=True)\n            if not isinstance(data, np.ndarray):\n                # EA\n                if is_datetime64tz_dtype(data.dtype):\n                    warnings.warn(\n                        f\"Creating SparseArray from {data.dtype} data \"\n                        \"loses timezone information.  Cast to object before \"\n                        \"sparse to retain timezone information.\",\n                        UserWarning,\n                        stacklevel=2,\n                    )\n                    data = np.asarray(data, dtype=\"datetime64[ns]\")\n                data = np.asarray(data)\n            sparse_values, sparse_index, fill_value = make_sparse(\n                data, kind=kind, fill_value=fill_value, dtype=dtype\n            )\n        else:\n            sparse_values = np.asarray(data, dtype=dtype)\n            if len(sparse_values) != sparse_index.npoints:\n                raise AssertionError(\n                    f\"Non array-like type {type(sparse_values)} must \"\n                    \"have the same length as the index\"\n                )\n        self._sparse_index = sparse_index\n        self._sparse_values = sparse_values\n        self._dtype = SparseDtype(sparse_values.dtype, fill_value)",
        "begin_line": 275,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__array__#454",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__array__(self, dtype=None, copy=True)",
        "snippet": "    def __array__(self, dtype=None, copy=True) -> np.ndarray:\n        fill_value = self.fill_value\n\n        if self.sp_index.ngaps == 0:\n            # Compat for na dtype and int values.\n            return self.sp_values\n        if dtype is None:\n            # Can NumPy represent this type?\n            # If not, `np.result_type` will raise. We catch that\n            # and return object.\n            if is_datetime64_any_dtype(self.sp_values.dtype):\n                # However, we *do* special-case the common case of\n                # a datetime64 with pandas NaT.\n                if fill_value is NaT:\n                    # Can't put pd.NaT in a datetime64[ns]\n                    fill_value = np.datetime64(\"NaT\")\n            try:\n                dtype = np.result_type(self.sp_values.dtype, type(fill_value))\n            except TypeError:\n                dtype = object\n\n        out = np.full(self.shape, fill_value, dtype=dtype)\n        out[self.sp_index.to_int_index().indices] = self.sp_values\n        return out",
        "begin_line": 454,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_index#498",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_index(self)",
        "snippet": "    def sp_index(self):\n        \"\"\"\n        The SparseIndex containing the location of non- ``fill_value`` points.\n        \"\"\"\n        return self._sparse_index",
        "begin_line": 498,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_values#505",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_values(self)",
        "snippet": "    def sp_values(self) -> np.ndarray:\n        \"\"\"\n        An ndarray containing the non- ``fill_value`` values.\n\n        Examples\n        --------\n        >>> s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\n        >>> s.sp_values\n        array([1, 2])\n        \"\"\"\n        return self._sparse_values",
        "begin_line": 505,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.dtype#518",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 518,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.fill_value#522",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.fill_value(self)",
        "snippet": "    def fill_value(self):\n        \"\"\"\n        Elements in `data` that are `fill_value` are not stored.\n\n        For memory savings, this should be the most common value in the array.\n        \"\"\"\n        return self.dtype.fill_value",
        "begin_line": 522,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__len__#550",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return self.sp_index.length",
        "begin_line": 550,
        "end_line": 551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.make_sparse#1513",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array.make_sparse(arr: np.ndarray, kind='block', fill_value=None, dtype=None, copy=False)",
        "snippet": "def make_sparse(arr: np.ndarray, kind=\"block\", fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)\n    \"\"\"\n    assert isinstance(arr, np.ndarray)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value",
        "begin_line": 1513,
        "end_line": 1564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array._make_index#1567",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array._make_index(length, indices, kind)",
        "snippet": "def _make_index(length, indices, kind):\n\n    if kind == \"block\" or isinstance(kind, BlockIndex):\n        locs, lens = splib.get_blocks(indices)\n        index = BlockIndex(length, locs, lens)\n    elif kind == \"integer\" or isinstance(kind, IntIndex):\n        index = IntIndex(length, indices)\n    else:  # pragma: no cover\n        raise ValueError(\"must be block or integer type\")\n    return index",
        "begin_line": 1567,
        "end_line": 1576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#78",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 78,
        "end_line": 105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__#134",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        \"\"\"\n        Return a string representation for a particular Object\n        \"\"\"\n        return self.name",
        "begin_line": 134,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__getstate__#149",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__getstate__(self)",
        "snippet": "    def __getstate__(self) -> Dict[str_type, Any]:\n        # pickle support; we don't want to pickle the cache\n        return {k: getattr(self, k, None) for k in self._metadata}",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#232",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Ordered=False)",
        "snippet": "    def __init__(self, categories=None, ordered: Ordered = False):\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#256",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> pd.CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     categories=['a', 'b'], ordered=True\n        ... )\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = pd.CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = pd.Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     c, ['x', 'y'], ordered=True, dtype=dtype2\n        ... )\n        Traceback (most recent call last):\n            ...\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> pd.CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(categories=['x', 'y'], ordered=False)\n        \"\"\"\n        from pandas.core.dtypes.common import is_categorical\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    raise ValueError(f\"Unknown dtype {repr(dtype)}\")\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n            elif not isinstance(dtype, CategoricalDtype):\n                raise ValueError(f\"Cannot not construct CategoricalDtype from {dtype}\")\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 256,
        "end_line": 349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string#352",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct a CategoricalDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            Must be the string \"category\" in order to be successfully constructed.\n\n        Returns\n        -------\n        CategoricalDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a CategoricalDtype cannot be constructed from the input.\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a 'CategoricalDtype' from '{string}'\")\n\n        # need ordered=None to ensure that operations specifying dtype=\"category\" don't\n        # override the ordered value for existing categoricals\n        return cls(ordered=None)",
        "begin_line": 352,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#382",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered",
        "begin_line": 382,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__setstate__#393",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__setstate__(self, state: MutableMapping[str_type, Any])",
        "snippet": "    def __setstate__(self, state: MutableMapping[str_type, Any]) -> None:\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to\n        # pickle -> need to set the settable private ones here (see GH26067)\n        self._categories = state.pop(\"categories\", None)\n        self._ordered = state.pop(\"ordered\", False)",
        "begin_line": 393,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__#400",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # _hash_categories returns a uint64, so use the negative\n        # space for when we have unknown categories to avoid a conflict\n        if self.categories is None:\n            if self.ordered:\n                return -1\n            else:\n                return -2\n        # We *do* want to include the real self.ordered here\n        return int(self._hash_categories(self.categories, self.ordered))",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#411",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self.ordered == other.ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 411,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories#464",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories(categories, ordered: Ordered=True)",
        "snippet": "    def _hash_categories(categories, ordered: Ordered = True) -> int:\n        from pandas.core.util.hashing import (\n            hash_array,\n            _combine_hash_arrays,\n            hash_tuples,\n        )\n        from pandas.core.dtypes.common import is_datetime64tz_dtype, _NS_DTYPE\n\n        if len(categories) and isinstance(categories[0], tuple):\n            # assumes if any individual category is a tuple, then all our. ATM\n            # I don't really want to support just some of the categories being\n            # tuples.\n            categories = list(categories)  # breaks if a np.array of categories\n            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == \"O\":\n                if len({type(x) for x in categories}) != 1:\n                    # TODO: hash_array doesn't handle mixed types. It casts\n                    # everything to a str first, which means we treat\n                    # {'1', '2'} the same as {'1', 2}\n                    # find a better solution\n                    hashed = hash((tuple(categories), ordered))\n                    return hashed\n\n            if is_datetime64tz_dtype(categories.dtype):\n                # Avoid future warning.\n                categories = categories.astype(_NS_DTYPE)\n\n            cat_array = hash_array(np.asarray(categories), categorize=False)\n        if ordered:\n            cat_array = np.vstack(\n                [cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)]\n            )\n        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array), num_items=len(cat_array))\n        return np.bitwise_xor.reduce(hashed)",
        "begin_line": 464,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#516",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 516,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#535",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            raise TypeError(\n                f\"Parameter 'categories' must be list-like, was {repr(categories)}\"\n            )\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorical categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 535,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#571",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            raise ValueError(\n                f\"a CategoricalDtype must be passed to perform an update, \"\n                f\"got {repr(dtype)}\"\n            )\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # update categories/ordered unless they've been explicitly passed as None\n        new_categories = (\n            dtype.categories if dtype.categories is not None else self.categories\n        )\n        new_ordered = dtype.ordered if dtype.ordered is not None else self.ordered\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 571,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#607",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 607,
        "end_line": 611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered#614",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self._ordered",
        "begin_line": 614,
        "end_line": 618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#675",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)",
        "snippet": "    def __init__(self, unit=\"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    f\"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is no longer supported. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 675,
        "end_line": 704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#707",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self):\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 707,
        "end_line": 711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#714",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 714,
        "end_line": 718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030321406913280777,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#734",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type):\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        msg = f\"Cannot construct a 'DatetimeTZDtype' from '{string}'\"\n        match = cls._match.match(string)\n        if match:\n            d = match.groupdict()\n            try:\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n            except (KeyError, TypeError, ValueError) as err:\n                # KeyError if maybe_get_tz tries and fails to get a\n                #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                # TypeError if we pass a nonsense tz;\n                # ValueError if we pass a unit other than \"ns\"\n                raise TypeError(msg) from err\n        raise TypeError(msg)",
        "begin_line": 734,
        "end_line": 767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#769",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return f\"datetime64[{self.unit}, {self.tz}]\"",
        "begin_line": 769,
        "end_line": 770,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#773",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 773,
        "end_line": 775,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#782",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 782,
        "end_line": 790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__setstate__#792",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state):\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to\n        # pickle -> need to set the settable private ones here (see GH26067)\n        self._tz = state[\"tz\"]\n        self._unit = state[\"unit\"]",
        "begin_line": 792,
        "end_line": 797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#887",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'PeriodDtype' from '{string}'\"\n        else:\n            msg = f\"'construct_from_string' expects a string, got {type(string)}\"\n        raise TypeError(msg)",
        "begin_line": 887,
        "end_line": 907,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#937",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 937,
        "end_line": 955,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008984725965858042,
            "pseudo_dstar_susp": 0.0008984725965858042,
            "pseudo_tarantula_susp": 0.0008992805755395684,
            "pseudo_op2_susp": 0.0008984725965858042,
            "pseudo_barinel_susp": 0.0008992805755395684
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1091",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            f\"Cannot construct a 'IntervalDtype' from '{string}'.\\n\\n\"\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1091,
        "end_line": 1110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1145",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1145,
        "end_line": 1161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000949667616334283,
            "pseudo_dstar_susp": 0.000949667616334283,
            "pseudo_tarantula_susp": 0.0009514747859181732,
            "pseudo_op2_susp": 0.000949667616334283,
            "pseudo_barinel_susp": 0.0009514747859181732
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints#86",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndexUIntEngine",
        "signature": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints(self, codes)",
        "snippet": "    def _codes_to_ints(self, codes):\n        \"\"\"\n        Transform combination(s) of uint64 in one uint64 (each), in a strictly\n        monotonic way (i.e. respecting the lexicographic order of integer\n        combinations): see BaseMultiIndexCodesEngine documentation.\n\n        Parameters\n        ----------\n        codes : 1- or 2-dimensional array of dtype uint64\n            Combinations of integers (one per row)\n\n        Returns\n        -------\n        scalar or 1-dimensional array, of dtype uint64\n            Integer(s) representing one combination (each).\n        \"\"\"\n        # Shift the representation of each level by the pre-calculated number\n        # of bits:\n        codes <<= self.offsets\n\n        # Now sum and OR are in fact interchangeable. This is a simple\n        # composition of the (disjunct) significant bits of each level (i.e.\n        # each column in \"codes\") in a single positive integer:\n        if codes.ndim == 1:\n            # Single key\n            return np.bitwise_or.reduce(codes)\n\n        # Multiple keys\n        return np.bitwise_or.reduce(codes, axis=1)",
        "begin_line": 86,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__new__#255",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity: bool=True, _set_identity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        levels=None,\n        codes=None,\n        sortorder=None,\n        names=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity: bool = True,\n        _set_identity: bool = True,\n    ):\n\n        # compat with Index\n        if name is not None:\n            names = name\n        if levels is None or codes is None:\n            raise TypeError(\"Must pass both levels and codes\")\n        if len(levels) != len(codes):\n            raise ValueError(\"Length of levels and codes must be the same.\")\n        if len(levels) == 0:\n            raise ValueError(\"Must pass non-zero number of levels/codes\")\n\n        result = object.__new__(MultiIndex)\n        result._cache = {}\n\n        # we've already validated levels and codes, so shortcut here\n        result._set_levels(levels, copy=copy, validate=False)\n        result._set_codes(codes, copy=copy, validate=False)\n\n        result._names = [None] * len(levels)\n        if names is not None:\n            # handles name validation\n            result._set_names(names)\n\n        if sortorder is not None:\n            result.sortorder = int(sortorder)\n        else:\n            result.sortorder = sortorder\n\n        if verify_integrity:\n            new_codes = result._verify_integrity()\n            result._codes = new_codes\n\n        if _set_identity:\n            result._reset_identity()\n\n        return result",
        "begin_line": 255,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_arrays#390",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_arrays(cls, arrays, sortorder=None, names=lib.no_default)",
        "snippet": "    def from_arrays(cls, arrays, sortorder=None, names=lib.no_default):\n        \"\"\"\n        Convert arrays to MultiIndex.\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        error_msg = \"Input must be a list / sequence of array-likes.\"\n        if not is_list_like(arrays):\n            raise TypeError(error_msg)\n        elif is_iterator(arrays):\n            arrays = list(arrays)\n\n        # Check if elements of array are list-like\n        for array in arrays:\n            if not is_list_like(array):\n                raise TypeError(error_msg)\n\n        # Check if lengths of all arrays are equal or not,\n        # raise ValueError, if not\n        for i in range(1, len(arrays)):\n            if len(arrays[i]) != len(arrays[i - 1]):\n                raise ValueError(\"all arrays must be same length\")\n\n        codes, levels = factorize_from_iterables(arrays)\n        if names is lib.no_default:\n            names = [getattr(arr, \"name\", None) for arr in arrays]\n\n        return MultiIndex(\n            levels=levels,\n            codes=codes,\n            sortorder=sortorder,\n            names=names,\n            verify_integrity=False,\n        )",
        "begin_line": 390,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_tuples#456",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_tuples(cls, tuples, sortorder=None, names=None)",
        "snippet": "    def from_tuples(cls, tuples, sortorder=None, names=None):\n        \"\"\"\n        Convert list of tuples to MultiIndex.\n\n        Parameters\n        ----------\n        tuples : list / sequence of tuple-likes\n            Each tuple is the index of one row/column.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> tuples = [(1, 'red'), (1, 'blue'),\n        ...           (2, 'red'), (2, 'blue')]\n        >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        if not is_list_like(tuples):\n            raise TypeError(\"Input must be a list / sequence of tuple-likes.\")\n        elif is_iterator(tuples):\n            tuples = list(tuples)\n\n        if len(tuples) == 0:\n            if names is None:\n                raise TypeError(\"Cannot infer number of levels from empty list\")\n            arrays = [[]] * len(names)\n        elif isinstance(tuples, (np.ndarray, Index)):\n            if isinstance(tuples, Index):\n                tuples = tuples._values\n\n            arrays = list(lib.tuples_to_object_array(tuples).T)\n        elif isinstance(tuples, list):\n            arrays = list(lib.to_object_array_tuples(tuples).T)\n        else:\n            arrays = zip(*tuples)\n\n        return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)",
        "begin_line": 456,
        "end_line": 511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._values#641",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._values(self)",
        "snippet": "    def _values(self):\n        # We override here, since our parent uses _data, which we don't use.\n        return self.values",
        "begin_line": 641,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.values#646",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.values(self)",
        "snippet": "    def values(self):\n        if self._tuples is not None:\n            return self._tuples\n\n        values = []\n\n        for i in range(self.nlevels):\n            vals = self._get_level_values(i)\n            if is_categorical_dtype(vals):\n                vals = vals._internal_get_values()\n            if isinstance(vals.dtype, ExtensionDtype) or hasattr(vals, \"_box_values\"):\n                vals = vals.astype(object)\n            vals = np.array(vals, copy=False)\n            values.append(vals)\n\n        self._tuples = lib.fast_zip(values)\n        return self._tuples",
        "begin_line": 646,
        "end_line": 662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__len__#688",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.codes[0])",
        "begin_line": 688,
        "end_line": 689,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levels#695",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levels(self)",
        "snippet": "    def levels(self):\n        # Use cache_readonly to ensure that self.get_locs doesn't repeatedly\n        # create new IndexEngine\n        # https://github.com/pandas-dev/pandas/issues/31648\n        result = [\n            x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)\n        ]\n        for level in result:\n            # disallow midx.levels[0].name = \"foo\"\n            level._no_setting_name = True\n        return FrozenList(result)",
        "begin_line": 695,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_levels#707",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_levels(\n        self, levels, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        # This is NOT part of the levels property because it should be\n        # externally not allowed to set levels. User beware if you change\n        # _levels directly\n        if validate:\n            if len(levels) == 0:\n                raise ValueError(\"Must set non-zero number of levels.\")\n            if level is None and len(levels) != self.nlevels:\n                raise ValueError(\"Length of levels must match number of levels.\")\n            if level is not None and len(levels) != len(level):\n                raise ValueError(\"Length of levels must match length of level.\")\n\n        if level is None:\n            new_levels = FrozenList(\n                ensure_index(lev, copy=copy)._shallow_copy() for lev in levels\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_levels = list(self._levels)\n            for lev_num, lev in zip(level_numbers, levels):\n                new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n            new_levels = FrozenList(new_levels)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(levels=new_levels)\n            self._codes = new_codes\n\n        names = self.names\n        self._levels = new_levels\n        if any(names):\n            self._set_names(names)\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 707,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.nlevels#834",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Integer number of levels in this MultiIndex.\n        \"\"\"\n        return len(self._levels)",
        "begin_line": 834,
        "end_line": 838,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.codes#851",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.codes(self)",
        "snippet": "    def codes(self):\n        return self._codes",
        "begin_line": 851,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_codes#854",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_codes(\n        self, codes, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        if validate:\n            if level is None and len(codes) != self.nlevels:\n                raise ValueError(\"Length of codes must match number of levels\")\n            if level is not None and len(codes) != len(level):\n                raise ValueError(\"Length of codes must match length of levels.\")\n\n        if level is None:\n            new_codes = FrozenList(\n                _coerce_indexer_frozen(level_codes, lev, copy=copy).view()\n                for lev, level_codes in zip(self._levels, codes)\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_codes = list(self._codes)\n            for lev_num, level_codes in zip(level_numbers, codes):\n                lev = self.levels[lev_num]\n                new_codes[lev_num] = _coerce_indexer_frozen(level_codes, lev, copy=copy)\n            new_codes = FrozenList(new_codes)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(codes=new_codes)\n\n        self._codes = new_codes\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 854,
        "end_line": 882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._engine#964",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # Calculate the number of bits needed to represent labels in each\n        # level, as log2 of their sizes (including -1 for NaN):\n        sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n        # Sum bit counts, starting from the _right_....\n        lev_bits = np.cumsum(sizes[::-1])[::-1]\n\n        # ... in order to obtain offsets such that sorting the combination of\n        # shifted codes (one for each level, resulting in a unique integer) is\n        # equivalent to sorting lexicographically the codes themselves. Notice\n        # that each level needs to be shifted by the number of bits needed to\n        # represent the _previous_ ones:\n        offsets = np.concatenate([lev_bits[1:], [0]]).astype(\"uint64\")\n\n        # Check the total number of bits needed for our representation:\n        if lev_bits[0] > 64:\n            # The levels would overflow a 64 bit uint - use Python integers:\n            return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n        return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
        "begin_line": 964,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__contains__#1102",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        hash(key)\n        try:\n            self.get_loc(key)\n            return True\n        except (LookupError, TypeError, ValueError):\n            return False",
        "begin_line": 1102,
        "end_line": 1108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.dtype#1111",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(\"O\")",
        "begin_line": 1111,
        "end_line": 1112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_names#1287",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList(self._names)",
        "begin_line": 1287,
        "end_line": 1288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_names#1290",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_names(self, names, level=None, validate=True)",
        "snippet": "    def _set_names(self, names, level=None, validate=True):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n        validate : boolean, default True\n            validate that the names match level lengths\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n\n        Notes\n        -----\n        sets names on levels. WARNING: mutates!\n\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        # GH 15110\n        # Don't allow a single string for names in a MultiIndex\n        if names is not None and not is_list_like(names):\n            raise ValueError(\"Names should be list-like for a MultiIndex\")\n        names = list(names)\n\n        if validate:\n            if level is not None and len(names) != len(level):\n                raise ValueError(\"Length of names must match length of level.\")\n            if level is None and len(names) != self.nlevels:\n                raise ValueError(\n                    \"Length of names must match number of levels in MultiIndex.\"\n                )\n\n        if level is None:\n            level = range(self.nlevels)\n        else:\n            level = [self._get_level_number(lev) for lev in level]\n\n        # set the name\n        for lev, name in zip(level, names):\n            if name is not None:\n                # GH 20527\n                # All items in 'names' need to be hashable:\n                if not is_hashable(name):\n                    raise TypeError(\n                        f\"{type(self).__name__}.name must be a hashable type\"\n                    )\n            self._names[lev] = name\n\n        # If .levels has been accessed, the names in our cache will be stale.\n        self._reset_cache()",
        "begin_line": 1290,
        "end_line": 1346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.inferred_type#1392",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"mixed\"",
        "begin_line": 1392,
        "end_line": 1393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_number#1395",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_number(self, level)",
        "snippet": "    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError as err:\n            if not is_integer(level):\n                raise KeyError(f\"Level {level} not found\") from err\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        f\"Too many levels: Index has only {self.nlevels} levels, \"\n                        f\"{orig_level} is not a valid level number\"\n                    ) from err\n            # Note: levels are zero-based\n            elif level >= self.nlevels:\n                raise IndexError(\n                    f\"Too many levels: Index has only {self.nlevels} levels, \"\n                    f\"not {level + 1}\"\n                ) from err\n        return level",
        "begin_line": 1395,
        "end_line": 1420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_values#1491",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_values(self, level, unique=False)",
        "snippet": "    def _get_level_values(self, level, unique=False):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index\n\n        **this is an internal method**\n\n        Parameters\n        ----------\n        level : int level\n        unique : bool, default False\n            if True, drop duplicated values\n\n        Returns\n        -------\n        values : ndarray\n        \"\"\"\n        lev = self.levels[level]\n        level_codes = self.codes[level]\n        name = self._names[level]\n        if unique:\n            level_codes = algos.unique(level_codes)\n        filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n        return lev._shallow_copy(filled, name=name)",
        "begin_line": 1491,
        "end_line": 1514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.lexsort_depth#1659",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.lexsort_depth(self)",
        "snippet": "    def lexsort_depth(self):\n        if self.sortorder is not None:\n            return self.sortorder\n\n        return self._lexsort_depth()",
        "begin_line": 1659,
        "end_line": 1663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._lexsort_depth#1665",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._lexsort_depth(self)",
        "snippet": "    def _lexsort_depth(self) -> int:\n        \"\"\"\n        Compute and return the lexsort_depth, the number of levels of the\n        MultiIndex that are sorted lexically\n\n        Returns\n        -------\n        int\n        \"\"\"\n        int64_codes = [ensure_int64(level_codes) for level_codes in self.codes]\n        for k in range(self.nlevels, 0, -1):\n            if libalgos.is_lexsorted(int64_codes[:k]):\n                return k\n        return 0",
        "begin_line": 1665,
        "end_line": 1678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__getitem__#1846",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n\n            retval = []\n            for lev, level_codes in zip(self.levels, self.codes):\n                if level_codes[key] == -1:\n                    retval.append(np.nan)\n                else:\n                    retval.append(lev[level_codes[key]])\n\n            return tuple(retval)\n        else:\n            if com.is_bool_indexer(key):\n                key = np.asarray(key, dtype=bool)\n                sortorder = self.sortorder\n            else:\n                # cannot be sure whether the result will be sorted\n                sortorder = None\n\n                if isinstance(key, Index):\n                    key = np.asarray(key)\n\n            new_codes = [level_codes[key] for level_codes in self.codes]\n\n            return MultiIndex(\n                levels=self.levels,\n                codes=new_codes,\n                names=self.names,\n                sortorder=sortorder,\n                verify_integrity=False,\n            )",
        "begin_line": 1846,
        "end_line": 1877,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.take#1880",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        taken = self._assert_take_fillable(\n            self.codes,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=-1,\n        )\n        return MultiIndex(\n            levels=self.levels, codes=taken, names=self.names, verify_integrity=False\n        )",
        "begin_line": 1880,
        "end_line": 1892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable#1894",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=None\n    ):\n        \"\"\" Internal method to handle NA filling of take \"\"\"\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = [lab.take(indices) for lab in self.codes]\n            mask = indices == -1\n            if mask.any():\n                masked = []\n                for new_label in taken:\n                    label_values = new_label\n                    label_values[mask] = na_value\n                    masked.append(np.asarray(label_values))\n                taken = masked\n        else:\n            taken = [lab.take(indices) for lab in self.codes]\n        return taken",
        "begin_line": 1894,
        "end_line": 1917,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.reindex#2221",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values as necessary)\n\n        Returns\n        -------\n        new_index : pd.MultiIndex\n            Resulting index\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"names\")\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n\n            # GH7774: preserve dtype/tz if target is empty and not an Index.\n            # target may be an iterator\n            target = ibase._ensure_has_len(target)\n            if len(target) == 0 and not isinstance(target, Index):\n                idx = self.levels[level]\n                attrs = idx._get_attributes_dict()\n                attrs.pop(\"freq\", None)  # don't preserve freq\n                target = type(idx)._simple_new(np.empty(0, dtype=idx.dtype), **attrs)\n            else:\n                target = ensure_index(target)\n            target, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True, keep_order=False\n            )\n        else:\n            target = ensure_index(target)\n            if self.equals(target):\n                indexer = None\n            else:\n                if self.is_unique:\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    raise ValueError(\"cannot handle a non-unique multi-index!\")\n\n        if not isinstance(target, MultiIndex):\n            if indexer is None:\n                target = self\n            elif (indexer >= 0).all():\n                target = self.take(indexer)\n            else:\n                # hopefully?\n                target = MultiIndex.from_tuples(target)\n\n        if (\n            preserve_names\n            and target.nlevels == self.nlevels\n            and target.names != self.names\n        ):\n            target = target.copy(deep=False)\n            target.names = self.names\n\n        return target, indexer",
        "begin_line": 2221,
        "end_line": 2283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_indexer#2383",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n\n        # empty indexer\n        if is_list_like(target) and not len(target):\n            return ensure_platform_int(np.array([]))\n\n        if not isinstance(target, MultiIndex):\n            try:\n                target = MultiIndex.from_tuples(target)\n            except (TypeError, ValueError):\n\n                # let's instead try with a straight Index\n                if method is None:\n                    return Index(self._values).get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n\n        if not self.is_unique:\n            raise ValueError(\"Reindexing only valid with uniquely valued Index objects\")\n\n        if method == \"pad\" or method == \"backfill\":\n            if tolerance is not None:\n                raise NotImplementedError(\n                    \"tolerance not implemented yet for MultiIndex\"\n                )\n            indexer = self._engine.get_indexer(target, method, limit)\n        elif method == \"nearest\":\n            raise NotImplementedError(\n                \"method='nearest' not implemented yet \"\n                \"for MultiIndex; see GitHub issue 9365\"\n            )\n        else:\n            indexer = self._engine.get_indexer(target)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2383,
        "end_line": 2419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_loc_single_level_index#2562",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_loc_single_level_index(self, level_index: Index, key: Hashable)",
        "snippet": "    def _get_loc_single_level_index(self, level_index: Index, key: Hashable) -> int:\n        \"\"\"\n        If key is NA value, location of index unify as -1.\n\n        Parameters\n        ----------\n        level_index: Index\n        key : label\n\n        Returns\n        -------\n        loc : int\n            If key is NA value, loc is -1\n            Else, location of key in index.\n\n        See Also\n        --------\n        Index.get_loc : The get_loc method for (single-level) index.\n        \"\"\"\n        if is_scalar(key) and isna(key):\n            return -1\n        else:\n            return level_index.get_loc(key)",
        "begin_line": 2562,
        "end_line": 2584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_loc#2586",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_loc(self, key, method=None)",
        "snippet": "    def get_loc(self, key, method=None):\n        \"\"\"\n        Get location for a label or a tuple of labels as an integer, slice or\n        boolean mask.\n\n        Parameters\n        ----------\n        key : label or tuple of labels (one for each level)\n        method : None\n\n        Returns\n        -------\n        loc : int, slice object or boolean mask\n            If the key is past the lexsort depth, the return may be a\n            boolean mask array, otherwise it is always a slice or int.\n\n        See Also\n        --------\n        Index.get_loc : The get_loc method for (single-level) index.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n\n        Notes\n        -----\n        The key cannot be a slice, list of same-level labels, a boolean mask,\n        or a sequence of such. If you want to use those, use\n        :meth:`MultiIndex.get_locs` instead.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_loc('b')\n        slice(1, 3, None)\n\n        >>> mi.get_loc(('b', 'e'))\n        1\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                \"only the default get_loc method is \"\n                \"currently supported for MultiIndex\"\n            )\n\n        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask\n\n        if not isinstance(key, (tuple, list)):\n            # not including list here breaks some indexing, xref #30892\n            loc = self._get_level_indexer(key, level=0)\n            return _maybe_to_slice(loc)\n\n        keylen = len(key)\n        if self.nlevels < keylen:\n            raise KeyError(\n                f\"Key length ({keylen}) exceeds index depth ({self.nlevels})\"\n            )\n\n        if keylen == self.nlevels and self.is_unique:\n            return self._engine.get_loc(key)\n\n        # -- partial selection or non-unique index\n        # break the key into 2 parts based on the lexsort_depth of the index;\n        # the first part returns a continuous slice of the index; the 2nd part\n        # needs linear search within the slice\n        i = self.lexsort_depth\n        lead_key, follow_key = key[:i], key[i:]\n        start, stop = (\n            self.slice_locs(lead_key, lead_key) if lead_key else (0, len(self))\n        )\n\n        if start == stop:\n            raise KeyError(key)\n\n        if not follow_key:\n            return slice(start, stop)\n\n        warnings.warn(\n            \"indexing past lexsort depth may impact performance.\",\n            PerformanceWarning,\n            stacklevel=10,\n        )\n\n        loc = np.arange(start, stop, dtype=\"int64\")\n\n        for i, k in enumerate(follow_key, len(lead_key)):\n            mask = self.codes[i][loc] == self._get_loc_single_level_index(\n                self.levels[i], k\n            )\n            if not mask.all():\n                loc = loc[mask]\n            if not len(loc):\n                raise KeyError(key)\n\n        return _maybe_to_slice(loc) if len(loc) != stop - start else slice(start, stop)",
        "begin_line": 2586,
        "end_line": 2693,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice#2632",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice(loc)",
        "snippet": "        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask",
        "begin_line": 2632,
        "end_line": 2644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_indexer#2834",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_indexer(self, key, level=0, indexer=None)",
        "snippet": "    def _get_level_indexer(self, key, level=0, indexer=None):\n        # return an indexer, boolean array or a slice showing where the key is\n        # in the totality of values\n        # if the indexer is provided, then use this\n\n        level_index = self.levels[level]\n        level_codes = self.codes[level]\n\n        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)\n                m = np.asarray(m)\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m\n\n        if isinstance(key, slice):\n            # handle a slice, returning a slice if we can\n            # otherwise a boolean indexer\n\n            try:\n                if key.start is not None:\n                    start = level_index.get_loc(key.start)\n                else:\n                    start = 0\n                if key.stop is not None:\n                    stop = level_index.get_loc(key.stop)\n                else:\n                    stop = len(level_index) - 1\n                step = key.step\n            except KeyError:\n\n                # we have a partial slice (like looking up a partial date\n                # string)\n                start = stop = level_index.slice_indexer(\n                    key.start, key.stop, key.step, kind=\"loc\"\n                )\n                step = start.step\n\n            if isinstance(start, slice) or isinstance(stop, slice):\n                # we have a slice for start and/or stop\n                # a partial date slicer on a DatetimeIndex generates a slice\n                # note that the stop ALREADY includes the stopped point (if\n                # it was a string sliced)\n                start = getattr(start, \"start\", start)\n                stop = getattr(stop, \"stop\", stop)\n                return convert_indexer(start, stop, step)\n\n            elif level > 0 or self.lexsort_depth == 0 or step is not None:\n                # need to have like semantics here to right\n                # searching as when we are using a slice\n                # so include the stop+1 (so we include stop)\n                return convert_indexer(start, stop + 1, step)\n            else:\n                # sorted, so can return slice object -> view\n                i = level_codes.searchsorted(start, side=\"left\")\n                j = level_codes.searchsorted(stop, side=\"right\")\n                return slice(i, j, step)\n\n        else:\n\n            code = self._get_loc_single_level_index(level_index, key)\n\n            if level > 0 or self.lexsort_depth == 0:\n                # Desired level is not sorted\n                locs = np.array(level_codes == code, dtype=bool, copy=False)\n                if not locs.any():\n                    # The label is present in self.levels[level] but unused:\n                    raise KeyError(key)\n                return locs\n\n            i = level_codes.searchsorted(code, side=\"left\")\n            j = level_codes.searchsorted(code, side=\"right\")\n            if i == j:\n                # The label is present in self.levels[level] but unused:\n                raise KeyError(key)\n            return slice(i, j)",
        "begin_line": 2834,
        "end_line": 2930,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.convert_indexer#2842",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.convert_indexer(start, stop, step, indexer=indexer, codes=level_codes)",
        "snippet": "        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)\n                m = np.asarray(m)\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m",
        "begin_line": 2842,
        "end_line": 2868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.equals#3152",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two MultiIndex objects have the same labeling information\n        (the levels themselves do not necessarily have to be the same)\n\n        See Also\n        --------\n        equal_levels\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if not isinstance(other, MultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            if not is_object_dtype(other.dtype):\n                # other cannot contain tuples, so cannot match self\n                return False\n\n            return array_equivalent(self._values, other._values)\n\n        if self.nlevels != other.nlevels:\n            return False\n\n        if len(self) != len(other):\n            return False\n\n        for i in range(self.nlevels):\n            self_codes = self.codes[i]\n            self_codes = self_codes[self_codes != -1]\n            self_values = algos.take_nd(\n                np.asarray(self.levels[i]._values), self_codes, allow_fill=False\n            )\n\n            other_codes = other.codes[i]\n            other_codes = other_codes[other_codes != -1]\n            other_values = algos.take_nd(\n                np.asarray(other.levels[i]._values), other_codes, allow_fill=False\n            )\n\n            # since we use NaT both datetime64 and timedelta64\n            # we can have a situation where a level is typed say\n            # timedelta64 in self (IOW it has other values than NaT)\n            # but types datetime64 in other (where its all NaT)\n            # but these are equivalent\n            if len(self_values) == 0 and len(other_values) == 0:\n                continue\n\n            if not array_equivalent(self_values, other_values):\n                return False\n\n        return True",
        "begin_line": 3152,
        "end_line": 3205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi.maybe_droplevels#3552",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi.maybe_droplevels(index, key)",
        "snippet": "def maybe_droplevels(index, key):\n    \"\"\"\n    Attempt to drop level or levels from the given index.\n\n    Parameters\n    ----------\n    index: Index\n    key : scalar or tuple\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # drop levels\n    original_index = index\n    if isinstance(key, tuple):\n        for _ in key:\n            try:\n                index = index.droplevel(0)\n            except ValueError:\n                # we have dropped too much, so back out\n                return original_index\n    else:\n        try:\n            index = index.droplevel(0)\n        except ValueError:\n            pass\n\n    return index",
        "begin_line": 3552,
        "end_line": 3580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.multi._coerce_indexer_frozen#3583",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._coerce_indexer_frozen(array_like, categories, copy: bool=False)",
        "snippet": "def _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:\n    \"\"\"\n    Coerce the array_like indexer to the smallest integer dtype that can encode all\n    of the given categories.\n\n    Parameters\n    ----------\n    array_like : array-like\n    categories : array-like\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n        Non-writeable.\n    \"\"\"\n    array_like = coerce_indexer_dtype(array_like, categories)\n    if copy:\n        array_like = array_like.copy()\n    array_like.flags.writeable = False\n    return array_like",
        "begin_line": 3583,
        "end_line": 3603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#50",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, data, cls)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n\n        subarr = np.asarray(subarr)\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002284669865204478,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#82",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            raise ValueError(\n                f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            )",
        "begin_line": 82,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011534025374855825,
            "pseudo_dstar_susp": 0.001152073732718894,
            "pseudo_tarantula_susp": 0.0012077294685990338,
            "pseudo_op2_susp": 0.001152073732718894,
            "pseudo_barinel_susp": 0.0012077294685990338
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#106",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        if values is not None and not self._can_hold_na and values.dtype.kind == \"f\":\n            name = self.name if name is lib.no_default else name\n            # Ensure we are not returning an Int64Index with float data:\n            return Float64Index._simple_new(values, name=name)\n        return super()._shallow_copy(values=values, name=name)",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023239600278875203,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#155",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.inferred_type#242",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``Int64Index`` and ``UInt64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 242,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023126734505087883,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.shape#405",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        \"\"\"\n        Return a tuple of the array dimensions.\n        \"\"\"\n        return (len(self),)",
        "begin_line": 405,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#69",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : str or dtype\n    \"\"\"\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), \"object\"\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), \"object\"\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall through to here\n        return ensure_object(values), \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\"",
        "begin_line": 69,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003105590062111801,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.003115264797507788,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.003115264797507788
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#175",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        if is_datetime64_dtype(dtype):\n            dtype = \"datetime64[ns]\"\n        elif is_timedelta64_dtype(dtype):\n            dtype = \"timedelta64[ns]\"\n\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 175,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#208",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 208,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#250",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 250,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#258",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#267",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 267,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003105590062111801,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.003115264797507788,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.003115264797507788
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#457",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None)",
        "snippet": "def _factorize_array(\n    values, na_sentinel: int = -1, size_hint=None, na_value=None\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Factorize an array-like to codes and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passsed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n\n    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, codes = table.factorize(values, na_sentinel=na_sentinel, na_value=na_value)\n\n    codes = ensure_platform_int(codes)\n    return codes, uniques",
        "begin_line": 457,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#513",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, na_sentinel: int=-1, size_hint: Optional[int]=None)",
        "snippet": "def factorize(\n    values, sort: bool = False, na_sentinel: int = -1, size_hint: Optional[int] = None\n) -> Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]:\n    \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n\n    This method is useful for obtaining a numeric representation of an\n    array when all that matters is identifying distinct values. `factorize`\n    is available as both a top-level function :func:`pandas.factorize`,\n    and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\n    Parameters\n    ----------\n    {values}{sort}\n    na_sentinel : int, default -1\n        Value to mark \"not found\".\n    {size_hint}\\\n\n    Returns\n    -------\n    codes : ndarray\n        An integer ndarray that's an indexer into `uniques`.\n        ``uniques.take(codes)`` will have the same values as `values`.\n    uniques : ndarray, Index, or Categorical\n        The unique valid values. When `values` is Categorical, `uniques`\n        is a Categorical. When `values` is some other pandas object, an\n        `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n        .. note ::\n\n           Even if there's a missing value in `values`, `uniques` will\n           *not* contain an entry for it.\n\n    See Also\n    --------\n    cut : Discretize continuous-valued array.\n    unique : Find the unique value in an array.\n\n    Examples\n    --------\n    These examples all show factorize as a top-level method like\n    ``pd.factorize(values)``. The results are identical for methods like\n    :meth:`Series.factorize`.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n    >>> codes\n    array([0, 0, 1, 2, 0])\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    With ``sort=True``, the `uniques` will be sorted, and `codes` will be\n    shuffled so that the relationship is the maintained.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n    >>> codes\n    array([1, 1, 0, 2, 1])\n    >>> uniques\n    array(['a', 'b', 'c'], dtype=object)\n\n    Missing values are indicated in `codes` with `na_sentinel`\n    (``-1`` by default). Note that missing values are never\n    included in `uniques`.\n\n    >>> codes, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n    >>> codes\n    array([ 0, -1,  1,  2,  0])\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    Thus far, we've only factorized lists (which are internally coerced to\n    NumPy arrays). When factorizing pandas objects, the type of `uniques`\n    will differ. For Categoricals, a `Categorical` is returned.\n\n    >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1])\n    >>> uniques\n    [a, c]\n    Categories (3, object): [a, b, c]\n\n    Notice that ``'b'`` is in ``uniques.categories``, despite not being\n    present in ``cat.values``.\n\n    For all other pandas objects, an Index of the appropriate type is\n    returned.\n\n    >>> cat = pd.Series(['a', 'a', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1])\n    >>> uniques\n    Index(['a', 'c'], dtype='object')\n    \"\"\"\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values):\n        values = extract_array(values)\n        codes, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        codes, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        uniques, codes = safe_sort(\n            uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return codes, uniques",
        "begin_line": 513,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#903",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 903,
        "end_line": 976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1431",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim: int, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(\n    ndim: int, arr_dtype, out_dtype, axis: int = 0, mask_info=None\n):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1431,
        "end_line": 1464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012121212121212121,
            "pseudo_dstar_susp": 0.0012106537530266344,
            "pseudo_tarantula_susp": 0.0012738853503184713,
            "pseudo_op2_susp": 0.0012106537530266344,
            "pseudo_barinel_susp": 0.0012738853503184713
        }
    },
    {
        "name": "pandas.core.algorithms.take#1467",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take(arr, indices, axis: int=0, allow_fill: bool=False, fill_value=None)",
        "snippet": "def take(arr, indices, axis: int = 0, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
        "begin_line": 1467,
        "end_line": 1557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1560",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis: int=0, out=None, fill_value=np.nan, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr, indexer, axis: int = 0, out=None, fill_value=np.nan, allow_fill: bool = True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n    mask_info = None\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                mask = indexer == -1\n                needs_masking = mask.any()\n                mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._data.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1560,
        "end_line": 1661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013333333333333333,
            "pseudo_dstar_susp": 0.0013227513227513227,
            "pseudo_tarantula_susp": 0.0014005602240896359,
            "pseudo_op2_susp": 0.0013227513227513227,
            "pseudo_barinel_susp": 0.0014005602240896359
        }
    },
    {
        "name": "pandas.core.algorithms.safe_sort#1935",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.safe_sort(values, codes=None, na_sentinel: int=-1, assume_unique: bool=False, verify: bool=True)",
        "snippet": "def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,\n    verify: bool = True,\n) -> Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``codes``.\n\n    ``values`` should be unique if ``codes`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``codes`` is not None.\n    codes : list_like, optional\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``codes`` to mark \"not found\".\n        Ignored when ``codes`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``codes`` is None.\n    verify : bool, default True\n        Check if codes are out of bound for the values and put out of bound\n        codes equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound codes. Ignored when ``codes`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_codes : ndarray\n        Reordered ``codes``; returned when ``codes`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``codes`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``codes`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # codes:\n\n    if codes is None:\n        return ordered\n\n    if not is_list_like(codes):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to \"\n            \"be passed to safe_sort as codes\"\n        )\n    codes = ensure_platform_int(np.asarray(codes))\n\n    if not assume_unique and not len(unique(values)) == len(values):\n        raise ValueError(\"values should be unique if codes is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = _get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_codes = take_1d(order2, codes, fill_value=-1)\n        if verify:\n            mask = (codes < -len(values)) | (codes >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_codes = reverse_indexer.take(codes, mode=\"wrap\")\n\n        mask = codes == na_sentinel\n        if verify:\n            mask = mask | (codes < -len(values)) | (codes >= len(values))\n\n    if mask is not None:\n        np.putmask(new_codes, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_codes)",
        "begin_line": 1935,
        "end_line": 2060,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.algorithms.sort_mixed#1994",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 1994,
        "end_line": 1999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#130",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks: Tuple[Block, ...] = tuple(blocks)\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    f\"Number of Block dimensions ({block.ndim}) must equal \"\n                    f\"number of axes ({self.ndim})\"\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        # Populate known_consolidate, blknos, and blklocs lazily\n        self._known_consolidated = False\n        self._blknos = None\n        self._blklocs = None",
        "begin_line": 130,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001303780964797914,
            "pseudo_dstar_susp": 0.0196078431372549,
            "pseudo_tarantula_susp": 0.0012422360248447205,
            "pseudo_op2_susp": 0.0196078431372549,
            "pseudo_barinel_susp": 0.0012422360248447205
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.from_blocks#155",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(cls, blocks: List[Block], axes: List[Index]):\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        return cls(blocks, axes, do_integrity_check=False)",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00022742779167614282,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blknos#162",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blknos(self)",
        "snippet": "    def blknos(self):\n        \"\"\"\n        Suppose we want to find the array corresponding to our i'th column.\n\n        blknos[i] identifies the block from self.blocks that contains this column.\n\n        blklocs[i] identifies the column of interest within\n        self.blocks[self.blknos[i]]\n        \"\"\"\n        if self._blknos is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blknos",
        "begin_line": 162,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023084025854108956,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blklocs#178",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blklocs(self)",
        "snippet": "    def blklocs(self):\n        \"\"\"\n        See blknos.__doc__\n        \"\"\"\n        if self._blklocs is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blklocs",
        "begin_line": 178,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023266635644485808,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#211",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 211,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012360939431396785,
            "pseudo_dstar_susp": 0.018518518518518517,
            "pseudo_tarantula_susp": 0.0009794319294809011,
            "pseudo_op2_susp": 0.018518518518518517,
            "pseudo_barinel_susp": 0.0009794319294809011
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#215",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.axes)",
        "begin_line": 215,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011098779134295228,
            "pseudo_dstar_susp": 0.0011098779134295228,
            "pseudo_tarantula_susp": 0.0011160714285714285,
            "pseudo_op2_susp": 0.0011098779134295228,
            "pseudo_barinel_susp": 0.0011160714285714285
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set_axis#218",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set_axis(self, axis: int, new_labels: Index)",
        "snippet": "    def set_axis(self, axis: int, new_labels: Index) -> None:\n        # Caller is responsible for ensuring we have an Index object.\n        old_len = len(self.axes[axis])\n        new_len = len(new_labels)\n\n        if new_len != old_len:\n            raise ValueError(\n                f\"Length mismatch: Expected axis has {old_len} elements, new \"\n                f\"values have {new_len} elements\"\n            )\n\n        self.axes[axis] = new_labels",
        "begin_line": 218,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025329280648429586,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._is_single_block#232",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._is_single_block(self)",
        "snippet": "    def _is_single_block(self) -> bool:\n        if self.ndim == 1:\n            return True\n\n        if len(self.blocks) != 1:\n            return False\n\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1\n        )",
        "begin_line": 232,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#244",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self) -> None:\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            # TODO: can we avoid this?  it isn't cheap\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 244,
        "end_line": 263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#266",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self) -> Index:\n        return self.axes[0]",
        "begin_line": 266,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011098779134295228,
            "pseudo_dstar_susp": 0.0011098779134295228,
            "pseudo_tarantula_susp": 0.0011160714285714285,
            "pseudo_op2_susp": 0.0011098779134295228,
            "pseudo_barinel_susp": 0.0011160714285714285
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_dtypes#281",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_dtypes(self)",
        "snippet": "    def get_dtypes(self):\n        dtypes = np.array([blk.dtype for blk in self.blocks])\n        return algos.take_1d(dtypes, self.blknos, allow_fill=False)",
        "begin_line": 281,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025680534155110427,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__getstate__#285",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__getstate__(self)",
        "snippet": "    def __getstate__(self):\n        block_values = [b.values for b in self.blocks]\n        block_items = [self.items[b.mgr_locs.indexer] for b in self.blocks]\n        axes_array = list(self.axes)\n\n        extra_state = {\n            \"0.14.1\": {\n                \"axes\": axes_array,\n                \"blocks\": [\n                    dict(values=b.values, mgr_locs=b.mgr_locs.indexer)\n                    for b in self.blocks\n                ],\n            }\n        }\n\n        # First three elements of the state are to maintain forward\n        # compatibility with 0.13.1.\n        return axes_array, block_values, block_items, extra_state",
        "begin_line": 285,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__setstate__#304",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state):\n        def unpickle_block(values, mgr_locs):\n            return make_block(values, placement=mgr_locs)\n\n        if isinstance(state, tuple) and len(state) >= 4 and \"0.14.1\" in state[3]:\n            state = state[3][\"0.14.1\"]\n            self.axes = [ensure_index(ax) for ax in state[\"axes\"]]\n            self.blocks = tuple(\n                unpickle_block(b[\"values\"], b[\"mgr_locs\"]) for b in state[\"blocks\"]\n            )\n        else:\n            raise NotImplementedError(\"pre-0.14.1 pickles are no longer supported\")\n\n        self._post_setstate()",
        "begin_line": 304,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.unpickle_block#305",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.unpickle_block(values, mgr_locs)",
        "snippet": "        def unpickle_block(values, mgr_locs):\n            return make_block(values, placement=mgr_locs)",
        "begin_line": 305,
        "end_line": 306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._post_setstate#319",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._post_setstate(self)",
        "snippet": "    def _post_setstate(self) -> None:\n        self._is_consolidated = False\n        self._known_consolidated = False\n        self._rebuild_blknos_and_blklocs()",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#324",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 324,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000224517287831163,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__repr__#327",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        output = type(self).__name__\n        for i, ax in enumerate(self.axes):\n            if i == 0:\n                output += f\"\\nItems: {ax}\"\n            else:\n                output += f\"\\nAxis {i}: {ax}\"\n\n        for block in self.blocks:\n            output += f\"\\n{pprint_thing(block)}\"\n        return output",
        "begin_line": 327,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#339",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self) -> None:\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                f\"block items\\n# manager items: {len(self.items)}, # \"\n                f\"tot_items: {tot_items}\"\n            )",
        "begin_line": 339,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014534883720930232,
            "pseudo_dstar_susp": 0.0625,
            "pseudo_tarantula_susp": 0.0012422360248447205,
            "pseudo_op2_susp": 0.0625,
            "pseudo_barinel_susp": 0.0012422360248447205
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#378",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self: T, f, filter=None, align_keys=None, **kwargs)",
        "snippet": "    def apply(self: T, f, filter=None, align_keys=None, **kwargs) -> T:\n        \"\"\"\n        Iterate over the blocks, collect and create a new BlockManager.\n\n        Parameters\n        ----------\n        f : str or callable\n            Name of the Block method to apply.\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        align_keys = align_keys or []\n        result_blocks = []\n        # fillna: Series/DataFrame is responsible for making sure value is aligned\n\n        # filter kwarg is used in replace-* family of methods\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                # All items are included, as if there were no filtering\n                filter = None\n            else:\n                kwargs[\"filter\"] = filter_locs\n\n        self._consolidate_inplace()\n\n        align_copy = False\n        if f == \"where\":\n            align_copy = True\n\n        aligned_args = {\n            k: kwargs[k]\n            for k in align_keys\n            if isinstance(kwargs[k], (ABCSeries, ABCDataFrame))\n        }\n\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n\n                for k, obj in aligned_args.items():\n                    axis = obj._info_axis_number\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:\n                applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(self.axes)\n\n        return type(self).from_blocks(result_blocks, self.axes)",
        "begin_line": 378,
        "end_line": 440,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026588673225206064,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.astype#585",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(\n        self, dtype, copy: bool = False, errors: str = \"raise\"\n    ) -> \"BlockManager\":\n        return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 585,
        "end_line": 588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.convert#590",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ) -> \"BlockManager\":\n        return self.apply(\n            \"convert\",\n            copy=copy,\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n        )",
        "begin_line": 590,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.replace_list#611",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.replace_list(self, src_list, dest_list, inplace: bool=False, regex: bool=False)",
        "snippet": "    def replace_list(\n        self, src_list, dest_list, inplace: bool = False, regex: bool = False\n    ) -> \"BlockManager\":\n        \"\"\" do a list replace \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        # figure out our mask a-priori to avoid repeated replacements\n        values = self.as_array()\n\n        def comp(s, regex=False):\n            \"\"\"\n            Generate a bool array by perform an equality check, or perform\n            an element-wise regular expression matching\n            \"\"\"\n            if isna(s):\n                return isna(values)\n            if isinstance(s, (Timedelta, Timestamp)) and getattr(s, \"tz\", None) is None:\n\n                return _compare_or_regex_search(\n                    maybe_convert_objects(values), s.asm8, regex\n                )\n            return _compare_or_regex_search(values, s, regex)\n\n        masks = [comp(s, regex) for s in src_list]\n\n        result_blocks = []\n        src_len = len(src_list) - 1\n        for blk in self.blocks:\n\n            # its possible to get multiple result blocks here\n            # replace ALWAYS will return a list\n            rb = [blk if inplace else blk.copy()]\n            for i, (s, d) in enumerate(zip(src_list, dest_list)):\n                # TODO: assert/validate that `d` is always a scalar?\n                new_rb: List[Block] = []\n                for b in rb:\n                    m = masks[i][b.mgr_locs.indexer]\n                    convert = i == src_len\n                    result = b._replace_coerce(\n                        mask=m,\n                        to_replace=s,\n                        value=d,\n                        inplace=inplace,\n                        convert=convert,\n                        regex=regex,\n                    )\n                    if m.any() or convert:\n                        new_rb = _extend_blocks(result, new_rb)\n                    else:\n                        new_rb.append(b)\n                rb = new_rb\n            result_blocks.extend(rb)\n\n        bm = type(self).from_blocks(result_blocks, self.axes)\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 611,
        "end_line": 666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#668",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 668,
        "end_line": 674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011402508551881414,
            "pseudo_dstar_susp": 0.0011402508551881414,
            "pseudo_tarantula_susp": 0.0011494252873563218,
            "pseudo_op2_susp": 0.0011402508551881414,
            "pseudo_barinel_susp": 0.0011494252873563218
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#676",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self) -> None:\n        dtypes = [blk.dtype for blk in self.blocks if blk._can_consolidate]\n        self._is_consolidated = len(dtypes) == len(set(dtypes))\n        self._known_consolidated = True",
        "begin_line": 676,
        "end_line": 679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013736263736263737,
            "pseudo_dstar_susp": 0.02040816326530612,
            "pseudo_tarantula_susp": 0.0011494252873563218,
            "pseudo_op2_susp": 0.02040816326530612,
            "pseudo_barinel_susp": 0.0011494252873563218
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#682",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self) -> bool:\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 682,
        "end_line": 685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023004370830457787,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_bool_data#713",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_bool_data(self, copy: bool=False)",
        "snippet": "    def get_bool_data(self, copy: bool = False) -> \"BlockManager\":\n        \"\"\"\n        Parameters\n        ----------\n        copy : bool, default False\n            Whether to copy the blocks\n        \"\"\"\n        self._consolidate_inplace()\n        return self.combine([b for b in self.blocks if b.is_bool], copy)",
        "begin_line": 713,
        "end_line": 721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_numeric_data#723",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_numeric_data(self, copy: bool=False)",
        "snippet": "    def get_numeric_data(self, copy: bool = False) -> \"BlockManager\":\n        \"\"\"\n        Parameters\n        ----------\n        copy : bool, default False\n            Whether to copy the blocks\n        \"\"\"\n        self._consolidate_inplace()\n        return self.combine([b for b in self.blocks if b.is_numeric], copy)",
        "begin_line": 723,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.combine#733",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.combine(self, blocks: List[Block], copy: bool=True)",
        "snippet": "    def combine(self, blocks: List[Block], copy: bool = True) -> \"BlockManager\":\n        \"\"\" return a new manager with the blocks \"\"\"\n        if len(blocks) == 0:\n            return self.make_empty()\n\n        # FIXME: optimization potential\n        indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n        inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n\n        new_blocks = []\n        for b in blocks:\n            b = b.copy(deep=copy)\n            b.mgr_locs = algos.take_1d(\n                inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False\n            )\n            new_blocks.append(b)\n\n        axes = list(self.axes)\n        axes[0] = self.items.take(indexer)\n\n        return type(self).from_blocks(new_blocks, axes)",
        "begin_line": 733,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_slice#755",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0) -> \"BlockManager\":\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(slobj)\n        elif axis == 1:\n            _slicer = [slice(None)] * (axis + 1)\n            _slicer[axis] = slobj\n            slicer = tuple(_slicer)\n            new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n        else:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axes[axis][slobj]\n\n        bm = type(self)(new_blocks, new_axes, do_integrity_check=False)\n        return bm",
        "begin_line": 755,
        "end_line": 771,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__contains__#773",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__contains__(self, item)",
        "snippet": "    def __contains__(self, item) -> bool:\n        return item in self.items",
        "begin_line": 773,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.nblocks#777",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.nblocks(self)",
        "snippet": "    def nblocks(self) -> int:\n        return len(self.blocks)",
        "begin_line": 777,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#780",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self: T, deep=True)",
        "snippet": "    def copy(self: T, deep=True) -> T:\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : bool or string, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            # hit in e.g. tests.io.json.test_pandas\n\n            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()\n\n            new_axes = [copy_func(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n\n        res = self.apply(\"copy\", deep=deep)\n        res.axes = new_axes\n        return res",
        "begin_line": 780,
        "end_line": 807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy_func#798",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy_func(ax)",
        "snippet": "            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()",
        "begin_line": 798,
        "end_line": 799,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.as_array#809",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.as_array(self, transpose: bool=False)",
        "snippet": "    def as_array(self, transpose: bool = False) -> np.ndarray:\n        \"\"\"\n        Convert the blockmanager data into an numpy array.\n\n        Parameters\n        ----------\n        transpose : bool, default False\n            If True, transpose the return array,\n\n        Returns\n        -------\n        arr : ndarray\n        \"\"\"\n        if len(self.blocks) == 0:\n            arr = np.empty(self.shape, dtype=float)\n            return arr.transpose() if transpose else arr\n\n        if self._is_single_block and self.blocks[0].is_datetimetz:\n            # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n            # always be object dtype. Some callers seem to want the\n            # DatetimeArray (previously DTI)\n            arr = self.blocks[0].get_values(dtype=object)\n        elif self._is_single_block or not self.is_mixed_type:\n            arr = np.asarray(self.blocks[0].get_values())\n        else:\n            arr = self._interleave()\n\n        return arr.transpose() if transpose else arr",
        "begin_line": 809,
        "end_line": 836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002591344908007256,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._interleave#838",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._interleave(self)",
        "snippet": "    def _interleave(self) -> np.ndarray:\n        \"\"\"\n        Return ndarray from blocks with specified item order\n        Items must be contained in the blocks\n        \"\"\"\n        dtype = _interleaved_dtype(self.blocks)\n\n        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if isinstance(dtype, SparseDtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):\n            dtype = \"object\"\n\n        result = np.empty(self.shape, dtype=dtype)\n\n        itemmask = np.zeros(self.shape[0])\n\n        for blk in self.blocks:\n            rl = blk.mgr_locs\n            result[rl.indexer] = blk.get_values(dtype)\n            itemmask[rl.indexer] = 1\n\n        if not itemmask.all():\n            raise AssertionError(\"Some items were not contained in blocks\")\n\n        return result",
        "begin_line": 838,
        "end_line": 864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.to_dict#866",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.to_dict(self, copy: bool=True)",
        "snippet": "    def to_dict(self, copy: bool = True):\n        \"\"\"\n        Return a dict of str(dtype) -> BlockManager\n\n        Parameters\n        ----------\n        copy : bool, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> BlockManager\n\n        Notes\n        -----\n        This consolidates based on str(dtype)\n        \"\"\"\n        self._consolidate_inplace()\n\n        bd: Dict[str, List[Block]] = {}\n        for b in self.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n\n        return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
        "begin_line": 866,
        "end_line": 888,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#931",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self) -> \"BlockManager\":\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 931,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#947",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 947,
        "end_line": 952,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011402508551881414,
            "pseudo_dstar_susp": 0.0011402508551881414,
            "pseudo_tarantula_susp": 0.0011494252873563218,
            "pseudo_op2_susp": 0.0011402508551881414,
            "pseudo_barinel_susp": 0.0011494252873563218
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get#954",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get(self, item)",
        "snippet": "    def get(self, item):\n        \"\"\"\n        Return values for selected item (ndarray or BlockManager).\n        \"\"\"\n        if self.items.is_unique:\n\n            if not isna(item):\n                loc = self.items.get_loc(item)\n            else:\n                indexer = np.arange(len(self.items))[isna(self.items)]\n\n                # allow a single nan location indexer\n                if not is_scalar(indexer):\n                    if len(indexer) == 1:\n                        loc = indexer.item()\n                    else:\n                        raise ValueError(\"cannot label index with a null key\")\n\n            return self.iget(loc)\n        else:\n\n            if isna(item):\n                raise TypeError(\"cannot label index with a null key\")\n\n            indexer = self.items.get_indexer_for([item])\n            return self.reindex_indexer(\n                new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n            )",
        "begin_line": 954,
        "end_line": 981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002983293556085919,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#983",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i: int)",
        "snippet": "    def iget(self, i: int) -> \"SingleBlockManager\":\n        \"\"\"\n        Return the data as a SingleBlockManager.\n        \"\"\"\n        block = self.blocks[self.blknos[i]]\n        values = block.iget(self.blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            block.make_block_same_class(\n                values, placement=slice(0, len(values)), ndim=1\n            ),\n            self.axes[1],\n            fastpath=True,\n        )",
        "begin_line": 983,
        "end_line": 997,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027800945232137893,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set#1037",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set(self, item: Label, value)",
        "snippet": "    def set(self, item: Label, value):\n        \"\"\"\n        Set new item in-place.\n\n        Notes\n        -----\n        Does not consolidate.\n        Adds new Block if not contained in the current items Index.\n        \"\"\"\n        try:\n            loc = self.items.get_loc(item)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self.insert(len(self.items), item, value)\n            return\n\n        self.iset(loc, value)",
        "begin_line": 1037,
        "end_line": 1053,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iset#1055",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iset(self, loc: Union[int, slice, np.ndarray], value)",
        "snippet": "    def iset(self, loc: Union[int, slice, np.ndarray], value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n        if self._blklocs is None and self.ndim > 1:\n            self._rebuild_blknos_and_blklocs()\n\n        value_is_extension_type = is_extension_array_dtype(value)\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        if lib.is_integer(loc):\n            # We have 6 tests where loc is _not_ an int.\n            # In this case, get_blkno_placements will yield only one tuple,\n            #  containing (self._blknos[loc], BlockPlacement(slice(0, 1, 1)))\n            loc = [loc]\n\n        # Accessing public blknos ensures the public versions are initialized\n        blknos = self.blknos[loc]\n        blklocs = self.blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    self._blklocs[blk.mgr_locs.indexer] = -1\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = algos.take_1d(\n                new_blknos, self._blknos, axis=0, allow_fill=False\n            )\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks: List[Block] = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that sparse blocks contain only\n                # one item.\n                new_blocks.extend(\n                    make_block(\n                        values=value,\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 1055,
        "end_line": 1173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1077",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value",
        "begin_line": 1077,
        "end_line": 1078,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1082",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value[placement.indexer]",
        "begin_line": 1082,
        "end_line": 1083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.insert#1175",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.insert(self, loc: int, item, value, allow_duplicates: bool=False)",
        "snippet": "    def insert(self, loc: int, item, value, allow_duplicates: bool = False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            # Should this be a different kind of error??\n            raise ValueError(f\"cannot insert {item}, already exists\")\n\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        # insert to the axis; this could possibly raise a TypeError\n        new_axis = self.items.insert(loc, item)\n\n        if value.ndim == self.ndim - 1 and not is_extension_array_dtype(value):\n            value = _safe_reshape(value, (1,) + value.shape)\n\n        block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n        for blkno, count in _fast_count_smallints(self.blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n\n        # Accessing public blklocs ensures the public versions are initialized\n        if loc == self.blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n        self.axes[0] = new_axis\n        self.blocks += (block,)\n\n        self._known_consolidated = False\n\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()",
        "begin_line": 1175,
        "end_line": 1227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_axis#1229",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_axis(self, new_index, axis: int, method=None, limit=None, fill_value=None, copy: bool=True)",
        "snippet": "    def reindex_axis(\n        self,\n        new_index,\n        axis: int,\n        method=None,\n        limit=None,\n        fill_value=None,\n        copy: bool = True,\n    ):\n        \"\"\"\n        Conform block manager to new index.\n        \"\"\"\n        new_index = ensure_index(new_index)\n        new_index, indexer = self.axes[axis].reindex(\n            new_index, method=method, limit=limit\n        )\n\n        return self.reindex_indexer(\n            new_index, indexer, axis=axis, fill_value=fill_value, copy=copy\n        )",
        "begin_line": 1229,
        "end_line": 1248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023185717597959656,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_indexer#1250",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_indexer(self: T, new_axis, indexer, axis: int, fill_value=None, allow_dups: bool=False, copy: bool=True)",
        "snippet": "    def reindex_indexer(\n        self: T,\n        new_axis,\n        indexer,\n        axis: int,\n        fill_value=None,\n        allow_dups: bool = False,\n        copy: bool = True,\n    ) -> T:\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object, default None\n        allow_dups : bool, default False\n        copy : bool, default True\n\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n\n        self._consolidate_inplace()\n\n        # some axes don't allow reindexing with dups\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n        else:\n            new_blocks = [\n                blk.take_nd(\n                    indexer,\n                    axis=axis,\n                    fill_tuple=(\n                        fill_value if fill_value is not None else blk.fill_value,\n                    ),\n                )\n                for blk in self.blocks\n            ]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n\n        return type(self).from_blocks(new_blocks, new_axes)",
        "begin_line": 1250,
        "end_line": 1307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0#1309",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
        "snippet": "    def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n        \"\"\"\n        Slice/take blocks along axis=0.\n\n        Overloaded for SingleBlock\n\n        Returns\n        -------\n        new_blocks : list of Block\n        \"\"\"\n        allow_fill = fill_tuple is not None\n\n        sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n            slice_or_indexer, self.shape[0], allow_fill=allow_fill\n        )\n\n        if self._is_single_block:\n            blk = self.blocks[0]\n\n            if sl_type in (\"slice\", \"mask\"):\n                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_tuple[0] is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n                    fill_tuple = (fill_value,)\n\n                return [\n                    blk.take_nd(\n                        slobj,\n                        axis=0,\n                        new_mgr_locs=slice(0, sllen),\n                        fill_tuple=fill_tuple,\n                    )\n                ]\n\n        if sl_type in (\"slice\", \"mask\"):\n            blknos = self.blknos[slobj]\n            blklocs = self.blklocs[slobj]\n        else:\n            blknos = algos.take_1d(\n                self.blknos, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n            blklocs = algos.take_1d(\n                self.blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n\n        # When filling blknos, make sure blknos is updated before appending to\n        # blocks list, that way new blkno is exactly len(blocks).\n        #\n        # FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,\n        # pytables serialization will break otherwise.\n        blocks = []\n        for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n            if blkno == -1:\n                # If we've got here, fill_tuple was not None.\n                fill_value = fill_tuple[0]\n\n                blocks.append(\n                    self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n                )\n            else:\n                blk = self.blocks[blkno]\n\n                # Otherwise, slicing along items axis is necessary.\n                if not blk._can_consolidate:\n                    # A non-consolidatable block, it's easy, because there's\n                    # only one item and each mgr loc is a copy of that single\n                    # item.\n                    for mgr_loc in mgr_locs:\n                        newblk = blk.copy(deep=False)\n                        newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                        blocks.append(newblk)\n\n                else:\n                    blocks.append(\n                        blk.take_nd(\n                            blklocs[mgr_locs.indexer],\n                            axis=0,\n                            new_mgr_locs=mgr_locs,\n                            fill_tuple=None,\n                        )\n                    )\n\n        return blocks",
        "begin_line": 1309,
        "end_line": 1392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._make_na_block#1394",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._make_na_block(self, placement, fill_value=None)",
        "snippet": "    def _make_na_block(self, placement, fill_value=None):\n\n        if fill_value is None:\n            fill_value = np.nan\n        block_shape = list(self.shape)\n        block_shape[0] = len(placement)\n\n        dtype, fill_value = infer_dtype_from_scalar(fill_value)\n        block_values = np.empty(block_shape, dtype=dtype)\n        block_values.fill(fill_value)\n        return make_block(block_values, placement=placement)",
        "begin_line": 1394,
        "end_line": 1404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030892801977139327,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.take#1406",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.take(self, indexer, axis: int=1, verify: bool=True, convert: bool=True)",
        "snippet": "    def take(self, indexer, axis: int = 1, verify: bool = True, convert: bool = True):\n        \"\"\"\n        Take items along any axis.\n        \"\"\"\n        self._consolidate_inplace()\n        indexer = (\n            np.arange(indexer.start, indexer.stop, indexer.step, dtype=\"int64\")\n            if isinstance(indexer, slice)\n            else np.asanyarray(indexer, dtype=\"int64\")\n        )\n\n        n = self.shape[axis]\n        if convert:\n            indexer = maybe_convert_indices(indexer, n)\n\n        if verify:\n            if ((indexer == -1) | (indexer >= n)).any():\n                raise Exception(\"Indices must be nonzero and less than the axis length\")\n\n        new_labels = self.axes[axis].take(indexer)\n        return self.reindex_indexer(\n            new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True\n        )",
        "begin_line": 1406,
        "end_line": 1428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.equals#1430",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        self_axes, other_axes = self.axes, other.axes\n        if len(self_axes) != len(other_axes):\n            return False\n        if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n            return False\n        self._consolidate_inplace()\n        other._consolidate_inplace()\n        if len(self.blocks) != len(other.blocks):\n            return False\n\n        # canonicalize block order, using a tuple combining the mgr_locs\n        # then type name because there might be unconsolidated\n        # blocks (say, Categorical) which can only be distinguished by\n        # the iteration order\n        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n\n        self_blocks = sorted(self.blocks, key=canonicalize)\n        other_blocks = sorted(other.blocks, key=canonicalize)\n        return all(\n            block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n        )",
        "begin_line": 1430,
        "end_line": 1452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030892801977139327,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.canonicalize#1445",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.canonicalize(block)",
        "snippet": "        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)",
        "begin_line": 1445,
        "end_line": 1446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030892801977139327,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1501",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Union[Index, List[Index]],\n        do_integrity_check: bool = False,\n        fastpath: bool = False,\n    ):\n        assert isinstance(block, Block), type(block)\n\n        if isinstance(axis, list):\n            if len(axis) != 1:\n                raise ValueError(\n                    \"cannot create SingleBlockManager with more than 1 axis\"\n                )\n            axis = axis[0]\n\n        # passed from constructor, single block, single axis\n        if fastpath:\n            self.axes = [axis]\n        else:\n            self.axes = [ensure_index(axis)]\n\n        self.blocks = tuple([block])",
        "begin_line": 1501,
        "end_line": 1523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_blocks#1526",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(\n        cls, blocks: List[Block], axes: List[Index]\n    ) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        assert len(blocks) == 1\n        assert len(axes) == 1\n        return cls(blocks[0], axes[0], do_integrity_check=False, fastpath=True)",
        "begin_line": 1526,
        "end_line": 1534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00029163021289005544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_array#1537",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_array(cls, array: ArrayLike, index: Index)",
        "snippet": "    def from_array(cls, array: ArrayLike, index: Index) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for if we have an array that is not yet a Block.\n        \"\"\"\n        block = make_block(array, placement=slice(0, len(index)), ndim=1)\n        return cls(block, index, fastpath=True)",
        "begin_line": 1537,
        "end_line": 1542,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002487562189054726,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._post_setstate#1544",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._post_setstate(self)",
        "snippet": "    def _post_setstate(self):\n        pass",
        "begin_line": 1544,
        "end_line": 1545,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1548",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self) -> Block:\n        return self.blocks[0]",
        "begin_line": 1548,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1561",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0) -> \"SingleBlockManager\":\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        blk = self._block\n        array = blk._slice(slobj)\n        block = blk.make_block_same_class(array, placement=range(len(array)))\n        return type(self)(block, self.index[slobj], fastpath=True)",
        "begin_line": 1561,
        "end_line": 1568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1571",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self) -> Index:\n        return self.axes[0]",
        "begin_line": 1571,
        "end_line": 1572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1575",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        return self._block.dtype",
        "begin_line": 1575,
        "end_line": 1576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023685457129322596,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1588",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"The array that Series._values returns\"\"\"\n        return self._block.internal_values()",
        "begin_line": 1588,
        "end_line": 1590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023485204321277596,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1596",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        return True",
        "begin_line": 1596,
        "end_line": 1597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1602",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1602,
        "end_line": 1603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00029163021289005544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1686",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names, axes)",
        "snippet": "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1686,
        "end_line": 1694,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1719",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names, axes)",
        "snippet": "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=i)\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=i)\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1719,
        "end_line": 1813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1816",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype):\n    \"\"\"\n    return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1816,
        "end_line": 1828,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003057169061449098,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1831",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1831,
        "end_line": 1844,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025113008538422905,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1847",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1847,
        "end_line": 1871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1850",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1850,
        "end_line": 1854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1856",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1856,
        "end_line": 1860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._interleaved_dtype#1874",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._interleaved_dtype(blocks: Sequence[Block])",
        "snippet": "def _interleaved_dtype(blocks: Sequence[Block]) -> Optional[DtypeObj]:\n    \"\"\"\n    Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : np.dtype, ExtensionDtype, or None\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
        "begin_line": 1874,
        "end_line": 1890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023590469450342062,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._consolidate#1893",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._consolidate(blocks)",
        "snippet": "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
        "begin_line": 1893,
        "end_line": 1907,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026136957658128593,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._fast_count_smallints#1958",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._fast_count_smallints(arr)",
        "snippet": "def _fast_count_smallints(arr):\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
        "begin_line": 1958,
        "end_line": 1962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.managers._preprocess_slice_or_indexer#1965",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill)",
        "snippet": "def _preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
        "begin_line": 1965,
        "end_line": 1980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.missing.fill_zeros#33",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.fill_zeros(result, x, y)",
        "snippet": "def fill_zeros(result, x, y):\n    \"\"\"\n    If this is a reversed op, then flip x,y\n\n    If we have an integer value (or array in y)\n    and we have 0's, fill them with np.nan,\n    return the result.\n\n    Mask the nan's from x.\n    \"\"\"\n    if is_float_dtype(result.dtype):\n        return result\n\n    is_variable_type = hasattr(y, \"dtype\") or hasattr(y, \"type\")\n    is_scalar_type = is_scalar(y)\n\n    if not is_variable_type and not is_scalar_type:\n        return result\n\n    if is_scalar_type:\n        y = np.array(y)\n\n    if is_integer_dtype(y.dtype):\n\n        if (y == 0).any():\n\n            # GH#7325, mask and nans must be broadcastable (also: GH#9308)\n            # Raveling and then reshaping makes np.putmask faster\n            mask = ((y == 0) & ~np.isnan(result)).ravel()\n\n            shape = result.shape\n            result = result.astype(\"float64\", copy=False).ravel()\n\n            np.putmask(result, mask, np.nan)\n\n            result = result.reshape(shape)\n\n    return result",
        "begin_line": 33,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#133",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 133,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#68",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key: Optional[str]=None)",
        "snippet": "    def _reset_cache(self, key: Optional[str] = None) -> None:\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#637",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 637,
        "end_line": 641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#676",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 676,
        "end_line": 680,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#861",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 861,
        "end_line": 862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1038",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if not isinstance(self._values, np.ndarray):\n            # Check type instead of dtype to catch DTA/TDA\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1038,
        "end_line": 1055,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026881720430107527,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#47",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype: object)",
        "snippet": "    def __init__(self, dtype: object):\n        self._dtype = np.dtype(dtype)",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.numpy_dtype#54",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.numpy_dtype(self)",
        "snippet": "    def numpy_dtype(self) -> np.dtype:\n        \"\"\"\n        The NumPy dtype this PandasDtype wraps.\n        \"\"\"\n        return self._dtype",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#157",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values: Union[np.ndarray, 'PandasArray'], copy: bool=False)",
        "snippet": "    def __init__(self, values: Union[np.ndarray, \"PandasArray\"], copy: bool = False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"'values' must be a NumPy array, not {type(values).__name__}\"\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 157,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.dtype#196",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.dtype(self)",
        "snippet": "    def dtype(self) -> PandasDtype:\n        return self._dtype",
        "begin_line": 196,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__len__#273",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._ndarray)",
        "begin_line": 273,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#439",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy: bool=False, na_value=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value=lib.no_default\n    ) -> np.ndarray:\n        result = np.asarray(self._ndarray, dtype=dtype)\n\n        if (copy or na_value is not lib.no_default) and result is self._ndarray:\n            result = result.copy()\n\n        if na_value is not lib.no_default:\n            result[self.isna()] = na_value\n\n        return result",
        "begin_line": 439,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.maybe_box_datetimelike#76",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box_datetimelike(value, dtype=None)",
        "snippet": "def maybe_box_datetimelike(value, dtype=None):\n    # turn a datetime like into a Timestamp/timedelta as needed\n    if dtype == object:\n        # If we dont have datetime64/timedelta64 dtype, we dont want to\n        #  box datetimelike scalars\n        return value\n\n    if isinstance(value, (np.datetime64, datetime)):\n        value = tslibs.Timestamp(value)\n    elif isinstance(value, (np.timedelta64, timedelta)):\n        value = tslibs.Timedelta(value)\n\n    return value",
        "begin_line": 76,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#91",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n        Whether `key` is a valid boolean indexer.\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n\n    See Also\n    --------\n    check_array_indexer : Check that `key` is a valid array to index,\n        and convert to an ndarray.\n    \"\"\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(key)\n\n            if not lib.is_bool_array(key):\n                na_msg = \"Cannot mask with non-boolean array containing NA / NaN values\"\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 91,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#143",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val.is_integer():\n        return int(val)\n    return val",
        "begin_line": 143,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001148105625717566,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.0011587485515643105,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.0011587485515643105
        }
    },
    {
        "name": "pandas.core.common.all_none#175",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00303951367781155,
            "pseudo_dstar_susp": 0.07692307692307693,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.common.any_not_none#182",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_not_none(*args)",
        "snippet": "def any_not_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if any argument is not None.\n    \"\"\"\n    return any(arg is not None for arg in args)",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.count_not_none#196",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args) -> int:\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#211",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values.values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 211,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010718113612004287,
            "pseudo_dstar_susp": 0.0010718113612004287,
            "pseudo_tarantula_susp": 0.0010775862068965517,
            "pseudo_op2_susp": 0.0010718113612004287,
            "pseudo_barinel_susp": 0.0010775862068965517
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#267",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable[T], T])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002403268445085316,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#276",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj) -> bool:\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 276,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#322",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 322,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#56",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return _NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 56,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#212",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        f\"'{dtz}' != '{values.tz}'\"\n                    )\n                    raise TypeError(msg)\n            elif values.tz:\n                dtype = values.dtype\n\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be \"\n                \"a DatetimeArray ndarray, or Series or Index containing one of those.\"\n            )\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_NS_DTYPE)\n\n        if values.dtype != _NS_DTYPE:\n            raise ValueError(\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'. \"\n                f\"Got {values.dtype} instead.\"\n            )\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            raise ValueError(\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 212,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#285",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=_NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype != _NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(_NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#298",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 298,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002941176470588235,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar#448",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar(self, value)",
        "snippet": "    def _unbox_scalar(self, value):\n        if not isinstance(value, self._scalar_type) and value is not NaT:\n            raise ValueError(\"'value' should be a Timestamp.\")\n        if not isna(value):\n            self._check_compatible_with(value)\n        return value.value",
        "begin_line": 448,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with#458",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        if other is NaT:\n            return\n        self._assert_tzawareness_compat(other)\n        if setitem:\n            # Stricter check for setitem vs comparison methods\n            if not timezones.tz_compare(self.tz, other.tz):\n                raise ValueError(f\"Timezones don't match. '{self.tz} != {other.tz}'\")",
        "begin_line": 458,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq#467",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        self._freq = None",
        "begin_line": 467,
        "end_line": 468,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#474",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 474,
        "end_line": 475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024172105390379503,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#478",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 478,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025113008538422905,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#500",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 500,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025329280648429586,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#521",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 521,
        "end_line": 525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._timezone#528",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._timezone(self)",
        "snippet": "    def _timezone(self):\n        \"\"\"\n        Comparable timezone both for pytz / dateutil\n        \"\"\"\n        return timezones.get_timezone(self.tzinfo)",
        "begin_line": 528,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#548",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 548,
        "end_line": 553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#578",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if copy:\n                result = result.copy()\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 578,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz#622",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self, other)",
        "snippet": "    def _has_same_tz(self, other):\n        zzone = self._timezone\n\n        # vzone shouldn't be None if value is non-datetime like\n        if isinstance(other, np.datetime64):\n            # convert to Timestamp as np.datetime64 doesn't have tz attr\n            other = Timestamp(other)\n        vzone = timezones.get_timezone(getattr(other, \"tzinfo\", \"__no_tz__\"))\n        return zzone == vzone",
        "begin_line": 622,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#632",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 632,
        "end_line": 649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar#702",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar(self, other)",
        "snippet": "    def _sub_datetimelike_scalar(self, other):\n        # subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]\n        assert isinstance(other, (datetime, np.datetime64))\n        assert other is not NaT\n        other = Timestamp(other)\n        if other is NaT:\n            return self - NaT\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                \"Timestamp subtraction must have the same timezones or no timezones\"\n            )\n\n        i8 = self.asi8\n        result = checked_add_with_arr(i8, -other.value, arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return result.view(\"timedelta64[ns]\")",
        "begin_line": 702,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1660",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != _NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n\n        assert data.dtype == _NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != _INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        result = data.view(_NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1660,
        "end_line": 1785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#1871",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        # e.g. collections.deque\n        return data, copy\n\n    if is_float_dtype(data.dtype):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(_NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data.dtype) or is_bool_dtype(data.dtype):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data.dtype):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid. Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data.dtype):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data.dtype) and not is_datetime64tz_dtype(data.dtype):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 1871,
        "end_line": 1925,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#1962",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, disallowed GH#24806\n            msg = (\n                \"Passing in 'datetime64' dtype with no precision is not allowed. \"\n                \"Please pass in 'datetime64[ns]' instead.\"\n            )\n            raise ValueError(msg)\n\n        if (isinstance(dtype, np.dtype) and dtype != _NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                f\"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\"\n            )\n    return dtype",
        "begin_line": 1962,
        "end_line": 2001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026588673225206064,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2004",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2004,
        "end_line": 2048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002941176470588235,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func#121",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timedelta(x, unit=\"ns\")",
        "begin_line": 121,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025188916876574307,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#125",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return _TD_DTYPE",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#144",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False):\n        values = extract_array(values)\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            if freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be a \"\n                \"TimedeltaArray ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg)\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_TD_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 144,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027800945232137893,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#195",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        assert dtype == _TD_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n        if values.dtype != _TD_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(_TD_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = to_offset(freq)\n        result._dtype = _TD_DTYPE\n        return result",
        "begin_line": 195,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#209",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 209,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.astype#295",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> timedelta64[ns]\n        #   --> timedelta64\n        # DatetimeLikeArrayMixin super call handles other cases\n        dtype = pandas_dtype(dtype)\n\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # by pandas convention, converting to non-nano timedelta64\n            #  returns an int64-dtyped array with ints representing multiples\n            #  of the desired timedelta unit.  This is essentially division\n            if self._hasnans:\n                # avoid double-copying\n                result = self._data.astype(dtype, copy=False)\n                values = self._maybe_mask_results(\n                    result, fill_value=None, convert=\"float64\"\n                )\n                return values\n            result = self._data.astype(dtype, copy=copy)\n            return result.astype(\"i8\")\n        elif is_timedelta64_ns_dtype(dtype):\n            if copy:\n                return self.copy()\n            return self\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy=copy)",
        "begin_line": 295,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__mul__#446",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__mul__(self, other)",
        "snippet": "    def __mul__(self, other):\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):\n            return NotImplemented\n\n        if is_scalar(other):\n            # numpy will accept float and int, raise TypeError for others\n            result = self._data * other\n            freq = None\n            if self.freq is not None and not isna(other):\n                freq = self.freq * other\n            return type(self)(result, freq=freq)\n\n        if not hasattr(other, \"dtype\"):\n            # list, tuple\n            other = np.array(other)\n        if len(other) != len(self) and not is_timedelta64_dtype(other):\n            # Exclude timedelta64 here so we correctly raise TypeError\n            #  for that instead of ValueError\n            raise ValueError(\"Cannot multiply with unequal lengths\")\n\n        if is_object_dtype(other.dtype):\n            # this multiplication will succeed only if all elements of other\n            #  are int or float scalars, so we will end up with\n            #  timedelta64[ns]-dtyped result\n            result = [self[n] * other[n] for n in range(len(self))]\n            result = np.array(result)\n            return type(self)(result)\n\n        # numpy will accept float or int dtype, raise TypeError for others\n        result = self._data * other\n        return type(self)(result)",
        "begin_line": 446,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__truediv__#482",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__truediv__(self, other)",
        "snippet": "    def __truediv__(self, other):\n        # timedelta / X is well-defined for timedelta-like or numeric X\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n            if other is NaT:\n                # specifically timedelta64-NaT\n                result = np.empty(self.shape, dtype=np.float64)\n                result.fill(np.nan)\n                return result\n\n            # otherwise, dispatch to Timedelta implementation\n            return self._data / other\n\n        elif lib.is_scalar(other):\n            # assume it is numeric\n            result = self._data / other\n            freq = None\n            if self.freq is not None:\n                # Tick division is not implemented, so operate on Timedelta\n                freq = self.freq.delta / other\n            return type(self)(result, freq=freq)\n\n        if not hasattr(other, \"dtype\"):\n            # e.g. list, tuple\n            other = np.array(other)\n\n        if len(other) != len(self):\n            raise ValueError(\"Cannot divide vectors with unequal lengths\")\n\n        elif is_timedelta64_dtype(other.dtype):\n            # let numpy handle it\n            return self._data / other\n\n        elif is_object_dtype(other.dtype):\n            # Note: we do not do type inference on the result, so either\n            #  an object array or numeric-dtyped (if numpy does inference)\n            #  will be returned.  GH#23829\n            result = [self[n] / other[n] for n in range(len(self))]\n            result = np.array(result)\n            return result\n\n        else:\n            result = self._data / other\n            return type(self)(result)",
        "begin_line": 482,
        "end_line": 530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__floordiv__#578",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__floordiv__(self, other)",
        "snippet": "    def __floordiv__(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if is_scalar(other):\n            if isinstance(other, (timedelta, np.timedelta64, Tick)):\n                other = Timedelta(other)\n                if other is NaT:\n                    # treat this specifically as timedelta-NaT\n                    result = np.empty(self.shape, dtype=np.float64)\n                    result.fill(np.nan)\n                    return result\n\n                # dispatch to Timedelta implementation\n                result = other.__rfloordiv__(self._data)\n                return result\n\n            # at this point we should only have numeric scalars; anything\n            #  else will raise\n            result = self.asi8 // other\n            result[self._isnan] = iNaT\n            freq = None\n            if self.freq is not None:\n                # Note: freq gets division, not floor-division\n                freq = self.freq / other\n                if freq.nanos == 0 and self.freq.nanos != 0:\n                    # e.g. if self.freq is Nano(1) then dividing by 2\n                    #  rounds down to zero\n                    freq = None\n            return type(self)(result.view(\"m8[ns]\"), freq=freq)\n\n        if not hasattr(other, \"dtype\"):\n            # list, tuple\n            other = np.array(other)\n        if len(other) != len(self):\n            raise ValueError(\"Cannot divide with unequal lengths\")\n\n        elif is_timedelta64_dtype(other.dtype):\n            other = type(self)(other)\n\n            # numpy timedelta64 does not natively support floordiv, so operate\n            #  on the i8 values\n            result = self.asi8 // other.asi8\n            mask = self._isnan | other._isnan\n            if mask.any():\n                result = result.astype(np.int64)\n                result[mask] = np.nan\n            return result\n\n        elif is_object_dtype(other.dtype):\n            result = [self[n] // other[n] for n in range(len(self))]\n            result = np.array(result)\n            if lib.infer_dtype(result, skipna=False) == \"timedelta\":\n                result, _ = sequence_to_td64ns(result)\n                return type(self)(result)\n            return result\n\n        elif is_integer_dtype(other.dtype) or is_float_dtype(other.dtype):\n            result = self._data // other\n            return type(self)(result)\n\n        else:\n            dtype = getattr(other, \"dtype\", type(other).__name__)\n            raise TypeError(f\"Cannot divide {dtype} by {type(self).__name__}\")",
        "begin_line": 578,
        "end_line": 642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__mod__#693",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__mod__(self, other)",
        "snippet": "    def __mod__(self, other):\n        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n        return self - (self // other) * other",
        "begin_line": 693,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#883",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != _TD_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to timedelta64[ns]\")\n\n    data = np.array(data, copy=copy)\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 883,
        "end_line": 966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.ints_to_td64ns#969",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.ints_to_td64ns(data, unit='ns')",
        "snippet": "def ints_to_td64ns(data, unit=\"ns\"):\n    \"\"\"\n    Convert an ndarray with integer-dtype to timedelta64[ns] dtype, treating\n    the integers as multiples of the given timedelta unit.\n\n    Parameters\n    ----------\n    data : numpy.ndarray with integer-dtype\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n    bool : whether a copy was made\n    \"\"\"\n    copy_made = False\n    unit = unit if unit is not None else \"ns\"\n\n    if data.dtype != np.int64:\n        # converting to int64 makes a copy, so we can avoid\n        # re-copying later\n        data = data.astype(np.int64)\n        copy_made = True\n\n    if unit != \"ns\":\n        dtype_str = f\"timedelta64[{unit}]\"\n        data = data.view(dtype_str)\n\n        # TODO: watch out for overflows when converting from lower-resolution\n        data = data.astype(\"timedelta64[ns]\")\n        # the astype conversion makes a copy, so we can avoid re-copying later\n        copy_made = True\n\n    else:\n        data = data.view(\"timedelta64[ns]\")\n\n    return data, copy_made",
        "begin_line": 969,
        "end_line": 1006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1044",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        # no precision disallowed GH#24806\n        msg = (\n            \"Passing in 'timedelta' dtype with no precision is not allowed. \"\n            \"Please pass in 'timedelta64[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if not is_dtype_equal(dtype, _TD_DTYPE):\n        raise ValueError(f\"dtype {dtype} cannot be converted to timedelta64[ns]\")\n\n    return dtype",
        "begin_line": 1044,
        "end_line": 1057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002673082063619353,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.util.hashing._combine_hash_arrays#30",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._combine_hash_arrays(arrays, num_items: int)",
        "snippet": "def _combine_hash_arrays(arrays, num_items: int):\n    \"\"\"\n    Parameters\n    ----------\n    arrays : generator\n    num_items : int\n\n    Should be the same as CPython's tupleobject.c\n    \"\"\"\n    try:\n        first = next(arrays)\n    except StopIteration:\n        return np.array([], dtype=np.uint64)\n\n    arrays = itertools.chain([first], arrays)\n\n    mult = np.uint64(1000003)\n    out = np.zeros_like(first) + np.uint64(0x345678)\n    for i, a in enumerate(arrays):\n        inverse_i = num_items - i\n        out ^= a\n        out *= mult\n        mult += np.uint64(82520 + inverse_i + inverse_i)\n    assert i + 1 == num_items, \"Fed in wrong num_items\"\n    out += np.uint64(97531)\n    return out",
        "begin_line": 30,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_array#248",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_array(vals, encoding: str='utf8', hash_key: str=_default_hash_key, categorize: bool=True)",
        "snippet": "def hash_array(\n    vals,\n    encoding: str = \"utf8\",\n    hash_key: str = _default_hash_key,\n    categorize: bool = True,\n):\n    \"\"\"\n    Given a 1d array, return an array of deterministic integers.\n\n    Parameters\n    ----------\n    vals : ndarray, Categorical\n    encoding : str, default 'utf8'\n        Encoding for data & key when strings.\n    hash_key : str, default _default_hash_key\n        Hash_key for string key to encode.\n    categorize : bool, default True\n        Whether to first categorize object arrays before hashing. This is more\n        efficient when the array contains duplicate values.\n\n    Returns\n    -------\n    1d uint64 numpy array of hash values, same length as the vals\n    \"\"\"\n    if not hasattr(vals, \"dtype\"):\n        raise TypeError(\"must pass a ndarray-like\")\n    dtype = vals.dtype\n\n    # For categoricals, we hash the categories, then remap the codes to the\n    # hash values. (This check is above the complex check so that we don't ask\n    # numpy if categorical is a subdtype of complex, as it will choke).\n    if is_categorical_dtype(dtype):\n        return _hash_categorical(vals, encoding, hash_key)\n    elif is_extension_array_dtype(dtype):\n        vals, _ = vals._values_for_factorize()\n        dtype = vals.dtype\n\n    # we'll be working with everything as 64-bit values, so handle this\n    # 128-bit value early\n    if np.issubdtype(dtype, np.complex128):\n        return hash_array(np.real(vals)) + 23 * hash_array(np.imag(vals))\n\n    # First, turn whatever array this is into unsigned 64-bit ints, if we can\n    # manage it.\n    elif isinstance(dtype, np.bool):\n        vals = vals.astype(\"u8\")\n    elif issubclass(dtype.type, (np.datetime64, np.timedelta64)):\n        vals = vals.view(\"i8\").astype(\"u8\", copy=False)\n    elif issubclass(dtype.type, np.number) and dtype.itemsize <= 8:\n        vals = vals.view(f\"u{vals.dtype.itemsize}\").astype(\"u8\")\n    else:\n        # With repeated values, its MUCH faster to categorize object dtypes,\n        # then hash and rename categories. We allow skipping the categorization\n        # when the values are known/likely to be unique.\n        if categorize:\n            from pandas import factorize, Categorical, Index\n\n            codes, categories = factorize(vals, sort=False)\n            cat = Categorical(codes, Index(categories), ordered=False, fastpath=True)\n            return _hash_categorical(cat, encoding, hash_key)\n\n        try:\n            vals = hashing.hash_object_array(vals, hash_key, encoding)\n        except TypeError:\n            # we have mixed types\n            vals = hashing.hash_object_array(\n                vals.astype(str).astype(object), hash_key, encoding\n            )\n\n    # Then, redistribute these 64-bit ints within the space of 64-bit ints\n    vals ^= vals >> 30\n    vals *= np.uint64(0xBF58476D1CE4E5B9)\n    vals ^= vals >> 27\n    vals *= np.uint64(0x94D049BB133111EB)\n    vals ^= vals >> 31\n    return vals",
        "begin_line": 248,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#31",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 31,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00022426553038797938,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#185",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 185,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001451378809869376,
            "pseudo_dstar_susp": 0.0013717421124828531,
            "pseudo_tarantula_susp": 0.0014577259475218659,
            "pseudo_op2_susp": 0.0013717421124828531,
            "pseudo_barinel_susp": 0.0014577259475218659
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#263",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 263,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_named_tuple#295",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_named_tuple(obj)",
        "snippet": "def is_named_tuple(obj) -> bool:\n    \"\"\"\n    Check if the object is a named tuple.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_named_tuple : bool\n        Whether `obj` is a named tuple.\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    >>> p = Point(1, 2)\n    >>>\n    >>> is_named_tuple(p)\n    True\n    >>> is_named_tuple((1, 2))\n    False\n    \"\"\"\n    return isinstance(obj, tuple) and hasattr(obj, \"_fields\")",
        "begin_line": 295,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#322",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> import collections\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 322,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010090817356205853,
            "pseudo_dstar_susp": 0.0010090817356205853,
            "pseudo_tarantula_susp": 0.0010141987829614604,
            "pseudo_op2_susp": 0.0010090817356205853,
            "pseudo_barinel_susp": 0.0010141987829614604
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#360",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj) -> bool:\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 360,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dataclass#391",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dataclass(item)",
        "snippet": "def is_dataclass(item):\n    \"\"\"\n    Checks if the object is a data-class instance\n\n    Parameters\n    ----------\n    item : object\n\n    Returns\n    --------\n    is_dataclass : bool\n        True if the item is an instance of a data-class,\n        will return false if you pass the data class itself\n\n    Examples\n    --------\n    >>> from dataclasses import dataclass\n    >>> @dataclass\n    ... class Point:\n    ...     x: int\n    ...     y: int\n\n    >>> is_dataclass(Point)\n    False\n    >>> is_dataclass(Point(0,2))\n    True\n\n    \"\"\"\n    try:\n        from dataclasses import is_dataclass\n\n        return is_dataclass(item) and not isinstance(item, type)\n    except ImportError:\n        return False",
        "begin_line": 391,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0033444816053511705,
            "pseudo_dstar_susp": 0.0029069767441860465,
            "pseudo_tarantula_susp": 0.0033444816053511705,
            "pseudo_op2_susp": 0.0029069767441860465,
            "pseudo_barinel_susp": 0.0033444816053511705
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#66",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = set(islice(arg, check_count))\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 66,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#122",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series(dtype=object)\n\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 122,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#244",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            # error: Item \"DatetimeIndex\" of \"Union[DatetimeArray, DatetimeIndex]\" has\n            # no attribute \"tz_convert\"\n            arg = arg.tz_convert(None).tz_localize(tz)  # type: ignore\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            # error: Item \"DatetimeIndex\" of \"Union[DatetimeArray, DatetimeIndex]\" has\n            # no attribute \"tz_localize\"\n            return arg.tz_localize(tz)  # type: ignore\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"_values\", arg)\n\n        # GH 30050 pass an ndarray to tslib.array_with_unit_to_datetime\n        # because it expects an ndarray argument\n        if isinstance(arg, IntegerArray):\n            result = arg.astype(f\"datetime64[{unit}]\")\n            tz_parsed = None\n        else:\n\n            result, tz_parsed = tslib.array_with_unit_to_datetime(\n                arg, unit, errors=errors\n            )\n\n        if errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n        # GH 23758: We may still need to localize the result with tz\n        # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n        # result will be naive but in UTC\n        try:\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        except AttributeError:\n            # Regular Index from 'ignore' path\n            return result\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    try:\n        arg, _ = maybe_convert_dtype(arg, copy=False)\n    except TypeError:\n        if errors == \"coerce\":\n            result = np.array([\"NaT\"], dtype=\"datetime64[ns]\").repeat(len(arg))\n            return DatetimeIndex(result, name=name)\n        elif errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(arg, name=name)\n            return result\n        raise\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime) as err:\n                    raise ValueError(\n                        \"cannot convert the input to '%Y%m%d' date format\"\n                    ) from err\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                dta = DatetimeArray(values, dtype=tz_to_dtype(tz))\n                return DatetimeIndex._simple_new(dta, name=name)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        # is in UTC\n        dta = DatetimeArray(result, dtype=tz_to_dtype(tz_parsed))\n        return DatetimeIndex._simple_new(dta, name=name)\n\n    utc = tz == \"utc\"\n    return _box_as_indexlike(result, utc=utc, name=name)",
        "begin_line": 244,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#550",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series, DataFrame/dict-like\n        The object to convert to a datetime.\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    format : str, default None\n        The strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior.\n    exact : bool, True by default\n        Behaves as:\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        The unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings, and if it can be inferred, switch to a faster\n        method of parsing them. In some cases this can increase the parsing\n        speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets. The cache is only\n        used when there are at least 50 values. The presence of out-of-bounds\n        values will render the cache unusable and may slow down parsing.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True.\n\n    Returns\n    -------\n    datetime\n        If parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n    convert_dtypes : Convert dtypes.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, format)\n    elif is_list_like(arg):\n        try:\n            cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        except tslibs.OutOfBoundsDatetime:\n            # caching attempts to create a DatetimeIndex, which may raise\n            # an OOB. If that's the desired behavior, then just reraise...\n            if errors == \"raise\":\n                raise\n            # ... otherwise, continue without the cache.\n            from pandas import Series\n\n            cache_array = Series([], dtype=object)  # just an empty array\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array)\n        else:\n            result = convert_listlike(arg, format)\n    else:\n        result = convert_listlike(np.array([arg]), format)[0]\n\n    return result",
        "begin_line": 550,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#88",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, start, cls)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            start = start._range\n            return cls._simple_new(start, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, name=name)",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#137",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values: range, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: range, name: Label = None) -> \"RangeIndex\":\n        result = object.__new__(cls)\n\n        assert isinstance(values, range)\n\n        result._range = values\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_unique#321",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\" return if the index has unique values \"\"\"\n        return True",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_indexer#358",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n\n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # GH 28678: work on reversed range for simplicity\n            reverse = self._range[::-1]\n            start, stop, step = reverse.start, reverse.stop, reverse.step\n\n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n\n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n\n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)",
        "begin_line": 358,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#448",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017391304347826088,
            "pseudo_dstar_susp": 0.0016207455429497568,
            "pseudo_tarantula_susp": 0.0017452006980802793,
            "pseudo_op2_susp": 0.0016207455429497568,
            "pseudo_barinel_susp": 0.0017452006980802793
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#679",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__getitem__#689",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Conserve RangeIndex type for scalar and slice keys.\n        \"\"\"\n        if isinstance(key, slice):\n            new_range = self._range[key]\n            return self._simple_new(new_range, name=self.name)\n        elif is_integer(key):\n            new_key = int(key)\n            try:\n                return self._range[new_key]\n            except IndexError as err:\n                raise IndexError(\n                    f\"index {key} is out of bounds for axis 0 with size {len(self)}\"\n                ) from err\n        elif is_scalar(key):\n            raise IndexError(\n                \"only integers, slices (`:`), \"\n                \"ellipsis (`...`), numpy.newaxis (`None`) \"\n                \"and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n        # fall back to Int64Index\n        return super().__getitem__(key)",
        "begin_line": 689,
        "end_line": 712,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#66",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027800945232137893,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#76",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00022487069934787497,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.util._decorators.decorate#222",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorate(func: F)",
        "snippet": "    def decorate(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)\n\n        kind = inspect.Parameter.POSITIONAL_OR_KEYWORD\n        params = [\n            inspect.Parameter(\"self\", kind),\n            inspect.Parameter(name, kind, default=None),\n            inspect.Parameter(\"index\", kind, default=None),\n            inspect.Parameter(\"columns\", kind, default=None),\n            inspect.Parameter(\"axis\", kind, default=None),\n        ]\n\n        for pname, default in extra_params:\n            params.append(inspect.Parameter(pname, kind, default=default))\n\n        sig = inspect.Signature(params)\n\n        # https://github.com/python/typing/issues/598\n        func.__signature__ = sig  # type: ignore\n        return cast(F, wrapper)",
        "begin_line": 222,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#224",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)",
        "begin_line": 224,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017921146953405018,
            "pseudo_dstar_susp": 0.0016638935108153079,
            "pseudo_tarantula_susp": 0.0017953321364452424,
            "pseudo_op2_susp": 0.0016638935108153079,
            "pseudo_barinel_susp": 0.0017953321364452424
        }
    },
    {
        "name": "pandas.util._decorators.decorator#268",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorator(func: F)",
        "snippet": "    def decorator(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)\n\n        # collecting docstring and docstring templates\n        docstring_components: List[Union[str, Callable]] = []\n        if func.__doc__:\n            docstring_components.append(dedent(func.__doc__))\n\n        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)\n\n        # formatting templates and concatenating docstring\n        wrapper.__doc__ = \"\".join(\n            [\n                arg.format(**kwargs)\n                if isinstance(arg, str)\n                else dedent(arg.__doc__ or \"\")\n                for arg in docstring_components\n            ]\n        )\n\n        wrapper._docstring_components = docstring_components  # type: ignore\n\n        return cast(F, wrapper)",
        "begin_line": 268,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017921146953405018,
            "pseudo_dstar_susp": 0.0016638935108153079,
            "pseudo_tarantula_susp": 0.0017953321364452424,
            "pseudo_op2_susp": 0.0016638935108153079,
            "pseudo_barinel_susp": 0.0017953321364452424
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#270",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)",
        "begin_line": 270,
        "end_line": 271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017921146953405018,
            "pseudo_dstar_susp": 0.0016638935108153079,
            "pseudo_tarantula_susp": 0.0017953321364452424,
            "pseudo_op2_susp": 0.0016638935108153079,
            "pseudo_barinel_susp": 0.0017953321364452424
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter.__init__#170",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter.__init__(self, categorical: 'Categorical', buf: Optional[IO[str]]=None, length: bool=True, na_rep: str='NaN', footer: bool=True)",
        "snippet": "    def __init__(\n        self,\n        categorical: \"Categorical\",\n        buf: Optional[IO[str]] = None,\n        length: bool = True,\n        na_rep: str = \"NaN\",\n        footer: bool = True,\n    ):\n        self.categorical = categorical\n        self.buf = buf if buf is not None else StringIO(\"\")\n        self.na_rep = na_rep\n        self.length = length\n        self.footer = footer",
        "begin_line": 170,
        "end_line": 182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter._get_footer#184",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter._get_footer(self)",
        "snippet": "    def _get_footer(self) -> str:\n        footer = \"\"\n\n        if self.length:\n            if footer:\n                footer += \", \"\n            footer += f\"Length: {len(self.categorical)}\"\n\n        level_info = self.categorical._repr_categories_info()\n\n        # Levels are added in a newline\n        if footer:\n            footer += \"\\n\"\n        footer += level_info\n\n        return str(footer)",
        "begin_line": 184,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter._get_formatted_values#201",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter._get_formatted_values(self)",
        "snippet": "    def _get_formatted_values(self) -> List[str]:\n        return format_array(\n            self.categorical._internal_get_values(),\n            None,\n            float_format=None,\n            na_rep=self.na_rep,\n        )",
        "begin_line": 201,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.CategoricalFormatter.to_string#209",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.CategoricalFormatter",
        "signature": "pandas.io.formats.format.CategoricalFormatter.to_string(self)",
        "snippet": "    def to_string(self) -> str:\n        categorical = self.categorical\n\n        if len(categorical) == 0:\n            if self.footer:\n                return self._get_footer()\n            else:\n                return \"\"\n\n        fmt_values = self._get_formatted_values()\n\n        fmt_values = [i.strip() for i in fmt_values]\n        values = \", \".join(fmt_values)\n        result = [\"[\" + values + \"]\"]\n        if self.footer:\n            footer = self._get_footer()\n            if footer:\n                result.append(footer)\n\n        return str(\"\\n\".join(result))",
        "begin_line": 209,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#392",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 392,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#395",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.justify#398",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.justify(self, texts: Any, max_len: int, mode: str='right')",
        "snippet": "    def justify(self, texts: Any, max_len: int, mode: str = \"right\") -> List[str]:\n        return justify(texts, max_len, mode=mode)",
        "begin_line": 398,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#444",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 444,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.io.formats.format.format_array#1087",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.format_array(values: Any, formatter: Optional[Callable], float_format: Optional[FloatFormatType]=None, na_rep: str='NaN', digits: Optional[int]=None, space: Optional[Union[str, int]]=None, justify: str='right', decimal: str='.', leading_space: Optional[bool]=None)",
        "snippet": "def format_array(\n    values: Any,\n    formatter: Optional[Callable],\n    float_format: Optional[FloatFormatType] = None,\n    na_rep: str = \"NaN\",\n    digits: Optional[int] = None,\n    space: Optional[Union[str, int]] = None,\n    justify: str = \"right\",\n    decimal: str = \".\",\n    leading_space: Optional[bool] = None,\n) -> List[str]:\n    \"\"\"\n    Format an array for printing.\n\n    Parameters\n    ----------\n    values\n    formatter\n    float_format\n    na_rep\n    digits\n    space\n    justify\n    decimal\n    leading_space : bool, optional\n        Whether the array should be formatted with a leading space.\n        When an array as a column of a Series or DataFrame, we do want\n        the leading space to pad between columns.\n\n        When formatting an Index subclass\n        (e.g. IntervalIndex._format_native_types), we don't want the\n        leading space since it should be left-aligned.\n\n    Returns\n    -------\n    List[str]\n    \"\"\"\n    fmt_klass: Type[GenericArrayFormatter]\n    if is_datetime64_dtype(values.dtype):\n        fmt_klass = Datetime64Formatter\n    elif is_datetime64tz_dtype(values):\n        fmt_klass = Datetime64TZFormatter\n    elif is_timedelta64_dtype(values.dtype):\n        fmt_klass = Timedelta64Formatter\n    elif is_extension_array_dtype(values.dtype):\n        fmt_klass = ExtensionArrayFormatter\n    elif is_float_dtype(values.dtype) or is_complex_dtype(values.dtype):\n        fmt_klass = FloatArrayFormatter\n    elif is_integer_dtype(values.dtype):\n        fmt_klass = IntArrayFormatter\n    else:\n        fmt_klass = GenericArrayFormatter\n\n    if space is None:\n        space = get_option(\"display.column_space\")\n\n    if float_format is None:\n        float_format = get_option(\"display.float_format\")\n\n    if digits is None:\n        digits = get_option(\"display.precision\")\n\n    fmt_obj = fmt_klass(\n        values,\n        digits=digits,\n        na_rep=na_rep,\n        float_format=float_format,\n        formatter=formatter,\n        space=space,\n        justify=justify,\n        decimal=decimal,\n        leading_space=leading_space,\n    )\n\n    return fmt_obj.get_result()",
        "begin_line": 1087,
        "end_line": 1161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.__init__#1165",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.__init__(self, values: Any, digits: int=7, formatter: Optional[Callable]=None, na_rep: str='NaN', space: Union[str, int]=12, float_format: Optional[FloatFormatType]=None, justify: str='right', decimal: str='.', quoting: Optional[int]=None, fixed_width: bool=True, leading_space: Optional[bool]=None)",
        "snippet": "    def __init__(\n        self,\n        values: Any,\n        digits: int = 7,\n        formatter: Optional[Callable] = None,\n        na_rep: str = \"NaN\",\n        space: Union[str, int] = 12,\n        float_format: Optional[FloatFormatType] = None,\n        justify: str = \"right\",\n        decimal: str = \".\",\n        quoting: Optional[int] = None,\n        fixed_width: bool = True,\n        leading_space: Optional[bool] = None,\n    ):\n        self.values = values\n        self.digits = digits\n        self.na_rep = na_rep\n        self.space = space\n        self.formatter = formatter\n        self.float_format = float_format\n        self.justify = justify\n        self.decimal = decimal\n        self.quoting = quoting\n        self.fixed_width = fixed_width\n        self.leading_space = leading_space",
        "begin_line": 1165,
        "end_line": 1189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.get_result#1191",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.get_result(self)",
        "snippet": "    def get_result(self) -> List[str]:\n        fmt_values = self._format_strings()\n        return _make_fixed_width(fmt_values, self.justify)",
        "begin_line": 1191,
        "end_line": 1193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format_strings#1195",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        if self.float_format is None:\n            float_format = get_option(\"display.float_format\")\n            if float_format is None:\n                precision = get_option(\"display.precision\")\n                float_format = lambda x: f\"{x: .{precision:d}g}\"\n        else:\n            float_format = self.float_format\n\n        formatter = (\n            self.formatter\n            if self.formatter is not None\n            else (lambda x: pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")))\n        )\n\n        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NA:\n                        return str(NA)\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return str(x)\n            else:\n                # object dtype\n                return str(formatter(x))\n\n        vals = self.values\n        if isinstance(vals, Index):\n            vals = vals._values\n        elif isinstance(vals, ABCSparseArray):\n            vals = vals.values\n\n        is_float_type = lib.map_infer(vals, is_float) & notna(vals)\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()\n\n        fmt_values = []\n        for i, v in enumerate(vals):\n            if not is_float_type[i] and leading_space:\n                fmt_values.append(f\" {_format(v)}\")\n            elif is_float_type[i]:\n                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here.\n                    tpl = \"{v}\"\n                else:\n                    tpl = \" {v}\"\n                fmt_values.append(tpl.format(v=_format(v)))\n\n        return fmt_values",
        "begin_line": 1195,
        "end_line": 1257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format#1210",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format(x)",
        "snippet": "        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NA:\n                        return str(NA)\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return str(x)\n            else:\n                # object dtype\n                return str(formatter(x))",
        "begin_line": 1210,
        "end_line": 1229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format._make_fixed_width#1708",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._make_fixed_width(strings: List[str], justify: str='right', minimum: Optional[int]=None, adj: Optional[TextAdjustment]=None)",
        "snippet": "def _make_fixed_width(\n    strings: List[str],\n    justify: str = \"right\",\n    minimum: Optional[int] = None,\n    adj: Optional[TextAdjustment] = None,\n) -> List[str]:\n\n    if len(strings) == 0 or justify == \"all\":\n        return strings\n\n    if adj is None:\n        adj = _get_adjustment()\n\n    max_len = max(adj.len(x) for x in strings)\n\n    if minimum is not None:\n        max_len = max(minimum, max_len)\n\n    conf_max = get_option(\"display.max_colwidth\")\n    if conf_max is not None and max_len > conf_max:\n        max_len = conf_max\n\n    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x\n\n    strings = [just(x) for x in strings]\n    result = adj.justify(strings, max_len, mode=justify)\n    return result",
        "begin_line": 1708,
        "end_line": 1738,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.format.just#1730",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.just(x)",
        "snippet": "    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x",
        "begin_line": 1730,
        "end_line": 1734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#115",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                f\"Wrong number of items passed {len(self.values)}, \"\n                f\"placement implies {len(self.mgr_locs)}\"\n            )",
        "begin_line": 115,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009149130832570906,
            "pseudo_dstar_susp": 0.0009149130832570906,
            "pseudo_tarantula_susp": 0.0009157509157509158,
            "pseudo_op2_susp": 0.0009149130832570906,
            "pseudo_barinel_susp": 0.0009157509157509158
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#126",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            raise ValueError(\n                \"Wrong number of dimensions. \"\n                f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n            )\n        return ndim",
        "begin_line": 126,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009149130832570906,
            "pseudo_dstar_susp": 0.0009149130832570906,
            "pseudo_tarantula_susp": 0.0009157509157509158,
            "pseudo_op2_susp": 0.0009149130832570906,
            "pseudo_barinel_susp": 0.0009157509157509158
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._consolidate_key#168",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._consolidate_key(self)",
        "snippet": "    def _consolidate_key(self):\n        return (self._can_consolidate, self.dtype.name)",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026136957658128593,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._is_single_block#172",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._is_single_block(self)",
        "snippet": "    def _is_single_block(self) -> bool:\n        return self.ndim == 1",
        "begin_line": 172,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_categorical_astype#185",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_categorical_astype(self, dtype)",
        "snippet": "    def is_categorical_astype(self, dtype) -> bool:\n        \"\"\"\n        validate that we have a astypeable to categorical,\n        returns a boolean if we are a categorical\n        \"\"\"\n        if dtype is Categorical or dtype is CategoricalDtype:\n            # this is a pd.Categorical, but is not\n            # a valid type for astypeing\n            raise TypeError(f\"invalid type {dtype} for astype\")\n\n        elif is_categorical_dtype(dtype):\n            return True\n\n        return False",
        "begin_line": 185,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#211",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"\n        The array that Series._values returns (internal values).\n        \"\"\"\n        return self.values",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023485204321277596,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.get_values#223",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return an internal format, currently just the ndarray\n        this is often overridden to handle to_dense like operations\n        \"\"\"\n        if is_object_dtype(dtype):\n            return self.values.astype(object)\n        return self.values",
        "begin_line": 223,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026455026455026457,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fill_value#240",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.nan",
        "begin_line": 240,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#244",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 244,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009017132551848512,
            "pseudo_dstar_susp": 0.0009017132551848512,
            "pseudo_tarantula_susp": 0.0009025270758122744,
            "pseudo_op2_susp": 0.0009017132551848512,
            "pseudo_barinel_susp": 0.0009025270758122744
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#248",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 248,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009074410163339383,
            "pseudo_dstar_susp": 0.0009074410163339383,
            "pseudo_tarantula_susp": 0.0009082652134423251,
            "pseudo_op2_susp": 0.0009074410163339383,
            "pseudo_barinel_susp": 0.0009082652134423251
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#254",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None) -> \"Block\":\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 254,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#264",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
        "begin_line": 264,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026455026455026457,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__repr__#272",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        # don't want to print out all of the items here\n        name = type(self).__name__\n        if self._is_single_block:\n            result = f\"{name}: {len(self)} dtype: {self.dtype}\"\n        else:\n\n            shape = \" x \".join(str(s) for s in self.shape)\n            result = f\"{name}: {self.mgr_locs.indexer}, {shape}, dtype: {self.dtype}\"\n\n        return result",
        "begin_line": 272,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__len__#284",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.values)",
        "begin_line": 284,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__getstate__#287",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__getstate__(self)",
        "snippet": "    def __getstate__(self):\n        return self.mgr_locs.indexer, self.values",
        "begin_line": 287,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__setstate__#290",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state):\n        self.mgr_locs = libinternals.BlockPlacement(state[0])\n        self.values = state[1]\n        self.ndim = self.values.ndim",
        "begin_line": 290,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#295",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        return self.values[slicer]",
        "begin_line": 295,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.getitem_block#299",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.getitem_block(self, slicer, new_mgr_locs=None)",
        "snippet": "    def getitem_block(self, slicer, new_mgr_locs=None):\n        \"\"\"\n        Perform __getitem__-like, return result as block.\n\n        As of now, only supports slices that preserve dimensionality.\n        \"\"\"\n        if new_mgr_locs is None:\n            axis0_slicer = slicer[0] if isinstance(slicer, tuple) else slicer\n            new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n        new_values = self._slice(slicer)\n\n        if self._validate_ndim and new_values.ndim != self.ndim:\n            raise ValueError(\"Only same dim slicing is allowed\")\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 299,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#317",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00022326412145568208,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#321",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 321,
        "end_line": 322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010515247108307045,
            "pseudo_dstar_susp": 0.0010515247108307045,
            "pseudo_tarantula_susp": 0.0010570824524312897,
            "pseudo_op2_susp": 0.0010515247108307045,
            "pseudo_barinel_susp": 0.0010570824524312897
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.merge#324",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.merge(self, other)",
        "snippet": "    def merge(self, other):\n        return _merge_blocks([self, other])",
        "begin_line": 324,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#338",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 338,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002889338341519792,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.set#341",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        Modify Block in-place with new item value\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.values[locs] = values",
        "begin_line": 341,
        "end_line": 349,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.delete#351",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.delete(self, loc)",
        "snippet": "    def delete(self, loc) -> None:\n        \"\"\"\n        Delete given loc(-s) from block in-place.\n        \"\"\"\n        self.values = np.delete(self.values, loc, 0)\n        self.mgr_locs = self.mgr_locs.delete(loc)",
        "begin_line": 351,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.apply#358",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.apply(self, func, **kwargs)",
        "snippet": "    def apply(self, func, **kwargs) -> List[\"Block\"]:\n        \"\"\"\n        apply the function to my values; return a block if we are not\n        one\n        \"\"\"\n        with np.errstate(all=\"ignore\"):\n            result = func(self.values, **kwargs)\n\n        return self._split_op_result(result)",
        "begin_line": 358,
        "end_line": 366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._split_op_result#368",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._split_op_result(self, result)",
        "snippet": "    def _split_op_result(self, result) -> List[\"Block\"]:\n        # See also: split_and_operate\n        if is_extension_array_dtype(result) and result.ndim > 1:\n            # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n            nbs = []\n            for i, loc in enumerate(self.mgr_locs):\n                vals = result[i]\n                nv = _block_shape(vals, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=[loc])\n                nbs.append(block)\n            return nbs\n\n        if not isinstance(result, Block):\n            result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n\n        return [result]",
        "begin_line": 368,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.split_and_operate#426",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.split_and_operate(self, mask, f, inplace: bool)",
        "snippet": "    def split_and_operate(self, mask, f, inplace: bool) -> List[\"Block\"]:\n        \"\"\"\n        split the block per-column, and apply the callable f\n        per-column, return a new block for each. Handle\n        masking which will not change a block unless needed.\n\n        Parameters\n        ----------\n        mask : 2-d boolean mask\n        f : callable accepting (1d-mask, 1d values, indexer)\n        inplace : boolean\n\n        Returns\n        -------\n        list of blocks\n        \"\"\"\n        if mask is None:\n            mask = np.broadcast_to(True, shape=self.shape)\n\n        new_values = self.values\n\n        def make_a_block(nv, ref_loc):\n            if isinstance(nv, list):\n                assert len(nv) == 1, nv\n                assert isinstance(nv[0], Block)\n                block = nv[0]\n            else:\n                # Put back the dimension that was taken from it and make\n                # a block out of the result.\n                nv = _block_shape(nv, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=ref_loc)\n            return block\n\n        # ndim == 1\n        if self.ndim == 1:\n            if mask.any():\n                nv = f(mask, new_values, None)\n            else:\n                nv = new_values if inplace else new_values.copy()\n            block = make_a_block(nv, self.mgr_locs)\n            return [block]\n\n        # ndim > 1\n        new_blocks = []\n        for i, ref_loc in enumerate(self.mgr_locs):\n            m = mask[i]\n            v = new_values[i]\n\n            # need a new block\n            if m.any():\n                nv = f(m, v, i)\n            else:\n                nv = v if inplace else v.copy()\n\n            block = make_a_block(nv, [ref_loc])\n            new_blocks.append(block)\n\n        return new_blocks",
        "begin_line": 426,
        "end_line": 483,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_a_block#447",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_a_block(nv, ref_loc)",
        "snippet": "        def make_a_block(nv, ref_loc):\n            if isinstance(nv, list):\n                assert len(nv) == 1, nv\n                assert isinstance(nv[0], Block)\n                block = nv[0]\n            else:\n                # Put back the dimension that was taken from it and make\n                # a block out of the result.\n                nv = _block_shape(nv, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=ref_loc)\n            return block",
        "begin_line": 447,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.astype#533",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        Coerce to the new dtype.\n\n        Parameters\n        ----------\n        dtype : str, dtype convertible\n        copy : bool, default False\n            copy if indicated\n        errors : str, {'raise', 'ignore'}, default 'ignore'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        errors_legal_values = (\"raise\", \"ignore\")\n\n        if errors not in errors_legal_values:\n            invalid_arg = (\n                \"Expected value of kwarg 'errors' to be one of \"\n                f\"{list(errors_legal_values)}. Supplied value is '{errors}'\"\n            )\n            raise ValueError(invalid_arg)\n\n        if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n            msg = (\n                f\"Expected an instance of {dtype.__name__}, \"\n                \"but got the class instead. Try instantiating 'dtype'.\"\n            )\n            raise TypeError(msg)\n\n        # may need to convert to categorical\n        if self.is_categorical_astype(dtype):\n\n            if is_categorical_dtype(self.values):\n                # GH 10696/18593: update an existing categorical efficiently\n                return self.make_block(self.values.astype(dtype, copy=copy))\n\n            return self.make_block(Categorical(self.values, dtype=dtype))\n\n        dtype = pandas_dtype(dtype)\n\n        # astype processing\n        if is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n\n        # force the copy here\n        if self.is_extension:\n            # TODO: Should we try/except this astype?\n            values = self.values.astype(dtype)\n        else:\n            if issubclass(dtype.type, str):\n\n                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types()\n\n                # astype formatting\n                else:\n                    # Because we have neither is_extension nor is_datelike,\n                    #  self.values already has the correct shape\n                    values = self.values\n\n            else:\n                values = self.get_values(dtype=dtype)\n\n            # _astype_nansafe works fine with 1-d only\n            vals1d = values.ravel()\n            try:\n                values = astype_nansafe(vals1d, dtype, copy=True)\n            except (ValueError, TypeError):\n                # e.g. astype_nansafe can fail on object-dtype of strings\n                #  trying to convert to float\n                if errors == \"raise\":\n                    raise\n                newb = self.copy() if copy else self\n                return newb\n\n        # TODO(extension)\n        # should we make this attribute?\n        if isinstance(values, np.ndarray):\n            values = values.reshape(self.shape)\n\n        newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n        if newb.is_numeric and self.is_numeric:\n            if newb.shape != self.shape:\n                raise TypeError(\n                    f\"cannot set astype for copy = [{copy}] for dtype \"\n                    f\"({self.dtype.name} [{self.shape}]) to different shape \"\n                    f\"({newb.dtype.name} [{newb.shape}])\"\n                )\n        return newb",
        "begin_line": 533,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.convert#631",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\"\n        attempt to coerce any object types to better types return a copy\n        of the block (if copy = True) by definition we are not an ObjectBlock\n        here!\n        \"\"\"\n        return self.copy() if copy else self",
        "begin_line": 631,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#675",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep: bool=True)",
        "snippet": "    def copy(self, deep: bool = True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 675,
        "end_line": 680,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026588673225206064,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.take_nd#1261",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_tuple=None)",
        "snippet": "    def take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_tuple=None):\n        \"\"\"\n        Take values according to indexer and return them as a block.bb\n\n        \"\"\"\n        # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n        # so need to preserve types\n        # sparse is treated like an ndarray, but needs .get_values() shaping\n\n        values = self.values\n\n        if fill_tuple is None:\n            fill_value = self.fill_value\n            allow_fill = False\n        else:\n            fill_value = fill_tuple[0]\n            allow_fill = True\n\n        new_values = algos.take_nd(\n            values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        if not is_dtype_equal(new_values.dtype, self.dtype):\n            return self.make_block(new_values, new_mgr_locs)\n        else:\n            return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1261,
        "end_line": 1292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002673082063619353,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.equals#1426",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        return array_equivalent(self.values, other.values)",
        "begin_line": 1426,
        "end_line": 1429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1586",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"\n        Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        values = self._maybe_coerce_values(values)\n\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)\n\n        if self.ndim == 2 and len(self.mgr_locs) != 1:\n            # TODO(2DEA): check unnecessary with 2D EAs\n            raise AssertionError(\"block.size != values.size\")",
        "begin_line": 1586,
        "end_line": 1612,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0033444816053511705,
            "pseudo_dstar_susp": 0.0029069767441860465,
            "pseudo_tarantula_susp": 0.0033444816053511705,
            "pseudo_op2_susp": 0.0029069767441860465,
            "pseudo_barinel_susp": 0.0033444816053511705
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.shape#1615",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.shape(self)",
        "snippet": "    def shape(self):\n        if self.ndim == 1:\n            return ((len(self.values)),)\n        return (len(self.mgr_locs), len(self.values))",
        "begin_line": 1615,
        "end_line": 1618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030120481927710845,
            "pseudo_dstar_susp": 0.0026666666666666666,
            "pseudo_tarantula_susp": 0.0030303030303030303,
            "pseudo_op2_susp": 0.0026666666666666666,
            "pseudo_barinel_susp": 0.0030303030303030303
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.iget#1620",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.iget(self, col)",
        "snippet": "    def iget(self, col):\n\n        if self.ndim == 2 and isinstance(col, tuple):\n            col, loc = col\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            elif isinstance(col, slice):\n                if col != slice(None):\n                    raise NotImplementedError(col)\n                return self.values[[loc]]\n            return self.values[loc]\n        else:\n            if col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            return self.values",
        "begin_line": 1620,
        "end_line": 1634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.should_store#1636",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return isinstance(value, self._holder)",
        "begin_line": 1636,
        "end_line": 1637,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1709",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1709,
        "end_line": 1724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018148820326678765,
            "pseudo_dstar_susp": 0.0016835016835016834,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._holder#1727",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._holder(self)",
        "snippet": "    def _holder(self):\n        # For extension blocks, the holder is values-dependent.\n        return type(self.values)",
        "begin_line": 1727,
        "end_line": 1729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.is_numeric#1747",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.is_numeric(self)",
        "snippet": "    def is_numeric(self):\n        return self.values.dtype._is_numeric",
        "begin_line": 1747,
        "end_line": 1748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.get_values#1781",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        # ExtensionArrays must be iterable, so this works.\n        values = np.asarray(self.values)\n        if values.ndim == self.ndim - 1:\n            values = values.reshape((1,) + values.shape)\n        return values",
        "begin_line": 1781,
        "end_line": 1786,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027800945232137893,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.take_nd#1804",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.take_nd(self, indexer, axis: int=0, new_mgr_locs=None, fill_tuple=None)",
        "snippet": "    def take_nd(self, indexer, axis: int = 0, new_mgr_locs=None, fill_tuple=None):\n        \"\"\"\n        Take values according to indexer and return them as a block.\n        \"\"\"\n        if fill_tuple is None:\n            fill_value = None\n        else:\n            fill_value = fill_tuple[0]\n\n        # axis doesn't matter; we are really a single-dim object\n        # but are passed the axis depending on the calling routing\n        # if its REALLY axis 0, then this will be a reindex and not a take\n        new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (self.ndim == 1 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1804,
        "end_line": 1824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatOrComplexBlock.equals#1994",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatOrComplexBlock",
        "signature": "pandas.core.internals.blocks.FloatOrComplexBlock.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        left, right = self.values, other.values\n        return ((left == right) | (np.isnan(left) & np.isnan(right))).all()",
        "begin_line": 1994,
        "end_line": 1998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock.should_store#2058",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value) -> bool:\n        # when inserting a column should not coerce integers to floats\n        # unnecessarily\n        return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype",
        "begin_line": 2058,
        "end_line": 2061,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ComplexBlock.should_store#2076",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ComplexBlock",
        "signature": "pandas.core.internals.blocks.ComplexBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value) -> bool:\n        return issubclass(value.dtype.type, np.complexfloating)",
        "begin_line": 2076,
        "end_line": 2077,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.IntBlock.should_store#2095",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.IntBlock",
        "signature": "pandas.core.internals.blocks.IntBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value) -> bool:\n        return is_integer_dtype(value) and value.dtype == self.dtype",
        "begin_line": 2095,
        "end_line": 2096,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder#2103",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2103,
        "end_line": 2104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values#2110",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return object dtype as boxed values, such as Timestamps/Timedelta\n        \"\"\"\n        if is_object_dtype(dtype):\n            values = self.values.ravel()\n            result = self._holder(values).astype(object)\n            return result.reshape(self.values.shape)\n        return self.values",
        "begin_line": 2110,
        "end_line": 2118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values#2120",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values(self)",
        "snippet": "    def internal_values(self):\n        # Override to return DatetimeArray and TimedeltaArray\n        return self.array_values()",
        "begin_line": 2120,
        "end_line": 2122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget#2124",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget(self, key)",
        "snippet": "    def iget(self, key):\n        # GH#31649 we need to wrap scalars in Timestamp/Timedelta\n        # TODO(EA2D): this can be removed if we ever have 2D EA\n        result = super().iget(key)\n        if isinstance(result, np.datetime64):\n            result = Timestamp(result)\n        elif isinstance(result, np.timedelta64):\n            result = Timedelta(result)\n        return result",
        "begin_line": 2124,
        "end_line": 2132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2145",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2145,
        "end_line": 2147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023364485981308412,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2153",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != _NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2153,
        "end_line": 2176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023590469450342062,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.astype#2178",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        these automatically copy, so copy=True has no effect\n        raise on an except if raise == True\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n\n        # if we are passed a datetime64[ns, tz]\n        if is_datetime64tz_dtype(dtype):\n            values = self.values\n            if copy:\n                # this should be the only copy\n                values = values.copy()\n            if getattr(values, \"tz\", None) is None:\n                values = DatetimeArray(values).tz_localize(\"UTC\")\n            values = values.tz_convert(dtype.tz)\n            return self.make_block(values)\n\n        # delegate\n        return super().astype(dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 2178,
        "end_line": 2197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element#2199",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            if self.is_datetimetz:\n                # require exact match, since non-nano does not exist\n                return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                    element, self.dtype\n                )\n\n            # GH#27419 if we get a non-nano datetime64 object\n            return is_datetime64_dtype(tipo)\n        elif element is NaT:\n            return True\n        elif isinstance(element, datetime):\n            if self.is_datetimetz:\n                return tz_compare(element.tzinfo, self.dtype.tz)\n            return element.tzinfo is None\n\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2199,
        "end_line": 2217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.array_values#2260",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        return DatetimeArray._simple_new(self.values)",
        "begin_line": 2260,
        "end_line": 2261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2277",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2277,
        "end_line": 2278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003057169061449098,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2280",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2280,
        "end_line": 2300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.get_values#2308",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        Returns an ndarray of values.\n\n        Parameters\n        ----------\n        dtype : np.dtype\n            Only `object`-like dtypes are respected here (not sure\n            why).\n\n        Returns\n        -------\n        values : ndarray\n            When ``dtype=object``, then and object-dtype ndarray of\n            boxed values is returned. Otherwise, an M8[ns] ndarray\n            is returned.\n\n            DatetimeArray is always 1-d. ``get_values`` will reshape\n            the return value to be the same dimensionality as the\n            block.\n        \"\"\"\n        values = self.values\n        if is_object_dtype(dtype):\n            values = values.astype(object)\n\n        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when\n            # the analogous NumPy-backed column would be a 2-D ndarray.\n            values = values.reshape(1, -1)\n        return values",
        "begin_line": 2308,
        "end_line": 2340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.equals#2422",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        # override for significant performance improvement\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        return (self.values.view(\"i8\") == other.values.view(\"i8\")).all()",
        "begin_line": 2422,
        "end_line": 2426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.__init__#2449",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        if values.dtype != _TD_DTYPE:\n            values = conversion.ensure_timedelta64ns(values)\n        if isinstance(values, TimedeltaArray):\n            values = values._data\n        assert isinstance(values, np.ndarray), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2449,
        "end_line": 2455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._holder#2458",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return TimedeltaArray",
        "begin_line": 2458,
        "end_line": 2459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027800945232137893,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.BoolBlock.should_store#2528",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.BoolBlock",
        "signature": "pandas.core.internals.blocks.BoolBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value) -> bool:\n        return issubclass(value.dtype.type, np.bool_) and not is_extension_array_dtype(\n            value\n        )",
        "begin_line": 2528,
        "end_line": 2531,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2555",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2555,
        "end_line": 2559,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.is_bool#2562",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.is_bool(self)",
        "snippet": "    def is_bool(self):\n        \"\"\"\n        we can be a bool if we have only bool values but are of type\n        object\n        \"\"\"\n        return lib.is_bool_array(self.values.ravel())",
        "begin_line": 2562,
        "end_line": 2567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.convert#2569",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\"\n        attempt to coerce any object types to better types return a copy of\n        the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n        can return multiple blocks!\n        \"\"\"\n        # operate column-by-column\n        def f(mask, val, idx):\n            shape = val.shape\n            values = soft_convert_objects(\n                val.ravel(),\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n            if isinstance(values, np.ndarray):\n                # TODO: allow EA once reshape is supported\n                values = values.reshape(shape)\n\n            values = _block_shape(values, ndim=self.ndim)\n            return values\n\n        if self.ndim == 2:\n            blocks = self.split_and_operate(None, f, False)\n        else:\n            values = f(None, self.values.ravel(), None)\n            blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n\n        return blocks",
        "begin_line": 2569,
        "end_line": 2607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.f#2584",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.f(mask, val, idx)",
        "snippet": "        def f(mask, val, idx):\n            shape = val.shape\n            values = soft_convert_objects(\n                val.ravel(),\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n            if isinstance(values, np.ndarray):\n                # TODO: allow EA once reshape is supported\n                values = values.reshape(shape)\n\n            values = _block_shape(values, ndim=self.ndim)\n            return values",
        "begin_line": 2584,
        "end_line": 2599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.should_store#2620",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value) -> bool:\n        return not (\n            issubclass(\n                value.dtype.type,\n                (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_),\n            )\n            or is_extension_array_dtype(value)\n        )",
        "begin_line": 2620,
        "end_line": 2627,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2859",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2859,
        "end_line": 2863,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028735632183908046,
            "pseudo_dstar_susp": 0.0025575447570332483,
            "pseudo_tarantula_susp": 0.002890173410404624,
            "pseudo_op2_susp": 0.0025575447570332483,
            "pseudo_barinel_susp": 0.002890173410404624
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock._holder#2866",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return Categorical",
        "begin_line": 2866,
        "end_line": 2867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2932",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2932,
        "end_line": 2975,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028735632183908046,
            "pseudo_dstar_susp": 0.0025575447570332483,
            "pseudo_tarantula_susp": 0.002890173410404624,
            "pseudo_op2_susp": 0.0025575447570332483,
            "pseudo_barinel_susp": 0.002890173410404624
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2978",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2978,
        "end_line": 2998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012406947890818859,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.0013003901170351106,
            "pseudo_op2_susp": 0.0012330456226880395,
            "pseudo_barinel_susp": 0.0013003901170351106
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#3004",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
        "begin_line": 3004,
        "end_line": 3017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025329280648429586,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks._block_shape#3020",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._block_shape(values, ndim=1, shape=None)",
        "snippet": "def _block_shape(values, ndim=1, shape=None):\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        if shape is None:\n            shape = values.shape\n        if not is_extension_array_dtype(values):\n            # TODO: https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))\n    return values",
        "begin_line": 3020,
        "end_line": 3030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks._merge_blocks#3033",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._merge_blocks(blocks, dtype=None, _can_consolidate=True)",
        "snippet": "def _merge_blocks(blocks, dtype=None, _can_consolidate=True):\n\n    if len(blocks) == 1:\n        return blocks[0]\n\n    if _can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n\n        # FIXME: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return make_block(new_values, placement=new_mgr_locs)\n\n    # no merge\n    return blocks",
        "begin_line": 3033,
        "end_line": 3056,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.blocks._safe_reshape#3059",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._safe_reshape(arr, new_shape)",
        "snippet": "def _safe_reshape(arr, new_shape):\n    \"\"\"\n    If possible, reshape `arr` to have shape `new_shape`,\n    with a couple of exceptions (see gh-13012):\n\n    1) If `arr` is a ExtensionArray or Index, `arr` will be\n       returned as is.\n    2) If `arr` is a Series, the `_values` attribute will\n       be reshaped and returned.\n\n    Parameters\n    ----------\n    arr : array-like, object to be reshaped\n    new_shape : int or tuple of ints, the new shape\n    \"\"\"\n    if isinstance(arr, ABCSeries):\n        arr = arr._values\n    if not isinstance(arr, ABCExtensionArray):\n        arr = arr.reshape(new_shape)\n    return arr",
        "begin_line": 3059,
        "end_line": 3078,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.console.get_console_size#8",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.get_console_size()",
        "snippet": "def get_console_size():\n    \"\"\"\n    Return console size as tuple = (width, height).\n\n    Returns (None,None) in non-interactive session.\n    \"\"\"\n    from pandas import get_option\n\n    display_width = get_option(\"display.width\")\n    display_height = get_option(\"display.max_rows\")\n\n    # Consider\n    # interactive shell terminal, can detect term size\n    # interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term\n    # size non-interactive script, should disregard term size\n\n    # in addition\n    # width,height have default values, but setting to 'None' signals\n    # should use Auto-Detection, But only in interactive shell-terminal.\n    # Simple. yeah.\n\n    if in_interactive_session():\n        if in_ipython_frontend():\n            # sane defaults for interactive non-shell terminal\n            # match default for width,height in config_init\n            from pandas._config.config import get_default_val\n\n            terminal_width = get_default_val(\"display.width\")\n            terminal_height = get_default_val(\"display.max_rows\")\n        else:\n            # pure terminal\n            terminal_width, terminal_height = get_terminal_size()\n    else:\n        terminal_width, terminal_height = None, None\n\n    # Note if the User sets width/Height to None (auto-detection)\n    # and we're in a script (non-inter), this will return (None,None)\n    # caller needs to deal.\n    return (display_width or terminal_width, display_height or terminal_height)",
        "begin_line": 8,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.console.in_interactive_session#53",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_interactive_session()",
        "snippet": "def in_interactive_session():\n    \"\"\"\n    Check if we're running in an interactive shell.\n\n    Returns\n    -------\n    bool\n        True if running under python/ipython interactive shell.\n    \"\"\"\n    from pandas import get_option\n\n    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")\n\n    try:\n        return __IPYTHON__ or check_main()  # noqa\n    except NameError:\n        return check_main()",
        "begin_line": 53,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.console.check_main#64",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.check_main()",
        "snippet": "    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.console.in_ipython_frontend#77",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_ipython_frontend()",
        "snippet": "def in_ipython_frontend():\n    \"\"\"\n    Check if we're inside an an IPython zmq frontend.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        ip = get_ipython()  # noqa\n        return \"zmq\" in str(type(ip)).lower()\n    except NameError:\n        pass\n\n    return False",
        "begin_line": 77,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#23",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ABCSeries, right: Any)",
        "snippet": "def should_extension_dispatch(left: ABCSeries, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should use dispatch_to_extension_op.\n\n    Parameters\n    ----------\n    left : Series\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if (\n        is_extension_array_dtype(left.dtype)\n        or is_datetime64_dtype(left.dtype)\n        or is_timedelta64_dtype(left.dtype)\n    ):\n        return True\n\n    if not is_scalar(right) and is_extension_array_dtype(right):\n        # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n        return True\n\n    return False",
        "begin_line": 23,
        "end_line": 47,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030175015087507544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.dispatch.dispatch_to_extension_op#98",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.dispatch_to_extension_op(op, left: ArrayLike, right: Any)",
        "snippet": "def dispatch_to_extension_op(op, left: ArrayLike, right: Any):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n\n    Parameters\n    ----------\n    op : binary operator\n    left : ExtensionArray or np.ndarray\n    right : object\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n        2-tuple of these if op is divmod or rdivmod\n    \"\"\"\n    # NB: left and right should already be unboxed, so neither should be\n    #  a Series or Index.\n\n    if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n        # We need to cast datetime64 and timedelta64 ndarrays to\n        #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n        #  PandasArray as that behaves poorly with e.g. IntegerArray.\n        left = array(left)\n\n    # The op calls will raise TypeError if the op is not defined\n    # on the ExtensionArray\n    res_values = op(left, right)\n    return res_values",
        "begin_line": 98,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#30",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 30,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#49",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)",
        "begin_line": 49,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__ne__#127",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__ne__(self, other: Any)",
        "snippet": "    def __ne__(self, other: Any) -> bool:\n        return not self.__eq__(other)",
        "begin_line": 127,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.na_value#131",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.na_value(self)",
        "snippet": "    def na_value(self) -> object:\n        \"\"\"\n        Default NA value to use for this type.\n\n        This is used in e.g. ExtensionArray.take. This should be the\n        user-facing \"boxed\" version of the NA value, not the physical NA value\n        for storage.  e.g. for JSONArray, this is an empty dictionary.\n        \"\"\"\n        return np.nan",
        "begin_line": 131,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#200",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\n        ...             f\"Cannot construct a '{cls.__name__}' from '{string}'\"\n        ...         )\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        # error: Non-overlapping equality check (left operand type: \"str\", right\n        #  operand type: \"Callable[[ExtensionDtype], str]\")  [comparison-overlap]\n        assert isinstance(cls.name, str), (cls, type(cls.name))\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")\n        return cls()",
        "begin_line": 200,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#255",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        if isinstance(dtype, str):\n            try:\n                return cls.construct_from_string(dtype) is not None\n            except TypeError:\n                return False\n        return False",
        "begin_line": 255,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017421602787456446,
            "pseudo_dstar_susp": 0.0016233766233766235,
            "pseudo_tarantula_susp": 0.0017482517482517483,
            "pseudo_op2_susp": 0.0016233766233766235,
            "pseudo_barinel_susp": 0.0017482517482517483
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_numeric#298",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self) -> bool:\n        \"\"\"\n        Whether columns with this dtype should be considered numeric.\n\n        By default ExtensionDtypes are assumed to be non-numeric.\n        They'll be excluded from operations that exclude non-numeric\n        columns, like (groupby) reductions, plotting, etc.\n        \"\"\"\n        return False",
        "begin_line": 298,
        "end_line": 306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#316",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype.ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                sanitize_dtype = \"object\" if len(values) == 0 else None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError as err:\n                codes, categories = factorize(values, sort=False)\n                if dtype.ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    ) from err\n            except ValueError as err:\n\n                # FIXME\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                ) from err\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype.ordered)\n\n        elif is_categorical_dtype(values):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = _recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 316,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#398",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 398,
        "end_line": 426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003105590062111801,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.003115264797507788,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.003115264797507788
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.ordered#441",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self.dtype.ordered",
        "begin_line": 441,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#448",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 448,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._constructor#455",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Categorical\"]:\n        return Categorical",
        "begin_line": 455,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.copy#466",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.copy(self)",
        "snippet": "    def copy(self) -> \"Categorical\":\n        \"\"\"\n        Copy constructor.\n        \"\"\"\n        return self._constructor(\n            values=self._codes.copy(), dtype=self.dtype, fastpath=True\n        )",
        "begin_line": 466,
        "end_line": 472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.from_codes#590",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
        "snippet": "    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n\n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n\n        If your data does not follow this convention, please use the normal\n        constructor.\n\n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n\n            .. versionadded:: 0.24.0\n\n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n\n        Returns\n        -------\n        Categorical\n\n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n\n        if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n            # Avoid the implicit conversion of Int to object\n            if isna(codes).any():\n                raise ValueError(\"codes cannot contain NA values\")\n            codes = codes.to_numpy(dtype=np.int64)\n        else:\n            codes = np.asarray(codes)\n        if len(codes) and not is_integer_dtype(codes):\n            raise ValueError(\"codes need to be array-like integers\")\n\n        if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n            raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n        return cls(codes, dtype=dtype, fastpath=True)",
        "begin_line": 590,
        "end_line": 657,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_codes#659",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_codes(self)",
        "snippet": "    def _get_codes(self):\n        \"\"\"\n        Get the codes.\n\n        Returns\n        -------\n        codes : integer array view\n            A non writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 659,
        "end_line": 670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.set_ordered#733",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.set_ordered(self, value, inplace=False)",
        "snippet": "    def set_ordered(self, value, inplace=False):\n        \"\"\"\n        Set the ordered attribute to the boolean value.\n\n        Parameters\n        ----------\n        value : bool\n           Set whether this categorical is ordered (True) or not (False).\n        inplace : bool, default False\n           Whether or not to set the ordered attribute in-place or return\n           a copy of this categorical with ordered set to the value.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        new_dtype = CategoricalDtype(self.categories, ordered=value)\n        cat = self if inplace else self.copy()\n        cat._dtype = new_dtype\n        if not inplace:\n            return cat",
        "begin_line": 733,
        "end_line": 750,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.as_ordered#752",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.as_ordered(self, inplace=False)",
        "snippet": "    def as_ordered(self, inplace=False):\n        \"\"\"\n        Set the Categorical to be ordered.\n\n        Parameters\n        ----------\n        inplace : bool, default False\n           Whether or not to set the ordered attribute in-place or return\n           a copy of this categorical with ordered set to True.\n\n        Returns\n        -------\n        Categorical\n            Ordered Categorical.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        return self.set_ordered(True, inplace=inplace)",
        "begin_line": 752,
        "end_line": 768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__array__#1268",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The numpy array interface.\n\n        Returns\n        -------\n        numpy.array\n            A numpy array of either the specified dtype or,\n            if dtype==None (default), the same dtype as\n            categorical.categories.dtype.\n        \"\"\"\n        ret = take_1d(self.categories.values, self._codes)\n        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            # When we're a Categorical[ExtensionArray], like Interval,\n            # we need to ensure __array__ get's all the way to an\n            # ndarray.\n            ret = np.asarray(ret)\n        return ret",
        "begin_line": 1268,
        "end_line": 1287,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003194888178913738,
            "pseudo_dstar_susp": 0.0028011204481792717,
            "pseudo_tarantula_susp": 0.003205128205128205,
            "pseudo_op2_susp": 0.0028011204481792717,
            "pseudo_barinel_susp": 0.003205128205128205
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__setstate__#1304",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state):\n        \"\"\"Necessary for making this object picklable\"\"\"\n        if not isinstance(state, dict):\n            raise Exception(\"invalid pickle state\")\n\n        # compat with pre 0.21.0 CategoricalDtype change\n        if \"_dtype\" not in state:\n            state[\"_dtype\"] = CategoricalDtype(state[\"_categories\"], state[\"_ordered\"])\n\n        for k, v in state.items():\n            setattr(self, k, v)",
        "begin_line": 1304,
        "end_line": 1314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._internal_get_values#1458",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        \"\"\"\n        Return the values.\n\n        For internal compatibility with pandas formatting.\n\n        Returns\n        -------\n        np.ndarray or Index\n            A numpy array of the same dtype as categorical.categories.dtype or\n            Index if datetime / periods.\n        \"\"\"\n        # if we are a datetime and period index, return Index to keep metadata\n        if needs_i8_conversion(self.categories):\n            return self.categories.take(self._codes, fill_value=np.nan)\n        elif is_integer_dtype(self.categories) and -1 in self._codes:\n            return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n        return np.array(self)",
        "begin_line": 1458,
        "end_line": 1475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.take#1772",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.take(self, indexer, allow_fill: bool=False, fill_value=None)",
        "snippet": "    def take(self, indexer, allow_fill: bool = False, fill_value=None):\n        \"\"\"\n        Take elements from the Categorical.\n\n        Parameters\n        ----------\n        indexer : sequence of int\n            The indices in `self` to take. The meaning of negative values in\n            `indexer` depends on the value of `allow_fill`.\n        allow_fill : bool, default False\n            How to handle negative values in `indexer`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right. This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate missing values\n              (the default). These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n            .. versionchanged:: 1.0.0\n\n               Default value changed from ``True`` to ``False``.\n\n        fill_value : object\n            The value to use for `indices` that are missing (-1), when\n            ``allow_fill=True``. This should be the category, i.e. a value\n            in ``self.categories``, not a code.\n\n        Returns\n        -------\n        Categorical\n            This Categorical will have the same categories and ordered as\n            `self`.\n\n        See Also\n        --------\n        Series.take : Similar method for Series.\n        numpy.ndarray.take : Similar method for NumPy arrays.\n\n        Examples\n        --------\n        >>> cat = pd.Categorical(['a', 'a', 'b'])\n        >>> cat\n        [a, a, b]\n        Categories (2, object): [a, b]\n\n        Specify ``allow_fill==False`` to have negative indices mean indexing\n        from the right.\n\n        >>> cat.take([0, -1, -2], allow_fill=False)\n        [a, b, a]\n        Categories (2, object): [a, b]\n\n        With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n        values that should be filled with the `fill_value`, which is\n        ``np.nan`` by default.\n\n        >>> cat.take([0, -1, -1], allow_fill=True)\n        [a, NaN, NaN]\n        Categories (2, object): [a, b]\n\n        The fill value can be specified.\n\n        >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n        [a, a, a]\n        Categories (3, object): [a, b]\n\n        Specifying a fill value that's not in ``self.categories``\n        will raise a ``TypeError``.\n        \"\"\"\n        indexer = np.asarray(indexer, dtype=np.intp)\n\n        dtype = self.dtype\n\n        if isna(fill_value):\n            fill_value = -1\n        elif allow_fill:\n            # convert user-provided `fill_value` to codes\n            if fill_value in self.categories:\n                fill_value = self.categories.get_loc(fill_value)\n            else:\n                msg = (\n                    f\"'fill_value' ('{fill_value}') is not in this \"\n                    \"Categorical's categories.\"\n                )\n                raise TypeError(msg)\n\n        codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n        result = type(self).from_codes(codes, dtype=dtype)\n        return result",
        "begin_line": 1772,
        "end_line": 1862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__len__#1873",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        The length of this Categorical.\n        \"\"\"\n        return len(self._codes)",
        "begin_line": 1873,
        "end_line": 1877,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003105590062111801,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.003115264797507788,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.003115264797507788
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._repr_categories#1910",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._repr_categories(self)",
        "snippet": "    def _repr_categories(self):\n        \"\"\"\n        return the base repr for the categories\n        \"\"\"\n        max_categories = (\n            10\n            if get_option(\"display.max_categories\") == 0\n            else get_option(\"display.max_categories\")\n        )\n        from pandas.io.formats import format as fmt\n\n        if len(self.categories) > max_categories:\n            num = max_categories // 2\n            head = fmt.format_array(self.categories[:num], None)\n            tail = fmt.format_array(self.categories[-num:], None)\n            category_strs = head + [\"...\"] + tail\n        else:\n            category_strs = fmt.format_array(self.categories, None)\n\n        # Strip all leading spaces, which format_array adds for columns...\n        category_strs = [x.strip() for x in category_strs]\n        return category_strs",
        "begin_line": 1910,
        "end_line": 1931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._repr_categories_info#1933",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._repr_categories_info(self)",
        "snippet": "    def _repr_categories_info(self) -> str:\n        \"\"\"\n        Returns a string representation of the footer.\n        \"\"\"\n        category_strs = self._repr_categories()\n        dtype = str(self.categories.dtype)\n        levheader = f\"Categories ({len(self.categories)}, {dtype}): \"\n        width, height = get_terminal_size()\n        max_width = get_option(\"display.width\") or width\n        if console.in_ipython_frontend():\n            # 0 = no breaks\n            max_width = 0\n        levstring = \"\"\n        start = True\n        cur_col_len = len(levheader)  # header\n        sep_len, sep = (3, \" < \") if self.ordered else (2, \", \")\n        linesep = sep.rstrip() + \"\\n\"  # remove whitespace\n        for val in category_strs:\n            if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n                levstring += linesep + (\" \" * (len(levheader) + 1))\n                cur_col_len = len(levheader) + 1  # header + a whitespace\n            elif not start:\n                levstring += sep\n                cur_col_len += len(val)\n            levstring += val\n            start = False\n        # replace to simple save space by\n        return levheader + \"[\" + levstring.replace(\" < ... < \", \" ... \") + \"]\"",
        "begin_line": 1933,
        "end_line": 1960,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_repr#1966",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_repr(self, length=True, na_rep='NaN', footer=True)",
        "snippet": "    def _get_repr(self, length=True, na_rep=\"NaN\", footer=True) -> str:\n        from pandas.io.formats import format as fmt\n\n        formatter = fmt.CategoricalFormatter(\n            self, length=length, na_rep=na_rep, footer=footer\n        )\n        result = formatter.to_string()\n        return str(result)",
        "begin_line": 1966,
        "end_line": 1973,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__repr__#1975",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        \"\"\"\n        String representation.\n        \"\"\"\n        _maxlen = 10\n        if len(self._codes) > _maxlen:\n            result = self._tidy_repr(_maxlen)\n        elif len(self._codes) > 0:\n            result = self._get_repr(length=len(self) > _maxlen)\n        else:\n            msg = self._get_repr(length=False, footer=True).replace(\"\\n\", \", \")\n            result = f\"[], {msg}\"\n\n        return result",
        "begin_line": 1975,
        "end_line": 1988,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__getitem__#1998",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Return an item.\n        \"\"\"\n        if isinstance(key, (int, np.integer)):\n            i = self._codes[key]\n            if i == -1:\n                return np.nan\n            else:\n                return self.categories[i]\n\n        key = check_array_indexer(self, key)\n\n        result = self._codes[key]\n        if result.ndim > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return self._constructor(result, dtype=self.dtype, fastpath=True)",
        "begin_line": 1998,
        "end_line": 2015,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.categorical._convert_to_list_like#2621",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._convert_to_list_like(list_like)",
        "snippet": "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
        "begin_line": 2621,
        "end_line": 2632,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028735632183908046,
            "pseudo_dstar_susp": 0.0025575447570332483,
            "pseudo_tarantula_susp": 0.002890173410404624,
            "pseudo_op2_susp": 0.0025575447570332483,
            "pseudo_barinel_susp": 0.002890173410404624
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterable#2635",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterable(values)",
        "snippet": "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
        "begin_line": 2635,
        "end_line": 2670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterables#2673",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterables(iterables)",
        "snippet": "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
        "begin_line": 2673,
        "end_line": 2695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#79",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 79,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017761989342806395,
            "pseudo_dstar_susp": 0.0016501650165016502,
            "pseudo_tarantula_susp": 0.0017793594306049821,
            "pseudo_op2_susp": 0.0016501650165016502,
            "pseudo_barinel_susp": 0.0017793594306049821
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#355",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n\n    Parameters\n    ----------\n    dtype : np.dtype or ExtensionDtype\n    fill_value : scalar, default np.nan\n\n    Returns\n    -------\n    dtype\n        Upcasted from dtype argument if necessary.\n    fill_value\n        Upcasted from fill_value argument if necessary.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n        elif not isinstance(fill_value, datetime):\n            dtype = np.dtype(np.object_)\n        elif fill_value.tzinfo is None:\n            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 355,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018148820326678765,
            "pseudo_dstar_susp": 0.0016835016835016834,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#511",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 511,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018148820326678765,
            "pseudo_dstar_susp": 0.0016835016835016834,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#556",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
        "begin_line": 556,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026881720430107527,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_dtype_type#687",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_dtype_type(element)",
        "snippet": "def maybe_infer_dtype_type(element):\n    \"\"\"\n    Try to infer an object's dtype, for use in arithmetic ops.\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    dtype('int64')\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
        "begin_line": 687,
        "end_line": 718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#763",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 763,
        "end_line": 772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.cast.astype_nansafe#805",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)",
        "snippet": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
        "begin_line": 805,
        "end_line": 904,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.soft_convert_objects#956",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.soft_convert_objects(values: np.ndarray, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False, copy: bool=True)",
        "snippet": "def soft_convert_objects(\n    values: np.ndarray,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n    copy: bool = True,\n):\n    \"\"\" if we have an object dtype, try to coerce dates and/or numbers \"\"\"\n    validate_bool_kwarg(datetime, \"datetime\")\n    validate_bool_kwarg(numeric, \"numeric\")\n    validate_bool_kwarg(timedelta, \"timedelta\")\n    validate_bool_kwarg(coerce, \"coerce\")\n    validate_bool_kwarg(copy, \"copy\")\n\n    conversion_count = sum((datetime, numeric, timedelta))\n    if conversion_count == 0:\n        raise ValueError(\"At least one of datetime, numeric or timedelta must be True.\")\n    elif conversion_count > 1 and coerce:\n        raise ValueError(\n            \"Only one of 'datetime', 'numeric' or \"\n            \"'timedelta' can be True when when coerce=True.\"\n        )\n\n    if not is_object_dtype(values.dtype):\n        # If not object, do not attempt conversion\n        values = values.copy() if copy else values\n        return values\n\n    # If 1 flag is coerce, ensure 2 others are False\n    if coerce:\n        # Immediate return if coerce\n        if datetime:\n            from pandas import to_datetime\n\n            return to_datetime(values, errors=\"coerce\").to_numpy()\n        elif timedelta:\n            from pandas import to_timedelta\n\n            return to_timedelta(values, errors=\"coerce\").to_numpy()\n        elif numeric:\n            from pandas import to_numeric\n\n            return to_numeric(values, errors=\"coerce\")\n\n    # Soft conversions\n    if datetime:\n        # GH 20380, when datetime is beyond year 2262, hence outside\n        # bound of nanosecond-resolution 64-bit integers.\n        try:\n            values = lib.maybe_convert_objects(values, convert_datetime=True)\n        except OutOfBoundsDatetime:\n            pass\n\n    if timedelta and is_object_dtype(values.dtype):\n        # Object check to ensure only run if previous did not convert\n        values = lib.maybe_convert_objects(values, convert_timedelta=True)\n\n    if numeric and is_object_dtype(values.dtype):\n        try:\n            converted = lib.maybe_convert_numeric(values, set(), coerce_numeric=True)\n        except (ValueError, TypeError):\n            pass\n        else:\n            # If all NaNs, then do not-alter\n            values = converted if not isna(converted).all() else values\n            values = values.copy() if copy else values\n\n    return values",
        "begin_line": 956,
        "end_line": 1024,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#1092",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 1092,
        "end_line": 1103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1106",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1106,
        "end_line": 1211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030120481927710845,
            "pseudo_dstar_susp": 0.0026666666666666666,
            "pseudo_tarantula_susp": 0.0030303030303030303,
            "pseudo_op2_susp": 0.0026666666666666666,
            "pseudo_barinel_susp": 0.0030303030303030303
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1149",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1149,
        "end_line": 1172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1174",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)",
        "begin_line": 1174,
        "end_line": 1185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028735632183908046,
            "pseudo_dstar_susp": 0.0025575447570332483,
            "pseudo_tarantula_susp": 0.002890173410404624,
            "pseudo_op2_susp": 0.0025575447570332483,
            "pseudo_barinel_susp": 0.002890173410404624
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1214",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\"\n    try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1214,
        "end_line": 1345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018148820326678765,
            "pseudo_dstar_susp": 0.0016835016835016834,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0016835016835016834,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.dtypes.cast.find_common_type#1348",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.find_common_type(types)",
        "snippet": "def find_common_type(types):\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
        "begin_line": 1348,
        "end_line": 1392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1462",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1462,
        "end_line": 1484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010718113612004287,
            "pseudo_dstar_susp": 0.0010718113612004287,
            "pseudo_tarantula_susp": 0.0010775862068965517,
            "pseudo_op2_susp": 0.0010718113612004287,
            "pseudo_barinel_susp": 0.0010775862068965517
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1487",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool = False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1487,
        "end_line": 1525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002446183953033268,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1528",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    ndarray\n        Array of integer or unsigned integer dtype.\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> pd.Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> pd.Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError as err:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            f\"casted to the dtype {dtype}\"\n        ) from err\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1528,
        "end_line": 1595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#142",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool=False)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    is_cmp : bool, default False\n        If this a comparison operation.\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        if is_cmp:\n            # numexpr failed on comparison op, e.g. ndarray[float] > datetime\n            #  In this case we do not fall back to the masked op, as that\n            #  will handle complex numbers incorrectly, see GH#32047\n            raise\n        result = masked_arith_op(left, right, op)\n\n    if is_cmp and (is_scalar(result) or result is NotImplemented):\n        # numpy returned a scalar instead of operating element-wise\n        # e.g. numeric array vs str\n        return invalid_comparison(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 142,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026136957658128593,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#184",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str)",
        "snippet": "def arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n    from pandas.core.ops import maybe_upcast_for_op\n\n    # NB: We assume that extract_array has already been called\n    #  on `left` and `right`.\n    lvalues = left\n    rvalues = right\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp, Timedelta)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here\n        #  because they have `freq` attribute which is handled correctly\n        #  by dispatch_to_extension_op.\n        # Timedelta is included because numexpr will fail on it, see GH#31457\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
        "begin_line": 184,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030175015087507544,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.array_ops.get_array_op#434",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.get_array_op(op, str_rep: Optional[str]=None)",
        "snippet": "def get_array_op(op, str_rep: Optional[str] = None):\n    \"\"\"\n    Return a binary array operation corresponding to the given operator op.\n\n    Parameters\n    ----------\n    op : function\n        Binary operator from operator or roperator module.\n    str_rep : str or None, default None\n        str_rep to pass to arithmetic_op\n\n    Returns\n    -------\n    function\n    \"\"\"\n    op_name = op.__name__.strip(\"_\")\n    if op_name in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}:\n        return partial(comparison_op, op=op, str_rep=str_rep)\n    elif op_name in {\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"}:\n        return partial(logical_op, op=op)\n    else:\n        return partial(arithmetic_op, op=op, str_rep=str_rep)",
        "begin_line": 434,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002446183953033268,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.tools.timedeltas.to_timedelta#16",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas.to_timedelta(arg, unit='ns', errors='raise')",
        "snippet": "def to_timedelta(arg, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert argument to timedelta.\n\n    Timedeltas are absolute differences in times, expressed in difference\n    units (e.g. days, hours, minutes, seconds). This method converts\n    an argument from a recognized timedelta format / value into\n    a Timedelta type.\n\n    Parameters\n    ----------\n    arg : str, timedelta, list-like or Series\n        The data to be converted to timedelta.\n    unit : str, default 'ns'\n        Denotes the unit of the arg. Possible values:\n        ('Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr',\n        'h', 'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n        'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n        'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n        'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n        'nanosecond', 'N').\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n\n    Returns\n    -------\n    timedelta64 or numpy.array of timedelta64\n        Output type returned if parsing succeeded.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n    convert_dtypes : Convert dtypes.\n\n    Examples\n    --------\n    Parsing a single string to a Timedelta:\n\n    >>> pd.to_timedelta('1 days 06:05:01.00003')\n    Timedelta('1 days 06:05:01.000030')\n    >>> pd.to_timedelta('15.5us')\n    Timedelta('0 days 00:00:00.000015')\n\n    Parsing a list or array of strings:\n\n    >>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\n    TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015', NaT],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Converting numbers by specifying the `unit` keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), unit='s')\n    TimedeltaIndex(['00:00:00', '00:00:01', '00:00:02',\n                    '00:00:03', '00:00:04'],\n                   dtype='timedelta64[ns]', freq=None)\n    >>> pd.to_timedelta(np.arange(5), unit='d')\n    TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    unit = parse_timedelta_unit(unit)\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"errors must be one of 'ignore', 'raise', or 'coerce'}\")\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if arg is None:\n        return arg\n    elif isinstance(arg, ABCSeries):\n        values = _convert_listlike(arg._values, unit=unit, errors=errors)\n        return arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, ABCIndexClass):\n        return _convert_listlike(arg, unit=unit, errors=errors, name=arg.name)\n    elif isinstance(arg, np.ndarray) and arg.ndim == 0:\n        # extract array scalar and process below\n        arg = arg.item()\n    elif is_list_like(arg) and getattr(arg, \"ndim\", 1) == 1:\n        return _convert_listlike(arg, unit=unit, errors=errors)\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, timedelta, list, tuple, 1-d array, or Series\"\n        )\n\n    # ...so it must be a scalar value. Return scalar.\n    return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)",
        "begin_line": 16,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._convert_listlike#127",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._convert_listlike(arg, unit='ns', errors='raise', name=None)",
        "snippet": "def _convert_listlike(arg, unit=\"ns\", errors=\"raise\", name=None):\n    \"\"\"Convert a list of objects to a timedelta index object.\"\"\"\n    if isinstance(arg, (list, tuple)) or not hasattr(arg, \"dtype\"):\n        # This is needed only to ensure that in the case where we end up\n        #  returning arg (errors == \"ignore\"), and where the input is a\n        #  generator, we return a useful list-like instead of a\n        #  used-up generator\n        arg = np.array(list(arg), dtype=object)\n\n    try:\n        value = sequence_to_td64ns(arg, unit=unit, errors=errors, copy=False)[0]\n    except ValueError:\n        if errors == \"ignore\":\n            return arg\n        else:\n            # This else-block accounts for the cases when errors='raise'\n            # and errors='coerce'. If errors == 'raise', these errors\n            # should be raised. If errors == 'coerce', we shouldn't\n            # expect any errors to be raised, since all parsing errors\n            # cause coercion to pd.NaT. However, if an error / bug is\n            # introduced that causes an Exception to be raised, we would\n            # like to surface it.\n            raise\n\n    from pandas import TimedeltaIndex\n\n    value = TimedeltaIndex(value, unit=\"ns\", name=name)\n    return value",
        "begin_line": 127,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.invalid.invalid_op#51",
        "src_path": "pandas/core/ops/invalid.py",
        "class_name": "pandas.core.ops.invalid",
        "signature": "pandas.core.ops.invalid.invalid_op(self, other=None)",
        "snippet": "    def invalid_op(self, other=None):\n        typ = type(self).__name__\n        raise TypeError(f\"cannot perform {name} with this index type: {typ}\")",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#224",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        name = maybe_extract_name(name, data, cls)\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name)\n        return subarr",
        "begin_line": 224,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002983293556085919,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#264",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values: DatetimeArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: DatetimeArray, name: Label = None):\n        assert isinstance(values, DatetimeArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result._reset_identity()\n        return result",
        "begin_line": 264,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002983293556085919,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__.maybe_upcast_for_op#155",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is datetime.timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and is_timedelta64_dtype(obj.dtype):\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 155,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__.dispatch_to_series#356",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.dispatch_to_series(left, right, func, str_rep=None, axis=None)",
        "snippet": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        # Get the appropriate array-op to apply to each block's values.\n        array_op = get_array_op(func, str_rep=str_rep)\n        bm = left._data.apply(array_op, right=right)\n        return type(left)(bm)\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        # We only get here if called via _combine_series_frame,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n\n        if right.dtype == \"timedelta64[ns]\":\n            # ensure we treat NaT values as the correct dtype\n            # Note: we do not do this unconditionally as it may be lossy or\n            #  expensive for EA dtypes.\n            right = np.asarray(right)\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\n\n        else:\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)  # Handle other cases later\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
        "begin_line": 356,
        "end_line": 421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_FRAME#624",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_FRAME(left, right, axis, flex: Optional[bool]=False, level: Level=None)",
        "snippet": "def _align_method_FRAME(\n    left, right, axis, flex: Optional[bool] = False, level: Level = None\n):\n    \"\"\"\n    Convert rhs to meet lhs dims if input is list, tuple or np.ndarray.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : Any\n    axis: int, str, or None\n    flex: bool or None, default False\n        Whether this is a flex op, in which case we reindex.\n        None indicates not to check for alignment.\n    level : int or level name, default None\n\n    Returns\n    -------\n    left : DataFrame\n    right : Any\n    \"\"\"\n\n    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right\n\n    if isinstance(right, np.ndarray):\n\n        if right.ndim == 1:\n            right = to_series(right)\n\n        elif right.ndim == 2:\n            if right.shape == left.shape:\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[0] == left.shape[0] and right.shape[1] == 1:\n                # Broadcast across columns\n                right = np.broadcast_to(right, left.shape)\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[1] == left.shape[1] and right.shape[0] == 1:\n                # Broadcast along rows\n                right = to_series(right[0, :])\n\n            else:\n                raise ValueError(\n                    \"Unable to coerce to DataFrame, shape \"\n                    f\"must be {left.shape}: given {right.shape}\"\n                )\n\n        elif right.ndim > 2:\n            raise ValueError(\n                \"Unable to coerce to Series/DataFrame, \"\n                f\"dimension must be <= 2: {right.shape}\"\n            )\n\n    elif is_list_like(right) and not isinstance(right, (ABCSeries, ABCDataFrame)):\n        # GH17901\n        right = to_series(right)\n\n    if flex is not None and isinstance(right, ABCDataFrame):\n        if not left._indexed_same(right):\n            if flex:\n                left, right = left.align(right, join=\"outer\", level=level, copy=False)\n            else:\n                raise ValueError(\n                    \"Can only compare identically-labeled DataFrame objects\"\n                )\n    elif isinstance(right, ABCSeries):\n        # axis=1 is default for DataFrame-with-Series op\n        axis = left._get_axis_number(axis) if axis is not None else 1\n        left, right = left.align(\n            right, join=\"outer\", axis=axis, level=level, copy=False\n        )\n\n    return left, right",
        "begin_line": 624,
        "end_line": 711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002446183953033268,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__.to_series#646",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.to_series(right)",
        "snippet": "    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right",
        "begin_line": 646,
        "end_line": 660,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002446183953033268,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__._should_reindex_frame_op#714",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._should_reindex_frame_op(left: 'DataFrame', right, op, axis, default_axis: int, fill_value, level)",
        "snippet": "def _should_reindex_frame_op(\n    left: \"DataFrame\", right, op, axis, default_axis: int, fill_value, level\n) -> bool:\n    \"\"\"\n    Check if this is an operation between DataFrames that will need to reindex.\n    \"\"\"\n    assert isinstance(left, ABCDataFrame)\n\n    if op is operator.pow or op is rpow:\n        # GH#32685 pow has special semantics for operating with null values\n        return False\n\n    if not isinstance(right, ABCDataFrame):\n        return False\n\n    if fill_value is None and level is None and axis is default_axis:\n        # TODO: any other cases we should handle here?\n        cols = left.columns.intersection(right.columns)\n        if not (cols.equals(left.columns) and cols.equals(right.columns)):\n            return True\n\n    return False",
        "begin_line": 714,
        "end_line": 735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_FRAME#770",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_FRAME(cls, op, special)",
        "snippet": "def _arith_method_FRAME(cls, op, special):\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n    default_axis = _get_frame_op_default_axis(op_name)\n\n    na_op = define_na_arithmetic_op(op, str_rep)\n    is_logical = str_rep in [\"&\", \"|\", \"^\"]\n\n    if op_name in _op_descriptions:\n        # i.e. include \"add\" but not \"__add__\"\n        doc = _make_flex_doc(op_name, \"dataframe\")\n    else:\n        doc = _arith_doc_FRAME % op_name\n\n    @Appender(doc)\n    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        if _should_reindex_frame_op(\n            self, other, op, axis, default_axis, fill_value, level\n        ):\n            return _frame_arith_method_with_reindex(self, other, op)\n\n        self, other = _align_method_FRAME(self, other, axis, flex=True, level=level)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n\n            new_data = self._combine_frame(other, pass_op, fill_value)\n            return self._construct_result(new_data)\n\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n\n            if fill_value is not None:\n                raise NotImplementedError(f\"fill_value {fill_value} not supported.\")\n\n            axis = self._get_axis_number(axis) if axis is not None else 1\n            return _combine_series_frame(\n                self, other, pass_op, axis=axis, str_rep=str_rep\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)\n\n    f.__name__ = op_name\n\n    return f",
        "begin_line": 770,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002446183953033268,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.ops.__init__.f#785",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.f(self, other, axis=default_axis, level=None, fill_value=None)",
        "snippet": "    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        if _should_reindex_frame_op(\n            self, other, op, axis, default_axis, fill_value, level\n        ):\n            return _frame_arith_method_with_reindex(self, other, op)\n\n        self, other = _align_method_FRAME(self, other, axis, flex=True, level=level)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n\n            new_data = self._combine_frame(other, pass_op, fill_value)\n            return self._construct_result(new_data)\n\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n\n            if fill_value is not None:\n                raise NotImplementedError(f\"fill_value {fill_value} not supported.\")\n\n            axis = self._get_axis_number(axis) if axis is not None else 1\n            return _combine_series_frame(\n                self, other, pass_op, axis=axis, str_rep=str_rep\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)",
        "begin_line": 785,
        "end_line": 821,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#50",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(pd.NA)\n    True\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 50,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012195121951219512,
            "pseudo_dstar_susp": 0.001218026796589525,
            "pseudo_tarantula_susp": 0.001282051282051282,
            "pseudo_op2_susp": 0.001218026796589525,
            "pseudo_barinel_susp": 0.001282051282051282
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#133",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 133,
        "end_line": 161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028735632183908046,
            "pseudo_dstar_susp": 0.0025575447570332483,
            "pseudo_tarantula_susp": 0.002890173410404624,
            "pseudo_op2_susp": 0.0025575447570332483,
            "pseudo_barinel_susp": 0.002890173410404624
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#226",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 226,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#300",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(pd.NA)\n    False\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 300,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#403",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif left_value is libmissing.NA and right_value is not libmissing.NA:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    elif \"boolean value of NA is ambiguous\" in str(err):\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left) or needs_i8_conversion(right):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 403,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#587",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype: DtypeObj)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype: DtypeObj) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 587,
        "end_line": 608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#56",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype=None, verify_integrity=True)",
        "snippet": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None, verify_integrity=True):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    if verify_integrity:\n        # figure out the index, if necessary\n        if index is None:\n            index = extract_index(arrays)\n        else:\n            index = ensure_index(index)\n\n        # don't force copy because getting jammed in an ndarray anyway\n        arrays = _homogenize(arrays, index, dtype)\n\n        columns = ensure_index(columns)\n\n    # from BlockManager perspective\n    axes = [columns, index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 56,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0033444816053511705,
            "pseudo_dstar_susp": 0.0029069767441860465,
            "pseudo_tarantula_susp": 0.0033444816053511705,
            "pseudo_op2_susp": 0.0029069767441860465,
            "pseudo_barinel_susp": 0.0033444816053511705
        }
    },
    {
        "name": "pandas.core.internals.construction.init_ndarray#125",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_ndarray(values, index, columns, dtype=None, copy=False)",
        "snippet": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n\n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n\n        if not hasattr(values, \"dtype\"):\n            values = _prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        # GH#19157\n\n        if isinstance(values, np.ndarray) and values.ndim > 1:\n            # GH#12513 a EA dtype passed with a 2D array, split into\n            #  multiple EAs that view the values\n            values = [values[:, n] for n in range(values.shape[1])]\n        else:\n            values = [values]\n\n        if columns is None:\n            columns = list(range(len(values)))\n        return arrays_to_mgr(values, columns, index, columns, dtype=dtype)\n\n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = _prep_ndarray(values, copy=copy)\n\n    if dtype is not None:\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                # e.g. ValueError when trying to cast object dtype to float64\n                raise ValueError(\n                    f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                ) from orig\n\n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n\n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])",
        "begin_line": 125,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#215",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data, index, columns, dtype=None)",
        "snippet": "def init_dict(data, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    if columns is not None:\n        from pandas.core.series import Series\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or np.issubdtype(dtype, np.flexible):\n                # GH#1783\n                nan_dtype = object\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = list(data.keys())\n        columns = data_names = Index(keys)\n        arrays = (com.maybe_iterable_to_list(data[k]) for k in keys)\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 215,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024172105390379503,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#302",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype=None)",
        "snippet": "def _homogenize(data, index, dtype=None):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex.values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 302,
        "end_line": 330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#333",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data):\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = union_indexes(indexes)\n        elif have_dicts:\n            index = union_indexes(indexes, sort=False)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = (\n                        f\"array length {lengths[0]} does not match index \"\n                        f\"length {len(index)}\"\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 333,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024172105390379503,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.construction._get_axes#419",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._get_axes(N, K, index, columns)",
        "snippet": "def _get_axes(N, K, index, columns):\n    # helper to create the axes as indexes\n    # return axes or defaults\n\n    if index is None:\n        index = ibase.default_index(N)\n    else:\n        index = ensure_index(index)\n\n    if columns is None:\n        columns = ibase.default_index(K)\n    else:\n        columns = ensure_index(columns)\n    return index, columns",
        "begin_line": 419,
        "end_line": 432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.internals.construction.to_arrays#466",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def to_arrays(data, columns, coerce_float=False, dtype=None):\n    \"\"\"\n    Return list of arrays, columns.\n    \"\"\"\n    if isinstance(data, ABCDataFrame):\n        if columns is not None:\n            arrays = [\n                data._ixs(i, axis=1).values\n                for i, col in enumerate(data.columns)\n                if col in columns\n            ]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], abc.Mapping):\n        return _list_of_dict_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], ABCSeries):\n        return _list_of_series_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = ibase.default_index(len(data))\n        return data, columns\n    elif (\n        isinstance(data, (np.ndarray, ABCSeries, Index))\n        and data.dtype.names is not None\n    ):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = [tuple(x) for x in data]\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)",
        "begin_line": 466,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.construction._list_to_arrays#517",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def _list_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    # gh-26429 do not raise user-facing AssertionError\n    try:\n        result = _convert_object_array(\n            content, columns, dtype=dtype, coerce_float=coerce_float\n        )\n    except AssertionError as e:\n        raise ValueError(e) from e\n    return result",
        "begin_line": 517,
        "end_line": 530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.construction._convert_object_array#603",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._convert_object_array(content, columns, coerce_float=False, dtype=None)",
        "snippet": "def _convert_object_array(content, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        columns = ibase.default_index(len(content))\n    else:\n        if len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError(\n                f\"{len(columns)} columns passed, passed data had \"\n                f\"{len(content)} columns\"\n            )\n\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays, columns",
        "begin_line": 603,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#615",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(arr)",
        "snippet": "    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr",
        "begin_line": 615,
        "end_line": 619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#174",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"Value needs to be a scalar value, was type {type(value)}\")\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError) as err:\n        raise TypeError(f\"Wrong type {type(value)} for value {value}\") from err\n    return new_value",
        "begin_line": 174,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#200",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012345679012345679,
            "pseudo_dstar_susp": 0.01818181818181818,
            "pseudo_tarantula_susp": 0.0009337068160597573,
            "pseudo_op2_susp": 0.01818181818181818,
            "pseudo_barinel_susp": 0.0009337068160597573
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#205",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 205,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012391573729863693,
            "pseudo_dstar_susp": 0.019230769230769232,
            "pseudo_tarantula_susp": 0.001006036217303823,
            "pseudo_op2_susp": 0.019230769230769232,
            "pseudo_barinel_susp": 0.001006036217303823
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#216",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 216,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011061946902654867,
            "pseudo_dstar_susp": 0.0011061946902654867,
            "pseudo_tarantula_susp": 0.0011123470522803114,
            "pseudo_op2_susp": 0.0011061946902654867,
            "pseudo_barinel_susp": 0.0011123470522803114
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#246",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.arrays.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.arrays.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 246,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009718172983479105,
            "pseudo_dstar_susp": 0.0009718172983479105,
            "pseudo_tarantula_susp": 0.0009737098344693282,
            "pseudo_op2_susp": 0.0009718172983479105,
            "pseudo_barinel_susp": 0.0009737098344693282
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#332",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 332,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009784735812133072,
            "pseudo_dstar_susp": 0.0009784735812133072,
            "pseudo_tarantula_susp": 0.0009813542688910696,
            "pseudo_op2_susp": 0.0009784735812133072,
            "pseudo_barinel_susp": 0.0009813542688910696
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#364",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 364,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009891196834817012,
            "pseudo_dstar_susp": 0.0009891196834817012,
            "pseudo_tarantula_susp": 0.000992063492063492,
            "pseudo_op2_susp": 0.0009891196834817012,
            "pseudo_barinel_susp": 0.000992063492063492
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#394",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 394,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008928571428571428,
            "pseudo_dstar_susp": 0.0008928571428571428,
            "pseudo_tarantula_susp": 0.0008936550491510277,
            "pseudo_op2_susp": 0.0008928571428571428,
            "pseudo_barinel_susp": 0.0008936550491510277
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#431",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 431,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009910802775024777,
            "pseudo_dstar_susp": 0.0009910802775024777,
            "pseudo_tarantula_susp": 0.0009940357852882703,
            "pseudo_op2_susp": 0.0009910802775024777,
            "pseudo_barinel_susp": 0.0009940357852882703
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#461",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 461,
        "end_line": 491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#494",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 494,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#529",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 529,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#561",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)\n\n    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 561,
        "end_line": 600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00099601593625498,
            "pseudo_dstar_susp": 0.00099601593625498,
            "pseudo_tarantula_susp": 0.000999000999000999,
            "pseudo_op2_susp": 0.00099601593625498,
            "pseudo_barinel_susp": 0.000999000999000999
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#590",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)",
        "begin_line": 590,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012376237623762376,
            "pseudo_dstar_susp": 0.018867924528301886,
            "pseudo_tarantula_susp": 0.000999000999000999,
            "pseudo_op2_susp": 0.018867924528301886,
            "pseudo_barinel_susp": 0.000999000999000999
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_excluded_dtype#593",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_excluded_dtype(dtype)",
        "snippet": "    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)",
        "begin_line": 593,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015015015015015015,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.0012987012987012987,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.0012987012987012987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#603",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(tz=\"UTC\"), \"datetime64\")\n    False\n    \"\"\"\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 603,
        "end_line": 638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#691",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 691,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#745",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 745,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#801",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 801,
        "end_line": 847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010718113612004287,
            "pseudo_dstar_susp": 0.0010718113612004287,
            "pseudo_tarantula_susp": 0.0010775862068965517,
            "pseudo_op2_susp": 0.0010718113612004287,
            "pseudo_barinel_susp": 0.0010775862068965517
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#900",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=\"datetime64[ns]\"))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 900,
        "end_line": 935,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#938",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64\"))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, \"base\", None) == _NS_DTYPE",
        "begin_line": 938,
        "end_line": 982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026588673225206064,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#985",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == _TD_DTYPE)",
        "begin_line": 985,
        "end_line": 1013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1016",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1016,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012091898428053204,
            "pseudo_dstar_susp": 0.0012077294685990338,
            "pseudo_tarantula_susp": 0.0012706480304955528,
            "pseudo_op2_susp": 0.0012077294685990338,
            "pseudo_barinel_susp": 0.0012706480304955528
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1131",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> dt = np.datetime64(datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1131,
        "end_line": 1185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023364485981308412,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1177",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1177,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1188",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1188,
        "end_line": 1228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001226993865030675,
            "pseudo_dstar_susp": 0.0012254901960784314,
            "pseudo_tarantula_susp": 0.0012903225806451613,
            "pseudo_op2_susp": 0.0012254901960784314,
            "pseudo_barinel_susp": 0.0012903225806451613
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1273",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1273,
        "end_line": 1301,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032258064516129032,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1304",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1304,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000949667616334283,
            "pseudo_dstar_susp": 0.000949667616334283,
            "pseudo_tarantula_susp": 0.0009514747859181732,
            "pseudo_op2_susp": 0.000949667616334283,
            "pseudo_barinel_susp": 0.0009514747859181732
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1338",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.arrays.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1338,
        "end_line": 1400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000984251968503937,
            "pseudo_dstar_susp": 0.000984251968503937,
            "pseudo_tarantula_susp": 0.0009871668311944718,
            "pseudo_op2_susp": 0.000984251968503937,
            "pseudo_barinel_susp": 0.0009871668311944718
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1468",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1468,
        "end_line": 1514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009216589861751152,
            "pseudo_dstar_susp": 0.0009216589861751152,
            "pseudo_tarantula_susp": 0.0009225092250922509,
            "pseudo_op2_susp": 0.0009216589861751152,
            "pseudo_barinel_susp": 0.0009225092250922509
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1517",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1517,
        "end_line": 1546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001310615989515072,
            "pseudo_dstar_susp": 0.0013003901170351106,
            "pseudo_tarantula_susp": 0.001375515818431912,
            "pseudo_op2_susp": 0.0013003901170351106,
            "pseudo_barinel_susp": 0.001375515818431912
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1549",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1549,
        "end_line": 1570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00099601593625498,
            "pseudo_dstar_susp": 0.00099601593625498,
            "pseudo_tarantula_susp": 0.000999000999000999,
            "pseudo_op2_susp": 0.00099601593625498,
            "pseudo_barinel_susp": 0.000999000999000999
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1573",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype) -> DtypeObj:\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1573,
        "end_line": 1605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009560229445506692,
            "pseudo_dstar_susp": 0.0009560229445506692,
            "pseudo_tarantula_susp": 0.0009578544061302681,
            "pseudo_op2_susp": 0.0009560229445506692,
            "pseudo_barinel_susp": 0.0009578544061302681
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1608",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1608,
        "end_line": 1649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010976948408342481,
            "pseudo_dstar_susp": 0.0010976948408342481,
            "pseudo_tarantula_susp": 0.0011037527593818985,
            "pseudo_op2_susp": 0.0010976948408342481,
            "pseudo_barinel_susp": 0.0011037527593818985
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1741",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype) -> DtypeObj:\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError as err:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(f\"data type '{dtype}' not understood\") from err\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(f\"dtype '{dtype}' not understood\")\n\n    return npdtype",
        "begin_line": 1741,
        "end_line": 1788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.001358695652173913,
            "pseudo_tarantula_susp": 0.001443001443001443,
            "pseudo_op2_susp": 0.001358695652173913,
            "pseudo_barinel_susp": 0.001443001443001443
        }
    },
    {
        "name": "pandas.core.construction.array#57",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.array(data: Sequence[object], dtype: Optional[Union[str, np.dtype, ExtensionDtype]]=None, copy: bool=True)",
        "snippet": "def array(\n    data: Sequence[object],\n    dtype: Optional[Union[str, np.dtype, ExtensionDtype]] = None,\n    copy: bool = True,\n) -> ABCExtensionArray:\n    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    data : Sequence of objects\n        The scalars inside `data` should be instances of the\n        scalar type for `dtype`. It's expected that `data`\n        represents a 1-dimensional array of data.\n\n        When `data` is an Index or Series, the underlying array\n        will be extracted from `data`.\n\n    dtype : str, np.dtype, or ExtensionDtype, optional\n        The dtype to use for the array. This may be a NumPy\n        dtype or an extension type registered with pandas using\n        :meth:`pandas.api.extensions.register_extension_dtype`.\n\n        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be\n        held in extension arrays.\n\n        Currently, pandas will infer an extension dtype for sequences of\n\n        ============================== =====================================\n        Scalar Type                    Array Type\n        ============================== =====================================\n        :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n        :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n        :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n        :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n        :class:`int`                   :class:`pandas.arrays.IntegerArray`\n        :class:`str`                   :class:`pandas.arrays.StringArray`\n        :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n        ============================== =====================================\n\n        For all other cases, NumPy's usual inference rules will be used.\n\n        .. versionchanged:: 1.0.0\n\n           Pandas infers nullable-integer dtype for integer data,\n           string dtype for string data, and nullable-boolean dtype\n           for boolean data.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. Depending\n        on the type of `data`, creating the new array may require\n        copying data, even if ``copy=False``.\n\n    Returns\n    -------\n    ExtensionArray\n        The newly created array.\n\n    Raises\n    ------\n    ValueError\n        When `data` is not 1-dimensional.\n\n    See Also\n    --------\n    numpy.array : Construct a NumPy array.\n    Series : Construct a pandas Series.\n    Index : Construct a pandas Index.\n    arrays.PandasArray : ExtensionArray wrapping a NumPy array.\n    Series.array : Extract the array stored within a Series.\n\n    Notes\n    -----\n    Omitting the `dtype` argument means pandas will attempt to infer the\n    best array type from the values in the data. As new array types are\n    added by pandas and 3rd party libraries, the \"best\" array type may\n    change. We recommend specifying `dtype` to ensure that\n\n    1. the correct array type for the data is returned\n    2. the returned array type doesn't change as new extension types\n       are added by pandas and third-party libraries\n\n    Additionally, if the underlying memory representation of the returned\n    array matters, we recommend specifying the `dtype` as a concrete object\n    rather than a string alias or allowing it to be inferred. For example,\n    a future version of pandas or a 3rd-party library may include a\n    dedicated ExtensionArray for string data. In this event, the following\n    would no longer return a :class:`arrays.PandasArray` backed by a NumPy\n    array.\n\n    >>> pd.array(['a', 'b'], dtype=str)\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    This would instead return the new ExtensionArray dedicated for string\n    data. If you really need the new array to be backed by a  NumPy array,\n    specify that in the dtype.\n\n    >>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`\n      * :class:`arrays.TimedeltaArray`\n\n    When data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\n    passed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\n    rather than a ``PandasArray``. This is for symmetry with the case of\n    timezone-aware data, which NumPy does not natively support.\n\n    >>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n    <DatetimeArray>\n    ['2015-01-01 00:00:00', '2016-01-01 00:00:00']\n    Length: 2, dtype: datetime64[ns]\n\n    >>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n    <TimedeltaArray>\n    ['01:00:00', '02:00:00']\n    Length: 2, dtype: timedelta64[ns]\n\n    Examples\n    --------\n    If a dtype is not specified, pandas will infer the best dtype from the values.\n    See the description of `dtype` for the types pandas infers for.\n\n    >>> pd.array([1, 2])\n    <IntegerArray>\n    [1, 2]\n    Length: 2, dtype: Int64\n\n    >>> pd.array([1, 2, np.nan])\n    <IntegerArray>\n    [1, 2, <NA>]\n    Length: 3, dtype: Int64\n\n    >>> pd.array([\"a\", None, \"c\"])\n    <StringArray>\n    ['a', <NA>, 'c']\n    Length: 3, dtype: string\n\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]\n\n    You can use the string alias for `dtype`\n\n    >>> pd.array(['a', 'b', 'a'], dtype='category')\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    Or specify the actual dtype\n\n    >>> pd.array(['a', 'b', 'a'],\n    ...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    If pandas does not infer a dedicated extension type a\n    :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1.1, 2.2])\n    <PandasArray>\n    [1.1, 2.2]\n    Length: 2, dtype: float64\n\n    As mentioned in the \"Notes\" section, new extension types may be added\n    in the future (by pandas or 3rd party libraries), causing the return\n    value to no longer be a :class:`arrays.PandasArray`. Specify the `dtype`\n    as a NumPy dtype if you need to ensure there's no future change in\n    behavior.\n\n    >>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int32\n\n    `data` must be 1-dimensional. A ValueError is raised when the input\n    has the wrong dimensionality.\n\n    >>> pd.array(1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot pass scalar '1' to 'pandas.array'.\n    \"\"\"\n    from pandas.core.arrays import (\n        period_array,\n        BooleanArray,\n        IntegerArray,\n        IntervalArray,\n        PandasArray,\n        DatetimeArray,\n        TimedeltaArray,\n        StringArray,\n    )\n\n    if lib.is_scalar(data):\n        msg = f\"Cannot pass scalar '{data}' to 'pandas.array'.\"\n        raise ValueError(msg)\n\n    if dtype is None and isinstance(\n        data, (ABCSeries, ABCIndexClass, ABCExtensionArray)\n    ):\n        dtype = data.dtype\n\n    data = extract_array(data, extract_numpy=True)\n\n    # this returns None for not-found dtypes.\n    if isinstance(dtype, str):\n        dtype = registry.find(dtype) or dtype\n\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=True)\n        if inferred_dtype == \"period\":\n            try:\n                return period_array(data, copy=copy)\n            except IncompatibleFrequency:\n                # We may have a mixture of frequencies.\n                # We choose to return an ndarray, rather than raising.\n                pass\n        elif inferred_dtype == \"interval\":\n            try:\n                return IntervalArray(data, copy=copy)\n            except ValueError:\n                # We may have a mixture of `closed` here.\n                # We choose to return an ndarray, rather than raising.\n                pass\n\n        elif inferred_dtype.startswith(\"datetime\"):\n            # datetime, datetime64\n            try:\n                return DatetimeArray._from_sequence(data, copy=copy)\n            except ValueError:\n                # Mixture of timezones, fall back to PandasArray\n                pass\n\n        elif inferred_dtype.startswith(\"timedelta\"):\n            # timedelta, timedelta64\n            return TimedeltaArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"string\":\n            return StringArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"integer\":\n            return IntegerArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"boolean\":\n            return BooleanArray._from_sequence(data, copy=copy)\n\n    # Pandas overrides NumPy for\n    #   1. datetime64[ns]\n    #   2. timedelta64[ns]\n    # so that a DatetimeArray is returned.\n    if is_datetime64_ns_dtype(dtype):\n        return DatetimeArray._from_sequence(data, dtype=dtype, copy=copy)\n    elif is_timedelta64_ns_dtype(dtype):\n        return TimedeltaArray._from_sequence(data, dtype=dtype, copy=copy)\n\n    result = PandasArray._from_sequence(data, dtype=dtype, copy=copy)\n    return result",
        "begin_line": 57,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.construction.extract_array#339",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy: bool=False)",
        "snippet": "def extract_array(obj, extract_numpy: bool = False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 339,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011325028312570782,
            "pseudo_dstar_susp": 0.0011325028312570782,
            "pseudo_tarantula_susp": 0.0011402508551881414,
            "pseudo_op2_susp": 0.0011325028312570782,
            "pseudo_barinel_susp": 0.0011402508551881414
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#390",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    elif isinstance(data, abc.Set):\n        raise TypeError(\"Set type is unordered\")\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr",
        "begin_line": 390,
        "end_line": 507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.core.construction._try_cast#510",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[Union[np.dtype, 'ExtensionDtype']], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr,\n    dtype: Optional[Union[np.dtype, \"ExtensionDtype\"]],\n    copy: bool,\n    raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            subarr = maybe_cast_to_integer_array(arr, dtype)\n\n        subarr = maybe_cast_to_datetime(arr, dtype)\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if is_categorical_dtype(dtype):\n            # We *do* allow casting to categorical, since we know\n            # that Categorical is the only array type for 'category'.\n            dtype = cast(CategoricalDtype, dtype)\n            subarr = dtype.construct_array_type()(\n                arr, dtype.categories, ordered=dtype.ordered\n            )\n        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)\n        elif dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 510,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.construction.is_empty_data#574",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.is_empty_data(data: Any)",
        "snippet": "def is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    is_none = data is None\n    is_list_like_without_dtype = is_list_like(data) and not hasattr(data, \"dtype\")\n    is_simple_empty = is_list_like_without_dtype and not data\n    return is_none or is_simple_empty",
        "begin_line": 574,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002472799208704253,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.construction.create_series_with_explicit_dtype#594",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.create_series_with_explicit_dtype(data: Any=None, index: Optional[Union[ArrayLike, 'Index']]=None, dtype: Optional[Dtype]=None, name: Optional[str]=None, copy: bool=False, fastpath: bool=False, dtype_if_empty: Dtype=object)",
        "snippet": "def create_series_with_explicit_dtype(\n    data: Any = None,\n    index: Optional[Union[ArrayLike, \"Index\"]] = None,\n    dtype: Optional[Dtype] = None,\n    name: Optional[str] = None,\n    copy: bool = False,\n    fastpath: bool = False,\n    dtype_if_empty: Dtype = object,\n) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261.\n\n    Parameters\n    ----------\n    data : Mirrored from Series.__init__\n    index : Mirrored from Series.__init__\n    dtype : Mirrored from Series.__init__\n    name : Mirrored from Series.__init__\n    copy : Mirrored from Series.__init__\n    fastpath : Mirrored from Series.__init__\n    dtype_if_empty : str, numpy.dtype, or ExtensionDtype\n        This dtype will be passed explicitly if an empty Series will\n        be instantiated.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    if is_empty_data(data) and dtype is None:\n        dtype = dtype_if_empty\n    return Series(\n        data=data, index=index, dtype=dtype, name=name, copy=copy, fastpath=fastpath\n    )",
        "begin_line": 594,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#52",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 52,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexers.validate_indices#166",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.validate_indices(indices: np.ndarray, n: int)",
        "snippet": "def validate_indices(indices: np.ndarray, n: int) -> None:\n    \"\"\"\n    Perform bounds-checking for an indexer.\n\n    -1 is allowed for indicating missing values.\n\n    Parameters\n    ----------\n    indices : ndarray\n    n : int\n        Length of the array being indexed.\n\n    Raises\n    ------\n    ValueError\n\n    Examples\n    --------\n    >>> validate_indices([1, 2], 3)\n    # OK\n    >>> validate_indices([1, -2], 3)\n    ValueError\n    >>> validate_indices([1, 2, 3], 3)\n    IndexError\n    >>> validate_indices([-1, -1], 0)\n    # OK\n    >>> validate_indices([0, 1], 0)\n    IndexError\n    \"\"\"\n    if len(indices):\n        min_idx = indices.min()\n        if min_idx < -1:\n            msg = f\"'indices' contains values less than allowed ({min_idx} < -1)\"\n            raise ValueError(msg)\n\n        max_idx = indices.max()\n        if max_idx >= n:\n            raise IndexError(\"indices are out-of-bounds\")",
        "begin_line": 166,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexers.maybe_convert_indices#210",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.maybe_convert_indices(indices, n: int)",
        "snippet": "def maybe_convert_indices(indices, n: int):\n    \"\"\"\n    Attempt to convert indices into valid, positive indices.\n\n    If we have negative indices, translate to positive here.\n    If we have indices that are out-of-bounds, raise an IndexError.\n\n    Parameters\n    ----------\n    indices : array-like\n        Array of indices that we are to convert.\n    n : int\n        Number of elements in the array that we are indexing.\n\n    Returns\n    -------\n    array-like\n        An array-like of positive indices that correspond to the ones\n        that were passed in initially to this function.\n\n    Raises\n    ------\n    IndexError\n        One of the converted indices either exceeded the number of,\n        elements (specified by `n`), or was still negative.\n    \"\"\"\n    if isinstance(indices, list):\n        indices = np.array(indices)\n        if len(indices) == 0:\n            # If `indices` is empty, np.array will return a float,\n            # and will cause indexing errors.\n            return np.empty(0, dtype=np.intp)\n\n    mask = indices < 0\n    if mask.any():\n        indices = indices.copy()\n        indices[mask] += n\n\n    mask = (indices >= n) | (indices < 0)\n    if mask.any():\n        raise IndexError(\"indices are out-of-bounds\")\n    return indices",
        "begin_line": 210,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003040437823046519,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexers.check_array_indexer#348",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_array_indexer(array: AnyArrayLike, indexer: Any)",
        "snippet": "def check_array_indexer(array: AnyArrayLike, indexer: Any) -> Any:\n    \"\"\"\n    Check if `indexer` is a valid array indexer for `array`.\n\n    For a boolean mask, `array` and `indexer` are checked to have the same\n    length. The dtype is validated, and if it is an integer or boolean\n    ExtensionArray, it is checked if there are missing values present, and\n    it is converted to the appropriate numpy array. Other dtypes will raise\n    an error.\n\n    Non-array indexers (integer, slice, Ellipsis, tuples, ..) are passed\n    through as is.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    array : array-like\n        The array that is being indexed (only used for the length).\n    indexer : array-like or list-like\n        The array-like that's used to index. List-like input that is not yet\n        a numpy array or an ExtensionArray is converted to one. Other input\n        types are passed through as is.\n\n    Returns\n    -------\n    numpy.ndarray\n        The validated indexer as a numpy array that can be used to index.\n\n    Raises\n    ------\n    IndexError\n        When the lengths don't match.\n    ValueError\n        When `indexer` cannot be converted to a numpy ndarray to index\n        (e.g. presence of missing values).\n\n    See Also\n    --------\n    api.types.is_bool_dtype : Check if `key` is of boolean dtype.\n\n    Examples\n    --------\n    When checking a boolean mask, a boolean ndarray is returned when the\n    arguments are all valid.\n\n    >>> mask = pd.array([True, False])\n    >>> arr = pd.array([1, 2])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    An IndexError is raised when the lengths don't match.\n\n    >>> mask = pd.array([True, False, True])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    IndexError: Boolean index has wrong length: 3 instead of 2.\n\n    NA values in a boolean array are treated as False.\n\n    >>> mask = pd.array([True, pd.NA])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    A numpy boolean mask will get passed through (if the length is correct):\n\n    >>> mask = np.array([True, False])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    Similarly for integer indexers, an integer ndarray is returned when it is\n    a valid indexer, otherwise an error is  (for integer indexers, a matching\n    length is not required):\n\n    >>> indexer = pd.array([0, 2], dtype=\"Int64\")\n    >>> arr = pd.array([1, 2, 3])\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    array([0, 2])\n\n    >>> indexer = pd.array([0, pd.NA], dtype=\"Int64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot index with an integer indexer containing NA values\n\n    For non-integer/boolean dtypes, an appropriate error is raised:\n\n    >>> indexer = np.array([0., 2.], dtype=\"float64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    IndexError: arrays used as indices must be of integer or boolean type\n    \"\"\"\n    from pandas.core.construction import array as pd_array\n\n    # whathever is not an array-like is returned as-is (possible valid array\n    # indexers that are not array-like: integer, slice, Ellipsis, None)\n    # In this context, tuples are not considered as array-like, as they have\n    # a specific meaning in indexing (multi-dimensional indexing)\n    if is_list_like(indexer):\n        if isinstance(indexer, tuple):\n            return indexer\n    else:\n        return indexer\n\n    # convert list-likes to array\n    if not is_array_like(indexer):\n        indexer = pd_array(indexer)\n        if len(indexer) == 0:\n            # empty list is converted to float array by pd.array\n            indexer = np.array([], dtype=np.intp)\n\n    dtype = indexer.dtype\n    if is_bool_dtype(dtype):\n        if is_extension_array_dtype(dtype):\n            indexer = indexer.to_numpy(dtype=bool, na_value=False)\n        else:\n            indexer = np.asarray(indexer, dtype=bool)\n\n        # GH26658\n        if len(indexer) != len(array):\n            raise IndexError(\n                f\"Boolean index has wrong length: \"\n                f\"{len(indexer)} instead of {len(array)}\"\n            )\n    elif is_integer_dtype(dtype):\n        try:\n            indexer = np.asarray(indexer, dtype=np.intp)\n        except ValueError as err:\n            raise ValueError(\n                \"Cannot index with an integer indexer containing NA values\"\n            ) from err\n    else:\n        raise IndexError(\"arrays used as indices must be of integer or boolean type\")\n\n    return indexer",
        "begin_line": 348,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.io.formats.printing.justify#64",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.justify(texts: Iterable[str], max_len: int, mode: str='right')",
        "snippet": "def justify(texts: Iterable[str], max_len: int, mode: str = \"right\") -> List[str]:\n    \"\"\"\n    Perform ljust, center, rjust against string or list-like\n    \"\"\"\n    if mode == \"left\":\n        return [x.ljust(max_len) for x in texts]\n    elif mode == \"center\":\n        return [x.center(max_len) for x in texts]\n    else:\n        return [x.rjust(max_len) for x in texts]",
        "begin_line": 64,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.2,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.io.formats.printing.pprint_thing#166",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.pprint_thing(thing: Any, _nest_lvl: int=0, escape_chars: Optional[EscapeChars]=None, default_escapes: bool=False, quote_strings: bool=False, max_seq_items: Optional[int]=None)",
        "snippet": "def pprint_thing(\n    thing: Any,\n    _nest_lvl: int = 0,\n    escape_chars: Optional[EscapeChars] = None,\n    default_escapes: bool = False,\n    quote_strings: bool = False,\n    max_seq_items: Optional[int] = None,\n) -> str:\n    \"\"\"\n    This function is the sanctioned way of converting objects\n    to a string representation and properly handles nested sequences.\n\n    Parameters\n    ----------\n    thing : anything to be formatted\n    _nest_lvl : internal use only. pprint_thing() is mutually-recursive\n        with pprint_sequence, this argument is used to keep track of the\n        current nesting level, and limit it.\n    escape_chars : list or dict, optional\n        Characters to escape. If a dict is passed the values are the\n        replacements\n    default_escapes : bool, default False\n        Whether the input escape characters replaces or adds to the defaults\n    max_seq_items : int or None, default None\n        Pass through to other pretty printers to limit sequence printing\n\n    Returns\n    -------\n    str\n    \"\"\"\n\n    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result\n\n    if hasattr(thing, \"__next__\"):\n        return str(thing)\n    elif isinstance(thing, dict) and _nest_lvl < get_option(\n        \"display.pprint_nest_depth\"\n    ):\n        result = _pprint_dict(\n            thing, _nest_lvl, quote_strings=True, max_seq_items=max_seq_items\n        )\n    elif is_sequence(thing) and _nest_lvl < get_option(\"display.pprint_nest_depth\"):\n        result = _pprint_seq(\n            thing,\n            _nest_lvl,\n            escape_chars=escape_chars,\n            quote_strings=quote_strings,\n            max_seq_items=max_seq_items,\n        )\n    elif isinstance(thing, str) and quote_strings:\n        result = f\"'{as_escaped_string(thing)}'\"\n    else:\n        result = as_escaped_string(thing)\n\n    return result",
        "begin_line": 166,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.io.formats.printing.as_escaped_string#197",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.as_escaped_string(thing: Any, escape_chars: Optional[EscapeChars]=escape_chars)",
        "snippet": "    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result",
        "begin_line": 197,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_summary#284",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_summary(obj, formatter: Callable, is_justify: bool=True, name: Optional[str]=None, indent_for_name: bool=True, line_break_each_value: bool=False)",
        "snippet": "def format_object_summary(\n    obj,\n    formatter: Callable,\n    is_justify: bool = True,\n    name: Optional[str] = None,\n    indent_for_name: bool = True,\n    line_break_each_value: bool = False,\n) -> str:\n    \"\"\"\n    Return the formatted obj as a unicode string\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable and support __getitem__\n    formatter : callable\n        string formatter for an element\n    is_justify : boolean\n        should justify the display\n    name : name, optional\n        defaults to the class name of the obj\n    indent_for_name : bool, default True\n        Whether subsequent lines should be be indented to\n        align with the name.\n    line_break_each_value : bool, default False\n        If True, inserts a line break for each value of ``obj``.\n        If False, only break lines when the a line of values gets wider\n        than the display width.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    summary string\n    \"\"\"\n    from pandas.io.formats.console import get_console_size\n    from pandas.io.formats.format import _get_adjustment\n\n    display_width, _ = get_console_size()\n    if display_width is None:\n        display_width = get_option(\"display.width\") or 80\n    if name is None:\n        name = type(obj).__name__\n\n    if indent_for_name:\n        name_len = len(name)\n        space1 = f'\\n{(\" \" * (name_len + 1))}'\n        space2 = f'\\n{(\" \" * (name_len + 2))}'\n    else:\n        space1 = \"\\n\"\n        space2 = \"\\n \"  # space for the opening '['\n\n    n = len(obj)\n    if line_break_each_value:\n        # If we want to vertically align on each value of obj, we need to\n        # separate values by a line break and indent the values\n        sep = \",\\n \" + \" \" * len(name)\n    else:\n        sep = \",\"\n    max_seq_items = get_option(\"display.max_seq_items\") or n\n\n    # are we a truncated display\n    is_truncated = n > max_seq_items\n\n    # adj can optionally handle unicode eastern asian width\n    adj = _get_adjustment()\n\n    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line\n\n    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0\n\n    close = \", \"\n\n    if n == 0:\n        summary = f\"[]{close}\"\n    elif n == 1 and not line_break_each_value:\n        first = formatter(obj[0])\n        summary = f\"[{first}]{close}\"\n    elif n == 2 and not line_break_each_value:\n        first = formatter(obj[0])\n        last = formatter(obj[-1])\n        summary = f\"[{first}, {last}]{close}\"\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in obj[:n]]\n            tail = [formatter(x) for x in obj[-n:]]\n        else:\n            head = []\n            tail = [formatter(x) for x in obj]\n\n        # adjust all values to max length if needed\n        if is_justify:\n            if line_break_each_value:\n                # Justify each string in the values of head and tail, so the\n                # strings will right align when head and tail are stacked\n                # vertically.\n                head, tail = _justify(head, tail)\n            elif is_truncated or not (\n                len(\", \".join(head)) < display_width\n                and len(\", \".join(tail)) < display_width\n            ):\n                # Each string in head and tail should align with each other\n                max_length = max(best_len(head), best_len(tail))\n                head = [x.rjust(max_length) for x in head]\n                tail = [x.rjust(max_length) for x in tail]\n            # If we are not truncated and we are only a single\n            # line, then don't justify\n\n        if line_break_each_value:\n            # Now head and tail are of type List[Tuple[str]]. Below we\n            # convert them into List[str], so there will be one string per\n            # value. Also truncate items horizontally if wider than\n            # max_space\n            max_space = display_width - len(space2)\n            value = tail[0]\n            for max_items in reversed(range(1, len(value) + 1)):\n                pprinted_seq = _pprint_seq(value, max_seq_items=max_items)\n                if len(pprinted_seq) < max_space:\n                    break\n            head = [_pprint_seq(x, max_seq_items=max_items) for x in head]\n            tail = [_pprint_seq(x, max_seq_items=max_items) for x in tail]\n\n        summary = \"\"\n        line = space2\n\n        for max_items in range(len(head)):\n            word = head[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        if is_truncated:\n            # remove trailing space of last line\n            summary += line.rstrip() + space2 + \"...\"\n            line = space2\n\n        for max_items in range(len(tail) - 1):\n            word = tail[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        # last value: no sep added + 1 space of width used for trailing ','\n        summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2)\n        summary += line\n\n        # right now close is either '' or ', '\n        # Now we want to include the ']', but not the maybe space.\n        close = \"]\" + close.rstrip(\" \")\n        summary += close\n\n        if len(summary) > (display_width) or line_break_each_value:\n            summary += space1\n        else:  # one row\n            summary += \" \"\n\n        # remove initial space\n        summary = \"[\" + summary[len(space2) :]\n\n    return summary",
        "begin_line": 284,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.printing._extend_line#351",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._extend_line(s: str, line: str, value: str, display_width: int, next_line_prefix: str)",
        "snippet": "    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line",
        "begin_line": 351,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.printing.best_len#361",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.best_len(values: List[str])",
        "snippet": "    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_attrs#501",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_attrs(obj: Sequence, include_dtype: bool=True)",
        "snippet": "def format_object_attrs(\n    obj: Sequence, include_dtype: bool = True\n) -> List[Tuple[str, Union[str, int]]]:\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    for common attrs, including dtype, name, length\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable\n    include_dtype : bool\n        If False, dtype won't be in the returned list\n\n    Returns\n    -------\n    list of 2-tuple\n\n    \"\"\"\n    attrs: List[Tuple[str, Union[str, int]]] = []\n    if hasattr(obj, \"dtype\") and include_dtype:\n        # error: \"Sequence[Any]\" has no attribute \"dtype\"\n        attrs.append((\"dtype\", f\"'{obj.dtype}'\"))  # type: ignore\n    if getattr(obj, \"name\", None) is not None:\n        # error: \"Sequence[Any]\" has no attribute \"name\"\n        attrs.append((\"name\", default_pprint(obj.name)))  # type: ignore\n    # error: \"Sequence[Any]\" has no attribute \"names\"\n    elif getattr(obj, \"names\", None) is not None and any(obj.names):  # type: ignore\n        # error: \"Sequence[Any]\" has no attribute \"names\"\n        attrs.append((\"names\", default_pprint(obj.names)))  # type: ignore\n    max_seq_items = get_option(\"display.max_seq_items\") or len(obj)\n    if len(obj) > max_seq_items:\n        attrs.append((\"length\", len(obj)))\n    return attrs",
        "begin_line": 501,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._constructor#408",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"DataFrame\"]:\n        return DataFrame",
        "begin_line": 408,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025188916876574307,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#422",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, (abc.Sequence, ExtensionArray)):\n                data = list(data)\n            if len(data) > 0:\n                if is_dataclass(data[0]):\n                    data = dataclasses_to_dicts(data)\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as err:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    f\"incompatible data and dtype: {err}\"\n                )\n                raise exc from err\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr)",
        "begin_line": 422,
        "end_line": 521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008620689655172414,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.006172839506172839,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.axes#526",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]",
        "begin_line": 526,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.shape#543",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, int]:\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)",
        "begin_line": 543,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1044",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1044,
        "end_line": 1048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ixs#2532",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        # irow\n        if axis == 0:\n            new_values = self._data.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_values, np.ndarray) and new_values.base is None\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[i],\n                dtype=new_values.dtype,\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            values = self._data.iget(i)\n            result = self._box_col_values(values, label)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n\n            return result",
        "begin_line": 2532,
        "end_line": 2568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2570",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self._take_with_is_copy(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2570,
        "end_line": 2625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._getitem_multilevel#2650",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._getitem_multilevel(self, key)",
        "snippet": "    def _getitem_multilevel(self, key):\n        # self.columns is a MultiIndex\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(\n                    new_values, index=self.index, columns=result_columns\n                )\n                result = result.__finalize__(self)\n\n            # If there is only one column being returned, and its name is\n            # either an empty string, or a tuple with an empty string as its\n            # first element, then treat the empty string as a placeholder\n            # and return the column as if the user had provided that empty\n            # string in the key. If the result is a Series, exclude the\n            # implied empty string from its name.\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == \"\":\n                    result = result[\"\"]\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(\n                            result, index=self.index, name=key\n                        )\n\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)",
        "begin_line": 2650,
        "end_line": 2686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2724",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2724,
        "end_line": 2740,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#2805",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 2805,
        "end_line": 2823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#2858",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError) as err:\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a Series\"\n                ) from err\n\n            self._data = self._data.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 2858,
        "end_line": 2875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#2884",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, items)",
        "snippet": "    def _box_col_values(self, values, items):\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=items, fastpath=True)",
        "begin_line": 2884,
        "end_line": 2889,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3395",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3395,
        "end_line": 3497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3415",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value",
        "begin_line": 3415,
        "end_line": 3435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_axes#3553",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n        frame = self\n\n        columns = axes[\"columns\"]\n        if columns is not None:\n            frame = frame._reindex_columns(\n                columns, method, copy, level, fill_value, limit, tolerance\n            )\n\n        index = axes[\"index\"]\n        if index is not None:\n            frame = frame._reindex_index(\n                index, method, copy, level, fill_value, limit, tolerance\n            )\n\n        return frame",
        "begin_line": 3553,
        "end_line": 3568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_columns#3590",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
        "snippet": "    def _reindex_columns(\n        self,\n        new_columns,\n        method,\n        copy,\n        level,\n        fill_value=None,\n        limit=None,\n        tolerance=None,\n    ):\n        new_columns, indexer = self.columns.reindex(\n            new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {1: [new_columns, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )",
        "begin_line": 3590,
        "end_line": 3608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindex#3712",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs) -> \"DataFrame\":\n        axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"labels\", None)\n        return super().reindex(**kwargs)",
        "begin_line": 3712,
        "end_line": 3718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._construct_result#5311",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._construct_result(self, result)",
        "snippet": "    def _construct_result(self, result) -> \"DataFrame\":\n        \"\"\"\n        Wrap the result of an arithmetic, comparison, or logical operation.\n\n        Parameters\n        ----------\n        result : DataFrame\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        out = self._constructor(result, index=self.index, copy=False)\n        # Pin columns instead of passing to constructor for compat with\n        #  non-unique columns case\n        out.columns = self.columns\n        return out",
        "begin_line": 5311,
        "end_line": 5327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#199",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager.from_array(data, index)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            name = ibase.maybe_extract_name(name, data, type(self))\n\n            if is_empty_data(data) and dtype is None:\n                # gh-17261\n                warnings.warn(\n                    \"The default dtype for empty Series will be 'object' instead \"\n                    \"of 'float64' in a future version. Specify a dtype explicitly \"\n                    \"to silence this warning.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                # uncomment the line below when removing the DeprecationWarning\n                # dtype = np.dtype(object)\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # need to copy to avoid aliasing issues\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                        # GH#24096 need copy to be deep for datetime64tz case\n                        # TODO: See if we can avoid these copies\n                        data = data._values.copy(deep=True)\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                if len(data.dtype):\n                    # GH#13296 we are dealing with a compound dtype, which\n                    #  should be treated as 2D\n                    raise ValueError(\n                        \"Cannot construct a Series from an ndarray with \"\n                        \"compound dtype.  Use DataFrame instead.\"\n                    )\n                pass\n            elif isinstance(data, ABCSeries):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif is_dict_like(data):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument. `copy` must be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            f\"Length of passed values is {len(data)}, \"\n                            f\"index implies {len(index)}.\"\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager.from_array(data, index)\n\n        generic.NDFrame.__init__(self, data)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 199,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#326",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n\n        # TODO: passing np.float64 to not break anything yet. See GH-17261\n        s = create_series_with_explicit_dtype(\n            values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n        )\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._data, s.index",
        "begin_line": 326,
        "end_line": 368,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#373",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Series\"]:\n        return Series",
        "begin_line": 373,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#389",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis: int, labels, fastpath: bool=False)",
        "snippet": "    def _set_axis(self, axis: int, labels, fastpath: bool = False) -> None:\n        \"\"\"\n        Override generic, we want to set the _typ here.\n\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            # The ensure_index call aabove ensures we have an Index object\n            self._data.set_axis(axis, labels)",
        "begin_line": 389,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#423",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 423,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024993751562109475,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series.name#437",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Label:\n        \"\"\"\n        Return the name of the Series.\n\n        The name of a Series becomes its index or column name if it is used\n        to form a DataFrame. It is also used whenever displaying the Series\n        using the interpreter.\n\n        Returns\n        -------\n        label (hashable object)\n            The name of the Series, also the column name if part of a DataFrame.\n\n        See Also\n        --------\n        Series.rename : Sets the Series name when given a scalar input.\n        Index.name : Corresponding Index property.\n\n        Examples\n        --------\n        The Series name can be set initially when calling the constructor.\n\n        >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Numbers, dtype: int64\n        >>> s.name = \"Integers\"\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Integers, dtype: int64\n\n        The name of a Series within a DataFrame is its column name.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n        ...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n        >>> df\n           Odd Numbers  Even Numbers\n        0            1             2\n        1            3             4\n        2            5             6\n        >>> df[\"Even Numbers\"].name\n        'Even Numbers'\n        \"\"\"\n        return self._name",
        "begin_line": 437,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series.name#487",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Label)",
        "snippet": "    def name(self, value: Label) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        object.__setattr__(self, \"_name\", value)",
        "begin_line": 487,
        "end_line": 490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series._values#535",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data (defined by Block.interval_values).\n        This are the values as stored in the Block (ndarray or ExtensionArray\n        depending on the Block class), with datetime64[ns] and timedelta64[ns]\n        wrapped in ExtensionArrays to match Index._values behavior.\n\n        Differs from the public ``.values`` for certain data types, because of\n        historical backwards compatibility of the public attribute (e.g. period\n        returns object ndarray and datetimetz a datetime64[ns] ndarray for\n        ``.values`` while it returns an ExtensionArray for ``._values`` in those\n        cases).\n\n        Differs from ``.array`` in that this still returns the numpy array if\n        the Block is backed by a numpy array (except for datetime64 and\n        timedelta64 dtypes), while ``.array`` ensures to always return an\n        ExtensionArray.\n\n        Overview:\n\n        dtype       | values        | _values       | array         |\n        ----------- | ------------- | ------------- | ------------- |\n        Numeric     | ndarray       | ndarray       | PandasArray   |\n        Category    | Categorical   | Categorical   | Categorical   |\n        dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] |\n        Period      | ndarray[obj]  | PeriodArray   | PeriodArray   |\n        Nullable    | EA            | EA            | EA            |\n\n        \"\"\"\n        return self._data.internal_values()",
        "begin_line": 535,
        "end_line": 566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002403268445085316,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#589",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 589,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024993751562109475,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series._needs_reindex_multi#3903",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"\n        Check if we do need a multi reindex; this is for compat with\n        higher dims.\n        \"\"\"\n        return False",
        "begin_line": 3903,
        "end_line": 3908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.series.Series.reindex#4043",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reindex(self, index=None, **kwargs)",
        "snippet": "    def reindex(self, index=None, **kwargs):\n        return super().reindex(index=index, **kwargs)",
        "begin_line": 4043,
        "end_line": 4044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base._new_Index#163",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._new_Index(cls, d)",
        "snippet": "def _new_Index(cls, d):\n    \"\"\"\n    This is called upon unpickling, rather than the default which doesn't\n    have arguments and breaks __new__.\n    \"\"\"\n    # required for backward compat, because PI can't be instantiated with\n    # ordinals through __new__ GH #13277\n    if issubclass(cls, ABCPeriodIndex):\n        from pandas.core.indexes.period import _new_PeriodIndex\n\n        return _new_PeriodIndex(cls, **d)\n\n    if issubclass(cls, ABCMultiIndex):\n        if \"labels\" in d and \"codes\" not in d:\n            # GH#23752 \"labels\" kwarg has been replaced with \"codes\"\n            d[\"codes\"] = d.pop(\"labels\")\n\n    return cls.__new__(cls, **d)",
        "begin_line": 163,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#282",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n\n        from pandas.core.indexes.range import RangeIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n\n        # interval\n        elif is_interval_dtype(data) or is_interval_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.interval import IntervalIndex\n\n            return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n        elif (\n            is_datetime64_any_dtype(data)\n            or is_datetime64_any_dtype(dtype)\n            or \"tz\" in kwargs\n        ):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import DatetimeIndex\n\n            return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n        elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import TimedeltaIndex\n\n            return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n        elif is_period_dtype(data) or is_period_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import PeriodIndex\n\n            return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n            else:\n                data = np.asarray(data, dtype=object)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.numeric import (\n                Float64Index,\n                Int64Index,\n                UInt64Index,\n            )\n\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype  # TODO: maybe not for object?\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n                if new_dtype is not None:\n                    return cls(\n                        new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                    )\n\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n            if subarr.ndim > 1:\n                # GH#13601, GH#20285, GH#27125\n                raise ValueError(\"Index data must be 1-dimensional\")\n            return cls._simple_new(subarr, name)\n\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 282,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010976948408342481,
            "pseudo_dstar_susp": 0.0010976948408342481,
            "pseudo_tarantula_susp": 0.0011037527593818985,
            "pseudo_op2_susp": 0.0010976948408342481,
            "pseudo_barinel_susp": 0.0011037527593818985
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#452",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name: Label=None)",
        "snippet": "    def _simple_new(cls, values, name: Label = None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides.\n        result._index_data = values\n        result._name = name\n        result._cache = {}\n\n        return result._reset_identity()",
        "begin_line": 452,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009624639076034649,
            "pseudo_dstar_susp": 0.0009624639076034649,
            "pseudo_tarantula_susp": 0.0009643201542912247,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009643201542912247
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#480",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 480,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#486",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        \"\"\"\n        Create a new Index with the same class as the caller, don't copy the\n        data, use the same object attributes with passed in attributes taking\n        precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        name : Label, defaults to self.name\n        \"\"\"\n        name = self.name if name is no_default else name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self.values\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 486,
        "end_line": 506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002720348204570185,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy_with_infer#508",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy_with_infer(self, values, **kwargs)",
        "snippet": "    def _shallow_copy_with_infer(self, values, **kwargs):\n        \"\"\"\n        Create a new Index inferring the class with passed value, don't copy\n        the data, use the same object attributes with passed in attributes\n        taking precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        kwargs : updates the default attributes for this Index\n        \"\"\"\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        attributes[\"copy\"] = False\n        if not len(values) and \"dtype\" not in kwargs:\n            # TODO: what if hasattr(values, \"dtype\")?\n            attributes[\"dtype\"] = self.dtype\n        if self._infer_as_myclass:\n            try:\n                return self._constructor(values, **attributes)\n            except (TypeError, ValueError):\n                pass\n\n        # Remove tz so Index will try non-DatetimeIndex inference\n        attributes.pop(\"tz\", None)\n        return Index(values, **attributes)",
        "begin_line": 508,
        "end_line": 535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#541",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 541,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000223563603845294,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#560",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 560,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009560229445506692,
            "pseudo_dstar_susp": 0.0009560229445506692,
            "pseudo_tarantula_susp": 0.0009578544061302681,
            "pseudo_op2_susp": 0.0009560229445506692,
            "pseudo_barinel_susp": 0.0009578544061302681
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#571",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `target_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        target_values = self._get_engine_target()\n        return self._engine_type(lambda: target_values, len(self))",
        "begin_line": 571,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.07142857142857142,
            "pseudo_tarantula_susp": 0.0014367816091954023,
            "pseudo_op2_susp": 0.07142857142857142,
            "pseudo_barinel_susp": 0.0014367816091954023
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#583",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 583,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009624639076034649,
            "pseudo_dstar_susp": 0.0009624639076034649,
            "pseudo_tarantula_susp": 0.0009643201542912247,
            "pseudo_op2_susp": 0.0009624639076034649,
            "pseudo_barinel_susp": 0.0009643201542912247
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#589",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 589,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000270929287455974,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#607",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 607,
        "end_line": 611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001128668171557562,
            "pseudo_dstar_susp": 0.001128668171557562,
            "pseudo_tarantula_susp": 0.0011363636363636363,
            "pseudo_op2_susp": 0.001128668171557562,
            "pseudo_barinel_susp": 0.0011363636363636363
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#629",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 629,
        "end_line": 639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#641",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Create an Index with values cast to dtypes. The class of a new Index\n        is determined by dtype. When conversion is impossible, a ValueError\n        exception is raised.\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n            Note that any signed integer `dtype` is treated as ``'int64'``,\n            and any unsigned integer `dtype` is treated as ``'uint64'``,\n            regardless of the size.\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and internal requirements on dtype are\n            satisfied, the original data is used to create a new Index\n            or the original Index is returned.\n\n        Returns\n        -------\n        Index\n            Index with values cast to specified dtype.\n        \"\"\"\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n        try:\n            casted = self.values.astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            raise TypeError(\n                f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            ) from err\n        return Index(casted, name=self.name, dtype=dtype)",
        "begin_line": 641,
        "end_line": 681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.take#712",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        if self._can_hold_na:\n            taken = self._assert_take_fillable(\n                self.values,\n                indices,\n                allow_fill=allow_fill,\n                fill_value=fill_value,\n                na_value=self._na_value,\n            )\n        else:\n            if allow_fill and fill_value is not None:\n                cls_name = type(self).__name__\n                raise ValueError(\n                    f\"Unable to fill values because {cls_name} cannot contain NA\"\n                )\n            taken = self.values.take(indices)\n        return self._shallow_copy(taken)",
        "begin_line": 712,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#733",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                raise ValueError(\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 733,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030892801977139327,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#803",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, names=None)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, names=None):\n        \"\"\"\n        Make a copy of this object.\n\n        Name and dtype sets those attributes on the new object.\n\n        Parameters\n        ----------\n        name : Label, optional\n            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used.\n\n        Returns\n        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        \"\"\"\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 803,
        "end_line": 839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__repr__#856",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_t:\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass_name = type(self).__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n        attrs_str = [f\"{k}={v}\" for k, v in attrs]\n        prepr = f\",{space}\".join(attrs_str)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        res = f\"{klass_name}({data}{prepr})\"\n\n        return res",
        "begin_line": 856,
        "end_line": 873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_space#875",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_space(self)",
        "snippet": "    def _format_space(self) -> str_t:\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"",
        "begin_line": 875,
        "end_line": 883,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._formatter_func#886",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        \"\"\"\n        Return the formatter function.\n        \"\"\"\n        return default_pprint",
        "begin_line": 886,
        "end_line": 890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_data#892",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None) -> str_t:\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n        # do we want to justify (only do so for non-objects)\n        is_justify = True\n\n        if self.inferred_type == \"string\":\n            is_justify = False\n        elif self.inferred_type == \"categorical\":\n            if is_object_dtype(self.categories):  # type: ignore\n                is_justify = False\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )",
        "begin_line": 892,
        "end_line": 907,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_attrs#909",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)",
        "begin_line": 909,
        "end_line": 913,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1148",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self)",
        "snippet": "    def name(self):\n        \"\"\"\n        Return Index or MultiIndex name.\n        \"\"\"\n        return self._name",
        "begin_line": 1148,
        "end_line": 1152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00022386389075442132,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1155",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self, value)",
        "snippet": "    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value",
        "begin_line": 1155,
        "end_line": 1163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001466275659824047,
            "pseudo_dstar_susp": 0.0013831258644536654,
            "pseudo_tarantula_susp": 0.0014705882352941176,
            "pseudo_op2_susp": 0.0013831258644536654,
            "pseudo_barinel_susp": 0.0014705882352941176
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1165",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep: bool=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep: bool = False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1165,
        "end_line": 1183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1185",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1185,
        "end_line": 1186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000224517287831163,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1188",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n        self._name = values[0]",
        "begin_line": 1188,
        "end_line": 1214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1218",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace: bool=False)",
        "snippet": "    def set_names(self, names, level=None, inplace: bool = False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1218,
        "end_line": 1294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1351",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1351,
        "end_line": 1355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000224517287831163,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.droplevel#1450",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.droplevel(self, level=0)",
        "snippet": "    def droplevel(self, level=0):\n        \"\"\"\n        Return index with requested level(s) removed.\n\n        If resulting index has only 1 level left, the result will be\n        of Index type, not MultiIndex.\n\n        .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n        Parameters\n        ----------\n        level : int, str, or list-like, default 0\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or indexes of levels.\n\n        Returns\n        -------\n        Index or MultiIndex\n        \"\"\"\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n\n        if len(level) == 0:\n            return self\n        if len(level) >= self.nlevels:\n            raise ValueError(\n                f\"Cannot remove {len(level)} levels from an index with {self.nlevels} \"\n                \"levels: at least one level must be left.\"\n            )\n        # The two checks above guarantee that here self is a MultiIndex\n\n        new_levels = list(self.levels)\n        new_codes = list(self.codes)\n        new_names = list(self.names)\n\n        for i in levnums:\n            new_levels.pop(i)\n            new_codes.pop(i)\n            new_names.pop(i)\n\n        if len(new_levels) == 1:\n\n            # set nan if needed\n            mask = new_codes[0] == -1\n            result = new_levels[0].take(new_codes[0])\n            if mask.any():\n                result = result.putmask(mask, np.nan)\n\n            result._name = new_names[0]\n            return result\n        else:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex(\n                levels=new_levels,\n                codes=new_codes,\n                names=new_names,\n                verify_integrity=False,\n            )",
        "begin_line": 1450,
        "end_line": 1510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1619",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1619,
        "end_line": 1623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001443001443001443,
            "pseudo_dstar_susp": 0.001364256480218281,
            "pseudo_tarantula_susp": 0.0014492753623188406,
            "pseudo_op2_susp": 0.001364256480218281,
            "pseudo_barinel_susp": 0.0014492753623188406
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_boolean#1657",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_boolean(self)",
        "snippet": "    def is_boolean(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of booleans.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of booleans.\n\n        See Also\n        --------\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([True, False, True])\n        >>> idx.is_boolean()\n        True\n\n        >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n        >>> idx.is_boolean()\n        False\n\n        >>> idx = pd.Index([True, False, \"True\"])\n        >>> idx.is_boolean()\n        False\n        \"\"\"\n        return self.inferred_type in [\"boolean\"]",
        "begin_line": 1657,
        "end_line": 1690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002720348204570185,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_floating#1727",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_floating(self)",
        "snippet": "    def is_floating(self) -> bool:\n        \"\"\"\n        Check if the Index is a floating type.\n\n        The Index may consist of only floats, NaNs, or a mix of floats,\n        integers, or NaNs.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of only consists of floats, NaNs, or\n            a mix of floats, integers, or NaNs.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_floating()\n        False\n        \"\"\"\n        return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
        "begin_line": 1727,
        "end_line": 1768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00029027576197387516,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1967",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str_t:\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1967,
        "end_line": 1971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00022376370552696352,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1974",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        return is_datetime_array(ensure_object(self.values))",
        "begin_line": 1974,
        "end_line": 1978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024993751562109475,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__reduce__#1983",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__reduce__(self)",
        "snippet": "    def __reduce__(self):\n        d = dict(data=self._data)\n        d.update(self._get_attributes_dict())\n        return _new_Index, (type(self), d), None",
        "begin_line": 1983,
        "end_line": 1986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1995",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1995,
        "end_line": 2005,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003105590062111801,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.003115264797507788,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.003115264797507788
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#2015",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self) -> bool:\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 2015,
        "end_line": 2022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003105590062111801,
            "pseudo_dstar_susp": 0.00273224043715847,
            "pseudo_tarantula_susp": 0.003115264797507788,
            "pseudo_op2_susp": 0.00273224043715847,
            "pseudo_barinel_susp": 0.003115264797507788
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2821",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        tolerance : int or float, optional\n            Maximum distance from index value for inexact matches. The value of\n            the index at the matching location most satisfy the equation\n            ``abs(index[loc] - key) <= tolerance``.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> unique_index = pd.Index(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.Index(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.Index(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True])\n        \"\"\"\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            casted_key = self._maybe_cast_indexer(key)\n            try:\n                return self._engine.get_loc(casted_key)\n            except KeyError as err:\n                raise KeyError(key) from err\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2821,
        "end_line": 2880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer#2932",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(\n        self, target, method=None, limit=None, tolerance=None\n    ) -> np.ndarray:\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        # Treat boolean labels passed to a numeric index as not found. Without\n        # this fix False and True would be treated as 0 and 1 respectively.\n        # (GH #16877)\n        if target.is_boolean() and self.is_numeric():\n            return ensure_platform_int(np.repeat(-1, target.size))\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            this = self.astype(object)\n            target = target.astype(object)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not self.is_unique:\n            raise InvalidIndexError(\n                \"Reindexing only valid with uniquely valued Index objects\"\n            )\n\n        if method == \"pad\" or method == \"backfill\":\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._get_engine_target())\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2932,
        "end_line": 2982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_partial_string_timestamp_match_key#3075",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_partial_string_timestamp_match_key(self, key)",
        "snippet": "    def _get_partial_string_timestamp_match_key(self, key):\n        \"\"\"\n        Translate any partial string timestamp matches in key, returning the\n        new key.\n\n        Only relevant for MultiIndex.\n        \"\"\"\n        # GH#10331\n        return key",
        "begin_line": 3075,
        "end_line": 3083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_reindex#3245",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_reindex(self, indexer)",
        "snippet": "    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")",
        "begin_line": 3245,
        "end_line": 3259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002487562189054726,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.reindex#3261",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values\n        as necessary).\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = _ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            if isinstance(self, ABCRangeIndex):\n                values = range(0)\n            else:\n                values = self._data[:0]  # appropriately-dtyped empty array\n            target = self._simple_new(values, name=self.name)\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                # check is_overlapping for IntervalIndex compat\n                if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, missing = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer",
        "begin_line": 3261,
        "end_line": 3320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00027464982147761604,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3812",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3812,
        "end_line": 3831,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011261261261261261,
            "pseudo_dstar_susp": 0.0011261261261261261,
            "pseudo_tarantula_susp": 0.0011337868480725624,
            "pseudo_op2_susp": 0.0011261261261261261,
            "pseudo_barinel_susp": 0.0011337868480725624
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3844",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, np.ndarray]:\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray or ExtensionArray.\n\n        ``_values`` are consistent between``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       |\n        ----------------- | --------------- | ------------- |\n        Index             | ndarray         | ndarray       |\n        CategoricalIndex  | Categorical     | Categorical   |\n        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n        PeriodIndex       | ndarray[object] | PeriodArray   |\n        IntervalIndex     | IntervalArray   | IntervalArray |\n\n        See Also\n        --------\n        values\n        \"\"\"\n        return self._data",
        "begin_line": 3844,
        "end_line": 3867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011235955056179776,
            "pseudo_dstar_susp": 0.0011235955056179776,
            "pseudo_tarantula_susp": 0.0011312217194570137,
            "pseudo_op2_susp": 0.0011235955056179776,
            "pseudo_barinel_susp": 0.0011312217194570137
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_engine_target#3869",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        \"\"\"\n        Get the ndarray that we can pass to the IndexEngine constructor.\n        \"\"\"\n        return self._values",
        "begin_line": 3869,
        "end_line": 3873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001366120218579235,
            "pseudo_dstar_susp": 0.0013550135501355014,
            "pseudo_tarantula_susp": 0.0014367816091954023,
            "pseudo_op2_susp": 0.0013550135501355014,
            "pseudo_barinel_susp": 0.0014367816091954023
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_scalar_to_index#3953",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_scalar_to_index(self, item)",
        "snippet": "    def _coerce_scalar_to_index(self, item):\n        \"\"\"\n        We need to coerce a scalar to a compat for our index type.\n\n        Parameters\n        ----------\n        item : scalar item to coerce\n        \"\"\"\n        dtype = self.dtype\n\n        if self._is_numeric_dtype and isna(item):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return Index([item], dtype=dtype, **self._get_attributes_dict())",
        "begin_line": 3953,
        "end_line": 3968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#4009",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        \"\"\"\n        Return a boolean indicating whether the provided key is in the index.\n\n        Parameters\n        ----------\n        key : label\n            The key to check if it is present in the index.\n\n        Returns\n        -------\n        bool\n            Whether the key search is in the index.\n\n        Raises\n        ------\n        TypeError\n            If the key is not hashable.\n\n        See Also\n        --------\n        Index.isin : Returns an ndarray of boolean dtype indicating whether the\n            list-like key is in the index.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n\n        >>> 2 in idx\n        True\n        >>> 6 in idx\n        False\n        \"\"\"\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 4009,
        "end_line": 4048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00030892801977139327,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#4056",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        result = getitem(key)\n        if not is_scalar(result):\n            if np.ndim(result) > 1:\n                deprecate_ndim_indexing(result)\n                return result\n            return promote(result)\n        else:\n            return result",
        "begin_line": 4056,
        "end_line": 4091,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012300123001230013,
            "pseudo_dstar_susp": 0.0012285012285012285,
            "pseudo_tarantula_susp": 0.00129366106080207,
            "pseudo_op2_susp": 0.0012285012285012285,
            "pseudo_barinel_susp": 0.00129366106080207
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4192",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determine if two Index objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements as calling\n            index; False otherwise.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        if isinstance(other, ABCMultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            return other.equals(self)\n\n        if is_extension_array_dtype(other.dtype):\n            # All EA-backed Index subclasses override equals\n            return other.equals(self)\n\n        return array_equivalent(self._values, other._values)",
        "begin_line": 4192,
        "end_line": 4220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025113008538422905,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4222",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4222,
        "end_line": 4242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer_for#4620",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer_for(self, target, **kwargs)",
        "snippet": "    def get_indexer_for(self, target, **kwargs):\n        \"\"\"\n        Guaranteed return of an indexer even when non-unique.\n\n        This dispatches to get_indexer or get_indexer_non_unique\n        as appropriate.\n\n        Returns\n        -------\n        numpy.ndarray\n            List of indices.\n        \"\"\"\n        if self.is_unique:\n            return self.get_indexer(target, **kwargs)\n        indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n        return indexer",
        "begin_line": 4620,
        "end_line": 4635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002840909090909091,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_promote#4637",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_promote(self, other)",
        "snippet": "    def _maybe_promote(self, other):\n        # A hack, but it works\n\n        if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n        return self, other",
        "begin_line": 4637,
        "end_line": 4645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002720348204570185,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4874",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n        if not self.is_floating():\n            return com.cast_scalar_indexer(key)\n        return key",
        "begin_line": 4874,
        "end_line": 4881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00029027576197387516,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.insert#5133",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.insert(self, loc: int, item)",
        "snippet": "    def insert(self, loc: int, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # Note: this method is overriden by all ExtensionIndex subclasses,\n        #  so self is never backed by an EA.\n        arr = np.asarray(self)\n        item = self._coerce_scalar_to_index(item)._values\n        idx = np.concatenate((arr[:loc], item, arr[loc:]))\n        return self._shallow_copy_with_infer(idx)",
        "begin_line": 5133,
        "end_line": 5153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5456",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy=False)",
        "snippet": "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
        "begin_line": 5456,
        "end_line": 5520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010319917440660474,
            "pseudo_dstar_susp": 0.0010319917440660474,
            "pseudo_tarantula_susp": 0.001037344398340249,
            "pseudo_op2_susp": 0.0010319917440660474,
            "pseudo_barinel_susp": 0.001037344398340249
        }
    },
    {
        "name": "pandas.core.indexes.base._ensure_has_len#5523",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._ensure_has_len(seq)",
        "snippet": "def _ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
        "begin_line": 5523,
        "end_line": 5532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00023126734505087883,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5550",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5550,
        "end_line": 5553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0015015015015015015,
            "pseudo_tarantula_susp": 0.0016051364365971107,
            "pseudo_op2_susp": 0.0015015015015015015,
            "pseudo_barinel_susp": 0.0016051364365971107
        }
    },
    {
        "name": "pandas.core.indexes.base.maybe_extract_name#5556",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.maybe_extract_name(name, obj, cls)",
        "snippet": "def maybe_extract_name(name, obj, cls) -> Label:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
        "begin_line": 5556,
        "end_line": 5569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010090817356205853,
            "pseudo_dstar_susp": 0.0010090817356205853,
            "pseudo_tarantula_susp": 0.0010141987829614604,
            "pseudo_op2_susp": 0.0010090817356205853,
            "pseudo_barinel_susp": 0.0010141987829614604
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_with_dtype#5572",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool)",
        "snippet": "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
        "begin_line": 5572,
        "end_line": 5623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010976948408342481,
            "pseudo_dstar_susp": 0.0010976948408342481,
            "pseudo_tarantula_susp": 0.0011037527593818985,
            "pseudo_op2_susp": 0.0010976948408342481,
            "pseudo_barinel_susp": 0.0011037527593818985
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_data_without_dtype#5626",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)",
        "snippet": "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
        "begin_line": 5626,
        "end_line": 5694,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010976948408342481,
            "pseudo_dstar_susp": 0.0010976948408342481,
            "pseudo_tarantula_susp": 0.0011037527593818985,
            "pseudo_op2_susp": 0.0010976948408342481,
            "pseudo_barinel_susp": 0.0011037527593818985
        }
    },
    {
        "name": "pandas.core.indexes.base._try_convert_to_int_array#5697",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype)",
        "snippet": "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
        "begin_line": 5697,
        "end_line": 5737,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n\n    # https://github.com/python/mypy/issues/1006\n    # error: 'classmethod' used with a non-method\n    @classmethod  # type: ignore\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008896797153024911,
            "pseudo_dstar_susp": 0.0008896797153024911,
            "pseudo_tarantula_susp": 0.0008904719501335708,
            "pseudo_op2_susp": 0.0008896797153024911,
            "pseudo_barinel_susp": 0.0008904719501335708
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#11",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008896797153024911,
            "pseudo_dstar_susp": 0.0008896797153024911,
            "pseudo_tarantula_susp": 0.0008904719501335708,
            "pseudo_op2_susp": 0.0008896797153024911,
            "pseudo_barinel_susp": 0.0008904719501335708
        }
    },
    {
        "name": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__#77",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic._ABCGeneric",
        "signature": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__(cls, inst)",
        "snippet": "    def __instancecheck__(cls, inst) -> bool:\n        return hasattr(inst, \"_data\")",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028735632183908046,
            "pseudo_dstar_susp": 0.0025575447570332483,
            "pseudo_tarantula_susp": 0.002890173410404624,
            "pseudo_op2_susp": 0.0025575447570332483,
            "pseudo_barinel_susp": 0.002890173410404624
        }
    },
    {
        "name": "pandas.core.indexes.extension.fget#57",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.fget(self)",
        "snippet": "            def fget(self):\n                result = getattr(self._data, name)\n                if wrap:\n                    if isinstance(result, type(self._data)):\n                        return type(self)._simple_new(result, name=self.name)\n                    return Index(result, name=self.name)\n                return result",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002983293556085919,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.iloc#94",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.iloc(self)",
        "snippet": "    def iloc(self) -> \"_iLocIndexer\":\n        \"\"\"\n        Purely integer-location based indexing for selection by position.\n\n        ``.iloc[]`` is primarily integer position based (from ``0`` to\n        ``length-1`` of the axis), but may also be used with a boolean\n        array.\n\n        Allowed inputs are:\n\n        - An integer, e.g. ``5``.\n        - A list or array of integers, e.g. ``[4, 3, 0]``.\n        - A slice object with ints, e.g. ``1:7``.\n        - A boolean array.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above).\n          This is useful in method chains, when you don't have a reference to the\n          calling object, but would like to base your selection on some value.\n\n        ``.iloc`` will raise ``IndexError`` if a requested indexer is\n        out-of-bounds, except *slice* indexers which allow out-of-bounds\n        indexing (this conforms with python/numpy *slice* semantics).\n\n        See more at :ref:`Selection by Position <indexing.integer>`.\n\n        See Also\n        --------\n        DataFrame.iat : Fast integer location scalar accessor.\n        DataFrame.loc : Purely label-location based indexer for selection by label.\n        Series.iloc : Purely integer-location based indexing for\n                       selection by position.\n\n        Examples\n        --------\n        >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n        ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n        >>> df = pd.DataFrame(mydict)\n        >>> df\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        **Indexing just the rows**\n\n        With a scalar integer.\n\n        >>> type(df.iloc[0])\n        <class 'pandas.core.series.Series'>\n        >>> df.iloc[0]\n        a    1\n        b    2\n        c    3\n        d    4\n        Name: 0, dtype: int64\n\n        With a list of integers.\n\n        >>> df.iloc[[0]]\n           a  b  c  d\n        0  1  2  3  4\n        >>> type(df.iloc[[0]])\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> df.iloc[[0, 1]]\n             a    b    c    d\n        0    1    2    3    4\n        1  100  200  300  400\n\n        With a `slice` object.\n\n        >>> df.iloc[:3]\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        With a boolean mask the same length as the index.\n\n        >>> df.iloc[[True, False, True]]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        With a callable, useful in method chains. The `x` passed\n        to the ``lambda`` is the DataFrame being sliced. This selects\n        the rows whose index label even.\n\n        >>> df.iloc[lambda x: x.index % 2 == 0]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        **Indexing both axes**\n\n        You can mix the indexer types for the index and columns. Use ``:`` to\n        select the entire axis.\n\n        With scalar integers.\n\n        >>> df.iloc[0, 1]\n        2\n\n        With lists of integers.\n\n        >>> df.iloc[[0, 2], [1, 3]]\n              b     d\n        0     2     4\n        2  2000  4000\n\n        With `slice` objects.\n\n        >>> df.iloc[1:3, 0:3]\n              a     b     c\n        1   100   200   300\n        2  1000  2000  3000\n\n        With a boolean array whose length matches the columns.\n\n        >>> df.iloc[:, [True, False, True, False]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n\n        With a callable function that expects the Series or DataFrame.\n\n        >>> df.iloc[:, lambda df: [0, 2]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n        \"\"\"\n        return _iLocIndexer(\"iloc\", self)",
        "begin_line": 94,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.loc#231",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.loc(self)",
        "snippet": "    def loc(self) -> \"_LocIndexer\":\n        \"\"\"\n        Access a group of rows and columns by label(s) or a boolean array.\n\n        ``.loc[]`` is primarily label based, but may also be used with a\n        boolean array.\n\n        Allowed inputs are:\n\n        - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n          interpreted as a *label* of the index, and **never** as an\n          integer position along the index).\n        - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n        - A slice object with labels, e.g. ``'a':'f'``.\n\n          .. warning:: Note that contrary to usual python slices, **both** the\n              start and the stop are included\n\n        - A boolean array of the same length as the axis being sliced,\n          e.g. ``[True, False, True]``.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above)\n\n        See more at :ref:`Selection by Label <indexing.label>`\n\n        Raises\n        ------\n        KeyError\n            If any items are not found.\n\n        See Also\n        --------\n        DataFrame.at : Access a single value for a row/column label pair.\n        DataFrame.iloc : Access group of rows and columns by integer position(s).\n        DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n            Series/DataFrame.\n        Series.loc : Access group of values using labels.\n\n        Examples\n        --------\n        **Getting values**\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=['cobra', 'viper', 'sidewinder'],\n        ...      columns=['max_speed', 'shield'])\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4       5\n        sidewinder          7       8\n\n        Single label. Note this returns the row as a Series.\n\n        >>> df.loc['viper']\n        max_speed    4\n        shield       5\n        Name: viper, dtype: int64\n\n        List of labels. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[['viper', 'sidewinder']]\n                    max_speed  shield\n        viper               4       5\n        sidewinder          7       8\n\n        Single label for row and column\n\n        >>> df.loc['cobra', 'shield']\n        2\n\n        Slice with labels for row and single label for column. As mentioned\n        above, note that both the start and stop of the slice are included.\n\n        >>> df.loc['cobra':'viper', 'max_speed']\n        cobra    1\n        viper    4\n        Name: max_speed, dtype: int64\n\n        Boolean list with the same length as the row axis\n\n        >>> df.loc[[False, False, True]]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series\n\n        >>> df.loc[df['shield'] > 6]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series with column labels specified\n\n        >>> df.loc[df['shield'] > 6, ['max_speed']]\n                    max_speed\n        sidewinder          7\n\n        Callable that returns a boolean Series\n\n        >>> df.loc[lambda df: df['shield'] == 8]\n                    max_speed  shield\n        sidewinder          7       8\n\n        **Setting values**\n\n        Set value for all items matching the list of labels\n\n        >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire row\n\n        >>> df.loc['cobra'] = 10\n        >>> df\n                    max_speed  shield\n        cobra              10      10\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire column\n\n        >>> df.loc[:, 'max_speed'] = 30\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper              30      50\n        sidewinder         30      50\n\n        Set value for rows matching callable condition\n\n        >>> df.loc[df['shield'] > 35] = 0\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper               0       0\n        sidewinder          0       0\n\n        **Getting values on a DataFrame with an index that has integer labels**\n\n        Another example using integers for the index\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n        >>> df\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        Slice with integer labels for rows. As mentioned above, note that both\n        the start and stop of the slice are included.\n\n        >>> df.loc[7:9]\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        **Getting values with a MultiIndex**\n\n        A number of examples using a DataFrame with a MultiIndex\n\n        >>> tuples = [\n        ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n        ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n        ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n        ... ]\n        >>> index = pd.MultiIndex.from_tuples(tuples)\n        >>> values = [[12, 2], [0, 4], [10, 20],\n        ...         [1, 4], [7, 1], [16, 36]]\n        >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n        >>> df\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Single label. Note this returns a DataFrame with a single index.\n\n        >>> df.loc['cobra']\n                 max_speed  shield\n        mark i          12       2\n        mark ii          0       4\n\n        Single index tuple. Note this returns a Series.\n\n        >>> df.loc[('cobra', 'mark ii')]\n        max_speed    0\n        shield       4\n        Name: (cobra, mark ii), dtype: int64\n\n        Single label for row and column. Similar to passing in a tuple, this\n        returns a Series.\n\n        >>> df.loc['cobra', 'mark i']\n        max_speed    12\n        shield        2\n        Name: (cobra, mark i), dtype: int64\n\n        Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[[('cobra', 'mark ii')]]\n                       max_speed  shield\n        cobra mark ii          0       4\n\n        Single tuple for the index with a single label for the column\n\n        >>> df.loc[('cobra', 'mark i'), 'shield']\n        2\n\n        Slice from index tuple to single label\n\n        >>> df.loc[('cobra', 'mark i'):'viper']\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Slice from index tuple to index tuple\n\n        >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                            max_speed  shield\n        cobra      mark i          12       2\n                   mark ii          0       4\n        sidewinder mark i          10      20\n                   mark ii          1       4\n        viper      mark ii          7       1\n        \"\"\"\n        return _LocIndexer(\"loc\", self)",
        "begin_line": 231,
        "end_line": 468,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._has_valid_tuple#687",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._has_valid_tuple(self, key: Tuple)",
        "snippet": "    def _has_valid_tuple(self, key: Tuple):\n        \"\"\"\n        Check the key for valid keys across my indexer.\n        \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            try:\n                self._validate_key(k, i)\n            except ValueError as err:\n                raise ValueError(\n                    \"Location based indexing can only have \"\n                    f\"[{self._valid_types}] types\"\n                ) from err",
        "begin_line": 687,
        "end_line": 700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._is_nested_tuple_indexer#702",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._is_nested_tuple_indexer(self, tup: Tuple)",
        "snippet": "    def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False",
        "begin_line": 702,
        "end_line": 710,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_lowerdim#750",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_lowerdim(self, tup: Tuple)",
        "snippet": "    def _getitem_lowerdim(self, tup: Tuple):\n\n        # we can directly get the axis result since the axis is specified\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n\n        # we may have a nested tuples indexer here\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n\n        # we maybe be using a tuple to represent multiple dimensions here\n        ax0 = self.obj._get_axis(0)\n        # ...but iloc should handle the tuple as simple integer-location\n        # instead of checking it as multiindex representation (GH 13797)\n        if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n        if len(tup) > self.ndim:\n            raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n        for i, key in enumerate(tup):\n            if is_label_like(key):\n                # We don't need to check for tuples here because those are\n                #  caught by the _is_nested_tuple_indexer check above.\n                section = self._getitem_axis(key, axis=i)\n\n                # We should never have a scalar section here, because\n                #  _getitem_lowerdim is only called after a check for\n                #  is_scalar_access, which that would be.\n                if section.ndim == self.ndim:\n                    # we're in the middle of slicing through a MultiIndex\n                    # revise the key wrt to `section` by inserting an _NS\n                    new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n                else:\n                    # Note: the section.ndim == self.ndim check above\n                    #  rules out having DataFrame here, so we dont need to worry\n                    #  about transposing.\n                    new_key = tup[:i] + tup[i + 1 :]\n\n                    if len(new_key) == 1:\n                        new_key = new_key[0]\n\n                # Slices should return views, but calling iloc/loc with a null\n                # slice returns a new object.\n                if com.is_null_slice(new_key):\n                    return section\n                # This is an elided recursive call to iloc/loc\n                return getattr(section, self.name)[new_key]\n\n        raise IndexingError(\"not applicable\")",
        "begin_line": 750,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_nested_tuple#805",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_nested_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_nested_tuple(self, tup: Tuple):\n        # we have a nested tuple so have at least 1 multi-index level\n        # we should be able to match up the dimensionality here\n\n        # we have too many indexers for our dim, but have at least 1\n        # multi-index dimension, try to see if we have something like\n        # a tuple passed to a series with a multi-index\n        if len(tup) > self.ndim:\n            if self.name != \"loc\":\n                # This should never be reached, but lets be explicit about it\n                raise ValueError(\"Too many indices\")\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n            # this is a series with a multi-index specified a tuple of\n            # selectors\n            axis = self.axis or 0\n            return self._getitem_axis(tup, axis=axis)\n\n        # handle the multi-axis by taking sections and reducing\n        # this is iterative\n        obj = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n\n            current_ndim = obj.ndim\n            obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n            axis += 1\n\n            # if we have a scalar, we are done\n            if is_scalar(obj) or not hasattr(obj, \"ndim\"):\n                break\n\n            # has the dim of the obj changed?\n            # GH 7199\n            if obj.ndim < current_ndim:\n                axis -= 1\n\n        return obj",
        "begin_line": 805,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#853",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self.obj._get_value(*key, takeable=self._takeable)\n                except (KeyError, IndexError, AttributeError):\n                    # AttributeError for IntervalTree get_value\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 853,
        "end_line": 868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._validate_key#903",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n\n        # valid for a collection of labels (we check their presence later)\n        # slice of labels (where start-end in labels)\n        # slice of integers (only if in the labels)\n        # boolean\n        pass",
        "begin_line": 903,
        "end_line": 909,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._is_scalar_access#914",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_scalar(k):\n                return False\n\n            ax = self.obj.axes[i]\n            if isinstance(ax, ABCMultiIndex):\n                return False\n\n            if isinstance(k, str) and ax._supports_partial_string_indexing:\n                # partial string indexing, df.loc['2000', 'A']\n                # should not be considered scalar\n                return False\n\n            if not ax.is_unique:\n                return False\n\n        return True",
        "begin_line": 914,
        "end_line": 943,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_tuple#1031",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        # no multi-index, so validate all of the indexers\n        self._has_valid_tuple(tup)\n\n        # ugly hack for GH #836\n        if self._multi_take_opportunity(tup):\n            return self._multi_take(tup)\n\n        return self._getitem_tuple_same_dim(tup)",
        "begin_line": 1031,
        "end_line": 1044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._get_label#1046",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._get_label(self, label, axis: int)",
        "snippet": "    def _get_label(self, label, axis: int):\n        # GH#5667 this will fail if the label is not present in the axis.\n        return self.obj._xs(label, axis=axis)",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_axis#1067",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        key = item_from_zerodim(key)\n        if is_iterator(key):\n            key = list(key)\n\n        labels = self.obj._get_axis(axis)\n        key = labels._get_partial_string_timestamp_match_key(key)\n\n        if isinstance(key, slice):\n            self._validate_key(key, axis)\n            return self._get_slice_axis(key, axis=axis)\n        elif com.is_bool_indexer(key):\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n\n            # convert various list-like indexers\n            # to a list of keys\n            # we will use the *values* of the object\n            # and NOT the index if its a PandasObject\n            if isinstance(labels, ABCMultiIndex):\n\n                if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:\n                    # Series, or 0,1 ndim ndarray\n                    # GH 14730\n                    key = list(key)\n                elif isinstance(key, ABCDataFrame):\n                    # GH 15438\n                    raise NotImplementedError(\n                        \"Indexing a MultiIndex with a \"\n                        \"DataFrame key is not \"\n                        \"implemented\"\n                    )\n                elif hasattr(key, \"ndim\") and key.ndim > 1:\n                    raise NotImplementedError(\n                        \"Indexing a MultiIndex with a \"\n                        \"multidimensional key is not \"\n                        \"implemented\"\n                    )\n\n                if (\n                    not isinstance(key, tuple)\n                    and len(key)\n                    and not isinstance(key[0], tuple)\n                ):\n                    key = tuple([key])\n\n            # an iterable multi-selection\n            if not (isinstance(key, tuple) and isinstance(labels, ABCMultiIndex)):\n\n                if hasattr(key, \"ndim\") and key.ndim > 1:\n                    raise ValueError(\"Cannot index with multidimensional key\")\n\n                return self._getitem_iterable(key, axis=axis)\n\n            # nested tuple slicing\n            if is_nested_tuple(key, labels):\n                locs = labels.get_locs(key)\n                indexer = [slice(None)] * self.ndim\n                indexer[axis] = locs\n                return self.obj.iloc[tuple(indexer)]\n\n        # fall thru to straight lookup\n        self._validate_key(key, axis)\n        return self._get_label(key, axis=axis)",
        "begin_line": 1067,
        "end_line": 1130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_key#1343",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n        if com.is_bool_indexer(key):\n            if hasattr(key, \"index\") and isinstance(key.index, Index):\n                if key.index.inferred_type == \"integer\":\n                    raise NotImplementedError(\n                        \"iLocation based boolean \"\n                        \"indexing on an integer type \"\n                        \"is not available\"\n                    )\n                raise ValueError(\n                    \"iLocation based boolean indexing cannot use \"\n                    \"an indexable as a mask\"\n                )\n            return\n\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            # a tuple should already have been caught by this point\n            # so don't treat a tuple as a valid indexer\n            raise IndexingError(\"Too many indexers\")\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n\n            # check that the key has a numeric dtype\n            if not is_numeric_dtype(arr.dtype):\n                raise IndexError(f\".iloc requires numeric indexers, got {arr}\")\n\n            # check that the key does not exceed the maximum size of the index\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
        "begin_line": 1343,
        "end_line": 1378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._is_scalar_access#1409",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n\n        return True",
        "begin_line": 1409,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#1428",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int) -> None:\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position.\n        axis : int\n            Desired axis.\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'.\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 1428,
        "end_line": 1446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_tuple#1450",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        return self._getitem_tuple_same_dim(tup)",
        "begin_line": 1450,
        "end_line": 1458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#1483",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self.obj._ixs(key, axis=axis)",
        "begin_line": 1483,
        "end_line": 1507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2111",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj, key)",
        "snippet": "def convert_to_index_sliceable(obj, key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj._data.items:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2111,
        "end_line": 2133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing.is_nested_tuple#2226",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_nested_tuple(tup, labels)",
        "snippet": "def is_nested_tuple(tup, labels) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for i, k in enumerate(tup):\n\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
        "begin_line": 2226,
        "end_line": 2241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexing.is_label_like#2244",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_label_like(key)",
        "snippet": "def is_label_like(key) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
        "begin_line": 2244,
        "end_line": 2251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#73",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid fill method. Expecting {expecting}. Got {method}\")\n    return method",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000270929287455974,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#601",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 601,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000270929287455974,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#131",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        closed=None,\n        dtype=_TD_DTYPE,\n        copy=False,\n        name=None,\n    ):\n        name = maybe_extract_name(name, data, cls)\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            raise ValueError(\n                \"Units 'M' and 'Y' are no longer supported, as they do not \"\n                \"represent unambiguous timedelta values durations.\"\n            )\n\n        if isinstance(data, TimedeltaArray) and freq is None:\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name)\n\n        if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr, name=name)",
        "begin_line": 131,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#174",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values: TimedeltaArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: TimedeltaArray, name: Label = None):\n        assert isinstance(values, TimedeltaArray)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._name = name\n        result._cache = {}\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 174,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.pickle.to_pickle#12",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.to_pickle(obj: Any, filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL)",
        "snippet": "def to_pickle(\n    obj: Any,\n    filepath_or_buffer: FilePathOrBuffer,\n    compression: Optional[str] = \"infer\",\n    protocol: int = pickle.HIGHEST_PROTOCOL,\n):\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    obj : any object\n        Any python object.\n    filepath_or_buffer : str, path object or file-like object\n        File path, URL, or buffer where the pickled object will be stored.\n\n        .. versionchanged:: 1.0.0\n           Accept URL. URL has to be of S3 or GCS.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        If 'infer' and 'path_or_url' is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n        compression) If 'infer' and 'path_or_url' is not path-like, then use\n        None (= no decompression).\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n        values for this parameter depend on the version of Python. For Python\n        2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a valid value.\n        For Python >= 3.4, 4 is a valid value. A negative value for the\n        protocol parameter is equivalent to setting its value to\n        HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html\n        .. versionadded:: 0.21.0\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, compression=compression, mode=\"wb\"\n    )\n    if not isinstance(fp_or_buf, str) and compression == \"infer\":\n        compression = None\n    f, fh = get_handle(fp_or_buf, \"wb\", compression=compression, is_text=False)\n    if protocol < 0:\n        protocol = pickle.HIGHEST_PROTOCOL\n    try:\n        f.write(pickle.dumps(obj, protocol=protocol))\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()\n        if should_close:\n            try:\n                fp_or_buf.close()\n            except ValueError:\n                pass",
        "begin_line": 12,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.pickle.read_pickle#100",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.read_pickle(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]='infer')",
        "snippet": "def read_pickle(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str] = \"infer\"\n):\n    \"\"\"\n    Load pickled pandas object (or any object) from file.\n\n    .. warning::\n\n       Loading pickled data received from untrusted sources can be\n       unsafe. See `here <https://docs.python.org/3/library/pickle.html>`__.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str, path object or file-like object\n        File path, URL, or buffer where the pickled object will be loaded from.\n\n        .. versionchanged:: 1.0.0\n           Accept URL. URL is not limited to S3 and GCS.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        If 'infer' and 'path_or_url' is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n        compression) If 'infer' and 'path_or_url' is not path-like, then use\n        None (= no decompression).\n\n    Returns\n    -------\n    unpickled : same type as object stored in file\n\n    See Also\n    --------\n    DataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\n    Series.to_pickle : Pickle (serialize) Series object to file.\n    read_hdf : Read HDF5 file into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n    read_parquet : Load a parquet object, returning a DataFrame.\n\n    Notes\n    -----\n    read_pickle is only guaranteed to be backwards compatible to pandas 0.20.3.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, compression=compression\n    )\n    if not isinstance(fp_or_buf, str) and compression == \"infer\":\n        compression = None\n    f, fh = get_handle(fp_or_buf, \"rb\", compression=compression, is_text=False)\n\n    # 1) try standard library Pickle\n    # 2) try pickle_compat (older pandas version) to handle subclass changes\n    # 3) try pickle_compat with latin-1 encoding upon a UnicodeDecodeError\n\n    try:\n        excs_to_catch = (AttributeError, ImportError, ModuleNotFoundError)\n        try:\n            with warnings.catch_warnings(record=True):\n                # We want to silence any warnings about, e.g. moved modules.\n                warnings.simplefilter(\"ignore\", Warning)\n                return pickle.load(f)\n        except excs_to_catch:\n            # e.g.\n            #  \"No module named 'pandas.core.sparse.series'\"\n            #  \"Can't get attribute '__nat_unpickle' on <module 'pandas._libs.tslib\"\n            return pc.load(f, encoding=None)\n    except UnicodeDecodeError:\n        # e.g. can occur for files written in py27; see GH#28645 and GH#31988\n        return pc.load(f, encoding=\"latin-1\")\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()\n        if should_close:\n            try:\n                fp_or_buf.close()\n            except ValueError:\n                pass",
        "begin_line": 100,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.is_url#56",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_url(url)",
        "snippet": "def is_url(url) -> bool:\n    \"\"\"\n    Check to see if a URL has a valid protocol.\n\n    Parameters\n    ----------\n    url : str or unicode\n\n    Returns\n    -------\n    isurl : bool\n        If `url` has a valid protocol return True otherwise False.\n    \"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in _VALID_URLS",
        "begin_line": 56,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common._expand_user#74",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._expand_user(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Return the argument with an initial component of ~ or ~user\n    replaced by that user's home directory.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted if possible\n\n    Returns\n    -------\n    expanded_filepath_or_buffer : an expanded filepath or the\n                                  input if not expandable\n    \"\"\"\n    if isinstance(filepath_or_buffer, str):\n        return os.path.expanduser(filepath_or_buffer)\n    return filepath_or_buffer",
        "begin_line": 74,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.stringify_path#104",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.stringify_path(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def stringify_path(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Attempt to convert a path-like object to a string.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted\n\n    Returns\n    -------\n    str_filepath_or_buffer : maybe a string version of the object\n\n    Notes\n    -----\n    Objects supporting the fspath protocol (python 3.6+) are coerced\n    according to its __fspath__ method.\n\n    For backwards compatibility with older pythons, pathlib.Path and\n    py.path objects are specially coerced.\n\n    Any other object is passed through unchanged, which includes bytes,\n    strings, buffers, or anything else that's not even path-like.\n    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):\n        return str(filepath_or_buffer)\n    return _expand_user(filepath_or_buffer)",
        "begin_line": 104,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.is_s3_url#137",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_s3_url(url)",
        "snippet": "def is_s3_url(url) -> bool:\n    \"\"\"Check for an s3, s3n, or s3a url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"s3\", \"s3n\", \"s3a\"]",
        "begin_line": 137,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.is_gcs_url#144",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_gcs_url(url)",
        "snippet": "def is_gcs_url(url) -> bool:\n    \"\"\"Check for a gcs url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"gcs\", \"gs\"]",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.get_filepath_or_buffer#161",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_filepath_or_buffer(filepath_or_buffer: FilePathOrBuffer, encoding: Optional[str]=None, compression: Optional[str]=None, mode: Optional[str]=None)",
        "snippet": "def get_filepath_or_buffer(\n    filepath_or_buffer: FilePathOrBuffer,\n    encoding: Optional[str] = None,\n    compression: Optional[str] = None,\n    mode: Optional[str] = None,\n):\n    \"\"\"\n    If the filepath_or_buffer is a url, translate and return the buffer.\n    Otherwise passthrough.\n\n    Parameters\n    ----------\n    filepath_or_buffer : a url, filepath (str, py.path.local or pathlib.Path),\n                         or buffer\n    compression : {{'gzip', 'bz2', 'zip', 'xz', None}}, optional\n    encoding : the encoding to use to decode bytes, default is 'utf-8'\n    mode : str, optional\n\n    Returns\n    -------\n    Tuple[FilePathOrBuffer, str, str, bool]\n        Tuple containing the filepath or buffer, the encoding, the compression\n        and should_close.\n    \"\"\"\n    filepath_or_buffer = stringify_path(filepath_or_buffer)\n\n    if isinstance(filepath_or_buffer, str) and is_url(filepath_or_buffer):\n        req = urlopen(filepath_or_buffer)\n        content_encoding = req.headers.get(\"Content-Encoding\", None)\n        if content_encoding == \"gzip\":\n            # Override compression based on Content-Encoding header\n            compression = \"gzip\"\n        reader = BytesIO(req.read())\n        req.close()\n        return reader, encoding, compression, True\n\n    if is_s3_url(filepath_or_buffer):\n        from pandas.io import s3\n\n        return s3.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if is_gcs_url(filepath_or_buffer):\n        from pandas.io import gcs\n\n        return gcs.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if isinstance(filepath_or_buffer, (str, bytes, mmap.mmap)):\n        return _expand_user(filepath_or_buffer), None, compression, False\n\n    if not is_file_like(filepath_or_buffer):\n        msg = f\"Invalid file path or buffer object type: {type(filepath_or_buffer)}\"\n        raise ValueError(msg)\n\n    return filepath_or_buffer, None, compression, False",
        "begin_line": 161,
        "end_line": 218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.get_compression_method#242",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_compression_method(compression: Optional[Union[str, Mapping[str, str]]])",
        "snippet": "def get_compression_method(\n    compression: Optional[Union[str, Mapping[str, str]]]\n) -> Tuple[Optional[str], Dict[str, str]]:\n    \"\"\"\n    Simplifies a compression argument to a compression method string and\n    a mapping containing additional arguments.\n\n    Parameters\n    ----------\n    compression : str or mapping\n        If string, specifies the compression method. If mapping, value at key\n        'method' specifies compression method.\n\n    Returns\n    -------\n    tuple of ({compression method}, Optional[str]\n              {compression arguments}, Dict[str, str])\n\n    Raises\n    ------\n    ValueError on mapping missing 'method' key\n    \"\"\"\n    if isinstance(compression, Mapping):\n        compression_args = dict(compression)\n        try:\n            compression = compression_args.pop(\"method\")\n        except KeyError as err:\n            raise ValueError(\"If mapping, compression must have key 'method'\") from err\n    else:\n        compression_args = {}\n    return compression, compression_args",
        "begin_line": 242,
        "end_line": 272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.infer_compression#275",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.infer_compression(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str])",
        "snippet": "def infer_compression(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]\n) -> Optional[str]:\n    \"\"\"\n    Get the compression method for filepath_or_buffer. If compression='infer',\n    the inferred compression method is returned. Otherwise, the input\n    compression method is returned unchanged, unless it's invalid, in which\n    case an error is raised.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str or file handle\n        File path or object.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n        If 'infer' and `filepath_or_buffer` is path-like, then detect\n        compression from the following extensions: '.gz', '.bz2', '.zip',\n        or '.xz' (otherwise no compression).\n\n    Returns\n    -------\n    string or None\n\n    Raises\n    ------\n    ValueError on invalid compression specified.\n    \"\"\"\n    # No compression has been explicitly specified\n    if compression is None:\n        return None\n\n    # Infer compression\n    if compression == \"infer\":\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = stringify_path(filepath_or_buffer)\n        if not isinstance(filepath_or_buffer, str):\n            # Cannot infer compression of a buffer, assume no compression\n            return None\n\n        # Infer compression from the filename/URL extension\n        for compression, extension in _compression_to_extension.items():\n            if filepath_or_buffer.endswith(extension):\n                return compression\n        return None\n\n    # Compression has been specified. Check that it's valid\n    if compression in _compression_to_extension:\n        return compression\n\n    msg = f\"Unrecognized compression type: {compression}\"\n    valid = [\"infer\", None] + sorted(_compression_to_extension)\n    msg += f\"\\nValid compression types are {valid}\"\n    raise ValueError(msg)",
        "begin_line": 275,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.io.common.get_handle#329",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_handle(path_or_buf, mode: str, encoding=None, compression: Optional[Union[str, Mapping[str, Any]]]=None, memory_map: bool=False, is_text: bool=True)",
        "snippet": "def get_handle(\n    path_or_buf,\n    mode: str,\n    encoding=None,\n    compression: Optional[Union[str, Mapping[str, Any]]] = None,\n    memory_map: bool = False,\n    is_text: bool = True,\n):\n    \"\"\"\n    Get file handle for given path/buffer and mode.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle\n        File path or object.\n    mode : str\n        Mode to open path_or_buf with.\n    encoding : str or None\n        Encoding to use.\n    compression : str or dict, default None\n        If string, specifies compression mode. If dict, value at key 'method'\n        specifies compression mode. Compression mode must be one of {'infer',\n        'gzip', 'bz2', 'zip', 'xz', None}. If compression mode is 'infer'\n        and `filepath_or_buffer` is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise\n        no compression). If dict and compression mode is 'zip' or inferred as\n        'zip', other entries passed as additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other keys as compression options if compression\n           mode is 'zip'.\n\n    memory_map : boolean, default False\n        See parsers._parser_params for more information.\n    is_text : boolean, default True\n        whether file/buffer is in text format (csv, json, etc.), or in binary\n        mode (pickle, etc.).\n\n    Returns\n    -------\n    f : file-like\n        A file-like object.\n    handles : list of file-like objects\n        A list of file-like object that were opened in this function.\n    \"\"\"\n    need_text_wrapping: Tuple[Type[\"IOBase\"], ...]\n    try:\n        from s3fs import S3File\n\n        need_text_wrapping = (BufferedIOBase, RawIOBase, S3File)\n    except ImportError:\n        need_text_wrapping = (BufferedIOBase, RawIOBase)\n\n    handles: List[IO] = list()\n    f = path_or_buf\n\n    # Convert pathlib.Path/py.path.local or string\n    path_or_buf = stringify_path(path_or_buf)\n    is_path = isinstance(path_or_buf, str)\n\n    compression, compression_args = get_compression_method(compression)\n    if is_path:\n        compression = infer_compression(path_or_buf, compression)\n\n    if compression:\n\n        # GZ Compression\n        if compression == \"gzip\":\n            if is_path:\n                f = gzip.open(path_or_buf, mode)\n            else:\n                f = gzip.GzipFile(fileobj=path_or_buf)\n\n        # BZ Compression\n        elif compression == \"bz2\":\n            if is_path:\n                f = bz2.BZ2File(path_or_buf, mode)\n            else:\n                f = bz2.BZ2File(path_or_buf)\n\n        # ZIP Compression\n        elif compression == \"zip\":\n            zf = _BytesZipFile(path_or_buf, mode, **compression_args)\n            # Ensure the container is closed as well.\n            handles.append(zf)\n            if zf.mode == \"w\":\n                f = zf\n            elif zf.mode == \"r\":\n                zip_names = zf.namelist()\n                if len(zip_names) == 1:\n                    f = zf.open(zip_names.pop())\n                elif len(zip_names) == 0:\n                    raise ValueError(f\"Zero files found in ZIP file {path_or_buf}\")\n                else:\n                    raise ValueError(\n                        \"Multiple files found in ZIP file. \"\n                        f\"Only one file per ZIP: {zip_names}\"\n                    )\n\n        # XZ Compression\n        elif compression == \"xz\":\n            f = _get_lzma_file(lzma)(path_or_buf, mode)\n\n        # Unrecognized Compression\n        else:\n            msg = f\"Unrecognized compression type: {compression}\"\n            raise ValueError(msg)\n\n        handles.append(f)\n\n    elif is_path:\n        if encoding:\n            # Encoding\n            f = open(path_or_buf, mode, encoding=encoding, newline=\"\")\n        elif is_text:\n            # No explicit encoding\n            f = open(path_or_buf, mode, errors=\"replace\", newline=\"\")\n        else:\n            # Binary mode\n            f = open(path_or_buf, mode)\n        handles.append(f)\n\n    # Convert BytesIO or file objects passed with an encoding\n    if is_text and (compression or isinstance(f, need_text_wrapping)):\n        from io import TextIOWrapper\n\n        g = TextIOWrapper(f, encoding=encoding, newline=\"\")\n        if not isinstance(f, (BufferedIOBase, RawIOBase)):\n            handles.append(g)\n        f = g\n\n    if memory_map and hasattr(f, \"fileno\"):\n        try:\n            wrapped = _MMapWrapper(f)\n            f.close()\n            f = wrapped\n        except Exception:\n            # we catch any errors that may have occurred\n            # because that is consistent with the lower-level\n            # functionality of the C engine (pd.read_csv), so\n            # leave the file handler as is then\n            pass\n\n    return f, handles",
        "begin_line": 329,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#208",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            f'For argument \"{arg_name}\" expected type bool, received '\n            f\"type {type(value).__name__}.\"\n        )\n    return value",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas.util._validators.validate_axis_style_args#218",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_axis_style_args(data, args, kwargs, arg_name, method_name)",
        "snippet": "def validate_axis_style_args(data, args, kwargs, arg_name, method_name):\n    \"\"\"\n    Argument handler for mixed index, columns / axis functions\n\n    In an attempt to handle both `.method(index, columns)`, and\n    `.method(arg, axis=.)`, we have to do some bad things to argument\n    parsing. This translates all arguments to `{index=., columns=.}` style.\n\n    Parameters\n    ----------\n    data : DataFrame\n    args : tuple\n        All positional arguments from the user\n    kwargs : dict\n        All keyword arguments from the user\n    arg_name, method_name : str\n        Used for better error messages\n\n    Returns\n    -------\n    kwargs : dict\n        A dictionary of keyword arguments. Doesn't modify ``kwargs``\n        inplace, so update them with the return value here.\n\n    Examples\n    --------\n    >>> df._validate_axis_style_args((str.upper,), {'columns': id},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n\n    This emits a warning\n    >>> df._validate_axis_style_args((str.upper, id), {},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n    \"\"\"\n    # TODO: Change to keyword-only args and remove all this\n\n    out = {}\n    # Goal: fill 'out' with index/columns-style arguments\n    # like out = {'index': foo, 'columns': bar}\n\n    # Start by validating for consistency\n    if \"axis\" in kwargs and any(x in kwargs for x in data._AXIS_NUMBERS):\n        msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'.\"\n        raise TypeError(msg)\n\n    # First fill with explicit values provided by the user...\n    if arg_name in kwargs:\n        if args:\n            msg = f\"{method_name} got multiple values for argument '{arg_name}'\"\n            raise TypeError(msg)\n\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = kwargs[arg_name]\n\n    # More user-provided arguments, now from kwargs\n    for k, v in kwargs.items():\n        try:\n            ax = data._get_axis_name(k)\n        except ValueError:\n            pass\n        else:\n            out[ax] = v\n\n    # All user-provided kwargs have been handled now.\n    # Now we supplement with positional arguments, emitting warnings\n    # when there's ambiguity and raising when there's conflicts\n\n    if len(args) == 0:\n        pass  # It's up to the function to decide if this is valid\n    elif len(args) == 1:\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = args[0]\n    elif len(args) == 2:\n        if \"axis\" in kwargs:\n            # Unambiguously wrong\n            msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n            raise TypeError(msg)\n\n        msg = (\n            \"Interpreting call\\n\\t'.{method_name}(a, b)' as \"\n            \"\\n\\t'.{method_name}(index=a, columns=b)'.\\nUse named \"\n            \"arguments to remove any ambiguity. In the future, using \"\n            \"positional arguments for 'index' or 'columns' will raise \"\n            \"a 'TypeError'.\"\n        )\n        warnings.warn(msg.format(method_name=method_name), FutureWarning, stacklevel=4)\n        out[data._AXIS_NAMES[0]] = args[0]\n        out[data._AXIS_NAMES[1]] = args[1]\n    else:\n        msg = f\"Cannot specify all of '{arg_name}', 'index', 'columns'.\"\n        raise TypeError(msg)\n    return out",
        "begin_line": 218,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#60",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\"\n    Standard evaluation.\n    \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026136957658128593,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#150",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#159",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                f\"evaluating in Python space because the {repr(op_str)} \"\n                \"operator is not supported by numexpr for \"\n                f\"the bool dtype, use {repr(unsupported[op_str])} instead\"\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                f\"operator {repr(op_str)} not implemented for bool dtypes\"\n            )\n    return True",
        "begin_line": 159,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#181",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 181,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00026136957658128593,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#198",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, copy: bool=False, attrs: Optional[Mapping[Optional[Hashable], Any]]=None)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        copy: bool = False,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    ):\n        # copy kwarg is retained for mypy compat, is not used\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_data\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 198,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014771048744460858,
            "pseudo_dstar_susp": 0.001392757660167131,
            "pseudo_tarantula_susp": 0.0014814814814814814,
            "pseudo_op2_susp": 0.001392757660167131,
            "pseudo_barinel_susp": 0.0014814814814814814
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._init_mgr#216",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._init_mgr(cls, mgr, axes=None, dtype=None, copy=False)",
        "snippet": "    def _init_mgr(cls, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(\n                    axe, axis=cls._get_block_manager_axis(a), copy=False\n                )\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr",
        "begin_line": 216,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002554278416347382,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#236",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 236,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#253",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(cls, dtype)",
        "snippet": "    def _validate_dtype(cls, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype",
        "begin_line": 253,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002472799208704253,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#316",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(cls, args, kwargs, require_all: bool=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        cls, args, kwargs, require_all: bool = False, sentinel=None\n    ):\n        \"\"\"\n        Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n        # construct the args\n        args = list(args)\n        for a in cls._AXIS_ORDERS:\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError as err:\n                    if require_all:\n                        raise TypeError(\n                            \"not enough/duplicate arguments specified!\"\n                        ) from err\n\n        axes = {a: kwargs.pop(a, sentinel) for a in cls._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 316,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#347",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis)",
        "snippet": "    def _get_axis_number(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in cls._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls.__name__}\")",
        "begin_line": 347,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#360",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis)",
        "snippet": "    def _get_axis_name(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, str):\n            if axis in cls._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls}\")",
        "begin_line": 360,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#372",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis)",
        "snippet": "    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0003147623544224111,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_block_manager_axis#377",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_block_manager_axis(cls, axis)",
        "snippet": "    def _get_block_manager_axis(cls, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        if cls._AXIS_REVERSED:\n            m = cls._AXIS_LEN - 1\n            return m - axis\n        return axis",
        "begin_line": 377,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#442",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self):\n        return getattr(self, self._info_axis_name)",
        "begin_line": 442,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00024993751562109475,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ndim#466",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._data.ndim",
        "begin_line": 466,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00033003300330033004,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_axis#563",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_axis(self, axis: int, labels: Index)",
        "snippet": "    def _set_axis(self, axis: int, labels: Index) -> None:\n        labels = ensure_index(labels)\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025329280648429586,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.equals#1236",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Test whether two objects contain the same elements.\n\n        This function allows two Series or DataFrames to be compared against\n        each other to see if they have the same shape and elements. NaNs in\n        the same location are considered equal. The column headers do not\n        need to have the same type, but the elements within the columns must\n        be the same dtype.\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n            The other Series or DataFrame to be compared with the first.\n\n        Returns\n        -------\n        bool\n            True if all elements are the same in both objects, False\n            otherwise.\n\n        See Also\n        --------\n        Series.eq : Compare two Series objects of the same length\n            and return a Series where each element is True if the element\n            in each Series is equal, False otherwise.\n        DataFrame.eq : Compare two DataFrame objects of the same shape and\n            return a DataFrame where each element is True if the respective\n            element in each DataFrame is equal, False otherwise.\n        testing.assert_series_equal : Raises an AssertionError if left and\n            right are not equal. Provides an easy interface to ignore\n            inequality in dtypes, indexes and precision among others.\n        testing.assert_frame_equal : Like assert_series_equal, but targets\n            DataFrames.\n        numpy.array_equal : Return True if two arrays have the same shape\n            and elements, False otherwise.\n\n        Notes\n        -----\n        This function requires that the elements have the same dtype as their\n        respective elements in the other Series or DataFrame. However, the\n        column labels do not need to have the same type, as long as they are\n        still considered equal.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({1: [10], 2: [20]})\n        >>> df\n            1   2\n        0  10  20\n\n        DataFrames df and exactly_equal have the same types and values for\n        their elements and column labels, which will return True.\n\n        >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n        >>> exactly_equal\n            1   2\n        0  10  20\n        >>> df.equals(exactly_equal)\n        True\n\n        DataFrames df and different_column_type have the same element\n        types and values, but have different types for the column labels,\n        which will still return True.\n\n        >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n        >>> different_column_type\n           1.0  2.0\n        0   10   20\n        >>> df.equals(different_column_type)\n        True\n\n        DataFrames df and different_data_type have different types for the\n        same values for their elements, and will return False even though\n        their column labels are the same values and types.\n\n        >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n        >>> different_data_type\n              1     2\n        0  10.0  20.0\n        >>> df.equals(different_data_type)\n        False\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._data.equals(other._data)",
        "begin_line": 1236,
        "end_line": 1321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__contains__#1734",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool_t:\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis",
        "begin_line": 1734,
        "end_line": 1736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3190",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher) -> None:\n        \"\"\"\n        Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3190,
        "end_line": 3195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3260",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()",
        "begin_line": 3260,
        "end_line": 3261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025329280648429586,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.xs#3379",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.xs(self, key, axis=0, level=None, drop_level: bool_t=True)",
        "snippet": "    def xs(self, key, axis=0, level=None, drop_level: bool_t = True):\n        \"\"\"\n        Return cross-section from the Series/DataFrame.\n\n        This method takes a `key` argument to select data at a particular\n        level of a MultiIndex.\n\n        Parameters\n        ----------\n        key : label or tuple of label\n            Label contained in the index, or partially in a MultiIndex.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to retrieve cross-section on.\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : bool, default True\n            If False, returns object with same levels as self.\n\n        Returns\n        -------\n        Series or DataFrame\n            Cross-section from the original Series or DataFrame\n            corresponding to the selected index levels.\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n        DataFrame.iloc : Purely integer-location based indexing\n            for selection by position.\n\n        Notes\n        -----\n        `xs` can not be used to set values.\n\n        MultiIndex Slicers is a generic way to get/set values on\n        any level or levels.\n        It is a superset of `xs` functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n        Examples\n        --------\n        >>> d = {'num_legs': [4, 4, 2, 2],\n        ...      'num_wings': [0, 0, 2, 2],\n        ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n        ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n        ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n        >>> df = pd.DataFrame(data=d)\n        >>> df = df.set_index(['class', 'animal', 'locomotion'])\n        >>> df\n                                   num_legs  num_wings\n        class  animal  locomotion\n        mammal cat     walks              4          0\n               dog     walks              4          0\n               bat     flies              2          2\n        bird   penguin walks              2          2\n\n        Get values at specified index\n\n        >>> df.xs('mammal')\n                           num_legs  num_wings\n        animal locomotion\n        cat    walks              4          0\n        dog    walks              4          0\n        bat    flies              2          2\n\n        Get values at several indexes\n\n        >>> df.xs(('mammal', 'dog'))\n                    num_legs  num_wings\n        locomotion\n        walks              4          0\n\n        Get values at specified index and level\n\n        >>> df.xs('cat', level=1)\n                           num_legs  num_wings\n        class  locomotion\n        mammal walks              4          0\n\n        Get values at several indexes and levels\n\n        >>> df.xs(('bird', 'walks'),\n        ...       level=[0, 'locomotion'])\n                 num_legs  num_wings\n        animal\n        penguin         2          2\n\n        Get values at specified column and axis\n\n        >>> df.xs('num_wings', axis=1)\n        class   animal   locomotion\n        mammal  cat      walks         0\n                dog      walks         0\n                bat      flies         2\n        bird    penguin  walks         2\n        Name: num_wings, dtype: int64\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n            # create the tuple of the indexer\n            _indexer = [slice(None)] * self.ndim\n            _indexer[axis] = loc\n            indexer = tuple(_indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            return self[key]\n\n        self._consolidate_inplace()\n\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n        else:\n            loc = self.index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    (inds,) = loc.nonzero()\n                    return self._take_with_is_copy(inds, axis=axis)\n                else:\n                    return self._take_with_is_copy(loc, axis=axis)\n\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n\n        if is_scalar(loc):\n            # In this case loc should be an integer\n            if self.ndim == 1:\n                # if we encounter an array-like and we only have 1 dim\n                # that means that their are list/ndarrays inside the Series!\n                # so just return them (GH 6394)\n                return self._values[loc]\n\n            new_values = self._data.fast_xs(loc)\n\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[loc],\n                dtype=new_values.dtype,\n            )\n\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result",
        "begin_line": 3379,
        "end_line": 3537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3582",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value) -> None:\n        self._data.set(key, value)\n        self._clear_item_cache()",
        "begin_line": 3582,
        "end_line": 3584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_is_copy#3586",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_is_copy(self, ref, copy: bool_t=True)",
        "snippet": "    def _set_is_copy(self, ref, copy: bool_t = True) -> None:\n        if not copy:\n            self._is_copy = None\n        else:\n            assert ref is not None\n            self._is_copy = weakref.ref(ref)",
        "begin_line": 3586,
        "end_line": 3591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3613",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3613,
        "end_line": 3687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4191",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self: FrameOrSeries, *args, **kwargs)",
        "snippet": "    def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n        ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...                   index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...              'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self)",
        "begin_line": 4191,
        "end_line": 4436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_axes#4438",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(\n        self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy\n    ) -> FrameOrSeries:\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                copy=copy,\n                allow_dups=False,\n            )\n\n        return obj",
        "begin_line": 4438,
        "end_line": 4461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._needs_reindex_multi#4463",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (\n            (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n            and method is None\n            and level is None\n            and not self._is_mixed_type\n        )",
        "begin_line": 4463,
        "end_line": 4470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_with_indexers#4475",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
        "snippet": "    def _reindex_with_indexers(\n        self: FrameOrSeries,\n        reindexers,\n        fill_value=None,\n        copy: bool_t = False,\n        allow_dups: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4475,
        "end_line": 4509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5134",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self: FrameOrSeries, other, method=None, **kwargs)",
        "snippet": "    def __finalize__(\n        self: FrameOrSeries, other, method=None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5134,
        "end_line": 5155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5157",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name: str)",
        "snippet": "    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5157,
        "end_line": 5174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0002390628735357399,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5176",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name: str, value)",
        "snippet": "    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5176,
        "end_line": 5215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.000355998576005696,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5232",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"\n        Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5232,
        "end_line": 5241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5243",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5243,
        "end_line": 5249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5246",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._data = self._data.consolidate()",
        "begin_line": 5246,
        "end_line": 5247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00040551500405515005,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_mixed_type#5274",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self) -> bool_t:\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)",
        "begin_line": 5274,
        "end_line": 5276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.values#5309",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_numpy : Recommended alternative to this method.\n        DataFrame.index : Retrieve the index labels.\n        DataFrame.columns : Retrieving the column names.\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]])\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)",
        "begin_line": 5309,
        "end_line": 5383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._values#5386",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._values(self)",
        "snippet": "    def _values(self) -> np.ndarray:\n        \"\"\"internal implementation\"\"\"\n        return self.values",
        "begin_line": 5386,
        "end_line": 5388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.dtypes#5391",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.dtypes(self)",
        "snippet": "    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'float': [1.0],\n        ...                    'int': [1],\n        ...                    'datetime': [pd.Timestamp('20180310')],\n        ...                    'string': ['foo']})\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[ns]\n        string              object\n        dtype: object\n        \"\"\"\n        from pandas import Series\n\n        return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
        "begin_line": 5391,
        "end_line": 5420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00025680534155110427,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._to_dict_of_blocks#5422",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._to_dict_of_blocks(self, copy: bool_t=True)",
        "snippet": "    def _to_dict_of_blocks(self, copy: bool_t = True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY\n        \"\"\"\n        return {\n            k: self._constructor(v).__finalize__(self)\n            for k, v, in self._data.to_dict(copy=copy).items()\n        }",
        "begin_line": 5422,
        "end_line": 5432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5577",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self: FrameOrSeries, deep: bool_t=True)",
        "snippet": "    def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)",
        "begin_line": 5577,
        "end_line": 5683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__#70",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__(self, dtype: Dtype=np.float64, fill_value: Any=None)",
        "snippet": "    def __init__(self, dtype: Dtype = np.float64, fill_value: Any = None):\n\n        if isinstance(dtype, type(self)):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        dtype = pandas_dtype(dtype)\n        if is_string_dtype(dtype):\n            dtype = np.dtype(\"object\")\n\n        if fill_value is None:\n            fill_value = na_value_for_dtype(dtype)\n\n        if not is_scalar(fill_value):\n            raise ValueError(f\"fill_value must be a scalar. Got {fill_value} instead\")\n        self._dtype = dtype\n        self._fill_value = fill_value",
        "begin_line": 70,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__eq__#94",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        # We have to override __eq__ to handle NA values in _metadata.\n        # The base class does simple == checks, which fail for NA.\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n\n        if isinstance(other, type(self)):\n            subtype = self.subtype == other.subtype\n            if self._is_na_fill_value:\n                # this case is complicated by two things:\n                # SparseDtype(float, float(nan)) == SparseDtype(float, np.nan)\n                # SparseDtype(float, np.nan)     != SparseDtype(float, pd.NaT)\n                # i.e. we want to treat any floating-point NaN as equal, but\n                # not a floating-point NaN and a datetime NaT.\n                fill_value = (\n                    other._is_na_fill_value\n                    and isinstance(self.fill_value, type(other.fill_value))\n                    or isinstance(other.fill_value, type(self.fill_value))\n                )\n            else:\n                fill_value = self.fill_value == other.fill_value\n\n            return subtype and fill_value\n        return False",
        "begin_line": 94,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.fill_value#123",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.fill_value(self)",
        "snippet": "    def fill_value(self):\n        \"\"\"\n        The fill value of the array.\n\n        Converting the SparseArray to a dense ndarray will fill the\n        array with this value.\n\n        .. warning::\n\n           It's possible to end up with a SparseArray that has ``fill_value``\n           values in ``sp_values``. This can occur, for example, when setting\n           ``SparseArray.fill_value`` directly.\n        \"\"\"\n        return self._fill_value",
        "begin_line": 123,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value#139",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value(self)",
        "snippet": "    def _is_na_fill_value(self):\n        return isna(self.fill_value)",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0004336513443191674,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.type#158",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.type(self)",
        "snippet": "    def type(self):\n        return self.subtype.type",
        "begin_line": 158,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype#162",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        return self._dtype",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.00038491147036181676,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.name#166",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.name(self)",
        "snippet": "    def name(self):\n        return f\"Sparse[{self.subtype.name}, {self.fill_value}]\"",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035323207347227127,
            "pseudo_dstar_susp": 0.00035323207347227127,
            "pseudo_tarantula_susp": 0.00035323207347227127,
            "pseudo_op2_susp": 0.0005998800239952009,
            "pseudo_barinel_susp": 0.00035323207347227127
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#186",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> \"SparseDtype\":\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        msg = f\"Cannot construct a 'SparseDtype' from '{string}'\"\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError as err:\n                raise TypeError(msg) from err\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    f\"Cannot construct a 'SparseDtype' from '{string}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg)\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 186,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022123893805309734,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0022172949002217295,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0022172949002217295
        }
    },
    {
        "name": "pandas._config.config._get_single_key#95",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat: str, silent: bool)",
        "snippet": "def _get_single_key(pat: str, silent: bool) -> str:\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 95,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014064697609001407,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.001183431952662722,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.001183431952662722
        }
    },
    {
        "name": "pandas._config.config._get_option#113",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat: str, silent: bool=False)",
        "snippet": "def _get_option(pat: str, silent: bool = False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas._config.config._set_option#121",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs) -> None:\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 121,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008771929824561404,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0008771929824561404,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0008771929824561404
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#241",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 241,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014064697609001407,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.001183431952662722,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.001183431952662722
        }
    },
    {
        "name": "pandas._config.config._select_options#548",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat: str)",
        "snippet": "def _select_options(pat: str) -> List[str]:\n    \"\"\"\n    returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 548,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.0038910505836575876,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.0038910505836575876
        }
    },
    {
        "name": "pandas._config.config._get_root#566",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key: str)",
        "snippet": "def _get_root(key: str) -> Tuple[Dict[str, Any], str]:\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 566,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014064697609001407,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.001183431952662722,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.001183431952662722
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#580",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key: str)",
        "snippet": "def _get_deprecated_option(key: str):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 580,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014064697609001407,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.001183431952662722,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.001183431952662722
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#596",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key: str)",
        "snippet": "def _get_registered_option(key: str):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 596,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008771929824561404,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0008771929824561404,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0008771929824561404
        }
    },
    {
        "name": "pandas._config.config._translate_key#607",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key: str)",
        "snippet": "def _translate_key(key: str) -> str:\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 607,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014064697609001407,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.001183431952662722,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.001183431952662722
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#619",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key: str)",
        "snippet": "def _warn_if_deprecated(key: str) -> bool:\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 619,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014064697609001407,
            "pseudo_dstar_susp": 0.03125,
            "pseudo_tarantula_susp": 0.001183431952662722,
            "pseudo_op2_susp": 0.03125,
            "pseudo_barinel_susp": 0.001183431952662722
        }
    },
    {
        "name": "pandas._config.config.inner#816",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x) -> None:\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 816,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008771929824561404,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0008771929824561404,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0008771929824561404
        }
    }
]