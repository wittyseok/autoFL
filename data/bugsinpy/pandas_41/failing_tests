coverage run -m pytest pandas/tests/indexing/test_iloc.py::TestiLoc2::test_iloc_setitem_categorical_updates_inplace
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_iloc.py F                                     [100%]

=================================== FAILURES ===================================
___________ TestiLoc2.test_iloc_setitem_categorical_updates_inplace ____________

self = <pandas.tests.indexing.test_iloc.TestiLoc2 object at 0x7f6c7abb7250>

    def test_iloc_setitem_categorical_updates_inplace(self):
        # Mixed dtype ensures we go through take_split_path in setitem_with_indexer
        cat = pd.Categorical(["A", "B", "C"])
        df = pd.DataFrame({1: cat, 2: [1, 2, 3]})
    
        # This should modify our original values in-place
        df.iloc[:, 0] = cat[::-1]
    
        expected = pd.Categorical(["C", "B", "A"])
>       tm.assert_categorical_equal(cat, expected)

pandas/tests/indexing/test_iloc.py:706: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/_testing.py:823: in assert_categorical_equal
    assert_numpy_array_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 1, 2], dtype=int8), right = array([2, 1, 0], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
    
            diff = 0
            for l, r in zip(left, right):
                # count up differences
                if not array_equivalent(l, r, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right)
E           AssertionError: Categorical.codes are different
E           
E           Categorical.codes values are different (66.66667 %)
E           [left]:  [0, 1, 2]
E           [right]: [2, 1, 0]

pandas/_testing.py:980: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_iloc.py::TestiLoc2::test_iloc_setitem_categorical_updates_inplace
============================== 1 failed in 0.36s ===============================

coverage run -m pytest pandas/tests/internals/test_internals.py::TestShouldStore::test_should_store_categorical
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/internals/test_internals.py F                               [100%]

=================================== FAILURES ===================================
________________ TestShouldStore.test_should_store_categorical _________________

self = <pandas.tests.internals.test_internals.TestShouldStore object at 0x7f74281dddf0>

    def test_should_store_categorical(self):
        cat = pd.Categorical(["A", "B", "C"])
        df = pd.DataFrame(cat)
        blk = df._data.blocks[0]
    
        # matching dtype
        assert blk.should_store(cat)
        assert blk.should_store(cat[:-1])
    
        # different dtype
>       assert not blk.should_store(cat.as_ordered())
E       assert not True
E        +  where True = <bound method ExtensionBlock.should_store of CategoricalBlock: slice(0, 1, 1), 1 x 3, dtype: category>([A, B, C]\nCategories (3, object): [A < B < C])
E        +    where <bound method ExtensionBlock.should_store of CategoricalBlock: slice(0, 1, 1), 1 x 3, dtype: category> = CategoricalBlock: slice(0, 1, 1), 1 x 3, dtype: category.should_store
E        +    and   [A, B, C]\nCategories (3, object): [A < B < C] = <bound method Categorical.as_ordered of [A, B, C]\nCategories (3, object): [A, B, C]>()
E        +      where <bound method Categorical.as_ordered of [A, B, C]\nCategories (3, object): [A, B, C]> = [A, B, C]\nCategories (3, object): [A, B, C].as_ordered

pandas/tests/internals/test_internals.py:1203: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/internals/test_internals.py::TestShouldStore::test_should_store_categorical
============================== 1 failed in 0.23s ===============================
