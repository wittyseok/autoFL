[
    {
        "name": "tests.conftest.no_memoize#18",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#24",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#23",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#34",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#39",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#44",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#51",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.os_environ#66",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.os_environ(monkeypatch)",
        "snippet": "def os_environ(monkeypatch):\n    env = {'PATH': os.environ['PATH']}\n    monkeypatch.setattr('os.environ', env)\n    return env",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.builtins_open#5",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.builtins_open(mocker)",
        "snippet": "def builtins_open(mocker):\n    return mocker.patch('six.moves.builtins.open')",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.isfile#10",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.isfile(mocker)",
        "snippet": "def isfile(mocker):\n    return mocker.patch('os.path.isfile', return_value=True)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.aux#17",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.aux(lines)",
        "snippet": "    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.history_lines#16",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.history_lines(mocker)",
        "snippet": "def history_lines(mocker):\n    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines\n\n    return aux",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.config_exists#26",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.config_exists(mocker)",
        "snippet": "def config_exists(mocker):\n    path_mock = mocker.patch('thefuck.shells.generic.Path')\n    return path_mock.return_value \\\n        .expanduser.return_value \\\n        .exists",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.shell#10",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.shell(self)",
        "snippet": "    def shell(self):\n        return Fish()",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.Popen#14",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.Popen(self, mocker)",
        "snippet": "    def Popen(self, mocker):\n        mock = mocker.patch('thefuck.shells.fish.Popen')\n        mock.return_value.stdout.read.side_effect = [(\n            b'cd\\nfish_config\\nfuck\\nfunced\\nfuncsave\\ngrep\\nhistory\\nll\\nls\\n'\n            b'man\\nmath\\npopd\\npushd\\nruby'),\n            (b'alias fish_key_reader /usr/bin/fish_key_reader\\nalias g git\\n'\n             b'alias alias_with_equal_sign=echo\\ninvalid_alias'), b'func1\\nfunc2', b'']\n        return mock",
        "begin_line": 14,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_get_overridden_aliases#29",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_get_overridden_aliases(self, shell, os_environ, key, value)",
        "snippet": "    def test_get_overridden_aliases(self, shell, os_environ, key, value):\n        os_environ[key] = value\n        assert shell._get_overridden_aliases() == {'cd', 'cut', 'git', 'grep',\n                                                   'ls', 'man', 'open', 'sed'}",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_from_shell#49",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_from_shell(self, before, after, shell)",
        "snippet": "    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_to_shell#52",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_to_shell(self, shell)",
        "snippet": "    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_and_#55",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_and_(self, shell)",
        "snippet": "    def test_and_(self, shell):\n        assert shell.and_('foo', 'bar') == 'foo; and bar'",
        "begin_line": 55,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_or_#58",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_or_(self, shell)",
        "snippet": "    def test_or_(self, shell):\n        assert shell.or_('foo', 'bar') == 'foo; or bar'",
        "begin_line": 58,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_get_aliases#61",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_get_aliases(self, shell)",
        "snippet": "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n        assert shell.get_aliases() == {'func1': 'func1', 'func2': 'func2'}",
        "begin_line": 61,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_app_alias#77",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_app_alias(self, shell)",
        "snippet": "    def test_app_alias(self, shell):\n        assert 'function fuck' in shell.app_alias('fuck')\n        assert 'function FUCK' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'TF_SHELL=fish' in shell.app_alias('fuck')\n        assert 'TF_ALIAS=fuck PYTHONIOENCODING' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING=utf-8 thefuck' in shell.app_alias('fuck')",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_app_alias_alter_history#85",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_app_alias_alter_history(self, settings, shell)",
        "snippet": "    def test_app_alias_alter_history(self, settings, shell):\n        settings.alter_history = True\n        assert 'builtin history delete' in shell.app_alias('FUCK')\n        assert 'builtin history merge' in shell.app_alias('FUCK')\n        settings.alter_history = False\n        assert 'builtin history delete' not in shell.app_alias('FUCK')\n        assert 'builtin history merge' not in shell.app_alias('FUCK')",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_get_history#93",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_get_history(self, history_lines, shell)",
        "snippet": "    def test_get_history(self, history_lines, shell):\n        history_lines(['- cmd: ls', '  when: 1432613911',\n                       '- cmd: rm', '  when: 1432613916'])\n        assert list(shell.get_history()) == ['ls', 'rm']",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_put_to_history#101",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_put_to_history(self, entry, entry_utf8, builtins_open, mocker, shell)",
        "snippet": "    def test_put_to_history(self, entry, entry_utf8, builtins_open, mocker, shell):\n        mocker.patch('thefuck.shells.fish.time', return_value=1430707243.3517463)\n        shell.put_to_history(entry)\n        builtins_open.return_value.__enter__.return_value. \\\n            write.assert_called_once_with(entry_utf8)",
        "begin_line": 101,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_how_to_configure#107",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_how_to_configure(self, shell, config_exists)",
        "snippet": "    def test_how_to_configure(self, shell, config_exists):\n        config_exists.return_value = True\n        assert shell.how_to_configure().can_configure_automatically",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_how_to_configure_when_config_not_found#111",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_how_to_configure_when_config_not_found(self, shell, config_exists)",
        "snippet": "    def test_how_to_configure_when_config_not_found(self, shell,\n                                                    config_exists):\n        config_exists.return_value = False\n        assert not shell.how_to_configure().can_configure_automatically",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_fish.TestFish.test_info#116",
        "src_path": "tests/shells/test_fish.py",
        "class_name": "tests.shells.test_fish.TestFish",
        "signature": "tests.shells.test_fish.TestFish.test_info(self, shell, Popen)",
        "snippet": "    def test_info(self, shell, Popen):\n        Popen.return_value.stdout.read.side_effect = [b'fish, version 3.5.9\\n']\n        assert shell.info() == 'Fish Shell 3.5.9'\n        assert Popen.call_args[0][0] == ['fish', '--version']",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 6,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#18",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    }
]