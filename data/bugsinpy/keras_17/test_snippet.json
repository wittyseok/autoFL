[
    {
        "name": "tests.keras.metrics_test.test_metrics#33",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_metrics()",
        "snippet": "def test_metrics():\n    y_a = K.variable(np.random.random((6, 7)))\n    y_b = K.variable(np.random.random((6, 7)))\n    for metric in all_metrics:\n        output = metric(y_a, y_b)\n        print(metric.__name__)\n        assert K.eval(output).shape == (6,)",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_sparse_metrics#43",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_sparse_metrics()",
        "snippet": "def test_sparse_metrics():\n    for metric in all_sparse_metrics:\n        y_a = K.variable(np.random.randint(0, 7, (6,)), dtype=K.floatx())\n        y_b = K.variable(np.random.random((6, 7)), dtype=K.floatx())\n        assert K.eval(metric(y_a, y_b)).shape == (6,)",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_sparse_categorical_accuracy_correctness#51",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_sparse_categorical_accuracy_correctness()",
        "snippet": "def test_sparse_categorical_accuracy_correctness():\n    y_a = K.variable(np.random.randint(0, 7, (6,)), dtype=K.floatx())\n    y_b = K.variable(np.random.random((6, 7)), dtype=K.floatx())\n    # use one_hot embedding to convert sparse labels to equivalent dense labels\n    y_a_dense_labels = K.cast(K.one_hot(K.cast(y_a, dtype='int32'), num_classes=7),\n                              dtype=K.floatx())\n    sparse_categorical_acc = metrics.sparse_categorical_accuracy(y_a, y_b)\n    categorical_acc = metrics.categorical_accuracy(y_a_dense_labels, y_b)\n    assert np.allclose(K.eval(sparse_categorical_acc), K.eval(categorical_acc))",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_serialize#62",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_serialize()",
        "snippet": "def test_serialize():\n    '''This is a mock 'round trip' of serialize and deserialize.\n    '''\n\n    class MockMetric:\n        def __init__(self):\n            self.__name__ = \"mock_metric\"\n\n    mock = MockMetric()\n    found = metrics.serialize(mock)\n    assert found == \"mock_metric\"\n\n    found = metrics.deserialize('mock_metric',\n                                custom_objects={'mock_metric': True})\n    assert found is True",
        "begin_line": 62,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.MockMetric.test_serialize#62",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test.MockMetric",
        "signature": "tests.keras.metrics_test.MockMetric.test_serialize()",
        "snippet": "def test_serialize():\n    '''This is a mock 'round trip' of serialize and deserialize.\n    '''\n\n    class MockMetric:\n        def __init__(self):\n            self.__name__ = \"mock_metric\"\n\n    mock = MockMetric()\n    found = metrics.serialize(mock)\n    assert found == \"mock_metric\"\n\n    found = metrics.deserialize('mock_metric',\n                                custom_objects={'mock_metric': True})\n    assert found is True",
        "begin_line": 62,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.MockMetric.__init__#67",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test.MockMetric",
        "signature": "tests.keras.metrics_test.MockMetric.__init__(self)",
        "snippet": "        def __init__(self):\n            self.__name__ = \"mock_metric\"",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_invalid_get#79",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_invalid_get()",
        "snippet": "def test_invalid_get():\n\n    with pytest.raises(ValueError):\n        metrics.get(5)",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_top_k_categorical_accuracy#88",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_top_k_categorical_accuracy()",
        "snippet": "def test_top_k_categorical_accuracy():\n    y_pred = K.variable(np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]))\n    y_true = K.variable(np.array([[0, 1, 0], [1, 0, 0]]))\n    success_result = K.eval(metrics.top_k_categorical_accuracy(y_true, y_pred,\n                                                               k=3))\n    assert success_result == 1\n    partial_result = K.eval(metrics.top_k_categorical_accuracy(y_true, y_pred,\n                                                               k=2))\n    assert partial_result == 0.5\n    failure_result = K.eval(metrics.top_k_categorical_accuracy(y_true, y_pred,\n                                                               k=1))\n    assert failure_result == 0",
        "begin_line": 88,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_sparse_top_k_categorical_accuracy#105",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_sparse_top_k_categorical_accuracy()",
        "snippet": "def test_sparse_top_k_categorical_accuracy():\n    y_pred = K.variable(np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]))\n    y_true = K.variable(np.array([[1], [0]]))\n    success_result = K.eval(\n        metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=3))\n\n    assert success_result == 1\n    partial_result = K.eval(\n        metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=2))\n\n    assert partial_result == 0.5\n    failure_result = K.eval(\n        metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=1))\n\n    assert failure_result == 0",
        "begin_line": 105,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.test_stateful_metrics#124",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.test_stateful_metrics(metrics_mode)",
        "snippet": "def test_stateful_metrics(metrics_mode):\n    np.random.seed(1334)\n\n    class BinaryTruePositives(keras.layers.Layer):\n        \"\"\"Stateful Metric to count the total true positives over all batches.\n\n        Assumes predictions and targets of shape `(samples, 1)`.\n\n        # Arguments\n            name: String, name for the metric.\n        \"\"\"\n\n        def __init__(self, name='true_positives', **kwargs):\n            super(BinaryTruePositives, self).__init__(name=name, **kwargs)\n            self.stateful = True\n            self.true_positives = K.variable(value=0, dtype='int32')\n\n        def reset_states(self):\n            K.set_value(self.true_positives, 0)\n\n        def __call__(self, y_true, y_pred):\n            \"\"\"Computes the number of true positives in a batch.\n\n            # Arguments\n                y_true: Tensor, batch_wise labels\n                y_pred: Tensor, batch_wise predictions\n\n            # Returns\n                The total number of true positives seen this epoch at the\n                    completion of the batch.\n            \"\"\"\n            y_true = K.cast(y_true, 'int32')\n            y_pred = K.cast(K.round(y_pred), 'int32')\n            correct_preds = K.cast(K.equal(y_pred, y_true), 'int32')\n            true_pos = K.cast(K.sum(correct_preds * y_true), 'int32')\n            current_true_pos = self.true_positives * 1\n            self.add_update(K.update_add(self.true_positives,\n                                         true_pos),\n                            inputs=[y_true, y_pred])\n            return current_true_pos + true_pos\n\n    metric_fn = BinaryTruePositives()\n    config = metrics.serialize(metric_fn)\n    metric_fn = metrics.deserialize(\n        config, custom_objects={'BinaryTruePositives': BinaryTruePositives})\n\n    # Test on simple model\n    inputs = keras.Input(shape=(2,))\n    outputs = keras.layers.Dense(1, activation='sigmoid', name='out')(inputs)\n    model = keras.Model(inputs, outputs)\n\n    if metrics_mode == 'list':\n        model.compile(optimizer='sgd',\n                      loss='binary_crossentropy',\n                      metrics=['acc', metric_fn])\n    elif metrics_mode == 'dict':\n        model.compile(optimizer='sgd',\n                      loss='binary_crossentropy',\n                      metrics={'out': ['acc', metric_fn]})\n\n    samples = 1000\n    x = np.random.random((samples, 2))\n    y = np.random.randint(2, size=(samples, 1))\n\n    val_samples = 10\n    val_x = np.random.random((val_samples, 2))\n    val_y = np.random.randint(2, size=(val_samples, 1))\n\n    # Test fit and evaluate\n    history = model.fit(x, y, validation_data=(val_x, val_y),\n                        epochs=1, batch_size=10)\n    outs = model.evaluate(x, y, batch_size=10)\n    preds = model.predict(x)\n\n    def ref_true_pos(y_true, y_pred):\n        return np.sum(np.logical_and(y_pred > 0.5, y_true == 1))\n\n    # Test correctness (e.g. updates should have been run)\n    np.testing.assert_allclose(outs[2], ref_true_pos(y, preds), atol=1e-5)\n\n    # Test correctness of the validation metric computation\n    val_preds = model.predict(val_x)\n    val_outs = model.evaluate(val_x, val_y, batch_size=10)\n    assert_allclose(val_outs[2], ref_true_pos(val_y, val_preds), atol=1e-5)\n    assert_allclose(val_outs[2], history.history['val_true_positives'][-1],\n                    atol=1e-5)\n\n    # Test with generators\n    gen = [(np.array([x0]), np.array([y0])) for x0, y0 in zip(x, y)]\n    val_gen = [(np.array([x0]), np.array([y0])) for x0, y0 in zip(val_x, val_y)]\n    history = model.fit_generator(iter(gen), epochs=1, steps_per_epoch=samples,\n                                  validation_data=iter(val_gen),\n                                  validation_steps=val_samples)\n    outs = model.evaluate_generator(iter(gen), steps=samples, workers=0)\n    preds = model.predict_generator(iter(gen), steps=samples, workers=0)\n\n    # Test correctness of the metric re ref_true_pos()\n    np.testing.assert_allclose(outs[2], ref_true_pos(y, preds),\n                               atol=1e-5)\n\n    # Test correctness of the validation metric computation\n    val_preds = model.predict_generator(iter(val_gen), steps=val_samples, workers=0)\n    val_outs = model.evaluate_generator(iter(val_gen), steps=val_samples, workers=0)\n    np.testing.assert_allclose(val_outs[2], ref_true_pos(val_y, val_preds),\n                               atol=1e-5)\n    np.testing.assert_allclose(val_outs[2],\n                               history.history['val_true_positives'][-1],\n                               atol=1e-5)",
        "begin_line": 124,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.BinaryTruePositives.test_stateful_metrics#124",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test.BinaryTruePositives",
        "signature": "tests.keras.metrics_test.BinaryTruePositives.test_stateful_metrics(metrics_mode)",
        "snippet": "def test_stateful_metrics(metrics_mode):\n    np.random.seed(1334)\n\n    class BinaryTruePositives(keras.layers.Layer):\n        \"\"\"Stateful Metric to count the total true positives over all batches.\n\n        Assumes predictions and targets of shape `(samples, 1)`.\n\n        # Arguments\n            name: String, name for the metric.\n        \"\"\"\n\n        def __init__(self, name='true_positives', **kwargs):\n            super(BinaryTruePositives, self).__init__(name=name, **kwargs)\n            self.stateful = True\n            self.true_positives = K.variable(value=0, dtype='int32')\n\n        def reset_states(self):\n            K.set_value(self.true_positives, 0)\n\n        def __call__(self, y_true, y_pred):\n            \"\"\"Computes the number of true positives in a batch.\n\n            # Arguments\n                y_true: Tensor, batch_wise labels\n                y_pred: Tensor, batch_wise predictions\n\n            # Returns\n                The total number of true positives seen this epoch at the\n                    completion of the batch.\n            \"\"\"\n            y_true = K.cast(y_true, 'int32')\n            y_pred = K.cast(K.round(y_pred), 'int32')\n            correct_preds = K.cast(K.equal(y_pred, y_true), 'int32')\n            true_pos = K.cast(K.sum(correct_preds * y_true), 'int32')\n            current_true_pos = self.true_positives * 1\n            self.add_update(K.update_add(self.true_positives,\n                                         true_pos),\n                            inputs=[y_true, y_pred])\n            return current_true_pos + true_pos\n\n    metric_fn = BinaryTruePositives()\n    config = metrics.serialize(metric_fn)\n    metric_fn = metrics.deserialize(\n        config, custom_objects={'BinaryTruePositives': BinaryTruePositives})\n\n    # Test on simple model\n    inputs = keras.Input(shape=(2,))\n    outputs = keras.layers.Dense(1, activation='sigmoid', name='out')(inputs)\n    model = keras.Model(inputs, outputs)\n\n    if metrics_mode == 'list':\n        model.compile(optimizer='sgd',\n                      loss='binary_crossentropy',\n                      metrics=['acc', metric_fn])\n    elif metrics_mode == 'dict':\n        model.compile(optimizer='sgd',\n                      loss='binary_crossentropy',\n                      metrics={'out': ['acc', metric_fn]})\n\n    samples = 1000\n    x = np.random.random((samples, 2))\n    y = np.random.randint(2, size=(samples, 1))\n\n    val_samples = 10\n    val_x = np.random.random((val_samples, 2))\n    val_y = np.random.randint(2, size=(val_samples, 1))\n\n    # Test fit and evaluate\n    history = model.fit(x, y, validation_data=(val_x, val_y),\n                        epochs=1, batch_size=10)\n    outs = model.evaluate(x, y, batch_size=10)\n    preds = model.predict(x)\n\n    def ref_true_pos(y_true, y_pred):\n        return np.sum(np.logical_and(y_pred > 0.5, y_true == 1))\n\n    # Test correctness (e.g. updates should have been run)\n    np.testing.assert_allclose(outs[2], ref_true_pos(y, preds), atol=1e-5)\n\n    # Test correctness of the validation metric computation\n    val_preds = model.predict(val_x)\n    val_outs = model.evaluate(val_x, val_y, batch_size=10)\n    assert_allclose(val_outs[2], ref_true_pos(val_y, val_preds), atol=1e-5)\n    assert_allclose(val_outs[2], history.history['val_true_positives'][-1],\n                    atol=1e-5)\n\n    # Test with generators\n    gen = [(np.array([x0]), np.array([y0])) for x0, y0 in zip(x, y)]\n    val_gen = [(np.array([x0]), np.array([y0])) for x0, y0 in zip(val_x, val_y)]\n    history = model.fit_generator(iter(gen), epochs=1, steps_per_epoch=samples,\n                                  validation_data=iter(val_gen),\n                                  validation_steps=val_samples)\n    outs = model.evaluate_generator(iter(gen), steps=samples, workers=0)\n    preds = model.predict_generator(iter(gen), steps=samples, workers=0)\n\n    # Test correctness of the metric re ref_true_pos()\n    np.testing.assert_allclose(outs[2], ref_true_pos(y, preds),\n                               atol=1e-5)\n\n    # Test correctness of the validation metric computation\n    val_preds = model.predict_generator(iter(val_gen), steps=val_samples, workers=0)\n    val_outs = model.evaluate_generator(iter(val_gen), steps=val_samples, workers=0)\n    np.testing.assert_allclose(val_outs[2], ref_true_pos(val_y, val_preds),\n                               atol=1e-5)\n    np.testing.assert_allclose(val_outs[2],\n                               history.history['val_true_positives'][-1],\n                               atol=1e-5)",
        "begin_line": 124,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.BinaryTruePositives.__init__#136",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test.BinaryTruePositives",
        "signature": "tests.keras.metrics_test.BinaryTruePositives.__init__(self, name='true_positives', **kwargs)",
        "snippet": "        def __init__(self, name='true_positives', **kwargs):\n            super(BinaryTruePositives, self).__init__(name=name, **kwargs)\n            self.stateful = True\n            self.true_positives = K.variable(value=0, dtype='int32')",
        "begin_line": 136,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.BinaryTruePositives.reset_states#141",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test.BinaryTruePositives",
        "signature": "tests.keras.metrics_test.BinaryTruePositives.reset_states(self)",
        "snippet": "        def reset_states(self):\n            K.set_value(self.true_positives, 0)",
        "begin_line": 141,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.BinaryTruePositives.__call__#144",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test.BinaryTruePositives",
        "signature": "tests.keras.metrics_test.BinaryTruePositives.__call__(self, y_true, y_pred)",
        "snippet": "        def __call__(self, y_true, y_pred):\n            \"\"\"Computes the number of true positives in a batch.\n\n            # Arguments\n                y_true: Tensor, batch_wise labels\n                y_pred: Tensor, batch_wise predictions\n\n            # Returns\n                The total number of true positives seen this epoch at the\n                    completion of the batch.\n            \"\"\"\n            y_true = K.cast(y_true, 'int32')\n            y_pred = K.cast(K.round(y_pred), 'int32')\n            correct_preds = K.cast(K.equal(y_pred, y_true), 'int32')\n            true_pos = K.cast(K.sum(correct_preds * y_true), 'int32')\n            current_true_pos = self.true_positives * 1\n            self.add_update(K.update_add(self.true_positives,\n                                         true_pos),\n                            inputs=[y_true, y_pred])\n            return current_true_pos + true_pos",
        "begin_line": 144,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.metrics_test.ref_true_pos#198",
        "src_path": "tests/keras/metrics_test.py",
        "class_name": "tests.keras.metrics_test",
        "signature": "tests.keras.metrics_test.ref_true_pos(y_true, y_pred)",
        "snippet": "    def ref_true_pos(y_true, y_pred):\n        return np.sum(np.logical_and(y_pred > 0.5, y_true == 1))",
        "begin_line": 198,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.wrapper#13",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.wrapper(*args, **kwargs)",
        "snippet": "    def wrapper(*args, **kwargs):\n        x = args[0]\n        w = args[1]\n        if x.ndim == 3:\n            w = np.flipud(w)\n            w = np.transpose(w, (1, 2, 0))\n            if kwargs['data_format'] == 'channels_last':\n                x = np.transpose(x, (0, 2, 1))\n        elif x.ndim == 4:\n            w = np.fliplr(np.flipud(w))\n            w = np.transpose(w, (2, 3, 0, 1))\n            if kwargs['data_format'] == 'channels_last':\n                x = np.transpose(x, (0, 3, 1, 2))\n        else:\n            w = np.flip(np.fliplr(np.flipud(w)), axis=2)\n            w = np.transpose(w, (3, 4, 0, 1, 2))\n            if kwargs['data_format'] == 'channels_last':\n                x = np.transpose(x, (0, 4, 1, 2, 3))\n\n        y = func(x, w, **kwargs)\n\n        if kwargs['data_format'] == 'channels_last':\n            if y.ndim == 3:\n                y = np.transpose(y, (0, 2, 1))\n            elif y.ndim == 4:\n                y = np.transpose(y, (0, 2, 3, 1))\n            else:\n                y = np.transpose(y, (0, 2, 3, 4, 1))\n\n        return y",
        "begin_line": 13,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.conv#48",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.conv(x, w, padding, data_format)",
        "snippet": "def conv(x, w, padding, data_format):\n    y = []\n    for i in range(x.shape[0]):\n        _y = []\n        for j in range(w.shape[1]):\n            __y = []\n            for k in range(w.shape[0]):\n                __y.append(signal.convolve(x[i, k], w[k, j], mode=padding))\n            _y.append(np.sum(np.stack(__y, axis=-1), axis=-1))\n        y.append(_y)\n    y = np.array(y)\n    return y",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.depthwise_conv#63",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.depthwise_conv(x, w, padding, data_format)",
        "snippet": "def depthwise_conv(x, w, padding, data_format):\n    y = []\n    for i in range(x.shape[0]):\n        _y = []\n        for j in range(w.shape[0]):\n            __y = []\n            for k in range(w.shape[1]):\n                __y.append(signal.convolve(x[i, j], w[j, k], mode=padding))\n            _y.append(np.stack(__y, axis=0))\n        y.append(np.concatenate(_y, axis=0))\n    y = np.array(y)\n    return y",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.separable_conv#77",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.separable_conv(x, w1, w2, padding, data_format)",
        "snippet": "def separable_conv(x, w1, w2, padding, data_format):\n    x2 = depthwise_conv(x, w1, padding=padding, data_format=data_format)\n    return conv(x2, w2, padding=padding, data_format=data_format)",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.pool#90",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.pool(x, pool_size, strides, padding, data_format, pool_mode)",
        "snippet": "def pool(x, pool_size, strides, padding, data_format, pool_mode):\n    if data_format == 'channels_last':\n        if x.ndim == 3:\n            x = np.transpose(x, (0, 2, 1))\n        elif x.ndim == 4:\n            x = np.transpose(x, (0, 3, 1, 2))\n        else:\n            x = np.transpose(x, (0, 4, 1, 2, 3))\n\n    if padding == 'same':\n        pad = [(0, 0), (0, 0)] + [(s // 2, s // 2) for s in pool_size]\n        x = np.pad(x, pad, 'constant', constant_values=-np.inf)\n\n    # indexing trick\n    x = np.pad(x, [(0, 0), (0, 0)] + [(0, 1) for _ in pool_size],\n               'constant', constant_values=0)\n\n    if x.ndim == 3:\n        y = [x[:, :, k:k1:strides[0]]\n             for (k, k1) in zip(range(pool_size[0]), range(-pool_size[0], 0))]\n    elif x.ndim == 4:\n        y = []\n        for (k, k1) in zip(range(pool_size[0]), range(-pool_size[0], 0)):\n            for (l, l1) in zip(range(pool_size[1]), range(-pool_size[1], 0)):\n                y.append(x[:, :, k:k1:strides[0], l:l1:strides[1]])\n    else:\n        y = []\n        for (k, k1) in zip(range(pool_size[0]), range(-pool_size[0], 0)):\n            for (l, l1) in zip(range(pool_size[1]), range(-pool_size[1], 0)):\n                for (m, m1) in zip(range(pool_size[2]), range(-pool_size[2], 0)):\n                    y.append(x[:,\n                               :,\n                               k:k1:strides[0],\n                               l:l1:strides[1],\n                               m:m1:strides[2]])\n    y = np.stack(y, axis=-1)\n    if pool_mode == 'avg':\n        y = np.mean(np.ma.masked_invalid(y), axis=-1).data\n    elif pool_mode == 'max':\n        y = np.max(y, axis=-1)\n\n    if data_format == 'channels_last':\n        if y.ndim == 3:\n            y = np.transpose(y, (0, 2, 1))\n        elif y.ndim == 4:\n            y = np.transpose(y, (0, 2, 3, 1))\n        else:\n            y = np.transpose(y, (0, 2, 3, 4, 1))\n\n    return y",
        "begin_line": 90,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.bias_add#146",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.bias_add(x, y, data_format)",
        "snippet": "def bias_add(x, y, data_format):\n    if data_format == 'channels_first':\n        if y.ndim > 1:\n            y = np.reshape(y, y.shape[::-1])\n        for _ in range(x.ndim - y.ndim - 1):\n            y = np.expand_dims(y, -1)\n    else:\n        for _ in range(x.ndim - y.ndim - 1):\n            y = np.expand_dims(y, 0)\n    return x + y",
        "begin_line": 146,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.rnn#158",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.rnn(x, w, init, go_backwards=False, mask=None, unroll=False, input_length=None)",
        "snippet": "def rnn(x, w, init, go_backwards=False, mask=None, unroll=False, input_length=None):\n    w_i, w_h, w_o = w\n    h = []\n    o = []\n\n    if go_backwards:\n        t_list = range(x.shape[1] - 1, -1, -1)\n    else:\n        t_list = range(x.shape[1])\n\n    if mask is not None:\n        from keras import backend as K\n        np_mask = K.eval(mask)\n    else:\n        np_mask = None\n\n    for (i, t) in enumerate(t_list):\n        h_t = np.dot(x[:, t], w_i)\n\n        if w_h is not None:\n            prev = h[i - 1] if i > 0 else init\n            h_t1 = np.dot(prev, w_h)\n            if np_mask is not None:\n                h_t1[np_mask[:, t] == 0] = prev[np_mask[:, t] == 0]\n        else:\n            h_t1 = 0\n\n        o_t = h_t + h_t1\n        if w_o is not None:\n            o_t = np.dot(o_t, w_o)\n        o.append(o_t)\n\n        if np_mask is not None:\n            h_t = h_t * np_mask[:, t].reshape(-1, 1)\n        h.append(h_t + h_t1)\n\n    return o[-1], np.stack(o, axis=1), np.stack(h, axis=1)",
        "begin_line": 158,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.in_train_phase#209",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.in_train_phase(x, alt, training=None)",
        "snippet": "def in_train_phase(x, alt, training=None):\n    if training is None:\n        training = learning_phase()\n\n    if training is 1 or training is True:\n        if callable(x):\n            return x()\n        else:\n            return x\n    else:\n        if callable(alt):\n            return alt()\n        else:\n            return alt",
        "begin_line": 209,
        "end_line": 222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.in_test_phase#225",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.in_test_phase(x, alt, training=None)",
        "snippet": "def in_test_phase(x, alt, training=None):\n    return in_train_phase(alt, x, training=training)",
        "begin_line": 225,
        "end_line": 226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.relu#229",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.relu(x, alpha=0.0, max_value=None)",
        "snippet": "def relu(x, alpha=0., max_value=None):\n    y = x * (x > 0) + alpha * x * (x < 0)\n    if max_value is not None:\n        y = np.minimum(y, max_value)\n    return y",
        "begin_line": 229,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.switch#236",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.switch(condition, then_expression, else_expression)",
        "snippet": "def switch(condition, then_expression, else_expression):\n    cond_float = condition.astype(floatx())\n    while cond_float.ndim < then_expression.ndim:\n        cond_float = cond_float[..., None]\n    return cond_float * then_expression + (1 - cond_float) * else_expression",
        "begin_line": 236,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.softplus#243",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.softplus(x)",
        "snippet": "def softplus(x):\n    return np.log(1. + np.exp(x))",
        "begin_line": 243,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.elu#247",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.elu(x, alpha=1.0)",
        "snippet": "def elu(x, alpha=1.):\n    return x * (x > 0) + alpha * (np.exp(x) - 1.) * (x < 0)",
        "begin_line": 247,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.sigmoid#251",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.sigmoid(x)",
        "snippet": "def sigmoid(x):\n    return 1. / (1. + np.exp(-x))",
        "begin_line": 251,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.hard_sigmoid#255",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.hard_sigmoid(x)",
        "snippet": "def hard_sigmoid(x):\n    y = 0.2 * x + 0.5\n    y = np.minimum(y, 1.)\n    y = np.maximum(y, 0.)\n    return y",
        "begin_line": 255,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.tanh#262",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.tanh(x)",
        "snippet": "def tanh(x):\n    return np.tanh(x)",
        "begin_line": 262,
        "end_line": 263,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.softmax#266",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.softmax(x, axis=-1)",
        "snippet": "def softmax(x, axis=-1):\n    y = np.exp(x - np.max(x, axis, keepdims=True))\n    return y / np.sum(y, axis, keepdims=True)",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.l2_normalize#271",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.l2_normalize(x, axis=-1)",
        "snippet": "def l2_normalize(x, axis=-1):\n    y = np.max(np.sum(x ** 2, axis, keepdims=True), axis, keepdims=True)\n    return x / np.sqrt(y)",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.binary_crossentropy#276",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.binary_crossentropy(target, output, from_logits=False)",
        "snippet": "def binary_crossentropy(target, output, from_logits=False):\n    if not from_logits:\n        output = np.clip(output, 1e-7, 1 - 1e-7)\n        output = np.log(output / (1 - output))\n    return (target * -np.log(sigmoid(output)) +\n            (1 - target) * -np.log(1 - sigmoid(output)))",
        "begin_line": 276,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.categorical_crossentropy#284",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.categorical_crossentropy(target, output, from_logits=False)",
        "snippet": "def categorical_crossentropy(target, output, from_logits=False):\n    if from_logits:\n        output = softmax(output)\n    else:\n        output /= output.sum(axis=-1, keepdims=True)\n    output = np.clip(output, 1e-7, 1 - 1e-7)\n    return np.sum(target * -np.log(output), axis=-1, keepdims=False)",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.max#293",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.max(x, axis=None, keepdims=False)",
        "snippet": "def max(x, axis=None, keepdims=False):\n    if isinstance(axis, list):\n        axis = tuple(axis)\n    return np.max(x, axis=axis, keepdims=keepdims)",
        "begin_line": 293,
        "end_line": 296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.min#299",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.min(x, axis=None, keepdims=False)",
        "snippet": "def min(x, axis=None, keepdims=False):\n    if isinstance(axis, list):\n        axis = tuple(axis)\n    return np.min(x, axis=axis, keepdims=keepdims)",
        "begin_line": 299,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.mean#305",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.mean(x, axis=None, keepdims=False)",
        "snippet": "def mean(x, axis=None, keepdims=False):\n    if isinstance(axis, list):\n        axis = tuple(axis)\n    return np.mean(x, axis=axis, keepdims=keepdims)",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.var#311",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.var(x, axis=None, keepdims=False)",
        "snippet": "def var(x, axis=None, keepdims=False):\n    if isinstance(axis, list):\n        axis = tuple(axis)\n    return np.var(x, axis=axis, keepdims=keepdims)",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.std#317",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.std(x, axis=None, keepdims=False)",
        "snippet": "def std(x, axis=None, keepdims=False):\n    if isinstance(axis, list):\n        axis = tuple(axis)\n    return np.std(x, axis=axis, keepdims=keepdims)",
        "begin_line": 317,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.logsumexp#323",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.logsumexp(x, axis=None, keepdims=False)",
        "snippet": "def logsumexp(x, axis=None, keepdims=False):\n    if isinstance(axis, list):\n        axis = tuple(axis)\n    return sp.misc.logsumexp(x, axis=axis, keepdims=keepdims)",
        "begin_line": 323,
        "end_line": 326,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.cumsum#341",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.cumsum(x, axis=0)",
        "snippet": "def cumsum(x, axis=0):\n    return np.cumsum(x, axis=axis)",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.cumprod#345",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.cumprod(x, axis=0)",
        "snippet": "def cumprod(x, axis=0):\n    return np.cumprod(x, axis=axis)",
        "begin_line": 345,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.concatenate#383",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.concatenate(tensors, axis=-1)",
        "snippet": "def concatenate(tensors, axis=-1):\n    return np.concatenate(tensors, axis)",
        "begin_line": 383,
        "end_line": 384,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.permute_dimensions#387",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.permute_dimensions(x, pattern)",
        "snippet": "def permute_dimensions(x, pattern):\n    return np.transpose(x, pattern)",
        "begin_line": 387,
        "end_line": 388,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.reshape#391",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.reshape(x, shape)",
        "snippet": "def reshape(x, shape):\n    return np.reshape(x, shape)",
        "begin_line": 391,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.repeat_elements#395",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.repeat_elements(x, rep, axis)",
        "snippet": "def repeat_elements(x, rep, axis):\n    return np.repeat(x, rep, axis=axis)",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.repeat#399",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.repeat(x, n)",
        "snippet": "def repeat(x, n):\n    y = np.expand_dims(x, 1)\n    y = np.repeat(y, n, axis=1)\n    return y",
        "begin_line": 399,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.arange#405",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.arange(start, stop=None, step=1, dtype='int32')",
        "snippet": "def arange(start, stop=None, step=1, dtype='int32'):\n    return np.arange(start, stop, step, dtype)",
        "begin_line": 405,
        "end_line": 406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.flatten#409",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.flatten(x)",
        "snippet": "def flatten(x):\n    return np.reshape(x, (-1,))",
        "begin_line": 409,
        "end_line": 410,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.batch_flatten#413",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.batch_flatten(x)",
        "snippet": "def batch_flatten(x):\n    return np.reshape(x, (x.shape[0], -1))",
        "begin_line": 413,
        "end_line": 414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.eval#417",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.eval(x)",
        "snippet": "def eval(x):\n    return x",
        "begin_line": 417,
        "end_line": 418,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.dtype#421",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.dtype(x)",
        "snippet": "def dtype(x):\n    return x.dtype.name",
        "begin_line": 421,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.constant#425",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.constant(value, dtype=None, shape=None, name=None)",
        "snippet": "def constant(value, dtype=None, shape=None, name=None):\n    if dtype is None:\n        dtype = floatx()\n    if shape is None:\n        shape = ()\n    np_value = value * np.ones(shape)\n    np_value.astype(dtype)\n    return np_value",
        "begin_line": 425,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.print_tensor#435",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.print_tensor(x, message='')",
        "snippet": "def print_tensor(x, message=''):\n    print(x, message)\n    return x",
        "begin_line": 435,
        "end_line": 437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.eye#440",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.eye(size, dtype=None, name=None)",
        "snippet": "def eye(size, dtype=None, name=None):\n    return np.eye(size, dtype=dtype)",
        "begin_line": 440,
        "end_line": 441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.dot#444",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.dot(x, y)",
        "snippet": "def dot(x, y):\n    return np.dot(x, y)",
        "begin_line": 444,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.transpose#448",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.transpose(x)",
        "snippet": "def transpose(x):\n    return np.transpose(x)",
        "begin_line": 448,
        "end_line": 449,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.reverse#452",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.reverse(x, axes)",
        "snippet": "def reverse(x, axes):\n    if isinstance(axes, int):\n        axes = [axes]\n    for a in axes:\n        x = np.flip(x, a)\n    return x",
        "begin_line": 452,
        "end_line": 457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.variable#460",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.variable(value, dtype=None, name=None, constraint=None)",
        "snippet": "def variable(value, dtype=None, name=None, constraint=None):\n    if constraint is not None:\n        raise TypeError(\"Constraint must be None when \"\n                        \"using the NumPy backend.\")\n    return np.array(value, dtype)",
        "begin_line": 460,
        "end_line": 464,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.greater_equal#479",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.greater_equal(x, y)",
        "snippet": "def greater_equal(x, y):\n    return x >= y",
        "begin_line": 479,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.random_uniform_variable#499",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.random_uniform_variable(shape, low, high, dtype=None, name=None, seed=None)",
        "snippet": "def random_uniform_variable(shape, low, high, dtype=None, name=None, seed=None):\n    return (high - low) * np.random.random(shape).astype(dtype) + low",
        "begin_line": 499,
        "end_line": 500,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.random_normal_variable#503",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.random_normal_variable(shape, mean, scale, dtype=None, name=None, seed=None)",
        "snippet": "def random_normal_variable(shape, mean, scale, dtype=None, name=None, seed=None):\n    return scale * np.random.randn(*shape).astype(dtype) + mean",
        "begin_line": 503,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.resize_images#507",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.resize_images(x, height_factor, width_factor, data_format)",
        "snippet": "def resize_images(x, height_factor, width_factor, data_format):\n    if data_format == 'channels_first':\n        x = repeat_elements(x, height_factor, axis=2)\n        x = repeat_elements(x, width_factor, axis=3)\n    elif data_format == 'channels_last':\n        x = repeat_elements(x, height_factor, axis=1)\n        x = repeat_elements(x, width_factor, axis=2)\n    return x",
        "begin_line": 507,
        "end_line": 514,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.resize_volumes#517",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.resize_volumes(x, depth_factor, height_factor, width_factor, data_format)",
        "snippet": "def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):\n    if data_format == 'channels_first':\n        x = repeat_elements(x, depth_factor, axis=2)\n        x = repeat_elements(x, height_factor, axis=3)\n        x = repeat_elements(x, width_factor, axis=4)\n    elif data_format == 'channels_last':\n        x = repeat_elements(x, depth_factor, axis=1)\n        x = repeat_elements(x, height_factor, axis=2)\n        x = repeat_elements(x, width_factor, axis=3)\n    return x",
        "begin_line": 517,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    }
]