[
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal#12",
        "src_path": "pandas/tests/extension/base/base.py",
        "class_name": "pandas.tests.extension.base.base.BaseExtensionTests",
        "signature": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal(cls, left, right, *args, **kwargs)",
        "snippet": "    def assert_series_equal(cls, left, right, *args, **kwargs):\n        return tm.assert_series_equal(left, right, *args, **kwargs)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_ufuncs_single_int#12",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_ufuncs_single_int(ufunc)",
        "snippet": "def test_ufuncs_single_int(ufunc):\n    a = integer_array([1, 2, -3, np.nan])\n    result = ufunc(a)\n    expected = integer_array(ufunc(a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)\n\n    s = pd.Series(a)\n    result = ufunc(s)\n    expected = pd.Series(integer_array(ufunc(a.astype(float))))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 12,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_ufuncs_single_float#25",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_ufuncs_single_float(ufunc)",
        "snippet": "def test_ufuncs_single_float(ufunc):\n    a = integer_array([1, 2, -3, np.nan])\n    with np.errstate(invalid=\"ignore\"):\n        result = ufunc(a)\n        expected = ufunc(a.astype(float))\n    tm.assert_numpy_array_equal(result, expected)\n\n    s = pd.Series(a)\n    with np.errstate(invalid=\"ignore\"):\n        result = ufunc(s)\n        expected = ufunc(s.astype(float))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 25,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_ufuncs_binary_int#40",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_ufuncs_binary_int(ufunc)",
        "snippet": "def test_ufuncs_binary_int(ufunc):\n    # two IntegerArrays\n    a = integer_array([1, 2, -3, np.nan])\n    result = ufunc(a, a)\n    expected = integer_array(ufunc(a.astype(float), a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)\n\n    # IntegerArray with numpy array\n    arr = np.array([1, 2, 3, 4])\n    result = ufunc(a, arr)\n    expected = integer_array(ufunc(a.astype(float), arr))\n    tm.assert_extension_array_equal(result, expected)\n\n    result = ufunc(arr, a)\n    expected = integer_array(ufunc(arr, a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)\n\n    # IntegerArray with scalar\n    result = ufunc(a, 1)\n    expected = integer_array(ufunc(a.astype(float), 1))\n    tm.assert_extension_array_equal(result, expected)\n\n    result = ufunc(1, a)\n    expected = integer_array(ufunc(1, a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 40,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_ufunc_reduce_raises#68",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_ufunc_reduce_raises(values)",
        "snippet": "def test_ufunc_reduce_raises(values):\n    a = integer_array(values)\n    msg = r\"The 'reduce' method is not supported.\"\n    with pytest.raises(NotImplementedError, match=msg):\n        np.add.reduce(a)",
        "begin_line": 68,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_stat_method#85",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_stat_method(pandasmethname, kwargs)",
        "snippet": "def test_stat_method(pandasmethname, kwargs):\n    s = pd.Series(data=[1, 2, 3, 4, 5, 6, np.nan, np.nan], dtype=\"Int64\")\n    pandasmeth = getattr(s, pandasmethname)\n    result = pandasmeth(**kwargs)\n    s2 = pd.Series(data=[1, 2, 3, 4, 5, 6], dtype=\"Int64\")\n    pandasmeth = getattr(s2, pandasmethname)\n    expected = pandasmeth(**kwargs)\n    assert expected == result",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_value_counts_na#95",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_value_counts_na()",
        "snippet": "def test_value_counts_na():\n    arr = pd.array([1, 2, 1, pd.NA], dtype=\"Int64\")\n    result = arr.value_counts(dropna=False)\n    expected = pd.Series([2, 1, 1], index=[1, 2, pd.NA], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)\n\n    result = arr.value_counts(dropna=True)\n    expected = pd.Series([2, 1], index=[1, 2], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 95,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.test_function.test_value_counts_empty#106",
        "src_path": "pandas/tests/arrays/integer/test_function.py",
        "class_name": "pandas.tests.arrays.integer.test_function",
        "signature": "pandas.tests.arrays.integer.test_function.test_value_counts_empty()",
        "snippet": "def test_value_counts_empty():\n    # https://github.com/pandas-dev/pandas/issues/33317\n    s = pd.Series([], dtype=\"Int64\")\n    result = s.value_counts()\n    # TODO: The dtype of the index seems wrong (it's int64 for non-empty)\n    idx = pd.Index([], dtype=\"object\")\n    expected = pd.Series([], index=idx, dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 106,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.dtype#29",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.dtype(request)",
        "snippet": "def dtype(request):\n    return request.param()",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data#34",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data(dtype)",
        "snippet": "def data(dtype):\n    return integer_array(\n        list(range(8)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100],\n        dtype=dtype,\n    )",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data_missing#42",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data_missing(dtype)",
        "snippet": "def data_missing(dtype):\n    return integer_array([np.nan, 1], dtype=dtype)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.all_data#47",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.all_data(request, data, data_missing)",
        "snippet": "def all_data(request, data, data_missing):\n    \"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"\n    if request.param == \"data\":\n        return data\n    elif request.param == \"data_missing\":\n        return data_missing",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#24",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#31",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DecimalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#49",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#65",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#111",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            item = pd.api.indexers.check_array_indexer(self, item)\n            return type(self)(self._data[item])",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#132",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#148",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 148,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#158",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 158,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    }
]