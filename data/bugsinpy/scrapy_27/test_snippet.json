[
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.setUp#12",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.crawler = get_crawler(Spider)\n        self.spider = self.crawler._create_spider('foo')\n        self.mw = RedirectMiddleware.from_crawler(self.crawler)",
        "begin_line": 12,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_priority_adjust#17",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_priority_adjust(self)",
        "snippet": "    def test_priority_adjust(self):\n        req = Request('http://a.com')\n        rsp = Response('http://a.com', headers={'Location': 'http://a.com/redirected'}, status=301)\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert req2.priority > req.priority",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_301#23",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_301(self)",
        "snippet": "    def test_redirect_301(self):\n        def _test(method):\n            url = 'http://www.example.com/301'\n            url2 = 'http://www.example.com/redirected'\n            req = Request(url, method=method)\n            rsp = Response(url, headers={'Location': url2}, status=301)\n\n            req2 = self.mw.process_response(req, rsp, self.spider)\n            assert isinstance(req2, Request)\n            self.assertEqual(req2.url, url2)\n            self.assertEqual(req2.method, method)\n\n            # response without Location header but with status code is 3XX should be ignored\n            del rsp.headers['Location']\n            assert self.mw.process_response(req, rsp, self.spider) is rsp\n\n        _test('GET')\n        _test('POST')\n        _test('HEAD')",
        "begin_line": 23,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test#24",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test(method)",
        "snippet": "        def _test(method):\n            url = 'http://www.example.com/301'\n            url2 = 'http://www.example.com/redirected'\n            req = Request(url, method=method)\n            rsp = Response(url, headers={'Location': url2}, status=301)\n\n            req2 = self.mw.process_response(req, rsp, self.spider)\n            assert isinstance(req2, Request)\n            self.assertEqual(req2.url, url2)\n            self.assertEqual(req2.method, method)\n\n            # response without Location header but with status code is 3XX should be ignored\n            del rsp.headers['Location']\n            assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 24,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_dont_redirect#43",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_dont_redirect(self)",
        "snippet": "    def test_dont_redirect(self):\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        req = Request(url, meta={'dont_redirect': True})\n        rsp = Response(url, headers={'Location': url2}, status=301)\n\n        r = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(r, Response)\n        assert r is rsp\n\n        # Test that it redirects when dont_redirect is False\n        req = Request(url, meta={'dont_redirect': False})\n        rsp = Response(url2, status=200)\n\n        r = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(r, Response)\n        assert r is rsp",
        "begin_line": 43,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302#62",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302(self)",
        "snippet": "    def test_redirect_302(self):\n        url = 'http://www.example.com/302'\n        url2 = 'http://www.example.com/redirected2'\n        req = Request(url, method='POST', body='test',\n            headers={'Content-Type': 'text/plain', 'Content-length': '4'})\n        rsp = Response(url, headers={'Location': url2}, status=302)\n\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, url2)\n        self.assertEqual(req2.method, 'GET')\n        assert 'Content-Type' not in req2.headers, \\\n            \"Content-Type header must not be present in redirected request\"\n        assert 'Content-Length' not in req2.headers, \\\n            \"Content-Length header must not be present in redirected request\"\n        assert not req2.body, \\\n            \"Redirected body must be empty, not '%s'\" % req2.body\n\n        # response without Location header but with status code is 3XX should be ignored\n        del rsp.headers['Location']\n        assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 62,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302_head#84",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302_head(self)",
        "snippet": "    def test_redirect_302_head(self):\n        url = 'http://www.example.com/302'\n        url2 = 'http://www.example.com/redirected2'\n        req = Request(url, method='HEAD')\n        rsp = Response(url, headers={'Location': url2}, status=302)\n\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, url2)\n        self.assertEqual(req2.method, 'HEAD')\n\n        # response without Location header but with status code is 3XX should be ignored\n        del rsp.headers['Location']\n        assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 84,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_max_redirect_times#100",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_max_redirect_times(self)",
        "snippet": "    def test_max_redirect_times(self):\n        self.mw.max_redirect_times = 1\n        req = Request('http://scrapytest.org/302')\n        rsp = Response('http://scrapytest.org/302', headers={'Location': '/redirected'}, status=302)\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        assert 'redirect_times' in req.meta\n        self.assertEqual(req.meta['redirect_times'], 1)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_ttl#111",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_ttl(self)",
        "snippet": "    def test_ttl(self):\n        self.mw.max_redirect_times = 100\n        req = Request('http://scrapytest.org/302', meta={'redirect_ttl': 1})\n        rsp = Response('http://www.scrapytest.org/302', headers={'Location': '/redirected'}, status=302)\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 111,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_urls#120",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_urls(self)",
        "snippet": "    def test_redirect_urls(self):\n        req1 = Request('http://scrapytest.org/first')\n        rsp1 = Response('http://scrapytest.org/first', headers={'Location': '/redirected'}, status=302)\n        req2 = self.mw.process_response(req1, rsp1, self.spider)\n        rsp2 = Response('http://scrapytest.org/redirected', headers={'Location': '/redirected2'}, status=302)\n        req3 = self.mw.process_response(req2, rsp2, self.spider)\n\n        self.assertEqual(req2.url, 'http://scrapytest.org/redirected')\n        self.assertEqual(req2.meta['redirect_urls'], ['http://scrapytest.org/first'])\n        self.assertEqual(req3.url, 'http://scrapytest.org/redirected2')\n        self.assertEqual(req3.meta['redirect_urls'], ['http://scrapytest.org/first', 'http://scrapytest.org/redirected'])",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_spider_handling#132",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_spider_handling(self)",
        "snippet": "    def test_spider_handling(self):\n        smartspider = self.crawler._create_spider('smarty')\n        smartspider.handle_httpstatus_list = [404, 301, 302]\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        req = Request(url)\n        rsp = Response(url, headers={'Location': url2}, status=301)\n        r = self.mw.process_response(req, rsp, smartspider)\n        self.assertIs(r, rsp)",
        "begin_line": 132,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_request_meta_handling#142",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_request_meta_handling(self)",
        "snippet": "    def test_request_meta_handling(self):\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        def _test_passthrough(req):\n            rsp = Response(url, headers={'Location': url2}, status=301, request=req)\n            r = self.mw.process_response(req, rsp, self.spider)\n            self.assertIs(r, rsp)\n        _test_passthrough(Request(url, meta={'handle_httpstatus_list':\n                                                           [404, 301, 302]}))\n        _test_passthrough(Request(url, meta={'handle_httpstatus_all': True}))",
        "begin_line": 142,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test_passthrough#145",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test_passthrough(req)",
        "snippet": "        def _test_passthrough(req):\n            rsp = Response(url, headers={'Location': url2}, status=301, request=req)\n            r = self.mw.process_response(req, rsp, self.spider)\n            self.assertIs(r, rsp)",
        "begin_line": 145,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.setUp#156",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.setUp(self)",
        "snippet": "    def setUp(self):\n        crawler = get_crawler(Spider)\n        self.spider = crawler._create_spider('foo')\n        self.mw = MetaRefreshMiddleware.from_crawler(crawler)",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest._body#161",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest._body(self, interval=5, url='http://example.org/newpage')",
        "snippet": "    def _body(self, interval=5, url='http://example.org/newpage'):\n        return \"\"\"<html><head><meta http-equiv=\"refresh\" content=\"{0};url={1}\"/></head></html>\"\"\"\\\n                .format(interval, url)",
        "begin_line": 161,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_priority_adjust#165",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_priority_adjust(self)",
        "snippet": "    def test_priority_adjust(self):\n        req = Request('http://a.com')\n        rsp = HtmlResponse(req.url, body=self._body())\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert req2.priority > req.priority",
        "begin_line": 165,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh#171",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh(self)",
        "snippet": "    def test_meta_refresh(self):\n        req = Request(url='http://example.org')\n        rsp = HtmlResponse(req.url, body=self._body())\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, 'http://example.org/newpage')",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_with_high_interval#178",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_with_high_interval(self)",
        "snippet": "    def test_meta_refresh_with_high_interval(self):\n        # meta-refresh with high intervals don't trigger redirects\n        req = Request(url='http://example.org')\n        rsp = HtmlResponse(url='http://example.org', body=self._body(interval=1000))\n        rsp2 = self.mw.process_response(req, rsp, self.spider)\n        assert rsp is rsp2",
        "begin_line": 178,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_trough_posted_request#185",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_trough_posted_request(self)",
        "snippet": "    def test_meta_refresh_trough_posted_request(self):\n        req = Request(url='http://example.org', method='POST', body='test',\n                      headers={'Content-Type': 'text/plain', 'Content-length': '4'})\n        rsp = HtmlResponse(req.url, body=self._body())\n        req2 = self.mw.process_response(req, rsp, self.spider)\n\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, 'http://example.org/newpage')\n        self.assertEqual(req2.method, 'GET')\n        assert 'Content-Type' not in req2.headers, \\\n            \"Content-Type header must not be present in redirected request\"\n        assert 'Content-Length' not in req2.headers, \\\n            \"Content-Length header must not be present in redirected request\"\n        assert not req2.body, \\\n            \"Redirected body must be empty, not '%s'\" % req2.body",
        "begin_line": 185,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_max_redirect_times#201",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_max_redirect_times(self)",
        "snippet": "    def test_max_redirect_times(self):\n        self.mw.max_redirect_times = 1\n        req = Request('http://scrapytest.org/max')\n        rsp = HtmlResponse(req.url, body=self._body())\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        assert 'redirect_times' in req.meta\n        self.assertEqual(req.meta['redirect_times'], 1)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 201,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ttl#212",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ttl(self)",
        "snippet": "    def test_ttl(self):\n        self.mw.max_redirect_times = 100\n        req = Request('http://scrapytest.org/302', meta={'redirect_ttl': 1})\n        rsp = HtmlResponse(req.url, body=self._body())\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 212,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_redirect_urls#221",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_redirect_urls(self)",
        "snippet": "    def test_redirect_urls(self):\n        req1 = Request('http://scrapytest.org/first')\n        rsp1 = HtmlResponse(req1.url, body=self._body(url='/redirected'))\n        req2 = self.mw.process_response(req1, rsp1, self.spider)\n        assert isinstance(req2, Request), req2\n        rsp2 = HtmlResponse(req2.url, body=self._body(url='/redirected2'))\n        req3 = self.mw.process_response(req2, rsp2, self.spider)\n        assert isinstance(req3, Request), req3\n        self.assertEqual(req2.url, 'http://scrapytest.org/redirected')\n        self.assertEqual(req2.meta['redirect_urls'], ['http://scrapytest.org/first'])\n        self.assertEqual(req3.url, 'http://scrapytest.org/redirected2')\n        self.assertEqual(req3.meta['redirect_urls'], ['http://scrapytest.org/first', 'http://scrapytest.org/redirected'])",
        "begin_line": 221,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    }
]