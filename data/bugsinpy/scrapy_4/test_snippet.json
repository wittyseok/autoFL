[
    {
        "name": "tests.test_contracts.TestSpider.returns_request#30",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.returns_request(self, response)",
        "snippet": "    def returns_request(self, response):\n        \"\"\" method which returns request\n        @url http://scrapy.org\n        @returns requests 1\n        \"\"\"\n        return Request('http://scrapy.org', callback=self.returns_item)",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.returns_item#37",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.returns_item(self, response)",
        "snippet": "    def returns_item(self, response):\n        \"\"\" method which returns item\n        @url http://scrapy.org\n        @returns items 1 1\n        \"\"\"\n        return TestItem(url=response.url)",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.returns_dict_item#44",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.returns_dict_item(self, response)",
        "snippet": "    def returns_dict_item(self, response):\n        \"\"\" method which returns item\n        @url http://scrapy.org\n        @returns items 1 1\n        \"\"\"\n        return {\"url\": response.url}",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.returns_fail#51",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.returns_fail(self, response)",
        "snippet": "    def returns_fail(self, response):\n        \"\"\" method which returns item\n        @url http://scrapy.org\n        @returns items 0 0\n        \"\"\"\n        return TestItem(url=response.url)",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.returns_dict_fail#58",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.returns_dict_fail(self, response)",
        "snippet": "    def returns_dict_fail(self, response):\n        \"\"\" method which returns item\n        @url http://scrapy.org\n        @returns items 0 0\n        \"\"\"\n        return {'url': response.url}",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.scrapes_item_ok#65",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.scrapes_item_ok(self, response)",
        "snippet": "    def scrapes_item_ok(self, response):\n        \"\"\" returns item with name and url\n        @url http://scrapy.org\n        @returns items 1 1\n        @scrapes name url\n        \"\"\"\n        return TestItem(name='test', url=response.url)",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.scrapes_dict_item_ok#73",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.scrapes_dict_item_ok(self, response)",
        "snippet": "    def scrapes_dict_item_ok(self, response):\n        \"\"\" returns item with name and url\n        @url http://scrapy.org\n        @returns items 1 1\n        @scrapes name url\n        \"\"\"\n        return {'name': 'test', 'url': response.url}",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.scrapes_item_fail#81",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.scrapes_item_fail(self, response)",
        "snippet": "    def scrapes_item_fail(self, response):\n        \"\"\" returns item with no name\n        @url http://scrapy.org\n        @returns items 1 1\n        @scrapes name url\n        \"\"\"\n        return TestItem(url=response.url)",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.scrapes_dict_item_fail#89",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.scrapes_dict_item_fail(self, response)",
        "snippet": "    def scrapes_dict_item_fail(self, response):\n        \"\"\" returns item with no name\n        @url http://scrapy.org\n        @returns items 1 1\n        @scrapes name url\n        \"\"\"\n        return {'url': response.url}",
        "begin_line": 89,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.TestSpider.parse_no_url#97",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.TestSpider",
        "signature": "tests.test_contracts.TestSpider.parse_no_url(self, response)",
        "snippet": "    def parse_no_url(self, response):\n        \"\"\" method with no url\n        @returns items 1 1\n        \"\"\"\n        pass",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.setUp#107",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.conman = ContractsManager(self.contracts)\n        self.results = TextTestResult(stream=None, descriptions=False, verbosity=0)",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.should_succeed#111",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.should_succeed(self)",
        "snippet": "    def should_succeed(self):\n        self.assertFalse(self.results.failures)\n        self.assertFalse(self.results.errors)",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.should_fail#115",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.should_fail(self)",
        "snippet": "    def should_fail(self):\n        self.assertTrue(self.results.failures)\n        self.assertFalse(self.results.errors)",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.test_contracts#119",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.test_contracts(self)",
        "snippet": "    def test_contracts(self):\n        spider = TestSpider()\n\n        # extract contracts correctly\n        contracts = self.conman.extract_contracts(spider.returns_request)\n        self.assertEqual(len(contracts), 2)\n        self.assertEqual(frozenset(type(x) for x in contracts),\n            frozenset([UrlContract, ReturnsContract]))\n\n        # returns request for valid method\n        request = self.conman.from_method(spider.returns_request, self.results)\n        self.assertNotEqual(request, None)\n\n        # no request for missing url\n        request = self.conman.from_method(spider.parse_no_url, self.results)\n        self.assertEqual(request, None)",
        "begin_line": 119,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.test_returns#136",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.test_returns(self)",
        "snippet": "    def test_returns(self):\n        spider = TestSpider()\n        response = ResponseMock()\n\n        # returns_item\n        request = self.conman.from_method(spider.returns_item, self.results)\n        request.callback(response)\n        self.should_succeed()\n\n        # returns_dict_item\n        request = self.conman.from_method(spider.returns_dict_item, self.results)\n        request.callback(response)\n        self.should_succeed()\n\n        # returns_request\n        request = self.conman.from_method(spider.returns_request, self.results)\n        request.callback(response)\n        self.should_succeed()\n\n        # returns_fail\n        request = self.conman.from_method(spider.returns_fail, self.results)\n        request.callback(response)\n        self.should_fail()\n\n        # returns_dict_fail\n        request = self.conman.from_method(spider.returns_dict_fail, self.results)\n        request.callback(response)\n        self.should_fail()",
        "begin_line": 136,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.test_scrapes#165",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.test_scrapes(self)",
        "snippet": "    def test_scrapes(self):\n        spider = TestSpider()\n        response = ResponseMock()\n\n        # scrapes_item_ok\n        request = self.conman.from_method(spider.scrapes_item_ok, self.results)\n        request.callback(response)\n        self.should_succeed()\n\n        # scrapes_dict_item_ok\n        request = self.conman.from_method(spider.scrapes_dict_item_ok, self.results)\n        request.callback(response)\n        self.should_succeed()\n\n        # scrapes_item_fail\n        request = self.conman.from_method(spider.scrapes_item_fail,\n                self.results)\n        request.callback(response)\n        self.should_fail()\n\n        # scrapes_dict_item_fail\n        request = self.conman.from_method(spider.scrapes_dict_item_fail,\n                self.results)\n        request.callback(response)\n        self.should_fail()",
        "begin_line": 165,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_contracts.ContractsManagerTest.test_errback#191",
        "src_path": "tests/test_contracts.py",
        "class_name": "tests.test_contracts.ContractsManagerTest",
        "signature": "tests.test_contracts.ContractsManagerTest.test_errback(self)",
        "snippet": "    def test_errback(self):\n        spider = TestSpider()\n        response = ResponseMock()\n\n        try:\n            raise HttpError(response, 'Ignoring non-200 response')\n        except HttpError:\n            failure_mock = failure.Failure()\n\n        request = self.conman.from_method(spider.returns_request, self.results)\n        request.errback(failure_mock)\n\n        self.assertFalse(self.results.failures)\n        self.assertTrue(self.results.errors)",
        "begin_line": 191,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    }
]