[
    {
        "name": "tests.conftest._handler#19",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._handler(request)",
        "snippet": "async def _handler(request):\n    \"\"\"\n    Dummy placeholder method used for route resolver when creating a new\n    route into the sanic router. This router is not actually called by the\n    sanic app. So do not worry about the arguments to this method.\n\n    If you change the return value of this method, make sure to propagate the\n    change to any test case that leverages RouteStringGenerator.\n    \"\"\"\n    return 1",
        "begin_line": 19,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.generate_random_direct_route#50",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.generate_random_direct_route(self, max_route_depth=4)",
        "snippet": "    def generate_random_direct_route(self, max_route_depth=4):\n        routes = []\n        for depth in range(1, max_route_depth + 1):\n            for _ in range(self.ROUTE_COUNT_PER_DEPTH):\n                route = \"/\".join(\n                    [\n                        TYPE_TO_GENERATOR_MAP.get(\"string\")()\n                        for _ in range(depth)\n                    ]\n                )\n                route = route.replace(\".\", \"\", -1)\n                route_detail = (random.choice(self.HTTP_METHODS), route)\n\n                if route_detail not in routes:\n                    routes.append(route_detail)\n        return routes",
        "begin_line": 50,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.add_typed_parameters#67",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.add_typed_parameters(self, current_routes, max_route_depth=8)",
        "snippet": "    def add_typed_parameters(self, current_routes, max_route_depth=8):\n        routes = []\n        for method, route in current_routes:\n            current_length = len(route.split(\"/\"))\n            new_route_part = \"/\".join(\n                [\n                    \"<{}:{}>\".format(\n                        TYPE_TO_GENERATOR_MAP.get(\"string\")(),\n                        random.choice(self.ROUTE_PARAM_TYPES),\n                    )\n                    for _ in range(max_route_depth - current_length)\n                ]\n            )\n            route = \"/\".join([route, new_route_part])\n            route = route.replace(\".\", \"\", -1)\n            routes.append((method, route))\n        return routes",
        "begin_line": 67,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.generate_url_for_template#86",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.generate_url_for_template(template)",
        "snippet": "    def generate_url_for_template(template):\n        url = template\n        for pattern, param_type in re.findall(\n            re.compile(r\"((?:<\\w+:(string|int|number|alpha|uuid)>)+)\"),\n            template,\n        ):\n            value = TYPE_TO_GENERATOR_MAP.get(param_type)()\n            url = url.replace(pattern, str(value), -1)\n        return url",
        "begin_line": 86,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._setup#100",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._setup(route_details: tuple)",
        "snippet": "    def _setup(route_details: tuple) -> (Router, tuple):\n        router = Router()\n        added_router = []\n        for method, route in route_details:\n            try:\n                router._add(\n                    uri=\"/{}\".format(route),\n                    methods=frozenset({method}),\n                    host=\"localhost\",\n                    handler=_handler,\n                )\n                added_router.append((method, route))\n            except RouteExists:\n                pass\n        return router, added_router",
        "begin_line": 100,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.sanic_router#98",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.sanic_router()",
        "snippet": "def sanic_router():\n    # noinspection PyProtectedMember\n    def _setup(route_details: tuple) -> (Router, tuple):\n        router = Router()\n        added_router = []\n        for method, route in route_details:\n            try:\n                router._add(\n                    uri=\"/{}\".format(route),\n                    methods=frozenset({method}),\n                    host=\"localhost\",\n                    handler=_handler,\n                )\n                added_router.append((method, route))\n            except RouteExists:\n                pass\n        return router, added_router\n\n    return _setup",
        "begin_line": 98,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.route_generator#120",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.route_generator()",
        "snippet": "def route_generator() -> RouteStringGenerator:\n    return RouteStringGenerator()",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.app#130",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.app(request)",
        "snippet": "def app(request):\n    return Sanic(request.node.name)",
        "begin_line": 130,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.uvloop_installed#13",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.uvloop_installed()",
        "snippet": "def uvloop_installed():\n    try:\n        import uvloop  # noqa\n\n        return True\n    except ImportError:\n        return False",
        "begin_line": 13,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_app_loop_running#22",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_app_loop_running(app)",
        "snippet": "def test_app_loop_running(app):\n    @app.get(\"/test\")\n    async def handler(request):\n        assert isinstance(app.loop, asyncio.AbstractEventLoop)\n        return text(\"pass\")\n\n    request, response = app.test_client.get(\"/test\")\n    assert response.text == \"pass\"",
        "begin_line": 22,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#24",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler(request)",
        "snippet": "    async def handler(request):\n        assert isinstance(app.loop, asyncio.AbstractEventLoop)\n        return text(\"pass\")",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_create_asyncio_server#35",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_create_asyncio_server(app)",
        "snippet": "def test_create_asyncio_server(app):\n    if not uvloop_installed():\n        loop = asyncio.get_event_loop()\n        asyncio_srv_coro = app.create_server(return_asyncio_server=True)\n        assert isawaitable(asyncio_srv_coro)\n        srv = loop.run_until_complete(asyncio_srv_coro)\n        assert srv.is_serving() is True",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_asyncio_server_no_start_serving#47",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_asyncio_server_no_start_serving(app)",
        "snippet": "def test_asyncio_server_no_start_serving(app):\n    if not uvloop_installed():\n        loop = asyncio.get_event_loop()\n        asyncio_srv_coro = app.create_server(\n            return_asyncio_server=True,\n            asyncio_server_kwargs=dict(start_serving=False),\n        )\n        srv = loop.run_until_complete(asyncio_srv_coro)\n        assert srv.is_serving() is False",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_asyncio_server_start_serving#60",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_asyncio_server_start_serving(app)",
        "snippet": "def test_asyncio_server_start_serving(app):\n    if not uvloop_installed():\n        loop = asyncio.get_event_loop()\n        asyncio_srv_coro = app.create_server(\n            return_asyncio_server=True,\n            asyncio_server_kwargs=dict(start_serving=False),\n        )\n        srv = loop.run_until_complete(asyncio_srv_coro)\n        assert srv.is_serving() is False\n        loop.run_until_complete(srv.start_serving())\n        assert srv.is_serving() is True\n        srv.close()",
        "begin_line": 60,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_app_loop_not_running#74",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_app_loop_not_running(app)",
        "snippet": "def test_app_loop_not_running(app):\n    with pytest.raises(SanicException) as excinfo:\n        app.loop\n\n    assert str(excinfo.value) == (\n        \"Loop can only be retrieved after the app has started \"\n        \"running. Not supported with `create_server` function\"\n    )",
        "begin_line": 74,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_app_run_raise_type_error#84",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_app_run_raise_type_error(app)",
        "snippet": "def test_app_run_raise_type_error(app):\n\n    with pytest.raises(TypeError) as excinfo:\n        app.run(loop=\"loop\")\n\n    assert str(excinfo.value) == (\n        \"loop is not a valid argument. To use an existing loop, \"\n        \"change to create_server().\\nSee more: \"\n        \"https://sanic.readthedocs.io/en/latest/sanic/deploying.html\"\n        \"#asynchronous-support\"\n    )",
        "begin_line": 84,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_app_route_raise_value_error#97",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_app_route_raise_value_error(app)",
        "snippet": "def test_app_route_raise_value_error(app):\n\n    with pytest.raises(ValueError) as excinfo:\n\n        @app.route(\"/test\")\n        async def handler():\n            return text(\"test\")\n\n    assert (\n        str(excinfo.value)\n        == \"Required parameter `request` missing in the handler() route?\"\n    )",
        "begin_line": 97,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#102",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler()",
        "snippet": "        async def handler():\n            return text(\"test\")",
        "begin_line": 102,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_app_handle_request_handler_is_none#111",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_app_handle_request_handler_is_none(app, monkeypatch)",
        "snippet": "def test_app_handle_request_handler_is_none(app, monkeypatch):\n    def mockreturn(*args, **kwargs):\n        return None, [], {}, \"\", \"\"\n\n    # Not sure how to make app.router.get() return None, so use mock here.\n    monkeypatch.setattr(app.router, \"get\", mockreturn)\n\n    @app.get(\"/test\")\n    def handler(request):\n        return text(\"test\")\n\n    request, response = app.test_client.get(\"/test\")\n\n    assert \"'None' was returned while requesting a handler from the router\" in response.text",
        "begin_line": 111,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.mockreturn#112",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.mockreturn(*args, **kwargs)",
        "snippet": "    def mockreturn(*args, **kwargs):\n        return None, [], {}, \"\", \"\"",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#119",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler(request)",
        "snippet": "    def handler(request):\n        return text(\"test\")",
        "begin_line": 119,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_app_enable_websocket#129",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_app_enable_websocket(app, websocket_enabled, enable)",
        "snippet": "def test_app_enable_websocket(app, websocket_enabled, enable):\n    app.websocket_enabled = websocket_enabled\n    app.enable_websocket(enable=enable)\n\n    assert app.websocket_enabled == enable\n\n    @app.websocket(\"/ws\")\n    async def handler(request, ws):\n        await ws.send(\"test\")\n\n    assert app.websocket_enabled == True",
        "begin_line": 129,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#136",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler(request, ws)",
        "snippet": "    async def handler(request, ws):\n        await ws.send(\"test\")",
        "begin_line": 136,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_handle_request_with_nested_exception#142",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_handle_request_with_nested_exception(app, monkeypatch)",
        "snippet": "def test_handle_request_with_nested_exception(app, monkeypatch):\n\n    err_msg = \"Mock Exception\"\n\n    # Not sure how to raise an exception in app.error_handler.response(), use mock here\n    def mock_error_handler_response(*args, **kwargs):\n        raise Exception(err_msg)\n\n    monkeypatch.setattr(\n        app.error_handler, \"response\", mock_error_handler_response\n    )\n\n    @app.get(\"/\")\n    def handler(request):\n        raise Exception\n\n    request, response = app.test_client.get(\"/\")\n    assert response.status == 500\n    assert response.text == \"An error occurred while handling an error\"",
        "begin_line": 142,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.mock_error_handler_response#147",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.mock_error_handler_response(*args, **kwargs)",
        "snippet": "    def mock_error_handler_response(*args, **kwargs):\n        raise Exception(err_msg)",
        "begin_line": 147,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#155",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler(request)",
        "snippet": "    def handler(request):\n        raise Exception",
        "begin_line": 155,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_handle_request_with_nested_exception_debug#163",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_handle_request_with_nested_exception_debug(app, monkeypatch)",
        "snippet": "def test_handle_request_with_nested_exception_debug(app, monkeypatch):\n\n    err_msg = \"Mock Exception\"\n\n    # Not sure how to raise an exception in app.error_handler.response(), use mock here\n    def mock_error_handler_response(*args, **kwargs):\n        raise Exception(err_msg)\n\n    monkeypatch.setattr(\n        app.error_handler, \"response\", mock_error_handler_response\n    )\n\n    @app.get(\"/\")\n    def handler(request):\n        raise Exception\n\n    request, response = app.test_client.get(\"/\", debug=True)\n    assert response.status == 500\n    assert response.text.startswith(\n        \"Error while handling error: {}\\nStack: Traceback (most recent call last):\\n\".format(\n            err_msg\n        )\n    )",
        "begin_line": 163,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.mock_error_handler_response#168",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.mock_error_handler_response(*args, **kwargs)",
        "snippet": "    def mock_error_handler_response(*args, **kwargs):\n        raise Exception(err_msg)",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#176",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler(request)",
        "snippet": "    def handler(request):\n        raise Exception",
        "begin_line": 176,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.test_handle_request_with_nested_sanic_exception#188",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.test_handle_request_with_nested_sanic_exception(app, monkeypatch, caplog)",
        "snippet": "def test_handle_request_with_nested_sanic_exception(app, monkeypatch, caplog):\n\n    # Not sure how to raise an exception in app.error_handler.response(), use mock here\n    def mock_error_handler_response(*args, **kwargs):\n        raise SanicException(\"Mock SanicException\")\n\n    monkeypatch.setattr(\n        app.error_handler, \"response\", mock_error_handler_response\n    )\n\n    @app.get(\"/\")\n    def handler(request):\n        raise Exception\n\n    with caplog.at_level(logging.ERROR):\n        request, response = app.test_client.get(\"/\")\n    assert response.status == 500\n    assert \"Mock SanicException\" in response.text\n    assert (\n        \"sanic.root\",\n        logging.ERROR,\n        \"Exception occurred while handling uri: 'http://127.0.0.1:42101/'\",\n    ) in caplog.record_tuples",
        "begin_line": 188,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.mock_error_handler_response#191",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.mock_error_handler_response(*args, **kwargs)",
        "snippet": "    def mock_error_handler_response(*args, **kwargs):\n        raise SanicException(\"Mock SanicException\")",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_app.handler#199",
        "src_path": "tests/test_app.py",
        "class_name": "tests.test_app",
        "signature": "tests.test_app.handler(request)",
        "snippet": "    def handler(request):\n        raise Exception",
        "begin_line": 199,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    }
]