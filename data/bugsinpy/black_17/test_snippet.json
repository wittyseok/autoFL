[
    {
        "name": "tests.test_black.dump_to_stderr#30",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.dump_to_stderr(*output: str)",
        "snippet": "def dump_to_stderr(*output: str) -> str:\n    return \"\\n\" + \"\\n\".join(output) + \"\\n\"",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.read_data#34",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.read_data(name: str)",
        "snippet": "def read_data(name: str) -> Tuple[str, str]:\n    \"\"\"read_data('test_name') -> 'input', 'output'\"\"\"\n    if not name.endswith((\".py\", \".pyi\", \".out\", \".diff\")):\n        name += \".py\"\n    _input: List[str] = []\n    _output: List[str] = []\n    with open(THIS_DIR / name, \"r\", encoding=\"utf8\") as test:\n        lines = test.readlines()\n    result = _input\n    for line in lines:\n        line = line.replace(EMPTY_LINE, \"\")\n        if line.rstrip() == \"# output\":\n            result = _output\n            continue\n\n        result.append(line)\n    if _input and not _output:\n        # If there's no output marker, treat the entire file as already pre-formatted.\n        _output = _input[:]\n    return \"\".join(_input).strip() + \"\\n\", \"\".join(_output).strip() + \"\\n\"",
        "begin_line": 34,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.cache_dir#57",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.cache_dir(exists: bool=True)",
        "snippet": "def cache_dir(exists: bool = True) -> Iterator[Path]:\n    with TemporaryDirectory() as workspace:\n        cache_dir = Path(workspace)\n        if not exists:\n            cache_dir = cache_dir / \"new\"\n        with patch(\"black.CACHE_DIR\", cache_dir):\n            yield cache_dir",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.event_loop#67",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.event_loop(close: bool)",
        "snippet": "def event_loop(close: bool) -> Iterator[None]:\n    policy = asyncio.get_event_loop_policy()\n    old_loop = policy.get_event_loop()\n    loop = policy.new_event_loop()\n    asyncio.set_event_loop(loop)\n    try:\n        yield\n\n    finally:\n        policy.set_event_loop(old_loop)\n        if close:\n            loop.close()",
        "begin_line": 67,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.assertFormatEqual#84",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.assertFormatEqual(self, expected: str, actual: str)",
        "snippet": "    def assertFormatEqual(self, expected: str, actual: str) -> None:\n        if actual != expected and not os.environ.get(\"SKIP_AST_PRINT\"):\n            bdv: black.DebugVisitor[Any]\n            black.out(\"Expected tree:\", fg=\"green\")\n            try:\n                exp_node = black.lib2to3_parse(expected)\n                bdv = black.DebugVisitor()\n                list(bdv.visit(exp_node))\n            except Exception as ve:\n                black.err(str(ve))\n            black.out(\"Actual tree:\", fg=\"red\")\n            try:\n                exp_node = black.lib2to3_parse(actual)\n                bdv = black.DebugVisitor()\n                list(bdv.visit(exp_node))\n            except Exception as ve:\n                black.err(str(ve))\n        self.assertEqual(expected, actual)",
        "begin_line": 84,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty#104",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty(self)",
        "snippet": "    def test_empty(self) -> None:\n        source = expected = \"\"\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 104,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_ff#111",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_ff(self)",
        "snippet": "    def test_empty_ff(self) -> None:\n        expected = \"\"\n        tmp_file = Path(black.dump_to_file())\n        try:\n            self.assertFalse(ff(tmp_file, write_back=black.WriteBack.YES))\n            with open(tmp_file, encoding=\"utf8\") as f:\n                actual = f.read()\n        finally:\n            os.unlink(tmp_file)\n        self.assertFormatEqual(expected, actual)",
        "begin_line": 111,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_self#123",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_self(self)",
        "snippet": "    def test_self(self) -> None:\n        source, expected = read_data(\"test_black\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        self.assertFalse(ff(THIS_FILE))",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_black#132",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_black(self)",
        "snippet": "    def test_black(self) -> None:\n        source, expected = read_data(\"../black\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        self.assertFalse(ff(THIS_DIR / \"..\" / \"black.py\"))",
        "begin_line": 132,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_piping#140",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_piping(self)",
        "snippet": "    def test_piping(self) -> None:\n        source, expected = read_data(\"../black\")\n        hold_stdin, hold_stdout = sys.stdin, sys.stdout\n        try:\n            sys.stdin = TextIOWrapper(BytesIO(source.encode(\"utf8\")), encoding=\"utf8\")\n            sys.stdout = TextIOWrapper(BytesIO(), encoding=\"utf8\")\n            sys.stdin.buffer.name = \"<stdin>\"  # type: ignore\n            black.format_stdin_to_stdout(\n                line_length=ll, fast=True, write_back=black.WriteBack.YES\n            )\n            sys.stdout.seek(0)\n            actual = sys.stdout.read()\n        finally:\n            sys.stdin, sys.stdout = hold_stdin, hold_stdout\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 140,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_piping_diff#158",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_piping_diff(self)",
        "snippet": "    def test_piping_diff(self) -> None:\n        diff_header = re.compile(\n            rf\"(STDIN|STDOUT)\\t\\d\\d\\d\\d-\\d\\d-\\d\\d \"\n            rf\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d\\d\\d\\d \\+\\d\\d\\d\\d\"\n        )\n        source, _ = read_data(\"expression.py\")\n        expected, _ = read_data(\"expression.diff\")\n        hold_stdin, hold_stdout = sys.stdin, sys.stdout\n        try:\n            sys.stdin = TextIOWrapper(BytesIO(source.encode(\"utf8\")), encoding=\"utf8\")\n            sys.stdout = TextIOWrapper(BytesIO(), encoding=\"utf8\")\n            black.format_stdin_to_stdout(\n                line_length=ll, fast=True, write_back=black.WriteBack.DIFF\n            )\n            sys.stdout.seek(0)\n            actual = sys.stdout.read()\n            actual = diff_header.sub(\"[Deterministic header]\", actual)\n        finally:\n            sys.stdin, sys.stdout = hold_stdin, hold_stdout\n        actual = actual.rstrip() + \"\\n\"  # the diff output has a trailing space\n        self.assertEqual(expected, actual)",
        "begin_line": 158,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_setup#181",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_setup(self)",
        "snippet": "    def test_setup(self) -> None:\n        source, expected = read_data(\"../setup\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        self.assertFalse(ff(THIS_DIR / \"..\" / \"setup.py\"))",
        "begin_line": 181,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_function#190",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_function(self)",
        "snippet": "    def test_function(self) -> None:\n        source, expected = read_data(\"function\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 190,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_function2#198",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_function2(self)",
        "snippet": "    def test_function2(self) -> None:\n        source, expected = read_data(\"function2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 198,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_expression#206",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_expression(self)",
        "snippet": "    def test_expression(self) -> None:\n        source, expected = read_data(\"expression\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 206,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_expression_ff#213",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_expression_ff(self)",
        "snippet": "    def test_expression_ff(self) -> None:\n        source, expected = read_data(\"expression\")\n        tmp_file = Path(black.dump_to_file(source))\n        try:\n            self.assertTrue(ff(tmp_file, write_back=black.WriteBack.YES))\n            with open(tmp_file, encoding=\"utf8\") as f:\n                actual = f.read()\n        finally:\n            os.unlink(tmp_file)\n        self.assertFormatEqual(expected, actual)\n        with patch(\"black.dump_to_file\", dump_to_stderr):\n            black.assert_equivalent(source, actual)\n            black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 213,
        "end_line": 225,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_expression_diff#227",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_expression_diff(self)",
        "snippet": "    def test_expression_diff(self) -> None:\n        source, _ = read_data(\"expression.py\")\n        expected, _ = read_data(\"expression.diff\")\n        tmp_file = Path(black.dump_to_file(source))\n        diff_header = re.compile(\n            rf\"{re.escape(str(tmp_file))}\\t\\d\\d\\d\\d-\\d\\d-\\d\\d \"\n            rf\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d\\d\\d\\d \\+\\d\\d\\d\\d\"\n        )\n        hold_stdout = sys.stdout\n        try:\n            sys.stdout = TextIOWrapper(BytesIO(), encoding=\"utf8\")\n            self.assertTrue(ff(tmp_file, write_back=black.WriteBack.DIFF))\n            sys.stdout.seek(0)\n            actual = sys.stdout.read()\n            actual = diff_header.sub(\"[Deterministic header]\", actual)\n        finally:\n            sys.stdout = hold_stdout\n            os.unlink(tmp_file)\n        actual = actual.rstrip() + \"\\n\"  # the diff output has a trailing space\n        if expected != actual:\n            dump = black.dump_to_file(actual)\n            msg = (\n                f\"Expected diff isn't equal to the actual. If you made changes \"\n                f\"to expression.py and this is an anticipated difference, \"\n                f\"overwrite tests/expression.diff with {dump}\"\n            )\n            self.assertEqual(expected, actual, msg)",
        "begin_line": 227,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_fstring#256",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_fstring(self)",
        "snippet": "    def test_fstring(self) -> None:\n        source, expected = read_data(\"fstring\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 256,
        "end_line": 261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_string_quotes#264",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_string_quotes(self)",
        "snippet": "    def test_string_quotes(self) -> None:\n        source, expected = read_data(\"string_quotes\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        mode = black.FileMode.NO_STRING_NORMALIZATION\n        not_normalized = fs(source, mode=mode)\n        self.assertFormatEqual(source, not_normalized)\n        black.assert_equivalent(source, not_normalized)\n        black.assert_stable(source, not_normalized, line_length=ll, mode=mode)",
        "begin_line": 264,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_slices#277",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_slices(self)",
        "snippet": "    def test_slices(self) -> None:\n        source, expected = read_data(\"slices\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments#285",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments(self)",
        "snippet": "    def test_comments(self) -> None:\n        source, expected = read_data(\"comments\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 285,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments2#293",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments2(self)",
        "snippet": "    def test_comments2(self) -> None:\n        source, expected = read_data(\"comments2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 293,
        "end_line": 298,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments3#301",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments3(self)",
        "snippet": "    def test_comments3(self) -> None:\n        source, expected = read_data(\"comments3\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 301,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments4#309",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments4(self)",
        "snippet": "    def test_comments4(self) -> None:\n        source, expected = read_data(\"comments4\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 309,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments5#317",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments5(self)",
        "snippet": "    def test_comments5(self) -> None:\n        source, expected = read_data(\"comments5\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 317,
        "end_line": 322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cantfit#325",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cantfit(self)",
        "snippet": "    def test_cantfit(self) -> None:\n        source, expected = read_data(\"cantfit\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_import_spacing#333",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_import_spacing(self)",
        "snippet": "    def test_import_spacing(self) -> None:\n        source, expected = read_data(\"import_spacing\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 333,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_composition#341",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_composition(self)",
        "snippet": "    def test_composition(self) -> None:\n        source, expected = read_data(\"composition\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 341,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_lines#349",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_lines(self)",
        "snippet": "    def test_empty_lines(self) -> None:\n        source, expected = read_data(\"empty_lines\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 349,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_string_prefixes#357",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_string_prefixes(self)",
        "snippet": "    def test_string_prefixes(self) -> None:\n        source, expected = read_data(\"string_prefixes\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 357,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_python2#365",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_python2(self)",
        "snippet": "    def test_python2(self) -> None:\n        source, expected = read_data(\"python2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        # black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 365,
        "end_line": 370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_python2_unicode_literals#373",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_python2_unicode_literals(self)",
        "snippet": "    def test_python2_unicode_literals(self) -> None:\n        source, expected = read_data(\"python2_unicode_literals\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 373,
        "end_line": 377,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_stub#380",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_stub(self)",
        "snippet": "    def test_stub(self) -> None:\n        mode = black.FileMode.PYI\n        source, expected = read_data(\"stub.pyi\")\n        actual = fs(source, mode=mode)\n        self.assertFormatEqual(expected, actual)\n        black.assert_stable(source, actual, line_length=ll, mode=mode)",
        "begin_line": 380,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_fmtonoff#388",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_fmtonoff(self)",
        "snippet": "    def test_fmtonoff(self) -> None:\n        source, expected = read_data(\"fmtonoff\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 388,
        "end_line": 393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_remove_empty_parentheses_after_class#396",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_remove_empty_parentheses_after_class(self)",
        "snippet": "    def test_remove_empty_parentheses_after_class(self) -> None:\n        source, expected = read_data(\"class_blank_parentheses\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 396,
        "end_line": 401,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_new_line_between_class_and_code#404",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_new_line_between_class_and_code(self)",
        "snippet": "    def test_new_line_between_class_and_code(self) -> None:\n        source, expected = read_data(\"class_methods_new_line\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 404,
        "end_line": 409,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_report_verbose#411",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_report_verbose(self)",
        "snippet": "    def test_report_verbose(self) -> None:\n        report = black.Report(verbose=True)\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            report.done(Path(\"f1\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"f1 already well formatted, good job.\")\n            self.assertEqual(unstyle(str(report)), \"1 file left unchanged.\")\n            self.assertEqual(report.return_code, 0)\n            report.done(Path(\"f2\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"reformatted f2\")\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 1 file left unchanged.\"\n            )\n            report.done(Path(\"f3\"), black.Changed.CACHED)\n            self.assertEqual(len(out_lines), 3)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(\n                out_lines[-1], \"f3 wasn't modified on disk since last run.\"\n            )\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 2 files left unchanged.\"\n            )\n            self.assertEqual(report.return_code, 0)\n            report.check = True\n            self.assertEqual(report.return_code, 1)\n            report.check = False\n            report.failed(Path(\"e1\"), \"boom\")\n            self.assertEqual(len(out_lines), 3)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(err_lines[-1], \"error: cannot format e1: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"1 file reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f3\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 4)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(out_lines[-1], \"reformatted f3\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.failed(Path(\"e2\"), \"boom\")\n            self.assertEqual(len(out_lines), 4)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(err_lines[-1], \"error: cannot format e2: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.path_ignored(Path(\"wat\"), \"no match\")\n            self.assertEqual(len(out_lines), 5)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(out_lines[-1], \"wat ignored: no match\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f4\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 6)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(out_lines[-1], \"f4 already well formatted, good job.\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 3 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.check = True\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files would be reformatted, 3 files would be left unchanged, \"\n                \"2 files would fail to reformat.\",\n            )",
        "begin_line": 411,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#416",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 416,
        "end_line": 417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#419",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 419,
        "end_line": 420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_report_quiet#506",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_report_quiet(self)",
        "snippet": "    def test_report_quiet(self) -> None:\n        report = black.Report(quiet=True)\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            report.done(Path(\"f1\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(unstyle(str(report)), \"1 file left unchanged.\")\n            self.assertEqual(report.return_code, 0)\n            report.done(Path(\"f2\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 1 file left unchanged.\"\n            )\n            report.done(Path(\"f3\"), black.Changed.CACHED)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 2 files left unchanged.\"\n            )\n            self.assertEqual(report.return_code, 0)\n            report.check = True\n            self.assertEqual(report.return_code, 1)\n            report.check = False\n            report.failed(Path(\"e1\"), \"boom\")\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(err_lines[-1], \"error: cannot format e1: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"1 file reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f3\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.failed(Path(\"e2\"), \"boom\")\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(err_lines[-1], \"error: cannot format e2: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.path_ignored(Path(\"wat\"), \"no match\")\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f4\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 3 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.check = True\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files would be reformatted, 3 files would be left unchanged, \"\n                \"2 files would fail to reformat.\",\n            )",
        "begin_line": 506,
        "end_line": 591,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#511",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 511,
        "end_line": 512,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#514",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 514,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_report_normal#593",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_report_normal(self)",
        "snippet": "    def test_report_normal(self) -> None:\n        report = black.Report()\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            report.done(Path(\"f1\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(unstyle(str(report)), \"1 file left unchanged.\")\n            self.assertEqual(report.return_code, 0)\n            report.done(Path(\"f2\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"reformatted f2\")\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 1 file left unchanged.\"\n            )\n            report.done(Path(\"f3\"), black.Changed.CACHED)\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"reformatted f2\")\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 2 files left unchanged.\"\n            )\n            self.assertEqual(report.return_code, 0)\n            report.check = True\n            self.assertEqual(report.return_code, 1)\n            report.check = False\n            report.failed(Path(\"e1\"), \"boom\")\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(err_lines[-1], \"error: cannot format e1: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"1 file reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f3\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(out_lines[-1], \"reformatted f3\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.failed(Path(\"e2\"), \"boom\")\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(err_lines[-1], \"error: cannot format e2: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.path_ignored(Path(\"wat\"), \"no match\")\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f4\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 3 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.check = True\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files would be reformatted, 3 files would be left unchanged, \"\n                \"2 files would fail to reformat.\",\n            )",
        "begin_line": 593,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#598",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 598,
        "end_line": 599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#601",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 601,
        "end_line": 602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_is_python36#683",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_is_python36(self)",
        "snippet": "    def test_is_python36(self) -> None:\n        node = black.lib2to3_parse(\"def f(*, arg): ...\\n\")\n        self.assertFalse(black.is_python36(node))\n        node = black.lib2to3_parse(\"def f(*, arg,): ...\\n\")\n        self.assertTrue(black.is_python36(node))\n        node = black.lib2to3_parse(\"def f(*, arg): f'string'\\n\")\n        self.assertTrue(black.is_python36(node))\n        source, expected = read_data(\"function\")\n        node = black.lib2to3_parse(source)\n        self.assertTrue(black.is_python36(node))\n        node = black.lib2to3_parse(expected)\n        self.assertTrue(black.is_python36(node))\n        source, expected = read_data(\"expression\")\n        node = black.lib2to3_parse(source)\n        self.assertFalse(black.is_python36(node))\n        node = black.lib2to3_parse(expected)\n        self.assertFalse(black.is_python36(node))",
        "begin_line": 683,
        "end_line": 699,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_get_future_imports#701",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_get_future_imports(self)",
        "snippet": "    def test_get_future_imports(self) -> None:\n        node = black.lib2to3_parse(\"\\n\")\n        self.assertEqual(set(), black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from __future__ import black\\n\")\n        self.assertEqual({\"black\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from __future__ import multiple, imports\\n\")\n        self.assertEqual({\"multiple\", \"imports\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from __future__ import (parenthesized, imports)\\n\")\n        self.assertEqual({\"parenthesized\", \"imports\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\n            \"from __future__ import multiple\\nfrom __future__ import imports\\n\"\n        )\n        self.assertEqual({\"multiple\", \"imports\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"# comment\\nfrom __future__ import black\\n\")\n        self.assertEqual({\"black\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse('\"\"\"docstring\"\"\"\\nfrom __future__ import black\\n')\n        self.assertEqual({\"black\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"some(other, code)\\nfrom __future__ import black\\n\")\n        self.assertEqual(set(), black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from some.module import black\\n\")\n        self.assertEqual(set(), black.get_future_imports(node))",
        "begin_line": 701,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_debug_visitor#723",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_debug_visitor(self)",
        "snippet": "    def test_debug_visitor(self) -> None:\n        source, _ = read_data(\"debug_visitor.py\")\n        expected, _ = read_data(\"debug_visitor.out\")\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            black.DebugVisitor.show(source)\n        actual = \"\\n\".join(out_lines) + \"\\n\"\n        log_name = \"\"\n        if expected != actual:\n            log_name = black.dump_to_file(*out_lines)\n        self.assertEqual(\n            expected,\n            actual,\n            f\"AST print out is different. Actual version dumped to {log_name}\",\n        )",
        "begin_line": 723,
        "end_line": 745,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#729",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 729,
        "end_line": 730,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#732",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 732,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_format_file_contents#747",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_format_file_contents(self)",
        "snippet": "    def test_format_file_contents(self) -> None:\n        empty = \"\"\n        with self.assertRaises(black.NothingChanged):\n            black.format_file_contents(empty, line_length=ll, fast=False)\n        just_nl = \"\\n\"\n        with self.assertRaises(black.NothingChanged):\n            black.format_file_contents(just_nl, line_length=ll, fast=False)\n        same = \"l = [1, 2, 3]\\n\"\n        with self.assertRaises(black.NothingChanged):\n            black.format_file_contents(same, line_length=ll, fast=False)\n        different = \"l = [1,2,3]\"\n        expected = same\n        actual = black.format_file_contents(different, line_length=ll, fast=False)\n        self.assertEqual(expected, actual)\n        invalid = \"return if you can\"\n        with self.assertRaises(ValueError) as e:\n            black.format_file_contents(invalid, line_length=ll, fast=False)\n        self.assertEqual(str(e.exception), \"Cannot parse: 1:7: return if you can\")",
        "begin_line": 747,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_endmarker#766",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_endmarker(self)",
        "snippet": "    def test_endmarker(self) -> None:\n        n = black.lib2to3_parse(\"\\n\")\n        self.assertEqual(n.type, black.syms.file_input)\n        self.assertEqual(len(n.children), 1)\n        self.assertEqual(n.children[0].type, black.token.ENDMARKER)",
        "begin_line": 766,
        "end_line": 770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_assertFormatEqual#773",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_assertFormatEqual(self)",
        "snippet": "    def test_assertFormatEqual(self) -> None:\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            with self.assertRaises(AssertionError):\n                self.assertFormatEqual(\"l = [1, 2, 3]\", \"l = [1, 2, 3,]\")\n\n        out_str = \"\".join(out_lines)\n        self.assertTrue(\"Expected tree:\" in out_str)\n        self.assertTrue(\"Actual tree:\" in out_str)\n        self.assertEqual(\"\".join(err_lines), \"\")",
        "begin_line": 773,
        "end_line": 790,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#777",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 777,
        "end_line": 778,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#780",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 780,
        "end_line": 781,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cache_broken_file#792",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cache_broken_file(self)",
        "snippet": "    def test_cache_broken_file(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            cache_file = black.get_cache_file(black.DEFAULT_LINE_LENGTH, mode)\n            with cache_file.open(\"w\") as fobj:\n                fobj.write(\"this is not a pickle\")\n            self.assertEqual(black.read_cache(black.DEFAULT_LINE_LENGTH, mode), {})\n            src = (workspace / \"test.py\").resolve()\n            with src.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            result = CliRunner().invoke(black.main, [str(src)])\n            self.assertEqual(result.exit_code, 0)\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertIn(src, cache)",
        "begin_line": 792,
        "end_line": 805,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cache_single_file_already_cached#807",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cache_single_file_already_cached(self)",
        "snippet": "    def test_cache_single_file_already_cached(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            src = (workspace / \"test.py\").resolve()\n            with src.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            black.write_cache({}, [src], black.DEFAULT_LINE_LENGTH, mode)\n            result = CliRunner().invoke(black.main, [str(src)])\n            self.assertEqual(result.exit_code, 0)\n            with src.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), \"print('hello')\")",
        "begin_line": 807,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cache_multiple_files#820",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cache_multiple_files(self)",
        "snippet": "    def test_cache_multiple_files(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace, patch(\n            \"black.ProcessPoolExecutor\", new=ThreadPoolExecutor\n        ):\n            one = (workspace / \"one.py\").resolve()\n            with one.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            two = (workspace / \"two.py\").resolve()\n            with two.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            black.write_cache({}, [one], black.DEFAULT_LINE_LENGTH, mode)\n            result = CliRunner().invoke(black.main, [str(workspace)])\n            self.assertEqual(result.exit_code, 0)\n            with one.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), \"print('hello')\")\n            with two.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), 'print(\"hello\")\\n')\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertIn(one, cache)\n            self.assertIn(two, cache)",
        "begin_line": 820,
        "end_line": 840,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_no_cache_when_writeback_diff#842",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_no_cache_when_writeback_diff(self)",
        "snippet": "    def test_no_cache_when_writeback_diff(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            src = (workspace / \"test.py\").resolve()\n            with src.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            result = CliRunner().invoke(black.main, [str(src), \"--diff\"])\n            self.assertEqual(result.exit_code, 0)\n            cache_file = black.get_cache_file(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertFalse(cache_file.exists())",
        "begin_line": 842,
        "end_line": 851,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_no_cache_when_stdin#853",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_no_cache_when_stdin(self)",
        "snippet": "    def test_no_cache_when_stdin(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir():\n            result = CliRunner().invoke(black.main, [\"-\"], input=\"print('hello')\")\n            self.assertEqual(result.exit_code, 0)\n            cache_file = black.get_cache_file(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertFalse(cache_file.exists())",
        "begin_line": 853,
        "end_line": 859,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_read_cache_no_cachefile#861",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_read_cache_no_cachefile(self)",
        "snippet": "    def test_read_cache_no_cachefile(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir():\n            self.assertEqual(black.read_cache(black.DEFAULT_LINE_LENGTH, mode), {})",
        "begin_line": 861,
        "end_line": 864,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_write_cache_read_cache#866",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_write_cache_read_cache(self)",
        "snippet": "    def test_write_cache_read_cache(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            src = (workspace / \"test.py\").resolve()\n            src.touch()\n            black.write_cache({}, [src], black.DEFAULT_LINE_LENGTH, mode)\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertIn(src, cache)\n            self.assertEqual(cache[src], black.get_cache_info(src))",
        "begin_line": 866,
        "end_line": 874,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_filter_cached#876",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_filter_cached(self)",
        "snippet": "    def test_filter_cached(self) -> None:\n        with TemporaryDirectory() as workspace:\n            path = Path(workspace)\n            uncached = (path / \"uncached\").resolve()\n            cached = (path / \"cached\").resolve()\n            cached_but_changed = (path / \"changed\").resolve()\n            uncached.touch()\n            cached.touch()\n            cached_but_changed.touch()\n            cache = {cached: black.get_cache_info(cached), cached_but_changed: (0.0, 0)}\n            todo, done = black.filter_cached(\n                cache, {uncached, cached, cached_but_changed}\n            )\n            self.assertEqual(todo, {uncached, cached_but_changed})\n            self.assertEqual(done, {cached})",
        "begin_line": 876,
        "end_line": 890,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_write_cache_creates_directory_if_needed#892",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_write_cache_creates_directory_if_needed(self)",
        "snippet": "    def test_write_cache_creates_directory_if_needed(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir(exists=False) as workspace:\n            self.assertFalse(workspace.exists())\n            black.write_cache({}, [], black.DEFAULT_LINE_LENGTH, mode)\n            self.assertTrue(workspace.exists())",
        "begin_line": 892,
        "end_line": 897,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_failed_formatting_does_not_get_cached#900",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_failed_formatting_does_not_get_cached(self)",
        "snippet": "    def test_failed_formatting_does_not_get_cached(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace, patch(\n            \"black.ProcessPoolExecutor\", new=ThreadPoolExecutor\n        ):\n            failing = (workspace / \"failing.py\").resolve()\n            with failing.open(\"w\") as fobj:\n                fobj.write(\"not actually python\")\n            clean = (workspace / \"clean.py\").resolve()\n            with clean.open(\"w\") as fobj:\n                fobj.write('print(\"hello\")\\n')\n            result = CliRunner().invoke(black.main, [str(workspace)])\n            self.assertEqual(result.exit_code, 123)\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertNotIn(failing, cache)\n            self.assertIn(clean, cache)",
        "begin_line": 900,
        "end_line": 915,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_write_cache_write_fail#917",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_write_cache_write_fail(self)",
        "snippet": "    def test_write_cache_write_fail(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir(), patch.object(Path, \"open\") as mock:\n            mock.side_effect = OSError\n            black.write_cache({}, [], black.DEFAULT_LINE_LENGTH, mode)",
        "begin_line": 917,
        "end_line": 921,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_check_diff_use_together#924",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_check_diff_use_together(self)",
        "snippet": "    def test_check_diff_use_together(self) -> None:\n        with cache_dir():\n            # Files which will be reformatted.\n            src1 = (THIS_DIR / \"string_quotes.py\").resolve()\n            result = CliRunner().invoke(black.main, [str(src1), \"--diff\", \"--check\"])\n            self.assertEqual(result.exit_code, 1)\n\n            # Files which will not be reformatted.\n            src2 = (THIS_DIR / \"composition.py\").resolve()\n            result = CliRunner().invoke(black.main, [str(src2), \"--diff\", \"--check\"])\n            self.assertEqual(result.exit_code, 0)\n\n            # Multi file command.\n            result = CliRunner().invoke(\n                black.main, [str(src1), str(src2), \"--diff\", \"--check\"]\n            )\n            self.assertEqual(result.exit_code, 1, result.output)",
        "begin_line": 924,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_no_files#942",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_no_files(self)",
        "snippet": "    def test_no_files(self) -> None:\n        with cache_dir():\n            # Without an argument, black exits with error code 0.\n            result = CliRunner().invoke(black.main, [])\n            self.assertEqual(result.exit_code, 0)",
        "begin_line": 942,
        "end_line": 946,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_broken_symlink#948",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_broken_symlink(self)",
        "snippet": "    def test_broken_symlink(self) -> None:\n        with cache_dir() as workspace:\n            symlink = workspace / \"broken_link.py\"\n            try:\n                symlink.symlink_to(\"nonexistent.py\")\n            except OSError as e:\n                self.skipTest(f\"Can't create symlinks: {e}\")\n            result = CliRunner().invoke(black.main, [str(workspace.resolve())])\n            self.assertEqual(result.exit_code, 0)",
        "begin_line": 948,
        "end_line": 956,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_read_cache_line_lengths#958",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_read_cache_line_lengths(self)",
        "snippet": "    def test_read_cache_line_lengths(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            path = (workspace / \"file.py\").resolve()\n            path.touch()\n            black.write_cache({}, [path], 1, mode)\n            one = black.read_cache(1, mode)\n            self.assertIn(path, one)\n            two = black.read_cache(2, mode)\n            self.assertNotIn(path, two)",
        "begin_line": 958,
        "end_line": 967,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_single_file_force_pyi#969",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_single_file_force_pyi(self)",
        "snippet": "    def test_single_file_force_pyi(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        pyi_mode = black.FileMode.PYI\n        contents, expected = read_data(\"force_pyi\")\n        with cache_dir() as workspace:\n            path = (workspace / \"file.py\").resolve()\n            with open(path, \"w\") as fh:\n                fh.write(contents)\n            result = CliRunner().invoke(black.main, [str(path), \"--pyi\"])\n            self.assertEqual(result.exit_code, 0)\n            with open(path, \"r\") as fh:\n                actual = fh.read()\n            # verify cache with --pyi is separate\n            pyi_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, pyi_mode)\n            self.assertIn(path, pyi_cache)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            self.assertNotIn(path, normal_cache)\n        self.assertEqual(actual, expected)",
        "begin_line": 969,
        "end_line": 986,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_multi_file_force_pyi#989",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_multi_file_force_pyi(self)",
        "snippet": "    def test_multi_file_force_pyi(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        pyi_mode = black.FileMode.PYI\n        contents, expected = read_data(\"force_pyi\")\n        with cache_dir() as workspace:\n            paths = [\n                (workspace / \"file1.py\").resolve(),\n                (workspace / \"file2.py\").resolve(),\n            ]\n            for path in paths:\n                with open(path, \"w\") as fh:\n                    fh.write(contents)\n            result = CliRunner().invoke(black.main, [str(p) for p in paths] + [\"--pyi\"])\n            self.assertEqual(result.exit_code, 0)\n            for path in paths:\n                with open(path, \"r\") as fh:\n                    actual = fh.read()\n                self.assertEqual(actual, expected)\n            # verify cache with --pyi is separate\n            pyi_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, pyi_mode)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            for path in paths:\n                self.assertIn(path, pyi_cache)\n                self.assertNotIn(path, normal_cache)",
        "begin_line": 989,
        "end_line": 1012,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_pipe_force_pyi#1014",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_pipe_force_pyi(self)",
        "snippet": "    def test_pipe_force_pyi(self) -> None:\n        source, expected = read_data(\"force_pyi\")\n        result = CliRunner().invoke(black.main, [\"-\", \"-q\", \"--pyi\"], input=source)\n        self.assertEqual(result.exit_code, 0)\n        actual = result.output\n        self.assertFormatEqual(actual, expected)",
        "begin_line": 1014,
        "end_line": 1019,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_single_file_force_py36#1021",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_single_file_force_py36(self)",
        "snippet": "    def test_single_file_force_py36(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        py36_mode = black.FileMode.PYTHON36\n        source, expected = read_data(\"force_py36\")\n        with cache_dir() as workspace:\n            path = (workspace / \"file.py\").resolve()\n            with open(path, \"w\") as fh:\n                fh.write(source)\n            result = CliRunner().invoke(black.main, [str(path), \"--py36\"])\n            self.assertEqual(result.exit_code, 0)\n            with open(path, \"r\") as fh:\n                actual = fh.read()\n            # verify cache with --py36 is separate\n            py36_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, py36_mode)\n            self.assertIn(path, py36_cache)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            self.assertNotIn(path, normal_cache)\n        self.assertEqual(actual, expected)",
        "begin_line": 1021,
        "end_line": 1038,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_multi_file_force_py36#1041",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_multi_file_force_py36(self)",
        "snippet": "    def test_multi_file_force_py36(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        py36_mode = black.FileMode.PYTHON36\n        source, expected = read_data(\"force_py36\")\n        with cache_dir() as workspace:\n            paths = [\n                (workspace / \"file1.py\").resolve(),\n                (workspace / \"file2.py\").resolve(),\n            ]\n            for path in paths:\n                with open(path, \"w\") as fh:\n                    fh.write(source)\n            result = CliRunner().invoke(\n                black.main, [str(p) for p in paths] + [\"--py36\"]\n            )\n            self.assertEqual(result.exit_code, 0)\n            for path in paths:\n                with open(path, \"r\") as fh:\n                    actual = fh.read()\n                self.assertEqual(actual, expected)\n            # verify cache with --py36 is separate\n            pyi_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, py36_mode)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            for path in paths:\n                self.assertIn(path, pyi_cache)\n                self.assertNotIn(path, normal_cache)",
        "begin_line": 1041,
        "end_line": 1066,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_pipe_force_py36#1068",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_pipe_force_py36(self)",
        "snippet": "    def test_pipe_force_py36(self) -> None:\n        source, expected = read_data(\"force_py36\")\n        result = CliRunner().invoke(black.main, [\"-\", \"-q\", \"--py36\"], input=source)\n        self.assertEqual(result.exit_code, 0)\n        actual = result.output\n        self.assertFormatEqual(actual, expected)",
        "begin_line": 1068,
        "end_line": 1073,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_include_exclude#1075",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_include_exclude(self)",
        "snippet": "    def test_include_exclude(self) -> None:\n        path = THIS_DIR / \"include_exclude_tests\"\n        include = re.compile(r\"\\.pyi?$\")\n        exclude = re.compile(r\"/exclude/|/\\.definitely_exclude/\")\n        report = black.Report()\n        sources: List[Path] = []\n        expected = [\n            Path(THIS_DIR / \"include_exclude_tests/b/dont_exclude/a.py\"),\n            Path(THIS_DIR / \"include_exclude_tests/b/dont_exclude/a.pyi\"),\n        ]\n        this_abs = THIS_DIR.resolve()\n        sources.extend(\n            black.gen_python_files_in_dir(path, this_abs, include, exclude, report)\n        )\n        self.assertEqual(sorted(expected), sorted(sources))",
        "begin_line": 1075,
        "end_line": 1089,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_include#1091",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_include(self)",
        "snippet": "    def test_empty_include(self) -> None:\n        path = THIS_DIR / \"include_exclude_tests\"\n        report = black.Report()\n        empty = re.compile(r\"\")\n        sources: List[Path] = []\n        expected = [\n            Path(path / \"b/exclude/a.pie\"),\n            Path(path / \"b/exclude/a.py\"),\n            Path(path / \"b/exclude/a.pyi\"),\n            Path(path / \"b/dont_exclude/a.pie\"),\n            Path(path / \"b/dont_exclude/a.py\"),\n            Path(path / \"b/dont_exclude/a.pyi\"),\n            Path(path / \"b/.definitely_exclude/a.pie\"),\n            Path(path / \"b/.definitely_exclude/a.py\"),\n            Path(path / \"b/.definitely_exclude/a.pyi\"),\n        ]\n        this_abs = THIS_DIR.resolve()\n        sources.extend(\n            black.gen_python_files_in_dir(\n                path, this_abs, empty, re.compile(black.DEFAULT_EXCLUDES), report\n            )\n        )\n        self.assertEqual(sorted(expected), sorted(sources))",
        "begin_line": 1091,
        "end_line": 1113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_exclude#1115",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_exclude(self)",
        "snippet": "    def test_empty_exclude(self) -> None:\n        path = THIS_DIR / \"include_exclude_tests\"\n        report = black.Report()\n        empty = re.compile(r\"\")\n        sources: List[Path] = []\n        expected = [\n            Path(path / \"b/dont_exclude/a.py\"),\n            Path(path / \"b/dont_exclude/a.pyi\"),\n            Path(path / \"b/exclude/a.py\"),\n            Path(path / \"b/exclude/a.pyi\"),\n            Path(path / \"b/.definitely_exclude/a.py\"),\n            Path(path / \"b/.definitely_exclude/a.pyi\"),\n        ]\n        this_abs = THIS_DIR.resolve()\n        sources.extend(\n            black.gen_python_files_in_dir(\n                path, this_abs, re.compile(black.DEFAULT_INCLUDES), empty, report\n            )\n        )\n        self.assertEqual(sorted(expected), sorted(sources))",
        "begin_line": 1115,
        "end_line": 1134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_invalid_include_exclude#1136",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_invalid_include_exclude(self)",
        "snippet": "    def test_invalid_include_exclude(self) -> None:\n        for option in [\"--include\", \"--exclude\"]:\n            result = CliRunner().invoke(black.main, [\"-\", option, \"**()(!!*)\"])\n            self.assertEqual(result.exit_code, 2)",
        "begin_line": 1136,
        "end_line": 1139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_preserves_line_endings#1141",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_preserves_line_endings(self)",
        "snippet": "    def test_preserves_line_endings(self) -> None:\n        with TemporaryDirectory() as workspace:\n            test_file = Path(workspace) / \"test.py\"\n            for nl in [\"\\n\", \"\\r\\n\"]:\n                contents = nl.join([\"def f(  ):\", \"    pass\"])\n                test_file.write_bytes(contents.encode())\n                ff(test_file, write_back=black.WriteBack.YES)\n                updated_contents: bytes = test_file.read_bytes()\n                self.assertIn(nl.encode(), updated_contents)  # type: ignore\n                if nl == \"\\n\":\n                    self.assertNotIn(b\"\\r\\n\", updated_contents)  # type: ignore",
        "begin_line": 1141,
        "end_line": 1151,
        "comment": "",
        "is_bug": false
    }
]