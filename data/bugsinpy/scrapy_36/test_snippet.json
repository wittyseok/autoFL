[
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object#15",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object(self)",
        "snippet": "    def test_load_object(self):\n        obj = load_object('scrapy.utils.misc.load_object')\n        assert obj is load_object\n        self.assertRaises(ImportError, load_object, 'nomodule999.mod.function')\n        self.assertRaises(NameError, load_object, 'scrapy.utils.misc.load_object999')",
        "begin_line": 15,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules#21",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules(self)",
        "snippet": "    def test_walk_modules(self):\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules',\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEqual(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n        ]\n        self.assertEqual(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod1')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEqual(set([m.__name__ for m in mods]), set(expected))\n\n        self.assertRaises(ImportError, walk_modules, 'nomodule999')",
        "begin_line": 21,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg#46",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg(self)",
        "snippet": "    def test_walk_modules_egg(self):\n        egg = os.path.join(os.path.dirname(__file__), 'test.egg')\n        sys.path.append(egg)\n        try:\n            mods = walk_modules('testegg')\n            expected = [\n                'testegg.spiders',\n                'testegg.spiders.a',\n                'testegg.spiders.b',\n                'testegg'\n            ]\n            self.assertEqual(set([m.__name__ for m in mods]), set(expected))\n        finally:\n            sys.path.remove(egg)",
        "begin_line": 46,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter#61",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a': 1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 61,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter#61",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.TestItem",
        "signature": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a': 1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 61,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_create_instance#80",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_create_instance(self)",
        "snippet": "    def test_create_instance(self):\n        settings = mock.MagicMock()\n        crawler = mock.MagicMock(spec_set=['settings'])\n        args = (True, 100.)\n        kwargs = {'key': 'val'}\n\n        def _test_with_settings(mock, settings):\n            create_instance(mock, settings, None, *args, **kwargs)\n            if hasattr(mock, 'from_crawler'):\n                self.assertEqual(mock.from_crawler.call_count, 0)\n            if hasattr(mock, 'from_settings'):\n                mock.from_settings.assert_called_once_with(settings, *args,\n                                                           **kwargs)\n                self.assertEqual(mock.call_count, 0)\n            else:\n                mock.assert_called_once_with(*args, **kwargs)\n\n        def _test_with_crawler(mock, settings, crawler):\n            create_instance(mock, settings, crawler, *args, **kwargs)\n            if hasattr(mock, 'from_crawler'):\n                mock.from_crawler.assert_called_once_with(crawler, *args,\n                                                          **kwargs)\n                if hasattr(mock, 'from_settings'):\n                    self.assertEqual(mock.from_settings.call_count, 0)\n                self.assertEqual(mock.call_count, 0)\n            elif hasattr(mock, 'from_settings'):\n                mock.from_settings.assert_called_once_with(settings, *args,\n                                                           **kwargs)\n                self.assertEqual(mock.call_count, 0)\n            else:\n                mock.assert_called_once_with(*args, **kwargs)\n\n        # Check usage of correct constructor using four mocks:\n        #   1. with no alternative constructors\n        #   2. with from_settings() constructor\n        #   3. with from_crawler() constructor\n        #   4. with from_settings() and from_crawler() constructor\n        spec_sets = (\n            ['__qualname__'],\n            ['__qualname__', 'from_settings'],\n            ['__qualname__', 'from_crawler'],\n            ['__qualname__', 'from_settings', 'from_crawler'],\n        )\n        for specs in spec_sets:\n            m = mock.MagicMock(spec_set=specs)\n            _test_with_settings(m, settings)\n            m.reset_mock()\n            _test_with_crawler(m, settings, crawler)\n\n        # Check adoption of crawler settings\n        m = mock.MagicMock(spec_set=['__qualname__', 'from_settings'])\n        create_instance(m, None, crawler, *args, **kwargs)\n        m.from_settings.assert_called_once_with(crawler.settings, *args,\n                                                **kwargs)\n\n        with self.assertRaises(ValueError):\n            create_instance(m, None, None)\n\n        m.from_settings.return_value = None\n        with self.assertRaises(TypeError):\n            create_instance(m, settings, None)",
        "begin_line": 80,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase._test_with_settings#86",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase._test_with_settings(mock, settings)",
        "snippet": "        def _test_with_settings(mock, settings):\n            create_instance(mock, settings, None, *args, **kwargs)\n            if hasattr(mock, 'from_crawler'):\n                self.assertEqual(mock.from_crawler.call_count, 0)\n            if hasattr(mock, 'from_settings'):\n                mock.from_settings.assert_called_once_with(settings, *args,\n                                                           **kwargs)\n                self.assertEqual(mock.call_count, 0)\n            else:\n                mock.assert_called_once_with(*args, **kwargs)",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase._test_with_crawler#97",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase._test_with_crawler(mock, settings, crawler)",
        "snippet": "        def _test_with_crawler(mock, settings, crawler):\n            create_instance(mock, settings, crawler, *args, **kwargs)\n            if hasattr(mock, 'from_crawler'):\n                mock.from_crawler.assert_called_once_with(crawler, *args,\n                                                          **kwargs)\n                if hasattr(mock, 'from_settings'):\n                    self.assertEqual(mock.from_settings.call_count, 0)\n                self.assertEqual(mock.call_count, 0)\n            elif hasattr(mock, 'from_settings'):\n                mock.from_settings.assert_called_once_with(settings, *args,\n                                                           **kwargs)\n                self.assertEqual(mock.call_count, 0)\n            else:\n                mock.assert_called_once_with(*args, **kwargs)",
        "begin_line": 97,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_set_environ#142",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_set_environ(self)",
        "snippet": "    def test_set_environ(self):\n        assert os.environ.get('some_test_environ') is None\n        with set_environ(some_test_environ='test_value'):\n            assert os.environ.get('some_test_environ') == 'test_value'\n        assert os.environ.get('some_test_environ') is None\n\n        os.environ['some_test_environ'] = 'test'\n        assert os.environ.get('some_test_environ') == 'test'\n        with set_environ(some_test_environ='test_value'):\n            assert os.environ.get('some_test_environ') == 'test_value'\n        assert os.environ.get('some_test_environ') == 'test'",
        "begin_line": 142,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    }
]