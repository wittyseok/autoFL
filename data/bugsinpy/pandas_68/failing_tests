coverage run -m pytest pandas/tests/arrays/interval/test_interval.py::TestMethods::test_shift
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/arrays/interval/test_interval.py F                          [100%]

=================================== FAILURES ===================================
____________________________ TestMethods.test_shift ____________________________

self = <pandas.tests.arrays.interval.test_interval.TestMethods object at 0x7f9d76f2db80>

    def test_shift(self):
        # https://github.com/pandas-dev/pandas/issues/31495
        a = IntervalArray.from_breaks([1, 2, 3])
>       result = a.shift()

pandas/tests/arrays/interval/test_interval.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/arrays/base.py:627: in shift
    empty = self._from_sequence(
pandas/core/arrays/interval.py:245: in _from_sequence
    return cls(scalars, dtype=dtype, copy=copy)
pandas/core/arrays/interval.py:178: in __new__
    return cls._simple_new(
pandas/core/arrays/interval.py:204: in _simple_new
    left = left.astype(dtype.subtype)
pandas/core/indexes/numeric.py:382: in astype
    arr = astype_nansafe(self.values, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

arr = array([nan]), dtype = dtype('int64'), copy = True, skipna = False

    def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):
        """
        Cast the elements of an array to a given dtype a nan-safe manner.
    
        Parameters
        ----------
        arr : ndarray
        dtype : np.dtype
        copy : bool, default True
            If False, a view will be attempted but may fail, if
            e.g. the item sizes don't align.
        skipna: bool, default False
            Whether or not we should skip NaN when casting as a string-type.
    
        Raises
        ------
        ValueError
            The dtype was a datetime64/timedelta64 dtype, but it had no unit.
        """
    
        # dispatch on extension dtype if needed
        if is_extension_array_dtype(dtype):
            return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)
    
        if not isinstance(dtype, np.dtype):
            dtype = pandas_dtype(dtype)
    
        if issubclass(dtype.type, str):
            return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)
    
        elif is_datetime64_dtype(arr):
            if is_object_dtype(dtype):
                return tslib.ints_to_pydatetime(arr.view(np.int64))
            elif dtype == np.int64:
                if isna(arr).any():
                    raise ValueError("Cannot convert NaT values to integer")
                return arr.view(dtype)
    
            # allow frequency conversions
            if dtype.kind == "M":
                return arr.astype(dtype)
    
            raise TypeError(f"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]")
    
        elif is_timedelta64_dtype(arr):
            if is_object_dtype(dtype):
                return tslibs.ints_to_pytimedelta(arr.view(np.int64))
            elif dtype == np.int64:
                if isna(arr).any():
                    raise ValueError("Cannot convert NaT values to integer")
                return arr.view(dtype)
    
            if dtype not in [_INT64_DTYPE, _TD_DTYPE]:
    
                # allow frequency conversions
                # we return a float here!
                if dtype.kind == "m":
                    mask = isna(arr)
                    result = arr.astype(dtype).astype(np.float64)
                    result[mask] = np.nan
                    return result
            elif dtype == _TD_DTYPE:
                return arr.astype(_TD_DTYPE, copy=copy)
    
            raise TypeError(f"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]")
    
        elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):
    
            if not np.isfinite(arr).all():
>               raise ValueError("Cannot convert non-finite values (NA or inf) to integer")
E               ValueError: Cannot convert non-finite values (NA or inf) to integer

pandas/core/dtypes/cast.py:868: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/interval/test_interval.py::TestMethods::test_shift
============================== 1 failed in 0.39s ===============================
