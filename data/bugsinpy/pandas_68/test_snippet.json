[
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.left_right_dtypes#33",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.left_right_dtypes(request)",
        "snippet": "def left_right_dtypes(request):\n    \"\"\"\n    Fixture for building an IntervalArray from various dtypes\n    \"\"\"\n    return request.param",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestAttributes.test_is_empty#54",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestAttributes",
        "signature": "pandas.tests.arrays.interval.test_interval.TestAttributes.test_is_empty(self, constructor, left, right, closed)",
        "snippet": "    def test_is_empty(self, constructor, left, right, closed):\n        # GH27219\n        tuples = [(left, left), (left, right), np.nan]\n        expected = np.array([closed != \"both\", False, False])\n        result = constructor.from_tuples(tuples, closed=closed).is_empty\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_set_closed#64",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_set_closed(self, closed, new_closed)",
        "snippet": "    def test_set_closed(self, closed, new_closed):\n        # GH 21670\n        array = IntervalArray.from_breaks(range(10), closed=closed)\n        result = array.set_closed(new_closed)\n        expected = IntervalArray.from_breaks(range(10), closed=new_closed)\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_where_raises#78",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_where_raises(self, other)",
        "snippet": "    def test_where_raises(self, other):\n        ser = pd.Series(IntervalArray.from_breaks([1, 2, 3, 4], closed=\"left\"))\n        match = \"'value.closed' is 'right', expected 'left'.\"\n        with pytest.raises(ValueError, match=match):\n            ser.where([True, False, True], other=other)",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift#84",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift(self)",
        "snippet": "    def test_shift(self):\n        # https://github.com/pandas-dev/pandas/issues/31495\n        a = IntervalArray.from_breaks([1, 2, 3])\n        result = a.shift()\n        # int -> float\n        expected = IntervalArray.from_tuples([(np.nan, np.nan), (1.0, 2.0)])\n        tm.assert_interval_array_equal(result, expected)",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift_datetime#92",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestMethods",
        "signature": "pandas.tests.arrays.interval.test_interval.TestMethods.test_shift_datetime(self)",
        "snippet": "    def test_shift_datetime(self):\n        a = IntervalArray.from_breaks(pd.date_range(\"2000\", periods=4))\n        result = a.shift(2)\n        expected = a.take([-1, -1, 0], allow_fill=True)\n        tm.assert_interval_array_equal(result, expected)\n\n        result = a.shift(-1)\n        expected = a.take([1, 2, -1], allow_fill=True)\n        tm.assert_interval_array_equal(result, expected)",
        "begin_line": 92,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.TestSetitem.test_set_na#104",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval.TestSetitem",
        "signature": "pandas.tests.arrays.interval.test_interval.TestSetitem.test_set_na(self, left_right_dtypes)",
        "snippet": "    def test_set_na(self, left_right_dtypes):\n        left, right = left_right_dtypes\n        result = IntervalArray.from_arrays(left, right)\n        result[0] = np.nan\n\n        expected_left = Index([left._na_value] + list(left[1:]))\n        expected_right = Index([right._na_value] + list(right[1:]))\n        expected = IntervalArray.from_arrays(expected_left, expected_right)\n\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 104,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_repr#116",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_repr()",
        "snippet": "def test_repr():\n    # GH 25022\n    arr = IntervalArray.from_tuples([(0, 1), (1, 2)])\n    result = repr(arr)\n    expected = (\n        \"<IntervalArray>\\n\"\n        \"[(0, 1], (1, 2]]\\n\"\n        \"Length: 2, closed: right, dtype: interval[int64]\"\n    )\n    assert result == expected",
        "begin_line": 116,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_extension_type#136",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_extension_type()",
        "snippet": "def test_arrow_extension_type():\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    p1 = ArrowIntervalType(pa.int64(), \"left\")\n    p2 = ArrowIntervalType(pa.int64(), \"left\")\n    p3 = ArrowIntervalType(pa.int64(), \"right\")\n\n    assert p1.closed == \"left\"\n    assert p1 == p2\n    assert not p1 == p3\n    assert hash(p1) == hash(p2)\n    assert not hash(p1) == hash(p3)",
        "begin_line": 136,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_array#152",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_array()",
        "snippet": "def test_arrow_array():\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    intervals = pd.interval_range(1, 5, freq=1).array\n\n    result = pa.array(intervals)\n    assert isinstance(result.type, ArrowIntervalType)\n    assert result.type.closed == intervals.closed\n    assert result.type.subtype == pa.int64()\n    assert result.storage.field(\"left\").equals(pa.array([1, 2, 3, 4], type=\"int64\"))\n    assert result.storage.field(\"right\").equals(pa.array([2, 3, 4, 5], type=\"int64\"))\n\n    expected = pa.array([{\"left\": i, \"right\": i + 1} for i in range(1, 5)])\n    assert result.storage.equals(expected)\n\n    # convert to its storage type\n    result = pa.array(intervals, type=expected.type)\n    assert result.equals(expected)\n\n    # unsupported conversions\n    with pytest.raises(TypeError, match=\"Not supported to convert IntervalArray\"):\n        pa.array(intervals, type=\"float64\")\n\n    with pytest.raises(TypeError, match=\"different 'subtype'\"):\n        pa.array(intervals, type=ArrowIntervalType(pa.float64(), \"left\"))",
        "begin_line": 152,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_array_missing#181",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_array_missing()",
        "snippet": "def test_arrow_array_missing():\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    arr = IntervalArray.from_breaks([0, 1, 2, 3])\n    arr[1] = None\n\n    result = pa.array(arr)\n    assert isinstance(result.type, ArrowIntervalType)\n    assert result.type.closed == arr.closed\n    assert result.type.subtype == pa.float64()\n\n    # fields have missing values (not NaN)\n    left = pa.array([0.0, None, 2.0], type=\"float64\")\n    right = pa.array([1.0, None, 3.0], type=\"float64\")\n    assert result.storage.field(\"left\").equals(left)\n    assert result.storage.field(\"right\").equals(right)\n\n    # structarray itself also has missing values on the array level\n    vals = [\n        {\"left\": 0.0, \"right\": 1.0},\n        {\"left\": None, \"right\": None},\n        {\"left\": 2.0, \"right\": 3.0},\n    ]\n    expected = pa.StructArray.from_pandas(vals, mask=np.array([False, True, False]))\n    assert result.storage.equals(expected)",
        "begin_line": 181,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.interval.test_interval.test_arrow_table_roundtrip#215",
        "src_path": "pandas/tests/arrays/interval/test_interval.py",
        "class_name": "pandas.tests.arrays.interval.test_interval",
        "signature": "pandas.tests.arrays.interval.test_interval.test_arrow_table_roundtrip(breaks)",
        "snippet": "def test_arrow_table_roundtrip(breaks):\n    import pyarrow as pa\n    from pandas.core.arrays._arrow_utils import ArrowIntervalType\n\n    arr = IntervalArray.from_breaks(breaks)\n    arr[1] = None\n    df = pd.DataFrame({\"a\": arr})\n\n    table = pa.table(df)\n    assert isinstance(table.field(\"a\").type, ArrowIntervalType)\n    result = table.to_pandas()\n    assert isinstance(result[\"a\"].dtype, pd.IntervalDtype)\n    tm.assert_frame_equal(result, df)\n\n    table2 = pa.concat_tables([table, table])\n    result = table2.to_pandas()\n    expected = pd.concat([df, df], ignore_index=True)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 215,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#24",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#31",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DecimalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#49",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#65",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#109",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            item = pd.api.indexers.check_array_indexer(self, item)\n            return type(self)(self._data[item])",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#130",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#146",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 146,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#156",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    }
]