[
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.setUp#17",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.crawler = mock.MagicMock()\n        self.crawler.settings = Settings()\n        self.crawler.engine.download = mock.MagicMock()",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.tearDown#22",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        del self.crawler",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_settings#25",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_settings(self)",
        "snippet": "    def test_robotstxt_settings(self):\n        self.crawler.settings = Settings()\n        self.crawler.settings.set('USER_AGENT', 'CustomAgent')\n        self.assertRaises(NotConfigured, RobotsTxtMiddleware, self.crawler)",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest._get_successful_crawler#30",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest._get_successful_crawler(self)",
        "snippet": "    def _get_successful_crawler(self):\n        crawler = self.crawler\n        crawler.settings.set('ROBOTSTXT_OBEY', True)\n        ROBOTS = re.sub(b'^\\s+(?m)', b'', b'''\n        User-Agent: *\n        Disallow: /admin/\n        Disallow: /static/\n        ''')\n        response = TextResponse('http://site.local/robots.txt', body=ROBOTS)\n        def return_response(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.callback, response)\n            return deferred\n        crawler.engine.download.side_effect = return_response\n        return crawler",
        "begin_line": 30,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_response#39",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_response(request, spider)",
        "snippet": "        def return_response(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.callback, response)\n            return deferred",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt#46",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt(self)",
        "snippet": "    def test_robotstxt(self):\n        middleware = RobotsTxtMiddleware(self._get_successful_crawler())\n        return DeferredList([\n            self.assertNotIgnored(Request('http://site.local/allowed'), middleware),\n            self.assertIgnored(Request('http://site.local/admin/main'), middleware),\n            self.assertIgnored(Request('http://site.local/static/'), middleware)\n        ], fireOnOneErrback=True)",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_ready_parser#54",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_ready_parser(self)",
        "snippet": "    def test_robotstxt_ready_parser(self):\n        middleware = RobotsTxtMiddleware(self._get_successful_crawler())\n        d = self.assertNotIgnored(Request('http://site.local/allowed'), middleware)\n        d.addCallback(lambda _: self.assertNotIgnored(Request('http://site.local/allowed'), middleware))\n        return d",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_meta#60",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_meta(self)",
        "snippet": "    def test_robotstxt_meta(self):\n        middleware = RobotsTxtMiddleware(self._get_successful_crawler())\n        meta = {'dont_obey_robotstxt': True}\n        return DeferredList([\n            self.assertNotIgnored(Request('http://site.local/allowed', meta=meta), middleware),\n            self.assertNotIgnored(Request('http://site.local/admin/main', meta=meta), middleware),\n            self.assertNotIgnored(Request('http://site.local/static/', meta=meta), middleware)\n        ], fireOnOneErrback=True)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest._get_garbage_crawler#69",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest._get_garbage_crawler(self)",
        "snippet": "    def _get_garbage_crawler(self):\n        crawler = self.crawler\n        crawler.settings.set('ROBOTSTXT_OBEY', True)\n        response = Response('http://site.local/robots.txt', body=b'GIF89a\\xd3\\x00\\xfe\\x00\\xa2')\n        def return_response(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.callback, response)\n            return deferred\n        crawler.engine.download.side_effect = return_response\n        return crawler",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_response#73",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_response(request, spider)",
        "snippet": "        def return_response(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.callback, response)\n            return deferred",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_garbage#80",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_garbage(self)",
        "snippet": "    def test_robotstxt_garbage(self):\n        # garbage response should be discarded, equal 'allow all'\n        middleware = RobotsTxtMiddleware(self._get_garbage_crawler())\n        deferred = DeferredList([\n            self.assertNotIgnored(Request('http://site.local'), middleware),\n            self.assertNotIgnored(Request('http://site.local/allowed'), middleware),\n            self.assertNotIgnored(Request('http://site.local/admin/main'), middleware),\n            self.assertNotIgnored(Request('http://site.local/static/'), middleware)\n        ], fireOnOneErrback=True)\n        return deferred",
        "begin_line": 80,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest._get_emptybody_crawler#91",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest._get_emptybody_crawler(self)",
        "snippet": "    def _get_emptybody_crawler(self):\n        crawler = self.crawler\n        crawler.settings.set('ROBOTSTXT_OBEY', True)\n        response = Response('http://site.local/robots.txt')\n        def return_response(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.callback, response)\n            return deferred\n        crawler.engine.download.side_effect = return_response\n        return crawler",
        "begin_line": 91,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_response#95",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_response(request, spider)",
        "snippet": "        def return_response(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.callback, response)\n            return deferred",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_empty_response#102",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_empty_response(self)",
        "snippet": "    def test_robotstxt_empty_response(self):\n        # empty response should equal 'allow all'\n        middleware = RobotsTxtMiddleware(self._get_emptybody_crawler())\n        return DeferredList([\n            self.assertNotIgnored(Request('http://site.local/allowed'), middleware),\n            self.assertNotIgnored(Request('http://site.local/admin/main'), middleware),\n            self.assertNotIgnored(Request('http://site.local/static/'), middleware)\n        ], fireOnOneErrback=True)",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_error#111",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_error(self)",
        "snippet": "    def test_robotstxt_error(self):\n        self.crawler.settings.set('ROBOTSTXT_OBEY', True)\n        err = error.DNSLookupError('Robotstxt address not found')\n        def return_failure(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.errback, failure.Failure(err))\n            return deferred\n        self.crawler.engine.download.side_effect = return_failure\n\n        middleware = RobotsTxtMiddleware(self.crawler)\n        middleware._logerror = mock.MagicMock(side_effect=middleware._logerror)\n        deferred = middleware.process_request(Request('http://site.local'), None)\n        deferred.addCallback(lambda _: self.assertTrue(middleware._logerror.called))\n        return deferred",
        "begin_line": 111,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_failure#114",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.return_failure(request, spider)",
        "snippet": "        def return_failure(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.errback, failure.Failure(err))\n            return deferred",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_immediate_error#126",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_robotstxt_immediate_error(self)",
        "snippet": "    def test_robotstxt_immediate_error(self):\n        self.crawler.settings.set('ROBOTSTXT_OBEY', True)\n        err = error.DNSLookupError('Robotstxt address not found')\n        def immediate_failure(request, spider):\n            deferred = Deferred()\n            deferred.errback(failure.Failure(err))\n            return deferred\n        self.crawler.engine.download.side_effect = immediate_failure\n\n        middleware = RobotsTxtMiddleware(self.crawler)\n        return self.assertNotIgnored(Request('http://site.local'), middleware)",
        "begin_line": 126,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.immediate_failure#129",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.immediate_failure(request, spider)",
        "snippet": "        def immediate_failure(request, spider):\n            deferred = Deferred()\n            deferred.errback(failure.Failure(err))\n            return deferred",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_ignore_robotstxt_request#138",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.test_ignore_robotstxt_request(self)",
        "snippet": "    def test_ignore_robotstxt_request(self):\n        self.crawler.settings.set('ROBOTSTXT_OBEY', True)\n        def ignore_request(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.errback, failure.Failure(IgnoreRequest()))\n            return deferred\n        self.crawler.engine.download.side_effect = ignore_request\n\n        middleware = RobotsTxtMiddleware(self.crawler)\n        mw_module_logger.error = mock.MagicMock()\n\n        d = self.assertNotIgnored(Request('http://site.local/allowed'), middleware)\n        d.addCallback(lambda _: self.assertFalse(mw_module_logger.error.called))\n        return d",
        "begin_line": 138,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.ignore_request#140",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.ignore_request(request, spider)",
        "snippet": "        def ignore_request(request, spider):\n            deferred = Deferred()\n            reactor.callFromThread(deferred.errback, failure.Failure(IgnoreRequest()))\n            return deferred",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.assertNotIgnored#153",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.assertNotIgnored(self, request, middleware)",
        "snippet": "    def assertNotIgnored(self, request, middleware):\n        spider = None  # not actually used\n        dfd = maybeDeferred(middleware.process_request, request, spider)\n        dfd.addCallback(self.assertIsNone)\n        return dfd",
        "begin_line": 153,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.assertIgnored#159",
        "src_path": "tests/test_downloadermiddleware_robotstxt.py",
        "class_name": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_robotstxt.RobotsTxtMiddlewareTest.assertIgnored(self, request, middleware)",
        "snippet": "    def assertIgnored(self, request, middleware):\n        spider = None  # not actually used\n        return self.assertFailure(maybeDeferred(middleware.process_request, request, spider),\n                                  IgnoreRequest)",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    }
]