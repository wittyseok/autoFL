[
    {
        "name": "test.helpers.with_config._make_dict#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 90,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#95",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#104",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 104,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#106",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 106,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Bar.run#52",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Bar",
        "signature": "test.parameter_test.Bar.run(self)",
        "snippet": "    def run(self):\n        Bar._val = self.multibool",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Baz.run#59",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Baz",
        "signature": "test.parameter_test.Baz.run(self)",
        "snippet": "    def run(self):\n        Baz._val = self.bool",
        "begin_line": 59,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ForgotParam.run#66",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ForgotParam",
        "signature": "test.parameter_test.ForgotParam.run(self)",
        "snippet": "    def run(self):\n        pass",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ForgotParamDep.requires#72",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ForgotParamDep",
        "signature": "test.parameter_test.ForgotParamDep.requires(self)",
        "snippet": "    def requires(self):\n        return ForgotParam()",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ForgotParamDep.run#75",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ForgotParamDep",
        "signature": "test.parameter_test.ForgotParamDep.run(self)",
        "snippet": "    def run(self):\n        pass",
        "begin_line": 75,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.HasGlobalParam.run#84",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.HasGlobalParam",
        "signature": "test.parameter_test.HasGlobalParam.run(self)",
        "snippet": "    def run(self):\n        self.complete = lambda: True",
        "begin_line": 84,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.HasGlobalParam.complete#87",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.HasGlobalParam",
        "signature": "test.parameter_test.HasGlobalParam.complete(self)",
        "snippet": "    def complete(self):\n        return False",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.HasGlobalParamDep.requires#94",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.HasGlobalParamDep",
        "signature": "test.parameter_test.HasGlobalParamDep.requires(self)",
        "snippet": "    def requires(self):\n        return HasGlobalParam(self.x)",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.BananaDep.output#112",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.BananaDep",
        "signature": "test.parameter_test.BananaDep.output(self)",
        "snippet": "    def output(self):\n        return MockTarget('banana-dep-%s-%s' % (self.x, self.y))",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.BananaDep.run#115",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.BananaDep",
        "signature": "test.parameter_test.BananaDep.run(self)",
        "snippet": "    def run(self):\n        self.output().open('w').close()",
        "begin_line": 115,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Banana.requires#124",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Banana",
        "signature": "test.parameter_test.Banana.requires(self)",
        "snippet": "    def requires(self):\n        if self.style is None:\n            return BananaDep()  # will fail\n        elif self.style == 'x-arg':\n            return BananaDep(self.x)\n        elif self.style == 'y-kwarg':\n            return BananaDep(y=self.y)\n        elif self.style == 'x-arg-y-arg':\n            return BananaDep(self.x, self.y)\n        else:\n            raise Exception('unknown style')",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Banana.output#136",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Banana",
        "signature": "test.parameter_test.Banana.output(self)",
        "snippet": "    def output(self):\n        return MockTarget('banana-%s-%s' % (self.x, self.y))",
        "begin_line": 136,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Banana.run#139",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Banana",
        "signature": "test.parameter_test.Banana.run(self)",
        "snippet": "    def run(self):\n        self.output().open('w').close()",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.setUp#160",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(ParameterTest, self).setUp()\n        # Need to restore some defaults for the global params since they are overriden\n        HasGlobalParam.global_param.set_global(123)\n        HasGlobalParam.global_bool_param.set_global(False)",
        "begin_line": 160,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_default_param#166",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_default_param(self)",
        "snippet": "    def test_default_param(self):\n        self.assertEqual(WithDefault().x, 'xyz')",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_missing_param#169",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_missing_param(self)",
        "snippet": "    def test_missing_param(self):\n        def create_a():\n            return A()\n        self.assertRaises(luigi.parameter.MissingParameterException, create_a)",
        "begin_line": 169,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#170",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A()",
        "begin_line": 170,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_unknown_param#174",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_unknown_param(self)",
        "snippet": "    def test_unknown_param(self):\n        def create_a():\n            return A(p=5, q=4)\n        self.assertRaises(luigi.parameter.UnknownParameterException, create_a)",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#175",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A(p=5, q=4)",
        "begin_line": 175,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_unknown_param_2#179",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_unknown_param_2(self)",
        "snippet": "    def test_unknown_param_2(self):\n        def create_a():\n            return A(1, 2, 3)\n        self.assertRaises(luigi.parameter.UnknownParameterException, create_a)",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#180",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A(1, 2, 3)",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_duplicated_param#184",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_duplicated_param(self)",
        "snippet": "    def test_duplicated_param(self):\n        def create_a():\n            return A(5, p=7)\n        self.assertRaises(luigi.parameter.DuplicateParameterException, create_a)",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.create_a#185",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.create_a()",
        "snippet": "        def create_a():\n            return A(5, p=7)",
        "begin_line": 185,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_parameter_registration#189",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_parameter_registration(self)",
        "snippet": "    def test_parameter_registration(self):\n        self.assertEqual(len(Foo.get_params()), 3)",
        "begin_line": 189,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_task_creation#192",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_task_creation(self)",
        "snippet": "    def test_task_creation(self):\n        f = Foo(\"barval\", p2=5, multi=('m1', 'm2'))\n        self.assertEqual(len(f.get_params()), 3)\n        self.assertEqual(f.bar, \"barval\")\n        self.assertEqual(f.p2, 5)\n        self.assertEqual(f.multi, ('m1', 'm2'))\n        self.assertEqual(f.not_a_param, \"lol\")",
        "begin_line": 192,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_multibool#200",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_multibool(self)",
        "snippet": "    def test_multibool(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Bar', '--multibool', 'true', '--multibool', 'false'])\n        self.assertEqual(Bar._val, (True, False))",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_multibool_empty#204",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_multibool_empty(self)",
        "snippet": "    def test_multibool_empty(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Bar'])\n        self.assertEqual(Bar._val, tuple())",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_bool_false#208",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_bool_false(self)",
        "snippet": "    def test_bool_false(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Baz'])\n        self.assertEqual(Baz._val, False)",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_bool_true#212",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_bool_true(self)",
        "snippet": "    def test_bool_true(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Baz', '--bool'])\n        self.assertEqual(Baz._val, True)",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_forgot_param#216",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_forgot_param(self)",
        "snippet": "    def test_forgot_param(self):\n        self.assertRaises(luigi.parameter.MissingParameterException, luigi.run, ['--local-scheduler', '--no-lock', 'ForgotParam'],)",
        "begin_line": 216,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_forgot_param_in_dep#220",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_forgot_param_in_dep(self, emails)",
        "snippet": "    def test_forgot_param_in_dep(self, emails):\n        # A programmatic missing parameter will cause an error email to be sent\n        luigi.run(['--local-scheduler', '--no-lock', 'ForgotParamDep'])\n        self.assertNotEquals(emails, [])",
        "begin_line": 220,
        "end_line": 223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_default_param_cmdline#225",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_default_param_cmdline(self)",
        "snippet": "    def test_default_param_cmdline(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'WithDefault'])\n        self.assertEqual(WithDefault().x, 'xyz')",
        "begin_line": 225,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_defaults#229",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_defaults(self)",
        "snippet": "    def test_global_param_defaults(self):\n        h = HasGlobalParam(x='xyz')\n        self.assertEqual(h.global_param, 123)\n        self.assertEqual(h.global_bool_param, False)",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_cmdline#234",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_cmdline(self)",
        "snippet": "    def test_global_param_cmdline(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'HasGlobalParam', '--x', 'xyz', '--global-param', '124'])\n        h = HasGlobalParam(x='xyz')\n        self.assertEqual(h.global_param, 124)\n        self.assertEqual(h.global_bool_param, False)",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_cmdline_flipped#240",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_cmdline_flipped(self)",
        "snippet": "    def test_global_param_cmdline_flipped(self):\n        luigi.run(['--local-scheduler', '--no-lock', '--global-param', '125', 'HasGlobalParam', '--x', 'xyz'])\n        h = HasGlobalParam(x='xyz')\n        self.assertEqual(h.global_param, 125)\n        self.assertEqual(h.global_bool_param, False)",
        "begin_line": 240,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_override#246",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_override(self)",
        "snippet": "    def test_global_param_override(self):\n        h1 = HasGlobalParam(x='xyz', global_param=124)\n        h2 = HasGlobalParam(x='xyz')\n        self.assertEquals(h1.global_param, 124)\n        self.assertEquals(h2.global_param, 123)",
        "begin_line": 246,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_dep_cmdline#252",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_dep_cmdline(self)",
        "snippet": "    def test_global_param_dep_cmdline(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'HasGlobalParamDep', '--x', 'xyz', '--global-param', '124'])\n        h = HasGlobalParam(x='xyz')\n        self.assertEqual(h.global_param, 124)\n        self.assertEqual(h.global_bool_param, False)",
        "begin_line": 252,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_dep_cmdline_optparse#258",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_dep_cmdline_optparse(self)",
        "snippet": "    def test_global_param_dep_cmdline_optparse(self):\n        luigi.run(['--local-scheduler', '--no-lock', '--task', 'HasGlobalParamDep', '--x', 'xyz', '--global-param', '124'], use_optparse=True)\n        h = HasGlobalParam(x='xyz')\n        self.assertEqual(h.global_param, 124)\n        self.assertEqual(h.global_bool_param, False)",
        "begin_line": 258,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_dep_cmdline_bool#264",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_dep_cmdline_bool(self)",
        "snippet": "    def test_global_param_dep_cmdline_bool(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'HasGlobalParamDep', '--x', 'xyz', '--global-bool-param'])\n        h = HasGlobalParam(x='xyz')\n        self.assertEqual(h.global_param, 123)\n        self.assertEqual(h.global_bool_param, True)",
        "begin_line": 264,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_global_param_shared#270",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_global_param_shared(self)",
        "snippet": "    def test_global_param_shared(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'SharedGlobalParamA', '--shared-global-param', 'abc'])\n        b = SharedGlobalParamB()\n        self.assertEqual(b.shared_global_param, 'abc')",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_insignificant_parameter#275",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_insignificant_parameter(self)",
        "snippet": "    def test_insignificant_parameter(self):\n        class InsignificantParameterTask(luigi.Task):\n            foo = luigi.Parameter(significant=False, default='foo_default')\n            bar = luigi.Parameter()\n\n        t1 = InsignificantParameterTask(foo='x', bar='y')\n        self.assertEqual(t1.task_id, 'InsignificantParameterTask(bar=y)')\n\n        t2 = InsignificantParameterTask('u', 'z')\n        self.assertEqual(t2.foo, 'u')\n        self.assertEqual(t2.bar, 'z')\n        self.assertEqual(t2.task_id, 'InsignificantParameterTask(bar=z)')",
        "begin_line": 275,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.InsignificantParameterTask.test_insignificant_parameter#275",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.InsignificantParameterTask",
        "signature": "test.parameter_test.InsignificantParameterTask.test_insignificant_parameter(self)",
        "snippet": "    def test_insignificant_parameter(self):\n        class InsignificantParameterTask(luigi.Task):\n            foo = luigi.Parameter(significant=False, default='foo_default')\n            bar = luigi.Parameter()\n\n        t1 = InsignificantParameterTask(foo='x', bar='y')\n        self.assertEqual(t1.task_id, 'InsignificantParameterTask(bar=y)')\n\n        t2 = InsignificantParameterTask('u', 'z')\n        self.assertEqual(t2.foo, 'u')\n        self.assertEqual(t2.bar, 'z')\n        self.assertEqual(t2.task_id, 'InsignificantParameterTask(bar=z)')",
        "begin_line": 275,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_local_significant_param#288",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_local_significant_param(self)",
        "snippet": "    def test_local_significant_param(self):\n        \"\"\" Obviously, if anything should be positional, so should local\n        significant parameters \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--label-company=disney\"\n            x = luigi.Parameter(significant=True)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 288,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_significant_param#288",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_significant_param(self)",
        "snippet": "    def test_local_significant_param(self):\n        \"\"\" Obviously, if anything should be positional, so should local\n        significant parameters \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--label-company=disney\"\n            x = luigi.Parameter(significant=True)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 288,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.ParameterTest.test_local_insignificant_param#299",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.ParameterTest",
        "signature": "test.parameter_test.ParameterTest.test_local_insignificant_param(self)",
        "snippet": "    def test_local_insignificant_param(self):\n        \"\"\" Ensure we have the same behavior as in before a78338c  \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=True\"\n            x = luigi.Parameter(significant=False)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 299,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_local_insignificant_param#299",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_local_insignificant_param(self)",
        "snippet": "    def test_local_insignificant_param(self):\n        \"\"\" Ensure we have the same behavior as in before a78338c  \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=True\"\n            x = luigi.Parameter(significant=False)\n\n        MyTask('arg')\n        self.assertRaises(luigi.parameter.MissingParameterException,\n                          lambda: MyTask())",
        "begin_line": 299,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.setUp#312",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.setUp(self)",
        "snippet": "    def setUp(self):\n        super(TestNewStyleGlobalParameters, self).setUp()\n        MockTarget.fs.clear()\n        BananaDep.y.reset_global()",
        "begin_line": 312,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.expect_keys#317",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.expect_keys(self, expected)",
        "snippet": "    def expect_keys(self, expected):\n        self.assertEquals(set(MockTarget.fs.get_all_data().keys()), set(expected))",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg#320",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg(self)",
        "snippet": "    def test_x_arg(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-def'])",
        "begin_line": 320,
        "end_line": 322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override#324",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override(self)",
        "snippet": "    def test_x_arg_override(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg', '--BananaDep-y', 'xyz'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-xyz'])",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override_stupid#328",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_override_stupid(self)",
        "snippet": "    def test_x_arg_override_stupid(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg', '--BananaDep-x', 'blabla'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-def'])",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg#332",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg(self)",
        "snippet": "    def test_x_arg_y_arg(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg-y-arg'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-bar'])",
        "begin_line": 332,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override#336",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override(self)",
        "snippet": "    def test_x_arg_y_arg_override(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg-y-arg', '--BananaDep-y', 'xyz'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-bar'])",
        "begin_line": 336,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override_all#340",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_x_arg_y_arg_override_all(self)",
        "snippet": "    def test_x_arg_y_arg_override_all(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'x-arg-y-arg', '--BananaDep-y', 'xyz', '--BananaDep-x', 'blabla'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-foo-bar'])",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override#344",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override(self)",
        "snippet": "    def test_y_arg_override(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'y-kwarg', '--BananaDep-x', 'xyz'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-xyz-bar'])",
        "begin_line": 344,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_both#348",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_both(self)",
        "snippet": "    def test_y_arg_override_both(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--x', 'foo', '--y', 'bar', '--style', 'y-kwarg', '--BananaDep-x', 'xyz', '--BananaDep-y', 'blah'])\n        self.expect_keys(['banana-foo-bar', 'banana-dep-xyz-bar'])",
        "begin_line": 348,
        "end_line": 350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_banana#352",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestNewStyleGlobalParameters",
        "signature": "test.parameter_test.TestNewStyleGlobalParameters.test_y_arg_override_banana(self)",
        "snippet": "    def test_y_arg_override_banana(self):\n        luigi.run(['--local-scheduler', '--no-lock', 'Banana', '--y', 'bar', '--style', 'y-kwarg', '--BananaDep-x', 'xyz', '--Banana-x', 'baz'])\n        self.expect_keys(['banana-baz-bar', 'banana-dep-xyz-bar'])",
        "begin_line": 352,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.setUp#359",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.setUp(self)",
        "snippet": "    def setUp(self):\n        super(TestRemoveGlobalParameters, self).setUp()\n        MyConfig.mc_p.reset_global()\n        MyConfig.mc_q.reset_global()\n        MyConfigWithoutSection.mc_r.reset_global()\n        MyConfigWithoutSection.mc_s.reset_global()",
        "begin_line": 359,
        "end_line": 364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.run_and_check#366",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.run_and_check(self, args)",
        "snippet": "    def run_and_check(self, args):\n        run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        self.assertTrue(run_exit_status)\n        return run_exit_status",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_1#371",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_1(self)",
        "snippet": "    def test_use_config_class_1(self):\n        self.run_and_check(['--MyConfig-mc-p', '99', '--mc-r', '55', 'NoopTask'])\n        self.assertEqual(MyConfig().mc_p, 99)\n        self.assertEqual(MyConfig().mc_q, 73)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 55)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 99)",
        "begin_line": 371,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_2#378",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_2(self)",
        "snippet": "    def test_use_config_class_2(self):\n        self.run_and_check(['NoopTask', '--MyConfig-mc-p', '99', '--mc-r', '55'])\n        self.assertEqual(MyConfig().mc_p, 99)\n        self.assertEqual(MyConfig().mc_q, 73)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 55)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 99)",
        "begin_line": 378,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_more_args#385",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_more_args(self)",
        "snippet": "    def test_use_config_class_more_args(self):\n        self.run_and_check(['--MyConfig-mc-p', '99', '--mc-r', '55', 'NoopTask', '--mc-s', '123', '--MyConfig-mc-q', '42'])\n        self.assertEqual(MyConfig().mc_p, 99)\n        self.assertEqual(MyConfig().mc_q, 42)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 55)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 123)",
        "begin_line": 385,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration#393",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration(self)",
        "snippet": "    def test_use_config_class_with_configuration(self):\n        self.run_and_check(['--mc-r', '555', 'NoopTask'])\n        self.assertEqual(MyConfig().mc_p, 666)\n        self.assertEqual(MyConfig().mc_q, 777)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 555)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 99)",
        "begin_line": 393,
        "end_line": 398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration_2#401",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_use_config_class_with_configuration_2(self)",
        "snippet": "    def test_use_config_class_with_configuration_2(self):\n        self.run_and_check(['NoopTask', '--MyConfig-mc-p', '222', '--mc-r', '555'])\n        self.assertEqual(MyConfig().mc_p, 222)\n        self.assertEqual(MyConfig().mc_q, 73)\n        self.assertEqual(MyConfigWithoutSection().mc_r, 555)\n        self.assertEqual(MyConfigWithoutSection().mc_s, 888)",
        "begin_line": 401,
        "end_line": 406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_misc_1#408",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_misc_1(self)",
        "snippet": "    def test_misc_1(self):\n        class Dogs(luigi.Config):\n            n_dogs = luigi.IntParameter()\n\n        class CatsWithoutSection(luigi.Config):\n            use_cmdline_section = False\n            n_cats = luigi.IntParameter()\n\n        self.run_and_check(['--n-cats', '123', '--Dogs-n-dogs', '456', 'WithDefault'])\n        self.assertEqual(Dogs().n_dogs, 456)\n        self.assertEqual(CatsWithoutSection().n_cats, 123)\n\n        self.run_and_check(['WithDefault', '--n-cats', '321', '--Dogs-n-dogs', '654'])\n        self.assertEqual(Dogs().n_dogs, 654)\n        self.assertEqual(CatsWithoutSection().n_cats, 321)",
        "begin_line": 408,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.Dogs.test_misc_1#408",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.Dogs",
        "signature": "test.parameter_test.Dogs.test_misc_1(self)",
        "snippet": "    def test_misc_1(self):\n        class Dogs(luigi.Config):\n            n_dogs = luigi.IntParameter()\n\n        class CatsWithoutSection(luigi.Config):\n            use_cmdline_section = False\n            n_cats = luigi.IntParameter()\n\n        self.run_and_check(['--n-cats', '123', '--Dogs-n-dogs', '456', 'WithDefault'])\n        self.assertEqual(Dogs().n_dogs, 456)\n        self.assertEqual(CatsWithoutSection().n_cats, 123)\n\n        self.run_and_check(['WithDefault', '--n-cats', '321', '--Dogs-n-dogs', '654'])\n        self.assertEqual(Dogs().n_dogs, 654)\n        self.assertEqual(CatsWithoutSection().n_cats, 321)",
        "begin_line": 408,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.CatsWithoutSection.test_misc_1#408",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.CatsWithoutSection",
        "signature": "test.parameter_test.CatsWithoutSection.test_misc_1(self)",
        "snippet": "    def test_misc_1(self):\n        class Dogs(luigi.Config):\n            n_dogs = luigi.IntParameter()\n\n        class CatsWithoutSection(luigi.Config):\n            use_cmdline_section = False\n            n_cats = luigi.IntParameter()\n\n        self.run_and_check(['--n-cats', '123', '--Dogs-n-dogs', '456', 'WithDefault'])\n        self.assertEqual(Dogs().n_dogs, 456)\n        self.assertEqual(CatsWithoutSection().n_cats, 123)\n\n        self.run_and_check(['WithDefault', '--n-cats', '321', '--Dogs-n-dogs', '654'])\n        self.assertEqual(Dogs().n_dogs, 654)\n        self.assertEqual(CatsWithoutSection().n_cats, 321)",
        "begin_line": 408,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_global_significant_param#424",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_global_significant_param(self)",
        "snippet": "    def test_global_significant_param(self):\n        \"\"\" We don't want any kind of global param to be positional \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be called \"--test-dry-run\"\n            x_g1 = luigi.Parameter(default='y', is_global=True, significant=True)\n\n        self.assertRaises(luigi.parameter.UnknownParameterException,\n                          lambda: MyTask('arg'))",
        "begin_line": 424,
        "end_line": 431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_global_significant_param#424",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_global_significant_param(self)",
        "snippet": "    def test_global_significant_param(self):\n        \"\"\" We don't want any kind of global param to be positional \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be called \"--test-dry-run\"\n            x_g1 = luigi.Parameter(default='y', is_global=True, significant=True)\n\n        self.assertRaises(luigi.parameter.UnknownParameterException,\n                          lambda: MyTask('arg'))",
        "begin_line": 424,
        "end_line": 431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_global_insignificant_param#433",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_global_insignificant_param(self)",
        "snippet": "    def test_global_insignificant_param(self):\n        \"\"\" We don't want any kind of global param to be positional \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--yarn-pool=development\"\n            x_g2 = luigi.Parameter(default='y', is_global=True, significant=False)\n\n        self.assertRaises(luigi.parameter.UnknownParameterException,\n                          lambda: MyTask('arg'))",
        "begin_line": 433,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_global_insignificant_param#433",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_global_insignificant_param(self)",
        "snippet": "    def test_global_insignificant_param(self):\n        \"\"\" We don't want any kind of global param to be positional \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--yarn-pool=development\"\n            x_g2 = luigi.Parameter(default='y', is_global=True, significant=False)\n\n        self.assertRaises(luigi.parameter.UnknownParameterException,\n                          lambda: MyTask('arg'))",
        "begin_line": 433,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_mixed_params#442",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_mixed_params(self)",
        "snippet": "    def test_mixed_params(self):\n        \"\"\" Essentially for what broke in a78338c and was reported in #738 \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=True\"\n            x_g3 = luigi.Parameter(default='y', is_global=True)\n            local_param = luigi.Parameter()\n\n        MyTask('setting_local_param')",
        "begin_line": 442,
        "end_line": 449,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyTask.test_mixed_params#442",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyTask",
        "signature": "test.parameter_test.MyTask.test_mixed_params(self)",
        "snippet": "    def test_mixed_params(self):\n        \"\"\" Essentially for what broke in a78338c and was reported in #738 \"\"\"\n        class MyTask(luigi.Task):\n            # This could typically be \"--num-threads=True\"\n            x_g3 = luigi.Parameter(default='y', is_global=True)\n            local_param = luigi.Parameter()\n\n        MyTask('setting_local_param')",
        "begin_line": 442,
        "end_line": 449,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestRemoveGlobalParameters.test_mixed_params_inheritence#451",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestRemoveGlobalParameters",
        "signature": "test.parameter_test.TestRemoveGlobalParameters.test_mixed_params_inheritence(self)",
        "snippet": "    def test_mixed_params_inheritence(self):\n        \"\"\" A slightly more real-world like test case \"\"\"\n        class TaskWithOneGlobalParam(luigi.Task):\n            non_positional_param = luigi.Parameter(default='y', is_global=True)\n\n        class TaskWithOnePositionalParam(TaskWithOneGlobalParam):\n            \"\"\" Try to mess with positional parameters by subclassing \"\"\"\n            only_positional_param = luigi.Parameter()\n\n            def complete(self):\n                return True\n\n        class PositionalParamsRequirer(luigi.Task):\n\n            def requires(self):\n                return TaskWithOnePositionalParam('only_positional_value')\n\n            def run(self):\n                pass\n\n        self.run_and_check(['PositionalParamsRequirer'])\n        self.run_and_check(['PositionalParamsRequirer', '--non-positional-param', 'z'])",
        "begin_line": 451,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TaskWithOneGlobalParam.test_mixed_params_inheritence#451",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TaskWithOneGlobalParam",
        "signature": "test.parameter_test.TaskWithOneGlobalParam.test_mixed_params_inheritence(self)",
        "snippet": "    def test_mixed_params_inheritence(self):\n        \"\"\" A slightly more real-world like test case \"\"\"\n        class TaskWithOneGlobalParam(luigi.Task):\n            non_positional_param = luigi.Parameter(default='y', is_global=True)\n\n        class TaskWithOnePositionalParam(TaskWithOneGlobalParam):\n            \"\"\" Try to mess with positional parameters by subclassing \"\"\"\n            only_positional_param = luigi.Parameter()\n\n            def complete(self):\n                return True\n\n        class PositionalParamsRequirer(luigi.Task):\n\n            def requires(self):\n                return TaskWithOnePositionalParam('only_positional_value')\n\n            def run(self):\n                pass\n\n        self.run_and_check(['PositionalParamsRequirer'])\n        self.run_and_check(['PositionalParamsRequirer', '--non-positional-param', 'z'])",
        "begin_line": 451,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TaskWithOnePositionalParam.test_mixed_params_inheritence#451",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TaskWithOnePositionalParam",
        "signature": "test.parameter_test.TaskWithOnePositionalParam.test_mixed_params_inheritence(self)",
        "snippet": "    def test_mixed_params_inheritence(self):\n        \"\"\" A slightly more real-world like test case \"\"\"\n        class TaskWithOneGlobalParam(luigi.Task):\n            non_positional_param = luigi.Parameter(default='y', is_global=True)\n\n        class TaskWithOnePositionalParam(TaskWithOneGlobalParam):\n            \"\"\" Try to mess with positional parameters by subclassing \"\"\"\n            only_positional_param = luigi.Parameter()\n\n            def complete(self):\n                return True\n\n        class PositionalParamsRequirer(luigi.Task):\n\n            def requires(self):\n                return TaskWithOnePositionalParam('only_positional_value')\n\n            def run(self):\n                pass\n\n        self.run_and_check(['PositionalParamsRequirer'])\n        self.run_and_check(['PositionalParamsRequirer', '--non-positional-param', 'z'])",
        "begin_line": 451,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TaskWithOnePositionalParam.complete#460",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TaskWithOnePositionalParam",
        "signature": "test.parameter_test.TaskWithOnePositionalParam.complete(self)",
        "snippet": "            def complete(self):\n                return True",
        "begin_line": 460,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.PositionalParamsRequirer.test_mixed_params_inheritence#451",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.PositionalParamsRequirer",
        "signature": "test.parameter_test.PositionalParamsRequirer.test_mixed_params_inheritence(self)",
        "snippet": "    def test_mixed_params_inheritence(self):\n        \"\"\" A slightly more real-world like test case \"\"\"\n        class TaskWithOneGlobalParam(luigi.Task):\n            non_positional_param = luigi.Parameter(default='y', is_global=True)\n\n        class TaskWithOnePositionalParam(TaskWithOneGlobalParam):\n            \"\"\" Try to mess with positional parameters by subclassing \"\"\"\n            only_positional_param = luigi.Parameter()\n\n            def complete(self):\n                return True\n\n        class PositionalParamsRequirer(luigi.Task):\n\n            def requires(self):\n                return TaskWithOnePositionalParam('only_positional_value')\n\n            def run(self):\n                pass\n\n        self.run_and_check(['PositionalParamsRequirer'])\n        self.run_and_check(['PositionalParamsRequirer', '--non-positional-param', 'z'])",
        "begin_line": 451,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.PositionalParamsRequirer.requires#465",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.PositionalParamsRequirer",
        "signature": "test.parameter_test.PositionalParamsRequirer.requires(self)",
        "snippet": "            def requires(self):\n                return TaskWithOnePositionalParam('only_positional_value')",
        "begin_line": 465,
        "end_line": 466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.PositionalParamsRequirer.run#468",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.PositionalParamsRequirer",
        "signature": "test.parameter_test.PositionalParamsRequirer.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 468,
        "end_line": 469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.run_and_check#477",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.run_and_check(self, args)",
        "snippet": "    def run_and_check(self, args):\n        run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        return run_exit_status",
        "begin_line": 477,
        "end_line": 479,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testNoSection#481",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testNoSection(self)",
        "snippet": "    def testNoSection(self):\n        self.assertRaises(ParameterException, lambda: luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\")).value)",
        "begin_line": 481,
        "end_line": 482,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testNoValue#485",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testNoValue(self)",
        "snippet": "    def testNoValue(self):\n        self.assertRaises(ParameterException, lambda: luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\")).value)",
        "begin_line": 485,
        "end_line": 486,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefault#489",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefault(self)",
        "snippet": "    def testDefault(self):\n        class A(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"baz\", A().p)\n        self.assertEqual(\"boo\", A(p=\"boo\").p)",
        "begin_line": 489,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testDefault#489",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testDefault(self)",
        "snippet": "    def testDefault(self):\n        class A(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"baz\", A().p)\n        self.assertEqual(\"boo\", A(p=\"boo\").p)",
        "begin_line": 489,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateHour#497",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateHour(self)",
        "snippet": "    def testDateHour(self):\n        p = luigi.DateHourParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.datetime(2001, 2, 3, 4, 0, 0), p.value)",
        "begin_line": 497,
        "end_line": 499,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDate#502",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDate(self)",
        "snippet": "    def testDate(self):\n        p = luigi.DateParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(datetime.date(2001, 2, 3), p.value)",
        "begin_line": 502,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testInt#507",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testInt(self)",
        "snippet": "    def testInt(self):\n        p = luigi.IntParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(123, p.value)",
        "begin_line": 507,
        "end_line": 509,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testBool#512",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testBool(self)",
        "snippet": "    def testBool(self):\n        p = luigi.BoolParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(True, p.value)",
        "begin_line": 512,
        "end_line": 514,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDateInterval#517",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDateInterval(self)",
        "snippet": "    def testDateInterval(self):\n        p = luigi.DateIntervalParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        expected = luigi.date_interval.Custom.parse(\"2001-02-03-2001-02-28\")\n        self.assertEqual(expected, p.value)",
        "begin_line": 517,
        "end_line": 520,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta#523",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta(self)",
        "snippet": "    def testTimeDelta(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=1), p.value)",
        "begin_line": 523,
        "end_line": 525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaPlural#528",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaPlural(self)",
        "snippet": "    def testTimeDeltaPlural(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(seconds=2), p.value)",
        "begin_line": 528,
        "end_line": 530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaMultiple#533",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDeltaMultiple(self)",
        "snippet": "    def testTimeDeltaMultiple(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(weeks=3, hours=4, minutes=5), p.value)",
        "begin_line": 533,
        "end_line": 535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601#538",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601(self)",
        "snippet": "    def testTimeDelta8601(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=4, hours=12, minutes=30, seconds=5), p.value)",
        "begin_line": 538,
        "end_line": 540,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601NoTimeComponent#543",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601NoTimeComponent(self)",
        "snippet": "    def testTimeDelta8601NoTimeComponent(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(days=5), p.value)",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601Weeks#548",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601Weeks(self)",
        "snippet": "    def testTimeDelta8601Weeks(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(weeks=5), p.value)",
        "begin_line": 548,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601YearMonthNotSupported#553",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601YearMonthNotSupported(self)",
        "snippet": "    def testTimeDelta8601YearMonthNotSupported(self):\n        def f():\n            return luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")).value\n        self.assertRaises(luigi.parameter.ParameterException, f)  # ISO 8601 durations with years or months are not supported",
        "begin_line": 553,
        "end_line": 556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.f#554",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.f()",
        "snippet": "        def f():\n            return luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")).value",
        "begin_line": 554,
        "end_line": 555,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MAfterT#559",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MAfterT(self)",
        "snippet": "    def testTimeDelta8601MAfterT(self):\n        p = luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(timedelta(minutes=6), p.value)",
        "begin_line": 559,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MBeforeT#564",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testTimeDelta8601MBeforeT(self)",
        "snippet": "    def testTimeDelta8601MBeforeT(self):\n        def f():\n            return luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")).value\n        self.assertRaises(luigi.parameter.ParameterException, f)  # ISO 8601 durations with months are not supported",
        "begin_line": 564,
        "end_line": 567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.f#565",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.f()",
        "snippet": "        def f():\n            return luigi.TimeDeltaParameter(config_path=dict(section=\"foo\", name=\"bar\")).value",
        "begin_line": 565,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoSection#569",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoSection(self)",
        "snippet": "    def testHasDefaultNoSection(self):\n        luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\")).has_value\n        self.assertFalse(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\")).has_value)",
        "begin_line": 569,
        "end_line": 571,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoValue#574",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultNoValue(self)",
        "snippet": "    def testHasDefaultNoValue(self):\n        self.assertFalse(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\")).has_value)",
        "begin_line": 574,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultWithBoth#578",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testHasDefaultWithBoth(self)",
        "snippet": "    def testHasDefaultWithBoth(self):\n        self.assertTrue(luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\")).has_value)",
        "begin_line": 578,
        "end_line": 579,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultList#582",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultList(self)",
        "snippet": "    def testDefaultList(self):\n        p = luigi.Parameter(is_list=True, config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual(('one', 'two', 'three'), p.value)",
        "begin_line": 582,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultIntList#587",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultIntList(self)",
        "snippet": "    def testDefaultIntList(self):\n        p = luigi.IntParameter(is_list=True, config_path=dict(section=\"foo\", name=\"bar\"))\n        self.assertEqual((1, 2, 3), p.value)",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefault#592",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefault(self)",
        "snippet": "    def testWithDefault(self):\n        p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"), default='blah')\n        self.assertEqual('baz', p.value)  # config overrides default",
        "begin_line": 592,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefaultAndMissing#596",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithDefaultAndMissing(self)",
        "snippet": "    def testWithDefaultAndMissing(self):\n        p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"), default='blah')\n        self.assertEqual('blah', p.value)",
        "begin_line": 596,
        "end_line": 598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testGlobal#601",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testGlobal(self)",
        "snippet": "    def testGlobal(self):\n        p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"), is_global=True, default='blah')\n        self.assertEqual('baz', p.value)\n        p.set_global('meh')\n        self.assertEqual('meh', p.value)",
        "begin_line": 601,
        "end_line": 605,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testGlobalAndMissing#607",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testGlobalAndMissing(self)",
        "snippet": "    def testGlobalAndMissing(self):\n        p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"), is_global=True, default='blah')\n        self.assertEqual('blah', p.value)\n        p.set_global('meh')\n        self.assertEqual('meh', p.value)",
        "begin_line": 607,
        "end_line": 611,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskName#614",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskName(self)",
        "snippet": "    def testDefaultFromTaskName(self):\n        class A(luigi.Task):\n            p = luigi.Parameter()\n\n        self.assertEqual(\"p_default\", A().p)\n        self.assertEqual(\"boo\", A(p=\"boo\").p)",
        "begin_line": 614,
        "end_line": 619,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testDefaultFromTaskName#614",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testDefaultFromTaskName(self)",
        "snippet": "    def testDefaultFromTaskName(self):\n        class A(luigi.Task):\n            p = luigi.Parameter()\n\n        self.assertEqual(\"p_default\", A().p)\n        self.assertEqual(\"boo\", A(p=\"boo\").p)",
        "begin_line": 614,
        "end_line": 619,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameInt#622",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameInt(self)",
        "snippet": "    def testDefaultFromTaskNameInt(self):\n        class A(luigi.Task):\n            p = luigi.IntParameter()\n\n        self.assertEqual(999, A().p)\n        self.assertEqual(777, A(p=777).p)",
        "begin_line": 622,
        "end_line": 627,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testDefaultFromTaskNameInt#622",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testDefaultFromTaskNameInt(self)",
        "snippet": "    def testDefaultFromTaskNameInt(self):\n        class A(luigi.Task):\n            p = luigi.IntParameter()\n\n        self.assertEqual(999, A().p)\n        self.assertEqual(777, A(p=777).p)",
        "begin_line": 622,
        "end_line": 627,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromConfigWithTaskNameToo#630",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromConfigWithTaskNameToo(self)",
        "snippet": "    def testDefaultFromConfigWithTaskNameToo(self):\n        class A(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"p_default\", A().p)\n        self.assertEqual(\"boo\", A(p=\"boo\").p)",
        "begin_line": 630,
        "end_line": 635,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testDefaultFromConfigWithTaskNameToo#630",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testDefaultFromConfigWithTaskNameToo(self)",
        "snippet": "    def testDefaultFromConfigWithTaskNameToo(self):\n        class A(luigi.Task):\n            p = luigi.Parameter(config_path=dict(section=\"foo\", name=\"bar\"))\n\n        self.assertEqual(\"p_default\", A().p)\n        self.assertEqual(\"boo\", A(p=\"boo\").p)",
        "begin_line": 630,
        "end_line": 635,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameWithDefault#638",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testDefaultFromTaskNameWithDefault(self)",
        "snippet": "    def testDefaultFromTaskNameWithDefault(self):\n        class A(luigi.Task):\n            p = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_2\", A().p)\n        self.assertEqual(\"boo_2\", A(p=\"boo_2\").p)",
        "begin_line": 638,
        "end_line": 643,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testDefaultFromTaskNameWithDefault#638",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testDefaultFromTaskNameWithDefault(self)",
        "snippet": "    def testDefaultFromTaskNameWithDefault(self):\n        class A(luigi.Task):\n            p = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_2\", A().p)\n        self.assertEqual(\"boo_2\", A(p=\"boo_2\").p)",
        "begin_line": 638,
        "end_line": 643,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testWithLongParameterName#646",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testWithLongParameterName(self)",
        "snippet": "    def testWithLongParameterName(self):\n        class MyClass(luigi.Task):\n            p_wohoo = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_3\", MyClass().p_wohoo)\n        self.assertEqual(\"boo_2\", MyClass(p_wohoo=\"boo_2\").p_wohoo)",
        "begin_line": 646,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.testWithLongParameterName#646",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.testWithLongParameterName(self)",
        "snippet": "    def testWithLongParameterName(self):\n        class MyClass(luigi.Task):\n            p_wohoo = luigi.Parameter(default=\"banana\")\n\n        self.assertEqual(\"p_default_3\", MyClass().p_wohoo)\n        self.assertEqual(\"boo_2\", MyClass(p_wohoo=\"boo_2\").p_wohoo)",
        "begin_line": 646,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testSettingOtherMember#654",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testSettingOtherMember(self)",
        "snippet": "    def testSettingOtherMember(self):\n        class A(luigi.Task):\n            pass\n\n        self.assertEqual(123, luigi.tools.range.RangeDaily(of=A).days_back)\n        self.assertEqual(70, luigi.tools.range.RangeDaily(of=A, days_back=70).days_back)",
        "begin_line": 654,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.A.testSettingOtherMember#654",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.A",
        "signature": "test.parameter_test.A.testSettingOtherMember(self)",
        "snippet": "    def testSettingOtherMember(self):\n        class A(luigi.Task):\n            pass\n\n        self.assertEqual(123, luigi.tools.range.RangeDaily(of=A).days_back)\n        self.assertEqual(70, luigi.tools.range.RangeDaily(of=A, days_back=70).days_back)",
        "begin_line": 654,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineWithDefault#662",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineWithDefault(self)",
        "snippet": "    def testCommandLineWithDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass(luigi.Task):\n            p_not_global = luigi.Parameter(default='banana')\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_and_check(['MyClass']))\n        self.assertFalse(self.run_and_check(['MyClass', '--p-not-global', '124']))\n        self.assertFalse(self.run_and_check(['MyClass', '--MyClass-p-not-global', '124']))",
        "begin_line": 662,
        "end_line": 682,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.testCommandLineWithDefault#662",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.testCommandLineWithDefault(self)",
        "snippet": "    def testCommandLineWithDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass(luigi.Task):\n            p_not_global = luigi.Parameter(default='banana')\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_and_check(['MyClass']))\n        self.assertFalse(self.run_and_check(['MyClass', '--p-not-global', '124']))\n        self.assertFalse(self.run_and_check(['MyClass', '--MyClass-p-not-global', '124']))",
        "begin_line": 662,
        "end_line": 682,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.complete#670",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.complete(self)",
        "snippet": "            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True",
        "begin_line": 670,
        "end_line": 675,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass.run#677",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass",
        "signature": "test.parameter_test.MyClass.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 677,
        "end_line": 678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineNoDefault#685",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.TestParamWithDefaultFromConfig",
        "signature": "test.parameter_test.TestParamWithDefaultFromConfig.testCommandLineNoDefault(self)",
        "snippet": "    def testCommandLineNoDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass2(luigi.Task):\n            \"\"\" TODO: Make luigi clean it's register for tests. Hate this 2 dance. \"\"\"\n            p_not_global_no_default = luigi.Parameter()\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_and_check(['MyClass2']))\n        self.assertFalse(self.run_and_check(['MyClass2', '--p-not-global-no-default', '124']))\n        self.assertFalse(self.run_and_check(['MyClass2', '--MyClass2-p-not-global-no-default', '124']))",
        "begin_line": 685,
        "end_line": 707,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass2.testCommandLineNoDefault#685",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass2",
        "signature": "test.parameter_test.MyClass2.testCommandLineNoDefault(self)",
        "snippet": "    def testCommandLineNoDefault(self):\n        \"\"\"\n        Verify that we also read from the config when we build tasks from the\n        command line parsers.\n        \"\"\"\n        class MyClass2(luigi.Task):\n            \"\"\" TODO: Make luigi clean it's register for tests. Hate this 2 dance. \"\"\"\n            p_not_global_no_default = luigi.Parameter()\n\n            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True\n\n            def run(self):\n                pass\n\n        self.assertTrue(self.run_and_check(['MyClass2']))\n        self.assertFalse(self.run_and_check(['MyClass2', '--p-not-global-no-default', '124']))\n        self.assertFalse(self.run_and_check(['MyClass2', '--MyClass2-p-not-global-no-default', '124']))",
        "begin_line": 685,
        "end_line": 707,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass2.complete#694",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass2",
        "signature": "test.parameter_test.MyClass2.complete(self)",
        "snippet": "            def complete(self):\n                import sys\n                luigi.configuration.get_config().write(sys.stdout)\n                luigi.configuration.get_config().write(sys.stdout)\n                if self.p_not_global_no_default != \"123\":\n                    raise ValueError(\"The parameter didn't get set!!\")\n                return True",
        "begin_line": 694,
        "end_line": 700,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.MyClass2.run#702",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.MyClass2",
        "signature": "test.parameter_test.MyClass2.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 702,
        "end_line": 703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.setUp#712",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.setUp(self)",
        "snippet": "    def setUp(self):\n        env_params_cls = luigi.interface.core\n        env_params_cls.scheduler_port.reset_global()",
        "begin_line": 712,
        "end_line": 714,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort#717",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort(self)",
        "snippet": "    def testOverrideSchedulerPort(self):\n        env_params = luigi.interface.core()\n        self.assertEqual(env_params.scheduler_port, 6543)",
        "begin_line": 717,
        "end_line": 719,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort2#722",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort2(self)",
        "snippet": "    def testOverrideSchedulerPort2(self):\n        env_params = luigi.interface.core()\n        self.assertEqual(env_params.scheduler_port, 6544)",
        "begin_line": 722,
        "end_line": 724,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort3#727",
        "src_path": "test/parameter_test.py",
        "class_name": "test.parameter_test.OverrideEnvStuff",
        "signature": "test.parameter_test.OverrideEnvStuff.testOverrideSchedulerPort3(self)",
        "snippet": "    def testOverrideSchedulerPort3(self):\n        env_params = luigi.interface.core()\n        self.assertEqual(env_params.scheduler_port, 6545)",
        "begin_line": 727,
        "end_line": 729,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#47",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#51",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = luigi.contrib.hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        cmd = \"{} --config {}\".format(hadoop_bin, cfg_path)\n        self.stashed_hdfs_client = luigi.configuration.get_config().get('hadoop', 'command', None)\n        luigi.configuration.get_config().set('hadoop', 'command', cmd)",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    }
]