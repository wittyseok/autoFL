coverage run -m pytest pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 9 items

pandas/tests/io/parser/test_encoding.py .FF.FFFFF                        [100%]

=================================== FAILURES ===================================
_______ test_binary_mode_file_buffers[c_high-unicode_series.csv-latin-1] _______

>   col_res, na_count = self._convert_with_dtype(

pandas/_libs/parsers.pyx:1129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return self._string_convert(i, start, end, na_filter,

pandas/_libs/parsers.pyx:1253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return _string_box_utf8(self.parser, i, start, end, na_filter,

pandas/_libs/parsers.pyx:1268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 1: invalid continuation byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.CParserHighMemory object at 0x7f03ed03f310>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'unicode_series.csv', encoding = 'latin-1'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:454: in _read
    data = parser.read(nrows)
pandas/io/parsers.py:1129: in read
    ret = self._engine.read(nrows)
pandas/io/parsers.py:2033: in read
    data = self._reader.read(nrows)
pandas/_libs/parsers.pyx:862: in pandas._libs.parsers.TextReader.read
    columns = self._read_rows(rows, 1)
pandas/_libs/parsers.pyx:951: in pandas._libs.parsers.TextReader._read_rows
    columns = self._convert_column_data(rows=rows,
pandas/_libs/parsers.pyx:1083: in pandas._libs.parsers.TextReader._convert_column_data
    col_res, na_count = self._convert_tokens(
pandas/_libs/parsers.pyx:1136: in pandas._libs.parsers.TextReader._convert_tokens
    col_res, na_count = self._convert_with_dtype(
pandas/_libs/parsers.pyx:1253: in pandas._libs.parsers.TextReader._convert_with_dtype
    return self._string_convert(i, start, end, na_filter,
pandas/_libs/parsers.pyx:1268: in pandas._libs.parsers.TextReader._string_convert
    return _string_box_utf8(self.parser, i, start, end, na_filter,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 1: invalid continuation byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError
_____ test_binary_mode_file_buffers[c_high-sauron.SHIFT_JIS.csv-shiftjis] ______

>   col_res, na_count = self._convert_with_dtype(

pandas/_libs/parsers.pyx:1129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return self._string_convert(i, start, end, na_filter,

pandas/_libs/parsers.pyx:1253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return _string_box_utf8(self.parser, i, start, end, na_filter,

pandas/_libs/parsers.pyx:1268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0x83 in position 0: invalid start byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.CParserHighMemory object at 0x7f03ed03f310>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'sauron.SHIFT_JIS.csv', encoding = 'shiftjis'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:454: in _read
    data = parser.read(nrows)
pandas/io/parsers.py:1129: in read
    ret = self._engine.read(nrows)
pandas/io/parsers.py:2033: in read
    data = self._reader.read(nrows)
pandas/_libs/parsers.pyx:862: in pandas._libs.parsers.TextReader.read
    columns = self._read_rows(rows, 1)
pandas/_libs/parsers.pyx:951: in pandas._libs.parsers.TextReader._read_rows
    columns = self._convert_column_data(rows=rows,
pandas/_libs/parsers.pyx:1083: in pandas._libs.parsers.TextReader._convert_column_data
    col_res, na_count = self._convert_tokens(
pandas/_libs/parsers.pyx:1136: in pandas._libs.parsers.TextReader._convert_tokens
    col_res, na_count = self._convert_with_dtype(
pandas/_libs/parsers.pyx:1253: in pandas._libs.parsers.TextReader._convert_with_dtype
    return self._string_convert(i, start, end, na_filter,
pandas/_libs/parsers.pyx:1268: in pandas._libs.parsers.TextReader._string_convert
    return _string_box_utf8(self.parser, i, start, end, na_filter,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0x83 in position 0: invalid start byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError
_______ test_binary_mode_file_buffers[c_low-unicode_series.csv-latin-1] ________

>   col_res, na_count = self._convert_with_dtype(

pandas/_libs/parsers.pyx:1129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return self._string_convert(i, start, end, na_filter,

pandas/_libs/parsers.pyx:1253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return _string_box_utf8(self.parser, i, start, end, na_filter,

pandas/_libs/parsers.pyx:1268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 1: invalid continuation byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.CParserLowMemory object at 0x7f03ed03f340>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'unicode_series.csv', encoding = 'latin-1'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:454: in _read
    data = parser.read(nrows)
pandas/io/parsers.py:1129: in read
    ret = self._engine.read(nrows)
pandas/io/parsers.py:2033: in read
    data = self._reader.read(nrows)
pandas/_libs/parsers.pyx:859: in pandas._libs.parsers.TextReader.read
    columns = self._read_low_memory(rows)
pandas/_libs/parsers.pyx:874: in pandas._libs.parsers.TextReader._read_low_memory
    chunk = self._read_rows(self.buffer_lines, 0)
pandas/_libs/parsers.pyx:951: in pandas._libs.parsers.TextReader._read_rows
    columns = self._convert_column_data(rows=rows,
pandas/_libs/parsers.pyx:1083: in pandas._libs.parsers.TextReader._convert_column_data
    col_res, na_count = self._convert_tokens(
pandas/_libs/parsers.pyx:1136: in pandas._libs.parsers.TextReader._convert_tokens
    col_res, na_count = self._convert_with_dtype(
pandas/_libs/parsers.pyx:1253: in pandas._libs.parsers.TextReader._convert_with_dtype
    return self._string_convert(i, start, end, na_filter,
pandas/_libs/parsers.pyx:1268: in pandas._libs.parsers.TextReader._string_convert
    return _string_box_utf8(self.parser, i, start, end, na_filter,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 1: invalid continuation byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError
______ test_binary_mode_file_buffers[c_low-sauron.SHIFT_JIS.csv-shiftjis] ______

>   col_res, na_count = self._convert_with_dtype(

pandas/_libs/parsers.pyx:1129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return self._string_convert(i, start, end, na_filter,

pandas/_libs/parsers.pyx:1253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return _string_box_utf8(self.parser, i, start, end, na_filter,

pandas/_libs/parsers.pyx:1268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0x83 in position 0: invalid start byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.CParserLowMemory object at 0x7f03ed03f340>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'sauron.SHIFT_JIS.csv', encoding = 'shiftjis'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:454: in _read
    data = parser.read(nrows)
pandas/io/parsers.py:1129: in read
    ret = self._engine.read(nrows)
pandas/io/parsers.py:2033: in read
    data = self._reader.read(nrows)
pandas/_libs/parsers.pyx:859: in pandas._libs.parsers.TextReader.read
    columns = self._read_low_memory(rows)
pandas/_libs/parsers.pyx:874: in pandas._libs.parsers.TextReader._read_low_memory
    chunk = self._read_rows(self.buffer_lines, 0)
pandas/_libs/parsers.pyx:951: in pandas._libs.parsers.TextReader._read_rows
    columns = self._convert_column_data(rows=rows,
pandas/_libs/parsers.pyx:1083: in pandas._libs.parsers.TextReader._convert_column_data
    col_res, na_count = self._convert_tokens(
pandas/_libs/parsers.pyx:1136: in pandas._libs.parsers.TextReader._convert_tokens
    col_res, na_count = self._convert_with_dtype(
pandas/_libs/parsers.pyx:1253: in pandas._libs.parsers.TextReader._convert_with_dtype
    return self._string_convert(i, start, end, na_filter,
pandas/_libs/parsers.pyx:1268: in pandas._libs.parsers.TextReader._string_convert
    return _string_box_utf8(self.parser, i, start, end, na_filter,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   pyval = PyUnicode_FromString(word)
E   UnicodeDecodeError: 'utf-8' codec can't decode byte 0x83 in position 0: invalid start byte

pandas/_libs/parsers.pyx:1458: UnicodeDecodeError
____________ test_binary_mode_file_buffers[python-test1.csv-utf-8] _____________

self = <pandas.io.parsers.PythonParser object at 0x7f03ecb67fa0>, row_num = 1

    def _next_iter_line(self, row_num):
        """
        Wrapper around iterating through `self.data` (CSV source).
    
        When a CSV error is raised, we check for specific
        error messages that allow us to customize the
        error message displayed to the user.
    
        Parameters
        ----------
        row_num : The row number of the line being parsed.
        """
    
        try:
>           return next(self.data)
E           _csv.Error: iterator should return strings, not bytes (did you open the file in text mode?)

pandas/io/parsers.py:2887: Error

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.PythonParser object at 0x7f03ed03f370>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'test1.csv', encoding = 'utf-8'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:448: in _read
    parser = TextFileReader(fp_or_buf, **kwds)
pandas/io/parsers.py:879: in __init__
    self._make_engine(self.engine)
pandas/io/parsers.py:1122: in _make_engine
    self._engine = klass(self.f, **self.options)
pandas/io/parsers.py:2282: in __init__
    ) = self._infer_columns()
pandas/io/parsers.py:2554: in _infer_columns
    line = self._buffered_line()
pandas/io/parsers.py:2730: in _buffered_line
    return self._next_line()
pandas/io/parsers.py:2827: in _next_line
    orig_line = self._next_iter_line(row_num=self.pos + 1)
pandas/io/parsers.py:2910: in _next_iter_line
    self._alert_malformed(msg, row_num)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.io.parsers.PythonParser object at 0x7f03ecb67fa0>
msg = 'iterator should return strings, not bytes (did you open the file in text mode?)'
row_num = 1

    def _alert_malformed(self, msg, row_num):
        """
        Alert a user about a malformed row.
    
        If `self.error_bad_lines` is True, the alert will be `ParserError`.
        If `self.warn_bad_lines` is True, the alert will be printed out.
    
        Parameters
        ----------
        msg : The error message to display.
        row_num : The row number where the parsing error occurred.
                  Because this row number is displayed, we 1-index,
                  even though we 0-index internally.
        """
    
        if self.error_bad_lines:
>           raise ParserError(msg)
E           pandas.errors.ParserError: iterator should return strings, not bytes (did you open the file in text mode?)

pandas/io/parsers.py:2868: ParserError
_______ test_binary_mode_file_buffers[python-unicode_series.csv-latin-1] _______

self = <pandas.io.parsers.PythonParser object at 0x7f03ecacf280>, row_num = 1

    def _next_iter_line(self, row_num):
        """
        Wrapper around iterating through `self.data` (CSV source).
    
        When a CSV error is raised, we check for specific
        error messages that allow us to customize the
        error message displayed to the user.
    
        Parameters
        ----------
        row_num : The row number of the line being parsed.
        """
    
        try:
>           return next(self.data)
E           _csv.Error: iterator should return strings, not bytes (did you open the file in text mode?)

pandas/io/parsers.py:2887: Error

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.PythonParser object at 0x7f03ed03f370>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'unicode_series.csv', encoding = 'latin-1'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:448: in _read
    parser = TextFileReader(fp_or_buf, **kwds)
pandas/io/parsers.py:879: in __init__
    self._make_engine(self.engine)
pandas/io/parsers.py:1122: in _make_engine
    self._engine = klass(self.f, **self.options)
pandas/io/parsers.py:2282: in __init__
    ) = self._infer_columns()
pandas/io/parsers.py:2554: in _infer_columns
    line = self._buffered_line()
pandas/io/parsers.py:2730: in _buffered_line
    return self._next_line()
pandas/io/parsers.py:2827: in _next_line
    orig_line = self._next_iter_line(row_num=self.pos + 1)
pandas/io/parsers.py:2910: in _next_iter_line
    self._alert_malformed(msg, row_num)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.io.parsers.PythonParser object at 0x7f03ecacf280>
msg = 'iterator should return strings, not bytes (did you open the file in text mode?)'
row_num = 1

    def _alert_malformed(self, msg, row_num):
        """
        Alert a user about a malformed row.
    
        If `self.error_bad_lines` is True, the alert will be `ParserError`.
        If `self.warn_bad_lines` is True, the alert will be printed out.
    
        Parameters
        ----------
        msg : The error message to display.
        row_num : The row number where the parsing error occurred.
                  Because this row number is displayed, we 1-index,
                  even though we 0-index internally.
        """
    
        if self.error_bad_lines:
>           raise ParserError(msg)
E           pandas.errors.ParserError: iterator should return strings, not bytes (did you open the file in text mode?)

pandas/io/parsers.py:2868: ParserError
_____ test_binary_mode_file_buffers[python-sauron.SHIFT_JIS.csv-shiftjis] ______

self = <pandas.io.parsers.PythonParser object at 0x7f03ecf21c10>, row_num = 1

    def _next_iter_line(self, row_num):
        """
        Wrapper around iterating through `self.data` (CSV source).
    
        When a CSV error is raised, we check for specific
        error messages that allow us to customize the
        error message displayed to the user.
    
        Parameters
        ----------
        row_num : The row number of the line being parsed.
        """
    
        try:
>           return next(self.data)
E           _csv.Error: iterator should return strings, not bytes (did you open the file in text mode?)

pandas/io/parsers.py:2887: Error

During handling of the above exception, another exception occurred:

all_parsers = <pandas.tests.io.parser.conftest.PythonParser object at 0x7f03ed03f370>
csv_dir_path = '/home/user/BugsInPy/temp/projects/pandas/pandas/tests/io/parser/data'
fname = 'sauron.SHIFT_JIS.csv', encoding = 'shiftjis'

    @pytest.mark.parametrize(
        "fname,encoding",
        [
            ("test1.csv", "utf-8"),
            ("unicode_series.csv", "latin-1"),
            ("sauron.SHIFT_JIS.csv", "shiftjis"),
        ],
    )
    def test_binary_mode_file_buffers(all_parsers, csv_dir_path, fname, encoding):
        # gh-23779: Python csv engine shouldn't error on files opened in binary.
        # gh-31575: Python csv engine shouldn't error on files opened in raw binary.
        parser = all_parsers
    
        fpath = os.path.join(csv_dir_path, fname)
        expected = parser.read_csv(fpath, encoding=encoding)
    
        with open(fpath, mode="r", encoding=encoding) as fa:
            result = parser.read_csv(fa)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb") as fb:
            result = parser.read_csv(fb, encoding=encoding)
        tm.assert_frame_equal(expected, result)
    
        with open(fpath, mode="rb", buffering=0) as fb:
>           result = parser.read_csv(fb, encoding=encoding)

pandas/tests/io/parser/test_encoding.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/parser/conftest.py:22: in read_csv
    return read_csv(*args, **kwargs)
pandas/io/parsers.py:675: in parser_f
    return _read(filepath_or_buffer, kwds)
pandas/io/parsers.py:448: in _read
    parser = TextFileReader(fp_or_buf, **kwds)
pandas/io/parsers.py:879: in __init__
    self._make_engine(self.engine)
pandas/io/parsers.py:1122: in _make_engine
    self._engine = klass(self.f, **self.options)
pandas/io/parsers.py:2282: in __init__
    ) = self._infer_columns()
pandas/io/parsers.py:2554: in _infer_columns
    line = self._buffered_line()
pandas/io/parsers.py:2730: in _buffered_line
    return self._next_line()
pandas/io/parsers.py:2827: in _next_line
    orig_line = self._next_iter_line(row_num=self.pos + 1)
pandas/io/parsers.py:2910: in _next_iter_line
    self._alert_malformed(msg, row_num)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.io.parsers.PythonParser object at 0x7f03ecf21c10>
msg = 'iterator should return strings, not bytes (did you open the file in text mode?)'
row_num = 1

    def _alert_malformed(self, msg, row_num):
        """
        Alert a user about a malformed row.
    
        If `self.error_bad_lines` is True, the alert will be `ParserError`.
        If `self.warn_bad_lines` is True, the alert will be printed out.
    
        Parameters
        ----------
        msg : The error message to display.
        row_num : The row number where the parsing error occurred.
                  Because this row number is displayed, we 1-index,
                  even though we 0-index internally.
        """
    
        if self.error_bad_lines:
>           raise ParserError(msg)
E           pandas.errors.ParserError: iterator should return strings, not bytes (did you open the file in text mode?)

pandas/io/parsers.py:2868: ParserError
=========================== short test summary info ============================
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[c_high-unicode_series.csv-latin-1]
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[c_high-sauron.SHIFT_JIS.csv-shiftjis]
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[c_low-unicode_series.csv-latin-1]
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[c_low-sauron.SHIFT_JIS.csv-shiftjis]
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[python-test1.csv-utf-8]
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[python-unicode_series.csv-latin-1]
FAILED pandas/tests/io/parser/test_encoding.py::test_binary_mode_file_buffers[python-sauron.SHIFT_JIS.csv-shiftjis]
========================= 7 failed, 2 passed in 3.72s ==========================
