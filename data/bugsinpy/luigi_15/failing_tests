coverage run -m pytest test/central_planner_test.py::CentralPlannerTest::test_assistants_dont_nurture_finished_statuses
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/luigi
plugins: benchmark-3.2.3, requests-mock-1.8.0, sanic-1.6.1, sugar-0.9.3, cov-2.9.0
collected 1 item

test/central_planner_test.py F                                           [100%]

=================================== FAILURES ===================================
______ CentralPlannerTest.test_assistants_dont_nurture_finished_statuses _______

self = <central_planner_test.CentralPlannerTest testMethod=test_assistants_dont_nurture_finished_statuses>

    def test_assistants_dont_nurture_finished_statuses(self):
        """
        Assistants should not affect longevity of DONE tasks
    
        Also check for statuses DISABLED and UNKNOWN.
        """
        self.sch = CentralPlannerScheduler(retry_delay=100000000000)  # Never pendify failed tasks
        self.setTime(1)
        self.sch.add_worker('assistant', [('assistant', True)])
        self.sch.ping(worker='assistant')
        self.sch.add_task(worker='uploader', task_id='running', status=PENDING)
        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'running')
    
        self.setTime(2)
        self.sch.add_task(worker='uploader', task_id='done', status=DONE)
        self.sch.add_task(worker='uploader', task_id='disabled', status=DISABLED)
        self.sch.add_task(worker='uploader', task_id='pending', status=PENDING)
        self.sch.add_task(worker='uploader', task_id='failed', status=FAILED)
        self.sch.add_task(worker='uploader', task_id='unknown', status=UNKNOWN)
    
        self.setTime(100000)
        self.sch.ping(worker='assistant')
        self.sch.prune()
    
        self.setTime(200000)
        self.sch.ping(worker='assistant')
        self.sch.prune()
        nurtured_statuses = ['PENDING', 'FAILED', 'RUNNING']
        not_nurtured_statuses = ['DONE', 'UNKNOWN', 'DISABLED']
    
        for status in nurtured_statuses:
            print(status)
            self.assertEqual(set([status.lower()]), set(self.sch.task_list(status, '')))
    
        for status in not_nurtured_statuses:
            print(status)
>           self.assertEqual(set([]), set(self.sch.task_list(status, '')))
E           AssertionError: Items in the second set but not the first:
E           'unknown'

test/central_planner_test.py:1126: AssertionError
----------------------------- Captured stdout call -----------------------------
PENDING
FAILED
RUNNING
DONE
UNKNOWN
=============================== warnings summary ===============================
luigi/parameter.py:28
  /home/user/BugsInPy/temp/projects/luigi/luigi/parameter.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    from collections import OrderedDict, Mapping

/opt/conda/envs/a55dc6a53512721d0f12fb11a10658d8/lib/python3.8/site-packages/nose/importer.py:12
  /opt/conda/envs/a55dc6a53512721d0f12fb11a10658d8/lib/python3.8/site-packages/nose/importer.py:12: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    from imp import find_module, load_module, acquire_lock, release_lock

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test/central_planner_test.py::CentralPlannerTest::test_assistants_dont_nurture_finished_statuses
======================== 1 failed, 2 warnings in 0.25s =========================
