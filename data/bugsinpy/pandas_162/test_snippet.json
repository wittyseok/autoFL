[
    {
        "name": "pandas.tests.reshape.test_pivot.dropna#25",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot",
        "signature": "pandas.tests.reshape.test_pivot.dropna(request)",
        "snippet": "def dropna(request):\n    return request.param",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.interval_values#30",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot",
        "signature": "pandas.tests.reshape.test_pivot.interval_values(request, closed)",
        "snippet": "def interval_values(request, closed):\n    left, right = request.param\n    return Categorical(pd.IntervalIndex.from_arrays(left, right, closed))",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.setup_method#36",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.data = DataFrame(\n            {\n                \"A\": [\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                ],\n                \"B\": [\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"two\",\n                    \"two\",\n                    \"one\",\n                ],\n                \"C\": [\n                    \"dull\",\n                    \"dull\",\n                    \"shiny\",\n                    \"dull\",\n                    \"dull\",\n                    \"shiny\",\n                    \"shiny\",\n                    \"dull\",\n                    \"shiny\",\n                    \"shiny\",\n                    \"shiny\",\n                ],\n                \"D\": np.random.randn(11),\n                \"E\": np.random.randn(11),\n                \"F\": np.random.randn(11),\n            }\n        )",
        "begin_line": 36,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table#84",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table(self, observed)",
        "snippet": "    def test_pivot_table(self, observed):\n        index = [\"A\", \"B\"]\n        columns = \"C\"\n        table = pivot_table(\n            self.data, values=\"D\", index=index, columns=columns, observed=observed\n        )\n\n        table2 = self.data.pivot_table(\n            values=\"D\", index=index, columns=columns, observed=observed\n        )\n        tm.assert_frame_equal(table, table2)\n\n        # this works\n        pivot_table(self.data, values=\"D\", index=index, observed=observed)\n\n        if len(index) > 1:\n            assert table.index.names == tuple(index)\n        else:\n            assert table.index.name == index[0]\n\n        if len(columns) > 1:\n            assert table.columns.names == columns\n        else:\n            assert table.columns.name == columns[0]\n\n        expected = self.data.groupby(index + [columns])[\"D\"].agg(np.mean).unstack()\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 84,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_categorical_observed_equal#112",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_categorical_observed_equal(self, observed)",
        "snippet": "    def test_pivot_table_categorical_observed_equal(self, observed):\n        # issue #24923\n        df = pd.DataFrame(\n            {\"col1\": list(\"abcde\"), \"col2\": list(\"fghij\"), \"col3\": [1, 2, 3, 4, 5]}\n        )\n\n        expected = df.pivot_table(\n            index=\"col1\", values=\"col3\", columns=\"col2\", aggfunc=np.sum, fill_value=0\n        )\n\n        expected.index = expected.index.astype(\"category\")\n        expected.columns = expected.columns.astype(\"category\")\n\n        df.col1 = df.col1.astype(\"category\")\n        df.col2 = df.col2.astype(\"category\")\n\n        result = df.pivot_table(\n            index=\"col1\",\n            values=\"col3\",\n            columns=\"col2\",\n            aggfunc=np.sum,\n            fill_value=0,\n            observed=observed,\n        )\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 112,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_nocols#139",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_nocols(self)",
        "snippet": "    def test_pivot_table_nocols(self):\n        df = DataFrame(\n            {\"rows\": [\"a\", \"b\", \"c\"], \"cols\": [\"x\", \"y\", \"z\"], \"values\": [1, 2, 3]}\n        )\n        rs = df.pivot_table(columns=\"cols\", aggfunc=np.sum)\n        xp = df.pivot_table(index=\"cols\", aggfunc=np.sum).T\n        tm.assert_frame_equal(rs, xp)\n\n        rs = df.pivot_table(columns=\"cols\", aggfunc={\"values\": \"mean\"})\n        xp = df.pivot_table(index=\"cols\", aggfunc={\"values\": \"mean\"}).T\n        tm.assert_frame_equal(rs, xp)",
        "begin_line": 139,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_dropna#151",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_dropna(self)",
        "snippet": "    def test_pivot_table_dropna(self):\n        df = DataFrame(\n            {\n                \"amount\": {0: 60000, 1: 100000, 2: 50000, 3: 30000},\n                \"customer\": {0: \"A\", 1: \"A\", 2: \"B\", 3: \"C\"},\n                \"month\": {0: 201307, 1: 201309, 2: 201308, 3: 201310},\n                \"product\": {0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\"},\n                \"quantity\": {0: 2000000, 1: 500000, 2: 1000000, 3: 1000000},\n            }\n        )\n        pv_col = df.pivot_table(\n            \"quantity\", \"month\", [\"customer\", \"product\"], dropna=False\n        )\n        pv_ind = df.pivot_table(\n            \"quantity\", [\"customer\", \"product\"], \"month\", dropna=False\n        )\n\n        m = MultiIndex.from_tuples(\n            [\n                (\"A\", \"a\"),\n                (\"A\", \"b\"),\n                (\"A\", \"c\"),\n                (\"A\", \"d\"),\n                (\"B\", \"a\"),\n                (\"B\", \"b\"),\n                (\"B\", \"c\"),\n                (\"B\", \"d\"),\n                (\"C\", \"a\"),\n                (\"C\", \"b\"),\n                (\"C\", \"c\"),\n                (\"C\", \"d\"),\n            ],\n            names=[\"customer\", \"product\"],\n        )\n        tm.assert_index_equal(pv_col.columns, m)\n        tm.assert_index_equal(pv_ind.index, m)",
        "begin_line": 151,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_categorical#188",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_categorical(self)",
        "snippet": "    def test_pivot_table_categorical(self):\n\n        cat1 = Categorical(\n            [\"a\", \"a\", \"b\", \"b\"], categories=[\"a\", \"b\", \"z\"], ordered=True\n        )\n        cat2 = Categorical(\n            [\"c\", \"d\", \"c\", \"d\"], categories=[\"c\", \"d\", \"y\"], ordered=True\n        )\n        df = DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n        result = pd.pivot_table(df, values=\"values\", index=[\"A\", \"B\"], dropna=True)\n\n        exp_index = pd.MultiIndex.from_arrays([cat1, cat2], names=[\"A\", \"B\"])\n        expected = DataFrame({\"values\": [1, 2, 3, 4]}, index=exp_index)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 188,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_dropna_categoricals#203",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_dropna_categoricals(self, dropna)",
        "snippet": "    def test_pivot_table_dropna_categoricals(self, dropna):\n        # GH 15193\n        categories = [\"a\", \"b\", \"c\", \"d\"]\n\n        df = DataFrame(\n            {\n                \"A\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"],\n                \"B\": [1, 2, 3, 1, 2, 3, 1, 2, 3],\n                \"C\": range(0, 9),\n            }\n        )\n\n        df[\"A\"] = df[\"A\"].astype(CDT(categories, ordered=False))\n        result = df.pivot_table(index=\"B\", columns=\"A\", values=\"C\", dropna=dropna)\n        expected_columns = Series([\"a\", \"b\", \"c\"], name=\"A\")\n        expected_columns = expected_columns.astype(CDT(categories, ordered=False))\n        expected_index = Series([1, 2, 3], name=\"B\")\n        expected = DataFrame(\n            [[0, 3, 6], [1, 4, 7], [2, 5, 8]],\n            index=expected_index,\n            columns=expected_columns,\n        )\n        if not dropna:\n            # add back the non observed to compare\n            expected = expected.reindex(columns=Categorical(categories)).astype(\"float\")\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 203,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_non_observable_dropna#231",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_non_observable_dropna(self, dropna)",
        "snippet": "    def test_pivot_with_non_observable_dropna(self, dropna):\n        # gh-21133\n        df = pd.DataFrame(\n            {\n                \"A\": pd.Categorical(\n                    [np.nan, \"low\", \"high\", \"low\", \"high\"],\n                    categories=[\"low\", \"high\"],\n                    ordered=True,\n                ),\n                \"B\": range(5),\n            }\n        )\n\n        result = df.pivot_table(index=\"A\", values=\"B\", dropna=dropna)\n        expected = pd.DataFrame(\n            {\"B\": [2, 3]},\n            index=pd.Index(\n                pd.Categorical.from_codes(\n                    [0, 1], categories=[\"low\", \"high\"], ordered=True\n                ),\n                name=\"A\",\n            ),\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        # gh-21378\n        df = pd.DataFrame(\n            {\n                \"A\": pd.Categorical(\n                    [\"left\", \"low\", \"high\", \"low\", \"high\"],\n                    categories=[\"low\", \"high\", \"left\"],\n                    ordered=True,\n                ),\n                \"B\": range(5),\n            }\n        )\n\n        result = df.pivot_table(index=\"A\", values=\"B\", dropna=dropna)\n        expected = pd.DataFrame(\n            {\"B\": [2, 3, 0]},\n            index=pd.Index(\n                pd.Categorical.from_codes(\n                    [0, 1, 2], categories=[\"low\", \"high\", \"left\"], ordered=True\n                ),\n                name=\"A\",\n            ),\n        )\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 231,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_interval_index#282",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_interval_index(self, interval_values, dropna)",
        "snippet": "    def test_pivot_with_interval_index(self, interval_values, dropna):\n        # GH 25814\n        df = DataFrame({\"A\": interval_values, \"B\": 1})\n        result = df.pivot_table(index=\"A\", values=\"B\", dropna=dropna)\n        expected = DataFrame({\"B\": 1}, index=Index(interval_values.unique(), name=\"A\"))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 282,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_interval_index_margins#289",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_interval_index_margins(self)",
        "snippet": "    def test_pivot_with_interval_index_margins(self):\n        # GH 25815\n        ordered_cat = pd.IntervalIndex.from_arrays([0, 0, 1, 1], [1, 1, 2, 2])\n        df = DataFrame(\n            {\n                \"A\": np.arange(4, 0, -1, dtype=np.intp),\n                \"B\": [\"a\", \"b\", \"a\", \"b\"],\n                \"C\": pd.Categorical(ordered_cat, ordered=True).sort_values(\n                    ascending=False\n                ),\n            }\n        )\n\n        pivot_tab = pd.pivot_table(\n            df, index=\"C\", columns=\"B\", values=\"A\", aggfunc=\"sum\", margins=True\n        )\n\n        result = pivot_tab[\"All\"]\n        expected = Series(\n            [3, 7, 10],\n            index=Index([pd.Interval(0, 1), pd.Interval(1, 2), \"All\"], name=\"C\"),\n            name=\"All\",\n            dtype=np.intp,\n        )\n        tm.assert_series_equal(result, expected)",
        "begin_line": 289,
        "end_line": 313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pass_array#315",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pass_array(self)",
        "snippet": "    def test_pass_array(self):\n        result = self.data.pivot_table(\"D\", index=self.data.A, columns=self.data.C)\n        expected = self.data.pivot_table(\"D\", index=\"A\", columns=\"C\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 315,
        "end_line": 318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pass_function#320",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pass_function(self)",
        "snippet": "    def test_pass_function(self):\n        result = self.data.pivot_table(\"D\", index=lambda x: x // 5, columns=self.data.C)\n        expected = self.data.pivot_table(\"D\", index=self.data.index // 5, columns=\"C\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 320,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_multiple#325",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_multiple(self)",
        "snippet": "    def test_pivot_table_multiple(self):\n        index = [\"A\", \"B\"]\n        columns = \"C\"\n        table = pivot_table(self.data, index=index, columns=columns)\n        expected = self.data.groupby(index + [columns]).agg(np.mean).unstack()\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dtypes#332",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dtypes(self)",
        "snippet": "    def test_pivot_dtypes(self):\n\n        # can convert dtypes\n        f = DataFrame(\n            {\n                \"a\": [\"cat\", \"bat\", \"cat\", \"bat\"],\n                \"v\": [1, 2, 3, 4],\n                \"i\": [\"a\", \"b\", \"a\", \"b\"],\n            }\n        )\n        assert f.dtypes[\"v\"] == \"int64\"\n\n        z = pivot_table(\n            f, values=\"v\", index=[\"a\"], columns=[\"i\"], fill_value=0, aggfunc=np.sum\n        )\n        result = z.dtypes\n        expected = Series([np.dtype(\"int64\")] * 2, index=Index(list(\"ab\"), name=\"i\"))\n        tm.assert_series_equal(result, expected)\n\n        # cannot convert dtypes\n        f = DataFrame(\n            {\n                \"a\": [\"cat\", \"bat\", \"cat\", \"bat\"],\n                \"v\": [1.5, 2.5, 3.5, 4.5],\n                \"i\": [\"a\", \"b\", \"a\", \"b\"],\n            }\n        )\n        assert f.dtypes[\"v\"] == \"float64\"\n\n        z = pivot_table(\n            f, values=\"v\", index=[\"a\"], columns=[\"i\"], fill_value=0, aggfunc=np.mean\n        )\n        result = z.dtypes\n        expected = Series([np.dtype(\"float64\")] * 2, index=Index(list(\"ab\"), name=\"i\"))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 332,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_preserve_dtypes#376",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_preserve_dtypes(self, columns, values)",
        "snippet": "    def test_pivot_preserve_dtypes(self, columns, values):\n        # GH 7142 regression test\n        v = np.arange(5, dtype=np.float64)\n        df = DataFrame(\n            {\"float1\": v, \"float2\": v + 2.0, \"bool1\": v <= 2, \"bool2\": v <= 3}\n        )\n\n        df_res = df.reset_index().pivot_table(\n            index=\"index\", columns=columns, values=values\n        )\n\n        result = dict(df_res.dtypes)\n        expected = {\n            col: np.dtype(\"O\") if col[0].startswith(\"b\") else np.dtype(\"float64\")\n            for col in df_res\n        }\n        assert result == expected",
        "begin_line": 376,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_no_values#394",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_no_values(self)",
        "snippet": "    def test_pivot_no_values(self):\n        # GH 14380\n        idx = pd.DatetimeIndex(\n            [\"2011-01-01\", \"2011-02-01\", \"2011-01-02\", \"2011-01-01\", \"2011-01-02\"]\n        )\n        df = pd.DataFrame({\"A\": [1, 2, 3, 4, 5]}, index=idx)\n        res = df.pivot_table(index=df.index.month, columns=df.index.day)\n\n        exp_columns = pd.MultiIndex.from_tuples([(\"A\", 1), (\"A\", 2)])\n        exp = pd.DataFrame(\n            [[2.5, 4.0], [2.0, np.nan]], index=[1, 2], columns=exp_columns\n        )\n        tm.assert_frame_equal(res, exp)\n\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 2, 3, 4, 5],\n                \"dt\": pd.date_range(\"2011-01-01\", freq=\"D\", periods=5),\n            },\n            index=idx,\n        )\n        res = df.pivot_table(\n            index=df.index.month, columns=pd.Grouper(key=\"dt\", freq=\"M\")\n        )\n        exp_columns = pd.MultiIndex.from_tuples([(\"A\", pd.Timestamp(\"2011-01-31\"))])\n        exp_columns.names = [None, \"dt\"]\n        exp = pd.DataFrame([3.25, 2.0], index=[1, 2], columns=exp_columns)\n        tm.assert_frame_equal(res, exp)\n\n        res = df.pivot_table(\n            index=pd.Grouper(freq=\"A\"), columns=pd.Grouper(key=\"dt\", freq=\"M\")\n        )\n        exp = pd.DataFrame(\n            [3], index=pd.DatetimeIndex([\"2011-12-31\"]), columns=exp_columns\n        )\n        tm.assert_frame_equal(res, exp)",
        "begin_line": 394,
        "end_line": 429,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_multi_values#431",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_multi_values(self)",
        "snippet": "    def test_pivot_multi_values(self):\n        result = pivot_table(\n            self.data, values=[\"D\", \"E\"], index=\"A\", columns=[\"B\", \"C\"], fill_value=0\n        )\n        expected = pivot_table(\n            self.data.drop([\"F\"], axis=1), index=\"A\", columns=[\"B\", \"C\"], fill_value=0\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 431,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_multi_functions#440",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_multi_functions(self)",
        "snippet": "    def test_pivot_multi_functions(self):\n        f = lambda func: pivot_table(\n            self.data, values=[\"D\", \"E\"], index=[\"A\", \"B\"], columns=\"C\", aggfunc=func\n        )\n        result = f([np.mean, np.std])\n        means = f(np.mean)\n        stds = f(np.std)\n        expected = concat([means, stds], keys=[\"mean\", \"std\"], axis=1)\n        tm.assert_frame_equal(result, expected)\n\n        # margins not supported??\n        f = lambda func: pivot_table(\n            self.data,\n            values=[\"D\", \"E\"],\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            aggfunc=func,\n            margins=True,\n        )\n        result = f([np.mean, np.std])\n        means = f(np.mean)\n        stds = f(np.std)\n        expected = concat([means, stds], keys=[\"mean\", \"std\"], axis=1)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 440,
        "end_line": 463,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_index_with_nan#466",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_index_with_nan(self, method)",
        "snippet": "    def test_pivot_index_with_nan(self, method):\n        # GH 3588\n        nan = np.nan\n        df = DataFrame(\n            {\n                \"a\": [\"R1\", \"R2\", nan, \"R4\"],\n                \"b\": [\"C1\", \"C2\", \"C3\", \"C4\"],\n                \"c\": [10, 15, 17, 20],\n            }\n        )\n        if method:\n            result = df.pivot(\"a\", \"b\", \"c\")\n        else:\n            result = pd.pivot(df, \"a\", \"b\", \"c\")\n        expected = DataFrame(\n            [\n                [nan, nan, 17, nan],\n                [10, nan, nan, nan],\n                [nan, 15, nan, nan],\n                [nan, nan, nan, 20],\n            ],\n            index=Index([nan, \"R1\", \"R2\", \"R4\"], name=\"a\"),\n            columns=Index([\"C1\", \"C2\", \"C3\", \"C4\"], name=\"b\"),\n        )\n        tm.assert_frame_equal(result, expected)\n        tm.assert_frame_equal(df.pivot(\"b\", \"a\", \"c\"), expected.T)\n\n        # GH9491\n        df = DataFrame(\n            {\n                \"a\": pd.date_range(\"2014-02-01\", periods=6, freq=\"D\"),\n                \"c\": 100 + np.arange(6),\n            }\n        )\n        df[\"b\"] = df[\"a\"] - pd.Timestamp(\"2014-02-02\")\n        df.loc[1, \"a\"] = df.loc[3, \"a\"] = nan\n        df.loc[1, \"b\"] = df.loc[4, \"b\"] = nan\n\n        if method:\n            pv = df.pivot(\"a\", \"b\", \"c\")\n        else:\n            pv = pd.pivot(df, \"a\", \"b\", \"c\")\n        assert pv.notna().values.sum() == len(df)\n\n        for _, row in df.iterrows():\n            assert pv.loc[row[\"a\"], row[\"b\"]] == row[\"c\"]\n\n        if method:\n            result = df.pivot(\"b\", \"a\", \"c\")\n        else:\n            result = pd.pivot(df, \"b\", \"a\", \"c\")\n        tm.assert_frame_equal(result, pv.T)",
        "begin_line": 466,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_tz#520",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_tz(self, method)",
        "snippet": "    def test_pivot_with_tz(self, method):\n        # GH 5878\n        df = DataFrame(\n            {\n                \"dt1\": [\n                    datetime(2013, 1, 1, 9, 0),\n                    datetime(2013, 1, 2, 9, 0),\n                    datetime(2013, 1, 1, 9, 0),\n                    datetime(2013, 1, 2, 9, 0),\n                ],\n                \"dt2\": [\n                    datetime(2014, 1, 1, 9, 0),\n                    datetime(2014, 1, 1, 9, 0),\n                    datetime(2014, 1, 2, 9, 0),\n                    datetime(2014, 1, 2, 9, 0),\n                ],\n                \"data1\": np.arange(4, dtype=\"int64\"),\n                \"data2\": np.arange(4, dtype=\"int64\"),\n            }\n        )\n\n        df[\"dt1\"] = df[\"dt1\"].apply(lambda d: pd.Timestamp(d, tz=\"US/Pacific\"))\n        df[\"dt2\"] = df[\"dt2\"].apply(lambda d: pd.Timestamp(d, tz=\"Asia/Tokyo\"))\n\n        exp_col1 = Index([\"data1\", \"data1\", \"data2\", \"data2\"])\n        exp_col2 = pd.DatetimeIndex(\n            [\"2014/01/01 09:00\", \"2014/01/02 09:00\"] * 2, name=\"dt2\", tz=\"Asia/Tokyo\"\n        )\n        exp_col = pd.MultiIndex.from_arrays([exp_col1, exp_col2])\n        expected = DataFrame(\n            [[0, 2, 0, 2], [1, 3, 1, 3]],\n            index=pd.DatetimeIndex(\n                [\"2013/01/01 09:00\", \"2013/01/02 09:00\"], name=\"dt1\", tz=\"US/Pacific\"\n            ),\n            columns=exp_col,\n        )\n\n        if method:\n            pv = df.pivot(index=\"dt1\", columns=\"dt2\")\n        else:\n            pv = pd.pivot(df, index=\"dt1\", columns=\"dt2\")\n        tm.assert_frame_equal(pv, expected)\n\n        expected = DataFrame(\n            [[0, 2], [1, 3]],\n            index=pd.DatetimeIndex(\n                [\"2013/01/01 09:00\", \"2013/01/02 09:00\"], name=\"dt1\", tz=\"US/Pacific\"\n            ),\n            columns=pd.DatetimeIndex(\n                [\"2014/01/01 09:00\", \"2014/01/02 09:00\"], name=\"dt2\", tz=\"Asia/Tokyo\"\n            ),\n        )\n\n        if method:\n            pv = df.pivot(index=\"dt1\", columns=\"dt2\", values=\"data1\")\n        else:\n            pv = pd.pivot(df, index=\"dt1\", columns=\"dt2\", values=\"data1\")\n        tm.assert_frame_equal(pv, expected)",
        "begin_line": 520,
        "end_line": 577,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_tz_in_values#579",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_tz_in_values(self)",
        "snippet": "    def test_pivot_tz_in_values(self):\n        # GH 14948\n        df = pd.DataFrame(\n            [\n                {\n                    \"uid\": u\"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-12 13:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": u\"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-12 08:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": u\"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-12 14:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": u\"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-25 11:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": u\"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-25 13:00:00-0700\", tz=\"US/Pacific\"),\n                },\n            ]\n        )\n\n        df = df.set_index(\"ts\").reset_index()\n        mins = df.ts.map(lambda x: x.replace(hour=0, minute=0, second=0, microsecond=0))\n\n        result = pd.pivot_table(\n            df.set_index(\"ts\").reset_index(),\n            values=\"ts\",\n            index=[\"uid\"],\n            columns=[mins],\n            aggfunc=np.min,\n        )\n        expected = pd.DataFrame(\n            [\n                [\n                    pd.Timestamp(\"2016-08-12 08:00:00-0700\", tz=\"US/Pacific\"),\n                    pd.Timestamp(\"2016-08-25 11:00:00-0700\", tz=\"US/Pacific\"),\n                ]\n            ],\n            index=pd.Index([\"aa\"], name=\"uid\"),\n            columns=pd.DatetimeIndex(\n                [\n                    pd.Timestamp(\"2016-08-12 00:00:00\", tz=\"US/Pacific\"),\n                    pd.Timestamp(\"2016-08-25 00:00:00\", tz=\"US/Pacific\"),\n                ],\n                name=\"ts\",\n            ),\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 579,
        "end_line": 632,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_periods#635",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_periods(self, method)",
        "snippet": "    def test_pivot_periods(self, method):\n        df = DataFrame(\n            {\n                \"p1\": [\n                    pd.Period(\"2013-01-01\", \"D\"),\n                    pd.Period(\"2013-01-02\", \"D\"),\n                    pd.Period(\"2013-01-01\", \"D\"),\n                    pd.Period(\"2013-01-02\", \"D\"),\n                ],\n                \"p2\": [\n                    pd.Period(\"2013-01\", \"M\"),\n                    pd.Period(\"2013-01\", \"M\"),\n                    pd.Period(\"2013-02\", \"M\"),\n                    pd.Period(\"2013-02\", \"M\"),\n                ],\n                \"data1\": np.arange(4, dtype=\"int64\"),\n                \"data2\": np.arange(4, dtype=\"int64\"),\n            }\n        )\n\n        exp_col1 = Index([\"data1\", \"data1\", \"data2\", \"data2\"])\n        exp_col2 = pd.PeriodIndex([\"2013-01\", \"2013-02\"] * 2, name=\"p2\", freq=\"M\")\n        exp_col = pd.MultiIndex.from_arrays([exp_col1, exp_col2])\n        expected = DataFrame(\n            [[0, 2, 0, 2], [1, 3, 1, 3]],\n            index=pd.PeriodIndex([\"2013-01-01\", \"2013-01-02\"], name=\"p1\", freq=\"D\"),\n            columns=exp_col,\n        )\n        if method:\n            pv = df.pivot(index=\"p1\", columns=\"p2\")\n        else:\n            pv = pd.pivot(df, index=\"p1\", columns=\"p2\")\n        tm.assert_frame_equal(pv, expected)\n\n        expected = DataFrame(\n            [[0, 2], [1, 3]],\n            index=pd.PeriodIndex([\"2013-01-01\", \"2013-01-02\"], name=\"p1\", freq=\"D\"),\n            columns=pd.PeriodIndex([\"2013-01\", \"2013-02\"], name=\"p2\", freq=\"M\"),\n        )\n        if method:\n            pv = df.pivot(index=\"p1\", columns=\"p2\", values=\"data1\")\n        else:\n            pv = pd.pivot(df, index=\"p1\", columns=\"p2\", values=\"data1\")\n        tm.assert_frame_equal(pv, expected)",
        "begin_line": 635,
        "end_line": 678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_list_like_values#690",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_list_like_values(self, values, method)",
        "snippet": "    def test_pivot_with_list_like_values(self, values, method):\n        # issue #17160\n        df = pd.DataFrame(\n            {\n                \"foo\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"],\n                \"bar\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n                \"baz\": [1, 2, 3, 4, 5, 6],\n                \"zoo\": [\"x\", \"y\", \"z\", \"q\", \"w\", \"t\"],\n            }\n        )\n\n        if method:\n            result = df.pivot(index=\"foo\", columns=\"bar\", values=values)\n        else:\n            result = pd.pivot(df, index=\"foo\", columns=\"bar\", values=values)\n\n        data = [[1, 2, 3, \"x\", \"y\", \"z\"], [4, 5, 6, \"q\", \"w\", \"t\"]]\n        index = Index(data=[\"one\", \"two\"], name=\"foo\")\n        columns = MultiIndex(\n            levels=[[\"baz\", \"zoo\"], [\"A\", \"B\", \"C\"]],\n            codes=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]],\n            names=[None, \"bar\"],\n        )\n        expected = DataFrame(data=data, index=index, columns=columns, dtype=\"object\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 690,
        "end_line": 714,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_list_like_values_nans#726",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_list_like_values_nans(self, values, method)",
        "snippet": "    def test_pivot_with_list_like_values_nans(self, values, method):\n        # issue #17160\n        df = pd.DataFrame(\n            {\n                \"foo\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"],\n                \"bar\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n                \"baz\": [1, 2, 3, 4, 5, 6],\n                \"zoo\": [\"x\", \"y\", \"z\", \"q\", \"w\", \"t\"],\n            }\n        )\n\n        if method:\n            result = df.pivot(index=\"zoo\", columns=\"foo\", values=values)\n        else:\n            result = pd.pivot(df, index=\"zoo\", columns=\"foo\", values=values)\n\n        data = [\n            [np.nan, \"A\", np.nan, 4],\n            [np.nan, \"C\", np.nan, 6],\n            [np.nan, \"B\", np.nan, 5],\n            [\"A\", np.nan, 1, np.nan],\n            [\"B\", np.nan, 2, np.nan],\n            [\"C\", np.nan, 3, np.nan],\n        ]\n        index = Index(data=[\"q\", \"t\", \"w\", \"x\", \"y\", \"z\"], name=\"zoo\")\n        columns = MultiIndex(\n            levels=[[\"bar\", \"baz\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n            names=[None, \"foo\"],\n        )\n        expected = DataFrame(data=data, index=index, columns=columns, dtype=\"object\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 726,
        "end_line": 757,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_multiindex#763",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_multiindex(self, method)",
        "snippet": "    def test_pivot_with_multiindex(self, method):\n        # issue #17160\n        index = Index(data=[0, 1, 2, 3, 4, 5])\n        data = [\n            [\"one\", \"A\", 1, \"x\"],\n            [\"one\", \"B\", 2, \"y\"],\n            [\"one\", \"C\", 3, \"z\"],\n            [\"two\", \"A\", 4, \"q\"],\n            [\"two\", \"B\", 5, \"w\"],\n            [\"two\", \"C\", 6, \"t\"],\n        ]\n        columns = MultiIndex(\n            levels=[[\"bar\", \"baz\"], [\"first\", \"second\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n        )\n        df = DataFrame(data=data, index=index, columns=columns, dtype=\"object\")\n        if method:\n            result = df.pivot(\n                index=(\"bar\", \"first\"),\n                columns=(\"bar\", \"second\"),\n                values=(\"baz\", \"first\"),\n            )\n        else:\n            result = pd.pivot(\n                df,\n                index=(\"bar\", \"first\"),\n                columns=(\"bar\", \"second\"),\n                values=(\"baz\", \"first\"),\n            )\n\n        data = {\n            \"A\": Series([1, 4], index=[\"one\", \"two\"]),\n            \"B\": Series([2, 5], index=[\"one\", \"two\"]),\n            \"C\": Series([3, 6], index=[\"one\", \"two\"]),\n        }\n        expected = DataFrame(data)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 763,
        "end_line": 799,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_tuple_of_values#802",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_with_tuple_of_values(self, method)",
        "snippet": "    def test_pivot_with_tuple_of_values(self, method):\n        # issue #17160\n        df = pd.DataFrame(\n            {\n                \"foo\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"],\n                \"bar\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n                \"baz\": [1, 2, 3, 4, 5, 6],\n                \"zoo\": [\"x\", \"y\", \"z\", \"q\", \"w\", \"t\"],\n            }\n        )\n        with pytest.raises(KeyError, match=r\"^\\('bar', 'baz'\\)$\"):\n            # tuple is seen as a single column name\n            if method:\n                df.pivot(index=\"zoo\", columns=\"foo\", values=(\"bar\", \"baz\"))\n            else:\n                pd.pivot(df, index=\"zoo\", columns=\"foo\", values=(\"bar\", \"baz\"))",
        "begin_line": 802,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins#819",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins(self)",
        "snippet": "    def test_margins(self):\n        def _check_output(\n            result, values_col, index=[\"A\", \"B\"], columns=[\"C\"], margins_col=\"All\"\n        ):\n            col_margins = result.loc[result.index[:-1], margins_col]\n            expected_col_margins = self.data.groupby(index)[values_col].mean()\n            tm.assert_series_equal(col_margins, expected_col_margins, check_names=False)\n            assert col_margins.name == margins_col\n\n            result = result.sort_index()\n            index_margins = result.loc[(margins_col, \"\")].iloc[:-1]\n\n            expected_ix_margins = self.data.groupby(columns)[values_col].mean()\n            tm.assert_series_equal(\n                index_margins, expected_ix_margins, check_names=False\n            )\n            assert index_margins.name == (margins_col, \"\")\n\n            grand_total_margins = result.loc[(margins_col, \"\"), margins_col]\n            expected_total_margins = self.data[values_col].mean()\n            assert grand_total_margins == expected_total_margins\n\n        # column specified\n        result = self.data.pivot_table(\n            values=\"D\", index=[\"A\", \"B\"], columns=\"C\", margins=True, aggfunc=np.mean\n        )\n        _check_output(result, \"D\")\n\n        # Set a different margins_name (not 'All')\n        result = self.data.pivot_table(\n            values=\"D\",\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            margins=True,\n            aggfunc=np.mean,\n            margins_name=\"Totals\",\n        )\n        _check_output(result, \"D\", margins_col=\"Totals\")\n\n        # no column specified\n        table = self.data.pivot_table(\n            index=[\"A\", \"B\"], columns=\"C\", margins=True, aggfunc=np.mean\n        )\n        for value_col in table.columns.levels[0]:\n            _check_output(table[value_col], value_col)\n\n        # no col\n\n        # to help with a buglet\n        self.data.columns = [k * 2 for k in self.data.columns]\n        table = self.data.pivot_table(index=[\"AA\", \"BB\"], margins=True, aggfunc=np.mean)\n        for value_col in table.columns:\n            totals = table.loc[(\"All\", \"\"), value_col]\n            assert totals == self.data[value_col].mean()\n\n        # no rows\n        rtable = self.data.pivot_table(\n            columns=[\"AA\", \"BB\"], margins=True, aggfunc=np.mean\n        )\n        assert isinstance(rtable, Series)\n\n        table = self.data.pivot_table(index=[\"AA\", \"BB\"], margins=True, aggfunc=\"mean\")\n        for item in [\"DD\", \"EE\", \"FF\"]:\n            totals = table.loc[(\"All\", \"\"), item]\n            assert totals == self.data[item].mean()",
        "begin_line": 819,
        "end_line": 883,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable._check_output#820",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable._check_output(result, values_col, index=['A', 'B'], columns=['C'], margins_col='All')",
        "snippet": "        def _check_output(\n            result, values_col, index=[\"A\", \"B\"], columns=[\"C\"], margins_col=\"All\"\n        ):\n            col_margins = result.loc[result.index[:-1], margins_col]\n            expected_col_margins = self.data.groupby(index)[values_col].mean()\n            tm.assert_series_equal(col_margins, expected_col_margins, check_names=False)\n            assert col_margins.name == margins_col\n\n            result = result.sort_index()\n            index_margins = result.loc[(margins_col, \"\")].iloc[:-1]\n\n            expected_ix_margins = self.data.groupby(columns)[values_col].mean()\n            tm.assert_series_equal(\n                index_margins, expected_ix_margins, check_names=False\n            )\n            assert index_margins.name == (margins_col, \"\")\n\n            grand_total_margins = result.loc[(margins_col, \"\"), margins_col]\n            expected_total_margins = self.data[values_col].mean()\n            assert grand_total_margins == expected_total_margins",
        "begin_line": 820,
        "end_line": 839,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_dtype#885",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_dtype(self)",
        "snippet": "    def test_margins_dtype(self):\n        # GH 17013\n\n        df = self.data.copy()\n        df[[\"D\", \"E\", \"F\"]] = np.arange(len(df) * 3).reshape(len(df), 3)\n\n        mi_val = list(product([\"bar\", \"foo\"], [\"one\", \"two\"])) + [(\"All\", \"\")]\n        mi = MultiIndex.from_tuples(mi_val, names=(\"A\", \"B\"))\n        expected = DataFrame(\n            {\"dull\": [12, 21, 3, 9, 45], \"shiny\": [33, 0, 36, 51, 120]}, index=mi\n        ).rename_axis(\"C\", axis=1)\n        expected[\"All\"] = expected[\"dull\"] + expected[\"shiny\"]\n\n        result = df.pivot_table(\n            values=\"D\",\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            margins=True,\n            aggfunc=np.sum,\n            fill_value=0,\n        )\n\n        tm.assert_frame_equal(expected, result)",
        "begin_line": 885,
        "end_line": 907,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_dtype_len#910",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_dtype_len(self)",
        "snippet": "    def test_margins_dtype_len(self):\n        mi_val = list(product([\"bar\", \"foo\"], [\"one\", \"two\"])) + [(\"All\", \"\")]\n        mi = MultiIndex.from_tuples(mi_val, names=(\"A\", \"B\"))\n        expected = DataFrame(\n            {\"dull\": [1, 1, 2, 1, 5], \"shiny\": [2, 0, 2, 2, 6]}, index=mi\n        ).rename_axis(\"C\", axis=1)\n        expected[\"All\"] = expected[\"dull\"] + expected[\"shiny\"]\n\n        result = self.data.pivot_table(\n            values=\"D\",\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            margins=True,\n            aggfunc=len,\n            fill_value=0,\n        )\n\n        tm.assert_frame_equal(expected, result)",
        "begin_line": 910,
        "end_line": 927,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_integer_columns#929",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_integer_columns(self)",
        "snippet": "    def test_pivot_integer_columns(self):\n        # caused by upstream bug in unstack\n\n        d = date.min\n        data = list(\n            product(\n                [\"foo\", \"bar\"],\n                [\"A\", \"B\", \"C\"],\n                [\"x1\", \"x2\"],\n                [d + timedelta(i) for i in range(20)],\n                [1.0],\n            )\n        )\n        df = DataFrame(data)\n        table = df.pivot_table(values=4, index=[0, 1, 3], columns=[2])\n\n        df2 = df.rename(columns=str)\n        table2 = df2.pivot_table(values=\"4\", index=[\"0\", \"1\", \"3\"], columns=[\"2\"])\n\n        tm.assert_frame_equal(table, table2, check_names=False)",
        "begin_line": 929,
        "end_line": 948,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_no_level_overlap#950",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_no_level_overlap(self)",
        "snippet": "    def test_pivot_no_level_overlap(self):\n        # GH #1181\n\n        data = DataFrame(\n            {\n                \"a\": [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\"] * 2,\n                \"b\": [0, 0, 0, 0, 1, 1, 1, 1] * 2,\n                \"c\": ([\"foo\"] * 4 + [\"bar\"] * 4) * 2,\n                \"value\": np.random.randn(16),\n            }\n        )\n\n        table = data.pivot_table(\"value\", index=\"a\", columns=[\"b\", \"c\"])\n\n        grouped = data.groupby([\"a\", \"b\", \"c\"])[\"value\"].mean()\n        expected = grouped.unstack(\"b\").unstack(\"c\").dropna(axis=1, how=\"all\")\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 950,
        "end_line": 966,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_columns_lexsorted#968",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_columns_lexsorted(self)",
        "snippet": "    def test_pivot_columns_lexsorted(self):\n\n        n = 10000\n\n        dtype = np.dtype(\n            [\n                (\"Index\", object),\n                (\"Symbol\", object),\n                (\"Year\", int),\n                (\"Month\", int),\n                (\"Day\", int),\n                (\"Quantity\", int),\n                (\"Price\", float),\n            ]\n        )\n\n        products = np.array(\n            [\n                (\"SP500\", \"ADBE\"),\n                (\"SP500\", \"NVDA\"),\n                (\"SP500\", \"ORCL\"),\n                (\"NDQ100\", \"AAPL\"),\n                (\"NDQ100\", \"MSFT\"),\n                (\"NDQ100\", \"GOOG\"),\n                (\"FTSE\", \"DGE.L\"),\n                (\"FTSE\", \"TSCO.L\"),\n                (\"FTSE\", \"GSK.L\"),\n            ],\n            dtype=[(\"Index\", object), (\"Symbol\", object)],\n        )\n        items = np.empty(n, dtype=dtype)\n        iproduct = np.random.randint(0, len(products), n)\n        items[\"Index\"] = products[\"Index\"][iproduct]\n        items[\"Symbol\"] = products[\"Symbol\"][iproduct]\n        dr = pd.date_range(date(2000, 1, 1), date(2010, 12, 31))\n        dates = dr[np.random.randint(0, len(dr), n)]\n        items[\"Year\"] = dates.year\n        items[\"Month\"] = dates.month\n        items[\"Day\"] = dates.day\n        items[\"Price\"] = np.random.lognormal(4.0, 2.0, n)\n\n        df = DataFrame(items)\n\n        pivoted = df.pivot_table(\n            \"Price\",\n            index=[\"Month\", \"Day\"],\n            columns=[\"Index\", \"Symbol\", \"Year\"],\n            aggfunc=\"mean\",\n        )\n\n        assert pivoted.columns.is_monotonic",
        "begin_line": 968,
        "end_line": 1018,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_complex_aggfunc#1020",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_complex_aggfunc(self)",
        "snippet": "    def test_pivot_complex_aggfunc(self):\n        f = OrderedDict([(\"D\", [\"std\"]), (\"E\", [\"sum\"])])\n        expected = self.data.groupby([\"A\", \"B\"]).agg(f).unstack(\"B\")\n        result = self.data.pivot_table(index=\"A\", columns=\"B\", aggfunc=f)\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1020,
        "end_line": 1025,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_no_cols#1027",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_no_cols(self)",
        "snippet": "    def test_margins_no_values_no_cols(self):\n        # Regression test on pivot table: no values or cols passed.\n        result = self.data[[\"A\", \"B\"]].pivot_table(\n            index=[\"A\", \"B\"], aggfunc=len, margins=True\n        )\n        result_list = result.tolist()\n        assert sum(result_list[:-1]) == result_list[-1]",
        "begin_line": 1027,
        "end_line": 1033,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_two_rows#1035",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_two_rows(self)",
        "snippet": "    def test_margins_no_values_two_rows(self):\n        # Regression test on pivot table: no values passed but rows are a\n        # multi-index\n        result = self.data[[\"A\", \"B\", \"C\"]].pivot_table(\n            index=[\"A\", \"B\"], columns=\"C\", aggfunc=len, margins=True\n        )\n        assert result.All.tolist() == [3.0, 1.0, 4.0, 3.0, 11.0]",
        "begin_line": 1035,
        "end_line": 1041,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_one_row_one_col#1043",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_one_row_one_col(self)",
        "snippet": "    def test_margins_no_values_one_row_one_col(self):\n        # Regression test on pivot table: no values passed but row and col\n        # defined\n        result = self.data[[\"A\", \"B\"]].pivot_table(\n            index=\"A\", columns=\"B\", aggfunc=len, margins=True\n        )\n        assert result.All.tolist() == [4.0, 7.0, 11.0]",
        "begin_line": 1043,
        "end_line": 1049,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_two_row_two_cols#1051",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_margins_no_values_two_row_two_cols(self)",
        "snippet": "    def test_margins_no_values_two_row_two_cols(self):\n        # Regression test on pivot table: no values passed but rows and cols\n        # are multi-indexed\n        self.data[\"D\"] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n        result = self.data[[\"A\", \"B\", \"C\", \"D\"]].pivot_table(\n            index=[\"A\", \"B\"], columns=[\"C\", \"D\"], aggfunc=len, margins=True\n        )\n        assert result.All.tolist() == [3.0, 1.0, 4.0, 3.0, 11.0]",
        "begin_line": 1051,
        "end_line": 1058,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_with_margins_set_margin_name#1061",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_with_margins_set_margin_name(self, margin_name)",
        "snippet": "    def test_pivot_table_with_margins_set_margin_name(self, margin_name):\n        # see gh-3335\n        msg = (\n            r'Conflicting name \"{}\" in margins|'\n            \"margins_name argument must be a string\"\n        ).format(margin_name)\n        with pytest.raises(ValueError, match=msg):\n            # multi-index index\n            pivot_table(\n                self.data,\n                values=\"D\",\n                index=[\"A\", \"B\"],\n                columns=[\"C\"],\n                margins=True,\n                margins_name=margin_name,\n            )\n        with pytest.raises(ValueError, match=msg):\n            # multi-index column\n            pivot_table(\n                self.data,\n                values=\"D\",\n                index=[\"C\"],\n                columns=[\"A\", \"B\"],\n                margins=True,\n                margins_name=margin_name,\n            )\n        with pytest.raises(ValueError, match=msg):\n            # non-multi-index index/column\n            pivot_table(\n                self.data,\n                values=\"D\",\n                index=[\"A\"],\n                columns=[\"B\"],\n                margins=True,\n                margins_name=margin_name,\n            )",
        "begin_line": 1061,
        "end_line": 1096,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_timegrouper#1098",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_timegrouper(self)",
        "snippet": "    def test_pivot_timegrouper(self):\n        df = DataFrame(\n            {\n                \"Branch\": \"A A A A A A A B\".split(),\n                \"Buyer\": \"Carl Mark Carl Carl Joe Joe Joe Carl\".split(),\n                \"Quantity\": [1, 3, 5, 1, 8, 1, 9, 3],\n                \"Date\": [\n                    datetime(2013, 1, 1),\n                    datetime(2013, 1, 1),\n                    datetime(2013, 10, 1),\n                    datetime(2013, 10, 2),\n                    datetime(2013, 10, 1),\n                    datetime(2013, 10, 2),\n                    datetime(2013, 12, 2),\n                    datetime(2013, 12, 2),\n                ],\n            }\n        ).set_index(\"Date\")\n\n        expected = DataFrame(\n            np.array([10, 18, 3], dtype=\"int64\").reshape(1, 3),\n            index=[datetime(2013, 12, 31)],\n            columns=\"Carl Joe Mark\".split(),\n        )\n        expected.index.name = \"Date\"\n        expected.columns.name = \"Buyer\"\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"A\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"A\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        expected = DataFrame(\n            np.array([1, np.nan, 3, 9, 18, np.nan]).reshape(2, 3),\n            index=[datetime(2013, 1, 1), datetime(2013, 7, 1)],\n            columns=\"Carl Joe Mark\".split(),\n        )\n        expected.index.name = \"Date\"\n        expected.columns.name = \"Buyer\"\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"6MS\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"6MS\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        # passing the name\n        df = df.reset_index()\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"6MS\", key=\"Date\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"6MS\", key=\"Date\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        msg = \"'The grouper name foo is not found'\"\n        with pytest.raises(KeyError, match=msg):\n            pivot_table(\n                df,\n                index=Grouper(freq=\"6MS\", key=\"foo\"),\n                columns=\"Buyer\",\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n        with pytest.raises(KeyError, match=msg):\n            pivot_table(\n                df,\n                index=\"Buyer\",\n                columns=Grouper(freq=\"6MS\", key=\"foo\"),\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n\n        # passing the level\n        df = df.set_index(\"Date\")\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"6MS\", level=\"Date\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"6MS\", level=\"Date\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        msg = \"The level foo is not valid\"\n        with pytest.raises(ValueError, match=msg):\n            pivot_table(\n                df,\n                index=Grouper(freq=\"6MS\", level=\"foo\"),\n                columns=\"Buyer\",\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n        with pytest.raises(ValueError, match=msg):\n            pivot_table(\n                df,\n                index=\"Buyer\",\n                columns=Grouper(freq=\"6MS\", level=\"foo\"),\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n\n        # double grouper\n        df = DataFrame(\n            {\n                \"Branch\": \"A A A A A A A B\".split(),\n                \"Buyer\": \"Carl Mark Carl Carl Joe Joe Joe Carl\".split(),\n                \"Quantity\": [1, 3, 5, 1, 8, 1, 9, 3],\n                \"Date\": [\n                    datetime(2013, 11, 1, 13, 0),\n                    datetime(2013, 9, 1, 13, 5),\n                    datetime(2013, 10, 1, 20, 0),\n                    datetime(2013, 10, 2, 10, 0),\n                    datetime(2013, 11, 1, 20, 0),\n                    datetime(2013, 10, 2, 10, 0),\n                    datetime(2013, 10, 2, 12, 0),\n                    datetime(2013, 12, 5, 14, 0),\n                ],\n                \"PayDay\": [\n                    datetime(2013, 10, 4, 0, 0),\n                    datetime(2013, 10, 15, 13, 5),\n                    datetime(2013, 9, 5, 20, 0),\n                    datetime(2013, 11, 2, 10, 0),\n                    datetime(2013, 10, 7, 20, 0),\n                    datetime(2013, 9, 5, 10, 0),\n                    datetime(2013, 12, 30, 12, 0),\n                    datetime(2013, 11, 20, 14, 0),\n                ],\n            }\n        )\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"M\", key=\"Date\"),\n            columns=Grouper(freq=\"M\", key=\"PayDay\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        expected = DataFrame(\n            np.array(\n                [\n                    np.nan,\n                    3,\n                    np.nan,\n                    np.nan,\n                    6,\n                    np.nan,\n                    1,\n                    9,\n                    np.nan,\n                    9,\n                    np.nan,\n                    np.nan,\n                    np.nan,\n                    np.nan,\n                    3,\n                    np.nan,\n                ]\n            ).reshape(4, 4),\n            index=[\n                datetime(2013, 9, 30),\n                datetime(2013, 10, 31),\n                datetime(2013, 11, 30),\n                datetime(2013, 12, 31),\n            ],\n            columns=[\n                datetime(2013, 9, 30),\n                datetime(2013, 10, 31),\n                datetime(2013, 11, 30),\n                datetime(2013, 12, 31),\n            ],\n        )\n        expected.index.name = \"Date\"\n        expected.columns.name = \"PayDay\"\n\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"M\", key=\"PayDay\"),\n            columns=Grouper(freq=\"M\", key=\"Date\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        tuples = [\n            (datetime(2013, 9, 30), datetime(2013, 10, 31)),\n            (datetime(2013, 10, 31), datetime(2013, 9, 30)),\n            (datetime(2013, 10, 31), datetime(2013, 11, 30)),\n            (datetime(2013, 10, 31), datetime(2013, 12, 31)),\n            (datetime(2013, 11, 30), datetime(2013, 10, 31)),\n            (datetime(2013, 12, 31), datetime(2013, 11, 30)),\n        ]\n        idx = MultiIndex.from_tuples(tuples, names=[\"Date\", \"PayDay\"])\n        expected = DataFrame(\n            np.array(\n                [3, np.nan, 6, np.nan, 1, np.nan, 9, np.nan, 9, np.nan, np.nan, 3]\n            ).reshape(6, 2),\n            index=idx,\n            columns=[\"A\", \"B\"],\n        )\n        expected.columns.name = \"Branch\"\n\n        result = pivot_table(\n            df,\n            index=[Grouper(freq=\"M\", key=\"Date\"), Grouper(freq=\"M\", key=\"PayDay\")],\n            columns=[\"Branch\"],\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=[\"Branch\"],\n            columns=[Grouper(freq=\"M\", key=\"Date\"), Grouper(freq=\"M\", key=\"PayDay\")],\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)",
        "begin_line": 1098,
        "end_line": 1363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_datetime_tz#1365",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_datetime_tz(self)",
        "snippet": "    def test_pivot_datetime_tz(self):\n        dates1 = [\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n        ]\n        dates2 = [\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n        ]\n        df = DataFrame(\n            {\n                \"label\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"],\n                \"dt1\": dates1,\n                \"dt2\": dates2,\n                \"value1\": np.arange(6, dtype=\"int64\"),\n                \"value2\": [1, 2] * 3,\n            }\n        )\n        df[\"dt1\"] = df[\"dt1\"].apply(lambda d: pd.Timestamp(d, tz=\"US/Pacific\"))\n        df[\"dt2\"] = df[\"dt2\"].apply(lambda d: pd.Timestamp(d, tz=\"Asia/Tokyo\"))\n\n        exp_idx = pd.DatetimeIndex(\n            [\"2011-07-19 07:00:00\", \"2011-07-19 08:00:00\", \"2011-07-19 09:00:00\"],\n            tz=\"US/Pacific\",\n            name=\"dt1\",\n        )\n        exp_col1 = Index([\"value1\", \"value1\"])\n        exp_col2 = Index([\"a\", \"b\"], name=\"label\")\n        exp_col = MultiIndex.from_arrays([exp_col1, exp_col2])\n        expected = DataFrame([[0, 3], [1, 4], [2, 5]], index=exp_idx, columns=exp_col)\n        result = pivot_table(df, index=[\"dt1\"], columns=[\"label\"], values=[\"value1\"])\n        tm.assert_frame_equal(result, expected)\n\n        exp_col1 = Index([\"sum\", \"sum\", \"sum\", \"sum\", \"mean\", \"mean\", \"mean\", \"mean\"])\n        exp_col2 = Index([\"value1\", \"value1\", \"value2\", \"value2\"] * 2)\n        exp_col3 = pd.DatetimeIndex(\n            [\"2013-01-01 15:00:00\", \"2013-02-01 15:00:00\"] * 4,\n            tz=\"Asia/Tokyo\",\n            name=\"dt2\",\n        )\n        exp_col = MultiIndex.from_arrays([exp_col1, exp_col2, exp_col3])\n        expected = DataFrame(\n            np.array(\n                [\n                    [0, 3, 1, 2, 0, 3, 1, 2],\n                    [1, 4, 2, 1, 1, 4, 2, 1],\n                    [2, 5, 1, 2, 2, 5, 1, 2],\n                ],\n                dtype=\"int64\",\n            ),\n            index=exp_idx,\n            columns=exp_col,\n        )\n\n        result = pivot_table(\n            df,\n            index=[\"dt1\"],\n            columns=[\"dt2\"],\n            values=[\"value1\", \"value2\"],\n            aggfunc=[np.sum, np.mean],\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1365,
        "end_line": 1434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dtaccessor#1436",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_dtaccessor(self)",
        "snippet": "    def test_pivot_dtaccessor(self):\n        # GH 8103\n        dates1 = [\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n        ]\n        dates2 = [\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n        ]\n        df = DataFrame(\n            {\n                \"label\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"],\n                \"dt1\": dates1,\n                \"dt2\": dates2,\n                \"value1\": np.arange(6, dtype=\"int64\"),\n                \"value2\": [1, 2] * 3,\n            }\n        )\n        df[\"dt1\"] = df[\"dt1\"].apply(lambda d: pd.Timestamp(d))\n        df[\"dt2\"] = df[\"dt2\"].apply(lambda d: pd.Timestamp(d))\n\n        result = pivot_table(\n            df, index=\"label\", columns=df[\"dt1\"].dt.hour, values=\"value1\"\n        )\n\n        exp_idx = Index([\"a\", \"b\"], name=\"label\")\n        expected = DataFrame(\n            {7: [0, 3], 8: [1, 4], 9: [2, 5]},\n            index=exp_idx,\n            columns=Index([7, 8, 9], name=\"dt1\"),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df, index=df[\"dt2\"].dt.month, columns=df[\"dt1\"].dt.hour, values=\"value1\"\n        )\n\n        expected = DataFrame(\n            {7: [0, 3], 8: [1, 4], 9: [2, 5]},\n            index=Index([1, 2], name=\"dt2\"),\n            columns=Index([7, 8, 9], name=\"dt1\"),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=df[\"dt2\"].dt.year.values,\n            columns=[df[\"dt1\"].dt.hour, df[\"dt2\"].dt.month],\n            values=\"value1\",\n        )\n\n        exp_col = MultiIndex.from_arrays(\n            [[7, 7, 8, 8, 9, 9], [1, 2] * 3], names=[\"dt1\", \"dt2\"]\n        )\n        expected = DataFrame(\n            np.array([[0, 3, 1, 4, 2, 5]], dtype=\"int64\"), index=[2013], columns=exp_col\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=np.array([\"X\", \"X\", \"X\", \"X\", \"Y\", \"Y\"]),\n            columns=[df[\"dt1\"].dt.hour, df[\"dt2\"].dt.month],\n            values=\"value1\",\n        )\n        expected = DataFrame(\n            np.array(\n                [[0, 3, 1, np.nan, 2, np.nan], [np.nan, np.nan, np.nan, 4, np.nan, 5]]\n            ),\n            index=[\"X\", \"Y\"],\n            columns=exp_col,\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1436,
        "end_line": 1517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_daily#1519",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_daily(self)",
        "snippet": "    def test_daily(self):\n        rng = date_range(\"1/1/2000\", \"12/31/2004\", freq=\"D\")\n        ts = Series(np.random.randn(len(rng)), index=rng)\n\n        annual = pivot_table(\n            DataFrame(ts), index=ts.index.year, columns=ts.index.dayofyear\n        )\n        annual.columns = annual.columns.droplevel(0)\n\n        doy = np.asarray(ts.index.dayofyear)\n\n        for i in range(1, 367):\n            subset = ts[doy == i]\n            subset.index = subset.index.year\n\n            result = annual[i].dropna()\n            tm.assert_series_equal(result, subset, check_names=False)\n            assert result.name == i",
        "begin_line": 1519,
        "end_line": 1536,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_monthly#1538",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_monthly(self)",
        "snippet": "    def test_monthly(self):\n        rng = date_range(\"1/1/2000\", \"12/31/2004\", freq=\"M\")\n        ts = Series(np.random.randn(len(rng)), index=rng)\n\n        annual = pivot_table(\n            pd.DataFrame(ts), index=ts.index.year, columns=ts.index.month\n        )\n        annual.columns = annual.columns.droplevel(0)\n\n        month = ts.index.month\n        for i in range(1, 13):\n            subset = ts[month == i]\n            subset.index = subset.index.year\n            result = annual[i].dropna()\n            tm.assert_series_equal(result, subset, check_names=False)\n            assert result.name == i",
        "begin_line": 1538,
        "end_line": 1553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_with_iterator_values#1555",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_with_iterator_values(self)",
        "snippet": "    def test_pivot_table_with_iterator_values(self):\n        # GH 12017\n        aggs = {\"D\": \"sum\", \"E\": \"mean\"}\n\n        pivot_values_list = pd.pivot_table(\n            self.data, index=[\"A\"], values=list(aggs.keys()), aggfunc=aggs\n        )\n\n        pivot_values_keys = pd.pivot_table(\n            self.data, index=[\"A\"], values=aggs.keys(), aggfunc=aggs\n        )\n        tm.assert_frame_equal(pivot_values_keys, pivot_values_list)\n\n        agg_values_gen = (value for value in aggs.keys())\n        pivot_values_gen = pd.pivot_table(\n            self.data, index=[\"A\"], values=agg_values_gen, aggfunc=aggs\n        )\n        tm.assert_frame_equal(pivot_values_gen, pivot_values_list)",
        "begin_line": 1555,
        "end_line": 1572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_margins_name_with_aggfunc_list#1574",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_margins_name_with_aggfunc_list(self)",
        "snippet": "    def test_pivot_table_margins_name_with_aggfunc_list(self):\n        # GH 13354\n        margins_name = \"Weekly\"\n        costs = pd.DataFrame(\n            {\n                \"item\": [\"bacon\", \"cheese\", \"bacon\", \"cheese\"],\n                \"cost\": [2.5, 4.5, 3.2, 3.3],\n                \"day\": [\"M\", \"M\", \"T\", \"T\"],\n            }\n        )\n        table = costs.pivot_table(\n            index=\"item\",\n            columns=\"day\",\n            margins=True,\n            margins_name=margins_name,\n            aggfunc=[np.mean, max],\n        )\n        ix = pd.Index([\"bacon\", \"cheese\", margins_name], dtype=\"object\", name=\"item\")\n        tups = [\n            (\"mean\", \"cost\", \"M\"),\n            (\"mean\", \"cost\", \"T\"),\n            (\"mean\", \"cost\", margins_name),\n            (\"max\", \"cost\", \"M\"),\n            (\"max\", \"cost\", \"T\"),\n            (\"max\", \"cost\", margins_name),\n        ]\n        cols = pd.MultiIndex.from_tuples(tups, names=[None, None, \"day\"])\n        expected = pd.DataFrame(table.values, index=ix, columns=cols)\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 1574,
        "end_line": 1602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_margins#1605",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_margins(self, observed)",
        "snippet": "    def test_categorical_margins(self, observed):\n        # GH 10989\n        df = pd.DataFrame(\n            {\"x\": np.arange(8), \"y\": np.arange(8) // 4, \"z\": np.arange(8) % 2}\n        )\n\n        expected = pd.DataFrame([[1.0, 2.0, 1.5], [5, 6, 5.5], [3, 4, 3.5]])\n        expected.index = Index([0, 1, \"All\"], name=\"y\")\n        expected.columns = Index([0, 1, \"All\"], name=\"z\")\n\n        table = df.pivot_table(\"x\", \"y\", \"z\", dropna=observed, margins=True)\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 1605,
        "end_line": 1616,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_margins_category#1619",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_margins_category(self, observed)",
        "snippet": "    def test_categorical_margins_category(self, observed):\n        df = pd.DataFrame(\n            {\"x\": np.arange(8), \"y\": np.arange(8) // 4, \"z\": np.arange(8) % 2}\n        )\n\n        expected = pd.DataFrame([[1.0, 2.0, 1.5], [5, 6, 5.5], [3, 4, 3.5]])\n        expected.index = Index([0, 1, \"All\"], name=\"y\")\n        expected.columns = Index([0, 1, \"All\"], name=\"z\")\n\n        df.y = df.y.astype(\"category\")\n        df.z = df.z.astype(\"category\")\n        table = df.pivot_table(\"x\", \"y\", \"z\", dropna=observed, margins=True)\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 1619,
        "end_line": 1631,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_aggfunc#1633",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_aggfunc(self, observed)",
        "snippet": "    def test_categorical_aggfunc(self, observed):\n        # GH 9534\n        df = pd.DataFrame(\n            {\"C1\": [\"A\", \"B\", \"C\", \"C\"], \"C2\": [\"a\", \"a\", \"b\", \"b\"], \"V\": [1, 2, 3, 4]}\n        )\n        df[\"C1\"] = df[\"C1\"].astype(\"category\")\n        result = df.pivot_table(\n            \"V\", index=\"C1\", columns=\"C2\", dropna=observed, aggfunc=\"count\"\n        )\n\n        expected_index = pd.CategoricalIndex(\n            [\"A\", \"B\", \"C\"], categories=[\"A\", \"B\", \"C\"], ordered=False, name=\"C1\"\n        )\n        expected_columns = pd.Index([\"a\", \"b\"], name=\"C2\")\n        expected_data = np.array([[1.0, np.nan], [1.0, np.nan], [np.nan, 2.0]])\n        expected = pd.DataFrame(\n            expected_data, index=expected_index, columns=expected_columns\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1633,
        "end_line": 1651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_pivot_index_ordering#1653",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_categorical_pivot_index_ordering(self, observed)",
        "snippet": "    def test_categorical_pivot_index_ordering(self, observed):\n        # GH 8731\n        df = pd.DataFrame(\n            {\n                \"Sales\": [100, 120, 220],\n                \"Month\": [\"January\", \"January\", \"January\"],\n                \"Year\": [2013, 2014, 2013],\n            }\n        )\n        months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\",\n        ]\n        df[\"Month\"] = df[\"Month\"].astype(\"category\").cat.set_categories(months)\n        result = df.pivot_table(\n            values=\"Sales\",\n            index=\"Month\",\n            columns=\"Year\",\n            dropna=observed,\n            aggfunc=\"sum\",\n        )\n        expected_columns = pd.Int64Index([2013, 2014], name=\"Year\")\n        expected_index = pd.CategoricalIndex(\n            [\"January\"], categories=months, ordered=False, name=\"Month\"\n        )\n        expected = pd.DataFrame(\n            [[320, 120]], index=expected_index, columns=expected_columns\n        )\n        if not observed:\n            result = result.dropna().astype(np.int64)\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1653,
        "end_line": 1694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_not_series#1696",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_not_series(self)",
        "snippet": "    def test_pivot_table_not_series(self):\n        # GH 4386\n        # pivot_table always returns a DataFrame\n        # when values is not list like and columns is None\n        # and aggfunc is not instance of list\n        df = DataFrame({\"col1\": [3, 4, 5], \"col2\": [\"C\", \"D\", \"E\"], \"col3\": [1, 3, 9]})\n\n        result = df.pivot_table(\"col1\", index=[\"col3\", \"col2\"], aggfunc=np.sum)\n        m = MultiIndex.from_arrays([[1, 3, 9], [\"C\", \"D\", \"E\"]], names=[\"col3\", \"col2\"])\n        expected = DataFrame([3, 4, 5], index=m, columns=[\"col1\"])\n\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot_table(\"col1\", index=\"col3\", columns=\"col2\", aggfunc=np.sum)\n        expected = DataFrame(\n            [[3, np.NaN, np.NaN], [np.NaN, 4, np.NaN], [np.NaN, np.NaN, 5]],\n            index=Index([1, 3, 9], name=\"col3\"),\n            columns=Index([\"C\", \"D\", \"E\"], name=\"col2\"),\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot_table(\"col1\", index=\"col3\", aggfunc=[np.sum])\n        m = MultiIndex.from_arrays([[\"sum\"], [\"col1\"]])\n        expected = DataFrame([3, 4, 5], index=Index([1, 3, 9], name=\"col3\"), columns=m)\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1696,
        "end_line": 1722,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_margins_name_unicode#1724",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_margins_name_unicode(self)",
        "snippet": "    def test_pivot_margins_name_unicode(self):\n        # issue #13292\n        greek = \"\\u0394\\u03bf\\u03ba\\u03b9\\u03bc\\u03ae\"\n        frame = pd.DataFrame({\"foo\": [1, 2, 3]})\n        table = pd.pivot_table(\n            frame, index=[\"foo\"], aggfunc=len, margins=True, margins_name=greek\n        )\n        index = pd.Index([1, 2, 3, greek], dtype=\"object\", name=\"foo\")\n        expected = pd.DataFrame(index=index)\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 1724,
        "end_line": 1733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_string_as_func#1735",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_string_as_func(self)",
        "snippet": "    def test_pivot_string_as_func(self):\n        # GH #18713\n        # for correctness purposes\n        data = DataFrame(\n            {\n                \"A\": [\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                ],\n                \"B\": [\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"two\",\n                    \"two\",\n                    \"one\",\n                ],\n                \"C\": range(11),\n            }\n        )\n\n        result = pivot_table(data, index=\"A\", columns=\"B\", aggfunc=\"sum\")\n        mi = MultiIndex(\n            levels=[[\"C\"], [\"one\", \"two\"]], codes=[[0, 0], [0, 1]], names=[None, \"B\"]\n        )\n        expected = DataFrame(\n            {(\"C\", \"one\"): {\"bar\": 15, \"foo\": 13}, (\"C\", \"two\"): {\"bar\": 7, \"foo\": 20}},\n            columns=mi,\n        ).rename_axis(\"A\")\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(data, index=\"A\", columns=\"B\", aggfunc=[\"sum\", \"mean\"])\n        mi = MultiIndex(\n            levels=[[\"sum\", \"mean\"], [\"C\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 0, 0, 0], [0, 1, 0, 1]],\n            names=[None, None, \"B\"],\n        )\n        expected = DataFrame(\n            {\n                (\"mean\", \"C\", \"one\"): {\"bar\": 5.0, \"foo\": 3.25},\n                (\"mean\", \"C\", \"two\"): {\"bar\": 7.0, \"foo\": 6.666666666666667},\n                (\"sum\", \"C\", \"one\"): {\"bar\": 15, \"foo\": 13},\n                (\"sum\", \"C\", \"two\"): {\"bar\": 7, \"foo\": 20},\n            },\n            columns=mi,\n        ).rename_axis(\"A\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1735,
        "end_line": 1795,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_string_func_vs_func#1808",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_string_func_vs_func(self, f, f_numpy)",
        "snippet": "    def test_pivot_string_func_vs_func(self, f, f_numpy):\n        # GH #18713\n        # for consistency purposes\n        result = pivot_table(self.data, index=\"A\", columns=\"B\", aggfunc=f)\n        expected = pivot_table(self.data, index=\"A\", columns=\"B\", aggfunc=f_numpy)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1808,
        "end_line": 1813,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_number_of_levels_larger_than_int32#1816",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_number_of_levels_larger_than_int32(self)",
        "snippet": "    def test_pivot_number_of_levels_larger_than_int32(self):\n        # GH 20601\n        df = DataFrame(\n            {\"ind1\": np.arange(2 ** 16), \"ind2\": np.arange(2 ** 16), \"count\": 0}\n        )\n\n        msg = \"Unstacked DataFrame is too big, causing int32 overflow\"\n        with pytest.raises(ValueError, match=msg):\n            df.pivot_table(\n                index=\"ind1\", columns=\"ind2\", values=\"count\", aggfunc=\"count\"\n            )",
        "begin_line": 1816,
        "end_line": 1826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_aggfunc_dropna#1828",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_aggfunc_dropna(self, dropna)",
        "snippet": "    def test_pivot_table_aggfunc_dropna(self, dropna):\n        # GH 22159\n        df = pd.DataFrame(\n            {\n                \"fruit\": [\"apple\", \"peach\", \"apple\"],\n                \"size\": [1, 1, 2],\n                \"taste\": [7, 6, 6],\n            }\n        )\n\n        def ret_one(x):\n            return 1\n\n        def ret_sum(x):\n            return sum(x)\n\n        def ret_none(x):\n            return np.nan\n\n        result = pd.pivot_table(\n            df, columns=\"fruit\", aggfunc=[ret_sum, ret_none, ret_one], dropna=dropna\n        )\n\n        data = [[3, 1, np.nan, np.nan, 1, 1], [13, 6, np.nan, np.nan, 1, 1]]\n        col = pd.MultiIndex.from_product(\n            [[\"ret_sum\", \"ret_none\", \"ret_one\"], [\"apple\", \"peach\"]],\n            names=[None, \"fruit\"],\n        )\n        expected = pd.DataFrame(data, index=[\"size\", \"taste\"], columns=col)\n\n        if dropna:\n            expected = expected.dropna(axis=\"columns\")\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1828,
        "end_line": 1861,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.ret_one#1838",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.ret_one(x)",
        "snippet": "        def ret_one(x):\n            return 1",
        "begin_line": 1838,
        "end_line": 1839,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.ret_sum#1841",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.ret_sum(x)",
        "snippet": "        def ret_sum(x):\n            return sum(x)",
        "begin_line": 1841,
        "end_line": 1842,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.ret_none#1844",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.ret_none(x)",
        "snippet": "        def ret_none(x):\n            return np.nan",
        "begin_line": 1844,
        "end_line": 1845,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_aggfunc_scalar_dropna#1863",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestPivotTable",
        "signature": "pandas.tests.reshape.test_pivot.TestPivotTable.test_pivot_table_aggfunc_scalar_dropna(self, dropna)",
        "snippet": "    def test_pivot_table_aggfunc_scalar_dropna(self, dropna):\n        # GH 22159\n        df = pd.DataFrame(\n            {\"A\": [\"one\", \"two\", \"one\"], \"x\": [3, np.nan, 2], \"y\": [1, np.nan, np.nan]}\n        )\n\n        result = pd.pivot_table(df, columns=\"A\", aggfunc=np.mean, dropna=dropna)\n\n        data = [[2.5, np.nan], [1, np.nan]]\n        col = pd.Index([\"one\", \"two\"], name=\"A\")\n        expected = pd.DataFrame(data, index=[\"x\", \"y\"], columns=col)\n\n        if dropna:\n            expected = expected.dropna(axis=\"columns\")\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1863,
        "end_line": 1878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.setup_method#1882",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        df = DataFrame(\n            {\n                \"A\": [\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                ],\n                \"B\": [\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"two\",\n                    \"two\",\n                    \"one\",\n                ],\n                \"C\": [\n                    \"dull\",\n                    \"dull\",\n                    \"shiny\",\n                    \"dull\",\n                    \"dull\",\n                    \"shiny\",\n                    \"shiny\",\n                    \"dull\",\n                    \"shiny\",\n                    \"shiny\",\n                    \"shiny\",\n                ],\n                \"D\": np.random.randn(11),\n                \"E\": np.random.randn(11),\n                \"F\": np.random.randn(11),\n            }\n        )\n\n        self.df = df.append(df, ignore_index=True)",
        "begin_line": 1882,
        "end_line": 1930,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_single#1932",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_single(self)",
        "snippet": "    def test_crosstab_single(self):\n        df = self.df\n        result = crosstab(df[\"A\"], df[\"C\"])\n        expected = df.groupby([\"A\", \"C\"]).size().unstack()\n        tm.assert_frame_equal(result, expected.fillna(0).astype(np.int64))",
        "begin_line": 1932,
        "end_line": 1936,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_multiple#1938",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_multiple(self)",
        "snippet": "    def test_crosstab_multiple(self):\n        df = self.df\n\n        result = crosstab(df[\"A\"], [df[\"B\"], df[\"C\"]])\n        expected = df.groupby([\"A\", \"B\", \"C\"]).size()\n        expected = expected.unstack(\"B\").unstack(\"C\").fillna(0).astype(np.int64)\n        tm.assert_frame_equal(result, expected)\n\n        result = crosstab([df[\"B\"], df[\"C\"]], df[\"A\"])\n        expected = df.groupby([\"B\", \"C\", \"A\"]).size()\n        expected = expected.unstack(\"A\").fillna(0).astype(np.int64)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1938,
        "end_line": 1949,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_ndarray#1951",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_ndarray(self)",
        "snippet": "    def test_crosstab_ndarray(self):\n        a = np.random.randint(0, 5, size=100)\n        b = np.random.randint(0, 3, size=100)\n        c = np.random.randint(0, 10, size=100)\n\n        df = DataFrame({\"a\": a, \"b\": b, \"c\": c})\n\n        result = crosstab(a, [b, c], rownames=[\"a\"], colnames=(\"b\", \"c\"))\n        expected = crosstab(df[\"a\"], [df[\"b\"], df[\"c\"]])\n        tm.assert_frame_equal(result, expected)\n\n        result = crosstab([b, c], a, colnames=[\"a\"], rownames=(\"b\", \"c\"))\n        expected = crosstab([df[\"b\"], df[\"c\"]], df[\"a\"])\n        tm.assert_frame_equal(result, expected)\n\n        # assign arbitrary names\n        result = crosstab(self.df[\"A\"].values, self.df[\"C\"].values)\n        assert result.index.name == \"row_0\"\n        assert result.columns.name == \"col_0\"",
        "begin_line": 1951,
        "end_line": 1969,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_non_aligned#1971",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_non_aligned(self)",
        "snippet": "    def test_crosstab_non_aligned(self):\n        # GH 17005\n        a = pd.Series([0, 1, 1], index=[\"a\", \"b\", \"c\"])\n        b = pd.Series([3, 4, 3, 4, 3], index=[\"a\", \"b\", \"c\", \"d\", \"f\"])\n        c = np.array([3, 4, 3])\n\n        expected = pd.DataFrame(\n            [[1, 0], [1, 1]],\n            index=Index([0, 1], name=\"row_0\"),\n            columns=Index([3, 4], name=\"col_0\"),\n        )\n\n        result = crosstab(a, b)\n        tm.assert_frame_equal(result, expected)\n\n        result = crosstab(a, c)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1971,
        "end_line": 1987,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_margins#1989",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_margins(self)",
        "snippet": "    def test_crosstab_margins(self):\n        a = np.random.randint(0, 7, size=100)\n        b = np.random.randint(0, 3, size=100)\n        c = np.random.randint(0, 5, size=100)\n\n        df = DataFrame({\"a\": a, \"b\": b, \"c\": c})\n\n        result = crosstab(a, [b, c], rownames=[\"a\"], colnames=(\"b\", \"c\"), margins=True)\n\n        assert result.index.names == (\"a\",)\n        assert result.columns.names == [\"b\", \"c\"]\n\n        all_cols = result[\"All\", \"\"]\n        exp_cols = df.groupby([\"a\"]).size().astype(\"i8\")\n        # to keep index.name\n        exp_margin = Series([len(df)], index=Index([\"All\"], name=\"a\"))\n        exp_cols = exp_cols.append(exp_margin)\n        exp_cols.name = (\"All\", \"\")\n\n        tm.assert_series_equal(all_cols, exp_cols)\n\n        all_rows = result.loc[\"All\"]\n        exp_rows = df.groupby([\"b\", \"c\"]).size().astype(\"i8\")\n        exp_rows = exp_rows.append(Series([len(df)], index=[(\"All\", \"\")]))\n        exp_rows.name = \"All\"\n\n        exp_rows = exp_rows.reindex(all_rows.index)\n        exp_rows = exp_rows.fillna(0).astype(np.int64)\n        tm.assert_series_equal(all_rows, exp_rows)",
        "begin_line": 1989,
        "end_line": 2017,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_margins_set_margin_name#2019",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_margins_set_margin_name(self)",
        "snippet": "    def test_crosstab_margins_set_margin_name(self):\n        # GH 15972\n        a = np.random.randint(0, 7, size=100)\n        b = np.random.randint(0, 3, size=100)\n        c = np.random.randint(0, 5, size=100)\n\n        df = DataFrame({\"a\": a, \"b\": b, \"c\": c})\n\n        result = crosstab(\n            a,\n            [b, c],\n            rownames=[\"a\"],\n            colnames=(\"b\", \"c\"),\n            margins=True,\n            margins_name=\"TOTAL\",\n        )\n\n        assert result.index.names == (\"a\",)\n        assert result.columns.names == [\"b\", \"c\"]\n\n        all_cols = result[\"TOTAL\", \"\"]\n        exp_cols = df.groupby([\"a\"]).size().astype(\"i8\")\n        # to keep index.name\n        exp_margin = Series([len(df)], index=Index([\"TOTAL\"], name=\"a\"))\n        exp_cols = exp_cols.append(exp_margin)\n        exp_cols.name = (\"TOTAL\", \"\")\n\n        tm.assert_series_equal(all_cols, exp_cols)\n\n        all_rows = result.loc[\"TOTAL\"]\n        exp_rows = df.groupby([\"b\", \"c\"]).size().astype(\"i8\")\n        exp_rows = exp_rows.append(Series([len(df)], index=[(\"TOTAL\", \"\")]))\n        exp_rows.name = \"TOTAL\"\n\n        exp_rows = exp_rows.reindex(all_rows.index)\n        exp_rows = exp_rows.fillna(0).astype(np.int64)\n        tm.assert_series_equal(all_rows, exp_rows)\n\n        msg = \"margins_name argument must be a string\"\n        for margins_name in [666, None, [\"a\", \"b\"]]:\n            with pytest.raises(ValueError, match=msg):\n                crosstab(\n                    a,\n                    [b, c],\n                    rownames=[\"a\"],\n                    colnames=(\"b\", \"c\"),\n                    margins=True,\n                    margins_name=margins_name,\n                )",
        "begin_line": 2019,
        "end_line": 2067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_pass_values#2069",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_pass_values(self)",
        "snippet": "    def test_crosstab_pass_values(self):\n        a = np.random.randint(0, 7, size=100)\n        b = np.random.randint(0, 3, size=100)\n        c = np.random.randint(0, 5, size=100)\n        values = np.random.randn(100)\n\n        table = crosstab(\n            [a, b], c, values, aggfunc=np.sum, rownames=[\"foo\", \"bar\"], colnames=[\"baz\"]\n        )\n\n        df = DataFrame({\"foo\": a, \"bar\": b, \"baz\": c, \"values\": values})\n\n        expected = df.pivot_table(\n            \"values\", index=[\"foo\", \"bar\"], columns=\"baz\", aggfunc=np.sum\n        )\n        tm.assert_frame_equal(table, expected)",
        "begin_line": 2069,
        "end_line": 2084,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_dropna#2086",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_dropna(self)",
        "snippet": "    def test_crosstab_dropna(self):\n        # GH 3820\n        a = np.array([\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\"], dtype=object)\n        b = np.array([\"one\", \"one\", \"two\", \"one\", \"two\", \"two\", \"two\"], dtype=object)\n        c = np.array(\n            [\"dull\", \"dull\", \"dull\", \"dull\", \"dull\", \"shiny\", \"shiny\"], dtype=object\n        )\n        res = pd.crosstab(a, [b, c], rownames=[\"a\"], colnames=[\"b\", \"c\"], dropna=False)\n        m = MultiIndex.from_tuples(\n            [(\"one\", \"dull\"), (\"one\", \"shiny\"), (\"two\", \"dull\"), (\"two\", \"shiny\")],\n            names=[\"b\", \"c\"],\n        )\n        tm.assert_index_equal(res.columns, m)",
        "begin_line": 2086,
        "end_line": 2098,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_no_overlap#2100",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_no_overlap(self)",
        "snippet": "    def test_crosstab_no_overlap(self):\n        # GS 10291\n\n        s1 = pd.Series([1, 2, 3], index=[1, 2, 3])\n        s2 = pd.Series([4, 5, 6], index=[4, 5, 6])\n\n        actual = crosstab(s1, s2)\n        expected = pd.DataFrame()\n\n        tm.assert_frame_equal(actual, expected)",
        "begin_line": 2100,
        "end_line": 2109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_margin_dropna#2111",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_margin_dropna(self)",
        "snippet": "    def test_margin_dropna(self):\n        # GH 12577\n        # pivot_table counts null into margin ('All')\n        # when margins=true and dropna=true\n\n        df = pd.DataFrame({\"a\": [1, 2, 2, 2, 2, np.nan], \"b\": [3, 3, 4, 4, 4, 4]})\n        actual = pd.crosstab(df.a, df.b, margins=True, dropna=True)\n        expected = pd.DataFrame([[1, 0, 1], [1, 3, 4], [2, 3, 5]])\n        expected.index = Index([1.0, 2.0, \"All\"], name=\"a\")\n        expected.columns = Index([3, 4, \"All\"], name=\"b\")\n        tm.assert_frame_equal(actual, expected)\n\n        df = DataFrame(\n            {\"a\": [1, np.nan, np.nan, np.nan, 2, np.nan], \"b\": [3, np.nan, 4, 4, 4, 4]}\n        )\n        actual = pd.crosstab(df.a, df.b, margins=True, dropna=True)\n        expected = pd.DataFrame([[1, 0, 1], [0, 1, 1], [1, 1, 2]])\n        expected.index = Index([1.0, 2.0, \"All\"], name=\"a\")\n        expected.columns = Index([3.0, 4.0, \"All\"], name=\"b\")\n        tm.assert_frame_equal(actual, expected)\n\n        df = DataFrame(\n            {\"a\": [1, np.nan, np.nan, np.nan, np.nan, 2], \"b\": [3, 3, 4, 4, 4, 4]}\n        )\n        actual = pd.crosstab(df.a, df.b, margins=True, dropna=True)\n        expected = pd.DataFrame([[1, 0, 1], [0, 1, 1], [1, 1, 2]])\n        expected.index = Index([1.0, 2.0, \"All\"], name=\"a\")\n        expected.columns = Index([3, 4, \"All\"], name=\"b\")\n        tm.assert_frame_equal(actual, expected)\n\n        # GH 12642\n        # _add_margins raises KeyError: Level None not found\n        # when margins=True and dropna=False\n        df = pd.DataFrame({\"a\": [1, 2, 2, 2, 2, np.nan], \"b\": [3, 3, 4, 4, 4, 4]})\n        actual = pd.crosstab(df.a, df.b, margins=True, dropna=False)\n        expected = pd.DataFrame([[1, 0, 1], [1, 3, 4], [2, 4, 6]])\n        expected.index = Index([1.0, 2.0, \"All\"], name=\"a\")\n        expected.columns = Index([3, 4, \"All\"], name=\"b\")\n        tm.assert_frame_equal(actual, expected)\n\n        df = DataFrame(\n            {\"a\": [1, np.nan, np.nan, np.nan, 2, np.nan], \"b\": [3, np.nan, 4, 4, 4, 4]}\n        )\n        actual = pd.crosstab(df.a, df.b, margins=True, dropna=False)\n        expected = pd.DataFrame([[1, 0, 1], [0, 1, 1], [1, 4, 6]])\n        expected.index = Index([1.0, 2.0, \"All\"], name=\"a\")\n        expected.columns = Index([3.0, 4.0, \"All\"], name=\"b\")\n        tm.assert_frame_equal(actual, expected)\n\n        a = np.array([\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\"], dtype=object)\n        b = np.array([\"one\", \"one\", \"two\", \"one\", \"two\", np.nan, \"two\"], dtype=object)\n        c = np.array(\n            [\"dull\", \"dull\", \"dull\", \"dull\", \"dull\", \"shiny\", \"shiny\"], dtype=object\n        )\n\n        actual = pd.crosstab(\n            a, [b, c], rownames=[\"a\"], colnames=[\"b\", \"c\"], margins=True, dropna=False\n        )\n        m = MultiIndex.from_arrays(\n            [\n                [\"one\", \"one\", \"two\", \"two\", \"All\"],\n                [\"dull\", \"shiny\", \"dull\", \"shiny\", \"\"],\n            ],\n            names=[\"b\", \"c\"],\n        )\n        expected = DataFrame(\n            [[1, 0, 1, 0, 2], [2, 0, 1, 1, 5], [3, 0, 2, 1, 7]], columns=m\n        )\n        expected.index = Index([\"bar\", \"foo\", \"All\"], name=\"a\")\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.crosstab(\n            [a, b], c, rownames=[\"a\", \"b\"], colnames=[\"c\"], margins=True, dropna=False\n        )\n        m = MultiIndex.from_arrays(\n            [[\"bar\", \"bar\", \"foo\", \"foo\", \"All\"], [\"one\", \"two\", \"one\", \"two\", \"\"]],\n            names=[\"a\", \"b\"],\n        )\n        expected = DataFrame(\n            [[1, 0, 1], [1, 0, 1], [2, 0, 2], [1, 1, 2], [5, 2, 7]], index=m\n        )\n        expected.columns = Index([\"dull\", \"shiny\", \"All\"], name=\"c\")\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.crosstab(\n            [a, b], c, rownames=[\"a\", \"b\"], colnames=[\"c\"], margins=True, dropna=True\n        )\n        m = MultiIndex.from_arrays(\n            [[\"bar\", \"bar\", \"foo\", \"foo\", \"All\"], [\"one\", \"two\", \"one\", \"two\", \"\"]],\n            names=[\"a\", \"b\"],\n        )\n        expected = DataFrame(\n            [[1, 0, 1], [1, 0, 1], [2, 0, 2], [1, 1, 2], [5, 1, 6]], index=m\n        )\n        expected.columns = Index([\"dull\", \"shiny\", \"All\"], name=\"c\")\n        tm.assert_frame_equal(actual, expected)",
        "begin_line": 2111,
        "end_line": 2206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_normalize#2208",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_normalize(self)",
        "snippet": "    def test_crosstab_normalize(self):\n        # Issue 12578\n        df = pd.DataFrame(\n            {\"a\": [1, 2, 2, 2, 2], \"b\": [3, 3, 4, 4, 4], \"c\": [1, 1, np.nan, 1, 1]}\n        )\n\n        rindex = pd.Index([1, 2], name=\"a\")\n        cindex = pd.Index([3, 4], name=\"b\")\n        full_normal = pd.DataFrame([[0.2, 0], [0.2, 0.6]], index=rindex, columns=cindex)\n        row_normal = pd.DataFrame(\n            [[1.0, 0], [0.25, 0.75]], index=rindex, columns=cindex\n        )\n        col_normal = pd.DataFrame([[0.5, 0], [0.5, 1.0]], index=rindex, columns=cindex)\n\n        # Check all normalize args\n        tm.assert_frame_equal(pd.crosstab(df.a, df.b, normalize=\"all\"), full_normal)\n        tm.assert_frame_equal(pd.crosstab(df.a, df.b, normalize=True), full_normal)\n        tm.assert_frame_equal(pd.crosstab(df.a, df.b, normalize=\"index\"), row_normal)\n        tm.assert_frame_equal(pd.crosstab(df.a, df.b, normalize=\"columns\"), col_normal)\n        tm.assert_frame_equal(\n            pd.crosstab(df.a, df.b, normalize=1),\n            pd.crosstab(df.a, df.b, normalize=\"columns\"),\n        )\n        tm.assert_frame_equal(\n            pd.crosstab(df.a, df.b, normalize=0),\n            pd.crosstab(df.a, df.b, normalize=\"index\"),\n        )\n\n        row_normal_margins = pd.DataFrame(\n            [[1.0, 0], [0.25, 0.75], [0.4, 0.6]],\n            index=pd.Index([1, 2, \"All\"], name=\"a\", dtype=\"object\"),\n            columns=pd.Index([3, 4], name=\"b\", dtype=\"object\"),\n        )\n        col_normal_margins = pd.DataFrame(\n            [[0.5, 0, 0.2], [0.5, 1.0, 0.8]],\n            index=pd.Index([1, 2], name=\"a\", dtype=\"object\"),\n            columns=pd.Index([3, 4, \"All\"], name=\"b\", dtype=\"object\"),\n        )\n\n        all_normal_margins = pd.DataFrame(\n            [[0.2, 0, 0.2], [0.2, 0.6, 0.8], [0.4, 0.6, 1]],\n            index=pd.Index([1, 2, \"All\"], name=\"a\", dtype=\"object\"),\n            columns=pd.Index([3, 4, \"All\"], name=\"b\", dtype=\"object\"),\n        )\n        tm.assert_frame_equal(\n            pd.crosstab(df.a, df.b, normalize=\"index\", margins=True), row_normal_margins\n        )\n        tm.assert_frame_equal(\n            pd.crosstab(df.a, df.b, normalize=\"columns\", margins=True),\n            col_normal_margins,\n        )\n        tm.assert_frame_equal(\n            pd.crosstab(df.a, df.b, normalize=True, margins=True), all_normal_margins\n        )\n\n        # Test arrays\n        pd.crosstab(\n            [np.array([1, 1, 2, 2]), np.array([1, 2, 1, 2])], np.array([1, 2, 1, 2])\n        )\n\n        # Test with aggfunc\n        norm_counts = pd.DataFrame(\n            [[0.25, 0, 0.25], [0.25, 0.5, 0.75], [0.5, 0.5, 1]],\n            index=pd.Index([1, 2, \"All\"], name=\"a\", dtype=\"object\"),\n            columns=pd.Index([3, 4, \"All\"], name=\"b\"),\n        )\n        test_case = pd.crosstab(\n            df.a, df.b, df.c, aggfunc=\"count\", normalize=\"all\", margins=True\n        )\n        tm.assert_frame_equal(test_case, norm_counts)\n\n        df = pd.DataFrame(\n            {\"a\": [1, 2, 2, 2, 2], \"b\": [3, 3, 4, 4, 4], \"c\": [0, 4, np.nan, 3, 3]}\n        )\n\n        norm_sum = pd.DataFrame(\n            [[0, 0, 0.0], [0.4, 0.6, 1], [0.4, 0.6, 1]],\n            index=pd.Index([1, 2, \"All\"], name=\"a\", dtype=\"object\"),\n            columns=pd.Index([3, 4, \"All\"], name=\"b\", dtype=\"object\"),\n        )\n        test_case = pd.crosstab(\n            df.a, df.b, df.c, aggfunc=np.sum, normalize=\"all\", margins=True\n        )\n        tm.assert_frame_equal(test_case, norm_sum)",
        "begin_line": 2208,
        "end_line": 2291,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_empties#2293",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_empties(self)",
        "snippet": "    def test_crosstab_with_empties(self):\n        # Check handling of empties\n        df = pd.DataFrame(\n            {\n                \"a\": [1, 2, 2, 2, 2],\n                \"b\": [3, 3, 4, 4, 4],\n                \"c\": [np.nan, np.nan, np.nan, np.nan, np.nan],\n            }\n        )\n\n        empty = pd.DataFrame(\n            [[0.0, 0.0], [0.0, 0.0]],\n            index=pd.Index([1, 2], name=\"a\", dtype=\"int64\"),\n            columns=pd.Index([3, 4], name=\"b\"),\n        )\n\n        for i in [True, \"index\", \"columns\"]:\n            calculated = pd.crosstab(\n                df.a, df.b, values=df.c, aggfunc=\"count\", normalize=i\n            )\n            tm.assert_frame_equal(empty, calculated)\n\n        nans = pd.DataFrame(\n            [[0.0, np.nan], [0.0, 0.0]],\n            index=pd.Index([1, 2], name=\"a\", dtype=\"int64\"),\n            columns=pd.Index([3, 4], name=\"b\"),\n        )\n\n        calculated = pd.crosstab(\n            df.a, df.b, values=df.c, aggfunc=\"count\", normalize=False\n        )\n        tm.assert_frame_equal(nans, calculated)",
        "begin_line": 2293,
        "end_line": 2324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_errors#2326",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_errors(self)",
        "snippet": "    def test_crosstab_errors(self):\n        # Issue 12578\n\n        df = pd.DataFrame(\n            {\"a\": [1, 2, 2, 2, 2], \"b\": [3, 3, 4, 4, 4], \"c\": [1, 1, np.nan, 1, 1]}\n        )\n\n        error = \"values cannot be used without an aggfunc.\"\n        with pytest.raises(ValueError, match=error):\n            pd.crosstab(df.a, df.b, values=df.c)\n\n        error = \"aggfunc cannot be used without values\"\n        with pytest.raises(ValueError, match=error):\n            pd.crosstab(df.a, df.b, aggfunc=np.mean)\n\n        error = \"Not a valid normalize argument\"\n        with pytest.raises(ValueError, match=error):\n            pd.crosstab(df.a, df.b, normalize=\"42\")\n\n        with pytest.raises(ValueError, match=error):\n            pd.crosstab(df.a, df.b, normalize=42)\n\n        error = \"Not a valid margins argument\"\n        with pytest.raises(ValueError, match=error):\n            pd.crosstab(df.a, df.b, normalize=\"all\", margins=42)",
        "begin_line": 2326,
        "end_line": 2350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_categorial_columns#2352",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_categorial_columns(self)",
        "snippet": "    def test_crosstab_with_categorial_columns(self):\n        # GH 8860\n        df = pd.DataFrame(\n            {\n                \"MAKE\": [\"Honda\", \"Acura\", \"Tesla\", \"Honda\", \"Honda\", \"Acura\"],\n                \"MODEL\": [\"Sedan\", \"Sedan\", \"Electric\", \"Pickup\", \"Sedan\", \"Sedan\"],\n            }\n        )\n        categories = [\"Sedan\", \"Electric\", \"Pickup\"]\n        df[\"MODEL\"] = df[\"MODEL\"].astype(\"category\").cat.set_categories(categories)\n        result = pd.crosstab(df[\"MAKE\"], df[\"MODEL\"])\n\n        expected_index = pd.Index([\"Acura\", \"Honda\", \"Tesla\"], name=\"MAKE\")\n        expected_columns = pd.CategoricalIndex(\n            categories, categories=categories, ordered=False, name=\"MODEL\"\n        )\n        expected_data = [[2, 0, 0], [2, 0, 1], [0, 1, 0]]\n        expected = pd.DataFrame(\n            expected_data, index=expected_index, columns=expected_columns\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2352,
        "end_line": 2372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_numpy_size#2374",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_with_numpy_size(self)",
        "snippet": "    def test_crosstab_with_numpy_size(self):\n        # GH 4003\n        df = pd.DataFrame(\n            {\n                \"A\": [\"one\", \"one\", \"two\", \"three\"] * 6,\n                \"B\": [\"A\", \"B\", \"C\"] * 8,\n                \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 4,\n                \"D\": np.random.randn(24),\n                \"E\": np.random.randn(24),\n            }\n        )\n        result = pd.crosstab(\n            index=[df[\"A\"], df[\"B\"]],\n            columns=[df[\"C\"]],\n            margins=True,\n            aggfunc=np.size,\n            values=df[\"D\"],\n        )\n        expected_index = pd.MultiIndex(\n            levels=[[\"All\", \"one\", \"three\", \"two\"], [\"\", \"A\", \"B\", \"C\"]],\n            codes=[[1, 1, 1, 2, 2, 2, 3, 3, 3, 0], [1, 2, 3, 1, 2, 3, 1, 2, 3, 0]],\n            names=[\"A\", \"B\"],\n        )\n        expected_column = pd.Index([\"bar\", \"foo\", \"All\"], dtype=\"object\", name=\"C\")\n        expected_data = np.array(\n            [\n                [2.0, 2.0, 4.0],\n                [2.0, 2.0, 4.0],\n                [2.0, 2.0, 4.0],\n                [2.0, np.nan, 2.0],\n                [np.nan, 2.0, 2.0],\n                [2.0, np.nan, 2.0],\n                [np.nan, 2.0, 2.0],\n                [2.0, np.nan, 2.0],\n                [np.nan, 2.0, 2.0],\n                [12.0, 12.0, 24.0],\n            ]\n        )\n        expected = pd.DataFrame(\n            expected_data, index=expected_index, columns=expected_column\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2374,
        "end_line": 2415,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_dup_index_names#2417",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_dup_index_names(self)",
        "snippet": "    def test_crosstab_dup_index_names(self):\n        # GH 13279\n        s = pd.Series(range(3), name=\"foo\")\n\n        result = pd.crosstab(s, s)\n        expected_index = pd.Index(range(3), name=\"foo\")\n        expected = pd.DataFrame(\n            np.eye(3, dtype=np.int64), index=expected_index, columns=expected_index\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2417,
        "end_line": 2426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_tuple_name#2429",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_tuple_name(self, names)",
        "snippet": "    def test_crosstab_tuple_name(self, names):\n        s1 = pd.Series(range(3), name=names[0])\n        s2 = pd.Series(range(1, 4), name=names[1])\n\n        mi = pd.MultiIndex.from_arrays([range(3), range(1, 4)], names=names)\n        expected = pd.Series(1, index=mi).unstack(1, fill_value=0)\n\n        result = pd.crosstab(s1, s2)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2429,
        "end_line": 2437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_unsorted_order#2439",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_crosstab_unsorted_order(self)",
        "snippet": "    def test_crosstab_unsorted_order(self):\n        df = pd.DataFrame({\"b\": [3, 1, 2], \"a\": [5, 4, 6]}, index=[\"C\", \"A\", \"B\"])\n        result = pd.crosstab(df.index, [df.b, df.a])\n        e_idx = pd.Index([\"A\", \"B\", \"C\"], name=\"row_0\")\n        e_columns = pd.MultiIndex.from_tuples(\n            [(1, 4), (2, 6), (3, 5)], names=[\"b\", \"a\"]\n        )\n        expected = pd.DataFrame(\n            [[1, 0, 0], [0, 1, 0], [0, 0, 1]], index=e_idx, columns=e_columns\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2439,
        "end_line": 2449,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_pivot.TestCrosstab.test_margin_normalize#2451",
        "src_path": "pandas/tests/reshape/test_pivot.py",
        "class_name": "pandas.tests.reshape.test_pivot.TestCrosstab",
        "signature": "pandas.tests.reshape.test_pivot.TestCrosstab.test_margin_normalize(self)",
        "snippet": "    def test_margin_normalize(self):\n        # GH 27500\n        df = pd.DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n        # normalize on index\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=0\n        )\n        expected = pd.DataFrame(\n            [[0.5, 0.5], [0.5, 0.5], [0.666667, 0.333333], [0, 1], [0.444444, 0.555556]]\n        )\n        expected.index = MultiIndex(\n            levels=[[\"Sub-Total\", \"bar\", \"foo\"], [\"\", \"one\", \"two\"]],\n            codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],\n            names=[\"A\", \"B\"],\n        )\n        expected.columns = Index([\"large\", \"small\"], dtype=\"object\", name=\"C\")\n        tm.assert_frame_equal(result, expected)\n\n        # normalize on columns\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=1\n        )\n        expected = pd.DataFrame(\n            [\n                [0.25, 0.2, 0.222222],\n                [0.25, 0.2, 0.222222],\n                [0.5, 0.2, 0.333333],\n                [0, 0.4, 0.222222],\n            ]\n        )\n        expected.columns = Index(\n            [\"large\", \"small\", \"Sub-Total\"], dtype=\"object\", name=\"C\"\n        )\n        expected.index = MultiIndex(\n            levels=[[\"bar\", \"foo\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n            names=[\"A\", \"B\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # normalize on both index and column\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=True\n        )\n        expected = pd.DataFrame(\n            [\n                [0.111111, 0.111111, 0.222222],\n                [0.111111, 0.111111, 0.222222],\n                [0.222222, 0.111111, 0.333333],\n                [0.000000, 0.222222, 0.222222],\n                [0.444444, 0.555555, 1],\n            ]\n        )\n        expected.columns = Index(\n            [\"large\", \"small\", \"Sub-Total\"], dtype=\"object\", name=\"C\"\n        )\n        expected.index = MultiIndex(\n            levels=[[\"Sub-Total\", \"bar\", \"foo\"], [\"\", \"one\", \"two\"]],\n            codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],\n            names=[\"A\", \"B\"],\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 2451,
        "end_line": 2530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#39",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#53",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#107",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            return type(self)(self._data[item])",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#140",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self._data)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.to_decimal#180",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.to_decimal(values, context=None)",
        "snippet": "def to_decimal(values, context=None):\n    return DecimalArray([decimal.Decimal(x) for x in values], context=context)",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    }
]