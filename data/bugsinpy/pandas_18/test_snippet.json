[
    {
        "name": "pandas.tests.window.conftest.raw#7",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.raw(request)",
        "snippet": "def raw(request):\n    return request.param",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.win_types#23",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.win_types(request)",
        "snippet": "def win_types(request):\n    return request.param",
        "begin_line": 23,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.win_types_special#28",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.win_types_special(request)",
        "snippet": "def win_types_special(request):\n    return request.param",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.arithmetic_win_operators#35",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.arithmetic_win_operators(request)",
        "snippet": "def arithmetic_win_operators(request):\n    return request.param",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.engine_and_raw#87",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.engine_and_raw(request)",
        "snippet": "def engine_and_raw(request):\n    \"\"\"engine and raw keyword arguments for rolling.apply\"\"\"\n    return request.param",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.Base._create_data#17",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.Base",
        "signature": "pandas.tests.window.common.Base._create_data(self)",
        "snippet": "    def _create_data(self):\n        arr = randn(N)\n        arr[self._nan_locs] = np.NaN\n\n        self.arr = arr\n        self.rng = bdate_range(datetime(2009, 1, 1), periods=N)\n        self.series = Series(arr.copy(), index=self.rng)\n        self.frame = DataFrame(randn(N, K), index=self.rng, columns=np.arange(K))",
        "begin_line": 17,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._create_data#211",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._create_data(self)",
        "snippet": "    def _create_data(self):\n        super()._create_data()\n        self.data = _consistency_data",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_mock_mean#215",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_mock_mean(self, mean, mock_mean)",
        "snippet": "    def _test_moments_consistency_mock_mean(self, mean, mock_mean):\n        for (x, is_constant, no_nans) in self.data:\n            mean_x = mean(x)\n            # check that correlation of a series with itself is either 1 or NaN\n\n            if mock_mean:\n                # check that mean equals mock_mean\n                expected = mock_mean(x)\n                tm.assert_equal(mean_x, expected.astype(\"float64\"))",
        "begin_line": 215,
        "end_line": 223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_is_constant#225",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_is_constant(self, min_periods, count, mean, corr)",
        "snippet": "    def _test_moments_consistency_is_constant(self, min_periods, count, mean, corr):\n        for (x, is_constant, no_nans) in self.data:\n            count_x = count(x)\n            mean_x = mean(x)\n            # check that correlation of a series with itself is either 1 or NaN\n            corr_x_x = corr(x, x)\n\n            if is_constant:\n                exp = x.max() if isinstance(x, Series) else x.max().max()\n\n                # check mean of constant series\n                expected = x * np.nan\n                expected[count_x >= max(min_periods, 1)] = exp\n                tm.assert_equal(mean_x, expected)\n\n                # check correlation of constant series with itself is NaN\n                expected[:] = np.nan\n                tm.assert_equal(corr_x_x, expected)",
        "begin_line": 225,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_var_debiasing_factors#244",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_var_debiasing_factors(self, var_biased=None, var_unbiased=None, var_debiasing_factors=None)",
        "snippet": "    def _test_moments_consistency_var_debiasing_factors(\n        self, var_biased=None, var_unbiased=None, var_debiasing_factors=None\n    ):\n        for (x, is_constant, no_nans) in self.data:\n            if var_unbiased and var_biased and var_debiasing_factors:\n                # check variance debiasing factors\n                var_unbiased_x = var_unbiased(x)\n                var_biased_x = var_biased(x)\n                var_debiasing_factors_x = var_debiasing_factors(x)\n                tm.assert_equal(var_unbiased_x, var_biased_x * var_debiasing_factors_x)",
        "begin_line": 244,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency#255",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency(self, min_periods, count, mean, corr, var_unbiased=None, std_unbiased=None, cov_unbiased=None, var_biased=None, std_biased=None, cov_biased=None)",
        "snippet": "    def _test_moments_consistency(\n        self,\n        min_periods,\n        count,\n        mean,\n        corr,\n        var_unbiased=None,\n        std_unbiased=None,\n        cov_unbiased=None,\n        var_biased=None,\n        std_biased=None,\n        cov_biased=None,\n    ):\n\n        for (x, is_constant, no_nans) in self.data:\n            count_x = count(x)\n            mean_x = mean(x)\n\n            for (std, var, cov) in [\n                (std_biased, var_biased, cov_biased),\n                (std_unbiased, var_unbiased, cov_unbiased),\n            ]:\n\n                # check that var(x), std(x), and cov(x) are all >= 0\n                var_x = var(x)\n                std_x = std(x)\n                assert not (var_x < 0).any().any()\n                assert not (std_x < 0).any().any()\n                if cov:\n                    cov_x_x = cov(x, x)\n                    assert not (cov_x_x < 0).any().any()\n\n                    # check that var(x) == cov(x, x)\n                    tm.assert_equal(var_x, cov_x_x)\n\n                # check that var(x) == std(x)^2\n                tm.assert_equal(var_x, std_x * std_x)\n\n                if var is var_biased:\n                    # check that biased var(x) == mean(x^2) - mean(x)^2\n                    mean_x2 = mean(x * x)\n                    tm.assert_equal(var_x, mean_x2 - (mean_x * mean_x))\n\n                if is_constant:\n                    # check that variance of constant series is identically 0\n                    assert not (var_x > 0).any().any()\n                    expected = x * np.nan\n                    expected[count_x >= max(min_periods, 1)] = 0.0\n                    if var is var_unbiased:\n                        expected[count_x < 2] = np.nan\n                    tm.assert_equal(var_x, expected)\n\n                if isinstance(x, Series):\n                    for (y, is_constant, no_nans) in self.data:\n                        if not x.isna().equals(y.isna()):\n                            # can only easily test two Series with similar\n                            # structure\n                            continue\n\n                        # check that cor(x, y) is symmetric\n                        corr_x_y = corr(x, y)\n                        corr_y_x = corr(y, x)\n                        tm.assert_equal(corr_x_y, corr_y_x)\n\n                        if cov:\n                            # check that cov(x, y) is symmetric\n                            cov_x_y = cov(x, y)\n                            cov_y_x = cov(y, x)\n                            tm.assert_equal(cov_x_y, cov_y_x)\n\n                            # check that cov(x, y) == (var(x+y) - var(x) -\n                            # var(y)) / 2\n                            var_x_plus_y = var(x + y)\n                            var_y = var(y)\n                            tm.assert_equal(\n                                cov_x_y, 0.5 * (var_x_plus_y - var_x - var_y)\n                            )\n\n                            # check that corr(x, y) == cov(x, y) / (std(x) *\n                            # std(y))\n                            std_y = std(y)\n                            tm.assert_equal(corr_x_y, cov_x_y / (std_x * std_y))\n\n                            if cov is cov_biased:\n                                # check that biased cov(x, y) == mean(x*y) -\n                                # mean(x)*mean(y)\n                                mean_y = mean(y)\n                                mean_x_times_y = mean(x * y)\n                                tm.assert_equal(\n                                    cov_x_y, mean_x_times_y - (mean_x * mean_y)\n                                )",
        "begin_line": 255,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._check_pairwise_moment#347",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._check_pairwise_moment(self, dispatch, name, **kwargs)",
        "snippet": "    def _check_pairwise_moment(self, dispatch, name, **kwargs):\n        def get_result(obj, obj2=None):\n            return getattr(getattr(obj, dispatch)(**kwargs), name)(obj2)\n\n        result = get_result(self.frame)\n        result = result.loc[(slice(None), 1), 5]\n        result.index = result.index.droplevel(1)\n        expected = get_result(self.frame[1], self.frame[5])\n        tm.assert_series_equal(result, expected, check_names=False)",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase.get_result#348",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase.get_result(obj, obj2=None)",
        "snippet": "        def get_result(obj, obj2=None):\n            return getattr(getattr(obj, dispatch)(**kwargs), name)(obj2)",
        "begin_line": 348,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ew_func#358",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common",
        "signature": "pandas.tests.window.common.ew_func(A, B, com, name, **kwargs)",
        "snippet": "def ew_func(A, B, com, name, **kwargs):\n    return getattr(A.ewm(com, **kwargs), name)(B)",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.check_binary_ew#362",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common",
        "signature": "pandas.tests.window.common.check_binary_ew(name, A, B)",
        "snippet": "def check_binary_ew(name, A, B):\n\n    result = ew_func(A=A, B=B, com=20, name=name, min_periods=5)\n    assert np.isnan(result.values[:14]).all()\n    assert not np.isnan(result.values[14:]).any()",
        "begin_line": 362,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.check_binary_ew_min_periods#369",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common",
        "signature": "pandas.tests.window.common.check_binary_ew_min_periods(name, min_periods, A, B)",
        "snippet": "def check_binary_ew_min_periods(name, min_periods, A, B):\n    # GH 7898\n    result = ew_func(A, B, 20, name=name, min_periods=min_periods)\n    # binary functions (ewmcov, ewmcorr) with bias=False require at\n    # least two values\n    assert np.isnan(result.values[:11]).all()\n    assert not np.isnan(result.values[11:]).any()\n\n    # check series of length 0\n    empty = Series([], dtype=np.float64)\n    result = ew_func(empty, empty, 50, name=name, min_periods=min_periods)\n    tm.assert_series_equal(result, empty)\n\n    # check series of length 1\n    result = ew_func(\n        Series([1.0]), Series([1.0]), 50, name=name, min_periods=min_periods\n    )\n    tm.assert_series_equal(result, Series([np.NaN]))",
        "begin_line": 369,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_bad_get_window_bounds_signature#10",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_bad_get_window_bounds_signature()",
        "snippet": "def test_bad_get_window_bounds_signature():\n    class BadIndexer(BaseIndexer):\n        def get_window_bounds(self):\n            return None\n\n    indexer = BadIndexer()\n    with pytest.raises(ValueError, match=\"BadIndexer does not implement\"):\n        Series(range(5)).rolling(indexer)",
        "begin_line": 10,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.BadIndexer.test_bad_get_window_bounds_signature#10",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.BadIndexer",
        "signature": "pandas.tests.window.test_base_indexer.BadIndexer.test_bad_get_window_bounds_signature()",
        "snippet": "def test_bad_get_window_bounds_signature():\n    class BadIndexer(BaseIndexer):\n        def get_window_bounds(self):\n            return None\n\n    indexer = BadIndexer()\n    with pytest.raises(ValueError, match=\"BadIndexer does not implement\"):\n        Series(range(5)).rolling(indexer)",
        "begin_line": 10,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.BadIndexer.get_window_bounds#12",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.BadIndexer",
        "signature": "pandas.tests.window.test_base_indexer.BadIndexer.get_window_bounds(self)",
        "snippet": "        def get_window_bounds(self):\n            return None",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_expanding_indexer#20",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_expanding_indexer()",
        "snippet": "def test_expanding_indexer():\n    s = Series(range(10))\n    indexer = ExpandingIndexer()\n    result = s.rolling(indexer).mean()\n    expected = s.expanding().mean()\n    tm.assert_series_equal(result, expected)",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_indexer_constructor_arg#28",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_indexer_constructor_arg()",
        "snippet": "def test_indexer_constructor_arg():\n    # Example found in computation.rst\n    use_expanding = [True, False, True, False, True]\n    df = DataFrame({\"values\": range(5)})\n\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            start = np.empty(num_values, dtype=np.int64)\n            end = np.empty(num_values, dtype=np.int64)\n            for i in range(num_values):\n                if self.use_expanding[i]:\n                    start[i] = 0\n                    end[i] = i + 1\n                else:\n                    start[i] = i\n                    end[i] = i + self.window_size\n            return start, end\n\n    indexer = CustomIndexer(window_size=1, use_expanding=use_expanding)\n    result = df.rolling(indexer).sum()\n    expected = DataFrame({\"values\": [0.0, 1.0, 3.0, 3.0, 10.0]})\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 28,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.test_indexer_constructor_arg#28",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.test_indexer_constructor_arg()",
        "snippet": "def test_indexer_constructor_arg():\n    # Example found in computation.rst\n    use_expanding = [True, False, True, False, True]\n    df = DataFrame({\"values\": range(5)})\n\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            start = np.empty(num_values, dtype=np.int64)\n            end = np.empty(num_values, dtype=np.int64)\n            for i in range(num_values):\n                if self.use_expanding[i]:\n                    start[i] = 0\n                    end[i] = i + 1\n                else:\n                    start[i] = i\n                    end[i] = i + self.window_size\n            return start, end\n\n    indexer = CustomIndexer(window_size=1, use_expanding=use_expanding)\n    result = df.rolling(indexer).sum()\n    expected = DataFrame({\"values\": [0.0, 1.0, 3.0, 3.0, 10.0]})\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 28,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds#34",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds(self, num_values, min_periods, center, closed)",
        "snippet": "        def get_window_bounds(self, num_values, min_periods, center, closed):\n            start = np.empty(num_values, dtype=np.int64)\n            end = np.empty(num_values, dtype=np.int64)\n            for i in range(num_values):\n                if self.use_expanding[i]:\n                    start[i] = 0\n                    end[i] = i + 1\n                else:\n                    start[i] = i\n                    end[i] = i + self.window_size\n            return start, end",
        "begin_line": 34,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_indexer_accepts_rolling_args#52",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_indexer_accepts_rolling_args()",
        "snippet": "def test_indexer_accepts_rolling_args():\n    df = DataFrame({\"values\": range(5)})\n\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            start = np.empty(num_values, dtype=np.int64)\n            end = np.empty(num_values, dtype=np.int64)\n            for i in range(num_values):\n                if center and min_periods == 1 and closed == \"both\" and i == 2:\n                    start[i] = 0\n                    end[i] = num_values\n                else:\n                    start[i] = i\n                    end[i] = i + self.window_size\n            return start, end\n\n    indexer = CustomIndexer(window_size=1)\n    result = df.rolling(indexer, center=True, min_periods=1, closed=\"both\").sum()\n    expected = DataFrame({\"values\": [0.0, 1.0, 10.0, 3.0, 4.0]})\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 52,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.test_indexer_accepts_rolling_args#52",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.test_indexer_accepts_rolling_args()",
        "snippet": "def test_indexer_accepts_rolling_args():\n    df = DataFrame({\"values\": range(5)})\n\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            start = np.empty(num_values, dtype=np.int64)\n            end = np.empty(num_values, dtype=np.int64)\n            for i in range(num_values):\n                if center and min_periods == 1 and closed == \"both\" and i == 2:\n                    start[i] = 0\n                    end[i] = num_values\n                else:\n                    start[i] = i\n                    end[i] = i + self.window_size\n            return start, end\n\n    indexer = CustomIndexer(window_size=1)\n    result = df.rolling(indexer, center=True, min_periods=1, closed=\"both\").sum()\n    expected = DataFrame({\"values\": [0.0, 1.0, 10.0, 3.0, 4.0]})\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 52,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds#56",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds(self, num_values, min_periods, center, closed)",
        "snippet": "        def get_window_bounds(self, num_values, min_periods, center, closed):\n            start = np.empty(num_values, dtype=np.int64)\n            end = np.empty(num_values, dtype=np.int64)\n            for i in range(num_values):\n                if center and min_periods == 1 and closed == \"both\" and i == 2:\n                    start[i] = 0\n                    end[i] = num_values\n                else:\n                    start[i] = i\n                    end[i] = i + self.window_size\n            return start, end",
        "begin_line": 56,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_win_type_not_implemented#74",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_win_type_not_implemented()",
        "snippet": "def test_win_type_not_implemented():\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            return np.array([0, 1]), np.array([1, 2])\n\n    df = DataFrame({\"values\": range(2)})\n    indexer = CustomIndexer()\n    with pytest.raises(NotImplementedError, match=\"BaseIndexer subclasses not\"):\n        df.rolling(indexer, win_type=\"boxcar\")",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.test_win_type_not_implemented#74",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.test_win_type_not_implemented()",
        "snippet": "def test_win_type_not_implemented():\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            return np.array([0, 1]), np.array([1, 2])\n\n    df = DataFrame({\"values\": range(2)})\n    indexer = CustomIndexer()\n    with pytest.raises(NotImplementedError, match=\"BaseIndexer subclasses not\"):\n        df.rolling(indexer, win_type=\"boxcar\")",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds#76",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds(self, num_values, min_periods, center, closed)",
        "snippet": "        def get_window_bounds(self, num_values, min_periods, center, closed):\n            return np.array([0, 1]), np.array([1, 2])",
        "begin_line": 76,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_notimplemented_functions#86",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_notimplemented_functions(func)",
        "snippet": "def test_notimplemented_functions(func):\n    # GH 32865\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            return np.array([0, 1]), np.array([1, 2])\n\n    df = DataFrame({\"values\": range(2)})\n    indexer = CustomIndexer()\n    with pytest.raises(NotImplementedError, match=f\"{func} is not supported\"):\n        getattr(df.rolling(indexer), func)()",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.test_notimplemented_functions#86",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.test_notimplemented_functions(func)",
        "snippet": "def test_notimplemented_functions(func):\n    # GH 32865\n    class CustomIndexer(BaseIndexer):\n        def get_window_bounds(self, num_values, min_periods, center, closed):\n            return np.array([0, 1]), np.array([1, 2])\n\n    df = DataFrame({\"values\": range(2)})\n    indexer = CustomIndexer()\n    with pytest.raises(NotImplementedError, match=f\"{func} is not supported\"):\n        getattr(df.rolling(indexer), func)()",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds#89",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer.CustomIndexer",
        "signature": "pandas.tests.window.test_base_indexer.CustomIndexer.get_window_bounds(self, num_values, min_periods, center, closed)",
        "snippet": "        def get_window_bounds(self, num_values, min_periods, center, closed):\n            return np.array([0, 1]), np.array([1, 2])",
        "begin_line": 89,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_rolling_forward_window#152",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_rolling_forward_window(constructor, func, np_func, expected, np_kwargs)",
        "snippet": "def test_rolling_forward_window(constructor, func, np_func, expected, np_kwargs):\n    # GH 32865\n    values = np.arange(10)\n    values[5] = 100.0\n\n    indexer = FixedForwardWindowIndexer(window_size=3)\n\n    match = \"Forward-looking windows can't have center=True\"\n    with pytest.raises(ValueError, match=match):\n        rolling = constructor(values).rolling(window=indexer, center=True)\n        result = getattr(rolling, func)()\n\n    match = \"Forward-looking windows don't support setting the closed argument\"\n    with pytest.raises(ValueError, match=match):\n        rolling = constructor(values).rolling(window=indexer, closed=\"right\")\n        result = getattr(rolling, func)()\n\n    rolling = constructor(values).rolling(window=indexer, min_periods=2)\n    result = getattr(rolling, func)()\n\n    # Check that the function output matches the explicitly provided array\n    expected = constructor(expected)\n    tm.assert_equal(result, expected)\n\n    # Check that the rolling function output matches applying an alternative\n    # function to the rolling window object\n    expected2 = constructor(rolling.apply(lambda x: np_func(x, **np_kwargs)))\n    tm.assert_equal(result, expected2)\n\n    # Check that the function output matches applying an alternative function\n    # if min_periods isn't specified\n    rolling3 = constructor(values).rolling(window=indexer)\n    result3 = getattr(rolling3, func)()\n    expected3 = constructor(rolling3.apply(lambda x: np_func(x, **np_kwargs)))\n    tm.assert_equal(result3, expected3)",
        "begin_line": 152,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_base_indexer.test_rolling_forward_skewness#190",
        "src_path": "pandas/tests/window/test_base_indexer.py",
        "class_name": "pandas.tests.window.test_base_indexer",
        "signature": "pandas.tests.window.test_base_indexer.test_rolling_forward_skewness(constructor)",
        "snippet": "def test_rolling_forward_skewness(constructor):\n    values = np.arange(10)\n    values[5] = 100.0\n\n    indexer = FixedForwardWindowIndexer(window_size=5)\n    rolling = constructor(values).rolling(window=indexer, min_periods=3)\n    result = rolling.skew()\n\n    expected = constructor(\n        [\n            0.0,\n            2.232396,\n            2.229508,\n            2.228340,\n            2.229091,\n            2.231989,\n            0.0,\n            0.0,\n            np.nan,\n            np.nan,\n        ]\n    )\n    tm.assert_equal(result, expected)",
        "begin_line": 190,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.moments.conftest.binary_ew_data#9",
        "src_path": "pandas/tests/window/moments/conftest.py",
        "class_name": "pandas.tests.window.moments.conftest",
        "signature": "pandas.tests.window.moments.conftest.binary_ew_data()",
        "snippet": "def binary_ew_data():\n    A = Series(randn(50), index=np.arange(50))\n    B = A[2:] + randn(48)\n\n    A[:10] = np.NaN\n    B[-10:] = np.NaN\n    return A, B",
        "begin_line": 9,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.moments.conftest.min_periods#19",
        "src_path": "pandas/tests/window/moments/conftest.py",
        "class_name": "pandas.tests.window.moments.conftest",
        "signature": "pandas.tests.window.moments.conftest.min_periods(request)",
        "snippet": "def min_periods(request):\n    return request.param",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    }
]