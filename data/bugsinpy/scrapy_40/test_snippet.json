[
    {
        "name": "tests.test_exporters.BaseItemExporterTest.setUp#29",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.i = TestItem(name=u'John\\xa3', age=u'22')\n        self.output = BytesIO()\n        self.ie = self._get_exporter()",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest._get_exporter#34",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return BaseItemExporter(**kwargs)",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest._check_output#37",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        pass",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest._assert_expected_item#40",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest._assert_expected_item(self, exported_dict)",
        "snippet": "    def _assert_expected_item(self, exported_dict):\n        for k, v in exported_dict.items():\n            exported_dict[k] = to_unicode(v)\n        self.assertEqual(self.i, exported_dict)",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.assertItemExportWorks#45",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.assertItemExportWorks(self, item)",
        "snippet": "    def assertItemExportWorks(self, item):\n        self.ie.start_exporting()\n        try:\n            self.ie.export_item(item)\n        except NotImplementedError:\n            if self.ie.__class__ is not BaseItemExporter:\n                raise\n        self.ie.finish_exporting()\n        self._check_output()",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.test_export_item#55",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.test_export_item(self)",
        "snippet": "    def test_export_item(self):\n        self.assertItemExportWorks(self.i)",
        "begin_line": 55,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.test_export_dict_item#58",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.test_export_dict_item(self)",
        "snippet": "    def test_export_dict_item(self):\n        self.assertItemExportWorks(dict(self.i))",
        "begin_line": 58,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.test_serialize_field#61",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.test_serialize_field(self)",
        "snippet": "    def test_serialize_field(self):\n        res = self.ie.serialize_field(self.i.fields['name'], 'name', self.i['name'])\n        self.assertEqual(res, u'John\\xa3')\n\n        res = self.ie.serialize_field(self.i.fields['age'], 'age', self.i['age'])\n        self.assertEqual(res, u'22')",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.test_fields_to_export#68",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.test_fields_to_export(self)",
        "snippet": "    def test_fields_to_export(self):\n        ie = self._get_exporter(fields_to_export=['name'])\n        self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', u'John\\xa3')])\n\n        ie = self._get_exporter(fields_to_export=['name'], encoding='latin-1')\n        _, name = list(ie._get_serialized_fields(self.i))[0]\n        assert isinstance(name, six.text_type)\n        self.assertEqual(name, u'John\\xa3')",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.test_field_custom_serializer#77",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.test_field_custom_serializer(self)",
        "snippet": "    def test_field_custom_serializer(self):\n        def custom_serializer(value):\n            return str(int(value) + 2)\n\n        class CustomFieldItem(Item):\n            name = Field()\n            age = Field(serializer=custom_serializer)\n\n        i = CustomFieldItem(name=u'John\\xa3', age=u'22')\n\n        ie = self._get_exporter()\n        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), u'John\\xa3')\n        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.BaseItemExporterTest.custom_serializer#78",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.BaseItemExporterTest",
        "signature": "tests.test_exporters.BaseItemExporterTest.custom_serializer(value)",
        "snippet": "        def custom_serializer(value):\n            return str(int(value) + 2)",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CustomFieldItem.test_field_custom_serializer#77",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CustomFieldItem",
        "signature": "tests.test_exporters.CustomFieldItem.test_field_custom_serializer(self)",
        "snippet": "    def test_field_custom_serializer(self):\n        def custom_serializer(value):\n            return str(int(value) + 2)\n\n        class CustomFieldItem(Item):\n            name = Field()\n            age = Field(serializer=custom_serializer)\n\n        i = CustomFieldItem(name=u'John\\xa3', age=u'22')\n\n        ie = self._get_exporter()\n        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), u'John\\xa3')\n        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest._get_exporter#93",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return PythonItemExporter(binary=False, **kwargs)",
        "begin_line": 93,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest.test_invalid_option#96",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest.test_invalid_option(self)",
        "snippet": "    def test_invalid_option(self):\n        with self.assertRaisesRegexp(TypeError, \"Unexpected options: invalid_option\"):\n            PythonItemExporter(invalid_option='something')",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest.test_nested_item#100",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest.test_nested_item(self)",
        "snippet": "    def test_nested_item(self):\n        i1 = TestItem(name=u'Joseph', age='22')\n        i2 = dict(name=u'Maria', age=i1)\n        i3 = TestItem(name=u'Jesus', age=i2)\n        ie = self._get_exporter()\n        exported = ie.export_item(i3)\n        self.assertEqual(type(exported), dict)\n        self.assertEqual(exported, {'age': {'age': {'age': '22', 'name': u'Joseph'}, 'name': u'Maria'}, 'name': 'Jesus'})\n        self.assertEqual(type(exported['age']), dict)\n        self.assertEqual(type(exported['age']['age']), dict)",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest.test_export_list#111",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest.test_export_list(self)",
        "snippet": "    def test_export_list(self):\n        i1 = TestItem(name=u'Joseph', age='22')\n        i2 = TestItem(name=u'Maria', age=[i1])\n        i3 = TestItem(name=u'Jesus', age=[i2])\n        ie = self._get_exporter()\n        exported = ie.export_item(i3)\n        self.assertEqual(exported, {'age': [{'age': [{'age': '22', 'name': u'Joseph'}], 'name': u'Maria'}], 'name': 'Jesus'})\n        self.assertEqual(type(exported['age'][0]), dict)\n        self.assertEqual(type(exported['age'][0]['age'][0]), dict)",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest.test_export_item_dict_list#121",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest.test_export_item_dict_list(self)",
        "snippet": "    def test_export_item_dict_list(self):\n        i1 = TestItem(name=u'Joseph', age='22')\n        i2 = dict(name=u'Maria', age=[i1])\n        i3 = TestItem(name=u'Jesus', age=[i2])\n        ie = self._get_exporter()\n        exported = ie.export_item(i3)\n        self.assertEqual(exported, {'age': [{'age': [{'age': '22', 'name': u'Joseph'}], 'name': u'Maria'}], 'name': 'Jesus'})\n        self.assertEqual(type(exported['age'][0]), dict)\n        self.assertEqual(type(exported['age'][0]['age'][0]), dict)",
        "begin_line": 121,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest.test_export_binary#131",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest.test_export_binary(self)",
        "snippet": "    def test_export_binary(self):\n        exporter = PythonItemExporter(binary=True)\n        value = TestItem(name=u'John\\xa3', age=u'22')\n        expected = {b'name': b'John\\xc2\\xa3', b'age': b'22'}\n        self.assertEqual(expected, exporter.export_item(value))",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PythonItemExporterTest.test_other_python_types_item#137",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PythonItemExporterTest",
        "signature": "tests.test_exporters.PythonItemExporterTest.test_other_python_types_item(self)",
        "snippet": "    def test_other_python_types_item(self):\n        from datetime import datetime\n        now = datetime.now()\n        item = {\n            'boolean': False,\n            'number': 22,\n            'time': now,\n            'float': 3.14,\n        }\n        ie = self._get_exporter()\n        exported = ie.export_item(item)\n        self.assertEqual(exported, item)",
        "begin_line": 137,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PprintItemExporterTest._get_exporter#153",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PprintItemExporterTest",
        "signature": "tests.test_exporters.PprintItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return PprintItemExporter(self.output, **kwargs)",
        "begin_line": 153,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PprintItemExporterTest._check_output#156",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PprintItemExporterTest",
        "signature": "tests.test_exporters.PprintItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        self._assert_expected_item(eval(self.output.getvalue()))",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PickleItemExporterTest._get_exporter#162",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PickleItemExporterTest",
        "signature": "tests.test_exporters.PickleItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return PickleItemExporter(self.output, **kwargs)",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PickleItemExporterTest._check_output#165",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PickleItemExporterTest",
        "signature": "tests.test_exporters.PickleItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        self._assert_expected_item(pickle.loads(self.output.getvalue()))",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.PickleItemExporterTest.test_export_multiple_items#168",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.PickleItemExporterTest",
        "signature": "tests.test_exporters.PickleItemExporterTest.test_export_multiple_items(self)",
        "snippet": "    def test_export_multiple_items(self):\n        i1 = TestItem(name='hello', age='world')\n        i2 = TestItem(name='bye', age='world')\n        f = BytesIO()\n        ie = PickleItemExporter(f)\n        ie.start_exporting()\n        ie.export_item(i1)\n        ie.export_item(i2)\n        ie.finish_exporting()\n        f.seek(0)\n        self.assertEqual(pickle.load(f), i1)\n        self.assertEqual(pickle.load(f), i2)",
        "begin_line": 168,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.MarshalItemExporterTest._get_exporter#184",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.MarshalItemExporterTest",
        "signature": "tests.test_exporters.MarshalItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        self.output = tempfile.TemporaryFile()\n        return MarshalItemExporter(self.output, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.MarshalItemExporterTest._check_output#188",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.MarshalItemExporterTest",
        "signature": "tests.test_exporters.MarshalItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        self.output.seek(0)\n        self._assert_expected_item(marshal.load(self.output))",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest._get_exporter#194",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return CsvItemExporter(self.output, **kwargs)",
        "begin_line": 194,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.assertCsvEqual#197",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.assertCsvEqual(self, first, second, msg=None)",
        "snippet": "    def assertCsvEqual(self, first, second, msg=None):\n        first = to_unicode(first)\n        second = to_unicode(second)\n        csvsplit = lambda csv: [sorted(re.split(r'(,|\\s+)', line))\n                                for line in csv.splitlines(True)]\n        return self.assertEqual(csvsplit(first), csvsplit(second), msg)",
        "begin_line": 197,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest._check_output#204",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        self.assertCsvEqual(to_unicode(self.output.getvalue()), u'age,name\\r\\n22,John\\xa3\\r\\n')",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.assertExportResult#207",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.assertExportResult(self, item, expected, **kwargs)",
        "snippet": "    def assertExportResult(self, item, expected, **kwargs):\n        fp = BytesIO()\n        ie = CsvItemExporter(fp, **kwargs)\n        ie.start_exporting()\n        ie.export_item(item)\n        ie.finish_exporting()\n        self.assertCsvEqual(fp.getvalue(), expected)",
        "begin_line": 207,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_header_export_all#215",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_header_export_all(self)",
        "snippet": "    def test_header_export_all(self):\n        self.assertExportResult(\n            item=self.i,\n            fields_to_export=self.i.fields.keys(),\n            expected=b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n        )",
        "begin_line": 215,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_header_export_all_dict#222",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_header_export_all_dict(self)",
        "snippet": "    def test_header_export_all_dict(self):\n        self.assertExportResult(\n            item=dict(self.i),\n            expected=b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n        )",
        "begin_line": 222,
        "end_line": 226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_header_export_single_field#228",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_header_export_single_field(self)",
        "snippet": "    def test_header_export_single_field(self):\n        for item in [self.i, dict(self.i)]:\n            self.assertExportResult(\n                item=item,\n                fields_to_export=['age'],\n                expected=b'age\\r\\n22\\r\\n',\n            )",
        "begin_line": 228,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_header_export_two_items#236",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_header_export_two_items(self)",
        "snippet": "    def test_header_export_two_items(self):\n        for item in [self.i, dict(self.i)]:\n            output = BytesIO()\n            ie = CsvItemExporter(output)\n            ie.start_exporting()\n            ie.export_item(item)\n            ie.export_item(item)\n            ie.finish_exporting()\n            self.assertCsvEqual(output.getvalue(),\n                                b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n22,John\\xc2\\xa3\\r\\n')",
        "begin_line": 236,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_header_no_header_line#247",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_header_no_header_line(self)",
        "snippet": "    def test_header_no_header_line(self):\n        for item in [self.i, dict(self.i)]:\n            self.assertExportResult(\n                item=item,\n                include_headers_line=False,\n                expected=b'22,John\\xc2\\xa3\\r\\n',\n            )",
        "begin_line": 247,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_join_multivalue#255",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_join_multivalue(self)",
        "snippet": "    def test_join_multivalue(self):\n        class TestItem2(Item):\n            name = Field()\n            friends = Field()\n\n        for cls in TestItem2, dict:\n            self.assertExportResult(\n                item=cls(name='John', friends=['Mary', 'Paul']),\n                include_headers_line=False,\n                expected='\"Mary,Paul\",John\\r\\n',\n            )",
        "begin_line": 255,
        "end_line": 265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.TestItem2.test_join_multivalue#255",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.TestItem2",
        "signature": "tests.test_exporters.TestItem2.test_join_multivalue(self)",
        "snippet": "    def test_join_multivalue(self):\n        class TestItem2(Item):\n            name = Field()\n            friends = Field()\n\n        for cls in TestItem2, dict:\n            self.assertExportResult(\n                item=cls(name='John', friends=['Mary', 'Paul']),\n                include_headers_line=False,\n                expected='\"Mary,Paul\",John\\r\\n',\n            )",
        "begin_line": 255,
        "end_line": 265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CsvItemExporterTest.test_join_multivalue_not_strings#267",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CsvItemExporterTest",
        "signature": "tests.test_exporters.CsvItemExporterTest.test_join_multivalue_not_strings(self)",
        "snippet": "    def test_join_multivalue_not_strings(self):\n        self.assertExportResult(\n            item=dict(name='John', friends=[4, 8]),\n            include_headers_line=False,\n            expected='\"[4, 8]\",John\\r\\n',\n        )",
        "begin_line": 267,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest._get_exporter#277",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return XmlItemExporter(self.output, **kwargs)",
        "begin_line": 277,
        "end_line": 278,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.assertXmlEquivalent#280",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.assertXmlEquivalent(self, first, second, msg=None)",
        "snippet": "    def assertXmlEquivalent(self, first, second, msg=None):\n        def xmltuple(elem):\n            children = list(elem.iterchildren())\n            if children:\n                return [(child.tag, sorted(xmltuple(child)))\n                        for child in children]\n            else:\n                return [(elem.tag, [(elem.text, ())])]\n        def xmlsplit(xmlcontent):\n            doc = lxml.etree.fromstring(xmlcontent)\n            return xmltuple(doc)\n        return self.assertEqual(xmlsplit(first), xmlsplit(second), msg)",
        "begin_line": 280,
        "end_line": 291,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.xmltuple#281",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.xmltuple(elem)",
        "snippet": "        def xmltuple(elem):\n            children = list(elem.iterchildren())\n            if children:\n                return [(child.tag, sorted(xmltuple(child)))\n                        for child in children]\n            else:\n                return [(elem.tag, [(elem.text, ())])]",
        "begin_line": 281,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.xmlsplit#288",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.xmlsplit(xmlcontent)",
        "snippet": "        def xmlsplit(xmlcontent):\n            doc = lxml.etree.fromstring(xmlcontent)\n            return xmltuple(doc)",
        "begin_line": 288,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.assertExportResult#293",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.assertExportResult(self, item, expected_value)",
        "snippet": "    def assertExportResult(self, item, expected_value):\n        fp = BytesIO()\n        ie = XmlItemExporter(fp)\n        ie.start_exporting()\n        ie.export_item(item)\n        ie.finish_exporting()\n        self.assertXmlEquivalent(fp.getvalue(), expected_value)",
        "begin_line": 293,
        "end_line": 299,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest._check_output#301",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        expected_value = b'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<items><item><age>22</age><name>John\\xc2\\xa3</name></item></items>'\n        self.assertXmlEquivalent(self.output.getvalue(), expected_value)",
        "begin_line": 301,
        "end_line": 303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.test_multivalued_fields#305",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.test_multivalued_fields(self)",
        "snippet": "    def test_multivalued_fields(self):\n        self.assertExportResult(\n            TestItem(name=[u'John\\xa3', u'Doe']),\n            b'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<items><item><name><value>John\\xc2\\xa3</value><value>Doe</value></name></item></items>'\n        )",
        "begin_line": 305,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.test_nested_item#311",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.test_nested_item(self)",
        "snippet": "    def test_nested_item(self):\n        i1 = TestItem(name=u'foo\\xa3hoo', age='22')\n        i2 = dict(name=u'bar', age=i1)\n        i3 = TestItem(name=u'buz', age=i2)\n\n        self.assertExportResult(i3,\n            b'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n            b'<items>'\n                b'<item>'\n                    b'<age>'\n                        b'<age>'\n                            b'<age>22</age>'\n                            b'<name>foo\\xc2\\xa3hoo</name>'\n                        b'</age>'\n                        b'<name>bar</name>'\n                    b'</age>'\n                    b'<name>buz</name>'\n                b'</item>'\n            b'</items>'\n        )",
        "begin_line": 311,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.XmlItemExporterTest.test_nested_list_item#332",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.XmlItemExporterTest",
        "signature": "tests.test_exporters.XmlItemExporterTest.test_nested_list_item(self)",
        "snippet": "    def test_nested_list_item(self):\n        i1 = TestItem(name=u'foo')\n        i2 = dict(name=u'bar', v2={\"egg\": [\"spam\"]})\n        i3 = TestItem(name=u'buz', age=[i1, i2])\n\n        self.assertExportResult(i3,\n            b'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n            b'<items>'\n                b'<item>'\n                    b'<age>'\n                        b'<value><name>foo</name></value>'\n                        b'<value><name>bar</name><v2><egg><value>spam</value></egg></v2></value>'\n                    b'</age>'\n                    b'<name>buz</name>'\n                b'</item>'\n            b'</items>'\n        )",
        "begin_line": 332,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonLinesItemExporterTest._get_exporter#355",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonLinesItemExporterTest",
        "signature": "tests.test_exporters.JsonLinesItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return JsonLinesItemExporter(self.output, **kwargs)",
        "begin_line": 355,
        "end_line": 356,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonLinesItemExporterTest._check_output#358",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonLinesItemExporterTest",
        "signature": "tests.test_exporters.JsonLinesItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        exported = json.loads(to_unicode(self.output.getvalue().strip()))\n        self.assertEqual(exported, dict(self.i))",
        "begin_line": 358,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonLinesItemExporterTest.test_nested_item#362",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonLinesItemExporterTest",
        "signature": "tests.test_exporters.JsonLinesItemExporterTest.test_nested_item(self)",
        "snippet": "    def test_nested_item(self):\n        i1 = TestItem(name=u'Joseph', age='22')\n        i2 = dict(name=u'Maria', age=i1)\n        i3 = TestItem(name=u'Jesus', age=i2)\n        self.ie.start_exporting()\n        self.ie.export_item(i3)\n        self.ie.finish_exporting()\n        exported = json.loads(to_unicode(self.output.getvalue()))\n        self.assertEqual(exported, self._expected_nested)",
        "begin_line": 362,
        "end_line": 370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonLinesItemExporterTest.test_extra_keywords#372",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonLinesItemExporterTest",
        "signature": "tests.test_exporters.JsonLinesItemExporterTest.test_extra_keywords(self)",
        "snippet": "    def test_extra_keywords(self):\n        self.ie = self._get_exporter(sort_keys=True)\n        self.test_export_item()\n        self._check_output()\n        self.assertRaises(TypeError, self._get_exporter, foo_unknown_keyword_bar=True)",
        "begin_line": 372,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest._get_exporter#383",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest._get_exporter(self, **kwargs)",
        "snippet": "    def _get_exporter(self, **kwargs):\n        return JsonItemExporter(self.output, **kwargs)",
        "begin_line": 383,
        "end_line": 384,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest._check_output#386",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest._check_output(self)",
        "snippet": "    def _check_output(self):\n        exported = json.loads(to_unicode(self.output.getvalue().strip()))\n        self.assertEqual(exported, [dict(self.i)])",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest.assertTwoItemsExported#390",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest.assertTwoItemsExported(self, item)",
        "snippet": "    def assertTwoItemsExported(self, item):\n        self.ie.start_exporting()\n        self.ie.export_item(item)\n        self.ie.export_item(item)\n        self.ie.finish_exporting()\n        exported = json.loads(to_unicode(self.output.getvalue()))\n        self.assertEqual(exported, [dict(item), dict(item)])",
        "begin_line": 390,
        "end_line": 396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest.test_two_items#398",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest.test_two_items(self)",
        "snippet": "    def test_two_items(self):\n        self.assertTwoItemsExported(self.i)",
        "begin_line": 398,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest.test_two_dict_items#401",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest.test_two_dict_items(self)",
        "snippet": "    def test_two_dict_items(self):\n        self.assertTwoItemsExported(dict(self.i))",
        "begin_line": 401,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest.test_nested_item#404",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest.test_nested_item(self)",
        "snippet": "    def test_nested_item(self):\n        i1 = TestItem(name=u'Joseph\\xa3', age='22')\n        i2 = TestItem(name=u'Maria', age=i1)\n        i3 = TestItem(name=u'Jesus', age=i2)\n        self.ie.start_exporting()\n        self.ie.export_item(i3)\n        self.ie.finish_exporting()\n        exported = json.loads(to_unicode(self.output.getvalue()))\n        expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': dict(i1)}}\n        self.assertEqual(exported, [expected])",
        "begin_line": 404,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.JsonItemExporterTest.test_nested_dict_item#415",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.JsonItemExporterTest",
        "signature": "tests.test_exporters.JsonItemExporterTest.test_nested_dict_item(self)",
        "snippet": "    def test_nested_dict_item(self):\n        i1 = dict(name=u'Joseph\\xa3', age='22')\n        i2 = TestItem(name=u'Maria', age=i1)\n        i3 = dict(name=u'Jesus', age=i2)\n        self.ie.start_exporting()\n        self.ie.export_item(i3)\n        self.ie.finish_exporting()\n        exported = json.loads(to_unicode(self.output.getvalue()))\n        expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': i1}}\n        self.assertEqual(exported, [expected])",
        "begin_line": 415,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CustomItemExporterTest.test_exporter_custom_serializer#429",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CustomItemExporterTest",
        "signature": "tests.test_exporters.CustomItemExporterTest.test_exporter_custom_serializer(self)",
        "snippet": "    def test_exporter_custom_serializer(self):\n        class CustomItemExporter(BaseItemExporter):\n            def serialize_field(self, field, name, value):\n                if name == 'age':\n                    return str(int(value) + 1)\n                else:\n                    return super(CustomItemExporter, self).serialize_field(field, name, value)\n\n        i = TestItem(name=u'John', age='22')\n        ie = CustomItemExporter()\n\n        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), 'John')\n        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '23')\n\n        i2 = {'name': u'John', 'age': '22'}\n        self.assertEqual(ie.serialize_field({}, 'name', i2['name']), 'John')\n        self.assertEqual(ie.serialize_field({}, 'age', i2['age']), '23')",
        "begin_line": 429,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CustomItemExporter.test_exporter_custom_serializer#429",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CustomItemExporter",
        "signature": "tests.test_exporters.CustomItemExporter.test_exporter_custom_serializer(self)",
        "snippet": "    def test_exporter_custom_serializer(self):\n        class CustomItemExporter(BaseItemExporter):\n            def serialize_field(self, field, name, value):\n                if name == 'age':\n                    return str(int(value) + 1)\n                else:\n                    return super(CustomItemExporter, self).serialize_field(field, name, value)\n\n        i = TestItem(name=u'John', age='22')\n        ie = CustomItemExporter()\n\n        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), 'John')\n        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '23')\n\n        i2 = {'name': u'John', 'age': '22'}\n        self.assertEqual(ie.serialize_field({}, 'name', i2['name']), 'John')\n        self.assertEqual(ie.serialize_field({}, 'age', i2['age']), '23')",
        "begin_line": 429,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_exporters.CustomItemExporter.serialize_field#431",
        "src_path": "tests/test_exporters.py",
        "class_name": "tests.test_exporters.CustomItemExporter",
        "signature": "tests.test_exporters.CustomItemExporter.serialize_field(self, field, name, value)",
        "snippet": "            def serialize_field(self, field, name, value):\n                if name == 'age':\n                    return str(int(value) + 1)\n                else:\n                    return super(CustomItemExporter, self).serialize_field(field, name, value)",
        "begin_line": 431,
        "end_line": 435,
        "comment": "",
        "is_bug": false
    }
]