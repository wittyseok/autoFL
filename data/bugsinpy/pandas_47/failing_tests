coverage run -m pytest pandas/tests/frame/indexing/test_indexing.py::TestDataFrameIndexing::test_setitem_list_missing_columns
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 6 items

pandas/tests/frame/indexing/test_indexing.py FFFFF.                      [100%]

=================================== FAILURES ===================================
_ TestDataFrameIndexing.test_setitem_list_missing_columns[columns0-7-expected0] _

self = <test_indexing.TestDataFrameIndexing object at 0x7f6f71f22880>
columns = ['A', 'B', 'C', 'D'], box = 7
expected =    A  B  C  D
0  7  7  7  7
1  7  7  7  7
2  7  7  7  7

    @pytest.mark.parametrize(
        "columns,box,expected",
        [
            (
                ["A", "B", "C", "D"],
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [7, 7, 7, 7], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "D"],
                [7, 8],
                pd.DataFrame(
                    [[1, 2, 7, 8], [3, 4, 7, 8], [5, 6, 7, 8]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "B", "C"],
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[7, 8, 9], [7, 8, 9], [7, 8, 9]], columns=["A", "B", "C"]
                ),
            ),
            (
                ["B", "C", "D"],
                [[7, 8, 9], [10, 11, 12], [13, 14, 15]],
                pd.DataFrame(
                    [[1, 7, 8, 9], [3, 10, 11, 12], [5, 13, 14, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "A", "D"],
                np.array([[7, 8, 9], [10, 11, 12], [13, 14, 15]], dtype=np.int64),
                pd.DataFrame(
                    [[8, 2, 7, 9], [11, 4, 10, 12], [14, 6, 13, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "C"],
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_setitem_list_missing_columns(self, columns, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df[columns] = box

pandas/tests/frame/indexing/test_indexing.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:2660: in __setitem__
    self._setitem_array(key, value)
pandas/core/frame.py:2690: in _setitem_array
    indexer = self.loc._get_listlike_indexer(
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7f6f71deb900>
key = Index(['A', 'B', 'C', 'D'], dtype='object')
indexer = array([ 0,  1, -1, -1]), axis = 1, raise_missing = False

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
                raise KeyError(f"{not_found} not in index")
    
            # we skip the warning on Categorical
            # as this check is actually done (check for
            # non-missing values), but a bit later in the
            # code, so we want to avoid warning & then
            # just raising
            if not ax.is_categorical():
>               raise KeyError(
                    "Passing list-likes to .loc or [] with any missing labels "
                    "is no longer supported, see "
                    "https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike"  # noqa:E501
                )
E               KeyError: 'Passing list-likes to .loc or [] with any missing labels is no longer supported, see https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike'

pandas/core/indexing.py:1285: KeyError
_ TestDataFrameIndexing.test_setitem_list_missing_columns[columns1-box1-expected1] _

self = <test_indexing.TestDataFrameIndexing object at 0x7f6f716270a0>
columns = ['C', 'D'], box = [7, 8]
expected =    A  B  C  D
0  1  2  7  8
1  3  4  7  8
2  5  6  7  8

    @pytest.mark.parametrize(
        "columns,box,expected",
        [
            (
                ["A", "B", "C", "D"],
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [7, 7, 7, 7], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "D"],
                [7, 8],
                pd.DataFrame(
                    [[1, 2, 7, 8], [3, 4, 7, 8], [5, 6, 7, 8]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "B", "C"],
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[7, 8, 9], [7, 8, 9], [7, 8, 9]], columns=["A", "B", "C"]
                ),
            ),
            (
                ["B", "C", "D"],
                [[7, 8, 9], [10, 11, 12], [13, 14, 15]],
                pd.DataFrame(
                    [[1, 7, 8, 9], [3, 10, 11, 12], [5, 13, 14, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "A", "D"],
                np.array([[7, 8, 9], [10, 11, 12], [13, 14, 15]], dtype=np.int64),
                pd.DataFrame(
                    [[8, 2, 7, 9], [11, 4, 10, 12], [14, 6, 13, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "C"],
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_setitem_list_missing_columns(self, columns, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df[columns] = box

pandas/tests/frame/indexing/test_indexing.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:2660: in __setitem__
    self._setitem_array(key, value)
pandas/core/frame.py:2690: in _setitem_array
    indexer = self.loc._get_listlike_indexer(
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7f6f71a06d60>
key = Index(['C', 'D'], dtype='object'), indexer = array([-1, -1]), axis = 1
raise_missing = False

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
>               raise KeyError(f"None of [{key}] are in the [{axis_name}]")
E               KeyError: "None of [Index(['C', 'D'], dtype='object')] are in the [columns]"

pandas/core/indexing.py:1271: KeyError
_ TestDataFrameIndexing.test_setitem_list_missing_columns[columns2-box2-expected2] _

self = <test_indexing.TestDataFrameIndexing object at 0x7f6f718503d0>
columns = ['A', 'B', 'C'], box = array([7, 8, 9])
expected =    A  B  C
0  7  8  9
1  7  8  9
2  7  8  9

    @pytest.mark.parametrize(
        "columns,box,expected",
        [
            (
                ["A", "B", "C", "D"],
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [7, 7, 7, 7], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "D"],
                [7, 8],
                pd.DataFrame(
                    [[1, 2, 7, 8], [3, 4, 7, 8], [5, 6, 7, 8]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "B", "C"],
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[7, 8, 9], [7, 8, 9], [7, 8, 9]], columns=["A", "B", "C"]
                ),
            ),
            (
                ["B", "C", "D"],
                [[7, 8, 9], [10, 11, 12], [13, 14, 15]],
                pd.DataFrame(
                    [[1, 7, 8, 9], [3, 10, 11, 12], [5, 13, 14, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "A", "D"],
                np.array([[7, 8, 9], [10, 11, 12], [13, 14, 15]], dtype=np.int64),
                pd.DataFrame(
                    [[8, 2, 7, 9], [11, 4, 10, 12], [14, 6, 13, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "C"],
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_setitem_list_missing_columns(self, columns, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df[columns] = box

pandas/tests/frame/indexing/test_indexing.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:2660: in __setitem__
    self._setitem_array(key, value)
pandas/core/frame.py:2690: in _setitem_array
    indexer = self.loc._get_listlike_indexer(
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7f6f71debb30>
key = Index(['A', 'B', 'C'], dtype='object'), indexer = array([ 0,  1, -1])
axis = 1, raise_missing = False

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
                raise KeyError(f"{not_found} not in index")
    
            # we skip the warning on Categorical
            # as this check is actually done (check for
            # non-missing values), but a bit later in the
            # code, so we want to avoid warning & then
            # just raising
            if not ax.is_categorical():
>               raise KeyError(
                    "Passing list-likes to .loc or [] with any missing labels "
                    "is no longer supported, see "
                    "https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike"  # noqa:E501
                )
E               KeyError: 'Passing list-likes to .loc or [] with any missing labels is no longer supported, see https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike'

pandas/core/indexing.py:1285: KeyError
_ TestDataFrameIndexing.test_setitem_list_missing_columns[columns3-box3-expected3] _

self = <test_indexing.TestDataFrameIndexing object at 0x7f6f71858880>
columns = ['B', 'C', 'D'], box = [[7, 8, 9], [10, 11, 12], [13, 14, 15]]
expected =    A   B   C   D
0  1   7   8   9
1  3  10  11  12
2  5  13  14  15

    @pytest.mark.parametrize(
        "columns,box,expected",
        [
            (
                ["A", "B", "C", "D"],
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [7, 7, 7, 7], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "D"],
                [7, 8],
                pd.DataFrame(
                    [[1, 2, 7, 8], [3, 4, 7, 8], [5, 6, 7, 8]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "B", "C"],
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[7, 8, 9], [7, 8, 9], [7, 8, 9]], columns=["A", "B", "C"]
                ),
            ),
            (
                ["B", "C", "D"],
                [[7, 8, 9], [10, 11, 12], [13, 14, 15]],
                pd.DataFrame(
                    [[1, 7, 8, 9], [3, 10, 11, 12], [5, 13, 14, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "A", "D"],
                np.array([[7, 8, 9], [10, 11, 12], [13, 14, 15]], dtype=np.int64),
                pd.DataFrame(
                    [[8, 2, 7, 9], [11, 4, 10, 12], [14, 6, 13, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "C"],
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_setitem_list_missing_columns(self, columns, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df[columns] = box

pandas/tests/frame/indexing/test_indexing.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:2660: in __setitem__
    self._setitem_array(key, value)
pandas/core/frame.py:2690: in _setitem_array
    indexer = self.loc._get_listlike_indexer(
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7f6f71e87770>
key = Index(['B', 'C', 'D'], dtype='object'), indexer = array([ 1, -1, -1])
axis = 1, raise_missing = False

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
                raise KeyError(f"{not_found} not in index")
    
            # we skip the warning on Categorical
            # as this check is actually done (check for
            # non-missing values), but a bit later in the
            # code, so we want to avoid warning & then
            # just raising
            if not ax.is_categorical():
>               raise KeyError(
                    "Passing list-likes to .loc or [] with any missing labels "
                    "is no longer supported, see "
                    "https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike"  # noqa:E501
                )
E               KeyError: 'Passing list-likes to .loc or [] with any missing labels is no longer supported, see https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike'

pandas/core/indexing.py:1285: KeyError
_ TestDataFrameIndexing.test_setitem_list_missing_columns[columns4-box4-expected4] _

self = <test_indexing.TestDataFrameIndexing object at 0x7f6f71924940>
columns = ['C', 'A', 'D']
box = array([[ 7,  8,  9],
       [10, 11, 12],
       [13, 14, 15]])
expected =     A  B   C   D
0   8  2   7   9
1  11  4  10  12
2  14  6  13  15

    @pytest.mark.parametrize(
        "columns,box,expected",
        [
            (
                ["A", "B", "C", "D"],
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [7, 7, 7, 7], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "D"],
                [7, 8],
                pd.DataFrame(
                    [[1, 2, 7, 8], [3, 4, 7, 8], [5, 6, 7, 8]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "B", "C"],
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[7, 8, 9], [7, 8, 9], [7, 8, 9]], columns=["A", "B", "C"]
                ),
            ),
            (
                ["B", "C", "D"],
                [[7, 8, 9], [10, 11, 12], [13, 14, 15]],
                pd.DataFrame(
                    [[1, 7, 8, 9], [3, 10, 11, 12], [5, 13, 14, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["C", "A", "D"],
                np.array([[7, 8, 9], [10, 11, 12], [13, 14, 15]], dtype=np.int64),
                pd.DataFrame(
                    [[8, 2, 7, 9], [11, 4, 10, 12], [14, 6, 13, 15]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                ["A", "C"],
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_setitem_list_missing_columns(self, columns, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df[columns] = box

pandas/tests/frame/indexing/test_indexing.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:2660: in __setitem__
    self._setitem_array(key, value)
pandas/core/frame.py:2690: in _setitem_array
    indexer = self.loc._get_listlike_indexer(
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7f6f71e70e00>
key = Index(['C', 'A', 'D'], dtype='object'), indexer = array([-1,  0, -1])
axis = 1, raise_missing = False

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
                raise KeyError(f"{not_found} not in index")
    
            # we skip the warning on Categorical
            # as this check is actually done (check for
            # non-missing values), but a bit later in the
            # code, so we want to avoid warning & then
            # just raising
            if not ax.is_categorical():
>               raise KeyError(
                    "Passing list-likes to .loc or [] with any missing labels "
                    "is no longer supported, see "
                    "https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike"  # noqa:E501
                )
E               KeyError: 'Passing list-likes to .loc or [] with any missing labels is no longer supported, see https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike'

pandas/core/indexing.py:1285: KeyError
=========================== short test summary info ============================
FAILED pandas/tests/frame/indexing/test_indexing.py::TestDataFrameIndexing::test_setitem_list_missing_columns[columns0-7-expected0]
FAILED pandas/tests/frame/indexing/test_indexing.py::TestDataFrameIndexing::test_setitem_list_missing_columns[columns1-box1-expected1]
FAILED pandas/tests/frame/indexing/test_indexing.py::TestDataFrameIndexing::test_setitem_list_missing_columns[columns2-box2-expected2]
FAILED pandas/tests/frame/indexing/test_indexing.py::TestDataFrameIndexing::test_setitem_list_missing_columns[columns3-box3-expected3]
FAILED pandas/tests/frame/indexing/test_indexing.py::TestDataFrameIndexing::test_setitem_list_missing_columns[columns4-box4-expected4]
========================= 5 failed, 1 passed in 2.25s ==========================

coverage run -m pytest pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 6 items

pandas/tests/indexing/test_loc.py FFFFFF                                 [100%]

=================================== FAILURES ===================================
________ TestLoc2.test_loc_setitem_missing_columns[index0-7-expected0] _________

self = <pandas.tests.indexing.test_loc.TestLoc2 object at 0x7efbf57a6d00>
index = ([0, 2], ['A', 'B', 'C', 'D']), box = 7
expected =    A  B    C    D
0  7  7  7.0  7.0
1  3  4  NaN  NaN
2  7  7  7.0  7.0

    @pytest.mark.parametrize(
        "index,box,expected",
        [
            (
                ([0, 2], ["A", "B", "C", "D"]),
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["C", "D"]),
                [7, 8],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["A", "B", "C"]),
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]],
                    columns=["A", "B", "C"],
                ),
            ),
            (
                (slice(1, 3, None), ["B", "C", "D"]),
                [[7, 8, 9], [10, 11, 12]],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(1, 3, None), ["C", "A", "D"]),
                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(None, None, None), ["A", "C"]),
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_loc_setitem_missing_columns(self, index, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df.loc[index] = box

pandas/tests/indexing/test_loc.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:619: in __setitem__
    indexer = self._get_setitem_indexer(key)
pandas/core/indexing.py:598: in _get_setitem_indexer
    return self._convert_tuple(key, is_setter=True)
pandas/core/indexing.py:687: in _convert_tuple
    idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)
pandas/core/indexing.py:1174: in _convert_to_indexer
    return self._get_listlike_indexer(key, axis, raise_missing=True)[1]
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7efbf5738ea0>
key = Index(['A', 'B', 'C', 'D'], dtype='object')
indexer = array([ 0,  1, -1, -1]), axis = 1, raise_missing = True

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
>               raise KeyError(f"{not_found} not in index")
E               KeyError: "['D', 'C'] not in index"

pandas/core/indexing.py:1277: KeyError
_______ TestLoc2.test_loc_setitem_missing_columns[index1-box1-expected1] _______

self = <pandas.tests.indexing.test_loc.TestLoc2 object at 0x7efbf57b3040>
index = (1, ['C', 'D']), box = [7, 8]
expected =    A  B    C    D
0  1  2  NaN  NaN
1  3  4  7.0  8.0
2  5  6  NaN  NaN

    @pytest.mark.parametrize(
        "index,box,expected",
        [
            (
                ([0, 2], ["A", "B", "C", "D"]),
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["C", "D"]),
                [7, 8],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["A", "B", "C"]),
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]],
                    columns=["A", "B", "C"],
                ),
            ),
            (
                (slice(1, 3, None), ["B", "C", "D"]),
                [[7, 8, 9], [10, 11, 12]],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(1, 3, None), ["C", "A", "D"]),
                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(None, None, None), ["A", "C"]),
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_loc_setitem_missing_columns(self, index, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df.loc[index] = box

pandas/tests/indexing/test_loc.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:619: in __setitem__
    indexer = self._get_setitem_indexer(key)
pandas/core/indexing.py:598: in _get_setitem_indexer
    return self._convert_tuple(key, is_setter=True)
pandas/core/indexing.py:687: in _convert_tuple
    idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)
pandas/core/indexing.py:1174: in _convert_to_indexer
    return self._get_listlike_indexer(key, axis, raise_missing=True)[1]
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7efbf580cea0>
key = Index(['C', 'D'], dtype='object'), indexer = array([-1, -1]), axis = 1
raise_missing = True

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
>               raise KeyError(f"None of [{key}] are in the [{axis_name}]")
E               KeyError: "None of [Index(['C', 'D'], dtype='object')] are in the [columns]"

pandas/core/indexing.py:1271: KeyError
_______ TestLoc2.test_loc_setitem_missing_columns[index2-box2-expected2] _______

self = <pandas.tests.indexing.test_loc.TestLoc2 object at 0x7efbf5597190>
index = (1, ['A', 'B', 'C']), box = array([7, 8, 9])
expected =    A  B    C
0  1  2  NaN
1  7  8  9.0
2  5  6  NaN

    @pytest.mark.parametrize(
        "index,box,expected",
        [
            (
                ([0, 2], ["A", "B", "C", "D"]),
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["C", "D"]),
                [7, 8],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["A", "B", "C"]),
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]],
                    columns=["A", "B", "C"],
                ),
            ),
            (
                (slice(1, 3, None), ["B", "C", "D"]),
                [[7, 8, 9], [10, 11, 12]],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(1, 3, None), ["C", "A", "D"]),
                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(None, None, None), ["A", "C"]),
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_loc_setitem_missing_columns(self, index, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df.loc[index] = box

pandas/tests/indexing/test_loc.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:619: in __setitem__
    indexer = self._get_setitem_indexer(key)
pandas/core/indexing.py:598: in _get_setitem_indexer
    return self._convert_tuple(key, is_setter=True)
pandas/core/indexing.py:687: in _convert_tuple
    idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)
pandas/core/indexing.py:1174: in _convert_to_indexer
    return self._get_listlike_indexer(key, axis, raise_missing=True)[1]
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7efbf595e860>
key = Index(['A', 'B', 'C'], dtype='object'), indexer = array([ 0,  1, -1])
axis = 1, raise_missing = True

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
>               raise KeyError(f"{not_found} not in index")
E               KeyError: "['C'] not in index"

pandas/core/indexing.py:1277: KeyError
_______ TestLoc2.test_loc_setitem_missing_columns[index3-box3-expected3] _______

self = <pandas.tests.indexing.test_loc.TestLoc2 object at 0x7efbf56a2100>
index = (slice(1, 3, None), ['B', 'C', 'D']), box = [[7, 8, 9], [10, 11, 12]]
expected =    A   B     C     D
0  1   2   NaN   NaN
1  3   7   8.0   9.0
2  5  10  11.0  12.0

    @pytest.mark.parametrize(
        "index,box,expected",
        [
            (
                ([0, 2], ["A", "B", "C", "D"]),
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["C", "D"]),
                [7, 8],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["A", "B", "C"]),
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]],
                    columns=["A", "B", "C"],
                ),
            ),
            (
                (slice(1, 3, None), ["B", "C", "D"]),
                [[7, 8, 9], [10, 11, 12]],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(1, 3, None), ["C", "A", "D"]),
                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(None, None, None), ["A", "C"]),
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_loc_setitem_missing_columns(self, index, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df.loc[index] = box

pandas/tests/indexing/test_loc.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:619: in __setitem__
    indexer = self._get_setitem_indexer(key)
pandas/core/indexing.py:598: in _get_setitem_indexer
    return self._convert_tuple(key, is_setter=True)
pandas/core/indexing.py:687: in _convert_tuple
    idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)
pandas/core/indexing.py:1174: in _convert_to_indexer
    return self._get_listlike_indexer(key, axis, raise_missing=True)[1]
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7efbf56159f0>
key = Index(['B', 'C', 'D'], dtype='object'), indexer = array([ 1, -1, -1])
axis = 1, raise_missing = True

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
>               raise KeyError(f"{not_found} not in index")
E               KeyError: "['D', 'C'] not in index"

pandas/core/indexing.py:1277: KeyError
_______ TestLoc2.test_loc_setitem_missing_columns[index4-box4-expected4] _______

self = <pandas.tests.indexing.test_loc.TestLoc2 object at 0x7efbf57a4880>
index = (slice(1, 3, None), ['C', 'A', 'D'])
box = array([[ 7,  8,  9],
       [10, 11, 12]])
expected =     A  B     C     D
0   1  2   NaN   NaN
1   8  4   7.0   9.0
2  11  6  10.0  12.0

    @pytest.mark.parametrize(
        "index,box,expected",
        [
            (
                ([0, 2], ["A", "B", "C", "D"]),
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["C", "D"]),
                [7, 8],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["A", "B", "C"]),
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]],
                    columns=["A", "B", "C"],
                ),
            ),
            (
                (slice(1, 3, None), ["B", "C", "D"]),
                [[7, 8, 9], [10, 11, 12]],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(1, 3, None), ["C", "A", "D"]),
                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(None, None, None), ["A", "C"]),
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_loc_setitem_missing_columns(self, index, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df.loc[index] = box

pandas/tests/indexing/test_loc.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:619: in __setitem__
    indexer = self._get_setitem_indexer(key)
pandas/core/indexing.py:598: in _get_setitem_indexer
    return self._convert_tuple(key, is_setter=True)
pandas/core/indexing.py:687: in _convert_tuple
    idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)
pandas/core/indexing.py:1174: in _convert_to_indexer
    return self._get_listlike_indexer(key, axis, raise_missing=True)[1]
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7efbf5788f40>
key = Index(['C', 'A', 'D'], dtype='object'), indexer = array([-1,  0, -1])
axis = 1, raise_missing = True

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
>               raise KeyError(f"{not_found} not in index")
E               KeyError: "['D', 'C'] not in index"

pandas/core/indexing.py:1277: KeyError
_______ TestLoc2.test_loc_setitem_missing_columns[index5-box5-expected5] _______

self = <pandas.tests.indexing.test_loc.TestLoc2 object at 0x7efbf57b3d00>
index = (slice(None, None, None), ['A', 'C'])
box =     A   C
0   7   8
1   9  10
2  11  12
expected =     A  B   C
0   7  2   8
1   9  4  10
2  11  6  12

    @pytest.mark.parametrize(
        "index,box,expected",
        [
            (
                ([0, 2], ["A", "B", "C", "D"]),
                7,
                pd.DataFrame(
                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["C", "D"]),
                [7, 8],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (1, ["A", "B", "C"]),
                np.array([7, 8, 9], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]],
                    columns=["A", "B", "C"],
                ),
            ),
            (
                (slice(1, 3, None), ["B", "C", "D"]),
                [[7, 8, 9], [10, 11, 12]],
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(1, 3, None), ["C", "A", "D"]),
                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),
                pd.DataFrame(
                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],
                    columns=["A", "B", "C", "D"],
                ),
            ),
            (
                (slice(None, None, None), ["A", "C"]),
                pd.DataFrame([[7, 8], [9, 10], [11, 12]], columns=["A", "C"]),
                pd.DataFrame(
                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=["A", "B", "C"]
                ),
            ),
        ],
    )
    def test_loc_setitem_missing_columns(self, index, box, expected):
        # GH 29334
        df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], columns=["A", "B"])
>       df.loc[index] = box

pandas/tests/indexing/test_loc.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:619: in __setitem__
    indexer = self._get_setitem_indexer(key)
pandas/core/indexing.py:598: in _get_setitem_indexer
    return self._convert_tuple(key, is_setter=True)
pandas/core/indexing.py:687: in _convert_tuple
    idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)
pandas/core/indexing.py:1174: in _convert_to_indexer
    return self._get_listlike_indexer(key, axis, raise_missing=True)[1]
pandas/core/indexing.py:1228: in _get_listlike_indexer
    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._LocIndexer object at 0x7efbf5615ef0>
key = Index(['A', 'C'], dtype='object'), indexer = array([ 0, -1]), axis = 1
raise_missing = True

    def _validate_read_indexer(
        self, key, indexer, axis: int, raise_missing: bool = False
    ):
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis: int
            Dimension on which the indexing is being made.
        raise_missing: bool
            Whether to raise a KeyError if some labels are not found. Will be
            removed in the future, and then this method will always behave as
            if raise_missing=True.
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found, and
            raise_missing=True.
        """
        ax = self.obj._get_axis(axis)
    
        if len(key) == 0:
            return
    
        # Count missing values:
        missing = (indexer < 0).sum()
    
        if missing:
            if missing == len(indexer):
                axis_name = self.obj._get_axis_name(axis)
                raise KeyError(f"None of [{key}] are in the [{axis_name}]")
    
            # We (temporarily) allow for some missing keys with .loc, except in
            # some cases (e.g. setting) in which "raise_missing" will be False
            if raise_missing:
                not_found = list(set(key) - set(ax))
>               raise KeyError(f"{not_found} not in index")
E               KeyError: "['C'] not in index"

pandas/core/indexing.py:1277: KeyError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns[index0-7-expected0]
FAILED pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns[index1-box1-expected1]
FAILED pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns[index2-box2-expected2]
FAILED pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns[index3-box3-expected3]
FAILED pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns[index4-box4-expected4]
FAILED pandas/tests/indexing/test_loc.py::TestLoc2::test_loc_setitem_missing_columns[index5-box5-expected5]
============================== 6 failed in 1.85s ===============================
