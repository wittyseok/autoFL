[
    {
        "name": "test.test_utils.TestUtil.test_timeconvert#51",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_timeconvert(self)",
        "snippet": "    def test_timeconvert(self):\n        self.assertTrue(timeconvert('') is None)\n        self.assertTrue(timeconvert('bougrg') is None)",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename#55",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename(self)",
        "snippet": "    def test_sanitize_filename(self):\n        self.assertEqual(sanitize_filename('abc'), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e'), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123'), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de'))\n        self.assertFalse('/' in sanitize_filename('abc/de///'))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de'))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|'))\n        self.assertEqual('yes no', sanitize_filename('yes? no'))\n        self.assertEqual('this - that', sanitize_filename('this: that'))\n\n        self.assertEqual(sanitize_filename('AT&T'), 'AT&T')\n        aumlaut = _compat_str('\\xe4')\n        self.assertEqual(sanitize_filename(aumlaut), aumlaut)\n        tests = _compat_str('\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0446\\u0430')\n        self.assertEqual(sanitize_filename(tests), tests)\n\n        forbidden = '\"\\0\\\\/'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc))",
        "begin_line": 55,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename_restricted#80",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename_restricted(self)",
        "snippet": "    def test_sanitize_filename_restricted(self):\n        self.assertEqual(sanitize_filename('abc', restricted=True), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e', restricted=True), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123', restricted=True), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de', restricted=True))\n        self.assertFalse('/' in sanitize_filename('abc/de///', restricted=True))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de', restricted=True))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|', restricted=True))\n        self.assertEqual('yes_no', sanitize_filename('yes? no', restricted=True))\n        self.assertEqual('this_-_that', sanitize_filename('this: that', restricted=True))\n\n        tests = _compat_str('a\\xe4b\\u4e2d\\u56fd\\u7684c')\n        self.assertEqual(sanitize_filename(tests, restricted=True), 'a_b_c')\n        self.assertTrue(sanitize_filename(_compat_str('\\xf6'), restricted=True) != '')  # No empty filename\n\n        forbidden = '\"\\0\\\\/&!: \\'\\t\\n()[]{}$;`^,#'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc, restricted=True))\n\n        # Handle a common case more neatly\n        self.assertEqual(sanitize_filename(_compat_str('\\u5927\\u58f0\\u5e26 - Song'), restricted=True), 'Song')\n        self.assertEqual(sanitize_filename(_compat_str('\\u603b\\u7edf: Speech'), restricted=True), 'Speech')\n        # .. but make sure the file name is never empty\n        self.assertTrue(sanitize_filename('-', restricted=True) != '')\n        self.assertTrue(sanitize_filename(':', restricted=True) != '')",
        "begin_line": 80,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_ids#110",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_ids(self)",
        "snippet": "    def test_sanitize_ids(self):\n        self.assertEqual(sanitize_filename('_n_cd26wFpw', is_id=True), '_n_cd26wFpw')\n        self.assertEqual(sanitize_filename('_BD_eEpuzXw', is_id=True), '_BD_eEpuzXw')\n        self.assertEqual(sanitize_filename('N0Y__7-UOdI', is_id=True), 'N0Y__7-UOdI')",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_ordered_set#115",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_ordered_set(self)",
        "snippet": "    def test_ordered_set(self):\n        self.assertEqual(orderedSet([1, 1, 2, 3, 4, 4, 5, 6, 7, 3, 5]), [1, 2, 3, 4, 5, 6, 7])\n        self.assertEqual(orderedSet([]), [])\n        self.assertEqual(orderedSet([1]), [1])\n        #keep the list ordered\n        self.assertEqual(orderedSet([135, 1, 1, 1]), [135, 1])",
        "begin_line": 115,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unescape_html#122",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unescape_html(self)",
        "snippet": "    def test_unescape_html(self):\n        self.assertEqual(unescapeHTML(_compat_str('%20;')), _compat_str('%20;'))",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_daterange#125",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_daterange(self)",
        "snippet": "    def test_daterange(self):\n        _20century = DateRange(\"19000101\",\"20000101\")\n        self.assertFalse(\"17890714\" in _20century)\n        _ac = DateRange(\"00010101\")\n        self.assertTrue(\"19690721\" in _ac)\n        _firstmilenium = DateRange(end=\"10000101\")\n        self.assertTrue(\"07110427\" in _firstmilenium)",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unified_dates#133",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unified_dates(self)",
        "snippet": "    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n        self.assertEqual(unified_strdate('1968-12-10'), '19681210')",
        "begin_line": 133,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_find_xpath_attr#140",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_find_xpath_attr(self)",
        "snippet": "    def test_find_xpath_attr(self):\n        testxml = u'''<root>\n            <node/>\n            <node x=\"a\"/>\n            <node x=\"a\" y=\"c\" />\n            <node x=\"b\" y=\"d\" />\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'a'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'c'), doc[2])",
        "begin_line": 140,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_meta_parser#153",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_meta_parser(self)",
        "snippet": "    def test_meta_parser(self):\n        testhtml = u'''\n        <head>\n            <meta name=\"description\" content=\"foo &amp; bar\">\n            <meta content='Plato' name='author'/>\n        </head>\n        '''\n        get_meta = lambda name: get_meta_content(name, testhtml)\n        self.assertEqual(get_meta('description'), u'foo & bar')\n        self.assertEqual(get_meta('author'), 'Plato')",
        "begin_line": 153,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_with_ns#164",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_with_ns(self)",
        "snippet": "    def test_xpath_with_ns(self):\n        testxml = u'''<root xmlns:media=\"http://example.com/\">\n            <media:song>\n                <media:author>The Author</media:author>\n                <url>http://server.com/download.mp3</url>\n            </media:song>\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n        find = lambda p: doc.find(xpath_with_ns(p, {'media': 'http://example.com/'}))\n        self.assertTrue(find('media:song') is not None)\n        self.assertEqual(find('media:song/media:author').text, u'The Author')\n        self.assertEqual(find('media:song/url').text, u'http://server.com/download.mp3')",
        "begin_line": 164,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_smuggle_url#177",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_smuggle_url(self)",
        "snippet": "    def test_smuggle_url(self):\n        data = {u\"\u00f6\": u\"\u00f6\", u\"abc\": [3]}\n        url = 'https://foo.bar/baz?x=y#a'\n        smug_url = smuggle_url(url, data)\n        unsmug_url, unsmug_data = unsmuggle_url(smug_url)\n        self.assertEqual(url, unsmug_url)\n        self.assertEqual(data, unsmug_data)\n\n        res_url, res_data = unsmuggle_url(url)\n        self.assertEqual(res_url, url)\n        self.assertEqual(res_data, None)",
        "begin_line": 177,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_shell_quote#189",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_shell_quote(self)",
        "snippet": "    def test_shell_quote(self):\n        args = ['ffmpeg', '-i', encodeFilename(u'\u00f1\u20ac\u00df\\'.mp4')]\n        self.assertEqual(shell_quote(args), u\"\"\"ffmpeg -i '\u00f1\u20ac\u00df'\"'\"'.mp4'\"\"\")",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_str_to_int#193",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_str_to_int(self)",
        "snippet": "    def test_str_to_int(self):\n        self.assertEqual(str_to_int('123,456'), 123456)\n        self.assertEqual(str_to_int('123.456'), 123456)",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_url_basename#197",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_url_basename(self)",
        "snippet": "    def test_url_basename(self):\n        self.assertEqual(url_basename(u'http://foo.de/'), u'')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz?x=y'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz#x=y'), u'baz')\n        self.assertEqual(url_basename(u'http://foo.de/bar/baz/'), u'baz')\n        self.assertEqual(\n            url_basename(u'http://media.w3.org/2010/05/sintel/trailer.mp4'),\n            u'trailer.mp4')",
        "begin_line": 197,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_duration#207",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_duration(self)",
        "snippet": "    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)",
        "begin_line": 207,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_fix_xml_ampersands#223",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_fix_xml_ampersands(self)",
        "snippet": "    def test_fix_xml_ampersands(self):\n        self.assertEqual(\n            fix_xml_ampersands('\"&x=y&z=a'), '\"&amp;x=y&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('\"&amp;x=y&wrong;&z=a'),\n            '\"&amp;x=y&amp;wrong;&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('&amp;&apos;&gt;&lt;&quot;'),\n            '&amp;&apos;&gt;&lt;&quot;')\n        self.assertEqual(\n            fix_xml_ampersands('&#1234;&#x1abC;'), '&#1234;&#x1abC;')\n        self.assertEqual(fix_xml_ampersands('&#&#'), '&amp;#&amp;#')",
        "begin_line": 223,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_paged_list#236",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_paged_list(self)",
        "snippet": "    def test_paged_list(self):\n        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = PagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n        testPL(5, 2, (), [0, 1, 2, 3, 4])\n        testPL(5, 2, (1,), [1, 2, 3, 4])\n        testPL(5, 2, (2,), [2, 3, 4])\n        testPL(5, 2, (4,), [4])\n        testPL(5, 2, (0, 3), [0, 1, 2])\n        testPL(5, 2, (1, 4), [1, 2, 3])\n        testPL(5, 2, (2, 99), [2, 3, 4])\n        testPL(5, 2, (20, 99), [])",
        "begin_line": 236,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.testPL#237",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.testPL(size, pagesize, sliceargs, expected)",
        "snippet": "        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = PagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)",
        "begin_line": 237,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.get_page#238",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.get_page(pagenum)",
        "snippet": "            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i",
        "begin_line": 238,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_struct_unpack#257",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_struct_unpack(self)",
        "snippet": "    def test_struct_unpack(self):\n        self.assertEqual(struct_unpack(u'!B', b'\\x00'), (0,))",
        "begin_line": 257,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_read_batch_urls#260",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_read_batch_urls(self)",
        "snippet": "    def test_read_batch_urls(self):\n        f = io.StringIO(u'''\\xef\\xbb\\xbf foo\n            bar\\r\n            baz\n            # More after this line\\r\n            ; or after this\n            bam''')\n        self.assertEqual(read_batch_urls(f), [u'foo', u'bar', u'baz', u'bam'])",
        "begin_line": 260,
        "end_line": 267,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urlencode_postdata#269",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urlencode_postdata(self)",
        "snippet": "    def test_urlencode_postdata(self):\n        data = urlencode_postdata({'username': 'foo@bar.com', 'password': '1234'})\n        self.assertTrue(isinstance(data, bytes))",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_iso8601#273",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_iso8601(self)",
        "snippet": "    def test_parse_iso8601(self):\n        self.assertEqual(parse_iso8601('2014-03-23T23:04:26+0100'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26+0000'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26Z'), 1395612266)",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_strip_jsonp#278",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_strip_jsonp(self)",
        "snippet": "    def test_strip_jsonp(self):\n        stripped = strip_jsonp('cb ([ {\"id\":\"532cb\",\\n\\n\\n\"x\":\\n3}\\n]\\n);')\n        d = json.loads(stripped)\n        self.assertEqual(d, [{\"id\": \"532cb\", \"x\": 3}])",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_uppercase_escpae#283",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_uppercase_escpae(self)",
        "snippet": "    def test_uppercase_escpae(self):\n        self.assertEqual(uppercase_escape(u'a\u00e4'), u'a\u00e4')\n        self.assertEqual(uppercase_escape(u'\\\\U0001d550'), u'\ud835\udd50')",
        "begin_line": 283,
        "end_line": 285,
        "comment": "",
        "is_bug": false
    }
]