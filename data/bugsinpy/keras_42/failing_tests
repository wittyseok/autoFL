coverage run -m pytest tests/keras/engine/test_training.py::test_model_methods
============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 -- /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/bin/python
cachedir: .pytest_cache
rootdir: /home/user/BugsInPy/temp/projects/keras, inifile: pytest.ini
plugins: forked-1.1.3, flaky-3.6.1, xdist-1.32.0, httpbin-1.0.0
gw0 I / gw1 I

[gw0] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw1] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw0] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]

[gw1] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]
gw0 [1] / gw1 [1]

scheduling tests via LoadScheduling

tests/keras/engine/test_training.py::test_model_methods 
[gw0] [100%] FAILED tests/keras/engine/test_training.py::test_model_methods 

=================================== FAILURES ===================================
______________________________ test_model_methods ______________________________
[gw0] linux -- Python 3.7.3 /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/bin/python

    @keras_test
    def test_model_methods():
        a = Input(shape=(3,), name='input_a')
        b = Input(shape=(3,), name='input_b')
    
        a_2 = Dense(4, name='dense_1')(a)
        dp = Dropout(0.5, name='dropout')
        b_2 = dp(b)
    
        model = Model([a, b], [a_2, b_2])
    
        optimizer = 'rmsprop'
        loss = 'mse'
        loss_weights = [1., 0.5]
    
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_a_np = np.random.random((10, 4))
        output_b_np = np.random.random((10, 3))
    
        # training/testing doesn't work before compiling.
        with pytest.raises(RuntimeError):
            model.train_on_batch([input_a_np, input_b_np], [output_a_np, output_b_np])
    
        model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,
                      sample_weight_mode=None)
    
        # test train_on_batch
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np])
        out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},
                                   [output_a_np, output_b_np])
        out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},
                                   {'dense_1': output_a_np, 'dropout': output_b_np})
    
        # test fit
        out = model.fit([input_a_np, input_b_np],
                        [output_a_np, output_b_np], epochs=1, batch_size=4)
        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},
                        [output_a_np, output_b_np], epochs=1, batch_size=4)
        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},
                        {'dense_1': output_a_np, 'dropout': output_b_np},
                        epochs=1, batch_size=4)
    
        # test validation_split
        out = model.fit([input_a_np, input_b_np],
                        [output_a_np, output_b_np],
                        epochs=1, batch_size=4, validation_split=0.5)
        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},
                        [output_a_np, output_b_np],
                        epochs=1, batch_size=4, validation_split=0.5)
    
        # test validation data
        out = model.fit([input_a_np, input_b_np],
                        [output_a_np, output_b_np],
                        epochs=1, batch_size=4,
                        validation_data=([input_a_np, input_b_np], [output_a_np, output_b_np]))
        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},
                        [output_a_np, output_b_np],
                        epochs=1, batch_size=4, validation_split=0.5,
                        validation_data=({'input_a': input_a_np, 'input_b': input_b_np}, [output_a_np, output_b_np]))
        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},
                        {'dense_1': output_a_np, 'dropout': output_b_np},
                        epochs=1, batch_size=4, validation_split=0.5,
                        validation_data=(
                            {'input_a': input_a_np, 'input_b': input_b_np},
                            {'dense_1': output_a_np, 'dropout': output_b_np}))
    
        # test_on_batch
        out = model.test_on_batch([input_a_np, input_b_np],
                                  [output_a_np, output_b_np])
        out = model.test_on_batch({'input_a': input_a_np, 'input_b': input_b_np},
                                  [output_a_np, output_b_np])
        out = model.test_on_batch({'input_a': input_a_np, 'input_b': input_b_np},
                                  {'dense_1': output_a_np, 'dropout': output_b_np})
    
        # predict_on_batch
        out = model.predict_on_batch([input_a_np, input_b_np])
        out = model.predict_on_batch({'input_a': input_a_np, 'input_b': input_b_np})
    
        # predict, evaluate
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_a_np = np.random.random((10, 4))
        output_b_np = np.random.random((10, 3))
    
        out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)
        out = model.predict([input_a_np, input_b_np], batch_size=4)
    
        # with sample_weight
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_a_np = np.random.random((10, 4))
        output_b_np = np.random.random((10, 3))
    
        sample_weight = [None, np.random.random((10,))]
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np],
                                   sample_weight=sample_weight)
    
        out = model.test_on_batch([input_a_np, input_b_np],
                                  [output_a_np, output_b_np],
                                  sample_weight=sample_weight)
    
        # test accuracy metric
        model.compile(optimizer, loss, metrics=['acc'],
                      sample_weight_mode=None)
    
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np])
        assert len(out) == 5
        out = model.test_on_batch([input_a_np, input_b_np],
                                  [output_a_np, output_b_np])
        assert len(out) == 5
    
        # this should also work
        model.compile(optimizer, loss, metrics={'dense_1': 'acc'},
                      sample_weight_mode=None)
    
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np])
        assert len(out) == 4
        out = model.test_on_batch([input_a_np, input_b_np],
                                  [output_a_np, output_b_np])
        assert len(out) == 4
    
        # and this as well
        model.compile(optimizer, loss, metrics={'dense_1': ['acc']},
                      sample_weight_mode=None)
    
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np])
        assert len(out) == 4
        out = model.test_on_batch([input_a_np, input_b_np],
                                  [output_a_np, output_b_np])
        assert len(out) == 4
    
        # test starting from non-zero initial epoch
        trained_epochs = []
        trained_batches = []
    
        # define tracer callback
        def on_epoch_begin(epoch, logs):
            trained_epochs.append(epoch)
    
        def on_batch_begin(batch, logs):
            trained_batches.append(batch)
    
        tracker_cb = LambdaCallback(on_epoch_begin=on_epoch_begin,
                                    on_batch_begin=on_batch_begin)
    
        out = model.fit([input_a_np, input_b_np],
                        [output_a_np, output_b_np], epochs=5, batch_size=4,
                        initial_epoch=2, callbacks=[tracker_cb])
        assert trained_epochs == [2, 3, 4]
    
        # test starting from non-zero initial epoch for generator too
        trained_epochs = []
    
        def gen_data(batch_sz):
            while True:
                yield ([np.random.random((batch_sz, 3)), np.random.random((batch_sz, 3))],
                       [np.random.random((batch_sz, 4)), np.random.random((batch_sz, 3))])
    
        out = model.fit_generator(gen_data(4), steps_per_epoch=3, epochs=5,
                                  initial_epoch=2, callbacks=[tracker_cb])
        assert trained_epochs == [2, 3, 4]
    
        # test with a custom metric function
        def mse(y_true, y_pred):
            return K.mean(K.pow(y_true - y_pred, 2))
    
        model.compile(optimizer, loss, metrics=[mse],
                      sample_weight_mode=None)
    
        out = model.train_on_batch([input_a_np, input_b_np],
                                   [output_a_np, output_b_np])
        out_len = 1 + 2 * (1 + 1)  # total loss + 2 outputs * (loss + metric)
        assert len(out) == out_len
        out = model.test_on_batch([input_a_np, input_b_np],
                                  [output_a_np, output_b_np])
        assert len(out) == out_len
    
        input_a_np = np.random.random((10, 3))
        input_b_np = np.random.random((10, 3))
    
        output_a_np = np.random.random((10, 4))
        output_b_np = np.random.random((10, 3))
    
        out = model.fit([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4, epochs=1)
        out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)
        out = model.predict([input_a_np, input_b_np], batch_size=4)
    
        # empty batch
        with pytest.raises(ValueError):
            def gen_data():
                while True:
                    yield (np.asarray([]), np.asarray([]))
            out = model.evaluate_generator(gen_data(), steps=1)
    
        # x is not a list of numpy arrays.
        with pytest.raises(ValueError):
            out = model.predict([None])
    
        # x does not match _feed_input_names.
        with pytest.raises(ValueError):
            out = model.predict([input_a_np, None, input_b_np])
        with pytest.raises(ValueError):
            out = model.predict([None, input_a_np, input_b_np])
    
        # all input/output/weight arrays should have the same number of samples.
        with pytest.raises(ValueError):
            out = model.train_on_batch([input_a_np, input_b_np[:2]],
                                       [output_a_np, output_b_np],
                                       sample_weight=sample_weight)
        with pytest.raises(ValueError):
            out = model.train_on_batch([input_a_np, input_b_np],
                                       [output_a_np, output_b_np[:2]],
                                       sample_weight=sample_weight)
        with pytest.raises(ValueError):
            out = model.train_on_batch([input_a_np, input_b_np],
                                       [output_a_np, output_b_np],
                                       sample_weight=[sample_weight[1], sample_weight[1][:2]])
    
        # `sample_weight` is neither a dict nor a list.
        with pytest.raises(TypeError):
            out = model.train_on_batch([input_a_np, input_b_np],
                                       [output_a_np, output_b_np],
                                       sample_weight=tuple(sample_weight))
    
        # `validation_data` is neither a tuple nor a triple.
        with pytest.raises(ValueError):
            out = model.fit([input_a_np, input_b_np],
                            [output_a_np, output_b_np],
                            epochs=1, batch_size=4,
                            validation_data=([input_a_np, input_b_np],))
    
        # `loss` does not match outputs.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss=['mse', 'mae', 'mape'])
    
        # `loss_weights` does not match output_names.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss='mse', loss_weights={'lstm': 0.5})
    
        # `loss_weights` does not match outputs.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss='mse', loss_weights=[0.5])
    
        # `loss_weights` is invalid type.
        with pytest.raises(TypeError):
            model.compile(optimizer, loss='mse', loss_weights=(0.5, 0.5))
    
        # `sample_weight_mode` does not match output_names.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss='mse', sample_weight_mode={'lstm': 'temporal'})
    
        # `sample_weight_mode` does not match output_names.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss='mse', sample_weight_mode=['temporal'])
    
        # `sample_weight_mode` matches output_names partially.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss='mse', sample_weight_mode={'dense_1': 'temporal'})
    
        # `loss` does not exist.
        with pytest.raises(ValueError):
            model.compile(optimizer, loss=[])
    
        model.compile(optimizer, loss=['mse', 'mae'])
        model.compile(optimizer, loss='mse', loss_weights={'dense_1': 0.2, 'dropout': 0.8})
        model.compile(optimizer, loss='mse', loss_weights=[0.2, 0.8])
    
        # the rank of weight arrays should be 1.
        with pytest.raises(ValueError):
            out = model.train_on_batch([input_a_np, input_b_np],
                                       [output_a_np, output_b_np],
                                       sample_weight=[None, np.random.random((10, 20, 30))])
    
        model.compile(optimizer, loss='mse', sample_weight_mode={'dense_1': None, 'dropout': 'temporal'})
        model.compile(optimizer, loss='mse', sample_weight_mode=[None, 'temporal'])
    
        # the rank of output arrays should be at least 3D.
        with pytest.raises(ValueError):
            out = model.train_on_batch([input_a_np, input_b_np],
                                       [output_a_np, output_b_np],
                                       sample_weight=sample_weight)
    
        model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,
                      sample_weight_mode=None)
        trained_epochs = []
        trained_batches = []
        out = model.fit_generator(generator=RandomSequence(3), steps_per_epoch=3, epochs=5,
                                  initial_epoch=0, validation_data=RandomSequence(4),
                                  validation_steps=3, callbacks=[tracker_cb])
        assert trained_epochs == [0, 1, 2, 3, 4]
>       assert trained_batches == list(range(3)) * 5
E       AssertionError: assert [0, 1, 2, 3, 4, 5, ...] == [0, 1, 2, 0, 1, 2, ...]
E         At index 3 diff: 3 != 0
E         Left contains 45 more items, first extra item: 3
E         Full diff:
E           [
E            0,
E            1,
E            2,...
E         
E         ...Full output truncated (59 lines hidden), use '-vv' to show

tests/keras/engine/test_training.py:393: AssertionError
----------------------------- Captured stdout call -----------------------------
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 1.3171 - dense_1_loss: 1.0410 - dropout_loss: 0.5522
10/10 [==============================] - 0s 274us/step - loss: 1.1149 - dense_1_loss: 0.8495 - dropout_loss: 0.5309
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 1.1515 - dense_1_loss: 0.8262 - dropout_loss: 0.6505
10/10 [==============================] - 0s 266us/step - loss: 1.1485 - dense_1_loss: 0.8336 - dropout_loss: 0.6297
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 1.5081 - dense_1_loss: 1.1037 - dropout_loss: 0.8087
10/10 [==============================] - 0s 242us/step - loss: 1.1774 - dense_1_loss: 0.8216 - dropout_loss: 0.7115
Train on 5 samples, validate on 5 samples
Epoch 1/1

4/5 [=======================>......] - ETA: 0s - loss: 0.9183 - dense_1_loss: 0.7432 - dropout_loss: 0.3500
5/5 [==============================] - 0s 4ms/step - loss: 1.0447 - dense_1_loss: 0.8435 - dropout_loss: 0.4023 - val_loss: 0.8672 - val_dense_1_loss: 0.7730 - val_dropout_loss: 0.1884
Train on 5 samples, validate on 5 samples
Epoch 1/1

4/5 [=======================>......] - ETA: 0s - loss: 0.9162 - dense_1_loss: 0.7073 - dropout_loss: 0.4178
5/5 [==============================] - 0s 597us/step - loss: 1.0845 - dense_1_loss: 0.8348 - dropout_loss: 0.4993 - val_loss: 0.8594 - val_dense_1_loss: 0.7652 - val_dropout_loss: 0.1884
Train on 10 samples, validate on 10 samples
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 1.1176 - dense_1_loss: 0.7943 - dropout_loss: 0.6466
10/10 [==============================] - 0s 428us/step - loss: 1.1194 - dense_1_loss: 0.7934 - dropout_loss: 0.6520 - val_loss: 0.8835 - val_dense_1_loss: 0.7855 - val_dropout_loss: 0.1960
Train on 10 samples, validate on 10 samples
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 0.9707 - dense_1_loss: 0.6993 - dropout_loss: 0.5427
10/10 [==============================] - 0s 477us/step - loss: 1.0623 - dense_1_loss: 0.7829 - dropout_loss: 0.5589 - val_loss: 0.8735 - val_dense_1_loss: 0.7755 - val_dropout_loss: 0.1960
Train on 10 samples, validate on 10 samples
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 0.9429 - dense_1_loss: 0.6601 - dropout_loss: 0.5656
10/10 [==============================] - 0s 425us/step - loss: 1.0459 - dense_1_loss: 0.7730 - dropout_loss: 0.5459 - val_loss: 0.8639 - val_dense_1_loss: 0.7659 - val_dropout_loss: 0.1960

 4/10 [===========>..................] - ETA: 0s
10/10 [==============================] - 0s 206us/step
Epoch 3/5

 4/10 [===========>..................] - ETA: 0s - loss: 1.7572 - dense_1_loss: 1.0807 - dropout_loss: 0.6764 - dense_1_acc: 0.0000e+00
10/10 [==============================] - 0s 332us/step - loss: 1.5450 - dense_1_loss: 0.9228 - dropout_loss: 0.6222 - dense_1_acc: 0.1000
Epoch 4/5

 4/10 [===========>..................] - ETA: 0s - loss: 1.6857 - dense_1_loss: 0.8615 - dropout_loss: 0.8241 - dense_1_acc: 0.2500
10/10 [==============================] - 0s 273us/step - loss: 1.5190 - dense_1_loss: 0.9010 - dropout_loss: 0.6180 - dense_1_acc: 0.1000
Epoch 5/5

 4/10 [===========>..................] - ETA: 0s - loss: 1.6433 - dense_1_loss: 0.8762 - dropout_loss: 0.7670 - dense_1_acc: 0.0000e+00
10/10 [==============================] - 0s 264us/step - loss: 1.4876 - dense_1_loss: 0.8852 - dropout_loss: 0.6024 - dense_1_acc: 0.1000
Epoch 3/5

1/3 [=========>....................] - ETA: 0s - loss: 1.2537 - dense_1_loss: 0.6715 - dropout_loss: 0.5822 - dense_1_acc: 0.0000e+00
3/3 [==============================] - 0s 959us/step - loss: 1.4516 - dense_1_loss: 0.8174 - dropout_loss: 0.6342 - dense_1_acc: 0.0000e+00
Epoch 4/5

1/3 [=========>....................] - ETA: 0s - loss: 1.4150 - dense_1_loss: 0.7397 - dropout_loss: 0.6753 - dense_1_acc: 0.0000e+00
3/3 [==============================] - 0s 900us/step - loss: 1.3580 - dense_1_loss: 0.8394 - dropout_loss: 0.5186 - dense_1_acc: 0.1667
Epoch 5/5

1/3 [=========>....................] - ETA: 0s - loss: 1.5356 - dense_1_loss: 0.9160 - dropout_loss: 0.6196 - dense_1_acc: 0.0000e+00
3/3 [==============================] - 0s 913us/step - loss: 1.3170 - dense_1_loss: 0.7833 - dropout_loss: 0.5337 - dense_1_acc: 0.1667
Epoch 1/1

 4/10 [===========>..................] - ETA: 0s - loss: 2.0396 - dense_1_loss: 1.3803 - dropout_loss: 0.6594 - dense_1_mse: 1.3803 - dropout_mse: 0.6594
10/10 [==============================] - 0s 351us/step - loss: 1.3834 - dense_1_loss: 0.9477 - dropout_loss: 0.4357 - dense_1_mse: 0.9477 - dropout_mse: 0.4357

 4/10 [===========>..................] - ETA: 0s
10/10 [==============================] - 0s 223us/step
Epoch 1/5

1/3 [=========>....................] - ETA: 0s - loss: 0.7490 - dense_1_loss: 0.6408 - dropout_loss: 0.2165
12/3 [========================================================================================================================] - 1s 53ms/step - loss: 0.9210 - dense_1_loss: 0.6581 - dropout_loss: 0.5258 - val_loss: 0.7621 - val_dense_1_loss: 0.6793 - val_dropout_loss: 0.1656
Epoch 2/5

1/3 [=========>....................] - ETA: 0s - loss: 0.7843 - dense_1_loss: 0.4967 - dropout_loss: 0.5751
12/3 [========================================================================================================================] - 0s 19ms/step - loss: 1.0008 - dense_1_loss: 0.7620 - dropout_loss: 0.4776 - val_loss: 0.7702 - val_dense_1_loss: 0.6695 - val_dropout_loss: 0.2013
Epoch 3/5

1/3 [=========>....................] - ETA: 0s - loss: 0.6425 - dense_1_loss: 0.4893 - dropout_loss: 0.3064
12/3 [========================================================================================================================] - 0s 22ms/step - loss: 0.7778 - dense_1_loss: 0.5678 - dropout_loss: 0.4199 - val_loss: 0.7647 - val_dense_1_loss: 0.6856 - val_dropout_loss: 0.1582
Epoch 4/5

1/3 [=========>....................] - ETA: 0s - loss: 0.7099 - dense_1_loss: 0.5361 - dropout_loss: 0.3476
12/3 [========================================================================================================================] - 0s 22ms/step - loss: 0.9172 - dense_1_loss: 0.6652 - dropout_loss: 0.5039 - val_loss: 0.7441 - val_dense_1_loss: 0.6529 - val_dropout_loss: 0.1824
Epoch 5/5

1/3 [=========>....................] - ETA: 0s - loss: 0.9194 - dense_1_loss: 0.6542 - dropout_loss: 0.5305
12/3 [========================================================================================================================] - 0s 19ms/step - loss: 0.7979 - dense_1_loss: 0.5835 - dropout_loss: 0.4287 - val_loss: 0.6803 - val_dense_1_loss: 0.6061 - val_dropout_loss: 0.1484
----------------------------- Captured stderr call -----------------------------
WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:492: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:3630: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:117: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:3013: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.
Instructions for updating:
Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.
WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/optimizers.py:711: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:675: calling Constant.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:953: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:940: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:2373: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:158: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:163: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.

2023-09-01 19:40:58.840213: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2023-09-01 19:40:58.861032: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3399905000 Hz
2023-09-01 19:40:58.861466: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5577d5a4d0f0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2023-09-01 19:40:58.861482: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2023-09-01 19:40:58.862416: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory
2023-09-01 19:40:58.862427: E tensorflow/stream_executor/cuda/cuda_driver.cc:318] failed call to cuInit: UNKNOWN ERROR (303)
2023-09-01 19:40:58.862446: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:163] no NVIDIA GPU device is present: /dev/nvidia0 does not exist
WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:172: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:181: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:188: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.

------------------------------ Captured log call -------------------------------
WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:492: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:3630: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:117: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.

WARNING  tensorflow:deprecation.py:506 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:3013: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.
Instructions for updating:
Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.
WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/optimizers.py:711: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.

WARNING  tensorflow:deprecation.py:506 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:675: calling Constant.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:953: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:940: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:2373: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:158: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:163: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:172: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:181: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:188: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.
=============================== warnings summary ===============================
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:10
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:10
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:10: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _nlv = LooseVersion(_np_version)

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:11
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:11
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:11: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p14 = _nlv < LooseVersion("1.14")

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:12
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:12
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:12: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p15 = _nlv < LooseVersion("1.15")

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:13
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:13
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:13: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p16 = _nlv < LooseVersion("1.16")

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:14
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:14
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:14: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p17 = _nlv < LooseVersion("1.17")

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:15
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:15
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py:15: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p18 = _nlv < LooseVersion("1.18")

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/setuptools/_distutils/version.py:346: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/function.py:114
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/function.py:114
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/function.py:114
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/function.py:114
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/compat/numpy/function.py:114: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(_np_version) >= LooseVersion("1.17.0"):

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/_testing.py:24
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/_testing.py:24
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/pandas/_testing.py:24: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    import pandas._libs.testing as _testing

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/h5py/__init__.py:46
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/h5py/__init__.py:46
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/h5py/__init__.py:46: DeprecationWarning: `np.typeDict` is a deprecated alias for `np.sctypeDict`.
    from ._conv import register_converters as _register_converters

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/pywrap_tensorflow_internal.py:15
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/pywrap_tensorflow_internal.py:15
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/pywrap_tensorflow_internal.py:15: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:597
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:597
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:597: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.object,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:605
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:605
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:605: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.bool,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:639
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:639
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:639: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.object,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:649
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:649
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/dtypes.py:649: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.bool,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:106
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:106
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:106: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.object:

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:108
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:108
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:108: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.bool:

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:568
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:568
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:568: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    (np.object, string),

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:569
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:569
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:569: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    (np.bool, bool),

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:593
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:593
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:593: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    types_pb2.DT_STRING: np.object,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:597
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:597
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:597: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    types_pb2.DT_BOOL: np.bool,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:614
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:614
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:614: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    types_pb2.DT_STRING_REF: np.object,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:619
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:619
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:619: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    types_pb2.DT_BOOL_REF: np.bool,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/util/tensor_util.py:100
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/util/tensor_util.py:100
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/util/tensor_util.py:100: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.object: SlowAppendObjectArrayToTensorProto,

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/util/tensor_util.py:101
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/util/tensor_util.py:101
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorboard/util/tensor_util.py:101: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.bool: SlowAppendBoolArrayToTensorProto,

keras/callbacks.py:15
keras/callbacks.py:15
  /home/user/BugsInPy/temp/projects/keras/keras/callbacks.py:15: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    from collections import Iterable

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521: DeprecationWarning: tostring() is deprecated. Use tobytes() instead.
    tensor_proto.tensor_content = nparray.tostring()

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/indexed_slices.py:339
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/python/framework/indexed_slices.py:339: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    if not isinstance(values, collections.Sequence):

tests/keras/engine/test_training.py:364
  /home/user/BugsInPy/temp/projects/keras/tests/keras/engine/test_training.py:364: UserWarning: Output "dense_1" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to "dense_1" during training.
    model.compile(optimizer, loss=[])

tests/keras/engine/test_training.py:364
  /home/user/BugsInPy/temp/projects/keras/tests/keras/engine/test_training.py:364: UserWarning: Output "dropout" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to "dropout" during training.
    model.compile(optimizer, loss=[])

/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26
  /opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    from collections import Container

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================== slowest 10 test durations ===========================
3.17s call     tests/keras/engine/test_training.py::test_model_methods

(0.00 durations hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/keras/engine/test_training.py::test_model_methods - AssertionErr...
======================== 1 failed, 65 warnings in 6.15s ========================
/opt/conda/envs/66f557d45597d0371c1c7f7e137dee51/lib/python3.7/site-packages/coverage/control.py:793: CoverageWarning: No data was collected. (no-data-collected)
  self._warn("No data was collected.", slug="no-data-collected")
