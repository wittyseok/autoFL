[
    {
        "name": "tests.conftest.no_memoize#20",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 20,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#26",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#25",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#36",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#41",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#46",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#53",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 53,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_branch_exists.stderr#7",
        "src_path": "tests/rules/test_git_branch_exists.py",
        "class_name": "tests.rules.test_git_branch_exists",
        "signature": "tests.rules.test_git_branch_exists.stderr(branch_name)",
        "snippet": "def stderr(branch_name):\n    return \"fatal: A branch named '{}' already exists.\".format(branch_name)",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_branch_exists.new_command#12",
        "src_path": "tests/rules/test_git_branch_exists.py",
        "class_name": "tests.rules.test_git_branch_exists",
        "signature": "tests.rules.test_git_branch_exists.new_command(branch_name)",
        "snippet": "def new_command(branch_name):\n    return [cmd.format(branch_name) for cmd in [\n        'git branch -d {0} && git branch {0}',\n        'git branch -d {0} && git checkout -b {0}',\n        'git branch -D {0} && git branch {0}',\n        'git branch -D {0} && git checkout -b {0}', 'git checkout {0}']]",
        "begin_line": 12,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_branch_exists.test_match#22",
        "src_path": "tests/rules/test_git_branch_exists.py",
        "class_name": "tests.rules.test_git_branch_exists",
        "signature": "tests.rules.test_git_branch_exists.test_match(stderr, script, branch_name)",
        "snippet": "def test_match(stderr, script, branch_name):\n    assert match(Command(script=script, stderr=stderr))",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_branch_exists.test_not_match#27",
        "src_path": "tests/rules/test_git_branch_exists.py",
        "class_name": "tests.rules.test_git_branch_exists",
        "signature": "tests.rules.test_git_branch_exists.test_not_match(script)",
        "snippet": "def test_not_match(script):\n    assert not match(Command(script=script, stderr=''))",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_git_branch_exists.test_get_new_command#33",
        "src_path": "tests/rules/test_git_branch_exists.py",
        "class_name": "tests.rules.test_git_branch_exists",
        "signature": "tests.rules.test_git_branch_exists.test_get_new_command(stderr, new_command, script, branch_name)",
        "snippet": "def test_get_new_command(stderr, new_command, script, branch_name):\n    assert get_new_command(Command(script=script, stderr=stderr)) == new_command",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Command",
        "signature": "tests.utils.Command.__init__(self, script='', stdout='', stderr='')",
        "snippet": "    def __init__(self, script='', stdout='', stderr=''):\n        super(Command, self).__init__(script, stdout, stderr)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#11",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 11,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#23",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.builtins_open#5",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.builtins_open(mocker)",
        "snippet": "def builtins_open(mocker):\n    return mocker.patch('six.moves.builtins.open')",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.isfile#10",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.isfile(mocker)",
        "snippet": "def isfile(mocker):\n    return mocker.patch('os.path.isfile', return_value=True)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.aux#17",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.aux(lines)",
        "snippet": "    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.history_lines#16",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.history_lines(mocker)",
        "snippet": "def history_lines(mocker):\n    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines\n\n    return aux",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    }
]