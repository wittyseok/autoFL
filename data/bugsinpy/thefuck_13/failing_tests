coverage run -m pytest tests/rules/test_git_branch_exists.py::test_match
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 2 items

tests/rules/test_git_branch_exists.py .F                                 [100%]

=================================== FAILURES ===================================
_______________________ test_match[git checkout bar-bar] _______________________

stderr = "fatal: A branch named 'bar' already exists."
script = 'git checkout bar', branch_name = 'bar'

    @pytest.mark.parametrize('script, branch_name', [
        ('git branch foo', 'foo'), ('git checkout bar', 'bar')])
    def test_match(stderr, script, branch_name):
>       assert match(Command(script=script, stderr=stderr))
E       assert False
E        +  where False = match(Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.))
E        +    where Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.) = Command(script='git checkout bar', stderr="fatal: A branch named 'bar' already exists.")

tests/rules/test_git_branch_exists.py:23: AssertionError
====================== 1 failed, 1 passed in 0.08 seconds ======================

coverage run -m pytest tests/rules/test_git_branch_exists.py::test_get_new_command
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 2 items

tests/rules/test_git_branch_exists.py FF                                 [100%]

=================================== FAILURES ===================================
___________________ test_get_new_command[git branch foo-foo] ___________________

stderr = "fatal: A branch named 'foo' already exists."
new_command = ['git branch -d foo && git branch foo', 'git branch -d foo && git checkout -b foo', 'git branch -D foo && git branch foo', 'git branch -D foo && git checkout -b foo', 'git checkout foo']
script = 'git branch foo', branch_name = 'foo'

    @pytest.mark.parametrize('script, branch_name, ', [
        ('git branch foo', 'foo'), ('git checkout bar', 'bar')])
    def test_get_new_command(stderr, new_command, script, branch_name):
>       assert get_new_command(Command(script=script, stderr=stderr)) == new_command
E       AssertionError: assert ['git branch ...checkout foo'] == ['git branch -...checkout foo']
E         At index 1 diff: 'git branch -D foo && git branch foo' != 'git branch -d foo && git checkout -b foo'
E         Right contains more items, first extra item: 'git branch -D foo && git checkout -b foo'
E         Use -v to get the full diff

tests/rules/test_git_branch_exists.py:34: AssertionError
__________________ test_get_new_command[git checkout bar-bar] __________________

stderr = "fatal: A branch named 'bar' already exists."
new_command = ['git branch -d bar && git branch bar', 'git branch -d bar && git checkout -b bar', 'git branch -D bar && git branch bar', 'git branch -D bar && git checkout -b bar', 'git checkout bar']
script = 'git checkout bar', branch_name = 'bar'

    @pytest.mark.parametrize('script, branch_name, ', [
        ('git branch foo', 'foo'), ('git checkout bar', 'bar')])
    def test_get_new_command(stderr, new_command, script, branch_name):
>       assert get_new_command(Command(script=script, stderr=stderr)) == new_command
E       AssertionError: assert ['git branch ...checkout bar'] == ['git branch -...checkout bar']
E         At index 1 diff: 'git branch -D bar && git branch bar' != 'git branch -d bar && git checkout -b bar'
E         Right contains more items, first extra item: 'git branch -D bar && git checkout -b bar'
E         Use -v to get the full diff

tests/rules/test_git_branch_exists.py:34: AssertionError
=========================== 2 failed in 0.08 seconds ===========================
