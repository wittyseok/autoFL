coverage run -m pytest tests/rules/test_vagrant_up.py::test_get_new_command
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 4 items

tests/rules/test_vagrant_up.py FFFF                                      [100%]

=================================== FAILURES ===================================
___________ test_get_new_command[command0-vagrant up && vagrant ssh] ___________

command = Command(script='vagrant ssh', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.')
new_command = 'vagrant up && vagrant ssh'

    @pytest.mark.parametrize('command, new_command', [
        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),
        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),
        (Command(script='vagrant rdp',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),
        (Command(script='vagrant rdp devbox',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'vagrant up  && vagrant ssh' == 'vagrant up && vagrant ssh'
E         - vagrant up  && vagrant ssh
E         ?            -
E         + vagrant up && vagrant ssh

tests/rules/test_vagrant_up.py:33: AssertionError
_________________ test_get_new_command[command1-new_command1] __________________

command = Command(script='vagrant ssh devbox', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.')
new_command = ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']

    @pytest.mark.parametrize('command, new_command', [
        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),
        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),
        (Command(script='vagrant rdp',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),
        (Command(script='vagrant rdp devbox',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'vagrant up devbox && vagrant ssh devbox' == ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']
E        +  where 'vagrant up devbox && vagrant ssh devbox' = get_new_command(Command(script='vagrant ssh devbox', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), None)

tests/rules/test_vagrant_up.py:33: AssertionError
___________ test_get_new_command[command2-vagrant up && vagrant rdp] ___________

command = Command(script='vagrant rdp', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')
new_command = 'vagrant up && vagrant rdp'

    @pytest.mark.parametrize('command, new_command', [
        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),
        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),
        (Command(script='vagrant rdp',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),
        (Command(script='vagrant rdp devbox',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'vagrant up  && vagrant rdp' == 'vagrant up && vagrant rdp'
E         - vagrant up  && vagrant rdp
E         ?            -
E         + vagrant up && vagrant rdp

tests/rules/test_vagrant_up.py:33: AssertionError
_________________ test_get_new_command[command3-new_command3] __________________

command = Command(script='vagrant rdp devbox', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')
new_command = ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox']

    @pytest.mark.parametrize('command, new_command', [
        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),
        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),
        (Command(script='vagrant rdp',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),
        (Command(script='vagrant rdp devbox',
                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])
    def test_get_new_command(command, new_command):
>       assert get_new_command(command, None) == new_command
E       AssertionError: assert 'vagrant up devbox && vagrant rdp devbox' == ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox']
E        +  where 'vagrant up devbox && vagrant rdp devbox' = get_new_command(Command(script='vagrant rdp devbox', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.'), None)

tests/rules/test_vagrant_up.py:33: AssertionError
=========================== 4 failed in 0.11 seconds ===========================
