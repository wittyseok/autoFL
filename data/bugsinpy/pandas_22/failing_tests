coverage run -m pytest pandas/tests/window/test_base_indexer.py::test_rolling_forward_window
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 10 items

pandas/tests/window/test_base_indexer.py FF........                      [100%]

=================================== FAILURES ===================================
______ test_rolling_forward_window[count-len-expected0-np_kwargs0-Series] ______

constructor = <class 'pandas.core.series.Series'>, func = 'count'
np_func = <built-in function len>
expected = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, ...], np_kwargs = {}

    @pytest.mark.parametrize("constructor", [Series, DataFrame])
    @pytest.mark.parametrize(
        "func,np_func,expected,np_kwargs",
        [
            ("count", len, [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, np.nan], {},),
            ("min", np.min, [0.0, 1.0, 2.0, 3.0, 4.0, 6.0, 6.0, 7.0, 8.0, np.nan], {},),
            (
                "max",
                np.max,
                [2.0, 3.0, 4.0, 100.0, 100.0, 100.0, 8.0, 9.0, 9.0, np.nan],
                {},
            ),
            (
                "std",
                np.std,
                [
                    1.0,
                    1.0,
                    1.0,
                    55.71654452,
                    54.85739087,
                    53.9845657,
                    1.0,
                    1.0,
                    0.70710678,
                    np.nan,
                ],
                {"ddof": 1},
            ),
            (
                "var",
                np.var,
                [
                    1.0,
                    1.0,
                    1.0,
                    3104.333333,
                    3009.333333,
                    2914.333333,
                    1.0,
                    1.0,
                    0.500000,
                    np.nan,
                ],
                {"ddof": 1},
            ),
        ],
    )
    def test_rolling_forward_window(constructor, func, np_func, expected, np_kwargs):
        # GH 32865
        values = np.arange(10)
        values[5] = 100.0
    
        indexer = FixedForwardWindowIndexer(window_size=3)
    
        match = "Forward-looking windows can't have center=True"
        with pytest.raises(ValueError, match=match):
            rolling = constructor(values).rolling(window=indexer, center=True)
>           result = getattr(rolling, func)()

pandas/tests/window/test_base_indexer.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/window/rolling.py:1946: in count
    return super().count()
pandas/core/window/rolling.py:1175: in count
    validate_baseindexer_support("count")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

func_name = 'count'

    def validate_baseindexer_support(func_name: Optional[str]) -> None:
        # GH 32865: These functions work correctly with a BaseIndexer subclass
        BASEINDEXER_WHITELIST = {
            "min",
            "max",
            "mean",
            "sum",
            "median",
            "std",
            "var",
            "kurt",
            "quantile",
        }
        if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:
>           raise NotImplementedError(
                f"{func_name} is not supported with using a BaseIndexer "
                f"subclasses. You can use .apply() with {func_name}."
            )
E           NotImplementedError: count is not supported with using a BaseIndexer subclasses. You can use .apply() with count.

pandas/core/window/common.py:342: NotImplementedError
____ test_rolling_forward_window[count-len-expected0-np_kwargs0-DataFrame] _____

constructor = <class 'pandas.core.frame.DataFrame'>, func = 'count'
np_func = <built-in function len>
expected = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, ...], np_kwargs = {}

    @pytest.mark.parametrize("constructor", [Series, DataFrame])
    @pytest.mark.parametrize(
        "func,np_func,expected,np_kwargs",
        [
            ("count", len, [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, np.nan], {},),
            ("min", np.min, [0.0, 1.0, 2.0, 3.0, 4.0, 6.0, 6.0, 7.0, 8.0, np.nan], {},),
            (
                "max",
                np.max,
                [2.0, 3.0, 4.0, 100.0, 100.0, 100.0, 8.0, 9.0, 9.0, np.nan],
                {},
            ),
            (
                "std",
                np.std,
                [
                    1.0,
                    1.0,
                    1.0,
                    55.71654452,
                    54.85739087,
                    53.9845657,
                    1.0,
                    1.0,
                    0.70710678,
                    np.nan,
                ],
                {"ddof": 1},
            ),
            (
                "var",
                np.var,
                [
                    1.0,
                    1.0,
                    1.0,
                    3104.333333,
                    3009.333333,
                    2914.333333,
                    1.0,
                    1.0,
                    0.500000,
                    np.nan,
                ],
                {"ddof": 1},
            ),
        ],
    )
    def test_rolling_forward_window(constructor, func, np_func, expected, np_kwargs):
        # GH 32865
        values = np.arange(10)
        values[5] = 100.0
    
        indexer = FixedForwardWindowIndexer(window_size=3)
    
        match = "Forward-looking windows can't have center=True"
        with pytest.raises(ValueError, match=match):
            rolling = constructor(values).rolling(window=indexer, center=True)
>           result = getattr(rolling, func)()

pandas/tests/window/test_base_indexer.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/window/rolling.py:1946: in count
    return super().count()
pandas/core/window/rolling.py:1175: in count
    validate_baseindexer_support("count")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

func_name = 'count'

    def validate_baseindexer_support(func_name: Optional[str]) -> None:
        # GH 32865: These functions work correctly with a BaseIndexer subclass
        BASEINDEXER_WHITELIST = {
            "min",
            "max",
            "mean",
            "sum",
            "median",
            "std",
            "var",
            "kurt",
            "quantile",
        }
        if isinstance(func_name, str) and func_name not in BASEINDEXER_WHITELIST:
>           raise NotImplementedError(
                f"{func_name} is not supported with using a BaseIndexer "
                f"subclasses. You can use .apply() with {func_name}."
            )
E           NotImplementedError: count is not supported with using a BaseIndexer subclasses. You can use .apply() with count.

pandas/core/window/common.py:342: NotImplementedError
=========================== short test summary info ============================
FAILED pandas/tests/window/test_base_indexer.py::test_rolling_forward_window[count-len-expected0-np_kwargs0-Series]
FAILED pandas/tests/window/test_base_indexer.py::test_rolling_forward_window[count-len-expected0-np_kwargs0-DataFrame]
========================= 2 failed, 8 passed in 0.38s ==========================
