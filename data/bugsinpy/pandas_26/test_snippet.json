[
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_not_ordered_raises#15",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_not_ordered_raises(self, aggregation)",
        "snippet": "    def test_min_max_not_ordered_raises(self, aggregation):\n        # unordered cats have no min/max\n        cat = Categorical([\"a\", \"b\", \"c\", \"d\"], ordered=False)\n        msg = f\"Categorical is not ordered for operation {aggregation}\"\n        agg_func = getattr(cat, aggregation)\n\n        with pytest.raises(TypeError, match=msg):\n            agg_func()",
        "begin_line": 15,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_ordered#24",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_ordered(self)",
        "snippet": "    def test_min_max_ordered(self):\n        cat = Categorical([\"a\", \"b\", \"c\", \"d\"], ordered=True)\n        _min = cat.min()\n        _max = cat.max()\n        assert _min == \"a\"\n        assert _max == \"d\"\n\n        cat = Categorical(\n            [\"a\", \"b\", \"c\", \"d\"], categories=[\"d\", \"c\", \"b\", \"a\"], ordered=True\n        )\n        _min = cat.min()\n        _max = cat.max()\n        assert _min == \"d\"\n        assert _max == \"a\"",
        "begin_line": 24,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_ordered_empty#54",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_ordered_empty(self, categories, expected, aggregation)",
        "snippet": "    def test_min_max_ordered_empty(self, categories, expected, aggregation):\n        # GH 30227\n        cat = Categorical([], categories=list(\"ABC\"), ordered=True)\n\n        agg_func = getattr(cat, aggregation)\n        result = agg_func()\n        assert result is expected",
        "begin_line": 54,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_with_nan#63",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_with_nan(self, skipna)",
        "snippet": "    def test_min_max_with_nan(self, skipna):\n        # GH 25303\n        cat = Categorical(\n            [np.nan, \"b\", \"c\", np.nan], categories=[\"d\", \"c\", \"b\", \"a\"], ordered=True\n        )\n        _min = cat.min(skipna=skipna)\n        _max = cat.max(skipna=skipna)\n\n        if skipna is False:\n            assert np.isnan(_min)\n            assert np.isnan(_max)\n        else:\n            assert _min == \"c\"\n            assert _max == \"b\"\n\n        cat = Categorical(\n            [np.nan, 1, 2, np.nan], categories=[5, 4, 3, 2, 1], ordered=True\n        )\n        _min = cat.min(skipna=skipna)\n        _max = cat.max(skipna=skipna)\n\n        if skipna is False:\n            assert np.isnan(_min)\n            assert np.isnan(_max)\n        else:\n            assert _min == 2\n            assert _max == 1",
        "begin_line": 63,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_only_nan#93",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_min_max_only_nan(self, function, skipna)",
        "snippet": "    def test_min_max_only_nan(self, function, skipna):\n        # https://github.com/pandas-dev/pandas/issues/33450\n        cat = Categorical([np.nan], categories=[1, 2], ordered=True)\n        result = getattr(cat, function)(skipna=skipna)\n        assert result is np.nan",
        "begin_line": 93,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_deprecate_numeric_only_min_max#100",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_deprecate_numeric_only_min_max(self, method)",
        "snippet": "    def test_deprecate_numeric_only_min_max(self, method):\n        # GH 25303\n        cat = Categorical(\n            [np.nan, 1, 2, np.nan], categories=[5, 4, 3, 2, 1], ordered=True\n        )\n        with tm.assert_produces_warning(expected_warning=FutureWarning):\n            getattr(cat, method)(numeric_only=True)",
        "begin_line": 100,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_mode#119",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_mode(self, values, categories, exp_mode)",
        "snippet": "    def test_mode(self, values, categories, exp_mode):\n        s = Categorical(values, categories=categories, ordered=True)\n        res = s.mode()\n        exp = Categorical(exp_mode, categories=categories, ordered=True)\n        tm.assert_categorical_equal(res, exp)",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_searchsorted#125",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_searchsorted(self, ordered)",
        "snippet": "    def test_searchsorted(self, ordered):\n        # https://github.com/pandas-dev/pandas/issues/8420\n        # https://github.com/pandas-dev/pandas/issues/14522\n\n        cat = Categorical(\n            [\"cheese\", \"milk\", \"apple\", \"bread\", \"bread\"],\n            categories=[\"cheese\", \"milk\", \"apple\", \"bread\"],\n            ordered=ordered,\n        )\n        ser = Series(cat)\n\n        # Searching for single item argument, side='left' (default)\n        res_cat = cat.searchsorted(\"apple\")\n        assert res_cat == 2\n        assert is_scalar(res_cat)\n\n        res_ser = ser.searchsorted(\"apple\")\n        assert res_ser == 2\n        assert is_scalar(res_ser)\n\n        # Searching for single item array, side='left' (default)\n        res_cat = cat.searchsorted([\"bread\"])\n        res_ser = ser.searchsorted([\"bread\"])\n        exp = np.array([3], dtype=np.intp)\n        tm.assert_numpy_array_equal(res_cat, exp)\n        tm.assert_numpy_array_equal(res_ser, exp)\n\n        # Searching for several items array, side='right'\n        res_cat = cat.searchsorted([\"apple\", \"bread\"], side=\"right\")\n        res_ser = ser.searchsorted([\"apple\", \"bread\"], side=\"right\")\n        exp = np.array([3, 5], dtype=np.intp)\n        tm.assert_numpy_array_equal(res_cat, exp)\n        tm.assert_numpy_array_equal(res_ser, exp)\n\n        # Searching for a single value that is not from the Categorical\n        with pytest.raises(KeyError, match=\"cucumber\"):\n            cat.searchsorted(\"cucumber\")\n        with pytest.raises(KeyError, match=\"cucumber\"):\n            ser.searchsorted(\"cucumber\")\n\n        # Searching for multiple values one of each is not from the Categorical\n        with pytest.raises(KeyError, match=\"cucumber\"):\n            cat.searchsorted([\"bread\", \"cucumber\"])\n        with pytest.raises(KeyError, match=\"cucumber\"):\n            ser.searchsorted([\"bread\", \"cucumber\"])",
        "begin_line": 125,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique#171",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique(self)",
        "snippet": "    def test_unique(self):\n        # categories are reordered based on value when ordered=False\n        cat = Categorical([\"a\", \"b\"])\n        exp = Index([\"a\", \"b\"])\n        res = cat.unique()\n        tm.assert_index_equal(res.categories, exp)\n        tm.assert_categorical_equal(res, cat)\n\n        cat = Categorical([\"a\", \"b\", \"a\", \"a\"], categories=[\"a\", \"b\", \"c\"])\n        res = cat.unique()\n        tm.assert_index_equal(res.categories, exp)\n        tm.assert_categorical_equal(res, Categorical(exp))\n\n        cat = Categorical([\"c\", \"a\", \"b\", \"a\", \"a\"], categories=[\"a\", \"b\", \"c\"])\n        exp = Index([\"c\", \"a\", \"b\"])\n        res = cat.unique()\n        tm.assert_index_equal(res.categories, exp)\n        exp_cat = Categorical(exp, categories=[\"c\", \"a\", \"b\"])\n        tm.assert_categorical_equal(res, exp_cat)\n\n        # nan must be removed\n        cat = Categorical([\"b\", np.nan, \"b\", np.nan, \"a\"], categories=[\"a\", \"b\", \"c\"])\n        res = cat.unique()\n        exp = Index([\"b\", \"a\"])\n        tm.assert_index_equal(res.categories, exp)\n        exp_cat = Categorical([\"b\", np.nan, \"a\"], categories=[\"b\", \"a\"])\n        tm.assert_categorical_equal(res, exp_cat)",
        "begin_line": 171,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique_ordered#199",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique_ordered(self)",
        "snippet": "    def test_unique_ordered(self):\n        # keep categories order when ordered=True\n        cat = Categorical([\"b\", \"a\", \"b\"], categories=[\"a\", \"b\"], ordered=True)\n        res = cat.unique()\n        exp_cat = Categorical([\"b\", \"a\"], categories=[\"a\", \"b\"], ordered=True)\n        tm.assert_categorical_equal(res, exp_cat)\n\n        cat = Categorical(\n            [\"c\", \"b\", \"a\", \"a\"], categories=[\"a\", \"b\", \"c\"], ordered=True\n        )\n        res = cat.unique()\n        exp_cat = Categorical([\"c\", \"b\", \"a\"], categories=[\"a\", \"b\", \"c\"], ordered=True)\n        tm.assert_categorical_equal(res, exp_cat)\n\n        cat = Categorical([\"b\", \"a\", \"a\"], categories=[\"a\", \"b\", \"c\"], ordered=True)\n        res = cat.unique()\n        exp_cat = Categorical([\"b\", \"a\"], categories=[\"a\", \"b\"], ordered=True)\n        tm.assert_categorical_equal(res, exp_cat)\n\n        cat = Categorical(\n            [\"b\", \"b\", np.nan, \"a\"], categories=[\"a\", \"b\", \"c\"], ordered=True\n        )\n        res = cat.unique()\n        exp_cat = Categorical([\"b\", np.nan, \"a\"], categories=[\"a\", \"b\"], ordered=True)\n        tm.assert_categorical_equal(res, exp_cat)",
        "begin_line": 199,
        "end_line": 223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique_index_series#225",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_unique_index_series(self)",
        "snippet": "    def test_unique_index_series(self):\n        c = Categorical([3, 1, 2, 2, 1], categories=[3, 2, 1])\n        # Categorical.unique sorts categories by appearance order\n        # if ordered=False\n        exp = Categorical([3, 1, 2], categories=[3, 1, 2])\n        tm.assert_categorical_equal(c.unique(), exp)\n\n        tm.assert_index_equal(Index(c).unique(), Index(exp))\n        tm.assert_categorical_equal(Series(c).unique(), exp)\n\n        c = Categorical([1, 1, 2, 2], categories=[3, 2, 1])\n        exp = Categorical([1, 2], categories=[1, 2])\n        tm.assert_categorical_equal(c.unique(), exp)\n        tm.assert_index_equal(Index(c).unique(), Index(exp))\n        tm.assert_categorical_equal(Series(c).unique(), exp)\n\n        c = Categorical([3, 1, 2, 2, 1], categories=[3, 2, 1], ordered=True)\n        # Categorical.unique keeps categories order if ordered=True\n        exp = Categorical([3, 1, 2], categories=[3, 2, 1], ordered=True)\n        tm.assert_categorical_equal(c.unique(), exp)\n\n        tm.assert_index_equal(Index(c).unique(), Index(exp))\n        tm.assert_categorical_equal(Series(c).unique(), exp)",
        "begin_line": 225,
        "end_line": 247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_shift#249",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_shift(self)",
        "snippet": "    def test_shift(self):\n        # GH 9416\n        cat = Categorical([\"a\", \"b\", \"c\", \"d\", \"a\"])\n\n        # shift forward\n        sp1 = cat.shift(1)\n        xp1 = Categorical([np.nan, \"a\", \"b\", \"c\", \"d\"])\n        tm.assert_categorical_equal(sp1, xp1)\n        tm.assert_categorical_equal(cat[:-1], sp1[1:])\n\n        # shift back\n        sn2 = cat.shift(-2)\n        xp2 = Categorical(\n            [\"c\", \"d\", \"a\", np.nan, np.nan], categories=[\"a\", \"b\", \"c\", \"d\"]\n        )\n        tm.assert_categorical_equal(sn2, xp2)\n        tm.assert_categorical_equal(cat[2:], sn2[:-2])\n\n        # shift by zero\n        tm.assert_categorical_equal(cat, cat.shift(0))",
        "begin_line": 249,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_nbytes#270",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_nbytes(self)",
        "snippet": "    def test_nbytes(self):\n        cat = Categorical([1, 2, 3])\n        exp = 3 + 3 * 8  # 3 int8s for values + 3 int64s for categories\n        assert cat.nbytes == exp",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_memory_usage#275",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_memory_usage(self)",
        "snippet": "    def test_memory_usage(self):\n        cat = Categorical([1, 2, 3])\n\n        # .categories is an index, so we include the hashtable\n        assert 0 < cat.nbytes <= cat.memory_usage()\n        assert 0 < cat.nbytes <= cat.memory_usage(deep=True)\n\n        cat = Categorical([\"foo\", \"foo\", \"bar\"])\n        assert cat.memory_usage(deep=True) > cat.nbytes\n\n        if not PYPY:\n            # sys.getsizeof will call the .memory_usage with\n            # deep=True, and add on some GC overhead\n            diff = cat.memory_usage(deep=True) - sys.getsizeof(cat)\n            assert abs(diff) < 100",
        "begin_line": 275,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_map#291",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_map(self)",
        "snippet": "    def test_map(self):\n        c = Categorical(list(\"ABABC\"), categories=list(\"CBA\"), ordered=True)\n        result = c.map(lambda x: x.lower())\n        exp = Categorical(list(\"ababc\"), categories=list(\"cba\"), ordered=True)\n        tm.assert_categorical_equal(result, exp)\n\n        c = Categorical(list(\"ABABC\"), categories=list(\"ABC\"), ordered=False)\n        result = c.map(lambda x: x.lower())\n        exp = Categorical(list(\"ababc\"), categories=list(\"abc\"), ordered=False)\n        tm.assert_categorical_equal(result, exp)\n\n        result = c.map(lambda x: 1)\n        # GH 12766: Return an index not an array\n        tm.assert_index_equal(result, Index(np.array([1] * 5, dtype=np.int64)))",
        "begin_line": 291,
        "end_line": 304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_validate_inplace_raises#307",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_validate_inplace_raises(self, value)",
        "snippet": "    def test_validate_inplace_raises(self, value):\n        cat = Categorical([\"A\", \"B\", \"B\", \"C\", \"A\"])\n        msg = (\n            'For argument \"inplace\" expected type bool, '\n            f\"received type {type(value).__name__}\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            cat.set_ordered(value=True, inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.as_ordered(inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.as_unordered(inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.set_categories([\"X\", \"Y\", \"Z\"], rename=True, inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.rename_categories([\"X\", \"Y\", \"Z\"], inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.reorder_categories([\"X\", \"Y\", \"Z\"], ordered=True, inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.add_categories(new_categories=[\"D\", \"E\", \"F\"], inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.remove_categories(removals=[\"D\", \"E\", \"F\"], inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.remove_unused_categories(inplace=value)\n\n        with pytest.raises(ValueError, match=msg):\n            cat.sort_values(inplace=value)",
        "begin_line": 307,
        "end_line": 341,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_isna#343",
        "src_path": "pandas/tests/arrays/categorical/test_analytics.py",
        "class_name": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics",
        "signature": "pandas.tests.arrays.categorical.test_analytics.TestCategoricalAnalytics.test_isna(self)",
        "snippet": "    def test_isna(self):\n        exp = np.array([False, False, True])\n        c = Categorical([\"a\", \"b\", np.nan])\n        res = c.isna()\n\n        tm.assert_numpy_array_equal(res, exp)",
        "begin_line": 343,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal#12",
        "src_path": "pandas/tests/extension/base/base.py",
        "class_name": "pandas.tests.extension.base.base.BaseExtensionTests",
        "signature": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal(cls, left, right, *args, **kwargs)",
        "snippet": "    def assert_series_equal(cls, left, right, *args, **kwargs):\n        return tm.assert_series_equal(left, right, *args, **kwargs)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.dtype#29",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.dtype(request)",
        "snippet": "def dtype(request):\n    return request.param()",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data#34",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data(dtype)",
        "snippet": "def data(dtype):\n    return integer_array(\n        list(range(8)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100],\n        dtype=dtype,\n    )",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data_missing#42",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data_missing(dtype)",
        "snippet": "def data_missing(dtype):\n    return integer_array([np.nan, 1], dtype=dtype)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.all_data#47",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.all_data(request, data, data_missing)",
        "snippet": "def all_data(request, data, data_missing):\n    \"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"\n    if request.param == \"data\":\n        return data\n    elif request.param == \"data_missing\":\n        return data_missing",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#24",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#31",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DecimalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#49",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#65",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#111",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            item = pd.api.indexers.check_array_indexer(self, item)\n            return type(self)(self._data[item])",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#132",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#148",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 148,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#158",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 158,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    }
]