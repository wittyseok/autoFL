coverage run -m pytest pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_pi_add_offset_n_gt1
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 8 items

pandas/tests/arithmetic/test_period.py ....F...                          [100%]

=================================== FAILURES ===================================
______ TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1[DataFrame-True] ______

self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x7f0b049580a0>
box_with_array = <class 'pandas.core.frame.DataFrame'>, transpose = True

    @pytest.mark.parametrize("transpose", [True, False])
    def test_pi_add_offset_n_gt1(self, box_with_array, transpose):
        # GH#23215
        # add offset to PeriodIndex with freq.n > 1
    
        per = pd.Period("2016-01", freq="2M")
        pi = pd.PeriodIndex([per])
    
        expected = pd.PeriodIndex(["2016-03"], freq="2M")
    
        pi = tm.box_expected(pi, box_with_array, transpose=transpose)
        expected = tm.box_expected(expected, box_with_array, transpose=transpose)
    
        result = pi + per.freq
>       tm.assert_equal(result, expected)
E       AssertionError: Attributes of DataFrame.iloc[:, 0] are different
E       
E       Attribute "dtype" are different
E       [left]:  period[2M]
E       [right]: object

pandas/tests/arithmetic/test_period.py:770: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_pi_add_offset_n_gt1[DataFrame-True]
========================= 1 failed, 7 passed in 0.57s ==========================

coverage run -m pytest pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_parr_add_sub_td64_nat
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 8 items

pandas/tests/arithmetic/test_period.py ....F...                          [100%]

=================================== FAILURES ===================================
_____ TestPeriodIndexArithmetic.test_parr_add_sub_td64_nat[DataFrame-True] _____

self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x7f0e94a083d0>
box_with_array = <class 'pandas.core.frame.DataFrame'>, transpose = True

    @pytest.mark.parametrize("transpose", [True, False])
    def test_parr_add_sub_td64_nat(self, box_with_array, transpose):
        # GH#23320 special handling for timedelta64("NaT")
        pi = pd.period_range("1994-04-01", periods=9, freq="19D")
        other = np.timedelta64("NaT")
        expected = pd.PeriodIndex(["NaT"] * 9, freq="19D")
    
        obj = tm.box_expected(pi, box_with_array, transpose=transpose)
        expected = tm.box_expected(expected, box_with_array, transpose=transpose)
    
>       result = obj + other

pandas/tests/arithmetic/test_period.py:995: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:716: in f
    new_data = dispatch_to_series(self, other, op)
pandas/core/ops/__init__.py:413: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:208: in evaluate
    return _evaluate(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:376: in column_op
    return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:376: in <dictcomp>
    return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}
pandas/core/ops/common.py:64: in new_method
    return method(self, other)
pandas/core/ops/__init__.py:497: in wrapper
    result = arithmetic_op(lvalues, rvalues, op, str_rep)
pandas/core/ops/array_ops.py:191: in arithmetic_op
    res_values = dispatch_to_extension_op(op, lvalues, rvalues)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>
left = array([Period('1994-04-01', '19D')], dtype=object)
right = <TimedeltaArray>
[NaT]
Length: 1, dtype: timedelta64[ns]

    def dispatch_to_extension_op(
        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,
    ):
        """
        Assume that left or right is a Series backed by an ExtensionArray,
        apply the operator defined by op.
    
        Parameters
        ----------
        op : binary operator
        left : ExtensionArray or np.ndarray
        right : object
    
        Returns
        -------
        ExtensionArray or np.ndarray
            2-tuple of these if op is divmod or rdivmod
        """
        # NB: left and right should already be unboxed, so neither should be
        #  a Series or Index.
    
        if left.dtype.kind in "mM" and isinstance(left, np.ndarray):
            # We need to cast datetime64 and timedelta64 ndarrays to
            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in
            #  PandasArray as that behaves poorly with e.g. IntegerArray.
            left = array(left)
    
        # The op calls will raise TypeError if the op is not defined
        # on the ExtensionArray
>       res_values = op(left, right)
E       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'

pandas/core/ops/dispatch.py:127: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_parr_add_sub_td64_nat[DataFrame-True]
========================= 1 failed, 7 passed in 0.55s ==========================

coverage run -m pytest pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_parr_add_sub_tdt64_nat_array
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 8 items

pandas/tests/arithmetic/test_period.py ....FF..                          [100%]

=================================== FAILURES ===================================
_ TestPeriodIndexArithmetic.test_parr_add_sub_tdt64_nat_array[DataFrame-other0] _

self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x7fd5c6306460>
box_with_array = <class 'pandas.core.frame.DataFrame'>
other = array(['NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT'],
      dtype='timedelta64[ns]')

    @pytest.mark.parametrize(
        "other",
        [
            np.array(["NaT"] * 9, dtype="m8[ns]"),
            TimedeltaArray._from_sequence(["NaT"] * 9),
        ],
    )
    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):
        pi = pd.period_range("1994-04-01", periods=9, freq="19D")
        expected = pd.PeriodIndex(["NaT"] * 9, freq="19D")
    
        obj = tm.box_expected(pi, box_with_array)
        expected = tm.box_expected(expected, box_with_array)
    
>       result = obj + other

pandas/tests/arithmetic/test_period.py:1018: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:708: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:616: in _combine_series_frame
    new_data = dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:413: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:208: in evaluate
    return _evaluate(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:396: in column_op
    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:396: in <dictcomp>
    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}
pandas/core/ops/common.py:64: in new_method
    return method(self, other)
pandas/core/ops/__init__.py:497: in wrapper
    result = arithmetic_op(lvalues, rvalues, op, str_rep)
pandas/core/ops/array_ops.py:191: in arithmetic_op
    res_values = dispatch_to_extension_op(op, lvalues, rvalues)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>
left = array([Period('1994-04-01', '19D')], dtype=object)
right = <TimedeltaArray>
[NaT]
Length: 1, dtype: timedelta64[ns]

    def dispatch_to_extension_op(
        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,
    ):
        """
        Assume that left or right is a Series backed by an ExtensionArray,
        apply the operator defined by op.
    
        Parameters
        ----------
        op : binary operator
        left : ExtensionArray or np.ndarray
        right : object
    
        Returns
        -------
        ExtensionArray or np.ndarray
            2-tuple of these if op is divmod or rdivmod
        """
        # NB: left and right should already be unboxed, so neither should be
        #  a Series or Index.
    
        if left.dtype.kind in "mM" and isinstance(left, np.ndarray):
            # We need to cast datetime64 and timedelta64 ndarrays to
            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in
            #  PandasArray as that behaves poorly with e.g. IntegerArray.
            left = array(left)
    
        # The op calls will raise TypeError if the op is not defined
        # on the ExtensionArray
>       res_values = op(left, right)
E       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'

pandas/core/ops/dispatch.py:127: TypeError
_ TestPeriodIndexArithmetic.test_parr_add_sub_tdt64_nat_array[DataFrame-other1] _

self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x7fd5c60d8490>
box_with_array = <class 'pandas.core.frame.DataFrame'>
other = <TimedeltaArray>
[NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT]
Length: 9, dtype: timedelta64[ns]

    @pytest.mark.parametrize(
        "other",
        [
            np.array(["NaT"] * 9, dtype="m8[ns]"),
            TimedeltaArray._from_sequence(["NaT"] * 9),
        ],
    )
    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):
        pi = pd.period_range("1994-04-01", periods=9, freq="19D")
        expected = pd.PeriodIndex(["NaT"] * 9, freq="19D")
    
        obj = tm.box_expected(pi, box_with_array)
        expected = tm.box_expected(expected, box_with_array)
    
>       result = obj + other

pandas/tests/arithmetic/test_period.py:1018: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:708: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:616: in _combine_series_frame
    new_data = dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:413: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:208: in evaluate
    return _evaluate(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:396: in column_op
    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:396: in <dictcomp>
    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}
pandas/core/ops/common.py:64: in new_method
    return method(self, other)
pandas/core/ops/__init__.py:497: in wrapper
    result = arithmetic_op(lvalues, rvalues, op, str_rep)
pandas/core/ops/array_ops.py:191: in arithmetic_op
    res_values = dispatch_to_extension_op(op, lvalues, rvalues)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>
left = array([Period('1994-04-01', '19D')], dtype=object)
right = <TimedeltaArray>
[NaT]
Length: 1, dtype: timedelta64[ns]

    def dispatch_to_extension_op(
        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,
    ):
        """
        Assume that left or right is a Series backed by an ExtensionArray,
        apply the operator defined by op.
    
        Parameters
        ----------
        op : binary operator
        left : ExtensionArray or np.ndarray
        right : object
    
        Returns
        -------
        ExtensionArray or np.ndarray
            2-tuple of these if op is divmod or rdivmod
        """
        # NB: left and right should already be unboxed, so neither should be
        #  a Series or Index.
    
        if left.dtype.kind in "mM" and isinstance(left, np.ndarray):
            # We need to cast datetime64 and timedelta64 ndarrays to
            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in
            #  PandasArray as that behaves poorly with e.g. IntegerArray.
            left = array(left)
    
        # The op calls will raise TypeError if the op is not defined
        # on the ExtensionArray
>       res_values = op(left, right)
E       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'

pandas/core/ops/dispatch.py:127: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_parr_add_sub_tdt64_nat_array[DataFrame-other0]
FAILED pandas/tests/arithmetic/test_period.py::TestPeriodIndexArithmetic::test_parr_add_sub_tdt64_nat_array[DataFrame-other1]
========================= 2 failed, 6 passed in 0.78s ==========================
