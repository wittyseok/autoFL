[
    {
        "name": "tornado.test.auth_test.OpenIdClientLoginHandler.initialize#20",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OpenIdClientLoginHandler",
        "signature": "tornado.test.auth_test.OpenIdClientLoginHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self._OPENID_ENDPOINT = test.get_url('/openid/server/authenticate')",
        "begin_line": 20,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OpenIdClientLoginHandler.get#24",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OpenIdClientLoginHandler",
        "signature": "tornado.test.auth_test.OpenIdClientLoginHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument('openid.mode', None):\n            self.get_authenticated_user(\n                self.on_user, http_client=self.settings['http_client'])\n            return\n        res = self.authenticate_redirect()\n        assert isinstance(res, Future)\n        assert res.done()",
        "begin_line": 24,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OpenIdClientLoginHandler.on_user#33",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OpenIdClientLoginHandler",
        "signature": "tornado.test.auth_test.OpenIdClientLoginHandler.on_user(self, user)",
        "snippet": "    def on_user(self, user):\n        if user is None:\n            raise Exception(\"user is None\")\n        self.finish(user)",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OpenIdServerAuthenticateHandler.post#40",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OpenIdServerAuthenticateHandler",
        "signature": "tornado.test.auth_test.OpenIdServerAuthenticateHandler.post(self)",
        "snippet": "    def post(self):\n        if self.get_argument('openid.mode') != 'check_authentication':\n            raise Exception(\"incorrect openid.mode %r\")\n        self.write('is_valid:true')",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientLoginHandler.initialize#47",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientLoginHandler.initialize(self, test, version)",
        "snippet": "    def initialize(self, test, version):\n        self._OAUTH_VERSION = version\n        self._OAUTH_REQUEST_TOKEN_URL = test.get_url('/oauth1/server/request_token')\n        self._OAUTH_AUTHORIZE_URL = test.get_url('/oauth1/server/authorize')\n        self._OAUTH_ACCESS_TOKEN_URL = test.get_url('/oauth1/server/access_token')",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_consumer_token#53",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_consumer_token(self)",
        "snippet": "    def _oauth_consumer_token(self):\n        return dict(key='asdf', secret='qwer')",
        "begin_line": 53,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientLoginHandler.get#57",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientLoginHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument('oauth_token', None):\n            self.get_authenticated_user(\n                self.on_user, http_client=self.settings['http_client'])\n            return\n        res = self.authorize_redirect(http_client=self.settings['http_client'])\n        assert isinstance(res, Future)",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientLoginHandler.on_user#65",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientLoginHandler.on_user(self, user)",
        "snippet": "    def on_user(self, user):\n        if user is None:\n            raise Exception(\"user is None\")\n        self.finish(user)",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_get_user#70",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientLoginHandler._oauth_get_user(self, access_token, callback)",
        "snippet": "    def _oauth_get_user(self, access_token, callback):\n        if self.get_argument('fail_in_get_user', None):\n            raise Exception(\"failing in get_user\")\n        if access_token != dict(key='uiop', secret='5678'):\n            raise Exception(\"incorrect access token %r\" % access_token)\n        callback(dict(email='foo@example.com'))",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler.get#81",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument('oauth_token', None):\n            # Ensure that any exceptions are set on the returned Future,\n            # not simply thrown into the surrounding StackContext.\n            try:\n                yield self.get_authenticated_user()\n            except Exception as e:\n                self.set_status(503)\n                self.write(\"got exception: %s\" % e)\n        else:\n            yield self.authorize_redirect()",
        "begin_line": 81,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler.initialize#95",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler.initialize(self, version)",
        "snippet": "    def initialize(self, version):\n        self._OAUTH_VERSION = version",
        "begin_line": 95,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler._oauth_consumer_token#98",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler._oauth_consumer_token(self)",
        "snippet": "    def _oauth_consumer_token(self):\n        return dict(key='asdf', secret='qwer')",
        "begin_line": 98,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler.get#101",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler",
        "signature": "tornado.test.auth_test.OAuth1ClientRequestParametersHandler.get(self)",
        "snippet": "    def get(self):\n        params = self._oauth_request_parameters(\n            'http://www.example.com/api/asdf',\n            dict(key='uiop', secret='5678'),\n            parameters=dict(foo='bar'))\n        self.write(params)",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ServerRequestTokenHandler.get#110",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ServerRequestTokenHandler",
        "signature": "tornado.test.auth_test.OAuth1ServerRequestTokenHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('oauth_token=zxcv&oauth_token_secret=1234')",
        "begin_line": 110,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth1ServerAccessTokenHandler.get#115",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth1ServerAccessTokenHandler",
        "signature": "tornado.test.auth_test.OAuth1ServerAccessTokenHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('oauth_token=uiop&oauth_token_secret=5678')",
        "begin_line": 115,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth2ClientLoginHandler.initialize#120",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth2ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth2ClientLoginHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self._OAUTH_AUTHORIZE_URL = test.get_url('/oauth2/server/authorize')",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.OAuth2ClientLoginHandler.get#123",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.OAuth2ClientLoginHandler",
        "signature": "tornado.test.auth_test.OAuth2ClientLoginHandler.get(self)",
        "snippet": "    def get(self):\n        res = self.authorize_redirect()\n        assert isinstance(res, Future)\n        assert res.done()",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.FacebookClientLoginHandler.initialize#130",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.FacebookClientLoginHandler",
        "signature": "tornado.test.auth_test.FacebookClientLoginHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self._OAUTH_AUTHORIZE_URL = test.get_url('/facebook/server/authorize')\n        self._OAUTH_ACCESS_TOKEN_URL = test.get_url('/facebook/server/access_token')\n        self._FACEBOOK_BASE_URL = test.get_url('/facebook/server')",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.FacebookClientLoginHandler.get#136",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.FacebookClientLoginHandler",
        "signature": "tornado.test.auth_test.FacebookClientLoginHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument(\"code\", None):\n            user = yield self.get_authenticated_user(\n                redirect_uri=self.request.full_url(),\n                client_id=self.settings[\"facebook_api_key\"],\n                client_secret=self.settings[\"facebook_secret\"],\n                code=self.get_argument(\"code\"))\n            self.write(user)\n        else:\n                yield self.authorize_redirect(\n                    redirect_uri=self.request.full_url(),\n                    client_id=self.settings[\"facebook_api_key\"],\n                    extra_params={\"scope\": \"read_stream,offline_access\"})",
        "begin_line": 136,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.FacebookServerAccessTokenHandler.get#152",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.FacebookServerAccessTokenHandler",
        "signature": "tornado.test.auth_test.FacebookServerAccessTokenHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('access_token=asdf')",
        "begin_line": 152,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.FacebookServerMeHandler.get#157",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.FacebookServerMeHandler",
        "signature": "tornado.test.auth_test.FacebookServerMeHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('{}')",
        "begin_line": 157,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientHandler.initialize#162",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientHandler",
        "signature": "tornado.test.auth_test.TwitterClientHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self._OAUTH_REQUEST_TOKEN_URL = test.get_url('/oauth1/server/request_token')\n        self._OAUTH_ACCESS_TOKEN_URL = test.get_url('/twitter/server/access_token')\n        self._OAUTH_AUTHORIZE_URL = test.get_url('/oauth1/server/authorize')\n        self._TWITTER_BASE_URL = test.get_url('/twitter/api')",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientHandler.get_auth_http_client#168",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientHandler",
        "signature": "tornado.test.auth_test.TwitterClientHandler.get_auth_http_client(self)",
        "snippet": "    def get_auth_http_client(self):\n        return self.settings['http_client']",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientLoginHandler.get#174",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientLoginHandler",
        "signature": "tornado.test.auth_test.TwitterClientLoginHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument(\"oauth_token\", None):\n            self.get_authenticated_user(self.on_user)\n            return\n        self.authorize_redirect()",
        "begin_line": 174,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientLoginHandler.on_user#180",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientLoginHandler",
        "signature": "tornado.test.auth_test.TwitterClientLoginHandler.on_user(self, user)",
        "snippet": "    def on_user(self, user):\n        if user is None:\n            raise Exception(\"user is None\")\n        self.finish(user)",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientLoginGenEngineHandler.get#189",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientLoginGenEngineHandler",
        "signature": "tornado.test.auth_test.TwitterClientLoginGenEngineHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument(\"oauth_token\", None):\n            user = yield self.get_authenticated_user()\n            self.finish(user)\n        else:\n            # Old style: with @gen.engine we can ignore the Future from\n            # authorize_redirect.\n            self.authorize_redirect()",
        "begin_line": 189,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler.get#201",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler",
        "signature": "tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument(\"oauth_token\", None):\n            user = yield self.get_authenticated_user()\n            self.finish(user)\n        else:\n            # New style: with @gen.coroutine the result must be yielded\n            # or else the request will be auto-finished too soon.\n            yield self.authorize_redirect()",
        "begin_line": 201,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientShowUserHandler.get#214",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientShowUserHandler",
        "signature": "tornado.test.auth_test.TwitterClientShowUserHandler.get(self)",
        "snippet": "    def get(self):\n        # TODO: would be nice to go through the login flow instead of\n        # cheating with a hard-coded access token.\n        response = yield gen.Task(self.twitter_request,\n                                  '/users/show/%s' % self.get_argument('name'),\n                                  access_token=dict(key='hjkl', secret='vbnm'))\n        if response is None:\n            self.set_status(500)\n            self.finish('error from twitter request')\n        else:\n            self.finish(response)",
        "begin_line": 214,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterClientShowUserFutureHandler.get#230",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterClientShowUserFutureHandler",
        "signature": "tornado.test.auth_test.TwitterClientShowUserFutureHandler.get(self)",
        "snippet": "    def get(self):\n        try:\n            response = yield self.twitter_request(\n                '/users/show/%s' % self.get_argument('name'),\n                access_token=dict(key='hjkl', secret='vbnm'))\n        except AuthError as e:\n            self.set_status(500)\n            self.finish(str(e))\n            return\n        assert response is not None\n        self.finish(response)",
        "begin_line": 230,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterServerAccessTokenHandler.get#244",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterServerAccessTokenHandler",
        "signature": "tornado.test.auth_test.TwitterServerAccessTokenHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('oauth_token=hjkl&oauth_token_secret=vbnm&screen_name=foo')",
        "begin_line": 244,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterServerShowUserHandler.get#249",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterServerShowUserHandler",
        "signature": "tornado.test.auth_test.TwitterServerShowUserHandler.get(self, screen_name)",
        "snippet": "    def get(self, screen_name):\n        if screen_name == 'error':\n            raise HTTPError(500)\n        assert 'oauth_nonce' in self.request.arguments\n        assert 'oauth_timestamp' in self.request.arguments\n        assert 'oauth_signature' in self.request.arguments\n        assert self.get_argument('oauth_consumer_key') == 'test_twitter_consumer_key'\n        assert self.get_argument('oauth_signature_method') == 'HMAC-SHA1'\n        assert self.get_argument('oauth_version') == '1.0'\n        assert self.get_argument('oauth_token') == 'hjkl'\n        self.write(dict(screen_name=screen_name, name=screen_name.capitalize()))",
        "begin_line": 249,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.TwitterServerVerifyCredentialsHandler.get#263",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.TwitterServerVerifyCredentialsHandler",
        "signature": "tornado.test.auth_test.TwitterServerVerifyCredentialsHandler.get(self)",
        "snippet": "    def get(self):\n        assert 'oauth_nonce' in self.request.arguments\n        assert 'oauth_timestamp' in self.request.arguments\n        assert 'oauth_signature' in self.request.arguments\n        assert self.get_argument('oauth_consumer_key') == 'test_twitter_consumer_key'\n        assert self.get_argument('oauth_signature_method') == 'HMAC-SHA1'\n        assert self.get_argument('oauth_version') == '1.0'\n        assert self.get_argument('oauth_token') == 'hjkl'\n        self.write(dict(screen_name='foo', name='Foo'))",
        "begin_line": 263,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.get_app#275",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application(\n            [\n                # test endpoints\n                ('/openid/client/login', OpenIdClientLoginHandler, dict(test=self)),\n                ('/oauth10/client/login', OAuth1ClientLoginHandler,\n                 dict(test=self, version='1.0')),\n                ('/oauth10/client/request_params',\n                 OAuth1ClientRequestParametersHandler,\n                 dict(version='1.0')),\n                ('/oauth10a/client/login', OAuth1ClientLoginHandler,\n                 dict(test=self, version='1.0a')),\n                ('/oauth10a/client/login_coroutine',\n                 OAuth1ClientLoginCoroutineHandler,\n                 dict(test=self, version='1.0a')),\n                ('/oauth10a/client/request_params',\n                 OAuth1ClientRequestParametersHandler,\n                 dict(version='1.0a')),\n                ('/oauth2/client/login', OAuth2ClientLoginHandler, dict(test=self)),\n\n                ('/facebook/client/login', FacebookClientLoginHandler, dict(test=self)),\n\n                ('/twitter/client/login', TwitterClientLoginHandler, dict(test=self)),\n                ('/twitter/client/login_gen_engine', TwitterClientLoginGenEngineHandler, dict(test=self)),\n                ('/twitter/client/login_gen_coroutine', TwitterClientLoginGenCoroutineHandler, dict(test=self)),\n                ('/twitter/client/show_user', TwitterClientShowUserHandler, dict(test=self)),\n                ('/twitter/client/show_user_future', TwitterClientShowUserFutureHandler, dict(test=self)),\n\n                # simulated servers\n                ('/openid/server/authenticate', OpenIdServerAuthenticateHandler),\n                ('/oauth1/server/request_token', OAuth1ServerRequestTokenHandler),\n                ('/oauth1/server/access_token', OAuth1ServerAccessTokenHandler),\n\n                ('/facebook/server/access_token', FacebookServerAccessTokenHandler),\n                ('/facebook/server/me', FacebookServerMeHandler),\n                ('/twitter/server/access_token', TwitterServerAccessTokenHandler),\n                (r'/twitter/api/users/show/(.*)\\.json', TwitterServerShowUserHandler),\n                (r'/twitter/api/account/verify_credentials\\.json', TwitterServerVerifyCredentialsHandler),\n            ],\n            http_client=self.http_client,\n            twitter_consumer_key='test_twitter_consumer_key',\n            twitter_consumer_secret='test_twitter_consumer_secret',\n            facebook_api_key='test_facebook_api_key',\n            facebook_secret='test_facebook_secret')",
        "begin_line": 275,
        "end_line": 318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_openid_redirect#320",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_openid_redirect(self)",
        "snippet": "    def test_openid_redirect(self):\n        response = self.fetch('/openid/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue(\n            '/openid/server/authenticate?' in response.headers['Location'])",
        "begin_line": 320,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_openid_get_user#326",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_openid_get_user(self)",
        "snippet": "    def test_openid_get_user(self):\n        response = self.fetch('/openid/client/login?openid.mode=blah&openid.ns.ax=http://openid.net/srv/ax/1.0&openid.ax.type.email=http://axschema.org/contact/email&openid.ax.value.email=foo@example.com')\n        response.rethrow()\n        parsed = json_decode(response.body)\n        self.assertEqual(parsed[\"email\"], \"foo@example.com\")",
        "begin_line": 326,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10_redirect#332",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10_redirect(self)",
        "snippet": "    def test_oauth10_redirect(self):\n        response = self.fetch('/oauth10/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue(response.headers['Location'].endswith(\n            '/oauth1/server/authorize?oauth_token=zxcv'))\n        # the cookie is base64('zxcv')|base64('1234')\n        self.assertTrue(\n            '_oauth_request_token=\"enhjdg==|MTIzNA==\"' in response.headers['Set-Cookie'],\n            response.headers['Set-Cookie'])",
        "begin_line": 332,
        "end_line": 340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10_get_user#342",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10_get_user(self)",
        "snippet": "    def test_oauth10_get_user(self):\n        response = self.fetch(\n            '/oauth10/client/login?oauth_token=zxcv',\n            headers={'Cookie': '_oauth_request_token=enhjdg==|MTIzNA=='})\n        response.rethrow()\n        parsed = json_decode(response.body)\n        self.assertEqual(parsed['email'], 'foo@example.com')\n        self.assertEqual(parsed['access_token'], dict(key='uiop', secret='5678'))",
        "begin_line": 342,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10_request_parameters#351",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10_request_parameters(self)",
        "snippet": "    def test_oauth10_request_parameters(self):\n        response = self.fetch('/oauth10/client/request_params')\n        response.rethrow()\n        parsed = json_decode(response.body)\n        self.assertEqual(parsed['oauth_consumer_key'], 'asdf')\n        self.assertEqual(parsed['oauth_token'], 'uiop')\n        self.assertTrue('oauth_nonce' in parsed)\n        self.assertTrue('oauth_signature' in parsed)",
        "begin_line": 351,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10a_redirect#360",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10a_redirect(self)",
        "snippet": "    def test_oauth10a_redirect(self):\n        response = self.fetch('/oauth10a/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue(response.headers['Location'].endswith(\n            '/oauth1/server/authorize?oauth_token=zxcv'))\n        # the cookie is base64('zxcv')|base64('1234')\n        self.assertTrue(\n            '_oauth_request_token=\"enhjdg==|MTIzNA==\"' in response.headers['Set-Cookie'],\n            response.headers['Set-Cookie'])",
        "begin_line": 360,
        "end_line": 368,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10a_get_user#370",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10a_get_user(self)",
        "snippet": "    def test_oauth10a_get_user(self):\n        response = self.fetch(\n            '/oauth10a/client/login?oauth_token=zxcv',\n            headers={'Cookie': '_oauth_request_token=enhjdg==|MTIzNA=='})\n        response.rethrow()\n        parsed = json_decode(response.body)\n        self.assertEqual(parsed['email'], 'foo@example.com')\n        self.assertEqual(parsed['access_token'], dict(key='uiop', secret='5678'))",
        "begin_line": 370,
        "end_line": 377,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10a_request_parameters#379",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10a_request_parameters(self)",
        "snippet": "    def test_oauth10a_request_parameters(self):\n        response = self.fetch('/oauth10a/client/request_params')\n        response.rethrow()\n        parsed = json_decode(response.body)\n        self.assertEqual(parsed['oauth_consumer_key'], 'asdf')\n        self.assertEqual(parsed['oauth_token'], 'uiop')\n        self.assertTrue('oauth_nonce' in parsed)\n        self.assertTrue('oauth_signature' in parsed)",
        "begin_line": 379,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth10a_get_user_coroutine_exception#388",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth10a_get_user_coroutine_exception(self)",
        "snippet": "    def test_oauth10a_get_user_coroutine_exception(self):\n        response = self.fetch(\n            '/oauth10a/client/login_coroutine?oauth_token=zxcv&fail_in_get_user=true',\n            headers={'Cookie': '_oauth_request_token=enhjdg==|MTIzNA=='})\n        self.assertEqual(response.code, 503)",
        "begin_line": 388,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_oauth2_redirect#394",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_oauth2_redirect(self)",
        "snippet": "    def test_oauth2_redirect(self):\n        response = self.fetch('/oauth2/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue('/oauth2/server/authorize?' in response.headers['Location'])",
        "begin_line": 394,
        "end_line": 397,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_facebook_login#399",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_facebook_login(self)",
        "snippet": "    def test_facebook_login(self):\n        response = self.fetch('/facebook/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue('/facebook/server/authorize?' in response.headers['Location'])\n        response = self.fetch('/facebook/client/login?code=1234', follow_redirects=False)\n        self.assertEqual(response.code, 200)",
        "begin_line": 399,
        "end_line": 404,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.base_twitter_redirect#406",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.base_twitter_redirect(self, url)",
        "snippet": "    def base_twitter_redirect(self, url):\n        # Same as test_oauth10a_redirect\n        response = self.fetch(url, follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue(response.headers['Location'].endswith(\n            '/oauth1/server/authorize?oauth_token=zxcv'))\n        # the cookie is base64('zxcv')|base64('1234')\n        self.assertTrue(\n            '_oauth_request_token=\"enhjdg==|MTIzNA==\"' in response.headers['Set-Cookie'],\n            response.headers['Set-Cookie'])",
        "begin_line": 406,
        "end_line": 415,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_redirect#417",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_redirect(self)",
        "snippet": "    def test_twitter_redirect(self):\n        self.base_twitter_redirect('/twitter/client/login')",
        "begin_line": 417,
        "end_line": 418,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_redirect_gen_engine#420",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_redirect_gen_engine(self)",
        "snippet": "    def test_twitter_redirect_gen_engine(self):\n        self.base_twitter_redirect('/twitter/client/login_gen_engine')",
        "begin_line": 420,
        "end_line": 421,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_redirect_gen_coroutine#423",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_redirect_gen_coroutine(self)",
        "snippet": "    def test_twitter_redirect_gen_coroutine(self):\n        self.base_twitter_redirect('/twitter/client/login_gen_coroutine')",
        "begin_line": 423,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_get_user#426",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_get_user(self)",
        "snippet": "    def test_twitter_get_user(self):\n        response = self.fetch(\n            '/twitter/client/login?oauth_token=zxcv',\n            headers={'Cookie': '_oauth_request_token=enhjdg==|MTIzNA=='})\n        response.rethrow()\n        parsed = json_decode(response.body)\n        self.assertEqual(parsed,\n                         {u('access_token'): {u('key'): u('hjkl'),\n                                              u('screen_name'): u('foo'),\n                                              u('secret'): u('vbnm')},\n                          u('name'): u('Foo'),\n                          u('screen_name'): u('foo'),\n                          u('username'): u('foo')})",
        "begin_line": 426,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_show_user#440",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_show_user(self)",
        "snippet": "    def test_twitter_show_user(self):\n        response = self.fetch('/twitter/client/show_user?name=somebody')\n        response.rethrow()\n        self.assertEqual(json_decode(response.body),\n                         {'name': 'Somebody', 'screen_name': 'somebody'})",
        "begin_line": 440,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_show_user_error#446",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_show_user_error(self)",
        "snippet": "    def test_twitter_show_user_error(self):\n        with ExpectLog(gen_log, 'Error response HTTP 500'):\n            response = self.fetch('/twitter/client/show_user?name=error')\n        self.assertEqual(response.code, 500)\n        self.assertEqual(response.body, b'error from twitter request')",
        "begin_line": 446,
        "end_line": 450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_show_user_future#452",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_show_user_future(self)",
        "snippet": "    def test_twitter_show_user_future(self):\n        response = self.fetch('/twitter/client/show_user_future?name=somebody')\n        response.rethrow()\n        self.assertEqual(json_decode(response.body),\n                         {'name': 'Somebody', 'screen_name': 'somebody'})",
        "begin_line": 452,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.AuthTest.test_twitter_show_user_future_error#458",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.AuthTest",
        "signature": "tornado.test.auth_test.AuthTest.test_twitter_show_user_future_error(self)",
        "snippet": "    def test_twitter_show_user_future_error(self):\n        response = self.fetch('/twitter/client/show_user_future?name=error')\n        self.assertEqual(response.code, 500)\n        self.assertIn(b'Error response HTTP 500', response.body)",
        "begin_line": 458,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleLoginHandler.initialize#465",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleLoginHandler",
        "signature": "tornado.test.auth_test.GoogleLoginHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self.test = test\n        self._OAUTH_REDIRECT_URI = test.get_url('/client/login')\n        self._OAUTH_AUTHORIZE_URL = test.get_url('/google/oauth2/authorize')\n        self._OAUTH_ACCESS_TOKEN_URL = test.get_url('/google/oauth2/token')",
        "begin_line": 465,
        "end_line": 469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleLoginHandler.get#472",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleLoginHandler",
        "signature": "tornado.test.auth_test.GoogleLoginHandler.get(self)",
        "snippet": "    def get(self):\n        code = self.get_argument('code', None)\n        if code is not None:\n            # retrieve authenticate google user\n            access = yield self.get_authenticated_user(self._OAUTH_REDIRECT_URI,\n                                                       code)\n            user = yield self.oauth2_request(\n                self.test.get_url(\"/google/oauth2/userinfo\"),\n                access_token=access[\"access_token\"])\n            # return the user and access token as json\n            user[\"access_token\"] = access[\"access_token\"]\n            self.write(user)\n        else:\n            yield self.authorize_redirect(\n                redirect_uri=self._OAUTH_REDIRECT_URI,\n                client_id=self.settings['google_oauth']['key'],\n                client_secret=self.settings['google_oauth']['secret'],\n                scope=['profile', 'email'],\n                response_type='code',\n                extra_params={'prompt': 'select_account'})",
        "begin_line": 472,
        "end_line": 491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleOAuth2AuthorizeHandler.get#495",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleOAuth2AuthorizeHandler",
        "signature": "tornado.test.auth_test.GoogleOAuth2AuthorizeHandler.get(self)",
        "snippet": "    def get(self):\n        # issue a fake auth code and redirect to redirect_uri\n        code = 'fake-authorization-code'\n        self.redirect(url_concat(self.get_argument('redirect_uri'),\n                                 dict(code=code)))",
        "begin_line": 495,
        "end_line": 499,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleOAuth2TokenHandler.post#503",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleOAuth2TokenHandler",
        "signature": "tornado.test.auth_test.GoogleOAuth2TokenHandler.post(self)",
        "snippet": "    def post(self):\n        assert self.get_argument('code') == 'fake-authorization-code'\n        # issue a fake token\n        self.finish({\n            'access_token': 'fake-access-token',\n            'expires_in': 'never-expires'\n        })",
        "begin_line": 503,
        "end_line": 509,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleOAuth2UserinfoHandler.get#513",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleOAuth2UserinfoHandler",
        "signature": "tornado.test.auth_test.GoogleOAuth2UserinfoHandler.get(self)",
        "snippet": "    def get(self):\n        assert self.get_argument('access_token') == 'fake-access-token'\n        # return a fake user\n        self.finish({\n                'name': 'Foo',\n                'email': 'foo@example.com'\n                })",
        "begin_line": 513,
        "end_line": 519,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleOAuth2Test.get_app#523",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleOAuth2Test",
        "signature": "tornado.test.auth_test.GoogleOAuth2Test.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application(\n            [\n                # test endpoints\n                ('/client/login', GoogleLoginHandler, dict(test=self)),\n\n                # simulated google authorization server endpoints\n                ('/google/oauth2/authorize', GoogleOAuth2AuthorizeHandler),\n                ('/google/oauth2/token', GoogleOAuth2TokenHandler),\n                ('/google/oauth2/userinfo', GoogleOAuth2UserinfoHandler),\n            ],\n            google_oauth={\n                \"key\": 'fake_google_client_id',\n                \"secret\": 'fake_google_client_secret'\n            })",
        "begin_line": 523,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.auth_test.GoogleOAuth2Test.test_google_login#539",
        "src_path": "tornado/test/auth_test.py",
        "class_name": "tornado.test.auth_test.GoogleOAuth2Test",
        "signature": "tornado.test.auth_test.GoogleOAuth2Test.test_google_login(self)",
        "snippet": "    def test_google_login(self):\n        response = self.fetch('/client/login')\n        self.assertDictEqual({\n            u('name'): u('Foo'),\n            u('email'): u('foo@example.com'),\n            u('access_token'): u('fake-access-token'),\n        }, json_decode(response.body))",
        "begin_line": 539,
        "end_line": 545,
        "comment": "",
        "is_bug": false
    }
]