[
    {
        "name": "lib.matplotlib.tests.test_marker.test_marker_fillstyle#10",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_marker_fillstyle()",
        "snippet": "def test_marker_fillstyle():\n    marker_style = markers.MarkerStyle(marker='o', fillstyle='none')\n    assert marker_style.get_fillstyle() == 'none'\n    assert not marker_style.is_filled()",
        "begin_line": 10,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.test_markers_valid#16",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_markers_valid()",
        "snippet": "def test_markers_valid():\n    marker_style = markers.MarkerStyle()\n    mrk_array = np.array([[-0.5, 0],\n                          [0.5, 0]])\n    # Checking this doesn't fail.\n    marker_style.set_marker(mrk_array)",
        "begin_line": 16,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.test_markers_invalid#24",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_markers_invalid()",
        "snippet": "def test_markers_invalid():\n    marker_style = markers.MarkerStyle()\n    mrk_array = np.array([[-0.5, 0, 1, 2, 3]])\n    # Checking this does fail.\n    with pytest.raises(ValueError):\n        marker_style.set_marker(mrk_array)",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.test_marker_path#32",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_marker_path()",
        "snippet": "def test_marker_path():\n    marker_style = markers.MarkerStyle()\n    path = Path([[0, 0], [1, 0]], [Path.MOVETO, Path.LINETO])\n    # Checking this doesn't fail.\n    marker_style.set_marker(path)",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.UnsnappedMarkerStyle._recache#46",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker.UnsnappedMarkerStyle",
        "signature": "lib.matplotlib.tests.test_marker.UnsnappedMarkerStyle._recache(self)",
        "snippet": "    def _recache(self):\n        super()._recache()\n        self._snap_threshold = None",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.test_poly_marker#52",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_poly_marker(fig_test, fig_ref)",
        "snippet": "def test_poly_marker(fig_test, fig_ref):\n    ax_test = fig_test.add_subplot()\n    ax_ref = fig_ref.add_subplot()\n\n    # Note, some reference sizes must be different because they have unit\n    # *length*, while polygon markers are inscribed in a circle of unit\n    # *radius*. This introduces a factor of np.sqrt(2), but since size is\n    # squared, that becomes 2.\n    size = 20**2\n\n    # Squares\n    ax_test.scatter([0], [0], marker=(4, 0, 45), s=size)\n    ax_ref.scatter([0], [0], marker='s', s=size/2)\n\n    # Diamonds, with and without rotation argument\n    ax_test.scatter([1], [1], marker=(4, 0), s=size)\n    ax_ref.scatter([1], [1], marker=UnsnappedMarkerStyle('D'), s=size/2)\n    ax_test.scatter([1], [1.5], marker=(4, 0, 0), s=size)\n    ax_ref.scatter([1], [1.5], marker=UnsnappedMarkerStyle('D'), s=size/2)\n\n    # Pentagon, with and without rotation argument\n    ax_test.scatter([2], [2], marker=(5, 0), s=size)\n    ax_ref.scatter([2], [2], marker=UnsnappedMarkerStyle('p'), s=size)\n    ax_test.scatter([2], [2.5], marker=(5, 0, 0), s=size)\n    ax_ref.scatter([2], [2.5], marker=UnsnappedMarkerStyle('p'), s=size)\n\n    # Hexagon, with and without rotation argument\n    ax_test.scatter([3], [3], marker=(6, 0), s=size)\n    ax_ref.scatter([3], [3], marker='h', s=size)\n    ax_test.scatter([3], [3.5], marker=(6, 0, 0), s=size)\n    ax_ref.scatter([3], [3.5], marker='h', s=size)\n\n    # Rotated hexagon\n    ax_test.scatter([4], [4], marker=(6, 0, 30), s=size)\n    ax_ref.scatter([4], [4], marker='H', s=size)\n\n    # Octagons\n    ax_test.scatter([5], [5], marker=(8, 0, 22.5), s=size)\n    ax_ref.scatter([5], [5], marker=UnsnappedMarkerStyle('8'), s=size)\n\n    ax_test.set(xlim=(-0.5, 5.5), ylim=(-0.5, 5.5))\n    ax_ref.set(xlim=(-0.5, 5.5), ylim=(-0.5, 5.5))",
        "begin_line": 52,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.test_star_marker#96",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_star_marker()",
        "snippet": "def test_star_marker():\n    # We don't really have a strict equivalent to this marker, so we'll just do\n    # a smoke test.\n    size = 20**2\n\n    fig, ax = plt.subplots()\n    ax.scatter([0], [0], marker=(5, 1), s=size)\n    ax.scatter([1], [1], marker=(5, 1, 0), s=size)\n    ax.set(xlim=(-0.5, 0.5), ylim=(-0.5, 1.5))",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.test_asterisk_marker#112",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.test_asterisk_marker(fig_test, fig_ref, request)",
        "snippet": "def test_asterisk_marker(fig_test, fig_ref, request):\n    ax_test = fig_test.add_subplot()\n    ax_ref = fig_ref.add_subplot()\n\n    # Note, some reference sizes must be different because they have unit\n    # *length*, while asterisk markers are inscribed in a circle of unit\n    # *radius*. This introduces a factor of np.sqrt(2), but since size is\n    # squared, that becomes 2.\n    size = 20**2\n\n    def draw_ref_marker(y, style, size):\n        # As noted above, every line is doubled. Due to antialiasing, these\n        # doubled lines make a slight difference in the .png results.\n        ax_ref.scatter([y], [y], marker=UnsnappedMarkerStyle(style), s=size)\n        if request.getfixturevalue('ext') == 'png':\n            ax_ref.scatter([y], [y], marker=UnsnappedMarkerStyle(style),\n                           s=size)\n\n    # Plus\n    ax_test.scatter([0], [0], marker=(4, 2), s=size)\n    draw_ref_marker(0, '+', size)\n    ax_test.scatter([0.5], [0.5], marker=(4, 2, 0), s=size)\n    draw_ref_marker(0.5, '+', size)\n\n    # Cross\n    ax_test.scatter([1], [1], marker=(4, 2, 45), s=size)\n    draw_ref_marker(1, 'x', size/2)\n\n    ax_test.set(xlim=(-0.5, 1.5), ylim=(-0.5, 1.5))\n    ax_ref.set(xlim=(-0.5, 1.5), ylim=(-0.5, 1.5))",
        "begin_line": 112,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_marker.draw_ref_marker#122",
        "src_path": "lib/matplotlib/tests/test_marker.py",
        "class_name": "lib.matplotlib.tests.test_marker",
        "signature": "lib.matplotlib.tests.test_marker.draw_ref_marker(y, style, size)",
        "snippet": "    def draw_ref_marker(y, style, size):\n        # As noted above, every line is doubled. Due to antialiasing, these\n        # doubled lines make a slight difference in the .png results.\n        ax_ref.scatter([y], [y], marker=UnsnappedMarkerStyle(style), s=size)\n        if request.getfixturevalue('ext') == 'png':\n            ax_ref.scatter([y], [y], marker=UnsnappedMarkerStyle(style),\n                           s=size)",
        "begin_line": 122,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    }
]