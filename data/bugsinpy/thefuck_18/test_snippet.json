[
    {
        "name": "tests.rules.test_sudo.test_match#16",
        "src_path": "tests/rules/test_sudo.py",
        "class_name": "tests.rules.test_sudo",
        "signature": "tests.rules.test_sudo.test_match(stderr, stdout)",
        "snippet": "def test_match(stderr, stdout):\n    assert match(Command(stderr=stderr, stdout=stdout))",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_sudo.test_not_match#20",
        "src_path": "tests/rules/test_sudo.py",
        "class_name": "tests.rules.test_sudo",
        "signature": "tests.rules.test_sudo.test_not_match()",
        "snippet": "def test_not_match():\n    assert not match(Command())\n    assert not match(Command(script='sudo ls', stderr='Permission denied'))",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_sudo.test_get_new_command#29",
        "src_path": "tests/rules/test_sudo.py",
        "class_name": "tests.rules.test_sudo",
        "signature": "tests.rules.test_sudo.test_get_new_command(before, after)",
        "snippet": "def test_get_new_command(before, after):\n    assert get_new_command(Command(before)) == after",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#14",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#20",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(conf.DEFAULT_SETTINGS)",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#19",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(conf.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 19,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#30",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#35",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#40",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#47",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: u' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Command",
        "signature": "tests.utils.Command.__init__(self, script='', stdout='', stderr='')",
        "snippet": "    def __init__(self, script='', stdout='', stderr=''):\n        super(Command, self).__init__(script, stdout, stderr)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#11",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 11,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#23",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    }
]