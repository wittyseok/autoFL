[
    {
        "name": "pysnooper.tracer.Tracer.__init__#99",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.__init__(self, target_code_object, write, variables=(), depth=1, prefix='')",
        "snippet": "    def __init__(self, target_code_object, write, variables=(), depth=1,\n                 prefix=''):\n        self.target_code_object = target_code_object\n        self._write = write\n        self.variables = variables\n        self.frame_to_old_local_reprs = collections.defaultdict(lambda: {})\n        self.frame_to_local_reprs = collections.defaultdict(lambda: {})\n        self.depth = depth\n        self.prefix = prefix\n        assert self.depth >= 1",
        "begin_line": 99,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.06666666666666667,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.06666666666666667,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.06666666666666667
        }
    },
    {
        "name": "pysnooper.tracer.Tracer.__enter__#116",
        "src_path": "pysnooper/tracer.py",
        "class_name": "pysnooper.tracer.Tracer",
        "signature": "pysnooper.tracer.Tracer.__enter__(self)",
        "snippet": "    def __enter__(self):\n        self.original_trace_function = sys.gettrace()\n        sys.settrace(self.trace)",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.06666666666666667,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.06666666666666667,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.06666666666666667
        }
    },
    {
        "name": "pysnooper.utils._check_methods#9",
        "src_path": "pysnooper/utils.py",
        "class_name": "pysnooper.utils",
        "signature": "pysnooper.utils._check_methods(C, *methods)",
        "snippet": "def _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True",
        "begin_line": 9,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.015625,
            "pseudo_dstar_susp": 0.015625,
            "pseudo_tarantula_susp": 0.015625,
            "pseudo_op2_susp": 0.02857142857142857,
            "pseudo_barinel_susp": 0.015625
        }
    },
    {
        "name": "pysnooper.utils.WritableStream.__subclasshook__#28",
        "src_path": "pysnooper/utils.py",
        "class_name": "pysnooper.utils.WritableStream",
        "signature": "pysnooper.utils.WritableStream.__subclasshook__(cls, C)",
        "snippet": "    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.015625,
            "pseudo_dstar_susp": 0.015625,
            "pseudo_tarantula_susp": 0.015625,
            "pseudo_op2_susp": 0.02857142857142857,
            "pseudo_barinel_susp": 0.015625
        }
    },
    {
        "name": "pysnooper.pysnooper.get_write_function#19",
        "src_path": "pysnooper/pysnooper.py",
        "class_name": "pysnooper.pysnooper",
        "signature": "pysnooper.pysnooper.get_write_function(output)",
        "snippet": "def get_write_function(output):\n    if output is None:\n        def write(s):\n            stderr = sys.stderr\n            stderr.write(s)\n    elif isinstance(output, (pycompat.PathLike, str)):\n        def write(s):\n            with open(output_path, 'a') as output_file:\n                output_file.write(s)\n    else:\n        assert isinstance(output, utils.WritableStream)\n        def write(s):\n            output.write(s)\n\n    return write",
        "begin_line": 19,
        "end_line": 33,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.3333333333333333,
            "pseudo_dstar_susp": 0.3333333333333333,
            "pseudo_tarantula_susp": 0.5,
            "pseudo_op2_susp": 0.3333333333333333,
            "pseudo_barinel_susp": 0.5
        }
    },
    {
        "name": "pysnooper.pysnooper.write#21",
        "src_path": "pysnooper/pysnooper.py",
        "class_name": "pysnooper.pysnooper",
        "signature": "pysnooper.pysnooper.write(s)",
        "snippet": "        def write(s):\n            stderr = sys.stderr\n            stderr.write(s)",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 1.0,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 1.0
        }
    },
    {
        "name": "pysnooper.pysnooper.write#25",
        "src_path": "pysnooper/pysnooper.py",
        "class_name": "pysnooper.pysnooper",
        "signature": "pysnooper.pysnooper.write(s)",
        "snippet": "        def write(s):\n            with open(output_path, 'a') as output_file:\n                output_file.write(s)",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 1.0,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 1.0
        }
    },
    {
        "name": "pysnooper.pysnooper.write#30",
        "src_path": "pysnooper/pysnooper.py",
        "class_name": "pysnooper.pysnooper",
        "signature": "pysnooper.pysnooper.write(s)",
        "snippet": "        def write(s):\n            output.write(s)",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 1.0,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 1.0
        }
    },
    {
        "name": "pysnooper.pysnooper.snoop#37",
        "src_path": "pysnooper/pysnooper.py",
        "class_name": "pysnooper.pysnooper",
        "signature": "pysnooper.pysnooper.snoop(output=None, variables=(), depth=1, prefix='')",
        "snippet": "def snoop(output=None, variables=(), depth=1, prefix=''):\n    '''\n    Snoop on the function, writing everything it's doing to stderr.\n\n    This is useful for debugging.\n\n    When you decorate a function with `@pysnooper.snoop()`, you'll get a log of\n    every line that ran in the function and a play-by-play of every local\n    variable that changed.\n\n    If stderr is not easily accessible for you, you can redirect the output to\n    a file::\n\n        @pysnooper.snoop('/my/log/file.log')\n\n    See values of some variables that aren't local variables::\n\n        @pysnooper.snoop(variables=('foo.bar', 'self.whatever'))\n\n    Show snoop lines for functions that your function calls::\n\n        @pysnooper.snoop(depth=2)\n\n    Start all snoop lines with a prefix, to grep for them easily::\n\n        @pysnooper.snoop(prefix='ZZZ ')\n\n    '''\n    write = get_write_function(output)\n    @decorator.decorator\n    def decorate(function, *args, **kwargs):\n        target_code_object = function.__code__\n        with Tracer(target_code_object=target_code_object,\n                    write=write, variables=variables,\n                    depth=depth, prefix=prefix):\n            return function(*args, **kwargs)\n\n    return decorate",
        "begin_line": 37,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.5,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.06666666666666667,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.06666666666666667
        }
    },
    {
        "name": "pysnooper.pysnooper.decorate#67",
        "src_path": "pysnooper/pysnooper.py",
        "class_name": "pysnooper.pysnooper",
        "signature": "pysnooper.pysnooper.decorate(function, *args, **kwargs)",
        "snippet": "    def decorate(function, *args, **kwargs):\n        target_code_object = function.__code__\n        with Tracer(target_code_object=target_code_object,\n                    write=write, variables=variables,\n                    depth=depth, prefix=prefix):\n            return function(*args, **kwargs)",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.06666666666666667,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.06666666666666667,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.06666666666666667
        }
    }
]