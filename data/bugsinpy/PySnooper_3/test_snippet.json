[
    {
        "name": "tests.utils.VariableEntry.__init__#23",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry.__init__(self, name=None, value=None, stage=None, name_regex=None, value_regex=None)",
        "snippet": "    def __init__(self, name=None, value=None, stage=None,\n                 name_regex=None, value_regex=None):\n        if name is not None:\n            assert name_regex is None\n        if value is not None:\n            assert value_regex is None\n        assert stage in (None, 'starting', 'new', 'modified')\n\n        self.name = name\n        self.value = value\n        self.stage = stage\n        self.name_regex = (None if name_regex is None else\n                           re.compile(name_regex))\n        self.value_regex = (None if value_regex is None else\n                            re.compile(value_regex))",
        "begin_line": 23,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_name#39",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_name(self, name)",
        "snippet": "    def _check_name(self, name):\n        if self.name is not None:\n            return name == self.name\n        elif self.name_regex is not None:\n            return self.name_regex.match(name)\n        else:\n            return True",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_value#47",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_value(self, value)",
        "snippet": "    def _check_value(self, value):\n        if self.value is not None:\n            return value == self.value\n        elif self.value_regex is not None:\n            return self.value_regex.match(value)\n        else:\n            return True",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_stage#55",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_stage(self, stage)",
        "snippet": "    def _check_stage(self, stage):\n        stage = stage.lower()\n        if self.stage is None:\n            return stage in ('starting', 'new', 'modified')\n        else:\n            return stage == self.value",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry.check#62",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry.check(self, s)",
        "snippet": "    def check(self, s):\n        match = self.line_pattern.match(s)\n        if not match:\n            return False\n        _, _, stage, name, value = match.groups()\n        return (self._check_name(name) and self._check_value(value) and\n                self._check_stage(stage))",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.__init__#72",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.__init__(self, source=None, source_regex=None)",
        "snippet": "    def __init__(self, source=None, source_regex=None):\n        if type(self) is _BaseEventEntry:\n            raise TypeError\n        if source is not None:\n            assert source_regex is None\n\n        self.source = source\n        self.source_regex = (None if source_regex is None else\n                             re.compile(source_regex))",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.event_name#89",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.event_name(self)",
        "snippet": "    def event_name(self):\n        return re.match('^[A-Z][a-z]*', type(self).__name__).group(0).lower()",
        "begin_line": 89,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry._check_source#92",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry._check_source(self, source)",
        "snippet": "    def _check_source(self, source):\n        if self.source is not None:\n            return source == self.source\n        elif self.source_regex is not None:\n            return self.source_regex.match(source)\n        else:\n            return True",
        "begin_line": 92,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.check#100",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.check(self, s)",
        "snippet": "    def check(self, s):\n        match = self.line_pattern.match(s)\n        if not match:\n            return False\n        _, _, event_name, _, source = match.groups()\n        return event_name == self.event_name and self._check_source(source)",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.assert_output#129",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.assert_output(output, expected_entries, prefix=None)",
        "snippet": "def assert_output(output, expected_entries, prefix=None):\n    lines = tuple(filter(None, output.split('\\n')))\n    if len(lines) != len(expected_entries):\n        raise OutputFailure(\n            'Output has {len(lines)} lines, while we expect '\n            '{len(expected_entries)} lines.'.format(**locals())\n        )\n    if prefix is not None:\n        for line in lines:\n            if not line.startswith(prefix):\n                raise OutputFailure(line)\n\n    for expected_entry, line in zip(expected_entries, lines):\n        if not expected_entry.check(line):\n            raise OutputFailure(line)",
        "begin_line": 129,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_string_io#18",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_string_io()",
        "snippet": "def test_string_io():\n    string_io = io.StringIO()\n    @pysnooper.snoop(string_io)\n    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x\n    result = my_function('baba')\n    assert result == 15\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('foo', value_regex=\"u?'baba'\"),\n            CallEntry(),\n            LineEntry('x = 7'),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8'),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x'),\n            ReturnEntry('return y + x'),\n        )\n    )",
        "begin_line": 18,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#21",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_variables#42",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_variables()",
        "snippet": "def test_variables():\n\n    class Foo(object):\n        def __init__(self):\n            self.x = 2\n\n        def square(self):\n            self.x **= 2\n\n    @pysnooper.snoop(variables=('foo.x', 're'))\n    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()\n\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            LineEntry('foo = Foo()'),\n            VariableEntry(),\n            VariableEntry(),\n            LineEntry(),\n            VariableEntry('i', '0'),\n            LineEntry(),\n            VariableEntry('foo.x', '4'),\n            LineEntry(),\n            VariableEntry('i', '1'),\n            LineEntry(),\n            VariableEntry('foo.x', '16'),\n            LineEntry(),\n            ReturnEntry(),\n        )\n    )",
        "begin_line": 42,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.test_variables#42",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.test_variables()",
        "snippet": "def test_variables():\n\n    class Foo(object):\n        def __init__(self):\n            self.x = 2\n\n        def square(self):\n            self.x **= 2\n\n    @pysnooper.snoop(variables=('foo.x', 're'))\n    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()\n\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            LineEntry('foo = Foo()'),\n            VariableEntry(),\n            VariableEntry(),\n            LineEntry(),\n            VariableEntry('i', '0'),\n            LineEntry(),\n            VariableEntry('foo.x', '4'),\n            LineEntry(),\n            VariableEntry('i', '1'),\n            LineEntry(),\n            VariableEntry('foo.x', '16'),\n            LineEntry(),\n            ReturnEntry(),\n        )\n    )",
        "begin_line": 42,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.__init__#45",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.__init__(self)",
        "snippet": "        def __init__(self):\n            self.x = 2",
        "begin_line": 45,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.square#48",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.square(self)",
        "snippet": "        def square(self):\n            self.x **= 2",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#52",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_depth#84",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_depth()",
        "snippet": "def test_depth():\n    string_io = io.StringIO()\n\n    def f4(x4):\n        result4 = x4 * 2\n        return result4\n\n    def f3(x3):\n        result3 = f4(x3)\n        return result3\n\n    def f2(x2):\n        result2 = f3(x2)\n        return result2\n\n    @pysnooper.snoop(string_io, depth=3)\n    def f1(x1):\n        result1 = f2(x1)\n        return result1\n\n    result = f1(10)\n    assert result == 20\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            LineEntry(),\n\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            LineEntry(),\n\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            LineEntry(),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n        )\n    )",
        "begin_line": 84,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f4#87",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f4(x4)",
        "snippet": "    def f4(x4):\n        result4 = x4 * 2\n        return result4",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f3#91",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f3(x3)",
        "snippet": "    def f3(x3):\n        result3 = f4(x3)\n        return result3",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f2#95",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f2(x2)",
        "snippet": "    def f2(x2):\n        result2 = f3(x2)\n        return result2",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f1#100",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f1(x1)",
        "snippet": "    def f1(x1):\n        result1 = f2(x1)\n        return result1",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_method_and_prefix#140",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_method_and_prefix()",
        "snippet": "def test_method_and_prefix():\n\n    class Baz(object):\n        def __init__(self):\n            self.x = 2\n\n        @pysnooper.snoop(variables=('self.x'), prefix='ZZZ')\n        def square(self):\n            foo = 7\n            self.x **= 2\n            return self\n\n    baz = Baz()\n\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        result = baz.square()\n    assert result is baz\n    assert result.x == 4\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            CallEntry(),\n            LineEntry('foo = 7'),\n            VariableEntry('foo', '7'),\n            LineEntry('self.x **= 2'),\n            LineEntry(),\n            ReturnEntry(),\n        ),\n        prefix='ZZZ'\n    )",
        "begin_line": 140,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Baz.test_method_and_prefix#140",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Baz",
        "signature": "tests.test_pysnooper.Baz.test_method_and_prefix()",
        "snippet": "def test_method_and_prefix():\n\n    class Baz(object):\n        def __init__(self):\n            self.x = 2\n\n        @pysnooper.snoop(variables=('self.x'), prefix='ZZZ')\n        def square(self):\n            foo = 7\n            self.x **= 2\n            return self\n\n    baz = Baz()\n\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        result = baz.square()\n    assert result is baz\n    assert result.x == 4\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            CallEntry(),\n            LineEntry('foo = 7'),\n            VariableEntry('foo', '7'),\n            LineEntry('self.x **= 2'),\n            LineEntry(),\n            ReturnEntry(),\n        ),\n        prefix='ZZZ'\n    )",
        "begin_line": 140,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Baz.__init__#143",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Baz",
        "signature": "tests.test_pysnooper.Baz.__init__(self)",
        "snippet": "        def __init__(self):\n            self.x = 2",
        "begin_line": 143,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Baz.square#147",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Baz",
        "signature": "tests.test_pysnooper.Baz.square(self)",
        "snippet": "        def square(self):\n            foo = 7\n            self.x **= 2\n            return self",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_file_output#174",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_file_output()",
        "snippet": "def test_file_output():\n\n    with temp_file_tools.create_temp_folder(prefix='pysnooper') as folder:\n        path = folder / 'foo.log'\n        @pysnooper.snoop(str(path))\n        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x\n        result = my_function('baba')\n        assert result == 15\n        output = path.open().read()\n        assert_output(\n            output,\n            (\n                VariableEntry('foo', value_regex=\"u?'baba'\"),\n                CallEntry(),\n                LineEntry('x = 7'),\n                VariableEntry('x', '7'),\n                LineEntry('y = 8'),\n                VariableEntry('y', '8'),\n                LineEntry('return y + x'),\n                ReturnEntry('return y + x'),\n            )\n        )",
        "begin_line": 174,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#179",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    }
]