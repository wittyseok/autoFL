coverage run -m pytest pandas/tests/reshape/merge/test_merge_asof.py::TestAsOfMerge::test_timedelta_tolerance_nearest
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/reshape/merge/test_merge_asof.py F                          [100%]

=================================== FAILURES ===================================
________________ TestAsOfMerge.test_timedelta_tolerance_nearest ________________

self = <pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge object at 0x7f3ddd6c3790>

    def test_timedelta_tolerance_nearest(self):
        # GH 27642
    
        left = pd.DataFrame(
            list(zip([0, 5, 10, 15, 20, 25], [0, 1, 2, 3, 4, 5])),
            columns=["time", "left"],
        )
    
        left["time"] = pd.to_timedelta(left["time"], "ms")
    
        right = pd.DataFrame(
            list(zip([0, 3, 9, 12, 15, 18], [0, 1, 2, 3, 4, 5])),
            columns=["time", "right"],
        )
    
        right["time"] = pd.to_timedelta(right["time"], "ms")
    
        expected = pd.DataFrame(
            list(
                zip(
                    [0, 5, 10, 15, 20, 25],
                    [0, 1, 2, 3, 4, 5],
                    [0, np.nan, 2, 4, np.nan, np.nan],
                )
            ),
            columns=["time", "left", "right"],
        )
    
        expected["time"] = pd.to_timedelta(expected["time"], "ms")
    
>       result = pd.merge_asof(
            left, right, on="time", tolerance=Timedelta("1ms"), direction="nearest"
        )

pandas/tests/reshape/merge/test_merge_asof.py:1291: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/merge.py:509: in merge_asof
    op = _AsOfMerge(
pandas/core/reshape/merge.py:1525: in __init__
    _OrderedMerge.__init__(
pandas/core/reshape/merge.py:1415: in __init__
    _MergeOperation.__init__(
pandas/core/reshape/merge.py:611: in __init__
    ) = self._get_merge_keys()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.reshape.merge._AsOfMerge object at 0x7f3ddd653c10>

    def _get_merge_keys(self):
    
        # note this function has side effects
        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()
    
        # validate index types are the same
        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):
            if not is_dtype_equal(lk.dtype, rk.dtype):
                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):
                    # The generic error message is confusing for categoricals.
                    #
                    # In this function, the join keys include both the original
                    # ones of the merge_asof() call, and also the keys passed
                    # to its by= argument. Unordered but equal categories
                    # are not supported for the former, but will fail
                    # later with a ValueError, so we don't *need* to check
                    # for them here.
                    msg = (
                        "incompatible merge keys [{i}] {lkdtype} and "
                        "{rkdtype}, both sides category, but not equal ones".format(
                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)
                        )
                    )
                else:
                    msg = (
                        "incompatible merge keys [{i}] {lkdtype} and "
                        "{rkdtype}, must be the same type".format(
                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)
                        )
                    )
                raise MergeError(msg)
    
        # validate tolerance; must be a Timedelta if we have a DTI
        if self.tolerance is not None:
    
            if self.left_index:
                lt = self.left.index
            else:
                lt = left_join_keys[-1]
    
            msg = (
                "incompatible tolerance {tolerance}, must be compat "
                "with type {lkdtype}".format(
                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)
                )
            )
    
            if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):
                if not isinstance(self.tolerance, Timedelta):
                    raise MergeError(msg)
                if self.tolerance < Timedelta(0):
                    raise MergeError("tolerance must be positive")
    
            elif is_int64_dtype(lt):
                if not is_integer(self.tolerance):
                    raise MergeError(msg)
                if self.tolerance < 0:
                    raise MergeError("tolerance must be positive")
    
            elif is_float_dtype(lt):
                if not is_number(self.tolerance):
                    raise MergeError(msg)
                if self.tolerance < 0:
                    raise MergeError("tolerance must be positive")
    
            else:
>               raise MergeError("key must be integer, timestamp or float")
E               pandas.errors.MergeError: key must be integer, timestamp or float

pandas/core/reshape/merge.py:1657: MergeError
=========================== short test summary info ============================
FAILED pandas/tests/reshape/merge/test_merge_asof.py::TestAsOfMerge::test_timedelta_tolerance_nearest
============================== 1 failed in 0.55s ===============================
