[
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut#28",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut()",
        "snippet": "def test_qcut():\n    arr = np.random.randn(1000)\n\n    # We store the bins as Index that have been\n    # rounded to comparisons are a bit tricky.\n    labels, bins = qcut(arr, 4, retbins=True)\n    ex_bins = quantile(arr, [0, 0.25, 0.5, 0.75, 1.0])\n\n    result = labels.categories.left.values\n    assert np.allclose(result, ex_bins[:-1], atol=1e-2)\n\n    result = labels.categories.right.values\n    assert np.allclose(result, ex_bins[1:], atol=1e-2)\n\n    ex_levels = cut(arr, ex_bins, include_lowest=True)\n    tm.assert_categorical_equal(labels, ex_levels)",
        "begin_line": 28,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_bounds#46",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_bounds()",
        "snippet": "def test_qcut_bounds():\n    arr = np.random.randn(1000)\n\n    factor = qcut(arr, 10, labels=False)\n    assert len(np.unique(factor)) == 10",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_specify_quantiles#53",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_specify_quantiles()",
        "snippet": "def test_qcut_specify_quantiles():\n    arr = np.random.randn(100)\n    factor = qcut(arr, [0, 0.25, 0.5, 0.75, 1.0])\n\n    expected = qcut(arr, 4)\n    tm.assert_categorical_equal(factor, expected)",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_all_bins_same#61",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_all_bins_same()",
        "snippet": "def test_qcut_all_bins_same():\n    with pytest.raises(ValueError, match=\"edges.*unique\"):\n        qcut([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 3)",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_include_lowest#66",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_include_lowest()",
        "snippet": "def test_qcut_include_lowest():\n    values = np.arange(10)\n    ii = qcut(values, 4)\n\n    ex_levels = IntervalIndex(\n        [\n            Interval(-0.001, 2.25),\n            Interval(2.25, 4.5),\n            Interval(4.5, 6.75),\n            Interval(6.75, 9),\n        ]\n    )\n    tm.assert_index_equal(ii.categories, ex_levels)",
        "begin_line": 66,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_nas#81",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_nas()",
        "snippet": "def test_qcut_nas():\n    arr = np.random.randn(100)\n    arr[:20] = np.nan\n\n    result = qcut(arr, 4)\n    assert isna(result[:20]).all()",
        "begin_line": 81,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_index#89",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_index()",
        "snippet": "def test_qcut_index():\n    result = qcut([0, 2], 2)\n    intervals = [Interval(-0.001, 1), Interval(1, 2)]\n\n    expected = Categorical(intervals, ordered=True)\n    tm.assert_categorical_equal(result, expected)",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_binning_issues#97",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_binning_issues(datapath)",
        "snippet": "def test_qcut_binning_issues(datapath):\n    # see gh-1978, gh-1979\n    cut_file = datapath(os.path.join(\"reshape\", \"data\", \"cut_data.csv\"))\n    arr = np.loadtxt(cut_file)\n    result = qcut(arr, 20)\n\n    starts = []\n    ends = []\n\n    for lev in np.unique(result):\n        s = lev.left\n        e = lev.right\n        assert s != e\n\n        starts.append(float(s))\n        ends.append(float(e))\n\n    for (sp, sn), (ep, en) in zip(\n        zip(starts[:-1], starts[1:]), zip(ends[:-1], ends[1:])\n    ):\n        assert sp < sn\n        assert ep < en\n        assert ep <= sn",
        "begin_line": 97,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_return_intervals#122",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_return_intervals()",
        "snippet": "def test_qcut_return_intervals():\n    ser = Series([0, 1, 2, 3, 4, 5, 6, 7, 8])\n    res = qcut(ser, [0, 0.333, 0.666, 1])\n\n    exp_levels = np.array(\n        [Interval(-0.001, 2.664), Interval(2.664, 5.328), Interval(5.328, 8)]\n    )\n    exp = Series(exp_levels.take([0, 0, 0, 1, 1, 1, 2, 2, 2])).astype(CDT(ordered=True))\n    tm.assert_series_equal(res, exp)",
        "begin_line": 122,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_duplicates_bin#142",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_duplicates_bin(kwargs, msg)",
        "snippet": "def test_qcut_duplicates_bin(kwargs, msg):\n    # see gh-7751\n    values = [0, 0, 0, 0, 1, 2, 3]\n\n    if msg is not None:\n        with pytest.raises(ValueError, match=msg):\n            qcut(values, 3, **kwargs)\n    else:\n        result = qcut(values, 3, **kwargs)\n        expected = IntervalIndex([Interval(-0.001, 1), Interval(1, 3)])\n        tm.assert_index_equal(result.categories, expected)",
        "begin_line": 142,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_single_quantile#160",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_single_quantile(data, start, end, length, labels)",
        "snippet": "def test_single_quantile(data, start, end, length, labels):\n    # see gh-15431\n    ser = Series([data] * length)\n    result = qcut(ser, 1, labels=labels)\n\n    if labels is None:\n        intervals = IntervalIndex([Interval(start, end)] * length, closed=\"right\")\n        expected = Series(intervals).astype(CDT(ordered=True))\n    else:\n        expected = Series([0] * length)\n\n    tm.assert_series_equal(result, expected)",
        "begin_line": 160,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_nat#182",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_nat(ser)",
        "snippet": "def test_qcut_nat(ser):\n    # see gh-19768\n    intervals = IntervalIndex.from_tuples(\n        [(ser[0] - Nano(), ser[2] - Day()), np.nan, (ser[2] - Day(), ser[2])]\n    )\n    expected = Series(Categorical(intervals, ordered=True))\n\n    result = qcut(ser, 2)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 182,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_datetime_tz_qcut#194",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_datetime_tz_qcut(bins)",
        "snippet": "def test_datetime_tz_qcut(bins):\n    # see gh-19872\n    tz = \"US/Eastern\"\n    ser = Series(date_range(\"20130101\", periods=3, tz=tz))\n\n    result = qcut(ser, bins)\n    expected = Series(\n        IntervalIndex(\n            [\n                Interval(\n                    Timestamp(\"2012-12-31 23:59:59.999999999\", tz=tz),\n                    Timestamp(\"2013-01-01 16:00:00\", tz=tz),\n                ),\n                Interval(\n                    Timestamp(\"2013-01-01 16:00:00\", tz=tz),\n                    Timestamp(\"2013-01-02 08:00:00\", tz=tz),\n                ),\n                Interval(\n                    Timestamp(\"2013-01-02 08:00:00\", tz=tz),\n                    Timestamp(\"2013-01-03 00:00:00\", tz=tz),\n                ),\n            ]\n        )\n    ).astype(CDT(ordered=True))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 194,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_date_like_qcut_bins#234",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_date_like_qcut_bins(arg, expected_bins)",
        "snippet": "def test_date_like_qcut_bins(arg, expected_bins):\n    # see gh-19891\n    ser = Series(arg)\n    result, result_bins = qcut(ser, 2, retbins=True)\n    tm.assert_index_equal(result_bins, expected_bins)",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_qcut.test_qcut_bool_coercion_to_int#250",
        "src_path": "pandas/tests/reshape/test_qcut.py",
        "class_name": "pandas.tests.reshape.test_qcut",
        "signature": "pandas.tests.reshape.test_qcut.test_qcut_bool_coercion_to_int(bins, box, compare)",
        "snippet": "def test_qcut_bool_coercion_to_int(bins, box, compare):\n    # issue 20303\n    data_expected = box([0, 1, 1, 0, 1] * 10)\n    data_result = box([False, True, True, False, True] * 10)\n    expected = qcut(data_expected, bins, duplicates=\"drop\")\n    result = qcut(data_result, bins, duplicates=\"drop\")\n    compare(result, expected)",
        "begin_line": 250,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#39",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#53",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#107",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            return type(self)(self._data[item])",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#140",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.to_decimal#180",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.to_decimal(values, context=None)",
        "snippet": "def to_decimal(values, context=None):\n    return DecimalArray([decimal.Decimal(x) for x in values], context=context)",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    }
]