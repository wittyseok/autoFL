coverage run -m pytest pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 6 items

pandas/tests/reshape/test_qcut.py FFFFFF                                 [100%]

=================================== FAILURES ===================================
_________ test_qcut_bool_coercion_to_int[Series-assert_series_equal-6] _________

bins = 6, box = <class 'pandas.core.series.Series'>
compare = <function assert_series_equal at 0x7eff0ac7c8b0>

    @pytest.mark.parametrize("bins", [6, 7])
    @pytest.mark.parametrize(
        "box, compare",
        [
            (Series, tm.assert_series_equal),
            (np.array, tm.assert_categorical_equal),
            (list, tm.assert_equal),
        ],
    )
    def test_qcut_bool_coercion_to_int(bins, box, compare):
        # issue 20303
        data_expected = box([0, 1, 1, 0, 1] * 10)
        data_result = box([False, True, True, False, True] * 10)
        expected = qcut(data_expected, bins, duplicates="drop")
>       result = qcut(data_result, bins, duplicates="drop")

pandas/tests/reshape/test_qcut.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:340: in qcut
    bins = algos.quantile(x, quantiles)
pandas/core/algorithms.py:1096: in quantile
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1096: in <listcomp>
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1079: in _get_score
    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = False, b = False, fraction = 0.16666666666666607

    def _interpolate(a, b, fraction):
        """Returns the point at the given fraction between a and b, where
        'fraction' must be between 0 and 1.
        """
>       return a + (b - a) * fraction
E       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

pandas/core/algorithms.py:1068: TypeError
_________ test_qcut_bool_coercion_to_int[Series-assert_series_equal-7] _________

bins = 7, box = <class 'pandas.core.series.Series'>
compare = <function assert_series_equal at 0x7eff0ac7c8b0>

    @pytest.mark.parametrize("bins", [6, 7])
    @pytest.mark.parametrize(
        "box, compare",
        [
            (Series, tm.assert_series_equal),
            (np.array, tm.assert_categorical_equal),
            (list, tm.assert_equal),
        ],
    )
    def test_qcut_bool_coercion_to_int(bins, box, compare):
        # issue 20303
        data_expected = box([0, 1, 1, 0, 1] * 10)
        data_result = box([False, True, True, False, True] * 10)
        expected = qcut(data_expected, bins, duplicates="drop")
>       result = qcut(data_result, bins, duplicates="drop")

pandas/tests/reshape/test_qcut.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:340: in qcut
    bins = algos.quantile(x, quantiles)
pandas/core/algorithms.py:1096: in quantile
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1096: in <listcomp>
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1079: in _get_score
    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = True, b = True, fraction = 0.9999999999999929

    def _interpolate(a, b, fraction):
        """Returns the point at the given fraction between a and b, where
        'fraction' must be between 0 and 1.
        """
>       return a + (b - a) * fraction
E       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

pandas/core/algorithms.py:1068: TypeError
_______ test_qcut_bool_coercion_to_int[array-assert_categorical_equal-6] _______

bins = 6, box = <built-in function array>
compare = <function assert_categorical_equal at 0x7eff0ac7c430>

    @pytest.mark.parametrize("bins", [6, 7])
    @pytest.mark.parametrize(
        "box, compare",
        [
            (Series, tm.assert_series_equal),
            (np.array, tm.assert_categorical_equal),
            (list, tm.assert_equal),
        ],
    )
    def test_qcut_bool_coercion_to_int(bins, box, compare):
        # issue 20303
        data_expected = box([0, 1, 1, 0, 1] * 10)
        data_result = box([False, True, True, False, True] * 10)
        expected = qcut(data_expected, bins, duplicates="drop")
>       result = qcut(data_result, bins, duplicates="drop")

pandas/tests/reshape/test_qcut.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:340: in qcut
    bins = algos.quantile(x, quantiles)
pandas/core/algorithms.py:1096: in quantile
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1096: in <listcomp>
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1079: in _get_score
    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = False, b = False, fraction = 0.16666666666666607

    def _interpolate(a, b, fraction):
        """Returns the point at the given fraction between a and b, where
        'fraction' must be between 0 and 1.
        """
>       return a + (b - a) * fraction
E       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

pandas/core/algorithms.py:1068: TypeError
_______ test_qcut_bool_coercion_to_int[array-assert_categorical_equal-7] _______

bins = 7, box = <built-in function array>
compare = <function assert_categorical_equal at 0x7eff0ac7c430>

    @pytest.mark.parametrize("bins", [6, 7])
    @pytest.mark.parametrize(
        "box, compare",
        [
            (Series, tm.assert_series_equal),
            (np.array, tm.assert_categorical_equal),
            (list, tm.assert_equal),
        ],
    )
    def test_qcut_bool_coercion_to_int(bins, box, compare):
        # issue 20303
        data_expected = box([0, 1, 1, 0, 1] * 10)
        data_result = box([False, True, True, False, True] * 10)
        expected = qcut(data_expected, bins, duplicates="drop")
>       result = qcut(data_result, bins, duplicates="drop")

pandas/tests/reshape/test_qcut.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:340: in qcut
    bins = algos.quantile(x, quantiles)
pandas/core/algorithms.py:1096: in quantile
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1096: in <listcomp>
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1079: in _get_score
    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = True, b = True, fraction = 0.9999999999999929

    def _interpolate(a, b, fraction):
        """Returns the point at the given fraction between a and b, where
        'fraction' must be between 0 and 1.
        """
>       return a + (b - a) * fraction
E       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

pandas/core/algorithms.py:1068: TypeError
_____________ test_qcut_bool_coercion_to_int[list-assert_equal-6] ______________

bins = 6, box = <class 'list'>
compare = <function assert_equal at 0x7eff0ac7c9d0>

    @pytest.mark.parametrize("bins", [6, 7])
    @pytest.mark.parametrize(
        "box, compare",
        [
            (Series, tm.assert_series_equal),
            (np.array, tm.assert_categorical_equal),
            (list, tm.assert_equal),
        ],
    )
    def test_qcut_bool_coercion_to_int(bins, box, compare):
        # issue 20303
        data_expected = box([0, 1, 1, 0, 1] * 10)
        data_result = box([False, True, True, False, True] * 10)
        expected = qcut(data_expected, bins, duplicates="drop")
>       result = qcut(data_result, bins, duplicates="drop")

pandas/tests/reshape/test_qcut.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:340: in qcut
    bins = algos.quantile(x, quantiles)
pandas/core/algorithms.py:1096: in quantile
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1096: in <listcomp>
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1079: in _get_score
    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = False, b = False, fraction = 0.16666666666666607

    def _interpolate(a, b, fraction):
        """Returns the point at the given fraction between a and b, where
        'fraction' must be between 0 and 1.
        """
>       return a + (b - a) * fraction
E       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

pandas/core/algorithms.py:1068: TypeError
_____________ test_qcut_bool_coercion_to_int[list-assert_equal-7] ______________

bins = 7, box = <class 'list'>
compare = <function assert_equal at 0x7eff0ac7c9d0>

    @pytest.mark.parametrize("bins", [6, 7])
    @pytest.mark.parametrize(
        "box, compare",
        [
            (Series, tm.assert_series_equal),
            (np.array, tm.assert_categorical_equal),
            (list, tm.assert_equal),
        ],
    )
    def test_qcut_bool_coercion_to_int(bins, box, compare):
        # issue 20303
        data_expected = box([0, 1, 1, 0, 1] * 10)
        data_result = box([False, True, True, False, True] * 10)
        expected = qcut(data_expected, bins, duplicates="drop")
>       result = qcut(data_result, bins, duplicates="drop")

pandas/tests/reshape/test_qcut.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:340: in qcut
    bins = algos.quantile(x, quantiles)
pandas/core/algorithms.py:1096: in quantile
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1096: in <listcomp>
    result = [_get_score(x) for x in q]
pandas/core/algorithms.py:1079: in _get_score
    score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = True, b = True, fraction = 0.9999999999999929

    def _interpolate(a, b, fraction):
        """Returns the point at the given fraction between a and b, where
        'fraction' must be between 0 and 1.
        """
>       return a + (b - a) * fraction
E       TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

pandas/core/algorithms.py:1068: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int[Series-assert_series_equal-6]
FAILED pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int[Series-assert_series_equal-7]
FAILED pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int[array-assert_categorical_equal-6]
FAILED pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int[array-assert_categorical_equal-7]
FAILED pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int[list-assert_equal-6]
FAILED pandas/tests/reshape/test_qcut.py::test_qcut_bool_coercion_to_int[list-assert_equal-7]
============================== 6 failed in 1.40s ===============================
