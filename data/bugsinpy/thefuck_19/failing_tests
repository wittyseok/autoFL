coverage run -m pytest tests/rules/test_git_push_force.py::test_get_new_command
============================= test session starts ==============================
platform linux -- Python 3.7.0, pytest-3.10.1, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/thefuck, inifile:
plugins: benchmark-3.2.3, mock-3.1.0, docker-pexpect-0.9
collected 3 items

tests/rules/test_git_push_force.py FFF                                   [100%]

=================================== FAILURES ===================================
__________ test_get_new_command[command0-git push --force-with-lease] __________

command = Command(script=git push, stdout=, stderr=
To /tmp/foo
 ! [rejected]        master -> master (non-fast-forward)
 error:...nt: 'git pull ...') before pushing again.
 hint: See the 'Note about fast-forwards' in 'git push --help' for details.
)
output = 'git push --force-with-lease'

    @pytest.mark.parametrize('command, output', [
        (Command(script='git push', stderr=git_err), 'git push --force-with-lease'),
        (Command(script='git push nvbn', stderr=git_err), 'git push --force-with-lease nvbn'),
        (Command(script='git push nvbn master', stderr=git_err), 'git push --force-with-lease nvbn master')])
    def test_get_new_command(command, output):
>       assert get_new_command(command) == output
E       AssertionError: assert 'git push --force' == 'git push --force-with-lease'
E         - git push --force
E         + git push --force-with-lease

tests/rules/test_git_push_force.py:52: AssertionError
_______ test_get_new_command[command1-git push --force-with-lease nvbn] ________

command = Command(script=git push nvbn, stdout=, stderr=
To /tmp/foo
 ! [rejected]        master -> master (non-fast-forward)
 e...nt: 'git pull ...') before pushing again.
 hint: See the 'Note about fast-forwards' in 'git push --help' for details.
)
output = 'git push --force-with-lease nvbn'

    @pytest.mark.parametrize('command, output', [
        (Command(script='git push', stderr=git_err), 'git push --force-with-lease'),
        (Command(script='git push nvbn', stderr=git_err), 'git push --force-with-lease nvbn'),
        (Command(script='git push nvbn master', stderr=git_err), 'git push --force-with-lease nvbn master')])
    def test_get_new_command(command, output):
>       assert get_new_command(command) == output
E       AssertionError: assert 'git push --force nvbn' == 'git push --force-with-lease nvbn'
E         - git push --force nvbn
E         + git push --force-with-lease nvbn
E         ?                 +++++++++++

tests/rules/test_git_push_force.py:52: AssertionError
____ test_get_new_command[command2-git push --force-with-lease nvbn master] ____

command = Command(script=git push nvbn master, stdout=, stderr=
To /tmp/foo
 ! [rejected]        master -> master (non-fast-forw...nt: 'git pull ...') before pushing again.
 hint: See the 'Note about fast-forwards' in 'git push --help' for details.
)
output = 'git push --force-with-lease nvbn master'

    @pytest.mark.parametrize('command, output', [
        (Command(script='git push', stderr=git_err), 'git push --force-with-lease'),
        (Command(script='git push nvbn', stderr=git_err), 'git push --force-with-lease nvbn'),
        (Command(script='git push nvbn master', stderr=git_err), 'git push --force-with-lease nvbn master')])
    def test_get_new_command(command, output):
>       assert get_new_command(command) == output
E       AssertionError: assert 'git push --force nvbn master' == 'git push --fo...e nvbn master'
E         - git push --force nvbn master
E         + git push --force-with-lease nvbn master
E         ?                 +++++++++++

tests/rules/test_git_push_force.py:52: AssertionError
=========================== 3 failed in 0.10 seconds ===========================
