[
    {
        "name": "tests.tests.http#19",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests",
        "signature": "tests.tests.http(*args, **kwargs)",
        "snippet": "def http(*args, **kwargs):\n    http_kwargs = {\n        'stdin_isatty': True,\n        'stdout_isatty': False\n    }\n    http_kwargs.update(kwargs)\n    stdout = http_kwargs.setdefault('stdout', StringIO())\n    __main__.main(args=args, **http_kwargs)\n    return stdout.getvalue()",
        "begin_line": 19,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestItemParsing.setUp#46",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestItemParsing",
        "signature": "tests.tests.TestItemParsing.setUp(self)",
        "snippet": "    def setUp(self):\n        self.kv = cli.KeyValueType(\n            cli.SEP_HEADERS,\n            cli.SEP_DATA,\n            cli.SEP_DATA_RAW_JSON,\n            cli.SEP_FILES,\n        )",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestItemParsing.test_invalid_items#54",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestItemParsing",
        "signature": "tests.tests.TestItemParsing.test_invalid_items(self)",
        "snippet": "    def test_invalid_items(self):\n        items = ['no-separator']\n        for item in items:\n            self.assertRaises(argparse.ArgumentTypeError,\n                              lambda: self.kv(item))",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestItemParsing.test_escape#60",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestItemParsing",
        "signature": "tests.tests.TestItemParsing.test_escape(self)",
        "snippet": "    def test_escape(self):\n        headers, data, files = cli.parse_items([\n            # headers\n            self.kv('foo\\\\:bar:baz'),\n            self.kv('jack\\\\@jill:hill'),\n            # data\n            self.kv('baz\\\\=bar=foo'),\n            # files\n            self.kv('bar\\\\@baz@%s' % TEST_FILE)\n        ])\n        self.assertDictEqual(headers, {\n            'foo:bar': 'baz',\n            'jack@jill': 'hill',\n        })\n        self.assertDictEqual(data, {\n            'baz=bar': 'foo',\n        })\n        self.assertIn('bar@baz', files)",
        "begin_line": 60,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestItemParsing.test_escape_longsep#79",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestItemParsing",
        "signature": "tests.tests.TestItemParsing.test_escape_longsep(self)",
        "snippet": "    def test_escape_longsep(self):\n        headers, data, files = cli.parse_items([\n            self.kv('bob\\\\:==foo'),\n        ])\n        self.assertDictEqual(data, {\n            'bob:=': 'foo',\n        })",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestItemParsing.test_valid_items#87",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestItemParsing",
        "signature": "tests.tests.TestItemParsing.test_valid_items(self)",
        "snippet": "    def test_valid_items(self):\n        headers, data, files = cli.parse_items([\n            self.kv('string=value'),\n            self.kv('header:value'),\n            self.kv('list:=[\"a\", 1, {}, false]'),\n            self.kv('obj:={\"a\": \"b\"}'),\n            self.kv('eh:'),\n            self.kv('ed='),\n            self.kv('bool:=true'),\n            self.kv('test-file@%s' % TEST_FILE),\n        ])\n        self.assertDictEqual(headers, {\n            'header': 'value',\n            'eh': ''\n        })\n        self.assertDictEqual(data, {\n            \"ed\": \"\",\n            \"string\": \"value\",\n            \"bool\": True,\n            \"list\": [\"a\", 1, {}, False],\n            \"obj\": {\"a\": \"b\"}\n        })\n        self.assertIn('test-file', files)",
        "begin_line": 87,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestHTTPie.test_get#114",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestHTTPie",
        "signature": "tests.tests.TestHTTPie.test_get(self)",
        "snippet": "    def test_get(self):\n        http('GET', 'http://httpbin.org/get')",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestHTTPie.test_verbose#117",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestHTTPie",
        "signature": "tests.tests.TestHTTPie.test_verbose(self)",
        "snippet": "    def test_verbose(self):\n        r = http('--verbose', 'GET', 'http://httpbin.org/get', 'test-header:__test__')\n        self.assertEqual(r.count('__test__'), 2)",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestHTTPie.test_json#121",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestHTTPie",
        "signature": "tests.tests.TestHTTPie.test_json(self)",
        "snippet": "    def test_json(self):\n        response = http('POST', 'http://httpbin.org/post', 'foo=bar')\n        self.assertIn('\"foo\": \"bar\"', response)\n        response2 = http('-j', 'GET', 'http://httpbin.org/headers')\n        self.assertIn('\"Accept\": \"application/json\"', response2)\n        response3 = http('-j', 'GET', 'http://httpbin.org/headers', 'Accept:application/xml')\n        self.assertIn('\"Accept\": \"application/xml\"', response3)",
        "begin_line": 121,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestHTTPie.test_form#129",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestHTTPie",
        "signature": "tests.tests.TestHTTPie.test_form(self)",
        "snippet": "    def test_form(self):\n        response = http('--form', 'POST', 'http://httpbin.org/post', 'foo=bar')\n        self.assertIn('\"foo\": \"bar\"', response)",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestHTTPie.test_headers#133",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestHTTPie",
        "signature": "tests.tests.TestHTTPie.test_headers(self)",
        "snippet": "    def test_headers(self):\n        response = http('GET', 'http://httpbin.org/headers', 'Foo:bar')\n        self.assertIn('\"User-Agent\": \"HTTPie', response)\n        self.assertIn('\"Foo\": \"bar\"', response)",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestPrettyFlag.test_pretty_enabled_by_default#142",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestPrettyFlag",
        "signature": "tests.tests.TestPrettyFlag.test_pretty_enabled_by_default(self)",
        "snippet": "    def test_pretty_enabled_by_default(self):\n        r = http('GET', 'http://httpbin.org/get', stdout_isatty=True)\n        self.assertIn(TERMINAL_COLOR_PRESENCE_CHECK, r)",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestPrettyFlag.test_pretty_enabled_by_default_unless_stdin_redirected#146",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestPrettyFlag",
        "signature": "tests.tests.TestPrettyFlag.test_pretty_enabled_by_default_unless_stdin_redirected(self)",
        "snippet": "    def test_pretty_enabled_by_default_unless_stdin_redirected(self):\n        r = http('GET', 'http://httpbin.org/get', stdout_isatty=False)\n        self.assertNotIn(TERMINAL_COLOR_PRESENCE_CHECK, r)",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestPrettyFlag.test_force_pretty#150",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestPrettyFlag",
        "signature": "tests.tests.TestPrettyFlag.test_force_pretty(self)",
        "snippet": "    def test_force_pretty(self):\n        r = http('--pretty', 'GET', 'http://httpbin.org/get', stdout_isatty=False)\n        self.assertIn(TERMINAL_COLOR_PRESENCE_CHECK, r)",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestPrettyFlag.test_force_ugly#154",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestPrettyFlag",
        "signature": "tests.tests.TestPrettyFlag.test_force_ugly(self)",
        "snippet": "    def test_force_ugly(self):\n        r = http('--ugly', 'GET', 'http://httpbin.org/get', stdout_isatty=True)\n        self.assertNotIn(TERMINAL_COLOR_PRESENCE_CHECK, r)",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestFileUpload.test_non_existent_file_raises_parse_error#161",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestFileUpload",
        "signature": "tests.tests.TestFileUpload.test_non_existent_file_raises_parse_error(self)",
        "snippet": "    def test_non_existent_file_raises_parse_error(self):\n        self.assertRaises(cli.ParseError, http,\n            '--form', '--traceback',\n            'POST', 'http://httpbin.org/post',\n            'foo@/__does_not_exist__')",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestFileUpload.test_upload_ok#167",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestFileUpload",
        "signature": "tests.tests.TestFileUpload.test_upload_ok(self)",
        "snippet": "    def test_upload_ok(self):\n        r = http('--form', 'POST', 'http://httpbin.org/post',\n             'test-file@%s' % TEST_FILE)\n        self.assertIn('\"test-file\": \"__test_file_content__', r)",
        "begin_line": 167,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestAuth.test_basic_auth#175",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestAuth",
        "signature": "tests.tests.TestAuth.test_basic_auth(self)",
        "snippet": "    def test_basic_auth(self):\n        r = http('--auth', 'user:password',\n                 'GET', 'httpbin.org/basic-auth/user/password')\n        self.assertIn('\"authenticated\": true', r)\n        self.assertIn('\"user\": \"user\"', r)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.tests.TestAuth.test_digest_auth#181",
        "src_path": "tests/tests.py",
        "class_name": "tests.tests.TestAuth",
        "signature": "tests.tests.TestAuth.test_digest_auth(self)",
        "snippet": "    def test_digest_auth(self):\n        r = http('--auth-type=digest', '--auth', 'user:password',\n                 'GET', 'httpbin.org/digest-auth/auth/user/password')\n        self.assertIn('\"authenticated\": true', r)\n        self.assertIn('\"user\": \"user\"', r)",
        "begin_line": 181,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    }
]