[
    {
        "name": "httpie.cli.KeyValueType.__init__#37",
        "src_path": "httpie/cli.py",
        "class_name": "httpie.cli.KeyValueType",
        "signature": "httpie.cli.KeyValueType.__init__(self, *separators)",
        "snippet": "    def __init__(self, *separators):\n        self.separators = separators",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.018518518518518517,
            "pseudo_dstar_susp": 0.017543859649122806,
            "pseudo_tarantula_susp": 0.03333333333333333,
            "pseudo_op2_susp": 0.017543859649122806,
            "pseudo_barinel_susp": 0.03333333333333333
        }
    },
    {
        "name": "httpie.cli.KeyValueType.__call__#40",
        "src_path": "httpie/cli.py",
        "class_name": "httpie.cli.KeyValueType",
        "signature": "httpie.cli.KeyValueType.__call__(self, string)",
        "snippet": "    def __call__(self, string):\n        found = {}\n        for sep in self.separators:\n            regex = '[^\\\\\\\\]' + sep\n            match = re.search(regex, string)\n            if match:\n                found[match.start() + 1] = sep\n\n        if not found:\n            #noinspection PyExceptionInherit\n            raise argparse.ArgumentTypeError(\n                '\"%s\" is not a valid value' % string)\n\n        # split the string at the earliest non-escaped separator.\n        seploc = min(found.keys())\n        sep = found[seploc]\n        key = string[:seploc]\n        value = string[seploc + len(sep):]\n\n        # remove escape chars\n        for sepstr in self.separators:\n            key = key.replace('\\\\' + sepstr, sepstr)\n            value = value.replace('\\\\' + sepstr, sepstr)\n        return KeyValue(key=key, value=value, sep=sep, orig=string)",
        "begin_line": 40,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.03125,
            "pseudo_dstar_susp": 0.09090909090909091,
            "pseudo_tarantula_susp": 0.02127659574468085,
            "pseudo_op2_susp": 0.09090909090909091,
            "pseudo_barinel_susp": 0.02127659574468085
        }
    },
    {
        "name": "httpie.cli.parse_items#66",
        "src_path": "httpie/cli.py",
        "class_name": "httpie.cli",
        "signature": "httpie.cli.parse_items(items, data=None, headers=None, files=None)",
        "snippet": "def parse_items(items, data=None, headers=None, files=None):\n    \"\"\"Parse `KeyValueType` `items` into `data`, `headers` and `files`.\"\"\"\n    if headers is None:\n        headers = {}\n    if data is None:\n        data = {}\n    if files is None:\n        files = {}\n    for item in items:\n        value = item.value\n        key = item.key\n        if item.sep == SEP_HEADERS:\n            target = headers\n        elif item.sep == SEP_FILES:\n            try:\n                value = open(os.path.expanduser(item.value), 'r')\n            except IOError as e:\n                raise ParseError(\n                    'Invalid argument %r. %s' % (item.orig, e))\n            if not key:\n                key = os.path.basename(value.name)\n            target = files\n        elif item.sep in [SEP_DATA, SEP_DATA_RAW_JSON]:\n            if item.sep == SEP_DATA_RAW_JSON:\n                try:\n                    value = json.loads(item.value)\n                except ValueError:\n                    raise ParseError('%s is not valid JSON' % item.orig)\n            target = data\n        else:\n            raise ParseError('%s is not valid item' % item.orig)\n\n        if key in target:\n            ParseError('duplicate item %s (%s)' % (item.key, item.orig))\n\n        target[key] = value\n\n    return headers, data, files",
        "begin_line": 66,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.043478260869565216,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.041666666666666664,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.041666666666666664
        }
    },
    {
        "name": "httpie.cli.HTTPieArgumentParser.parse_args#112",
        "src_path": "httpie/cli.py",
        "class_name": "httpie.cli.HTTPieArgumentParser",
        "signature": "httpie.cli.HTTPieArgumentParser.parse_args(self, args=None, namespace=None)",
        "snippet": "    def parse_args(self, args=None, namespace=None):\n        args = super(HTTPieArgumentParser, self).parse_args(args, namespace)\n        self._validate_output_options(args)\n        self._validate_auth_options(args)\n        return args",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009615384615384616,
            "pseudo_dstar_susp": 0.009615384615384616,
            "pseudo_tarantula_susp": 0.009615384615384616,
            "pseudo_op2_susp": 0.009615384615384616,
            "pseudo_barinel_susp": 0.009615384615384616
        }
    },
    {
        "name": "httpie.cli.HTTPieArgumentParser._validate_output_options#118",
        "src_path": "httpie/cli.py",
        "class_name": "httpie.cli.HTTPieArgumentParser",
        "signature": "httpie.cli.HTTPieArgumentParser._validate_output_options(self, args)",
        "snippet": "    def _validate_output_options(self, args):\n        unknown_output_options = set(args.output_options) - set(OUTPUT_OPTIONS)\n        if unknown_output_options:\n            self.error('Unknown output options: %s' % ','.join(unknown_output_options))",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009615384615384616,
            "pseudo_dstar_susp": 0.009615384615384616,
            "pseudo_tarantula_susp": 0.009615384615384616,
            "pseudo_op2_susp": 0.009615384615384616,
            "pseudo_barinel_susp": 0.009615384615384616
        }
    },
    {
        "name": "httpie.cli.HTTPieArgumentParser._validate_auth_options#123",
        "src_path": "httpie/cli.py",
        "class_name": "httpie.cli.HTTPieArgumentParser",
        "signature": "httpie.cli.HTTPieArgumentParser._validate_auth_options(self, args)",
        "snippet": "    def _validate_auth_options(self, args):\n        if args.auth_type and not args.auth:\n            self.error('--auth-type can only be used with --auth')",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009615384615384616,
            "pseudo_dstar_susp": 0.009615384615384616,
            "pseudo_tarantula_susp": 0.009615384615384616,
            "pseudo_op2_susp": 0.009615384615384616,
            "pseudo_barinel_susp": 0.009615384615384616
        }
    },
    {
        "name": "httpie.pretty.PrettyHttp.__init__#42",
        "src_path": "httpie/pretty.py",
        "class_name": "httpie.pretty.PrettyHttp",
        "signature": "httpie.pretty.PrettyHttp.__init__(self, style_name)",
        "snippet": "    def __init__(self, style_name):\n        if style_name == 'solarized':\n            style = solarized.SolarizedStyle\n        else:\n            style = get_style_by_name(style_name)\n        self.formatter = FORMATTER(style=style)",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004975124378109453,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.004347826086956522,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "httpie.pretty.PrettyHttp.headers#49",
        "src_path": "httpie/pretty.py",
        "class_name": "httpie.pretty.PrettyHttp",
        "signature": "httpie.pretty.PrettyHttp.headers(self, content)",
        "snippet": "    def headers(self, content):\n        return pygments.highlight(content, HTTPLexer(), self.formatter)",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004975124378109453,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.004347826086956522,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "httpie.pretty.PrettyHttp.body#52",
        "src_path": "httpie/pretty.py",
        "class_name": "httpie.pretty.PrettyHttp",
        "signature": "httpie.pretty.PrettyHttp.body(self, content, content_type)",
        "snippet": "    def body(self, content, content_type):\n        lexer = None\n        content_type = content_type.split(';')[0]\n        if 'json' in content_type:\n            lexer = JSONLexer()\n            try:\n                # Indent the JSON data.\n                content = json.dumps(json.loads(content),\n                                    sort_keys=True, indent=4)\n            except Exception:\n                pass\n        if not lexer:\n            try:\n                lexer = get_lexer_for_mimetype(content_type)\n            except ClassNotFound:\n                return content\n        return pygments.highlight(content, lexer, self.formatter)",
        "begin_line": 52,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004975124378109453,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.004347826086956522,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "httpie.__main__.HTTPMessage.__init__#24",
        "src_path": "httpie/__main__.py",
        "class_name": "httpie.__main__.HTTPMessage",
        "signature": "httpie.__main__.HTTPMessage.__init__(self, line, headers, body, content_type=None)",
        "snippet": "    def __init__(self, line, headers, body, content_type=None):\n        # {Request,Status}-Line\n        self.line = line\n        self.headers = headers\n        self.body = body\n        self.content_type = content_type",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004975124378109453,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.0037735849056603774,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "httpie.__main__.format_http_message#32",
        "src_path": "httpie/__main__.py",
        "class_name": "httpie.__main__",
        "signature": "httpie.__main__.format_http_message(message, prettifier=None, with_headers=True, with_body=True)",
        "snippet": "def format_http_message(message, prettifier=None,\n                        with_headers=True, with_body=True):\n    bits = []\n    if with_headers:\n        if prettifier:\n            bits.append(prettifier.headers(message.line))\n            bits.append(prettifier.headers(message.headers))\n        else:\n            bits.append(message.line)\n            bits.append(message.headers)\n        if with_body and message.body:\n            bits.append(NEW_LINE)\n    if with_body and message.body:\n        if prettifier and message.content_type:\n            bits.append(prettifier.body(message.body, message.content_type))\n        else:\n            bits.append(message.body)\n    bits.append(NEW_LINE)\n    return NEW_LINE.join(bit.strip() for bit in bits)",
        "begin_line": 32,
        "end_line": 50,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004975124378109453,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.004347826086956522,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "httpie.__main__.make_request_message#53",
        "src_path": "httpie/__main__.py",
        "class_name": "httpie.__main__",
        "signature": "httpie.__main__.make_request_message(request)",
        "snippet": "def make_request_message(request):\n    \"\"\"Make an `HTTPMessage` from `requests.models.Request`.\"\"\"\n    url = urlparse(request.url)\n    request_headers = dict(request.headers)\n    if 'Host' not in request_headers:\n        request_headers['Host'] = url.netloc\n    return HTTPMessage(\n        line='{method} {path} HTTP/1.1'.format(\n                method=request.method,\n                path=url.path or '/'),\n        headers=NEW_LINE.join(str('%s: %s') % (name, value)\n                          for name, value\n                          in request_headers.items()),\n        body=request._enc_data,\n        content_type=request_headers.get('Content-Type')\n    )",
        "begin_line": 53,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "httpie.__main__.make_response_message#71",
        "src_path": "httpie/__main__.py",
        "class_name": "httpie.__main__",
        "signature": "httpie.__main__.make_response_message(response)",
        "snippet": "def make_response_message(response):\n    \"\"\"Make an `HTTPMessage` from `requests.models.Response`.\"\"\"\n    encoding = response.encoding or 'ISO-8859-1'\n    original = response.raw._original_response\n    response_headers = response.headers\n    return HTTPMessage(\n        line='HTTP/{version} {status} {reason}'.format(\n                version='.'.join(str(original.version)),\n                status=original.status, reason=original.reason,),\n        headers=str(original.msg),\n        body=response.content.decode(encoding) if response.content else '',\n        content_type=response_headers.get('Content-Type'))",
        "begin_line": 71,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004975124378109453,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.0037735849056603774,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "httpie.__main__.main#85",
        "src_path": "httpie/__main__.py",
        "class_name": "httpie.__main__",
        "signature": "httpie.__main__.main(args=None, stdin=sys.stdin, stdin_isatty=sys.stdin.isatty(), stdout=sys.stdout, stdout_isatty=sys.stdout.isatty())",
        "snippet": "def main(args=None,\n         stdin=sys.stdin,\n         stdin_isatty=sys.stdin.isatty(),\n         stdout=sys.stdout,\n         stdout_isatty=sys.stdout.isatty()):\n\n    parser = cli.parser\n\n    args = parser.parse_args(args if args is not None else sys.argv[1:])\n    do_prettify = (args.prettify is True or\n                   (args.prettify == cli.PRETTIFY_STDOUT_TTY_ONLY\n                    and stdout_isatty))\n\n    # Parse request headers and data from the command line.\n    headers = CaseInsensitiveDict()\n    headers['User-Agent'] = DEFAULT_UA\n    data = OrderedDict()\n    files = OrderedDict()\n    try:\n        cli.parse_items(items=args.items, headers=headers,\n                        data=data, files=files)\n    except cli.ParseError as e:\n        if args.traceback:\n            raise\n        parser.error(e.message)\n\n    if files and not args.form:\n        # We could just switch to --form automatically here,\n        # but I think it's better to make it explicit.\n        parser.error(\n            ' You need to set the --form / -f flag to'\n            ' to issue a multipart request. File fields: %s'\n            % ','.join(files.keys()))\n\n    if not stdin_isatty:\n        if data:\n            parser.error('Request body (stdin) and request '\n                                'data (key=value) cannot be mixed.')\n        data = stdin.read()\n\n    # JSON/Form content type.\n    if args.json or (not args.form and data):\n        if args.method.lower() == 'get' and 'Accept' not in headers:\n            headers['Accept'] = 'application/json'\n        if stdin_isatty:\n            data = json.dumps(data)\n        if not files and ('Content-Type' not in headers and (data or args.json)):\n            headers['Content-Type'] = TYPE_JSON\n    elif not files and 'Content-Type' not in headers:\n        headers['Content-Type'] = TYPE_FORM\n\n    # Fire the request.\n    try:\n        credentials = None\n        if args.auth:\n            auth_type = (requests.auth.HTTPDigestAuth\n                         if args.auth_type == 'digest'\n                         else requests.auth.HTTPBasicAuth)\n            credentials = auth_type(args.auth.key, args.auth.value)\n\n        response = requests.request(\n            method=args.method.lower(),\n            url=args.url if '://' in args.url else 'http://%s' % args.url,\n            headers=headers,\n            data=data,\n            verify={'yes': True, 'no': False}.get(args.verify, args.verify),\n            timeout=args.timeout,\n            auth=credentials,\n            proxies=dict((p.key, p.value) for p in args.proxy),\n            files=files,\n            allow_redirects=args.allow_redirects,\n        )\n    except (KeyboardInterrupt, SystemExit):\n        sys.stderr.write(NEW_LINE)\n        sys.exit(1)\n    except Exception as e:\n        if args.traceback:\n            raise\n        sys.stderr.write(str(e.message) + NEW_LINE)\n        sys.exit(1)\n\n    prettifier = pretty.PrettyHttp(args.style) if do_prettify else None\n\n    output_request = (cli.OUT_REQUEST_HEADERS in args.output_options\n                      or cli.OUT_REQUEST_BODY in args.output_options)\n\n    output_response = (cli.OUT_RESPONSE_HEADERS in args.output_options\n                      or cli.OUT_RESPONSE_BODY in args.output_options)\n\n    if output_request:\n        stdout.write(format_http_message(\n            message=make_request_message(response.request),\n            prettifier=prettifier,\n            with_headers=cli.OUT_REQUEST_HEADERS in args.output_options,\n            with_body=cli.OUT_REQUEST_BODY in args.output_options\n        ))\n        if output_response:\n            stdout.write(NEW_LINE)\n\n    if output_response:\n        stdout.write(format_http_message(\n            message=make_response_message(response),\n            prettifier=prettifier,\n            with_headers=cli.OUT_RESPONSE_HEADERS in args.output_options,\n            with_body=cli.OUT_RESPONSE_BODY in args.output_options\n        ))\n        stdout.write(NEW_LINE)",
        "begin_line": 85,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.08333333333333333,
            "pseudo_dstar_susp": 0.034482758620689655,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.034482758620689655,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    }
]