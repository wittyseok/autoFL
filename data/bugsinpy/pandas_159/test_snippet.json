[
    {
        "name": "pandas.tests.arithmetic.test_numeric.adjust_negative_zero#18",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric",
        "signature": "pandas.tests.arithmetic.test_numeric.adjust_negative_zero(zero, expected)",
        "snippet": "def adjust_negative_zero(zero, expected):\n    \"\"\"\n    Helper to adjust the expected result if we are dividing by -0.0\n    as opposed to 0.0\n    \"\"\"\n    if np.signbit(np.array(zero)).any():\n        # All entries in the `zero` fixture should be either\n        #  all-negative or no-negative.\n        assert np.signbit(np.array(zero)).all()\n\n        expected *= -1\n\n    return expected",
        "begin_line": 18,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_operator_series_comparison_zerorank#38",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_operator_series_comparison_zerorank(self)",
        "snippet": "    def test_operator_series_comparison_zerorank(self):\n        # GH#13006\n        result = np.float64(0) > pd.Series([1, 2, 3])\n        expected = 0.0 > pd.Series([1, 2, 3])\n        tm.assert_series_equal(result, expected)\n        result = pd.Series([1, 2, 3]) < np.float64(0)\n        expected = pd.Series([1, 2, 3]) < 0.0\n        tm.assert_series_equal(result, expected)\n        result = np.array([0, 1, 2])[0] > pd.Series([0, 1, 2])\n        expected = 0.0 > pd.Series([1, 2, 3])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 38,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_df_numeric_cmp_dt64_raises#50",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_df_numeric_cmp_dt64_raises(self)",
        "snippet": "    def test_df_numeric_cmp_dt64_raises(self):\n        # GH#8932, GH#22163\n        ts = pd.Timestamp.now()\n        df = pd.DataFrame({\"x\": range(5)})\n        with pytest.raises(TypeError):\n            df > ts\n        with pytest.raises(TypeError):\n            df < ts\n        with pytest.raises(TypeError):\n            ts < df\n        with pytest.raises(TypeError):\n            ts > df\n\n        assert not (df == ts).any().any()\n        assert (df != ts).all().all()",
        "begin_line": 50,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_compare_invalid#66",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericComparisons.test_compare_invalid(self)",
        "snippet": "    def test_compare_invalid(self):\n        # GH#8058\n        # ops testing\n        a = pd.Series(np.random.randn(5), name=0)\n        b = pd.Series(np.random.randn(5))\n        b.name = pd.Timestamp(\"2000-01-01\")\n        tm.assert_series_equal(a / b, 1 / (b / a))",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_mul_td64arr#105",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_mul_td64arr(self, left, box_cls)",
        "snippet": "    def test_mul_td64arr(self, left, box_cls):\n        # GH#22390\n        right = np.array([1, 2, 3], dtype=\"m8[s]\")\n        right = box_cls(right)\n\n        expected = pd.TimedeltaIndex([\"10s\", \"40s\", \"90s\"])\n        if isinstance(left, pd.Series) or box_cls is pd.Series:\n            expected = pd.Series(expected)\n\n        result = left * right\n        tm.assert_equal(result, expected)\n\n        result = right * left\n        tm.assert_equal(result, expected)",
        "begin_line": 105,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_div_td64arr#144",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_div_td64arr(self, left, box_cls)",
        "snippet": "    def test_div_td64arr(self, left, box_cls):\n        # GH#22390\n        right = np.array([10, 40, 90], dtype=\"m8[s]\")\n        right = box_cls(right)\n\n        expected = pd.TimedeltaIndex([\"1s\", \"2s\", \"3s\"])\n        if isinstance(left, pd.Series) or box_cls is pd.Series:\n            expected = pd.Series(expected)\n\n        result = right / left\n        tm.assert_equal(result, expected)\n\n        result = right // left\n        tm.assert_equal(result, expected)\n\n        with pytest.raises(TypeError):\n            left / right\n\n        with pytest.raises(TypeError):\n            left // right",
        "begin_line": 144,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_ops_series#166",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_ops_series(self)",
        "snippet": "    def test_ops_series(self):\n        # regression test for G#H8813\n        td = Timedelta(\"1 day\")\n        other = pd.Series([1, 2])\n        expected = pd.Series(pd.to_timedelta([\"1 day\", \"2 days\"]))\n        tm.assert_series_equal(expected, td * other)\n        tm.assert_series_equal(expected, other * td)",
        "begin_line": 166,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_numeric_arr_mul_tdscalar#185",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_numeric_arr_mul_tdscalar(self, scalar_td, numeric_idx, box)",
        "snippet": "    def test_numeric_arr_mul_tdscalar(self, scalar_td, numeric_idx, box):\n        # GH#19333\n        index = numeric_idx\n\n        expected = pd.timedelta_range(\"0 days\", \"4 days\")\n\n        index = tm.box_expected(index, box)\n        expected = tm.box_expected(expected, box)\n\n        result = index * scalar_td\n        tm.assert_equal(result, expected)\n\n        commute = scalar_td * index\n        tm.assert_equal(commute, expected)",
        "begin_line": 185,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_numeric_arr_rdiv_tdscalar#200",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_numeric_arr_rdiv_tdscalar(self, three_days, numeric_idx, box)",
        "snippet": "    def test_numeric_arr_rdiv_tdscalar(self, three_days, numeric_idx, box):\n        index = numeric_idx[1:3]\n\n        expected = TimedeltaIndex([\"3 Days\", \"36 Hours\"])\n\n        index = tm.box_expected(index, box)\n        expected = tm.box_expected(expected, box)\n\n        result = three_days / index\n        tm.assert_equal(result, expected)\n\n        with pytest.raises(TypeError):\n            index / three_days",
        "begin_line": 200,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_add_sub_timedeltalike_invalid#227",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArraylikeArithmeticWithTimedeltaLike.test_add_sub_timedeltalike_invalid(self, numeric_idx, other, box)",
        "snippet": "    def test_add_sub_timedeltalike_invalid(self, numeric_idx, other, box):\n        left = tm.box_expected(numeric_idx, box)\n        with pytest.raises(TypeError):\n            left + other\n        with pytest.raises(TypeError):\n            other + left\n        with pytest.raises(TypeError):\n            left - other\n        with pytest.raises(TypeError):\n            other - left",
        "begin_line": 227,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_zero#244",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_zero(self, zero, numeric_idx)",
        "snippet": "    def test_div_zero(self, zero, numeric_idx):\n        idx = numeric_idx\n\n        expected = pd.Index([np.nan, np.inf, np.inf, np.inf, np.inf], dtype=np.float64)\n        # We only adjust for Index, because Series does not yet apply\n        #  the adjustment correctly.\n        expected2 = adjust_negative_zero(zero, expected)\n\n        result = idx / zero\n        tm.assert_index_equal(result, expected2)\n        ser_compat = Series(idx).astype(\"i8\") / np.array(zero).astype(\"i8\")\n        tm.assert_series_equal(ser_compat, Series(expected))",
        "begin_line": 244,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_floordiv_zero#257",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_floordiv_zero(self, zero, numeric_idx)",
        "snippet": "    def test_floordiv_zero(self, zero, numeric_idx):\n        idx = numeric_idx\n\n        expected = pd.Index([np.nan, np.inf, np.inf, np.inf, np.inf], dtype=np.float64)\n        # We only adjust for Index, because Series does not yet apply\n        #  the adjustment correctly.\n        expected2 = adjust_negative_zero(zero, expected)\n\n        result = idx // zero\n        tm.assert_index_equal(result, expected2)\n        ser_compat = Series(idx).astype(\"i8\") // np.array(zero).astype(\"i8\")\n        tm.assert_series_equal(ser_compat, Series(expected))",
        "begin_line": 257,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_mod_zero#270",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_mod_zero(self, zero, numeric_idx)",
        "snippet": "    def test_mod_zero(self, zero, numeric_idx):\n        idx = numeric_idx\n\n        expected = pd.Index([np.nan, np.nan, np.nan, np.nan, np.nan], dtype=np.float64)\n        result = idx % zero\n        tm.assert_index_equal(result, expected)\n        ser_compat = Series(idx).astype(\"i8\") % np.array(zero).astype(\"i8\")\n        tm.assert_series_equal(ser_compat, Series(result))",
        "begin_line": 270,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_divmod_zero#279",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_divmod_zero(self, zero, numeric_idx)",
        "snippet": "    def test_divmod_zero(self, zero, numeric_idx):\n        idx = numeric_idx\n\n        exleft = pd.Index([np.nan, np.inf, np.inf, np.inf, np.inf], dtype=np.float64)\n        exright = pd.Index([np.nan, np.nan, np.nan, np.nan, np.nan], dtype=np.float64)\n        exleft = adjust_negative_zero(zero, exleft)\n\n        result = divmod(idx, zero)\n        tm.assert_index_equal(result[0], exleft)\n        tm.assert_index_equal(result[1], exright)",
        "begin_line": 279,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_negative_zero#291",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_negative_zero(self, zero, numeric_idx, op)",
        "snippet": "    def test_div_negative_zero(self, zero, numeric_idx, op):\n        # Check that -1 / -0.0 returns np.inf, not -np.inf\n        if isinstance(numeric_idx, pd.UInt64Index):\n            return\n        idx = numeric_idx - 3\n\n        expected = pd.Index(\n            [-np.inf, -np.inf, -np.inf, np.nan, np.inf], dtype=np.float64\n        )\n        expected = adjust_negative_zero(zero, expected)\n\n        result = op(idx, zero)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 291,
        "end_line": 303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_div_ser#308",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_div_ser(self, dtype1, any_real_dtype)",
        "snippet": "    def test_ser_div_ser(self, dtype1, any_real_dtype):\n        # no longer do integer div for any ops, but deal with the 0's\n        dtype2 = any_real_dtype\n\n        first = Series([3, 4, 5, 8], name=\"first\").astype(dtype1)\n        second = Series([0, 0, 0, 3], name=\"second\").astype(dtype2)\n\n        with np.errstate(all=\"ignore\"):\n            expected = Series(\n                first.values.astype(np.float64) / second.values,\n                dtype=\"float64\",\n                name=None,\n            )\n        expected.iloc[0:3] = np.inf\n\n        result = first / second\n        tm.assert_series_equal(result, expected)\n        assert not result.equals(second / first)",
        "begin_line": 308,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_divmod_zero#328",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_divmod_zero(self, dtype1, any_real_dtype)",
        "snippet": "    def test_ser_divmod_zero(self, dtype1, any_real_dtype):\n        # GH#26987\n        dtype2 = any_real_dtype\n        left = pd.Series([1, 1]).astype(dtype1)\n        right = pd.Series([0, 2]).astype(dtype2)\n\n        # GH#27321 pandas convention is to set 1 // 0 to np.inf, as opposed\n        #  to numpy which sets to np.nan; patch `expected[0]` below\n        expected = left // right, left % right\n        expected = list(expected)\n        expected[0] = expected[0].astype(np.float64)\n        expected[0][0] = np.inf\n        result = divmod(left, right)\n\n        tm.assert_series_equal(result[0], expected[0])\n        tm.assert_series_equal(result[1], expected[1])\n\n        # rdivmod case\n        result = divmod(left.values, right)\n        tm.assert_series_equal(result[0], expected[0])\n        tm.assert_series_equal(result[1], expected[1])",
        "begin_line": 328,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_divmod_inf#350",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_ser_divmod_inf(self)",
        "snippet": "    def test_ser_divmod_inf(self):\n        left = pd.Series([np.inf, 1.0])\n        right = pd.Series([np.inf, 2.0])\n\n        expected = left // right, left % right\n        result = divmod(left, right)\n\n        tm.assert_series_equal(result[0], expected[0])\n        tm.assert_series_equal(result[1], expected[1])\n\n        # rdivmod case\n        result = divmod(left.values, right)\n        tm.assert_series_equal(result[0], expected[0])\n        tm.assert_series_equal(result[1], expected[1])",
        "begin_line": 350,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_rdiv_zero_compat#365",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_rdiv_zero_compat(self)",
        "snippet": "    def test_rdiv_zero_compat(self):\n        # GH#8674\n        zero_array = np.array([0] * 5)\n        data = np.random.randn(5)\n        expected = Series([0.0] * 5)\n\n        result = zero_array / Series(data)\n        tm.assert_series_equal(result, expected)\n\n        result = Series(zero_array) / data\n        tm.assert_series_equal(result, expected)\n\n        result = Series(zero_array) / Series(data)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 365,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_zero_inf_signs#380",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_div_zero_inf_signs(self)",
        "snippet": "    def test_div_zero_inf_signs(self):\n        # GH#9144, inf signing\n        ser = Series([-1, 0, 1], name=\"first\")\n        expected = Series([-np.inf, np.nan, np.inf], name=\"first\")\n\n        result = ser / 0\n        tm.assert_series_equal(result, expected)",
        "begin_line": 380,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_rdiv_zero#388",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_rdiv_zero(self)",
        "snippet": "    def test_rdiv_zero(self):\n        # GH#9144\n        ser = Series([-1, 0, 1], name=\"first\")\n        expected = Series([0.0, np.nan, 0.0], name=\"first\")\n\n        result = 0 / ser\n        tm.assert_series_equal(result, expected)",
        "begin_line": 388,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_floordiv_div#396",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_floordiv_div(self)",
        "snippet": "    def test_floordiv_div(self):\n        # GH#9144\n        ser = Series([-1, 0, 1], name=\"first\")\n\n        result = ser // 0\n        expected = Series([-np.inf, np.nan, np.inf], name=\"first\")\n        tm.assert_series_equal(result, expected)",
        "begin_line": 396,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_df#404",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_df(self)",
        "snippet": "    def test_df_div_zero_df(self):\n        # integer div, but deal with the 0's (GH#9144)\n        df = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n        result = df / df\n\n        first = pd.Series([1.0, 1.0, 1.0, 1.0])\n        second = pd.Series([np.nan, np.nan, np.nan, 1])\n        expected = pd.DataFrame({\"first\": first, \"second\": second})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 404,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_array#414",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_array(self)",
        "snippet": "    def test_df_div_zero_array(self):\n        # integer div, but deal with the 0's (GH#9144)\n        df = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n\n        first = pd.Series([1.0, 1.0, 1.0, 1.0])\n        second = pd.Series([np.nan, np.nan, np.nan, 1])\n        expected = pd.DataFrame({\"first\": first, \"second\": second})\n\n        with np.errstate(all=\"ignore\"):\n            arr = df.values.astype(\"float\") / df.values\n        result = pd.DataFrame(arr, index=df.index, columns=df.columns)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 414,
        "end_line": 425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_int#427",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_int(self)",
        "snippet": "    def test_df_div_zero_int(self):\n        # integer div, but deal with the 0's (GH#9144)\n        df = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n\n        result = df / 0\n        expected = pd.DataFrame(np.inf, index=df.index, columns=df.columns)\n        expected.iloc[0:3, 1] = np.nan\n        tm.assert_frame_equal(result, expected)\n\n        # numpy has a slightly different (wrong) treatment\n        with np.errstate(all=\"ignore\"):\n            arr = df.values.astype(\"float64\") / 0\n        result2 = pd.DataFrame(arr, index=df.index, columns=df.columns)\n        tm.assert_frame_equal(result2, expected)",
        "begin_line": 427,
        "end_line": 440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_series_does_not_commute#442",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_div_zero_series_does_not_commute(self)",
        "snippet": "    def test_df_div_zero_series_does_not_commute(self):\n        # integer div, but deal with the 0's (GH#9144)\n        df = pd.DataFrame(np.random.randn(10, 5))\n        ser = df[0]\n        res = ser / df\n        res2 = df / ser\n        assert not res.fillna(0).equals(res2.fillna(0))",
        "begin_line": 442,
        "end_line": 448,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_df#453",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_df(self)",
        "snippet": "    def test_df_mod_zero_df(self):\n        # GH#3590, modulo as ints\n        df = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n\n        # this is technically wrong, as the integer portion is coerced to float\n        # ###\n        first = pd.Series([0, 0, 0, 0], dtype=\"float64\")\n        second = pd.Series([np.nan, np.nan, np.nan, 0])\n        expected = pd.DataFrame({\"first\": first, \"second\": second})\n        result = df % df\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 453,
        "end_line": 463,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_array#465",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_array(self)",
        "snippet": "    def test_df_mod_zero_array(self):\n        # GH#3590, modulo as ints\n        df = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n\n        # this is technically wrong, as the integer portion is coerced to float\n        # ###\n        first = pd.Series([0, 0, 0, 0], dtype=\"float64\")\n        second = pd.Series([np.nan, np.nan, np.nan, 0])\n        expected = pd.DataFrame({\"first\": first, \"second\": second})\n\n        # numpy has a slightly different (wrong) treatment\n        with np.errstate(all=\"ignore\"):\n            arr = df.values % df.values\n        result2 = pd.DataFrame(arr, index=df.index, columns=df.columns, dtype=\"float64\")\n        result2.iloc[0:3, 1] = np.nan\n        tm.assert_frame_equal(result2, expected)",
        "begin_line": 465,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_int#482",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_int(self)",
        "snippet": "    def test_df_mod_zero_int(self):\n        # GH#3590, modulo as ints\n        df = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n\n        result = df % 0\n        expected = pd.DataFrame(np.nan, index=df.index, columns=df.columns)\n        tm.assert_frame_equal(result, expected)\n\n        # numpy has a slightly different (wrong) treatment\n        with np.errstate(all=\"ignore\"):\n            arr = df.values.astype(\"float64\") % 0\n        result2 = pd.DataFrame(arr, index=df.index, columns=df.columns)\n        tm.assert_frame_equal(result2, expected)",
        "begin_line": 482,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_series_does_not_commute#496",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero",
        "signature": "pandas.tests.arithmetic.test_numeric.TestDivisionByZero.test_df_mod_zero_series_does_not_commute(self)",
        "snippet": "    def test_df_mod_zero_series_does_not_commute(self):\n        # GH#3590, modulo as ints\n        # not commutative with series\n        df = pd.DataFrame(np.random.randn(10, 5))\n        ser = df[0]\n        res = ser % df\n        res2 = df % ser\n        assert not res.fillna(0).equals(res2.fillna(0))",
        "begin_line": 496,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divide_decimal#524",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divide_decimal(self, box)",
        "snippet": "    def test_divide_decimal(self, box):\n        # resolves issue GH#9787\n        ser = Series([Decimal(10)])\n        expected = Series([Decimal(5)])\n\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n\n        result = ser / Decimal(2)\n\n        tm.assert_equal(result, expected)\n\n        result = ser // Decimal(2)\n        tm.assert_equal(result, expected)",
        "begin_line": 524,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_div_equiv_binop#539",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_div_equiv_binop(self)",
        "snippet": "    def test_div_equiv_binop(self):\n        # Test Series.div as well as Series.__div__\n        # float/integer issue\n        # GH#7785\n        first = Series([1, 0], name=\"first\")\n        second = Series([-0.01, -0.02], name=\"second\")\n        expected = Series([-0.01, -np.inf])\n\n        result = second.div(first)\n        tm.assert_series_equal(result, expected, check_names=False)\n\n        result = second / first\n        tm.assert_series_equal(result, expected)",
        "begin_line": 539,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_div_int#553",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_div_int(self, numeric_idx)",
        "snippet": "    def test_div_int(self, numeric_idx):\n        idx = numeric_idx\n        result = idx / 1\n        expected = idx.astype(\"float64\")\n        tm.assert_index_equal(result, expected)\n\n        result = idx / 2\n        expected = Index(idx.values / 2)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 553,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_identity#564",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_identity(self, op, numeric_idx, box)",
        "snippet": "    def test_mul_int_identity(self, op, numeric_idx, box):\n        idx = numeric_idx\n        idx = tm.box_expected(idx, box)\n\n        result = op(idx, 1)\n        tm.assert_equal(result, idx)",
        "begin_line": 564,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_array#571",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_array(self, numeric_idx)",
        "snippet": "    def test_mul_int_array(self, numeric_idx):\n        idx = numeric_idx\n        didx = idx * idx\n\n        result = idx * np.array(5, dtype=\"int64\")\n        tm.assert_index_equal(result, idx * 5)\n\n        arr_dtype = \"uint64\" if isinstance(idx, pd.UInt64Index) else \"int64\"\n        result = idx * np.arange(5, dtype=arr_dtype)\n        tm.assert_index_equal(result, didx)",
        "begin_line": 571,
        "end_line": 580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_series#582",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_int_series(self, numeric_idx)",
        "snippet": "    def test_mul_int_series(self, numeric_idx):\n        idx = numeric_idx\n        didx = idx * idx\n\n        arr_dtype = \"uint64\" if isinstance(idx, pd.UInt64Index) else \"int64\"\n        result = idx * Series(np.arange(5, dtype=arr_dtype))\n        tm.assert_series_equal(result, Series(didx))",
        "begin_line": 582,
        "end_line": 588,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_float_series#590",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_float_series(self, numeric_idx)",
        "snippet": "    def test_mul_float_series(self, numeric_idx):\n        idx = numeric_idx\n        rng5 = np.arange(5, dtype=\"float64\")\n\n        result = idx * Series(rng5 + 0.1)\n        expected = Series(rng5 * (rng5 + 0.1))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 590,
        "end_line": 596,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_index#598",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_index(self, numeric_idx)",
        "snippet": "    def test_mul_index(self, numeric_idx):\n        # in general not true for RangeIndex\n        idx = numeric_idx\n        if not isinstance(idx, pd.RangeIndex):\n            result = idx * idx\n            tm.assert_index_equal(result, idx ** 2)",
        "begin_line": 598,
        "end_line": 603,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_datelike_raises#605",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_datelike_raises(self, numeric_idx)",
        "snippet": "    def test_mul_datelike_raises(self, numeric_idx):\n        idx = numeric_idx\n        with pytest.raises(TypeError):\n            idx * pd.date_range(\"20130101\", periods=5)",
        "begin_line": 605,
        "end_line": 608,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_size_mismatch_raises#610",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_mul_size_mismatch_raises(self, numeric_idx)",
        "snippet": "    def test_mul_size_mismatch_raises(self, numeric_idx):\n        idx = numeric_idx\n        with pytest.raises(ValueError):\n            idx * idx[0:3]\n        with pytest.raises(ValueError):\n            idx * np.array([1, 2])",
        "begin_line": 610,
        "end_line": 615,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_pow_float#618",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_pow_float(self, op, numeric_idx, box)",
        "snippet": "    def test_pow_float(self, op, numeric_idx, box):\n        # test power calculations both ways, GH#14973\n        idx = numeric_idx\n        expected = pd.Float64Index(op(idx.values, 2.0))\n\n        idx = tm.box_expected(idx, box)\n        expected = tm.box_expected(expected, box)\n\n        result = op(idx, 2.0)\n        tm.assert_equal(result, expected)",
        "begin_line": 618,
        "end_line": 627,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo#629",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo(self, numeric_idx, box)",
        "snippet": "    def test_modulo(self, numeric_idx, box):\n        # GH#9244\n        idx = numeric_idx\n        expected = Index(idx.values % 2)\n\n        idx = tm.box_expected(idx, box)\n        expected = tm.box_expected(expected, box)\n\n        result = idx % 2\n        tm.assert_equal(result, expected)",
        "begin_line": 629,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_scalar#640",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_scalar(self, numeric_idx)",
        "snippet": "    def test_divmod_scalar(self, numeric_idx):\n        idx = numeric_idx\n\n        result = divmod(idx, 2)\n        with np.errstate(all=\"ignore\"):\n            div, mod = divmod(idx.values, 2)\n\n        expected = Index(div), Index(mod)\n        for r, e in zip(result, expected):\n            tm.assert_index_equal(r, e)",
        "begin_line": 640,
        "end_line": 649,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_ndarray#651",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_ndarray(self, numeric_idx)",
        "snippet": "    def test_divmod_ndarray(self, numeric_idx):\n        idx = numeric_idx\n        other = np.ones(idx.values.shape, dtype=idx.values.dtype) * 2\n\n        result = divmod(idx, other)\n        with np.errstate(all=\"ignore\"):\n            div, mod = divmod(idx.values, other)\n\n        expected = Index(div), Index(mod)\n        for r, e in zip(result, expected):\n            tm.assert_index_equal(r, e)",
        "begin_line": 651,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_series#663",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_divmod_series(self, numeric_idx)",
        "snippet": "    def test_divmod_series(self, numeric_idx):\n        idx = numeric_idx\n        other = np.ones(idx.values.shape, dtype=idx.values.dtype) * 2\n\n        result = divmod(idx, Series(other))\n        with np.errstate(all=\"ignore\"):\n            div, mod = divmod(idx.values, other)\n\n        expected = Series(div), Series(mod)\n        for r, e in zip(result, expected):\n            tm.assert_series_equal(r, e)",
        "begin_line": 663,
        "end_line": 673,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_ops_np_scalar#676",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_ops_np_scalar(self, other)",
        "snippet": "    def test_ops_np_scalar(self, other):\n        vals = np.random.randn(5, 3)\n        f = lambda x: pd.DataFrame(\n            x, index=list(\"ABCDE\"), columns=[\"jim\", \"joe\", \"jolie\"]\n        )\n\n        df = f(vals)\n\n        tm.assert_frame_equal(df / np.array(other), f(vals / other))\n        tm.assert_frame_equal(np.array(other) * df, f(vals * other))\n        tm.assert_frame_equal(df + np.array(other), f(vals + other))\n        tm.assert_frame_equal(np.array(other) - df, f(other - vals))",
        "begin_line": 676,
        "end_line": 687,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_operators_frame#690",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_operators_frame(self)",
        "snippet": "    def test_operators_frame(self):\n        # rpow does not work with DataFrame\n        ts = tm.makeTimeSeries()\n        ts.name = \"ts\"\n\n        df = pd.DataFrame({\"A\": ts})\n\n        tm.assert_series_equal(ts + ts, ts + df[\"A\"], check_names=False)\n        tm.assert_series_equal(ts ** ts, ts ** df[\"A\"], check_names=False)\n        tm.assert_series_equal(ts < ts, ts < df[\"A\"], check_names=False)\n        tm.assert_series_equal(ts / ts, ts / df[\"A\"], check_names=False)",
        "begin_line": 690,
        "end_line": 700,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo2#704",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo2(self)",
        "snippet": "    def test_modulo2(self):\n        with np.errstate(all=\"ignore\"):\n\n            # GH#3590, modulo as ints\n            p = pd.DataFrame({\"first\": [3, 4, 5, 8], \"second\": [0, 0, 0, 3]})\n            result = p[\"first\"] % p[\"second\"]\n            expected = Series(p[\"first\"].values % p[\"second\"].values, dtype=\"float64\")\n            expected.iloc[0:3] = np.nan\n            tm.assert_series_equal(result, expected)\n\n            result = p[\"first\"] % 0\n            expected = Series(np.nan, index=p.index, name=\"first\")\n            tm.assert_series_equal(result, expected)\n\n            p = p.astype(\"float64\")\n            result = p[\"first\"] % p[\"second\"]\n            expected = Series(p[\"first\"].values % p[\"second\"].values)\n            tm.assert_series_equal(result, expected)\n\n            p = p.astype(\"float64\")\n            result = p[\"first\"] % p[\"second\"]\n            result2 = p[\"second\"] % p[\"first\"]\n            assert not result.equals(result2)",
        "begin_line": 704,
        "end_line": 726,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo_zero_int#728",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision",
        "signature": "pandas.tests.arithmetic.test_numeric.TestMultiplicationDivision.test_modulo_zero_int(self)",
        "snippet": "    def test_modulo_zero_int(self):\n        # GH#9144\n        with np.errstate(all=\"ignore\"):\n            s = Series([0, 1])\n\n            result = s % 0\n            expected = Series([np.nan, np.nan])\n            tm.assert_series_equal(result, expected)\n\n            result = 0 % s\n            expected = Series([np.nan, 0.0])\n            tm.assert_series_equal(result, expected)",
        "begin_line": 728,
        "end_line": 739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_arith_ops_df_compat#747",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_arith_ops_df_compat(self)",
        "snippet": "    def test_arith_ops_df_compat(self):\n        # GH#1134\n        s1 = pd.Series([1, 2, 3], index=list(\"ABC\"), name=\"x\")\n        s2 = pd.Series([2, 2, 2], index=list(\"ABD\"), name=\"x\")\n\n        exp = pd.Series([3.0, 4.0, np.nan, np.nan], index=list(\"ABCD\"), name=\"x\")\n        tm.assert_series_equal(s1 + s2, exp)\n        tm.assert_series_equal(s2 + s1, exp)\n\n        exp = pd.DataFrame({\"x\": [3.0, 4.0, np.nan, np.nan]}, index=list(\"ABCD\"))\n        tm.assert_frame_equal(s1.to_frame() + s2.to_frame(), exp)\n        tm.assert_frame_equal(s2.to_frame() + s1.to_frame(), exp)\n\n        # different length\n        s3 = pd.Series([1, 2, 3], index=list(\"ABC\"), name=\"x\")\n        s4 = pd.Series([2, 2, 2, 2], index=list(\"ABCD\"), name=\"x\")\n\n        exp = pd.Series([3, 4, 5, np.nan], index=list(\"ABCD\"), name=\"x\")\n        tm.assert_series_equal(s3 + s4, exp)\n        tm.assert_series_equal(s4 + s3, exp)\n\n        exp = pd.DataFrame({\"x\": [3, 4, 5, np.nan]}, index=list(\"ABCD\"))\n        tm.assert_frame_equal(s3.to_frame() + s4.to_frame(), exp)\n        tm.assert_frame_equal(s4.to_frame() + s3.to_frame(), exp)",
        "begin_line": 747,
        "end_line": 770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_frame_radd_bug#773",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_frame_radd_bug(self)",
        "snippet": "    def test_series_frame_radd_bug(self):\n        # GH#353\n        vals = pd.Series(tm.rands_array(5, 10))\n        result = \"foo_\" + vals\n        expected = vals.map(lambda x: \"foo_\" + x)\n        tm.assert_series_equal(result, expected)\n\n        frame = pd.DataFrame({\"vals\": vals})\n        result = \"foo_\" + frame\n        expected = pd.DataFrame({\"vals\": vals.map(lambda x: \"foo_\" + x)})\n        tm.assert_frame_equal(result, expected)\n\n        ts = tm.makeTimeSeries()\n        ts.name = \"ts\"\n\n        # really raise this time\n        now = pd.Timestamp.now().to_pydatetime()\n        with pytest.raises(TypeError):\n            now + ts\n\n        with pytest.raises(TypeError):\n            ts + now",
        "begin_line": 773,
        "end_line": 794,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_datetime64_with_index#797",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_datetime64_with_index(self)",
        "snippet": "    def test_datetime64_with_index(self):\n        # arithmetic integer ops with an index\n        ser = pd.Series(np.random.randn(5))\n        expected = ser - ser.index.to_series()\n        result = ser - ser.index\n        tm.assert_series_equal(result, expected)\n\n        # GH#4629\n        # arithmetic datetime64 ops with an index\n        ser = pd.Series(\n            pd.date_range(\"20130101\", periods=5),\n            index=pd.date_range(\"20130101\", periods=5),\n        )\n        expected = ser - ser.index.to_series()\n        result = ser - ser.index\n        tm.assert_series_equal(result, expected)\n\n        with pytest.raises(TypeError):\n            # GH#18850\n            result = ser - ser.index.to_period()\n\n        df = pd.DataFrame(\n            np.random.randn(5, 2), index=pd.date_range(\"20130101\", periods=5)\n        )\n        df[\"date\"] = pd.Timestamp(\"20130102\")\n        df[\"expected\"] = df[\"date\"] - df.index.to_series()\n        df[\"result\"] = df[\"date\"] - df.index\n        tm.assert_series_equal(df[\"result\"], df[\"expected\"], check_names=False)",
        "begin_line": 797,
        "end_line": 824,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_frame_operators#827",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_frame_operators(self, float_frame)",
        "snippet": "    def test_frame_operators(self, float_frame):\n        frame = float_frame\n        frame2 = pd.DataFrame(float_frame, columns=[\"D\", \"C\", \"B\", \"A\"])\n\n        garbage = np.random.random(4)\n        colSeries = pd.Series(garbage, index=np.array(frame.columns))\n\n        idSum = frame + frame\n        seriesSum = frame + colSeries\n\n        for col, series in idSum.items():\n            for idx, val in series.items():\n                origVal = frame[col][idx] * 2\n                if not np.isnan(val):\n                    assert val == origVal\n                else:\n                    assert np.isnan(origVal)\n\n        for col, series in seriesSum.items():\n            for idx, val in series.items():\n                origVal = frame[col][idx] + colSeries[col]\n                if not np.isnan(val):\n                    assert val == origVal\n                else:\n                    assert np.isnan(origVal)\n\n        added = frame2 + frame2\n        expected = frame2 * 2\n        tm.assert_frame_equal(added, expected)\n\n        df = pd.DataFrame({\"a\": [\"a\", None, \"b\"]})\n        tm.assert_frame_equal(df + df, pd.DataFrame({\"a\": [\"aa\", np.nan, \"bb\"]}))\n\n        # Test for issue #10181\n        for dtype in (\"float\", \"int64\"):\n            frames = [\n                pd.DataFrame(dtype=dtype),\n                pd.DataFrame(columns=[\"A\"], dtype=dtype),\n                pd.DataFrame(index=[0], dtype=dtype),\n            ]\n            for df in frames:\n                assert (df + df).equals(df)\n                tm.assert_frame_equal(df + df, df)",
        "begin_line": 827,
        "end_line": 869,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_operators#872",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_operators(self)",
        "snippet": "    def test_series_operators(self):\n        def _check_op(series, other, op, pos_only=False, check_dtype=True):\n            left = np.abs(series) if pos_only else series\n            right = np.abs(other) if pos_only else other\n\n            cython_or_numpy = op(left, right)\n            python = left.combine(right, op)\n            tm.assert_series_equal(cython_or_numpy, python, check_dtype=check_dtype)\n\n        def check(series, other):\n            simple_ops = [\"add\", \"sub\", \"mul\", \"truediv\", \"floordiv\", \"mod\"]\n\n            for opname in simple_ops:\n                _check_op(series, other, getattr(operator, opname))\n\n            _check_op(series, other, operator.pow, pos_only=True)\n\n            _check_op(series, other, ops.radd)\n            _check_op(series, other, ops.rsub)\n            _check_op(series, other, ops.rtruediv)\n            _check_op(series, other, ops.rfloordiv)\n            _check_op(series, other, ops.rmul)\n            _check_op(series, other, ops.rpow, pos_only=True)\n            _check_op(series, other, ops.rmod)\n\n        tser = tm.makeTimeSeries().rename(\"ts\")\n        check(tser, tser * 2)\n        check(tser, tser[::2])\n        check(tser, 5)\n\n        def check_comparators(series, other, check_dtype=True):\n            _check_op(series, other, operator.gt, check_dtype=check_dtype)\n            _check_op(series, other, operator.ge, check_dtype=check_dtype)\n            _check_op(series, other, operator.eq, check_dtype=check_dtype)\n            _check_op(series, other, operator.lt, check_dtype=check_dtype)\n            _check_op(series, other, operator.le, check_dtype=check_dtype)\n\n        check_comparators(tser, 5)\n        check_comparators(tser, tser + 1, check_dtype=False)",
        "begin_line": 872,
        "end_line": 910,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction._check_op#873",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction._check_op(series, other, op, pos_only=False, check_dtype=True)",
        "snippet": "        def _check_op(series, other, op, pos_only=False, check_dtype=True):\n            left = np.abs(series) if pos_only else series\n            right = np.abs(other) if pos_only else other\n\n            cython_or_numpy = op(left, right)\n            python = left.combine(right, op)\n            tm.assert_series_equal(cython_or_numpy, python, check_dtype=check_dtype)",
        "begin_line": 873,
        "end_line": 879,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.check#881",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.check(series, other)",
        "snippet": "        def check(series, other):\n            simple_ops = [\"add\", \"sub\", \"mul\", \"truediv\", \"floordiv\", \"mod\"]\n\n            for opname in simple_ops:\n                _check_op(series, other, getattr(operator, opname))\n\n            _check_op(series, other, operator.pow, pos_only=True)\n\n            _check_op(series, other, ops.radd)\n            _check_op(series, other, ops.rsub)\n            _check_op(series, other, ops.rtruediv)\n            _check_op(series, other, ops.rfloordiv)\n            _check_op(series, other, ops.rmul)\n            _check_op(series, other, ops.rpow, pos_only=True)\n            _check_op(series, other, ops.rmod)",
        "begin_line": 881,
        "end_line": 895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.check_comparators#902",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.check_comparators(series, other, check_dtype=True)",
        "snippet": "        def check_comparators(series, other, check_dtype=True):\n            _check_op(series, other, operator.gt, check_dtype=check_dtype)\n            _check_op(series, other, operator.ge, check_dtype=check_dtype)\n            _check_op(series, other, operator.eq, check_dtype=check_dtype)\n            _check_op(series, other, operator.lt, check_dtype=check_dtype)\n            _check_op(series, other, operator.le, check_dtype=check_dtype)",
        "begin_line": 902,
        "end_line": 907,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_divmod#913",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_divmod(self)",
        "snippet": "    def test_divmod(self):\n        def check(series, other):\n            results = divmod(series, other)\n            if isinstance(other, abc.Iterable) and len(series) != len(other):\n                # if the lengths don't match, this is the test where we use\n                # `tser[::2]`. Pad every other value in `other_np` with nan.\n                other_np = []\n                for n in other:\n                    other_np.append(n)\n                    other_np.append(np.nan)\n            else:\n                other_np = other\n            other_np = np.asarray(other_np)\n            with np.errstate(all=\"ignore\"):\n                expecteds = divmod(series.values, np.asarray(other_np))\n\n            for result, expected in zip(results, expecteds):\n                # check the values, name, and index separately\n                tm.assert_almost_equal(np.asarray(result), expected)\n\n                assert result.name == series.name\n                tm.assert_index_equal(result.index, series.index)\n\n        tser = tm.makeTimeSeries().rename(\"ts\")\n        check(tser, tser * 2)\n        check(tser, tser[::2])\n        check(tser, 5)",
        "begin_line": 913,
        "end_line": 939,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.check#914",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.check(series, other)",
        "snippet": "        def check(series, other):\n            results = divmod(series, other)\n            if isinstance(other, abc.Iterable) and len(series) != len(other):\n                # if the lengths don't match, this is the test where we use\n                # `tser[::2]`. Pad every other value in `other_np` with nan.\n                other_np = []\n                for n in other:\n                    other_np.append(n)\n                    other_np.append(np.nan)\n            else:\n                other_np = other\n            other_np = np.asarray(other_np)\n            with np.errstate(all=\"ignore\"):\n                expecteds = divmod(series.values, np.asarray(other_np))\n\n            for result, expected in zip(results, expecteds):\n                # check the values, name, and index separately\n                tm.assert_almost_equal(np.asarray(result), expected)\n\n                assert result.name == series.name\n                tm.assert_index_equal(result.index, series.index)",
        "begin_line": 914,
        "end_line": 934,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_divmod_zero#941",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction",
        "signature": "pandas.tests.arithmetic.test_numeric.TestAdditionSubtraction.test_series_divmod_zero(self)",
        "snippet": "    def test_series_divmod_zero(self):\n        # Check that divmod uses pandas convention for division by zero,\n        #  which does not match numpy.\n        # pandas convention has\n        #  1/0 == np.inf\n        #  -1/0 == -np.inf\n        #  1/-0.0 == -np.inf\n        #  -1/-0.0 == np.inf\n        tser = tm.makeTimeSeries().rename(\"ts\")\n        other = tser * 0\n\n        result = divmod(tser, other)\n        exp1 = pd.Series([np.inf] * len(tser), index=tser.index, name=\"ts\")\n        exp2 = pd.Series([np.nan] * len(tser), index=tser.index, name=\"ts\")\n        tm.assert_series_equal(result[0], exp1)\n        tm.assert_series_equal(result[1], exp2)",
        "begin_line": 941,
        "end_line": 956,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_compat#964",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat",
        "signature": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_compat(self, holder)",
        "snippet": "    def test_ufunc_compat(self, holder):\n        box = pd.Series if holder is pd.Series else pd.Index\n\n        if holder is pd.RangeIndex:\n            idx = pd.RangeIndex(0, 5)\n        else:\n            idx = holder(np.arange(5, dtype=\"int64\"))\n        result = np.sin(idx)\n        expected = box(np.sin(np.arange(5, dtype=\"int64\")))\n        tm.assert_equal(result, expected)",
        "begin_line": 964,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_coercions#978",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat",
        "signature": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_coercions(self, holder)",
        "snippet": "    def test_ufunc_coercions(self, holder):\n        idx = holder([1, 2, 3, 4, 5], name=\"x\")\n        box = pd.Series if holder is pd.Series else pd.Index\n\n        result = np.sqrt(idx)\n        assert result.dtype == \"f8\" and isinstance(result, box)\n        exp = pd.Float64Index(np.sqrt(np.array([1, 2, 3, 4, 5])), name=\"x\")\n        exp = tm.box_expected(exp, box)\n        tm.assert_equal(result, exp)\n\n        result = np.divide(idx, 2.0)\n        assert result.dtype == \"f8\" and isinstance(result, box)\n        exp = pd.Float64Index([0.5, 1.0, 1.5, 2.0, 2.5], name=\"x\")\n        exp = tm.box_expected(exp, box)\n        tm.assert_equal(result, exp)\n\n        # _evaluate_numeric_binop\n        result = idx + 2.0\n        assert result.dtype == \"f8\" and isinstance(result, box)\n        exp = pd.Float64Index([3.0, 4.0, 5.0, 6.0, 7.0], name=\"x\")\n        exp = tm.box_expected(exp, box)\n        tm.assert_equal(result, exp)\n\n        result = idx - 2.0\n        assert result.dtype == \"f8\" and isinstance(result, box)\n        exp = pd.Float64Index([-1.0, 0.0, 1.0, 2.0, 3.0], name=\"x\")\n        exp = tm.box_expected(exp, box)\n        tm.assert_equal(result, exp)\n\n        result = idx * 1.0\n        assert result.dtype == \"f8\" and isinstance(result, box)\n        exp = pd.Float64Index([1.0, 2.0, 3.0, 4.0, 5.0], name=\"x\")\n        exp = tm.box_expected(exp, box)\n        tm.assert_equal(result, exp)\n\n        result = idx / 2.0\n        assert result.dtype == \"f8\" and isinstance(result, box)\n        exp = pd.Float64Index([0.5, 1.0, 1.5, 2.0, 2.5], name=\"x\")\n        exp = tm.box_expected(exp, box)\n        tm.assert_equal(result, exp)",
        "begin_line": 978,
        "end_line": 1017,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_multiple_return_values#1022",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat",
        "signature": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_multiple_return_values(self, holder)",
        "snippet": "    def test_ufunc_multiple_return_values(self, holder):\n        obj = holder([1, 2, 3], name=\"x\")\n        box = pd.Series if holder is pd.Series else pd.Index\n\n        result = np.modf(obj)\n        assert isinstance(result, tuple)\n        exp1 = pd.Float64Index([0.0, 0.0, 0.0], name=\"x\")\n        exp2 = pd.Float64Index([1.0, 2.0, 3.0], name=\"x\")\n        tm.assert_equal(result[0], tm.box_expected(exp1, box))\n        tm.assert_equal(result[1], tm.box_expected(exp2, box))",
        "begin_line": 1022,
        "end_line": 1031,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_at#1033",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat",
        "signature": "pandas.tests.arithmetic.test_numeric.TestUFuncCompat.test_ufunc_at(self)",
        "snippet": "    def test_ufunc_at(self):\n        s = pd.Series([0, 1, 2], index=[1, 2, 3], name=\"x\")\n        np.add.at(s, [0, 2], 10)\n        expected = pd.Series([10, 1, 12], index=[1, 2, 3], name=\"x\")\n        tm.assert_series_equal(s, expected)",
        "begin_line": 1033,
        "end_line": 1037,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_numarr_with_dtype_add_nan#1044",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence",
        "signature": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_numarr_with_dtype_add_nan(self, dtype, box)",
        "snippet": "    def test_numarr_with_dtype_add_nan(self, dtype, box):\n        ser = pd.Series([1, 2, 3], dtype=dtype)\n        expected = pd.Series([np.nan, np.nan, np.nan], dtype=dtype)\n\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n\n        result = np.nan + ser\n        tm.assert_equal(result, expected)\n\n        result = ser + np.nan\n        tm.assert_equal(result, expected)",
        "begin_line": 1044,
        "end_line": 1055,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_numarr_with_dtype_add_int#1058",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence",
        "signature": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_numarr_with_dtype_add_int(self, dtype, box)",
        "snippet": "    def test_numarr_with_dtype_add_int(self, dtype, box):\n        ser = pd.Series([1, 2, 3], dtype=dtype)\n        expected = pd.Series([2, 3, 4], dtype=dtype)\n\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n\n        result = 1 + ser\n        tm.assert_equal(result, expected)\n\n        result = ser + 1\n        tm.assert_equal(result, expected)",
        "begin_line": 1058,
        "end_line": 1069,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_operators_reverse_object#1076",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence",
        "signature": "pandas.tests.arithmetic.test_numeric.TestObjectDtypeEquivalence.test_operators_reverse_object(self, op)",
        "snippet": "    def test_operators_reverse_object(self, op):\n        # GH#56\n        arr = pd.Series(np.random.randn(10), index=np.arange(10), dtype=object)\n\n        result = op(1.0, arr)\n        expected = op(1.0, arr.astype(float))\n        tm.assert_series_equal(result.astype(float), expected)",
        "begin_line": 1076,
        "end_line": 1082,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.check_binop#1089",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.check_binop(self, ops, scalars, idxs)",
        "snippet": "    def check_binop(self, ops, scalars, idxs):\n        for op in ops:\n            for a, b in combinations(idxs, 2):\n                result = op(a, b)\n                expected = op(pd.Int64Index(a), pd.Int64Index(b))\n                tm.assert_index_equal(result, expected)\n            for idx in idxs:\n                for scalar in scalars:\n                    result = op(idx, scalar)\n                    expected = op(pd.Int64Index(idx), scalar)\n                    tm.assert_index_equal(result, expected)",
        "begin_line": 1089,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_binops#1101",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_binops(self)",
        "snippet": "    def test_binops(self):\n        ops = [\n            operator.add,\n            operator.sub,\n            operator.mul,\n            operator.floordiv,\n            operator.truediv,\n        ]\n        scalars = [-1, 1, 2]\n        idxs = [\n            pd.RangeIndex(0, 10, 1),\n            pd.RangeIndex(0, 20, 2),\n            pd.RangeIndex(-10, 10, 2),\n            pd.RangeIndex(5, -5, -1),\n        ]\n        self.check_binop(ops, scalars, idxs)",
        "begin_line": 1101,
        "end_line": 1116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_binops_pow#1118",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_binops_pow(self)",
        "snippet": "    def test_binops_pow(self):\n        # numpy does not allow powers of negative integers so test separately\n        # https://github.com/numpy/numpy/pull/8127\n        ops = [pow]\n        scalars = [1, 2]\n        idxs = [pd.RangeIndex(0, 10, 1), pd.RangeIndex(0, 20, 2)]\n        self.check_binop(ops, scalars, idxs)",
        "begin_line": 1118,
        "end_line": 1124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_arithmetic_with_frame_or_series#1138",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_arithmetic_with_frame_or_series(self, op)",
        "snippet": "    def test_arithmetic_with_frame_or_series(self, op):\n        # check that we return NotImplemented when operating with Series\n        # or DataFrame\n        index = pd.RangeIndex(5)\n        other = pd.Series(np.random.randn(5))\n\n        expected = op(pd.Series(index), other)\n        result = op(index, other)\n        tm.assert_series_equal(result, expected)\n\n        other = pd.DataFrame(np.random.randn(2, 5))\n        expected = op(pd.DataFrame([index, index]), other)\n        result = op(index, other)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1138,
        "end_line": 1151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_numeric_compat2#1153",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_numeric_compat2(self)",
        "snippet": "    def test_numeric_compat2(self):\n        # validate that we are handling the RangeIndex overrides to numeric ops\n        # and returning RangeIndex where possible\n\n        idx = pd.RangeIndex(0, 10, 2)\n\n        result = idx * 2\n        expected = pd.RangeIndex(0, 20, 4)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = idx + 2\n        expected = pd.RangeIndex(2, 12, 2)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = idx - 2\n        expected = pd.RangeIndex(-2, 8, 2)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = idx / 2\n        expected = pd.RangeIndex(0, 5, 1).astype(\"float64\")\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = idx / 4\n        expected = pd.RangeIndex(0, 10, 2) / 4\n        tm.assert_index_equal(result, expected, exact=True)\n\n        result = idx // 1\n        expected = idx\n        tm.assert_index_equal(result, expected, exact=True)\n\n        # __mul__\n        result = idx * idx\n        expected = Index(idx.values * idx.values)\n        tm.assert_index_equal(result, expected, exact=True)\n\n        # __pow__\n        idx = pd.RangeIndex(0, 1000, 2)\n        result = idx ** 2\n        expected = idx._int64index ** 2\n        tm.assert_index_equal(Index(result.values), expected, exact=True)\n\n        # __floordiv__\n        cases_exact = [\n            (pd.RangeIndex(0, 1000, 2), 2, pd.RangeIndex(0, 500, 1)),\n            (pd.RangeIndex(-99, -201, -3), -3, pd.RangeIndex(33, 67, 1)),\n            (pd.RangeIndex(0, 1000, 1), 2, pd.RangeIndex(0, 1000, 1)._int64index // 2),\n            (\n                pd.RangeIndex(0, 100, 1),\n                2.0,\n                pd.RangeIndex(0, 100, 1)._int64index // 2.0,\n            ),\n            (pd.RangeIndex(0), 50, pd.RangeIndex(0)),\n            (pd.RangeIndex(2, 4, 2), 3, pd.RangeIndex(0, 1, 1)),\n            (pd.RangeIndex(-5, -10, -6), 4, pd.RangeIndex(-2, -1, 1)),\n            (pd.RangeIndex(-100, -200, 3), 2, pd.RangeIndex(0)),\n        ]\n        for idx, div, expected in cases_exact:\n            tm.assert_index_equal(idx // div, expected, exact=True)",
        "begin_line": 1153,
        "end_line": 1210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_addsub_arithmetic#1214",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_numeric.TestNumericArithmeticUnsorted.test_addsub_arithmetic(self, dtype, delta)",
        "snippet": "    def test_addsub_arithmetic(self, dtype, delta):\n        # GH#8142\n        delta = dtype(delta)\n        index = pd.Index([10, 11, 12], dtype=dtype)\n        result = index + delta\n        expected = pd.Index(index.values + delta, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        # this subtraction used to fail\n        result = index - delta\n        expected = pd.Index(index.values - delta, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        tm.assert_index_equal(index + index, 2 * index)\n        tm.assert_index_equal(index - index, 0 * index)\n        assert not (index - index).empty",
        "begin_line": 1214,
        "end_line": 1229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.test_fill_value_inf_masking#1232",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric",
        "signature": "pandas.tests.arithmetic.test_numeric.test_fill_value_inf_masking()",
        "snippet": "def test_fill_value_inf_masking():\n    # GH #27464 make sure we mask 0/1 with Inf and not NaN\n    df = pd.DataFrame({\"A\": [0, 1, 2], \"B\": [1.1, None, 1.1]})\n\n    other = pd.DataFrame({\"A\": [1.1, 1.2, 1.3]}, index=[0, 2, 3])\n\n    result = df.rfloordiv(other, fill_value=1)\n\n    expected = pd.DataFrame(\n        {\"A\": [np.inf, 1.0, 0.0, 1.0], \"B\": [0.0, np.nan, 0.0, np.nan]}\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1232,
        "end_line": 1243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_numeric.test_dataframe_div_silenced#1246",
        "src_path": "pandas/tests/arithmetic/test_numeric.py",
        "class_name": "pandas.tests.arithmetic.test_numeric",
        "signature": "pandas.tests.arithmetic.test_numeric.test_dataframe_div_silenced()",
        "snippet": "def test_dataframe_div_silenced():\n    # GH#26793\n    pdf1 = pd.DataFrame(\n        {\n            \"A\": np.arange(10),\n            \"B\": [np.nan, 1, 2, 3, 4] * 2,\n            \"C\": [np.nan] * 10,\n            \"D\": np.arange(10),\n        },\n        index=list(\"abcdefghij\"),\n        columns=list(\"ABCD\"),\n    )\n    pdf2 = pd.DataFrame(\n        np.random.randn(10, 4), index=list(\"abcdefghjk\"), columns=list(\"ABCX\")\n    )\n    with tm.assert_produces_warning(None):\n        pdf1.div(pdf2, fill_value=0)",
        "begin_line": 1246,
        "end_line": 1262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.one#23",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.one(request)",
        "snippet": "def one(request):\n    # zero-dim integer array behaves like an integer\n    return request.param",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.zero#42",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.zero(request)",
        "snippet": "def zero(request):\n    # For testing division by (or of) zero for Index with length 5, this\n    # gives several scalar-zeros and length-5 vector-zeros\n    return request.param",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.numeric_idx#61",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.numeric_idx(request)",
        "snippet": "def numeric_idx(request):\n    \"\"\"\n    Several types of numeric-dtypes Index objects\n    \"\"\"\n    return request.param",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.scalar_td#80",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.scalar_td(request)",
        "snippet": "def scalar_td(request):\n    \"\"\"\n    Several variants of Timedelta scalars representing 5 minutes and 4 seconds\n    \"\"\"\n    return request.param",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.three_days#98",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.three_days(request)",
        "snippet": "def three_days(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 3-day timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.two_hours#117",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.two_hours(request)",
        "snippet": "def two_hours(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 2-hour timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_hourly#140",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_hourly(request)",
        "snippet": "def not_hourly(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Hourly frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_daily#156",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_daily(request)",
        "snippet": "def not_daily(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Daily frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 156,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.mismatched_freq#172",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.mismatched_freq(request)",
        "snippet": "def mismatched_freq(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Monthly or Annual frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 172,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box#184",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box(request)",
        "snippet": "def box(request):\n    \"\"\"\n    Several array-like containers that should have effectively identical\n    behavior with respect to arithmetic operations.\n    \"\"\"\n    return request.param",
        "begin_line": 184,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_df_fail#196",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_df_fail(request)",
        "snippet": "def box_df_fail(request):\n    \"\"\"\n    Fixture equivalent to `box` fixture but xfailing the DataFrame case.\n    \"\"\"\n    return request.param",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_transpose_fail#212",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_transpose_fail(request)",
        "snippet": "def box_transpose_fail(request):\n    \"\"\"\n    Fixture similar to `box` but testing both transpose cases for DataFrame,\n    with the tranpose=True case xfailed.\n    \"\"\"\n    # GH#23620\n    return request.param",
        "begin_line": 212,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_with_array#222",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_with_array(request)",
        "snippet": "def box_with_array(request):\n    \"\"\"\n    Fixture to test behavior for Index, Series, DataFrame, and pandas Array\n    classes\n    \"\"\"\n    return request.param",
        "begin_line": 222,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    }
]