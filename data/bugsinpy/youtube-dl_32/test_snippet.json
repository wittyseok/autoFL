[
    {
        "name": "test.test_utils.TestUtil.test_timeconvert#54",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_timeconvert(self)",
        "snippet": "    def test_timeconvert(self):\n        self.assertTrue(timeconvert('') is None)\n        self.assertTrue(timeconvert('bougrg') is None)",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename#58",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename(self)",
        "snippet": "    def test_sanitize_filename(self):\n        self.assertEqual(sanitize_filename('abc'), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e'), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123'), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de'))\n        self.assertFalse('/' in sanitize_filename('abc/de///'))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de'))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|'))\n        self.assertEqual('yes no', sanitize_filename('yes? no'))\n        self.assertEqual('this - that', sanitize_filename('this: that'))\n\n        self.assertEqual(sanitize_filename('AT&T'), 'AT&T')\n        aumlaut = '\u00e4'\n        self.assertEqual(sanitize_filename(aumlaut), aumlaut)\n        tests = '\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0446\\u0430'\n        self.assertEqual(sanitize_filename(tests), tests)\n\n        forbidden = '\"\\0\\\\/'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc))",
        "begin_line": 58,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename_restricted#83",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename_restricted(self)",
        "snippet": "    def test_sanitize_filename_restricted(self):\n        self.assertEqual(sanitize_filename('abc', restricted=True), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e', restricted=True), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123', restricted=True), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de', restricted=True))\n        self.assertFalse('/' in sanitize_filename('abc/de///', restricted=True))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de', restricted=True))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|', restricted=True))\n        self.assertEqual('yes_no', sanitize_filename('yes? no', restricted=True))\n        self.assertEqual('this_-_that', sanitize_filename('this: that', restricted=True))\n\n        tests = 'a\\xe4b\\u4e2d\\u56fd\\u7684c'\n        self.assertEqual(sanitize_filename(tests, restricted=True), 'a_b_c')\n        self.assertTrue(sanitize_filename('\\xf6', restricted=True) != '')  # No empty filename\n\n        forbidden = '\"\\0\\\\/&!: \\'\\t\\n()[]{}$;`^,#'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc, restricted=True))\n\n        # Handle a common case more neatly\n        self.assertEqual(sanitize_filename('\\u5927\\u58f0\\u5e26 - Song', restricted=True), 'Song')\n        self.assertEqual(sanitize_filename('\\u603b\\u7edf: Speech', restricted=True), 'Speech')\n        # .. but make sure the file name is never empty\n        self.assertTrue(sanitize_filename('-', restricted=True) != '')\n        self.assertTrue(sanitize_filename(':', restricted=True) != '')",
        "begin_line": 83,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_ids#113",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_ids(self)",
        "snippet": "    def test_sanitize_ids(self):\n        self.assertEqual(sanitize_filename('_n_cd26wFpw', is_id=True), '_n_cd26wFpw')\n        self.assertEqual(sanitize_filename('_BD_eEpuzXw', is_id=True), '_BD_eEpuzXw')\n        self.assertEqual(sanitize_filename('N0Y__7-UOdI', is_id=True), 'N0Y__7-UOdI')",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_ordered_set#118",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_ordered_set(self)",
        "snippet": "    def test_ordered_set(self):\n        self.assertEqual(orderedSet([1, 1, 2, 3, 4, 4, 5, 6, 7, 3, 5]), [1, 2, 3, 4, 5, 6, 7])\n        self.assertEqual(orderedSet([]), [])\n        self.assertEqual(orderedSet([1]), [1])\n        #keep the list ordered\n        self.assertEqual(orderedSet([135, 1, 1, 1]), [135, 1])",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unescape_html#125",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unescape_html(self)",
        "snippet": "    def test_unescape_html(self):\n        self.assertEqual(unescapeHTML('%20;'), '%20;')\n        self.assertEqual(\n            unescapeHTML('&eacute;'), '\u00e9')",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_daterange#130",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_daterange(self)",
        "snippet": "    def test_daterange(self):\n        _20century = DateRange(\"19000101\",\"20000101\")\n        self.assertFalse(\"17890714\" in _20century)\n        _ac = DateRange(\"00010101\")\n        self.assertTrue(\"19690721\" in _ac)\n        _firstmilenium = DateRange(end=\"10000101\")\n        self.assertTrue(\"07110427\" in _firstmilenium)",
        "begin_line": 130,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unified_dates#138",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unified_dates(self)",
        "snippet": "    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n        self.assertEqual(unified_strdate('1968-12-10'), '19681210')\n        self.assertEqual(unified_strdate('28/01/2014 21:00:00 +0100'), '20140128')",
        "begin_line": 138,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_find_xpath_attr#146",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_find_xpath_attr(self)",
        "snippet": "    def test_find_xpath_attr(self):\n        testxml = '''<root>\n            <node/>\n            <node x=\"a\"/>\n            <node x=\"a\" y=\"c\" />\n            <node x=\"b\" y=\"d\" />\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'a'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'c'), doc[2])",
        "begin_line": 146,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_with_ns#159",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_with_ns(self)",
        "snippet": "    def test_xpath_with_ns(self):\n        testxml = '''<root xmlns:media=\"http://example.com/\">\n            <media:song>\n                <media:author>The Author</media:author>\n                <url>http://server.com/download.mp3</url>\n            </media:song>\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n        find = lambda p: doc.find(xpath_with_ns(p, {'media': 'http://example.com/'}))\n        self.assertTrue(find('media:song') is not None)\n        self.assertEqual(find('media:song/media:author').text, 'The Author')\n        self.assertEqual(find('media:song/url').text, 'http://server.com/download.mp3')",
        "begin_line": 159,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_smuggle_url#172",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_smuggle_url(self)",
        "snippet": "    def test_smuggle_url(self):\n        data = {u\"\u00f6\": u\"\u00f6\", u\"abc\": [3]}\n        url = 'https://foo.bar/baz?x=y#a'\n        smug_url = smuggle_url(url, data)\n        unsmug_url, unsmug_data = unsmuggle_url(smug_url)\n        self.assertEqual(url, unsmug_url)\n        self.assertEqual(data, unsmug_data)\n\n        res_url, res_data = unsmuggle_url(url)\n        self.assertEqual(res_url, url)\n        self.assertEqual(res_data, None)",
        "begin_line": 172,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_shell_quote#184",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_shell_quote(self)",
        "snippet": "    def test_shell_quote(self):\n        args = ['ffmpeg', '-i', encodeFilename('\u00f1\u20ac\u00df\\'.mp4')]\n        self.assertEqual(shell_quote(args), \"\"\"ffmpeg -i '\u00f1\u20ac\u00df'\"'\"'.mp4'\"\"\")",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_str_to_int#188",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_str_to_int(self)",
        "snippet": "    def test_str_to_int(self):\n        self.assertEqual(str_to_int('123,456'), 123456)\n        self.assertEqual(str_to_int('123.456'), 123456)",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_url_basename#192",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_url_basename(self)",
        "snippet": "    def test_url_basename(self):\n        self.assertEqual(url_basename('http://foo.de/'), '')\n        self.assertEqual(url_basename('http://foo.de/bar/baz'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz?x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz#x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz/'), 'baz')\n        self.assertEqual(\n            url_basename('http://media.w3.org/2010/05/sintel/trailer.mp4'),\n            'trailer.mp4')",
        "begin_line": 192,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_duration#202",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_duration(self)",
        "snippet": "    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('3h 11m 53s'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)\n        self.assertEqual(parse_duration('01:02:03.05'), 3723.05)",
        "begin_line": 202,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_fix_xml_ampersands#222",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_fix_xml_ampersands(self)",
        "snippet": "    def test_fix_xml_ampersands(self):\n        self.assertEqual(\n            fix_xml_ampersands('\"&x=y&z=a'), '\"&amp;x=y&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('\"&amp;x=y&wrong;&z=a'),\n            '\"&amp;x=y&amp;wrong;&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('&amp;&apos;&gt;&lt;&quot;'),\n            '&amp;&apos;&gt;&lt;&quot;')\n        self.assertEqual(\n            fix_xml_ampersands('&#1234;&#x1abC;'), '&#1234;&#x1abC;')\n        self.assertEqual(fix_xml_ampersands('&#&#'), '&amp;#&amp;#')",
        "begin_line": 222,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_paged_list#235",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_paged_list(self)",
        "snippet": "    def test_paged_list(self):\n        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = OnDemandPagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n            iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)\n            got = iapl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n        testPL(5, 2, (), [0, 1, 2, 3, 4])\n        testPL(5, 2, (1,), [1, 2, 3, 4])\n        testPL(5, 2, (2,), [2, 3, 4])\n        testPL(5, 2, (4,), [4])\n        testPL(5, 2, (0, 3), [0, 1, 2])\n        testPL(5, 2, (1, 4), [1, 2, 3])\n        testPL(5, 2, (2, 99), [2, 3, 4])\n        testPL(5, 2, (20, 99), [])",
        "begin_line": 235,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.testPL#236",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.testPL(size, pagesize, sliceargs, expected)",
        "snippet": "        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = OnDemandPagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n            iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)\n            got = iapl.getslice(*sliceargs)\n            self.assertEqual(got, expected)",
        "begin_line": 236,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.get_page#237",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.get_page(pagenum)",
        "snippet": "            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i",
        "begin_line": 237,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_struct_unpack#260",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_struct_unpack(self)",
        "snippet": "    def test_struct_unpack(self):\n        self.assertEqual(struct_unpack('!B', b'\\x00'), (0,))",
        "begin_line": 260,
        "end_line": 261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_read_batch_urls#263",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_read_batch_urls(self)",
        "snippet": "    def test_read_batch_urls(self):\n        f = io.StringIO('''\\xef\\xbb\\xbf foo\n            bar\\r\n            baz\n            # More after this line\\r\n            ; or after this\n            bam''')\n        self.assertEqual(read_batch_urls(f), ['foo', 'bar', 'baz', 'bam'])",
        "begin_line": 263,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urlencode_postdata#272",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urlencode_postdata(self)",
        "snippet": "    def test_urlencode_postdata(self):\n        data = urlencode_postdata({'username': 'foo@bar.com', 'password': '1234'})\n        self.assertTrue(isinstance(data, bytes))",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_iso8601#276",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_iso8601(self)",
        "snippet": "    def test_parse_iso8601(self):\n        self.assertEqual(parse_iso8601('2014-03-23T23:04:26+0100'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26+0000'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26Z'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26.1234Z'), 1395612266)",
        "begin_line": 276,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_strip_jsonp#282",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_strip_jsonp(self)",
        "snippet": "    def test_strip_jsonp(self):\n        stripped = strip_jsonp('cb ([ {\"id\":\"532cb\",\\n\\n\\n\"x\":\\n3}\\n]\\n);')\n        d = json.loads(stripped)\n        self.assertEqual(d, [{\"id\": \"532cb\", \"x\": 3}])\n\n        stripped = strip_jsonp('parseMetadata({\"STATUS\":\"OK\"})\\n\\n\\n//epc')\n        d = json.loads(stripped)\n        self.assertEqual(d, {'STATUS': 'OK'})",
        "begin_line": 282,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_uppercase_escape#291",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_uppercase_escape(self)",
        "snippet": "    def test_uppercase_escape(self):\n        self.assertEqual(uppercase_escape('a\u00e4'), 'a\u00e4')\n        self.assertEqual(uppercase_escape('\\\\U0001d550'), '\ud835\udd50')",
        "begin_line": 291,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_limit_length#295",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_limit_length(self)",
        "snippet": "    def test_limit_length(self):\n        self.assertEqual(limit_length(None, 12), None)\n        self.assertEqual(limit_length('foo', 12), 'foo')\n        self.assertTrue(\n            limit_length('foo bar baz asd', 12).startswith('foo bar'))\n        self.assertTrue('...' in limit_length('foo bar baz asd', 12))",
        "begin_line": 295,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_escape_rfc3986#302",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_escape_rfc3986(self)",
        "snippet": "    def test_escape_rfc3986(self):\n        reserved = \"!*'();:@&=+$,/?#[]\"\n        unreserved = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~'\n        self.assertEqual(escape_rfc3986(reserved), reserved)\n        self.assertEqual(escape_rfc3986(unreserved), unreserved)\n        self.assertEqual(escape_rfc3986('\u0442\u0435\u0441\u0442'), '%D1%82%D0%B5%D1%81%D1%82')\n        self.assertEqual(escape_rfc3986('%D1%82%D0%B5%D1%81%D1%82'), '%D1%82%D0%B5%D1%81%D1%82')\n        self.assertEqual(escape_rfc3986('foo bar'), 'foo%20bar')\n        self.assertEqual(escape_rfc3986('foo%20bar'), 'foo%20bar')",
        "begin_line": 302,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_escape_url#312",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_escape_url(self)",
        "snippet": "    def test_escape_url(self):\n        self.assertEqual(\n            escape_url('http://wowza.imust.org/srv/vod/telemb/new/UPLOAD/UPLOAD/20224_IncendieHavre\u0301_FD.mp4'),\n            'http://wowza.imust.org/srv/vod/telemb/new/UPLOAD/UPLOAD/20224_IncendieHavre%CC%81_FD.mp4'\n        )\n        self.assertEqual(\n            escape_url('http://www.ardmediathek.de/tv/Sturm-der-Liebe/Folge-2036-Zu-Mann-und-Frau-erkl\u00e4rt/Das-Erste/Video?documentId=22673108&bcastId=5290'),\n            'http://www.ardmediathek.de/tv/Sturm-der-Liebe/Folge-2036-Zu-Mann-und-Frau-erkl%C3%A4rt/Das-Erste/Video?documentId=22673108&bcastId=5290'\n        )\n        self.assertEqual(\n            escape_url('http://\u0442\u0435\u0441\u0442.\u0440\u0444/\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442'),\n            'http://\u0442\u0435\u0441\u0442.\u0440\u0444/%D1%84%D1%80%D0%B0%D0%B3%D0%BC%D0%B5%D0%BD%D1%82'\n        )\n        self.assertEqual(\n            escape_url('http://\u0442\u0435\u0441\u0442.\u0440\u0444/\u0430\u0431\u0432?\u0430\u0431\u0432=\u0430\u0431\u0432#\u0430\u0431\u0432'),\n            'http://\u0442\u0435\u0441\u0442.\u0440\u0444/%D0%B0%D0%B1%D0%B2?%D0%B0%D0%B1%D0%B2=%D0%B0%D0%B1%D0%B2#%D0%B0%D0%B1%D0%B2'\n        )\n        self.assertEqual(escape_url('http://vimeo.com/56015672#at=0'), 'http://vimeo.com/56015672#at=0')",
        "begin_line": 312,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_js_to_json_realworld#331",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_js_to_json_realworld(self)",
        "snippet": "    def test_js_to_json_realworld(self):\n        inp = '''{\n            'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"clip\":{\"provider\":\"pseudo\"}\n        }''')\n        json.loads(js_to_json(inp))\n\n        inp = '''{\n            'playlist':[{'controls':{'all':null}}]\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"playlist\":[{\"controls\":{\"all\":null}}]\n        }''')",
        "begin_line": 331,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_js_to_json_edgecases#347",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_js_to_json_edgecases(self)",
        "snippet": "    def test_js_to_json_edgecases(self):\n        on = js_to_json(\"{abc_def:'1\\\\'\\\\\\\\2\\\\\\\\\\\\'3\\\"4'}\")\n        self.assertEqual(json.loads(on), {\"abc_def\": \"1'\\\\2\\\\'3\\\"4\"})\n\n        on = js_to_json('{\"abc\": true}')\n        self.assertEqual(json.loads(on), {'abc': True})",
        "begin_line": 347,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_clean_html#354",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_clean_html(self)",
        "snippet": "    def test_clean_html(self):\n        self.assertEqual(clean_html('a:\\nb'), 'a: b')\n        self.assertEqual(clean_html('a:\\n   \"b\"'), 'a:    \"b\"')",
        "begin_line": 354,
        "end_line": 356,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_intlist_to_bytes#358",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_intlist_to_bytes(self)",
        "snippet": "    def test_intlist_to_bytes(self):\n        self.assertEqual(\n            intlist_to_bytes([0, 1, 127, 128, 255]),\n            b'\\x00\\x01\\x7f\\x80\\xff')",
        "begin_line": 358,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    }
]