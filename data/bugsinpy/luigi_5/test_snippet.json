[
    {
        "name": "test.helpers.with_config.__init__#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#94",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#108",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#110",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 110,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#130",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#147",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#152",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#157",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#168",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#182",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#191",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.temporary_unloaded_module#197",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.temporary_unloaded_module(python_file_contents)",
        "snippet": "def temporary_unloaded_module(python_file_contents):\n    \"\"\" Create an importable module\n\n    Return the name of importable module name given its file contents (source\n    code) \"\"\"\n    with tempfile.NamedTemporaryFile(\n            dir='test/',\n            prefix=\"_test_time_generated_module\",\n            suffix='.py') as temp_module_file:\n        temp_module_file.file.write(python_file_contents)\n        temp_module_file.file.flush()\n        temp_module_path = temp_module_file.name\n        temp_module_name = re.search(r'/(_test_time_generated_module.*).py',\n                                     temp_module_path).group(1)\n        yield temp_module_name",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_task_ids_using_inherits#26",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_task_ids_using_inherits(self)",
        "snippet": "    def test_task_ids_using_inherits(self):\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        luigi.namespace('blah')\n\n        @inherits(ParentTask)\n        class ChildTask(luigi.Task):\n            def requires(self):\n                return self.clone(ParentTask)\n        luigi.namespace('')\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 26,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.test_task_ids_using_inherits#26",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.test_task_ids_using_inherits(self)",
        "snippet": "    def test_task_ids_using_inherits(self):\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        luigi.namespace('blah')\n\n        @inherits(ParentTask)\n        class ChildTask(luigi.Task):\n            def requires(self):\n                return self.clone(ParentTask)\n        luigi.namespace('')\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 26,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.test_task_ids_using_inherits#26",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.test_task_ids_using_inherits(self)",
        "snippet": "    def test_task_ids_using_inherits(self):\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        luigi.namespace('blah')\n\n        @inherits(ParentTask)\n        class ChildTask(luigi.Task):\n            def requires(self):\n                return self.clone(ParentTask)\n        luigi.namespace('')\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 26,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.requires#33",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.requires(self)",
        "snippet": "            def requires(self):\n                return self.clone(ParentTask)",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_task_ids_using_inherits_2#40",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_task_ids_using_inherits_2(self)",
        "snippet": "    def test_task_ids_using_inherits_2(self):\n        # Here we use this decorator in a unnormal way.\n        # But it should still work.\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        decorator = inherits(ParentTask)\n        luigi.namespace('blah')\n\n        class ChildTask(luigi.Task):\n            def requires(self):\n                return self.clone_parent()\n        luigi.namespace('')\n        ChildTask = decorator(ChildTask)\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 40,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.test_task_ids_using_inherits_2#40",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.test_task_ids_using_inherits_2(self)",
        "snippet": "    def test_task_ids_using_inherits_2(self):\n        # Here we use this decorator in a unnormal way.\n        # But it should still work.\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        decorator = inherits(ParentTask)\n        luigi.namespace('blah')\n\n        class ChildTask(luigi.Task):\n            def requires(self):\n                return self.clone_parent()\n        luigi.namespace('')\n        ChildTask = decorator(ChildTask)\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 40,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.test_task_ids_using_inherits_2#40",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.test_task_ids_using_inherits_2(self)",
        "snippet": "    def test_task_ids_using_inherits_2(self):\n        # Here we use this decorator in a unnormal way.\n        # But it should still work.\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        decorator = inherits(ParentTask)\n        luigi.namespace('blah')\n\n        class ChildTask(luigi.Task):\n            def requires(self):\n                return self.clone_parent()\n        luigi.namespace('')\n        ChildTask = decorator(ChildTask)\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 40,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.requires#49",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.requires(self)",
        "snippet": "            def requires(self):\n                return self.clone_parent()",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest._setup_parent_and_child_inherits#57",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest._setup_parent_and_child_inherits(self)",
        "snippet": "    def _setup_parent_and_child_inherits(self):\n        class ParentTask(luigi.Task):\n            my_parameter = luigi.Parameter()\n            class_variable = 'notset'\n\n            def run(self):\n                self.__class__.class_variable = self.my_parameter\n\n            def complete(self):\n                return self.class_variable == 'actuallyset'\n\n        @inherits(ParentTask)\n        class ChildTask(RunOnceTask):\n            def requires(self):\n                return self.clone_parent()\n\n        return ParentTask",
        "begin_line": 57,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask._setup_parent_and_child_inherits#57",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask._setup_parent_and_child_inherits(self)",
        "snippet": "    def _setup_parent_and_child_inherits(self):\n        class ParentTask(luigi.Task):\n            my_parameter = luigi.Parameter()\n            class_variable = 'notset'\n\n            def run(self):\n                self.__class__.class_variable = self.my_parameter\n\n            def complete(self):\n                return self.class_variable == 'actuallyset'\n\n        @inherits(ParentTask)\n        class ChildTask(RunOnceTask):\n            def requires(self):\n                return self.clone_parent()\n\n        return ParentTask",
        "begin_line": 57,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.run#62",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.run(self)",
        "snippet": "            def run(self):\n                self.__class__.class_variable = self.my_parameter",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.complete#65",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.complete(self)",
        "snippet": "            def complete(self):\n                return self.class_variable == 'actuallyset'",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask._setup_parent_and_child_inherits#57",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask._setup_parent_and_child_inherits(self)",
        "snippet": "    def _setup_parent_and_child_inherits(self):\n        class ParentTask(luigi.Task):\n            my_parameter = luigi.Parameter()\n            class_variable = 'notset'\n\n            def run(self):\n                self.__class__.class_variable = self.my_parameter\n\n            def complete(self):\n                return self.class_variable == 'actuallyset'\n\n        @inherits(ParentTask)\n        class ChildTask(RunOnceTask):\n            def requires(self):\n                return self.clone_parent()\n\n        return ParentTask",
        "begin_line": 57,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.requires#70",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.requires(self)",
        "snippet": "            def requires(self):\n                return self.clone_parent()",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_inherits_has_effect_run_child#75",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_inherits_has_effect_run_child(self)",
        "snippet": "    def test_inherits_has_effect_run_child(self):\n        ParentTask = self._setup_parent_and_child_inherits()\n        self.assertTrue(self.run_locally_split('ChildTask --my-parameter actuallyset'))\n        self.assertEqual(ParentTask.class_variable, 'actuallyset')",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_inherits_has_effect_run_parent#80",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_inherits_has_effect_run_parent(self)",
        "snippet": "    def test_inherits_has_effect_run_parent(self):\n        ParentTask = self._setup_parent_and_child_inherits()\n        self.assertTrue(self.run_locally_split('ParentTask --my-parameter actuallyset'))\n        self.assertEqual(ParentTask.class_variable, 'actuallyset')",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest._setup_inherits_inheritence#85",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest._setup_inherits_inheritence(self)",
        "snippet": "    def _setup_inherits_inheritence(self):\n        class InheritedTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @inherits(InheritedTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.InheritedTask._setup_inherits_inheritence#85",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.InheritedTask",
        "signature": "test.util_test.InheritedTask._setup_inherits_inheritence(self)",
        "snippet": "    def _setup_inherits_inheritence(self):\n        class InheritedTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @inherits(InheritedTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask._setup_inherits_inheritence#85",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask._setup_inherits_inheritence(self)",
        "snippet": "    def _setup_inherits_inheritence(self):\n        class InheritedTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @inherits(InheritedTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask._setup_inherits_inheritence#85",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask._setup_inherits_inheritence(self)",
        "snippet": "    def _setup_inherits_inheritence(self):\n        class InheritedTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @inherits(InheritedTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_inherits_has_effect_MRO#98",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_inherits_has_effect_MRO(self)",
        "snippet": "    def test_inherits_has_effect_MRO(self):\n        ChildTask = self._setup_inherits_inheritence()\n        self.assertNotEqual(str(ChildTask.__mro__[0]),\n                            str(ChildTask.__mro__[1]))",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_task_ids_using_requries#104",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_task_ids_using_requries(self)",
        "snippet": "    def test_task_ids_using_requries(self):\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        luigi.namespace('blah')\n\n        @requires(ParentTask)\n        class ChildTask(luigi.Task):\n            pass\n        luigi.namespace('')\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 104,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.test_task_ids_using_requries#104",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.test_task_ids_using_requries(self)",
        "snippet": "    def test_task_ids_using_requries(self):\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        luigi.namespace('blah')\n\n        @requires(ParentTask)\n        class ChildTask(luigi.Task):\n            pass\n        luigi.namespace('')\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 104,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.test_task_ids_using_requries#104",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.test_task_ids_using_requries(self)",
        "snippet": "    def test_task_ids_using_requries(self):\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        luigi.namespace('blah')\n\n        @requires(ParentTask)\n        class ChildTask(luigi.Task):\n            pass\n        luigi.namespace('')\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 104,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_task_ids_using_requries_2#117",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_task_ids_using_requries_2(self)",
        "snippet": "    def test_task_ids_using_requries_2(self):\n        # Here we use this decorator in a unnormal way.\n        # But it should still work.\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        decorator = requires(ParentTask)\n        luigi.namespace('blah')\n\n        class ChildTask(luigi.Task):\n            pass\n        luigi.namespace('')\n        ChildTask = decorator(ChildTask)\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 117,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.test_task_ids_using_requries_2#117",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.test_task_ids_using_requries_2(self)",
        "snippet": "    def test_task_ids_using_requries_2(self):\n        # Here we use this decorator in a unnormal way.\n        # But it should still work.\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        decorator = requires(ParentTask)\n        luigi.namespace('blah')\n\n        class ChildTask(luigi.Task):\n            pass\n        luigi.namespace('')\n        ChildTask = decorator(ChildTask)\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 117,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask.test_task_ids_using_requries_2#117",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask.test_task_ids_using_requries_2(self)",
        "snippet": "    def test_task_ids_using_requries_2(self):\n        # Here we use this decorator in a unnormal way.\n        # But it should still work.\n        class ParentTask(luigi.Task):\n            my_param = luigi.Parameter()\n        decorator = requires(ParentTask)\n        luigi.namespace('blah')\n\n        class ChildTask(luigi.Task):\n            pass\n        luigi.namespace('')\n        ChildTask = decorator(ChildTask)\n        child_task = ChildTask(my_param='hello')\n        self.assertEqual(str(child_task), 'blah.ChildTask(my_param=hello)')\n        self.assertIn(ParentTask(my_param='hello'), luigi.task.flatten(child_task.requires()))",
        "begin_line": 117,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest._setup_parent_and_child#133",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest._setup_parent_and_child(self)",
        "snippet": "    def _setup_parent_and_child(self):\n        class ParentTask(luigi.Task):\n            my_parameter = luigi.Parameter()\n            class_variable = 'notset'\n\n            def run(self):\n                self.__class__.class_variable = self.my_parameter\n\n            def complete(self):\n                return self.class_variable == 'actuallyset'\n\n        @requires(ParentTask)\n        class ChildTask(RunOnceTask):\n            pass\n\n        return ParentTask",
        "begin_line": 133,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask._setup_parent_and_child#133",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask._setup_parent_and_child(self)",
        "snippet": "    def _setup_parent_and_child(self):\n        class ParentTask(luigi.Task):\n            my_parameter = luigi.Parameter()\n            class_variable = 'notset'\n\n            def run(self):\n                self.__class__.class_variable = self.my_parameter\n\n            def complete(self):\n                return self.class_variable == 'actuallyset'\n\n        @requires(ParentTask)\n        class ChildTask(RunOnceTask):\n            pass\n\n        return ParentTask",
        "begin_line": 133,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.run#138",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.run(self)",
        "snippet": "            def run(self):\n                self.__class__.class_variable = self.my_parameter",
        "begin_line": 138,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask.complete#141",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask.complete(self)",
        "snippet": "            def complete(self):\n                return self.class_variable == 'actuallyset'",
        "begin_line": 141,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask._setup_parent_and_child#133",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask._setup_parent_and_child(self)",
        "snippet": "    def _setup_parent_and_child(self):\n        class ParentTask(luigi.Task):\n            my_parameter = luigi.Parameter()\n            class_variable = 'notset'\n\n            def run(self):\n                self.__class__.class_variable = self.my_parameter\n\n            def complete(self):\n                return self.class_variable == 'actuallyset'\n\n        @requires(ParentTask)\n        class ChildTask(RunOnceTask):\n            pass\n\n        return ParentTask",
        "begin_line": 133,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_requires_has_effect_run_child#150",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_requires_has_effect_run_child(self)",
        "snippet": "    def test_requires_has_effect_run_child(self):\n        ParentTask = self._setup_parent_and_child()\n        self.assertTrue(self.run_locally_split('ChildTask --my-parameter actuallyset'))\n        self.assertEqual(ParentTask.class_variable, 'actuallyset')",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_requires_has_effect_run_parent#155",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_requires_has_effect_run_parent(self)",
        "snippet": "    def test_requires_has_effect_run_parent(self):\n        ParentTask = self._setup_parent_and_child()\n        self.assertTrue(self.run_locally_split('ParentTask --my-parameter actuallyset'))\n        self.assertEqual(ParentTask.class_variable, 'actuallyset')",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest._setup_requires_inheritence#160",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest._setup_requires_inheritence(self)",
        "snippet": "    def _setup_requires_inheritence(self):\n        class RequiredTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @requires(RequiredTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 160,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.RequiredTask._setup_requires_inheritence#160",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.RequiredTask",
        "signature": "test.util_test.RequiredTask._setup_requires_inheritence(self)",
        "snippet": "    def _setup_requires_inheritence(self):\n        class RequiredTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @requires(RequiredTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 160,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ParentTask._setup_requires_inheritence#160",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ParentTask",
        "signature": "test.util_test.ParentTask._setup_requires_inheritence(self)",
        "snippet": "    def _setup_requires_inheritence(self):\n        class RequiredTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @requires(RequiredTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 160,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.ChildTask._setup_requires_inheritence#160",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.ChildTask",
        "signature": "test.util_test.ChildTask._setup_requires_inheritence(self)",
        "snippet": "    def _setup_requires_inheritence(self):\n        class RequiredTask(luigi.Task):\n            pass\n\n        class ParentTask(luigi.Task):\n            pass\n\n        @requires(RequiredTask)\n        class ChildTask(ParentTask):\n            pass\n\n        return ChildTask",
        "begin_line": 160,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.util_test.BasicsTest.test_requires_has_effect_MRO#173",
        "src_path": "test/util_test.py",
        "class_name": "test.util_test.BasicsTest",
        "signature": "test.util_test.BasicsTest.test_requires_has_effect_MRO(self)",
        "snippet": "    def test_requires_has_effect_MRO(self):\n        ChildTask = self._setup_requires_inheritence()\n        self.assertNotEqual(str(ChildTask.__mro__[0]),\n                            str(ChildTask.__mro__[1]))",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    }
]