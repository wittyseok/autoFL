[
    {
        "name": "spacy.tests.conftest.pytest_runtest_setup#12",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    def getopt(opt):\n        # When using 'pytest --pyargs spacy' to test an installed copy of\n        # spacy, pytest skips running our pytest_addoption() hook. Later, when\n        # we call getoption(), pytest raises an error, because it doesn't\n        # recognize the option we're asking about. To avoid this, we need to\n        # pass a default value. We default to False, i.e., we act like all the\n        # options weren't given.\n        return item.config.getoption(\"--%s\" % opt, False)\n\n    for opt in [\"slow\"]:\n        if opt in item.keywords and not getopt(opt):\n            pytest.skip(\"need --%s option to run\" % opt)",
        "begin_line": 12,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.getopt#13",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.getopt(opt)",
        "snippet": "    def getopt(opt):\n        # When using 'pytest --pyargs spacy' to test an installed copy of\n        # spacy, pytest skips running our pytest_addoption() hook. Later, when\n        # we call getoption(), pytest raises an error, because it doesn't\n        # recognize the option we're asking about. To avoid this, we need to\n        # pass a default value. We default to False, i.e., we act like all the\n        # options weren't given.\n        return item.config.getoption(\"--%s\" % opt, False)",
        "begin_line": 13,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.tokenizer#31",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.tokenizer()",
        "snippet": "def tokenizer():\n    return get_lang_class(\"xx\").Defaults.create_tokenizer()",
        "begin_line": 31,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.ar_tokenizer#36",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.ar_tokenizer()",
        "snippet": "def ar_tokenizer():\n    return get_lang_class(\"ar\").Defaults.create_tokenizer()",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.bn_tokenizer#41",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.bn_tokenizer()",
        "snippet": "def bn_tokenizer():\n    return get_lang_class(\"bn\").Defaults.create_tokenizer()",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.ca_tokenizer#46",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.ca_tokenizer()",
        "snippet": "def ca_tokenizer():\n    return get_lang_class(\"ca\").Defaults.create_tokenizer()",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.da_tokenizer#51",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.da_tokenizer()",
        "snippet": "def da_tokenizer():\n    return get_lang_class(\"da\").Defaults.create_tokenizer()",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.de_tokenizer#56",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.de_tokenizer()",
        "snippet": "def de_tokenizer():\n    return get_lang_class(\"de\").Defaults.create_tokenizer()",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.el_tokenizer#61",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.el_tokenizer()",
        "snippet": "def el_tokenizer():\n    return get_lang_class(\"el\").Defaults.create_tokenizer()",
        "begin_line": 61,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.en_tokenizer#66",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.en_tokenizer()",
        "snippet": "def en_tokenizer():\n    return get_lang_class(\"en\").Defaults.create_tokenizer()",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.en_vocab#71",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.en_vocab()",
        "snippet": "def en_vocab():\n    return get_lang_class(\"en\").Defaults.create_vocab()",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.es_tokenizer#82",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.es_tokenizer()",
        "snippet": "def es_tokenizer():\n    return get_lang_class(\"es\").Defaults.create_tokenizer()",
        "begin_line": 82,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.fi_tokenizer#87",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.fi_tokenizer()",
        "snippet": "def fi_tokenizer():\n    return get_lang_class(\"fi\").Defaults.create_tokenizer()",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.fr_tokenizer#92",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.fr_tokenizer()",
        "snippet": "def fr_tokenizer():\n    return get_lang_class(\"fr\").Defaults.create_tokenizer()",
        "begin_line": 92,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.ga_tokenizer#97",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.ga_tokenizer()",
        "snippet": "def ga_tokenizer():\n    return get_lang_class(\"ga\").Defaults.create_tokenizer()",
        "begin_line": 97,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.he_tokenizer#102",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.he_tokenizer()",
        "snippet": "def he_tokenizer():\n    return get_lang_class(\"he\").Defaults.create_tokenizer()",
        "begin_line": 102,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.hu_tokenizer#112",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.hu_tokenizer()",
        "snippet": "def hu_tokenizer():\n    return get_lang_class(\"hu\").Defaults.create_tokenizer()",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.id_tokenizer#117",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.id_tokenizer()",
        "snippet": "def id_tokenizer():\n    return get_lang_class(\"id\").Defaults.create_tokenizer()",
        "begin_line": 117,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.it_tokenizer#122",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.it_tokenizer()",
        "snippet": "def it_tokenizer():\n    return get_lang_class(\"it\").Defaults.create_tokenizer()",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.lb_tokenizer#139",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.lb_tokenizer()",
        "snippet": "def lb_tokenizer():\n    return get_lang_class(\"lb\").Defaults.create_tokenizer()",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.lt_tokenizer#144",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.lt_tokenizer()",
        "snippet": "def lt_tokenizer():\n    return get_lang_class(\"lt\").Defaults.create_tokenizer()",
        "begin_line": 144,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.nb_tokenizer#149",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.nb_tokenizer()",
        "snippet": "def nb_tokenizer():\n    return get_lang_class(\"nb\").Defaults.create_tokenizer()",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.nl_tokenizer#154",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.nl_tokenizer()",
        "snippet": "def nl_tokenizer():\n    return get_lang_class(\"nl\").Defaults.create_tokenizer()",
        "begin_line": 154,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.pl_tokenizer#159",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.pl_tokenizer()",
        "snippet": "def pl_tokenizer():\n    return get_lang_class(\"pl\").Defaults.create_tokenizer()",
        "begin_line": 159,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.ro_tokenizer#169",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.ro_tokenizer()",
        "snippet": "def ro_tokenizer():\n    return get_lang_class(\"ro\").Defaults.create_tokenizer()",
        "begin_line": 169,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.sr_tokenizer#186",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.sr_tokenizer()",
        "snippet": "def sr_tokenizer():\n    return get_lang_class(\"sr\").Defaults.create_tokenizer()",
        "begin_line": 186,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.sv_tokenizer#191",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.sv_tokenizer()",
        "snippet": "def sv_tokenizer():\n    return get_lang_class(\"sv\").Defaults.create_tokenizer()",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.tt_tokenizer#207",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.tt_tokenizer()",
        "snippet": "def tt_tokenizer():\n    return get_lang_class(\"tt\").Defaults.create_tokenizer()",
        "begin_line": 207,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.conftest.ur_tokenizer#219",
        "src_path": "spacy/tests/conftest.py",
        "class_name": "spacy.tests.conftest",
        "signature": "spacy.tests.conftest.ur_tokenizer()",
        "snippet": "def ur_tokenizer():\n    return get_lang_class(\"ur\").Defaults.create_tokenizer()",
        "begin_line": 219,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component_decorator_function#13",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component_decorator_function()",
        "snippet": "def test_component_decorator_function():\n    @component(name=\"test\")\n    def test_component(doc):\n        \"\"\"docstring\"\"\"\n        return doc\n\n    assert test_component.name == \"test\"\n    if not is_python2:\n        assert test_component.__doc__ == \"docstring\"\n    assert test_component(\"foo\") == \"foo\"",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component#15",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component(doc)",
        "snippet": "    def test_component(doc):\n        \"\"\"docstring\"\"\"\n        return doc",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component_decorator_class#25",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component_decorator_class()",
        "snippet": "def test_component_decorator_class():\n    @component(name=\"test\")\n    class TestComponent(object):\n        \"\"\"docstring1\"\"\"\n\n        foo = \"bar\"\n\n        def __call__(self, doc):\n            \"\"\"docstring2\"\"\"\n            return doc\n\n        def custom(self, x):\n            \"\"\"docstring3\"\"\"\n            return x\n\n    assert TestComponent.name == \"test\"\n    assert TestComponent.foo == \"bar\"\n    assert hasattr(TestComponent, \"custom\")\n    test_component = TestComponent()\n    assert test_component.foo == \"bar\"\n    assert test_component(\"foo\") == \"foo\"\n    assert hasattr(test_component, \"custom\")\n    assert test_component.custom(\"bar\") == \"bar\"\n    if not is_python2:\n        assert TestComponent.__doc__ == \"docstring1\"\n        assert TestComponent.__call__.__doc__ == \"docstring2\"\n        assert TestComponent.custom.__doc__ == \"docstring3\"\n        assert test_component.__doc__ == \"docstring1\"\n        assert test_component.__call__.__doc__ == \"docstring2\"\n        assert test_component.custom.__doc__ == \"docstring3\"",
        "begin_line": 25,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.TestComponent.test_component_decorator_class#25",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis.TestComponent",
        "signature": "spacy.tests.pipeline.test_analysis.TestComponent.test_component_decorator_class()",
        "snippet": "def test_component_decorator_class():\n    @component(name=\"test\")\n    class TestComponent(object):\n        \"\"\"docstring1\"\"\"\n\n        foo = \"bar\"\n\n        def __call__(self, doc):\n            \"\"\"docstring2\"\"\"\n            return doc\n\n        def custom(self, x):\n            \"\"\"docstring3\"\"\"\n            return x\n\n    assert TestComponent.name == \"test\"\n    assert TestComponent.foo == \"bar\"\n    assert hasattr(TestComponent, \"custom\")\n    test_component = TestComponent()\n    assert test_component.foo == \"bar\"\n    assert test_component(\"foo\") == \"foo\"\n    assert hasattr(test_component, \"custom\")\n    assert test_component.custom(\"bar\") == \"bar\"\n    if not is_python2:\n        assert TestComponent.__doc__ == \"docstring1\"\n        assert TestComponent.__call__.__doc__ == \"docstring2\"\n        assert TestComponent.custom.__doc__ == \"docstring3\"\n        assert test_component.__doc__ == \"docstring1\"\n        assert test_component.__call__.__doc__ == \"docstring2\"\n        assert test_component.custom.__doc__ == \"docstring3\"",
        "begin_line": 25,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.TestComponent.__call__#32",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis.TestComponent",
        "signature": "spacy.tests.pipeline.test_analysis.TestComponent.__call__(self, doc)",
        "snippet": "        def __call__(self, doc):\n            \"\"\"docstring2\"\"\"\n            return doc",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.TestComponent.custom#36",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis.TestComponent",
        "signature": "spacy.tests.pipeline.test_analysis.TestComponent.custom(self, x)",
        "snippet": "        def custom(self, x):\n            \"\"\"docstring3\"\"\"\n            return x",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component_decorator_assigns#57",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component_decorator_assigns()",
        "snippet": "def test_component_decorator_assigns():\n    spacy.language.ENABLE_PIPELINE_ANALYSIS = True\n\n    @component(\"c1\", assigns=[\"token.tag\", \"doc.tensor\"])\n    def test_component1(doc):\n        return doc\n\n    @component(\n        \"c2\", requires=[\"token.tag\", \"token.pos\"], assigns=[\"token.lemma\", \"doc.tensor\"]\n    )\n    def test_component2(doc):\n        return doc\n\n    @component(\"c3\", requires=[\"token.lemma\"], assigns=[\"token._.custom_lemma\"])\n    def test_component3(doc):\n        return doc\n\n    assert \"c1\" in Language.factories\n    assert \"c2\" in Language.factories\n    assert \"c3\" in Language.factories\n\n    nlp = Language()\n    nlp.add_pipe(test_component1)\n    with pytest.warns(UserWarning):\n        nlp.add_pipe(test_component2)\n    nlp.add_pipe(test_component3)\n    assigns_tensor = get_assigns_for_attr(nlp.pipeline, \"doc.tensor\")\n    assert [name for name, _ in assigns_tensor] == [\"c1\", \"c2\"]\n    test_component4 = nlp.create_pipe(\"c1\")\n    assert test_component4.name == \"c1\"\n    assert test_component4.factory == \"c1\"\n    nlp.add_pipe(test_component4, name=\"c4\")\n    assert nlp.pipe_names == [\"c1\", \"c2\", \"c3\", \"c4\"]\n    assert \"c4\" not in Language.factories\n    assert nlp.pipe_factories[\"c1\"] == \"c1\"\n    assert nlp.pipe_factories[\"c4\"] == \"c1\"\n    assigns_tensor = get_assigns_for_attr(nlp.pipeline, \"doc.tensor\")\n    assert [name for name, _ in assigns_tensor] == [\"c1\", \"c2\", \"c4\"]\n    requires_pos = get_requires_for_attr(nlp.pipeline, \"token.pos\")\n    assert [name for name, _ in requires_pos] == [\"c2\"]\n    assert print_summary(nlp, no_print=True)\n    assert nlp(\"hello world\")",
        "begin_line": 57,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component1#61",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component1(doc)",
        "snippet": "    def test_component1(doc):\n        return doc",
        "begin_line": 61,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component2#67",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component2(doc)",
        "snippet": "    def test_component2(doc):\n        return doc",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component3#71",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component3(doc)",
        "snippet": "    def test_component3(doc):\n        return doc",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_component_factories_from_nlp#101",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_component_factories_from_nlp()",
        "snippet": "def test_component_factories_from_nlp():\n    \"\"\"Test that class components can implement a from_nlp classmethod that\n    gives them access to the nlp object and config via the factory.\"\"\"\n\n    class TestComponent5(object):\n        def __call__(self, doc):\n            return doc\n\n    mock = Mock()\n    mock.return_value = TestComponent5()\n    TestComponent5.from_nlp = classmethod(mock)\n    TestComponent5 = component(\"c5\")(TestComponent5)\n\n    assert \"c5\" in Language.factories\n    nlp = Language()\n    pipe = nlp.create_pipe(\"c5\", config={\"foo\": \"bar\"})\n    nlp.add_pipe(pipe)\n    assert nlp(\"hello world\")\n    # The first argument here is the class itself, so we're accepting any here\n    mock.assert_called_once_with(ANY, nlp, foo=\"bar\")",
        "begin_line": 101,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.TestComponent5.test_component_factories_from_nlp#101",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis.TestComponent5",
        "signature": "spacy.tests.pipeline.test_analysis.TestComponent5.test_component_factories_from_nlp()",
        "snippet": "def test_component_factories_from_nlp():\n    \"\"\"Test that class components can implement a from_nlp classmethod that\n    gives them access to the nlp object and config via the factory.\"\"\"\n\n    class TestComponent5(object):\n        def __call__(self, doc):\n            return doc\n\n    mock = Mock()\n    mock.return_value = TestComponent5()\n    TestComponent5.from_nlp = classmethod(mock)\n    TestComponent5 = component(\"c5\")(TestComponent5)\n\n    assert \"c5\" in Language.factories\n    nlp = Language()\n    pipe = nlp.create_pipe(\"c5\", config={\"foo\": \"bar\"})\n    nlp.add_pipe(pipe)\n    assert nlp(\"hello world\")\n    # The first argument here is the class itself, so we're accepting any here\n    mock.assert_called_once_with(ANY, nlp, foo=\"bar\")",
        "begin_line": 101,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.TestComponent5.__call__#106",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis.TestComponent5",
        "signature": "spacy.tests.pipeline.test_analysis.TestComponent5.__call__(self, doc)",
        "snippet": "        def __call__(self, doc):\n            return doc",
        "begin_line": 106,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_analysis_validate_attrs_valid#123",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_analysis_validate_attrs_valid()",
        "snippet": "def test_analysis_validate_attrs_valid():\n    attrs = [\"doc.sents\", \"doc.ents\", \"token.tag\", \"token._.xyz\", \"span._.xyz\"]\n    assert validate_attrs(attrs)\n    for attr in attrs:\n        assert validate_attrs([attr])\n    with pytest.raises(ValueError):\n        validate_attrs([\"doc.sents\", \"doc.xyz\"])",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_analysis_validate_attrs_invalid#145",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_analysis_validate_attrs_invalid(attr)",
        "snippet": "def test_analysis_validate_attrs_invalid(attr):\n    with pytest.raises(ValueError):\n        validate_attrs([attr])",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.test_analysis_validate_attrs_remove_pipe#150",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.test_analysis_validate_attrs_remove_pipe()",
        "snippet": "def test_analysis_validate_attrs_remove_pipe():\n    \"\"\"Test that attributes are validated correctly on remove.\"\"\"\n    spacy.language.ENABLE_PIPELINE_ANALYSIS = True\n\n    @component(\"c1\", assigns=[\"token.tag\"])\n    def c1(doc):\n        return doc\n\n    @component(\"c2\", requires=[\"token.pos\"])\n    def c2(doc):\n        return doc\n\n    nlp = Language()\n    nlp.add_pipe(c1)\n    with pytest.warns(UserWarning):\n        nlp.add_pipe(c2)\n    with pytest.warns(None) as record:\n        nlp.remove_pipe(\"c2\")\n    assert not record.list",
        "begin_line": 150,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.c1#155",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.c1(doc)",
        "snippet": "    def c1(doc):\n        return doc",
        "begin_line": 155,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.pipeline.test_analysis.c2#159",
        "src_path": "spacy/tests/pipeline/test_analysis.py",
        "class_name": "spacy.tests.pipeline.test_analysis",
        "signature": "spacy.tests.pipeline.test_analysis.c2(doc)",
        "snippet": "    def c2(doc):\n        return doc",
        "begin_line": 159,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.util.make_tempdir#23",
        "src_path": "spacy/tests/util.py",
        "class_name": "spacy.tests.util",
        "signature": "spacy.tests.util.make_tempdir()",
        "snippet": "def make_tempdir():\n    d = Path(tempfile.mkdtemp())\n    yield d\n    shutil.rmtree(path2str(d))",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.util.get_doc#29",
        "src_path": "spacy/tests/util.py",
        "class_name": "spacy.tests.util",
        "signature": "spacy.tests.util.get_doc(vocab, words=[], pos=None, heads=None, deps=None, tags=None, ents=None)",
        "snippet": "def get_doc(vocab, words=[], pos=None, heads=None, deps=None, tags=None, ents=None):\n    \"\"\"Create Doc object from given vocab, words and annotations.\"\"\"\n    pos = pos or [\"\"] * len(words)\n    tags = tags or [\"\"] * len(words)\n    heads = heads or [0] * len(words)\n    deps = deps or [\"\"] * len(words)\n    for value in deps + tags + pos:\n        vocab.strings.add(value)\n\n    doc = Doc(vocab, words=words)\n    attrs = doc.to_array([POS, HEAD, DEP])\n    for i, (p, head, dep) in enumerate(zip(pos, heads, deps)):\n        attrs[i, 0] = doc.vocab.strings[p]\n        attrs[i, 1] = head\n        attrs[i, 2] = doc.vocab.strings[dep]\n    doc.from_array([POS, HEAD, DEP], attrs)\n    if ents:\n        doc.ents = [\n            Span(doc, start, end, label=doc.vocab.strings[label])\n            for start, end, label in ents\n        ]\n    if tags:\n        for token in doc:\n            token.tag_ = tags[token.i]\n    return doc",
        "begin_line": 29,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.util.add_vecs_to_vocab#68",
        "src_path": "spacy/tests/util.py",
        "class_name": "spacy.tests.util",
        "signature": "spacy.tests.util.add_vecs_to_vocab(vocab, vectors)",
        "snippet": "def add_vecs_to_vocab(vocab, vectors):\n    \"\"\"Add list of vector tuples to given vocab. All vectors need to have the\n    same length. Format: [(\"text\", [1, 2, 3])]\"\"\"\n    length = len(vectors[0][1])\n    vocab.reset_vectors(width=length)\n    for word, vec in vectors:\n        vocab.set_vector(word, vector=vec)\n    return vocab",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.util.get_cosine#78",
        "src_path": "spacy/tests/util.py",
        "class_name": "spacy.tests.util",
        "signature": "spacy.tests.util.get_cosine(vec1, vec2)",
        "snippet": "def get_cosine(vec1, vec2):\n    \"\"\"Get cosine for two given vectors\"\"\"\n    return numpy.dot(vec1, vec2) / (numpy.linalg.norm(vec1) * numpy.linalg.norm(vec2))",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "spacy.tests.util.assert_docs_equal#83",
        "src_path": "spacy/tests/util.py",
        "class_name": "spacy.tests.util",
        "signature": "spacy.tests.util.assert_docs_equal(doc1, doc2)",
        "snippet": "def assert_docs_equal(doc1, doc2):\n    \"\"\"Compare two Doc objects and assert that they're equal. Tests for tokens,\n    tags, dependencies and entities.\"\"\"\n    assert [t.orth for t in doc1] == [t.orth for t in doc2]\n\n    assert [t.pos for t in doc1] == [t.pos for t in doc2]\n    assert [t.tag for t in doc1] == [t.tag for t in doc2]\n\n    assert [t.head.i for t in doc1] == [t.head.i for t in doc2]\n    assert [t.dep for t in doc1] == [t.dep for t in doc2]\n    if doc1.is_parsed and doc2.is_parsed:\n        assert [s for s in doc1.sents] == [s for s in doc2.sents]\n\n    assert [t.ent_type for t in doc1] == [t.ent_type for t in doc2]\n    assert [t.ent_iob for t in doc1] == [t.ent_iob for t in doc2]\n    assert [ent for ent in doc1.ents] == [ent for ent in doc2.ents]",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    }
]