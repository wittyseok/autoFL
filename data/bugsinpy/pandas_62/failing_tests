coverage run -m pytest pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 66 items

pandas/tests/indexing/test_indexing.py .FFFFFFF..F...................... [ 50%]
...........FFFFFFFFFFFFFFFFFFFFFF                                        [100%]

=================================== FAILURES ===================================
___ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-Float64Index] ____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f882384dfd0>
index = Float64Index([  -0.515078273658373,  -0.4520803966819956, -0.10347864701620513,
              -0.09839019702472662,   0.2365340749870275],
             dtype='float64')
obj = -0.515078    0
-0.452080    1
-0.103479    0
-0.098390    0
 0.236534    0
dtype: int64
idxr = -0.515078    0
-0.452080    1
-0.103479    0
-0.098390    0
 0.236534    0
dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-Index0] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238fa370>
index = Index(['wfb8GkpMi4', 'n4XwlJAPFc', 'eGDIUjqKz0', 'HPxtRom3fz', 'KC6eYS8br6'], dtype='object')
obj = wfb8GkpMi4    0
n4XwlJAPFc    0
eGDIUjqKz0    0
HPxtRom3fz    0
KC6eYS8br6    4
dtype: int64
idxr = wfb8GkpMi4    0
n4XwlJAPFc    0
eGDIUjqKz0    0
HPxtRom3fz    0
KC6eYS8br6    4
dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-Index1] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88237343a0>
index = Index(['םף7צקוץצבל', 'סשנ56פלע15', 'בט7ן7צםן9צ', '4ולסזצךץוי', 'קד2םך8גא2צ'], dtype='object')
obj = םף7צקוץצבל    0
סשנ56פלע15    0
בט7ן7צםן9צ    0
4ולסזצךץוי    0
קד2םך8גא2צ    0
dtype: int64
idxr = םף7צקוץצבל    0
סשנ56פלע15    0
בט7ן7צםן9צ    0
4ולסזצךץוי    0
קד2םך8גא2צ    0
dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
___ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-DatetimeIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823974e50>
index = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
               '2000-01-07'],
              dtype='datetime64[ns]', freq='B')
obj = 2000-01-03    0
2000-01-04    1
2000-01-05    0
2000-01-06    0
2000-01-07    4
Freq: B, dtype: int64
idxr = 2000-01-03    0
2000-01-04    1
2000-01-05    0
2000-01-06    0
2000-01-07    4
Freq: B, dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-PeriodIndex] ____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238b5fd0>
index = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
             '2000-01-07'],
            dtype='period[B]', freq='B')
obj = 2000-01-03    0
2000-01-04    0
2000-01-05    0
2000-01-06    0
2000-01-07    4
Freq: B, dtype: int64
idxr = 2000-01-03    0
2000-01-04    0
2000-01-05    0
2000-01-06    0
2000-01-07    4
Freq: B, dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
__ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-TimedeltaIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f882384d340>
index = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')
obj = 1 days    0
2 days    0
3 days    0
4 days    0
5 days    0
Freq: D, dtype: int64
idxr = 1 days    0
2 days    0
3 days    0
4 days    0
5 days    0
Freq: D, dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-Index2] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238fa3a0>
index = Index([False, True, False, False, False], dtype='object')
obj = False    0
True     0
False    0
False    3
False    0
dtype: int64
idxr = False    0
True     0
False    0
False    3
False    0
dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
_ TestFancy.test_setitem_ndarray_3d[<lambda>-setitem-Series-CategoricalIndex] __

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823981b20>
index = CategoricalIndex(['qvke', 'kUWg', 'RBpc', 'qvke', 'kUWg'], categories=['qvke', 'kUWg', 'RBpc'], ordered=False, dtype='category')
obj = qvke    0
kUWg    0
RBpc    2
qvke    0
kUWg    0
dtype: int64
idxr = qvke    0
kUWg    0
RBpc    2
qvke    0
kUWg    0
dtype: int64
idxr_id = 'setitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-Int64Index] ______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88237449d0>
index = Int64Index([0, 1, 2, 3, 4], dtype='int64')
obj = 0    0
1    0
2    0
3    0
4    0
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823794310>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
_____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-Float64Index] _____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f882375adf0>
index = Float64Index([  -0.515078273658373,  -0.4520803966819956, -0.10347864701620513,
              -0.09839019702472662,   0.2365340749870275],
             dtype='float64')
obj = -0.515078    0
-0.452080    0
-0.103479    0
-0.098390    0
 0.236534    4
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823794770>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
________ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-Index0] ________

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f882383b250>
index = Index(['wfb8GkpMi4', 'n4XwlJAPFc', 'eGDIUjqKz0', 'HPxtRom3fz', 'KC6eYS8br6'], dtype='object')
obj = wfb8GkpMi4    0
n4XwlJAPFc    0
eGDIUjqKz0    0
HPxtRom3fz    0
KC6eYS8br6    4
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823794c70>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
________ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-Index1] ________

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238b5a90>
index = Index(['םף7צקוץצבל', 'סשנ56פלע15', 'בט7ן7צםן9צ', '4ולסזצךץוי', 'קד2םך8גא2צ'], dtype='object')
obj = םף7צקוץצבל    0
סשנ56פלע15    0
בט7ן7צםן9צ    0
4ולסזצךץוי    3
קד2םך8גא2צ    0
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823785ae0>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-DatetimeIndex] _____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823937a60>
index = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
               '2000-01-07'],
              dtype='datetime64[ns]', freq='B')
obj = 2000-01-03    0
2000-01-04    1
2000-01-05    0
2000-01-06    0
2000-01-07    4
Freq: B, dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882379e0e0>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
_____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-PeriodIndex] ______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823981370>
index = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
             '2000-01-07'],
            dtype='period[B]', freq='B')
obj = 2000-01-03    0
2000-01-04    0
2000-01-05    0
2000-01-06    0
2000-01-07    0
Freq: B, dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882379ec20>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-TimedeltaIndex] ____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238fa4f0>
index = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')
obj = 1 days    0
2 days    0
3 days    0
4 days    0
5 days    0
Freq: D, dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882379d220>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
________ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-Index2] ________

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f882345e310>
index = Index([False, True, False, False, False], dtype='object')
obj = False    0
True     0
False    0
False    0
False    4
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823785a40>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-RangeIndex] ______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823460310>
index = RangeIndex(start=0, stop=5, step=1)
obj = 0    0
1    1
2    0
3    0
4    0
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823774ae0>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-IntervalIndex] _____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823480af0>
index = IntervalIndex([(0.0, 20.0], (20.0, 40.0], (40.0, 60.0], (60.0, 80.0], (80.0, 100.0]],
              closed='right',
              dtype='interval[float64]')
obj = (0.0, 20.0]      0
(20.0, 40.0]     0
(40.0, 60.0]     2
(60.0, 80.0]     0
(80.0, 100.0]    0
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823794270>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
___ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-Series-CategoricalIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88237d6be0>
index = CategoricalIndex(['qvke', 'kUWg', 'RBpc', 'qvke', 'kUWg'], categories=['qvke', 'kUWg', 'RBpc'], ordered=False, dtype='category')
obj = qvke    0
kUWg    0
RBpc    0
qvke    0
kUWg    4
dtype: int64
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823761e50>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Int64Index] _____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88239741f0>
index = Int64Index([0, 1, 2, 3, 4], dtype='int64')
obj =           0         1         2         3         4
0  0.000000  0.000000  0.000000  0.000000  0.000000
1  0.000000  0...00000  0.000000
3  0.000000  0.000000  0.000000  0.000000  0.000000
4 -2.363494 -0.089431  0.467477  0.854312 -0.560244
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882379eea0>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
___ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Float64Index] ____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88239749a0>
index = Float64Index([  -0.515078273658373,  -0.4520803966819956, -0.10347864701620513,
              -0.09839019702472662,   0.2365340749870275],
             dtype='float64')
obj =            -0.515078  -0.452080  -0.103479  -0.098390   0.236534
-0.515078  -0.339364  -0.744714   0.272524   -0.72822...  0.000000   0.000000   0.000000    0.00000   0.000000
 0.236534   0.000000   0.000000   0.000000    0.00000   0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882375de50>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Index0] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88239a3670>
index = Index(['wfb8GkpMi4', 'n4XwlJAPFc', 'eGDIUjqKz0', 'HPxtRom3fz', 'KC6eYS8br6'], dtype='object')
obj =             wfb8GkpMi4  n4XwlJAPFc  eGDIUjqKz0  HPxtRom3fz  KC6eYS8br6
wfb8GkpMi4    0.081569    1.614957   -1.091148 ...    0.000000    0.000000     0.00000    0.000000
KC6eYS8br6    0.000000    0.000000    0.000000     0.00000    0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882375d5e0>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Index1] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823834130>
index = Index(['םף7צקוץצבל', 'סשנ56פלע15', 'בט7ן7צםן9צ', '4ולסזצךץוי', 'קד2םך8גא2צ'], dtype='object')
obj =             םף7צקוץצבל  סשנ56פלע15  בט7ן7צםן9צ  4ולסזצךץוי  קד2םך8גא2צ
םף7צקוץצבל    0.000000    0.000000     0.00000 ...   -0.728752    -0.16428    0.005598    0.408261
קד2םך8גא2צ    0.000000    0.000000     0.00000    0.000000    0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f88237746d0>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
___ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-DatetimeIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238b5940>
index = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
               '2000-01-07'],
              dtype='datetime64[ns]', freq='B')
obj =             2000-01-03  2000-01-04  2000-01-05  2000-01-06  2000-01-07
2000-01-03         0.0         0.0         0.0 ...         0.0         0.0         0.0         0.0
2000-01-07         0.0         0.0         0.0         0.0         0.0
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882340c040>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-PeriodIndex] ____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88238b5b80>
index = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
             '2000-01-07'],
            dtype='period[B]', freq='B')
obj =             2000-01-03  2000-01-04  2000-01-05  2000-01-06  2000-01-07
2000-01-03    0.000000    0.000000    0.000000 ...    0.000000    0.000000    0.000000    0.000000
2000-01-07    0.000000    0.000000    0.000000    0.000000    0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882375da40>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
__ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-TimedeltaIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823974700>
index = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')
obj =           1 days    2 days    3 days    4 days    5 days
1 days  0.000000  0.000000  0.000000  0.000000  0.000000
2 da...22991
4 days  0.000000  0.000000  0.000000  0.000000  0.000000
5 days  0.000000  0.000000  0.000000  0.000000  0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823822b30>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
______ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Index2] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f882375ae80>
index = Index([False, True, False, False, False], dtype='object')
obj =           False     True      False     False     False
False  1.844663 -0.082527  1.357973 -0.725702 -1.587333
True  ....000000
False  0.000000  0.000000  0.000000  0.000000  0.000000
False  0.000000  0.000000  0.000000  0.000000  0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882341e860>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
____ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-RangeIndex] _____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823981550>
index = RangeIndex(start=0, stop=5, step=1)
obj =           0         1         2        3         4
0  0.000000  0.000000  0.000000  0.00000  0.000000
1  0.000000  0.0...0.00000  0.000000
3  0.000000  0.000000  0.000000  0.00000  0.000000
4  0.664449  0.084187  0.290519  0.79312  0.961458
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882379e680>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
___ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-IntervalIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f8823532970>
index = IntervalIndex([(0.0, 20.0], (20.0, 40.0], (40.0, 60.0], (60.0, 80.0], (80.0, 100.0]],
              closed='right',
              dtype='interval[float64]')
obj =                (0.0, 20.0]  (20.0, 40.0]  ...  (60.0, 80.0]  (80.0, 100.0]
(0.0, 20.0]      -0.687894     -0.027264  .....000000        0.00000
(80.0, 100.0]     0.000000      0.000000  ...      0.000000        0.00000

[5 rows x 5 columns]
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f882379d180>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
_ TestFancy.test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-CategoricalIndex] __

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f88236e6880>
index = CategoricalIndex(['qvke', 'kUWg', 'RBpc', 'qvke', 'kUWg'], categories=['qvke', 'kUWg', 'RBpc'], ordered=False, dtype='category')
obj =          qvke      kUWg      RBpc      qvke      kUWg
qvke  0.00000  0.000000  0.000000  0.000000  0.000000
kUWg -0.54...0  0.000000
qvke  0.00000  0.000000  0.000000  0.000000  0.000000
kUWg  0.00000  0.000000  0.000000  0.000000  0.000000
idxr = <pandas.core.indexing._iLocIndexer object at 0x7f8823470130>
idxr_id = 'iloc'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "setitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_setitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        if idxr_id == "iloc":
            err = ValueError
            msg = f"Cannot set values with ndim > {obj.ndim}"
        elif (
            isinstance(index, pd.IntervalIndex)
            and idxr_id == "setitem"
            and obj.ndim == 1
        ):
            err = AttributeError
            msg = (
                "'pandas._libs.interval.IntervalTree' object has no attribute 'get_loc'"
            )
        else:
            err = ValueError
            msg = r"Buffer has wrong number of dimensions \(expected 1, got 3\)|"
    
        with pytest.raises(err, match=msg):
>           idxr[nd3] = 0
E           Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:153: Failed
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-Float64Index]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-Index0]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-Index1]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-DatetimeIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-PeriodIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-TimedeltaIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-Index2]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-setitem-Series-CategoricalIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-Int64Index]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-Float64Index]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-Index0]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-Index1]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-DatetimeIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-PeriodIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-TimedeltaIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-Index2]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-RangeIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-IntervalIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-Series-CategoricalIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Int64Index]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Float64Index]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Index0]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Index1]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-DatetimeIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-PeriodIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-TimedeltaIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-Index2]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-RangeIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-IntervalIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_setitem_ndarray_3d[<lambda>-iloc-DataFrame-CategoricalIndex]
======================== 30 failed, 36 passed in 2.71s =========================
