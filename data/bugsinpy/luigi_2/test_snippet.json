[
    {
        "name": "test.contrib.beam_dataflow_test.TestRequires.output#49",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequires",
        "signature": "test.contrib.beam_dataflow_test.TestRequires.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(path='some-input-dir')",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.SimpleTestTask.requires#56",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.SimpleTestTask",
        "signature": "test.contrib.beam_dataflow_test.SimpleTestTask.requires(self)",
        "snippet": "    def requires(self):\n        return TestRequires()",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.SimpleTestTask.output#59",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.SimpleTestTask",
        "signature": "test.contrib.beam_dataflow_test.SimpleTestTask.output(self)",
        "snippet": "    def output(self):\n        return local_target.LocalTarget(path='some-output.txt')",
        "begin_line": 59,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.SimpleTestTask.dataflow_executable#62",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.SimpleTestTask",
        "signature": "test.contrib.beam_dataflow_test.SimpleTestTask.dataflow_executable(self)",
        "snippet": "    def dataflow_executable(self):\n        return ['java', 'com.spotify.luigi.SomeJobClass']",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FullTestTask.requires#88",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FullTestTask",
        "signature": "test.contrib.beam_dataflow_test.FullTestTask.requires(self)",
        "snippet": "    def requires(self):\n        return TestRequires()",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FullTestTask.output#91",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FullTestTask",
        "signature": "test.contrib.beam_dataflow_test.FullTestTask.output(self)",
        "snippet": "    def output(self):\n        return {'output': luigi.LocalTarget(path='some-output.txt')}",
        "begin_line": 91,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FullTestTask.args#94",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FullTestTask",
        "signature": "test.contrib.beam_dataflow_test.FullTestTask.args(self)",
        "snippet": "    def args(self):\n        return ['--extraArg=present']",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FullTestTask.dataflow_executable#97",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FullTestTask",
        "signature": "test.contrib.beam_dataflow_test.FullTestTask.dataflow_executable(self)",
        "snippet": "    def dataflow_executable(self):\n        return ['java', 'com.spotify.luigi.SomeJobClass']",
        "begin_line": 97,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FilePatternsTestTask.requires#104",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FilePatternsTestTask",
        "signature": "test.contrib.beam_dataflow_test.FilePatternsTestTask.requires(self)",
        "snippet": "    def requires(self):\n        return {\n            'input1': TestRequires(),\n            'input2': TestRequires()\n        }",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FilePatternsTestTask.file_pattern#110",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FilePatternsTestTask",
        "signature": "test.contrib.beam_dataflow_test.FilePatternsTestTask.file_pattern(self)",
        "snippet": "    def file_pattern(self):\n        return {'input2': '*.some-ext'}",
        "begin_line": 110,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FilePatternsTestTask.output#113",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FilePatternsTestTask",
        "signature": "test.contrib.beam_dataflow_test.FilePatternsTestTask.output(self)",
        "snippet": "    def output(self):\n        return {'output': luigi.LocalTarget(path='some-output.txt')}",
        "begin_line": 113,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.FilePatternsTestTask.dataflow_executable#116",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.FilePatternsTestTask",
        "signature": "test.contrib.beam_dataflow_test.FilePatternsTestTask.dataflow_executable(self)",
        "snippet": "    def dataflow_executable(self):\n        return ['java', 'com.spotify.luigi.SomeJobClass']",
        "begin_line": 116,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask.dataflow_executable#123",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask",
        "signature": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask.dataflow_executable(self)",
        "snippet": "    def dataflow_executable(self):\n        pass",
        "begin_line": 123,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask.requires#126",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask",
        "signature": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask.requires(self)",
        "snippet": "    def requires(self):\n        return {}",
        "begin_line": 126,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask.output#129",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask",
        "signature": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask.output(self)",
        "snippet": "    def output(self):\n        return {}",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask._mk_cmd_line#132",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask",
        "signature": "test.contrib.beam_dataflow_test.DummyCmdLineTestTask._mk_cmd_line(self)",
        "snippet": "    def _mk_cmd_line(self):\n        return ['echo', '\"hello world\"']",
        "begin_line": 132,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_simple_cmd_line_args#138",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_simple_cmd_line_args(self)",
        "snippet": "    def test_dataflow_simple_cmd_line_args(self):\n        task = SimpleTestTask()\n        task.runner = 'DirectRunner'\n\n        expected = [\n            'java',\n            'com.spotify.luigi.SomeJobClass',\n            '--runner=DirectRunner',\n            '--input=some-input-dir/part-*',\n            '--output=some-output.txt'\n        ]\n\n        self.assertEqual(task._mk_cmd_line(), expected)",
        "begin_line": 138,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_full_cmd_line_args#152",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_full_cmd_line_args(self)",
        "snippet": "    def test_dataflow_full_cmd_line_args(self):\n        full_test_task = FullTestTask()\n        cmd_line_args = full_test_task._mk_cmd_line()\n\n        expected = [\n            'java',\n            'com.spotify.luigi.SomeJobClass',\n            '--runner=DirectRunner',\n            '--project=some-project',\n            '--zone=europe-west1-c',\n            '--region=europe-west1',\n            '--stagingLocation=some-staging',\n            '--tempLocation=some-temp',\n            '--gcpTempLocation=some-gcp-temp',\n            '--numWorkers=1',\n            '--autoscalingAlgorithm=THROUGHPUT_BASED',\n            '--maxNumWorkers=2',\n            '--diskSizeGb=5',\n            '--workerMachineType=n1-standard-4',\n            '--workerDiskType=compute.googleapis.com/projects//zones//diskTypes/pd-ssd',\n            '--network=some-network',\n            '--subnetwork=some-subnetwork',\n            '--jobName=SomeJobName',\n            '--serviceAccount=some-service-account@google.com',\n            '--labels={\"k1\": \"v1\"}',\n            '--extraArg=present',\n            '--input=some-input-dir/part-*',\n            '--output=some-output.txt'\n        ]\n\n        self.assertEqual(json.loads(cmd_line_args[19][9:]), {'k1': 'v1'})\n        self.assertEqual(cmd_line_args, expected)",
        "begin_line": 152,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_with_file_patterns#185",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_with_file_patterns(self)",
        "snippet": "    def test_dataflow_with_file_patterns(self):\n        cmd_line_args = FilePatternsTestTask()._mk_cmd_line()\n\n        self.assertIn('--input1=some-input-dir/part-*', cmd_line_args)\n        self.assertIn('--input2=some-input-dir/*.some-ext', cmd_line_args)",
        "begin_line": 185,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_with_invalid_file_patterns#191",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_with_invalid_file_patterns(self)",
        "snippet": "    def test_dataflow_with_invalid_file_patterns(self):\n        task = FilePatternsTestTask()\n        task.file_pattern = MagicMock(return_value='notadict')\n        with self.assertRaises(ValueError):\n            task._mk_cmd_line()",
        "begin_line": 191,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskListOfTargetsInput.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskListOfTargetsInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskListOfTargetsInput.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresListOfTargets.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresListOfTargets",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresListOfTargets.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresListOfTargets.output#200",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresListOfTargets",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresListOfTargets.output(self)",
        "snippet": "                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskListOfTargetsInput.requires#204",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskListOfTargetsInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskListOfTargetsInput.requires(self)",
        "snippet": "            def requires(self):\n                return self.TestRequiresListOfTargets()",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskListOfTuplesInput.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskListOfTuplesInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskListOfTuplesInput.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresListOfTuples.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresListOfTuples",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresListOfTuples.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresListOfTuples.output#213",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresListOfTuples",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresListOfTuples.output(self)",
        "snippet": "                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskListOfTuplesInput.requires#217",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskListOfTuplesInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskListOfTuplesInput.requires(self)",
        "snippet": "            def requires(self):\n                return self.TestRequiresListOfTuples()",
        "begin_line": 217,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictInput.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictInput.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresDict.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresDict",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresDict.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresDict.output#227",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresDict",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresDict.output(self)",
        "snippet": "                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictInput.requires#231",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictInput.requires(self)",
        "snippet": "            def requires(self):\n                return self.TestRequiresDict()",
        "begin_line": 231,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskTupleInput.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskTupleInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskTupleInput.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresTuple.test_dataflow_input_arg_formatting#197",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresTuple",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresTuple.test_dataflow_input_arg_formatting(self)",
        "snippet": "    def test_dataflow_input_arg_formatting(self):\n        class TestTaskListOfTargetsInput(SimpleTestTask):\n            class TestRequiresListOfTargets(luigi.ExternalTask):\n                def output(self):\n                    return [luigi.LocalTarget(path='some-input-1'),\n                            luigi.LocalTarget(path='some-input-2')]\n\n            def requires(self):\n                return self.TestRequiresListOfTargets()\n\n        task_list_input = TestTaskListOfTargetsInput()\n        self.assertEqual(task_list_input._format_input_args(),\n                         ['--input=some-input-1/part-*,some-input-2/part-*'])\n\n        class TestTaskListOfTuplesInput(SimpleTestTask):\n            class TestRequiresListOfTuples(luigi.ExternalTask):\n                def output(self):\n                    return [('input1', luigi.LocalTarget(path='some-input-1')),\n                            ('input2', luigi.LocalTarget(path='some-input-2'))]\n\n            def requires(self):\n                return self.TestRequiresListOfTuples()\n\n        task_list_tuples_input = TestTaskListOfTuplesInput()\n        self.assertEqual(task_list_tuples_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskDictInput(SimpleTestTask):\n            class TestRequiresDict(luigi.ExternalTask):\n                def output(self):\n                    return {'input1': luigi.LocalTarget(path='some-input-1'),\n                            'input2': luigi.LocalTarget(path='some-input-2')}\n\n            def requires(self):\n                return self.TestRequiresDict()\n\n        task_dict_input = TestTaskDictInput()\n        self.assertEqual(task_dict_input._format_input_args(),\n                         ['--input1=some-input-1/part-*',\n                          '--input2=some-input-2/part-*'])\n\n        class TestTaskTupleInput(SimpleTestTask):\n            class TestRequiresTuple(luigi.ExternalTask):\n                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')\n\n            def requires(self):\n                return self.TestRequiresTuple()\n\n        task_tuple_input = TestTaskTupleInput()\n        self.assertEqual(task_tuple_input._format_input_args(),\n                         ['--some-key=some-input/part-*'])",
        "begin_line": 197,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestRequiresTuple.output#241",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestRequiresTuple",
        "signature": "test.contrib.beam_dataflow_test.TestRequiresTuple.output(self)",
        "snippet": "                def output(self):\n                    return 'some-key', luigi.LocalTarget(path='some-input')",
        "begin_line": 241,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskTupleInput.requires#244",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskTupleInput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskTupleInput.requires(self)",
        "snippet": "            def requires(self):\n                return self.TestRequiresTuple()",
        "begin_line": 244,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_task_output_arg_completion#251",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_task_output_arg_completion(self)",
        "snippet": "    def test_task_output_arg_completion(self):\n        class TestCompleteTarget(luigi.Target):\n            def exists(self):\n                return True\n\n        class TestIncompleteTarget(luigi.Target):\n            def exists(self):\n                return False\n\n        class TestTaskDictOfCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfCompleteOutput().complete(), True)\n\n        class TestTaskDictOfIncompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfIncompleteOutput().complete(), False)\n\n        class TestTaskDictOfMixedCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfMixedCompleteOutput().complete(), False)",
        "begin_line": 251,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestCompleteTarget.test_task_output_arg_completion#251",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestCompleteTarget",
        "signature": "test.contrib.beam_dataflow_test.TestCompleteTarget.test_task_output_arg_completion(self)",
        "snippet": "    def test_task_output_arg_completion(self):\n        class TestCompleteTarget(luigi.Target):\n            def exists(self):\n                return True\n\n        class TestIncompleteTarget(luigi.Target):\n            def exists(self):\n                return False\n\n        class TestTaskDictOfCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfCompleteOutput().complete(), True)\n\n        class TestTaskDictOfIncompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfIncompleteOutput().complete(), False)\n\n        class TestTaskDictOfMixedCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfMixedCompleteOutput().complete(), False)",
        "begin_line": 251,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestCompleteTarget.exists#253",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestCompleteTarget",
        "signature": "test.contrib.beam_dataflow_test.TestCompleteTarget.exists(self)",
        "snippet": "            def exists(self):\n                return True",
        "begin_line": 253,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestIncompleteTarget.test_task_output_arg_completion#251",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestIncompleteTarget",
        "signature": "test.contrib.beam_dataflow_test.TestIncompleteTarget.test_task_output_arg_completion(self)",
        "snippet": "    def test_task_output_arg_completion(self):\n        class TestCompleteTarget(luigi.Target):\n            def exists(self):\n                return True\n\n        class TestIncompleteTarget(luigi.Target):\n            def exists(self):\n                return False\n\n        class TestTaskDictOfCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfCompleteOutput().complete(), True)\n\n        class TestTaskDictOfIncompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfIncompleteOutput().complete(), False)\n\n        class TestTaskDictOfMixedCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfMixedCompleteOutput().complete(), False)",
        "begin_line": 251,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestIncompleteTarget.exists#257",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestIncompleteTarget",
        "signature": "test.contrib.beam_dataflow_test.TestIncompleteTarget.exists(self)",
        "snippet": "            def exists(self):\n                return False",
        "begin_line": 257,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictOfCompleteOutput.test_task_output_arg_completion#251",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictOfCompleteOutput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictOfCompleteOutput.test_task_output_arg_completion(self)",
        "snippet": "    def test_task_output_arg_completion(self):\n        class TestCompleteTarget(luigi.Target):\n            def exists(self):\n                return True\n\n        class TestIncompleteTarget(luigi.Target):\n            def exists(self):\n                return False\n\n        class TestTaskDictOfCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfCompleteOutput().complete(), True)\n\n        class TestTaskDictOfIncompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfIncompleteOutput().complete(), False)\n\n        class TestTaskDictOfMixedCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfMixedCompleteOutput().complete(), False)",
        "begin_line": 251,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictOfCompleteOutput.output#261",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictOfCompleteOutput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictOfCompleteOutput.output(self)",
        "snippet": "            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }",
        "begin_line": 261,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictOfIncompleteOutput.test_task_output_arg_completion#251",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictOfIncompleteOutput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictOfIncompleteOutput.test_task_output_arg_completion(self)",
        "snippet": "    def test_task_output_arg_completion(self):\n        class TestCompleteTarget(luigi.Target):\n            def exists(self):\n                return True\n\n        class TestIncompleteTarget(luigi.Target):\n            def exists(self):\n                return False\n\n        class TestTaskDictOfCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfCompleteOutput().complete(), True)\n\n        class TestTaskDictOfIncompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfIncompleteOutput().complete(), False)\n\n        class TestTaskDictOfMixedCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfMixedCompleteOutput().complete(), False)",
        "begin_line": 251,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictOfIncompleteOutput.output#269",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictOfIncompleteOutput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictOfIncompleteOutput.output(self)",
        "snippet": "            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }",
        "begin_line": 269,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictOfMixedCompleteOutput.test_task_output_arg_completion#251",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictOfMixedCompleteOutput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictOfMixedCompleteOutput.test_task_output_arg_completion(self)",
        "snippet": "    def test_task_output_arg_completion(self):\n        class TestCompleteTarget(luigi.Target):\n            def exists(self):\n                return True\n\n        class TestIncompleteTarget(luigi.Target):\n            def exists(self):\n                return False\n\n        class TestTaskDictOfCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfCompleteOutput().complete(), True)\n\n        class TestTaskDictOfIncompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output\": TestIncompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfIncompleteOutput().complete(), False)\n\n        class TestTaskDictOfMixedCompleteOutput(SimpleTestTask):\n            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }\n\n        self.assertEqual(TestTaskDictOfMixedCompleteOutput().complete(), False)",
        "begin_line": 251,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.TestTaskDictOfMixedCompleteOutput.output#277",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.TestTaskDictOfMixedCompleteOutput",
        "signature": "test.contrib.beam_dataflow_test.TestTaskDictOfMixedCompleteOutput.output(self)",
        "snippet": "            def output(self):\n                return {\n                    \"output1\": TestIncompleteTarget(),\n                    \"output2\": TestCompleteTarget()\n                }",
        "begin_line": 277,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_get_target_path#285",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_get_target_path(self)",
        "snippet": "    def test_get_target_path(self):\n        bq_target = bigquery.BigQueryTarget(\"p\", \"d\", \"t\", client=\"fake_client\")\n        self.assertEqual(\n            SimpleTestTask.get_target_path(bq_target),\n            \"p:d.t\")\n\n        gcs_target = gcs.GCSTarget(\"gs://foo/bar.txt\", client=\"fake_client\")\n        self.assertEqual(\n            SimpleTestTask.get_target_path(gcs_target),\n            \"gs://foo/bar.txt\")\n\n        with self.assertRaises(ValueError):\n            SimpleTestTask.get_target_path(\"not_a_target\")",
        "begin_line": 285,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_runner_resolution#299",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_runner_resolution(self)",
        "snippet": "    def test_dataflow_runner_resolution(self):\n        task = SimpleTestTask()\n        # Test that supported runners are passed through\n        for runner in [\"DirectRunner\", \"DataflowRunner\"]:\n            task.runner = runner\n            self.assertEqual(task._get_runner(), runner)\n\n        # Test that unsupported runners throw an error\n        task.runner = \"UnsupportedRunner\"\n        with self.assertRaises(ValueError):\n            task._get_runner()",
        "begin_line": 299,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_successful_run_callbacks#311",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_successful_run_callbacks(self)",
        "snippet": "    def test_dataflow_successful_run_callbacks(self):\n        task = DummyCmdLineTestTask()\n\n        task.before_run = MagicMock()\n        task.validate_output = MagicMock()\n        task.on_successful_run = MagicMock()\n        task.on_successful_output_validation = MagicMock()\n        task.cleanup_on_error = MagicMock()\n\n        task.run()\n\n        task.before_run.assert_called_once_with()\n        task.validate_output.assert_called_once_with()\n        task.cleanup_on_error.assert_not_called()\n        task.on_successful_run.assert_called_once_with()\n        task.on_successful_output_validation.assert_called_once_with()",
        "begin_line": 311,
        "end_line": 326,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_successful_run_invalid_output_callbacks#328",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_successful_run_invalid_output_callbacks(self)",
        "snippet": "    def test_dataflow_successful_run_invalid_output_callbacks(self):\n        task = DummyCmdLineTestTask()\n\n        task.before_run = MagicMock()\n        task.validate_output = MagicMock(return_value=False)\n        task.on_successful_run = MagicMock()\n        task.on_successful_output_validation = MagicMock()\n        task.cleanup_on_error = MagicMock()\n\n        with self.assertRaises(ValueError):\n            task.run()\n\n        task.before_run.assert_called_once_with()\n        task.validate_output.assert_called_once_with()\n        task.cleanup_on_error.assert_called_once_with(mock.ANY)\n        task.on_successful_run.assert_called_once_with()\n        task.on_successful_output_validation.assert_not_called()",
        "begin_line": 328,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_failed_run_callbacks#348",
        "src_path": "test/contrib/beam_dataflow_test.py",
        "class_name": "test.contrib.beam_dataflow_test.BeamDataflowTest",
        "signature": "test.contrib.beam_dataflow_test.BeamDataflowTest.test_dataflow_failed_run_callbacks(self, popen, os_exit)",
        "snippet": "    def test_dataflow_failed_run_callbacks(self, popen, os_exit):\n        task = DummyCmdLineTestTask()\n\n        task.before_run = MagicMock()\n        task.validate_output = MagicMock()\n        task.on_successful_run = MagicMock()\n        task.on_successful_output_validation = MagicMock()\n        task.cleanup_on_error = MagicMock()\n\n        with self.assertRaises(OSError):\n            task.run()\n\n        task.before_run.assert_called_once_with()\n        task.validate_output.assert_not_called()\n        task.cleanup_on_error.assert_called_once_with(mock.ANY)\n        task.on_successful_run.assert_not_called()\n        task.on_successful_output_validation.assert_not_called()",
        "begin_line": 348,
        "end_line": 364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__init__#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#94",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#108",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#110",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 110,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#130",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#147",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#152",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#157",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#168",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#182",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#191",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.temporary_unloaded_module#197",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.temporary_unloaded_module(python_file_contents)",
        "snippet": "def temporary_unloaded_module(python_file_contents):\n    \"\"\" Create an importable module\n\n    Return the name of importable module name given its file contents (source\n    code) \"\"\"\n    with tempfile.NamedTemporaryFile(\n            dir='test/',\n            prefix=\"_test_time_generated_module\",\n            suffix='.py') as temp_module_file:\n        temp_module_file.file.write(python_file_contents)\n        temp_module_file.file.flush()\n        temp_module_path = temp_module_file.name\n        temp_module_name = re.search(r'/(_test_time_generated_module.*).py',\n                                     temp_module_path).group(1)\n        yield temp_module_name",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]