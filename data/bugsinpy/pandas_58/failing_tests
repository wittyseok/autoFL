coverage run -m pytest pandas/tests/arrays/categorical/test_constructors.py::TestCategoricalConstructors::test_from_codes_with_nullable_int
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/arrays/categorical/test_constructors.py F                   [100%]

=================================== FAILURES ===================================
________ TestCategoricalConstructors.test_from_codes_with_nullable_int _________

self = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x7f151904d910>

    def test_from_codes_with_nullable_int(self):
        codes = pd.array([0, 1], dtype="Int64")
        categories = ["a", "b"]
    
>       result = Categorical.from_codes(codes, categories=categories)

pandas/tests/arrays/categorical/test_constructors.py:567: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pandas.core.arrays.categorical.Categorical'>
codes = array([0, 1], dtype=object), categories = ['a', 'b'], ordered = None
dtype = CategoricalDtype(categories=['a', 'b'], ordered=None)

    @classmethod
    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):
        """
        Make a Categorical type from codes and categories or dtype.
    
        This constructor is useful if you already have codes and
        categories/dtype and so do not need the (computation intensive)
        factorization step, which is usually done on the constructor.
    
        If your data does not follow this convention, please use the normal
        constructor.
    
        Parameters
        ----------
        codes : array-like of int
            An integer array, where each integer points to a category in
            categories or dtype.categories, or else is -1 for NaN.
        categories : index-like, optional
            The categories for the categorical. Items need to be unique.
            If the categories are not given here, then they must be provided
            in `dtype`.
        ordered : bool, optional
            Whether or not this categorical is treated as an ordered
            categorical. If not given here or in `dtype`, the resulting
            categorical will be unordered.
        dtype : CategoricalDtype or "category", optional
            If :class:`CategoricalDtype`, cannot be used together with
            `categories` or `ordered`.
    
            .. versionadded:: 0.24.0
    
               When `dtype` is provided, neither `categories` nor `ordered`
               should be provided.
    
        Returns
        -------
        Categorical
    
        Examples
        --------
        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)
        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)
        [a, b, a, b]
        Categories (2, object): [a < b]
        """
        dtype = CategoricalDtype._from_values_or_dtype(
            categories=categories, ordered=ordered, dtype=dtype
        )
        if dtype.categories is None:
            msg = (
                "The categories must be provided in 'categories' or "
                "'dtype'. Both were None."
            )
            raise ValueError(msg)
    
        codes = np.asarray(codes)  # #21767
        if len(codes) and not is_integer_dtype(codes):
>           raise ValueError("codes need to be array-like integers")
E           ValueError: codes need to be array-like integers

pandas/core/arrays/categorical.py:649: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/categorical/test_constructors.py::TestCategoricalConstructors::test_from_codes_with_nullable_int
============================== 1 failed in 0.30s ===============================

coverage run -m pytest pandas/tests/arrays/categorical/test_constructors.py::TestCategoricalConstructors::test_from_codes_with_nullable_int_na_raises
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/arrays/categorical/test_constructors.py F                   [100%]

=================================== FAILURES ===================================
___ TestCategoricalConstructors.test_from_codes_with_nullable_int_na_raises ____

self = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x7fed86c02910>

    def test_from_codes_with_nullable_int_na_raises(self):
        codes = pd.array([0, None], dtype="Int64")
        categories = ["a", "b"]
    
        msg = "codes cannot contain NA values"
        with pytest.raises(ValueError, match=msg):
>           Categorical.from_codes(codes, categories=categories)

pandas/tests/arrays/categorical/test_constructors.py:578: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pandas.core.arrays.categorical.Categorical'>
codes = array([0, <NA>], dtype=object), categories = ['a', 'b'], ordered = None
dtype = CategoricalDtype(categories=['a', 'b'], ordered=None)

    @classmethod
    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):
        """
        Make a Categorical type from codes and categories or dtype.
    
        This constructor is useful if you already have codes and
        categories/dtype and so do not need the (computation intensive)
        factorization step, which is usually done on the constructor.
    
        If your data does not follow this convention, please use the normal
        constructor.
    
        Parameters
        ----------
        codes : array-like of int
            An integer array, where each integer points to a category in
            categories or dtype.categories, or else is -1 for NaN.
        categories : index-like, optional
            The categories for the categorical. Items need to be unique.
            If the categories are not given here, then they must be provided
            in `dtype`.
        ordered : bool, optional
            Whether or not this categorical is treated as an ordered
            categorical. If not given here or in `dtype`, the resulting
            categorical will be unordered.
        dtype : CategoricalDtype or "category", optional
            If :class:`CategoricalDtype`, cannot be used together with
            `categories` or `ordered`.
    
            .. versionadded:: 0.24.0
    
               When `dtype` is provided, neither `categories` nor `ordered`
               should be provided.
    
        Returns
        -------
        Categorical
    
        Examples
        --------
        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)
        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)
        [a, b, a, b]
        Categories (2, object): [a < b]
        """
        dtype = CategoricalDtype._from_values_or_dtype(
            categories=categories, ordered=ordered, dtype=dtype
        )
        if dtype.categories is None:
            msg = (
                "The categories must be provided in 'categories' or "
                "'dtype'. Both were None."
            )
            raise ValueError(msg)
    
        codes = np.asarray(codes)  # #21767
        if len(codes) and not is_integer_dtype(codes):
>           raise ValueError("codes need to be array-like integers")
E           ValueError: codes need to be array-like integers

pandas/core/arrays/categorical.py:649: ValueError

During handling of the above exception, another exception occurred:

self = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x7fed86c02910>

    def test_from_codes_with_nullable_int_na_raises(self):
        codes = pd.array([0, None], dtype="Int64")
        categories = ["a", "b"]
    
        msg = "codes cannot contain NA values"
        with pytest.raises(ValueError, match=msg):
>           Categorical.from_codes(codes, categories=categories)
E           AssertionError: Pattern 'codes cannot contain NA values' does not match 'codes need to be array-like integers'

pandas/tests/arrays/categorical/test_constructors.py:578: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/categorical/test_constructors.py::TestCategoricalConstructors::test_from_codes_with_nullable_int_na_raises
============================== 1 failed in 0.32s ===============================
