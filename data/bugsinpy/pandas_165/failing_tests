coverage run -m pytest pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 14 items

pandas/tests/arithmetic/test_datetime64.py FFFFFFFFFFFFFF                [100%]

=================================== FAILURES ===================================
___________ TestDatetimeIndexArithmetic.test_dta_add_sub_index[None] ___________

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b29a3a0>
tz_naive_fixture = None

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
__________ TestDatetimeIndexArithmetic.test_dta_add_sub_index['UTC'] ___________

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b034550>
tz_naive_fixture = 'UTC'

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
_______ TestDatetimeIndexArithmetic.test_dta_add_sub_index['US/Eastern'] _______

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b034e80>
tz_naive_fixture = 'US/Eastern'

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
_______ TestDatetimeIndexArithmetic.test_dta_add_sub_index['Asia/Tokyo'] _______

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b212f40>
tz_naive_fixture = 'Asia/Tokyo'

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
__ TestDatetimeIndexArithmetic.test_dta_add_sub_index['dateutil/US/Pacific'] ___

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b21b430>
tz_naive_fixture = 'dateutil/US/Pacific'

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
_ TestDatetimeIndexArithmetic.test_dta_add_sub_index['dateutil/Asia/Singapore'] _

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0ae3a130>
tz_naive_fixture = 'dateutil/Asia/Singapore'

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
_________ TestDatetimeIndexArithmetic.test_dta_add_sub_index[tzutc()] __________

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b10cfd0>
tz_naive_fixture = tzutc()

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
________ TestDatetimeIndexArithmetic.test_dta_add_sub_index[tzlocal()] _________

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b01c430>
tz_naive_fixture = tzlocal()

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
__ TestDatetimeIndexArithmetic.test_dta_add_sub_index[pytz.FixedOffset(300)] ___

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b01cd00>
tz_naive_fixture = pytz.FixedOffset(300)

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
__________ TestDatetimeIndexArithmetic.test_dta_add_sub_index[<UTC>] ___________

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b01c790>
tz_naive_fixture = <UTC>

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
__ TestDatetimeIndexArithmetic.test_dta_add_sub_index[pytz.FixedOffset(-300)] __

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0b1e55e0>
tz_naive_fixture = pytz.FixedOffset(-300)

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
__ TestDatetimeIndexArithmetic.test_dta_add_sub_index[datetime.timezone.utc] ___

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0afa2d60>
tz_naive_fixture = datetime.timezone.utc

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
_ TestDatetimeIndexArithmetic.test_dta_add_sub_index[datetime.timezone(datetime.timedelta(seconds=3600))] _

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0ae84100>
tz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
_ TestDatetimeIndexArithmetic.test_dta_add_sub_index[datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')] _

self = <pandas.tests.arithmetic.test_datetime64.TestDatetimeIndexArithmetic object at 0x7fde0abe9430>
tz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')

    def test_dta_add_sub_index(self, tz_naive_fixture):
        # Check that DatetimeArray defers to Index classes
        dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
        dta = dti.array
        result = dta - dti
        expected = dti - dti
>       tm.assert_index_equal(result, expected)

pandas/tests/arithmetic/test_datetime64.py:2258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <TimedeltaArray>
['0 days', '0 days', '0 days']
Length: 3, dtype: timedelta64[ns]
right = TimedeltaIndex(['0 days', '0 days', '0 days'], dtype='timedelta64[ns]', freq=None)
cls = <class 'pandas.core.indexes.base.Index'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
    
        err_msg = "{name} Expected type {exp_type}, found {act_type} instead"
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
>           raise AssertionError(
                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))
            )
E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'pandas.core.arrays.timedeltas.TimedeltaArray'> instead

pandas/util/testing.py:391: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[None]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index['UTC']
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index['US/Eastern']
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index['Asia/Tokyo']
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index['dateutil/US/Pacific']
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index['dateutil/Asia/Singapore']
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[tzutc()]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[tzlocal()]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[pytz.FixedOffset(300)]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[<UTC>]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[pytz.FixedOffset(-300)]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[datetime.timezone.utc]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[datetime.timezone(datetime.timedelta(seconds=3600))]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetimeIndexArithmetic::test_dta_add_sub_index[datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')]
============================== 14 failed in 3.23s ==============================
