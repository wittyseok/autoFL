coverage run -m pytest pandas/tests/series/methods/test_update.py::TestUpdate::test_update_extension_array_series
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 3 items

pandas/tests/series/methods/test_update.py FFF                           [100%]

=================================== FAILURES ===================================
___ TestUpdate.test_update_extension_array_series[result0-target0-expected0] ___

self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x7f31fc621d90>
result = 0       a
1    <NA>
dtype: string
target = 0    <NA>
1       b
dtype: string
expected = 0    a
1    b
dtype: string

    @pytest.mark.parametrize(
        "result, target, expected",
        [
            (
                Series(["a", None], dtype="string"),
                Series([None, "b"], dtype="string"),
                Series(["a", "b"], dtype="string"),
            ),
            (
                Series([1, None], dtype="Int64"),
                Series([None, 2], dtype="Int64"),
                Series([1, 2], dtype="Int64"),
            ),
            (
                Series([True, None], dtype="boolean"),
                Series([None, False], dtype="boolean"),
                Series([True, False], dtype="boolean"),
            ),
        ],
    )
    def test_update_extension_array_series(self, result, target, expected):
>       result.update(target)

pandas/tests/series/methods/test_update.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:2855: in update
    self._mgr = self._mgr.putmask(mask=mask, new=other)
pandas/core/internals/managers.py:544: in putmask
    return self.apply(
pandas/core/internals/managers.py:397: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1607: in putmask
    new_values[mask] = new
pandas/core/arrays/string_.py:263: in __setitem__
    super().__setitem__(key, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <StringArray>
['a', <NA>]
Length: 2, dtype: string
key = array([False,  True]), value = array([<NA>, 'b'], dtype=object)

    def __setitem__(self, key, value) -> None:
        value = extract_array(value, extract_numpy=True)
    
        key = check_array_indexer(self, key)
        scalar_value = lib.is_scalar(value)
    
        if not scalar_value:
            value = np.asarray(value, dtype=self._ndarray.dtype)
    
>       self._ndarray[key] = value
E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true

pandas/core/arrays/numpy_.py:279: ValueError
___ TestUpdate.test_update_extension_array_series[result1-target1-expected1] ___

self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x7f31e83da5e0>
result = 0       1
1    <NA>
dtype: Int64
target = 0    <NA>
1       2
dtype: Int64, expected = 0    1
1    2
dtype: Int64

    @pytest.mark.parametrize(
        "result, target, expected",
        [
            (
                Series(["a", None], dtype="string"),
                Series([None, "b"], dtype="string"),
                Series(["a", "b"], dtype="string"),
            ),
            (
                Series([1, None], dtype="Int64"),
                Series([None, 2], dtype="Int64"),
                Series([1, 2], dtype="Int64"),
            ),
            (
                Series([True, None], dtype="boolean"),
                Series([None, False], dtype="boolean"),
                Series([True, False], dtype="boolean"),
            ),
        ],
    )
    def test_update_extension_array_series(self, result, target, expected):
>       result.update(target)

pandas/tests/series/methods/test_update.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:2855: in update
    self._mgr = self._mgr.putmask(mask=mask, new=other)
pandas/core/internals/managers.py:544: in putmask
    return self.apply(
pandas/core/internals/managers.py:397: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1607: in putmask
    new_values[mask] = new
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <IntegerArray>
[1, <NA>]
Length: 2, dtype: Int64
key = array([False,  True]), value = array([1, 2])

    def __setitem__(self, key, value) -> None:
        _is_scalar = is_scalar(value)
        if _is_scalar:
            value = [value]
        value, mask = coerce_to_array(value, dtype=self.dtype)
    
        if _is_scalar:
            value = value[0]
            mask = mask[0]
    
        key = check_array_indexer(self, key)
>       self._data[key] = value
E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true

pandas/core/arrays/integer.py:437: ValueError
___ TestUpdate.test_update_extension_array_series[result2-target2-expected2] ___

self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x7f31e821a220>
result = 0    True
1    <NA>
dtype: boolean
target = 0     <NA>
1    False
dtype: boolean
expected = 0     True
1    False
dtype: boolean

    @pytest.mark.parametrize(
        "result, target, expected",
        [
            (
                Series(["a", None], dtype="string"),
                Series([None, "b"], dtype="string"),
                Series(["a", "b"], dtype="string"),
            ),
            (
                Series([1, None], dtype="Int64"),
                Series([None, 2], dtype="Int64"),
                Series([1, 2], dtype="Int64"),
            ),
            (
                Series([True, None], dtype="boolean"),
                Series([None, False], dtype="boolean"),
                Series([True, False], dtype="boolean"),
            ),
        ],
    )
    def test_update_extension_array_series(self, result, target, expected):
>       result.update(target)

pandas/tests/series/methods/test_update.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:2855: in update
    self._mgr = self._mgr.putmask(mask=mask, new=other)
pandas/core/internals/managers.py:544: in putmask
    return self.apply(
pandas/core/internals/managers.py:397: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1607: in putmask
    new_values[mask] = new
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <BooleanArray>
[True, <NA>]
Length: 2, dtype: boolean
key = array([False,  True]), value = array([False, False])

    def __setitem__(self, key, value) -> None:
        _is_scalar = is_scalar(value)
        if _is_scalar:
            value = [value]
        value, mask = coerce_to_array(value)
    
        if _is_scalar:
            value = value[0]
            mask = mask[0]
    
        key = check_array_indexer(self, key)
>       self._data[key] = value
E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true

pandas/core/arrays/boolean.py:374: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/series/methods/test_update.py::TestUpdate::test_update_extension_array_series[result0-target0-expected0]
FAILED pandas/tests/series/methods/test_update.py::TestUpdate::test_update_extension_array_series[result1-target1-expected1]
FAILED pandas/tests/series/methods/test_update.py::TestUpdate::test_update_extension_array_series[result2-target2-expected2]
============================== 3 failed in 0.95s ===============================
