[
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#42",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None)",
        "snippet": "    def __call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None):\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 42,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argsort_with_ascending#133",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argsort_with_ascending(ascending, args, kwargs)",
        "snippet": "def validate_argsort_with_ascending(ascending, args, kwargs):\n    \"\"\"\n    If 'Categorical.argsort' is called via the 'numpy' library, the\n    first parameter in its signature is 'axis', which takes either\n    an integer or 'None', so check if the 'ascending' parameter has\n    either integer type or is None, since 'ascending' itself should\n    be a boolean\n    \"\"\"\n\n    if is_integer(ascending) or ascending is None:\n        args = (ascending,) + args\n        ascending = True\n\n    validate_argsort_kind(args, kwargs, max_fname_arg_count=3)\n    return ascending",
        "begin_line": 133,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_minmax_axis#388",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_minmax_axis(axis)",
        "snippet": "def validate_minmax_axis(axis):\n    \"\"\"\n    Ensure that the axis argument passed to min, max, argmin, or argmax is\n    zero or None, as otherwise it will be incorrectly ignored.\n\n    Parameters\n    ----------\n    axis : int or None\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    ndim = 1  # hard-coded for Index\n    if axis is None:\n        return\n    if axis >= ndim or (axis < 0 and ndim + axis < 0):\n        raise ValueError(f\"`axis` must be fewer than the number of dimensions ({ndim})\")",
        "begin_line": 388,
        "end_line": 405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#76",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 76,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014084507042253522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#222",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Ordered=False)",
        "snippet": "    def __init__(self, categories=None, ordered: Ordered = False):\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 222,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#246",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> CategoricalDtype._from_values_or_dtype(categories=['a', 'b'],\n        ...                                        ordered=True)\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> CategoricalDtype._from_values_or_dtype(c, ['x', 'y'], ordered=True,\n        ...                                        dtype=dtype2)\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(['x', 'y'], ordered=False)\n        \"\"\"\n        from pandas.core.dtypes.common import is_categorical\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    raise ValueError(f\"Unknown dtype {repr(dtype)}\")\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 246,
        "end_line": 333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string#336",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct a CategoricalDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            Must be the string \"category\" in order to be successfully constructed.\n\n        Returns\n        -------\n        CategoricalDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a CategoricalDtype cannot be constructed from the input.\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(f\"Expects a string, got {type(string)}\")\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a 'CategoricalDtype' from '{string}'\")\n\n        # need ordered=None to ensure that operations specifying dtype=\"category\" don't\n        # override the ordered value for existing categoricals\n        return cls(ordered=None)",
        "begin_line": 336,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014084507042253522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#364",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered",
        "begin_line": 364,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#393",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self.ordered == other.ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 393,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002697599136768276,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type#486",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas import Categorical\n\n        return Categorical",
        "begin_line": 486,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#499",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 499,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#518",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            raise TypeError(\n                f\"Parameter 'categories' must be list-like, was {repr(categories)}\"\n            )\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorial categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 518,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#554",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            raise ValueError(\n                f\"a CategoricalDtype must be passed to perform an update, \"\n                f\"got {repr(dtype)}\"\n            )\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # update categories/ordered unless they've been explicitly passed as None\n        new_categories = (\n            dtype.categories if dtype.categories is not None else self.categories\n        )\n        new_ordered = dtype.ordered if dtype.ordered is not None else self.ordered\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 554,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#590",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 590,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered#597",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self._ordered",
        "begin_line": 597,
        "end_line": 601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#658",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)",
        "snippet": "    def __init__(self, unit=\"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    f\"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is no longer supported. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 658,
        "end_line": 687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012425447316103378,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#690",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self):\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 690,
        "end_line": 694,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012924906294429367,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#697",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 697,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012402331638348009,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type#704",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import DatetimeArray\n\n        return DatetimeArray",
        "begin_line": 704,
        "end_line": 714,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001558117793705204,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#717",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type):\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'DatetimeTZDtype' from '{string}'\"\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                try:\n                    return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n                except (KeyError, TypeError, ValueError) as err:\n                    # KeyError if maybe_get_tz tries and fails to get a\n                    #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                    # TypeError if we pass a nonsense tz;\n                    # ValueError if we pass a unit other than \"ns\"\n                    raise TypeError(msg) from err\n            raise TypeError(msg)\n\n        raise TypeError(\"Cannot construct a 'DatetimeTZDtype'\")",
        "begin_line": 717,
        "end_line": 748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014084507042253522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#750",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return f\"datetime64[{self.unit}, {self.tz}]\"",
        "begin_line": 750,
        "end_line": 751,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014188422247446084,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#754",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 754,
        "end_line": 756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015590894917368256,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__#758",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        # TODO: update this.\n        return hash(str(self))",
        "begin_line": 758,
        "end_line": 761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015605493133583021,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#763",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 763,
        "end_line": 771,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#819",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, ABCDateOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 819,
        "end_line": 844,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00684931506849315,
            "pseudo_dstar_susp": 0.006802721088435374,
            "pseudo_tarantula_susp": 0.00684931506849315,
            "pseudo_op2_susp": 0.00546448087431694,
            "pseudo_barinel_susp": 0.00684931506849315
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#847",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 847,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006289308176100629,
            "pseudo_dstar_susp": 0.00625,
            "pseudo_tarantula_susp": 0.006289308176100629,
            "pseudo_op2_susp": 0.00510204081632653,
            "pseudo_barinel_susp": 0.006289308176100629
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#869",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'PeriodDtype' from '{string}'\"\n        else:\n            msg = f\"'construct_from_string' expects a string, got {type(string)}\"\n        raise TypeError(msg)",
        "begin_line": 869,
        "end_line": 889,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014084507042253522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__str__#891",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return self.name",
        "begin_line": 891,
        "end_line": 892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.name#895",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        return f\"period[{self.freq.freqstr}]\"",
        "begin_line": 895,
        "end_line": 896,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018008283810552856,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__hash__#902",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        return hash(str(self))",
        "begin_line": 902,
        "end_line": 904,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022644927536231884,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__#906",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name or other == self.name.title()\n\n        return isinstance(other, PeriodDtype) and self.freq == other.freq",
        "begin_line": 906,
        "end_line": 910,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#919",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 919,
        "end_line": 938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003048780487804878,
            "pseudo_dstar_susp": 0.003048780487804878,
            "pseudo_tarantula_susp": 0.0030581039755351682,
            "pseudo_op2_susp": 0.003048780487804878,
            "pseudo_barinel_susp": 0.0030581039755351682
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type#941",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        return PeriodArray",
        "begin_line": 941,
        "end_line": 951,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002231644722160232,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__new__#989",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls, subtype=None)",
        "snippet": "    def __new__(cls, subtype=None):\n        from pandas.core.dtypes.common import (\n            is_categorical_dtype,\n            is_string_dtype,\n            pandas_dtype,\n        )\n\n        if isinstance(subtype, IntervalDtype):\n            return subtype\n        elif subtype is None:\n            # we are called as an empty constructor\n            # generally for pickle compat\n            u = object.__new__(cls)\n            u._subtype = None\n            return u\n        elif isinstance(subtype, str) and subtype.lower() == \"interval\":\n            subtype = None\n        else:\n            if isinstance(subtype, str):\n                m = cls._match.search(subtype)\n                if m is not None:\n                    subtype = m.group(\"subtype\")\n\n            try:\n                subtype = pandas_dtype(subtype)\n            except TypeError:\n                raise TypeError(\"could not construct IntervalDtype\")\n\n        if is_categorical_dtype(subtype) or is_string_dtype(subtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalDtype\"\n            )\n            raise TypeError(msg)\n\n        try:\n            return cls._cache[str(subtype)]\n        except KeyError:\n            u = object.__new__(cls)\n            u._subtype = subtype\n            cls._cache[str(subtype)] = u\n            return u",
        "begin_line": 989,
        "end_line": 1031,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.subtype#1034",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        \"\"\"\n        The dtype of the Interval bounds.\n        \"\"\"\n        return self._subtype",
        "begin_line": 1034,
        "end_line": 1038,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type#1041",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import IntervalArray\n\n        return IntervalArray",
        "begin_line": 1041,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018751171948246765,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1054",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(f\"a string needs to be passed, got type {type(string)}\")\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            f\"Cannot construct a 'IntervalDtype' from '{string}'.\\n\\n\"\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1054,
        "end_line": 1071,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.type#1074",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.type(self)",
        "snippet": "    def type(self):\n        return Interval",
        "begin_line": 1074,
        "end_line": 1075,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020529665366454526,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__#1086",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other.lower() in (self.name.lower(), str(self).lower())\n        elif not isinstance(other, IntervalDtype):\n            return False\n        elif self.subtype is None or other.subtype is None:\n            # None should match any subtype\n            return True\n        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n\n            return is_dtype_equal(self.subtype, other.subtype)",
        "begin_line": 1086,
        "end_line": 1097,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019357336430507162,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1106",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1106,
        "end_line": 1123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.radd#8",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.radd(left, right)",
        "snippet": "def radd(left, right):\n    return right + left",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001547029702970297,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rsub#12",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rsub(left, right)",
        "snippet": "def rsub(left, right):\n    return right - left",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015441630636195183,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rmul#16",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rmul(left, right)",
        "snippet": "def rmul(left, right):\n    return right * left",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018001800180018,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rtruediv#24",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rtruediv(left, right)",
        "snippet": "def rtruediv(left, right):\n    return right / left",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017686593562079943,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rfloordiv#28",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rfloordiv(left, right)",
        "snippet": "def rfloordiv(left, right):\n    return right // left",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000241196333815726,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rmod#32",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rmod(left, right)",
        "snippet": "def rmod(left, right):\n    # check if right is a string as % is the string\n    # formatting operation; this is a TypeError\n    # otherwise perform the op\n    if isinstance(right, str):\n        typ = type(left).__name__\n        raise TypeError(f\"{typ} cannot perform the operation mod\")\n\n    return right % left",
        "begin_line": 32,
        "end_line": 40,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rdivmod#43",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rdivmod(left, right)",
        "snippet": "def rdivmod(left, right):\n    return divmod(right, left)",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.roperator.rpow#47",
        "src_path": "pandas/core/ops/roperator.py",
        "class_name": "pandas.core.ops.roperator",
        "signature": "pandas.core.ops.roperator.rpow(left, right)",
        "snippet": "def rpow(left, right):\n    return right ** left",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000292654375182909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike._join_i8_wrapper#54",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike._join_i8_wrapper(joinf, with_indexers: bool=True)",
        "snippet": "def _join_i8_wrapper(joinf, with_indexers: bool = True):\n    \"\"\"\n    Create the join wrapper methods.\n    \"\"\"\n\n    @staticmethod  # type: ignore\n    def wrapper(left, right):\n        if isinstance(left, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n            left = left.view(\"i8\")\n        if isinstance(right, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n            right = right.view(\"i8\")\n\n        results = joinf(left, right)\n        if with_indexers:\n            # dtype should be timedelta64[ns] for TimedeltaIndex\n            #  and datetime64[ns] for DatetimeIndex\n            dtype = left.dtype.base\n\n            join_index, left_indexer, right_indexer = results\n            join_index = join_index.view(dtype)\n            return join_index, left_indexer, right_indexer\n        return results\n\n    return wrapper",
        "begin_line": 54,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.wrapper#60",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n        if isinstance(left, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n            left = left.view(\"i8\")\n        if isinstance(right, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)):\n            right = right.view(\"i8\")\n\n        results = joinf(left, right)\n        if with_indexers:\n            # dtype should be timedelta64[ns] for TimedeltaIndex\n            #  and datetime64[ns] for DatetimeIndex\n            dtype = left.dtype.base\n\n            join_index, left_indexer, right_indexer = results\n            join_index = join_index.view(dtype)\n            return join_index, left_indexer, right_indexer\n        return results",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates#105",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 105,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034423407917383823,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#130",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015928639694170118,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__array_wrap__#134",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc.\n        \"\"\"\n        result = lib.item_from_zerodim(result)\n        if is_bool_dtype(result) or lib.is_scalar(result):\n            return result\n\n        attrs = self._get_attributes_dict()\n        if not is_period_dtype(self) and attrs[\"freq\"]:\n            # no need to infer if freq is None\n            attrs[\"freq\"] = \"infer\"\n        return Index(result, **attrs)",
        "begin_line": 134,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals#150",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, ABCIndexClass):\n            return False\n        elif not isinstance(other, type(self)):\n            try:\n                other = type(self)(other)\n            except (ValueError, TypeError, OverflowError):\n                # e.g.\n                #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n                #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n                #  OverflowError -> Index([very_large_timedeltas])\n                return False\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            # have different timezone\n            return False\n\n        return np.array_equal(self.asi8, other.asi8)",
        "begin_line": 150,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take#246",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_int64(indices)\n\n        maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n        if isinstance(maybe_slice, slice):\n            return self[maybe_slice]\n\n        taken = ExtensionIndex.take(\n            self, indices, axis, allow_fill, fill_value, **kwargs\n        )\n\n        # keep freq in PeriodArray/Index, reset otherwise\n        freq = self.freq if is_period_dtype(self) else None\n        assert taken.freq == freq, (taken.freq, freq, taken)\n        return self._shallow_copy(taken, freq=freq)",
        "begin_line": 246,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist#275",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self) -> List:\n        \"\"\"\n        Return a list of the underlying data.\n        \"\"\"\n        return list(self.astype(object))",
        "begin_line": 275,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max#338",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Index or maximum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.max\n        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[-1] != iNaT:\n                    return self._box_func(i8[-1])\n\n            if self.hasnans:\n                if skipna:\n                    max_stamp = self[~self._isnan].asi8.max()\n                else:\n                    return self._na_value\n            else:\n                max_stamp = i8.max()\n            return self._box_func(max_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 338,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer#420",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        \"\"\"\n        We don't allow integer or float indexing on datetime-like when using\n        loc.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'ix', 'loc', 'getitem', 'iloc'} or None\n        \"\"\"\n\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # we don't allow integer/float indexing for loc\n        # we don't allow float indexing for ix/getitem\n        if is_scalar(key):\n            is_int = is_integer(key)\n            is_flt = is_float(key)\n            if kind in [\"loc\"] and (is_int or is_flt):\n                self._invalid_indexer(\"index\", key)\n            elif kind in [\"ix\", \"getitem\"] and is_flt:\n                self._invalid_indexer(\"index\", key)\n\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 420,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.astype#553",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype) and copy is False:\n            # Ensure that self.astype(self.dtype) is self\n            return self\n\n        new_values = self._data.astype(dtype, copy=copy)\n\n        # pass copy=False because any copying will be done in the\n        #  _data.astype call above\n        return Index(new_values, dtype=new_values.dtype, name=self.name, copy=False)",
        "begin_line": 553,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002574002574002574,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.shift#564",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.shift(self, periods=1, freq=None)",
        "snippet": "    def shift(self, periods=1, freq=None):\n        \"\"\"\n        Shift index by desired number of time frequency increments.\n\n        This method is for shifting the values of datetime-like indexes\n        by a specified time increment a given number of times.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Number of periods (or increments) to shift by,\n            can be positive or negative.\n\n            .. versionchanged:: 0.24.0\n\n        freq : pandas.DateOffset, pandas.Timedelta or string, optional\n            Frequency increment to shift by.\n            If None, the index is shifted by its own `freq` attribute.\n            Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n        Returns\n        -------\n        pandas.DatetimeIndex\n            Shifted index.\n\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        PeriodIndex.shift : Shift values of PeriodIndex.\n        \"\"\"\n        result = self._data._time_shift(periods, freq=freq)\n        return type(self)(result, name=self.name)",
        "begin_line": 564,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._set_freq#630",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._set_freq(self, freq)",
        "snippet": "    def _set_freq(self, freq):\n        \"\"\"\n        Set the _freq attribute on our underlying DatetimeArray.\n\n        Parameters\n        ----------\n        freq : DateOffset, None, or \"infer\"\n        \"\"\"\n        # GH#29843\n        if freq is None:\n            # Always valid\n            pass\n        elif len(self) == 0 and isinstance(freq, DateOffset):\n            # Always valid.  In the TimedeltaIndex case, we assume this\n            #  is a Tick offset.\n            pass\n        else:\n            # As an internal method, we can ensure this assertion always holds\n            assert freq == \"infer\"\n            freq = to_offset(self.inferred_freq)\n\n        self._data._freq = freq",
        "begin_line": 630,
        "end_line": 651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._can_fast_union#745",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._can_fast_union(self, other)",
        "snippet": "    def _can_fast_union(self, other) -> bool:\n        if not isinstance(other, type(self)):\n            return False\n\n        freq = self.freq\n\n        if freq is None or freq != other.freq:\n            return False\n\n        if not self.is_monotonic or not other.is_monotonic:\n            return False\n\n        if len(self) == 0 or len(other) == 0:\n            return True\n\n        # to make our life easier, \"sort\" the two ranges\n        if self[0] <= other[0]:\n            left, right = self, other\n        else:\n            left, right = other, self\n\n        right_start = right[0]\n        left_end = left[-1]\n\n        # Only need to \"adjoin\", not overlap\n        try:\n            return (right_start == left_end + freq) or right_start in left\n        except ValueError:\n            # if we are comparing a freq that does not propagate timezones\n            # this will raise\n            return False",
        "begin_line": 745,
        "end_line": 775,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._union#811",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        # We are called by `union`, which is responsible for this validation\n        assert isinstance(other, type(self))\n\n        this, other = self._maybe_utc_convert(other)\n\n        if this._can_fast_union(other):\n            return this._fast_union(other, sort=sort)\n        else:\n            result = Index._union(this, other, sort=sort)\n            if isinstance(result, type(self)):\n                assert result._data.dtype == this.dtype\n                if result.freq is None:\n                    result._set_freq(\"infer\")\n            return result",
        "begin_line": 811,
        "end_line": 828,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.join#841",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.join(self, other, how: str='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(\n        self, other, how: str = \"left\", level=None, return_indexers=False, sort=False\n    ):\n        \"\"\"\n        See Index.join\n        \"\"\"\n        if self._is_convertible_to_index_for_join(other):\n            try:\n                other = type(self)(other)\n            except (TypeError, ValueError):\n                pass\n\n        this, other = self._maybe_utc_convert(other)\n        return Index.join(\n            this,\n            other,\n            how=how,\n            level=level,\n            return_indexers=return_indexers,\n            sort=sort,\n        )",
        "begin_line": 841,
        "end_line": 861,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._maybe_utc_convert#863",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._maybe_utc_convert(self, other)",
        "snippet": "    def _maybe_utc_convert(self, other):\n        this = self\n        if not hasattr(self, \"tz\"):\n            return this, other\n\n        if isinstance(other, type(self)):\n            if self.tz is not None:\n                if other.tz is None:\n                    raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n            elif other.tz is not None:\n                raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n\n            if not timezones.tz_compare(self.tz, other.tz):\n                this = self.tz_convert(\"UTC\")\n                other = other.tz_convert(\"UTC\")\n        return this, other",
        "begin_line": 863,
        "end_line": 878,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._is_convertible_to_index_for_join#881",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._is_convertible_to_index_for_join(cls, other: Index)",
        "snippet": "    def _is_convertible_to_index_for_join(cls, other: Index) -> bool:\n        \"\"\"\n        return a boolean whether I can attempt conversion to a\n        DatetimeIndex/TimedeltaIndex\n        \"\"\"\n        if isinstance(other, cls):\n            return False\n        elif len(other) > 0 and other.inferred_type not in (\n            \"floating\",\n            \"mixed-integer\",\n            \"integer\",\n            \"integer-na\",\n            \"mixed-integer-float\",\n            \"mixed\",\n        ):\n            return True\n        return False",
        "begin_line": 881,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._wrap_joined_index#899",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        if (\n            isinstance(other, type(self))\n            and self.freq == other.freq\n            and self._can_fast_union(other)\n        ):\n            joined = self._shallow_copy(joined)\n            joined.name = name\n            return joined\n        else:\n            kwargs = {}\n            if hasattr(self, \"tz\"):\n                kwargs[\"tz\"] = getattr(other, \"tz\", None)\n            return self._simple_new(joined, name, **kwargs)",
        "begin_line": 899,
        "end_line": 913,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get#939",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_property_get(self, name, *args, **kwargs):\n        result = getattr(self._data, name)\n        if name not in self._raw_properties:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 939,
        "end_line": 943,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000177367860943597,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method#948",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        result = operator.methodcaller(name, *args, **kwargs)(self._data)\n        if name not in self._raw_methods:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 948,
        "end_line": 952,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017274140611504577,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.__iter__#343",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Iterate over elements of the array.\n        \"\"\"\n        # This needs to be implemented so that pandas recognizes extension\n        # arrays as list-like. The default implementation makes successive\n        # calls to ``__getitem__``, which may be slower than necessary.\n        for i in range(len(self)):\n            yield self[i]",
        "begin_line": 343,
        "end_line": 351,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024295432458697764,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._values_for_argsort#433",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self) -> np.ndarray:\n        \"\"\"\n        Return values for sorting.\n\n        Returns\n        -------\n        ndarray\n            The transformed values should maintain the ordering between values\n            within the array.\n\n        See Also\n        --------\n        ExtensionArray.argsort\n        \"\"\"\n        # Note: this is used in `ExtensionArray.argsort`.\n        return np.array(self)",
        "begin_line": 433,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.argsort#450",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.argsort(self, ascending: bool=True, kind: str='quicksort', *args, **kwargs)",
        "snippet": "    def argsort(\n        self, ascending: bool = True, kind: str = \"quicksort\", *args, **kwargs\n    ) -> np.ndarray:\n        \"\"\"\n        Return the indices that would sort this array.\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            Whether the indices should result in an ascending\n            or descending sort.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        *args, **kwargs:\n            passed through to :func:`numpy.argsort`.\n\n        Returns\n        -------\n        ndarray\n            Array of indices that sort ``self``. If NaN values are contained,\n            NaN values are placed at the end.\n\n        See Also\n        --------\n        numpy.argsort : Sorting implementation used internally.\n        \"\"\"\n        # Implementor note: You have two places to override the behavior of\n        # argsort.\n        # 1. _values_for_argsort : construct the values passed to np.argsort\n        # 2. argsort : total control over sorting.\n        ascending = nv.validate_argsort_with_ascending(ascending, args, kwargs)\n\n        result = nargsort(self, kind=kind, ascending=ascending, na_position=\"last\")\n        return result",
        "begin_line": 450,
        "end_line": 483,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._values_for_factorize#660",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self) -> Tuple[np.ndarray, Any]:\n        \"\"\"\n        Return an array and missing value suitable for factorization.\n\n        Returns\n        -------\n        values : ndarray\n\n            An array suitable for factorization. This should maintain order\n            and be a supported dtype (Float64, Int64, UInt64, String, Object).\n            By default, the extension array is cast to object dtype.\n        na_value : object\n            The value in `values` to consider missing. This will be treated\n            as NA in the factorization routines, so it will be coded as\n            `na_sentinal` and not included in `uniques`. By default,\n            ``np.nan`` is used.\n\n        Notes\n        -----\n        The values returned by this method are also used in\n        :func:`pandas.util.hash_pandas_object`.\n        \"\"\"\n        return self.astype(object), np.nan",
        "begin_line": 660,
        "end_line": 682,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.factorize#684",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.factorize(self, na_sentinel: int=-1)",
        "snippet": "    def factorize(self, na_sentinel: int = -1) -> Tuple[np.ndarray, ABCExtensionArray]:\n        \"\"\"\n        Encode the extension array as an enumerated type.\n\n        Parameters\n        ----------\n        na_sentinel : int, default -1\n            Value to use in the `codes` array to indicate missing values.\n\n        Returns\n        -------\n        codes : ndarray\n            An integer NumPy array that's an indexer into the original\n            ExtensionArray.\n        uniques : ExtensionArray\n            An ExtensionArray containing the unique values of `self`.\n\n            .. note::\n\n               uniques will *not* contain an entry for the NA value of\n               the ExtensionArray if there are any missing values present\n               in `self`.\n\n        See Also\n        --------\n        factorize : Top-level factorize method that dispatches here.\n\n        Notes\n        -----\n        :meth:`pandas.factorize` offers a `sort` keyword as well.\n        \"\"\"\n        # Implementer note: There are two ways to override the behavior of\n        # pandas.factorize\n        # 1. _values_for_factorize and _from_factorize.\n        #    Specify the values passed to pandas' internal factorization\n        #    routines, and how to convert from those values back to the\n        #    original ExtensionArray.\n        # 2. ExtensionArray.factorize.\n        #    Complete control over factorization.\n        arr, na_value = self._values_for_factorize()\n\n        codes, uniques = _factorize_array(\n            arr, na_sentinel=na_sentinel, na_value=na_value\n        )\n\n        uniques = self._from_factorized(uniques, self)\n        return codes, uniques",
        "begin_line": 684,
        "end_line": 730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#123",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks: Tuple[Block, ...] = tuple(blocks)\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    f\"Number of Block dimensions ({block.ndim}) must equal \"\n                    f\"number of axes ({self.ndim})\"\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        self._consolidate_check()\n\n        self._rebuild_blknos_and_blklocs()",
        "begin_line": 123,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001374192661811186,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#165",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self):\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012656625743576763,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#169",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.axes)",
        "begin_line": 169,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013585110718652356,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set_axis#172",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set_axis(self, axis, new_labels)",
        "snippet": "    def set_axis(self, axis, new_labels):\n        new_labels = ensure_index(new_labels)\n        old_len = len(self.axes[axis])\n        new_len = len(new_labels)\n\n        if new_len != old_len:\n            raise ValueError(\n                f\"Length mismatch: Expected axis has {old_len} elements, new \"\n                f\"values have {new_len} elements\"\n            )\n\n        self.axes[axis] = new_labels",
        "begin_line": 172,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014961101137043686,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._is_single_block#201",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._is_single_block(self)",
        "snippet": "    def _is_single_block(self):\n        if self.ndim == 1:\n            return True\n\n        if len(self.blocks) != 1:\n            return False\n\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1\n        )",
        "begin_line": 201,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#213",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self):\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 213,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013585110718652356,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#234",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self):\n        return self.axes[0]",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012610340479192938,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_dtypes#249",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_dtypes(self)",
        "snippet": "    def get_dtypes(self):\n        dtypes = np.array([blk.dtype for blk in self.blocks])\n        return algos.take_1d(dtypes, self._blknos, allow_fill=False)",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013848497438027975,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#315",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012610340479192938,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#330",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self):\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                f\"block items\\n# manager items: {len(self.items)}, # \"\n                f\"tot_items: {tot_items}\"\n            )",
        "begin_line": 330,
        "end_line": 341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001374192661811186,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#369",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self, f, filter=None, **kwargs)",
        "snippet": "    def apply(self, f, filter=None, **kwargs):\n        \"\"\"\n        Iterate over the blocks, collect and create a new BlockManager.\n\n        Parameters\n        ----------\n        f : str or callable\n            Name of the Block method to apply.\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n\n        result_blocks = []\n\n        # filter kwarg is used in replace-* family of methods\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                # All items are included, as if there were no filtering\n                filter = None\n            else:\n                kwargs[\"filter\"] = filter_locs\n\n        self._consolidate_inplace()\n\n        if f == \"where\":\n            align_copy = True\n            if kwargs.get(\"align\", True):\n                align_keys = [\"other\", \"cond\"]\n            else:\n                align_keys = [\"cond\"]\n        elif f == \"putmask\":\n            align_copy = False\n            if kwargs.get(\"align\", True):\n                align_keys = [\"new\", \"mask\"]\n            else:\n                align_keys = [\"mask\"]\n        elif f == \"fillna\":\n            # fillna internally does putmask, maybe it's better to do this\n            # at mgr, not block level?\n            align_copy = False\n            align_keys = [\"value\"]\n        else:\n            align_keys = []\n\n        # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n        # with a .values attribute.\n        aligned_args = {\n            k: kwargs[k]\n            for k in align_keys\n            if not isinstance(kwargs[k], ABCExtensionArray)\n            and hasattr(kwargs[k], \"values\")\n        }\n\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n\n                for k, obj in aligned_args.items():\n                    axis = obj._info_axis_number\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:\n                applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(self.axes)\n        bm = type(self)(result_blocks, self.axes, do_integrity_check=False)\n        return bm",
        "begin_line": 369,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.setitem#561",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.setitem(self, **kwargs)",
        "snippet": "    def setitem(self, **kwargs):\n        return self.apply(\"setitem\", **kwargs)",
        "begin_line": 561,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020968756552736424,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shift#573",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shift(self, **kwargs)",
        "snippet": "    def shift(self, **kwargs):\n        return self.apply(\"shift\", **kwargs)",
        "begin_line": 573,
        "end_line": 574,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.fillna#576",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.fillna(self, **kwargs)",
        "snippet": "    def fillna(self, **kwargs):\n        return self.apply(\"fillna\", **kwargs)",
        "begin_line": 576,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.astype#582",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 582,
        "end_line": 583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016589250165892502,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#648",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 648,
        "end_line": 654,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013585110718652356,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#656",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self):\n        ftypes = [blk.ftype for blk in self.blocks]\n        self._is_consolidated = len(ftypes) == len(set(ftypes))\n        self._known_consolidated = True",
        "begin_line": 656,
        "end_line": 659,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013585110718652356,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#662",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self):\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 662,
        "end_line": 665,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001593879502709595,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.any_extension_types#680",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.any_extension_types(self)",
        "snippet": "    def any_extension_types(self):\n        \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n        return any(block.is_extension for block in self.blocks)",
        "begin_line": 680,
        "end_line": 682,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012786088735455825,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_view#685",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n\n        # It is technically possible to figure out which blocks are views\n        # e.g. [ b.values.base is not None for b in self.blocks ]\n        # but then we have the case of possibly some blocks being a view\n        # and some blocks not. setting in theory is possible on the non-view\n        # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n        # complicated\n\n        return False",
        "begin_line": 685,
        "end_line": 697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019275250578257516,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_slice#741",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0):\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(slobj)\n        else:\n            _slicer = [slice(None)] * (axis + 1)\n            _slicer[axis] = slobj\n            slicer = tuple(_slicer)\n            new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axes[axis][slobj]\n\n        bm = type(self)(new_blocks, new_axes, do_integrity_check=False)\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 741,
        "end_line": 758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#767",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : bool or string, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            # hit in e.g. tests.io.json.test_pandas\n\n            def copy_func(ax):\n                if deep == \"all\":\n                    return ax.copy(deep=True)\n                else:\n                    return ax.view()\n\n            new_axes = [copy_func(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n\n        res = self.apply(\"copy\", deep=deep)\n        res.axes = new_axes\n        return res",
        "begin_line": 767,
        "end_line": 797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000241196333815726,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy_func#785",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy_func(ax)",
        "snippet": "            def copy_func(ax):\n                if deep == \"all\":\n                    return ax.copy(deep=True)\n                else:\n                    return ax.view()",
        "begin_line": 785,
        "end_line": 789,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000241196333815726,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.as_array#799",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.as_array(self, transpose=False, items=None)",
        "snippet": "    def as_array(self, transpose=False, items=None):\n        \"\"\"Convert the blockmanager data into an numpy array.\n\n        Parameters\n        ----------\n        transpose : boolean, default False\n            If True, transpose the return array\n        items : list of strings or None\n            Names of block items that will be included in the returned\n            array. ``None`` means that all block items will be used\n\n        Returns\n        -------\n        arr : ndarray\n        \"\"\"\n        if len(self.blocks) == 0:\n            arr = np.empty(self.shape, dtype=float)\n            return arr.transpose() if transpose else arr\n\n        if items is not None:\n            mgr = self.reindex_axis(items, axis=0)\n        else:\n            mgr = self\n\n        if self._is_single_block and mgr.blocks[0].is_datetimetz:\n            # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n            # always be object dtype. Some callers seem to want the\n            # DatetimeArray (previously DTI)\n            arr = mgr.blocks[0].get_values(dtype=object)\n        elif self._is_single_block or not self.is_mixed_type:\n            arr = np.asarray(mgr.blocks[0].get_values())\n        else:\n            arr = mgr._interleave()\n\n        return arr.transpose() if transpose else arr",
        "begin_line": 799,
        "end_line": 833,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._interleave#835",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._interleave(self)",
        "snippet": "    def _interleave(self):\n        \"\"\"\n        Return ndarray from blocks with specified item order\n        Items must be contained in the blocks\n        \"\"\"\n        dtype = _interleaved_dtype(self.blocks)\n\n        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if is_sparse(dtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):\n            dtype = \"object\"\n\n        result = np.empty(self.shape, dtype=dtype)\n\n        itemmask = np.zeros(self.shape[0])\n\n        for blk in self.blocks:\n            rl = blk.mgr_locs\n            result[rl.indexer] = blk.get_values(dtype)\n            itemmask[rl.indexer] = 1\n\n        if not itemmask.all():\n            raise AssertionError(\"Some items were not contained in blocks\")\n\n        return result",
        "begin_line": 835,
        "end_line": 861,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.fast_xs#887",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.fast_xs(self, loc)",
        "snippet": "    def fast_xs(self, loc):\n        \"\"\"\n        get a cross sectional for a given location in the\n        items ; handle dups\n\n        return the result, is *could* be a view in the case of a\n        single block\n        \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].iget((slice(None), loc))\n\n        items = self.items\n\n        # non-unique (GH4726)\n        if not items.is_unique:\n            result = self._interleave()\n            if self.ndim == 2:\n                result = result.T\n            return result[loc]\n\n        # unique\n        dtype = _interleaved_dtype(self.blocks)\n\n        n = len(items)\n        if is_extension_array_dtype(dtype):\n            # we'll eventually construct an ExtensionArray.\n            result = np.empty(n, dtype=object)\n        else:\n            result = np.empty(n, dtype=dtype)\n\n        for blk in self.blocks:\n            # Such assignment may incorrectly coerce NaT to None\n            # result[blk.mgr_locs] = blk._slice((slice(None), loc))\n            for i, rl in enumerate(blk.mgr_locs):\n                result[rl] = blk.iget((i, loc))\n\n        if is_extension_array_dtype(dtype):\n            result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n\n        return result",
        "begin_line": 887,
        "end_line": 926,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002070822116380203,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#928",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self):\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 928,
        "end_line": 942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019485580670303975,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#944",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 944,
        "end_line": 949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001525320317266626,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get#951",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get(self, item)",
        "snippet": "    def get(self, item):\n        \"\"\"\n        Return values for selected item (ndarray or BlockManager).\n        \"\"\"\n        if self.items.is_unique:\n\n            if not isna(item):\n                loc = self.items.get_loc(item)\n            else:\n                indexer = np.arange(len(self.items))[isna(self.items)]\n\n                # allow a single nan location indexer\n                if not is_scalar(indexer):\n                    if len(indexer) == 1:\n                        loc = indexer.item()\n                    else:\n                        raise ValueError(\"cannot label index with a null key\")\n\n            return self.iget(loc)\n        else:\n\n            if isna(item):\n                raise TypeError(\"cannot label index with a null key\")\n\n            indexer = self.items.get_indexer_for([item])\n            return self.reindex_indexer(\n                new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n            )",
        "begin_line": 951,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00027948574622694243,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#980",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i)",
        "snippet": "    def iget(self, i):\n        \"\"\"\n        Return the data as a SingleBlockManager if possible\n\n        Otherwise return as a ndarray\n        \"\"\"\n        block = self.blocks[self._blknos[i]]\n        values = block.iget(self._blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            [\n                block.make_block_same_class(\n                    values, placement=slice(0, len(values)), ndim=1\n                )\n            ],\n            self.axes[1],\n        )",
        "begin_line": 980,
        "end_line": 997,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014394702749388226,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set#1038",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set(self, item, value)",
        "snippet": "    def set(self, item, value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n\n        value_is_extension_type = is_extension_array_dtype(value)\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        try:\n            loc = self.items.get_loc(item)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self.insert(len(self.items), item, value)\n            return\n\n        if isinstance(loc, int):\n            loc = [loc]\n\n        blknos = self._blknos[loc]\n        blklocs = self._blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    self._blklocs[blk.mgr_locs.indexer] = -1\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = algos.take_1d(\n                new_blknos, self._blknos, axis=0, allow_fill=False\n            )\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that sparse blocks contain only\n                # one item.\n                new_blocks.extend(\n                    make_block(\n                        values=value.copy(),\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 1038,
        "end_line": 1157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1063",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value[placement.indexer]",
        "begin_line": 1063,
        "end_line": 1064,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.insert#1159",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.insert(self, loc: int, item, value, allow_duplicates: bool=False)",
        "snippet": "    def insert(self, loc: int, item, value, allow_duplicates: bool = False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            # Should this be a different kind of error??\n            raise ValueError(f\"cannot insert {item}, already exists\")\n\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        # insert to the axis; this could possibly raise a TypeError\n        new_axis = self.items.insert(loc, item)\n\n        block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n        for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n\n        if loc == self._blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n        self.axes[0] = new_axis\n        self.blocks += (block,)\n        self._shape = None\n\n        self._known_consolidated = False\n\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()",
        "begin_line": 1159,
        "end_line": 1208,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_axis#1210",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True)",
        "snippet": "    def reindex_axis(\n        self, new_index, axis, method=None, limit=None, fill_value=None, copy=True\n    ):\n        \"\"\"\n        Conform block manager to new index.\n        \"\"\"\n        new_index = ensure_index(new_index)\n        new_index, indexer = self.axes[axis].reindex(\n            new_index, method=method, limit=limit\n        )\n\n        return self.reindex_indexer(\n            new_index, indexer, axis=axis, fill_value=fill_value, copy=copy\n        )",
        "begin_line": 1210,
        "end_line": 1223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015405946695424435,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_indexer#1225",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True)",
        "snippet": "    def reindex_indexer(\n        self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object\n        allow_dups : bool\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n\n        self._consolidate_inplace()\n\n        # some axes don't allow reindexing with dups\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n        else:\n            new_blocks = [\n                blk.take_nd(\n                    indexer,\n                    axis=axis,\n                    fill_tuple=(\n                        fill_value if fill_value is not None else blk.fill_value,\n                    ),\n                )\n                for blk in self.blocks\n            ]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n        return type(self)(new_blocks, new_axes)",
        "begin_line": 1225,
        "end_line": 1273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0#1275",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
        "snippet": "    def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n        \"\"\"\n        Slice/take blocks along axis=0.\n\n        Overloaded for SingleBlock\n\n        Returns\n        -------\n        new_blocks : list of Block\n        \"\"\"\n\n        allow_fill = fill_tuple is not None\n\n        sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n            slice_or_indexer, self.shape[0], allow_fill=allow_fill\n        )\n\n        if self._is_single_block:\n            blk = self.blocks[0]\n\n            if sl_type in (\"slice\", \"mask\"):\n                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_tuple[0] is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n                    fill_tuple = (fill_value,)\n\n                return [\n                    blk.take_nd(\n                        slobj,\n                        axis=0,\n                        new_mgr_locs=slice(0, sllen),\n                        fill_tuple=fill_tuple,\n                    )\n                ]\n\n        if sl_type in (\"slice\", \"mask\"):\n            blknos = self._blknos[slobj]\n            blklocs = self._blklocs[slobj]\n        else:\n            blknos = algos.take_1d(\n                self._blknos, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n            blklocs = algos.take_1d(\n                self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n\n        # When filling blknos, make sure blknos is updated before appending to\n        # blocks list, that way new blkno is exactly len(blocks).\n        #\n        # FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,\n        # pytables serialization will break otherwise.\n        blocks = []\n        for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n            if blkno == -1:\n                # If we've got here, fill_tuple was not None.\n                fill_value = fill_tuple[0]\n\n                blocks.append(\n                    self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n                )\n            else:\n                blk = self.blocks[blkno]\n\n                # Otherwise, slicing along items axis is necessary.\n                if not blk._can_consolidate:\n                    # A non-consolidatable block, it's easy, because there's\n                    # only one item and each mgr loc is a copy of that single\n                    # item.\n                    for mgr_loc in mgr_locs:\n                        newblk = blk.copy(deep=True)\n                        newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                        blocks.append(newblk)\n\n                else:\n                    blocks.append(\n                        blk.take_nd(\n                            blklocs[mgr_locs.indexer],\n                            axis=0,\n                            new_mgr_locs=mgr_locs,\n                            fill_tuple=None,\n                        )\n                    )\n\n        return blocks",
        "begin_line": 1275,
        "end_line": 1359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._make_na_block#1361",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._make_na_block(self, placement, fill_value=None)",
        "snippet": "    def _make_na_block(self, placement, fill_value=None):\n        # TODO: infer dtypes other than float64 from fill_value\n\n        if fill_value is None:\n            fill_value = np.nan\n        block_shape = list(self.shape)\n        block_shape[0] = len(placement)\n\n        dtype, fill_value = infer_dtype_from_scalar(fill_value)\n        block_values = np.empty(block_shape, dtype=dtype)\n        block_values.fill(fill_value)\n        return make_block(block_values, placement=placement)",
        "begin_line": 1361,
        "end_line": 1372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.equals#1398",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.equals(self, other)",
        "snippet": "    def equals(self, other):\n        self_axes, other_axes = self.axes, other.axes\n        if len(self_axes) != len(other_axes):\n            return False\n        if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n            return False\n        self._consolidate_inplace()\n        other._consolidate_inplace()\n        if len(self.blocks) != len(other.blocks):\n            return False\n\n        # canonicalize block order, using a tuple combining the mgr_locs\n        # then type name because there might be unconsolidated\n        # blocks (say, Categorical) which can only be distinguished by\n        # the iteration order\n        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n\n        self_blocks = sorted(self.blocks, key=canonicalize)\n        other_blocks = sorted(other.blocks, key=canonicalize)\n        return all(\n            block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n        )",
        "begin_line": 1398,
        "end_line": 1420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.canonicalize#1413",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.canonicalize(block)",
        "snippet": "        def canonicalize(block):\n            return (block.mgr_locs.as_array.tolist(), block.dtype.name)",
        "begin_line": 1413,
        "end_line": 1414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1468",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Union[Index, List[Index]],\n        do_integrity_check: bool = False,\n        fastpath: bool = False,\n    ):\n        if isinstance(axis, list):\n            if len(axis) != 1:\n                raise ValueError(\n                    \"cannot create SingleBlockManager with more than 1 axis\"\n                )\n            axis = axis[0]\n\n        # passed from constructor, single block, single axis\n        if fastpath:\n            self.axes = [axis]\n            if isinstance(block, list):\n\n                # empty block\n                if len(block) == 0:\n                    block = [np.array([])]\n                elif len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n        else:\n            self.axes = [ensure_index(axis)]\n\n            # create the block here\n            if isinstance(block, list):\n\n                # provide consolidation to the interleaved_dtype\n                if len(block) > 1:\n                    dtype = _interleaved_dtype(block)\n                    block = [b.astype(dtype) for b in block]\n                    block = _consolidate(block)\n\n                if len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n\n        if not isinstance(block, Block):\n            block = make_block(block, placement=slice(0, len(axis)), ndim=1)\n\n        self.blocks = tuple([block])",
        "begin_line": 1468,
        "end_line": 1516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001633986928104575,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1522",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self):\n        return self.blocks[0]",
        "begin_line": 1522,
        "end_line": 1523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011977482333213559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1539",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj, axis=0)",
        "snippet": "    def get_slice(self, slobj, axis=0):\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        return type(self)(self._block._slice(slobj), self.index[slobj], fastpath=True)",
        "begin_line": 1539,
        "end_line": 1543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1546",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self):\n        return self.axes[0]",
        "begin_line": 1546,
        "end_line": 1547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016469038208168644,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1550",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._block.dtype",
        "begin_line": 1550,
        "end_line": 1551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012410027302060066,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.external_values#1563",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.external_values(self)",
        "snippet": "    def external_values(self):\n        return self._block.external_values()",
        "begin_line": 1563,
        "end_line": 1564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002281021897810219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1566",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        return self._block.internal_values()",
        "begin_line": 1566,
        "end_line": 1567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_values#1569",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_values(self)",
        "snippet": "    def get_values(self):\n        \"\"\" return a dense type view \"\"\"\n        return np.array(self._block.to_dense(), copy=False)",
        "begin_line": 1569,
        "end_line": 1571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013296104241457252,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1577",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        return True",
        "begin_line": 1577,
        "end_line": 1578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017361111111111112,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1583",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1583,
        "end_line": 1584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001633986928104575,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_blocks#1644",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_blocks(blocks, axes)",
        "snippet": "def create_block_manager_from_blocks(blocks, axes):\n    try:\n        if len(blocks) == 1 and not isinstance(blocks[0], Block):\n            # if blocks[0] is of length 0, return empty blocks\n            if not len(blocks[0]):\n                blocks = []\n            else:\n                # It's OK if a single block is passed as values, its placement\n                # is basically \"all items\", but if there're many, don't bother\n                # converting, it's an error anyway.\n                blocks = [\n                    make_block(values=blocks[0], placement=slice(0, len(axes[0])))\n                ]\n\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n\n    except ValueError as e:\n        blocks = [getattr(b, \"values\", b) for b in blocks]\n        tot_items = sum(b.shape[0] for b in blocks)\n        construction_error(tot_items, blocks[0].shape[1:], axes, e)",
        "begin_line": 1644,
        "end_line": 1665,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1668",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names, axes)",
        "snippet": "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1668,
        "end_line": 1676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001484560570071259,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1701",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names, axes)",
        "snippet": "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=[i])\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=[i])\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1701,
        "end_line": 1795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1798",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype):\n    \"\"\" return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1798,
        "end_line": 1809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002642706131078224,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1812",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1812,
        "end_line": 1826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001996007984031936,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1829",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1829,
        "end_line": 1853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019138755980861245,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1832",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1832,
        "end_line": 1836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030156815440289503,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1838",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1838,
        "end_line": 1842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030156815440289503,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._interleaved_dtype#1856",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._interleaved_dtype(blocks: List[Block])",
        "snippet": "def _interleaved_dtype(\n    blocks: List[Block],\n) -> Optional[Union[np.dtype, ExtensionDtype]]:\n    \"\"\"Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : Optional[Union[np.dtype, ExtensionDtype]]\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
        "begin_line": 1856,
        "end_line": 1873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._consolidate#1876",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._consolidate(blocks)",
        "snippet": "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
        "begin_line": 1876,
        "end_line": 1891,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001525320317266626,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._fast_count_smallints#1964",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._fast_count_smallints(arr)",
        "snippet": "def _fast_count_smallints(arr):\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
        "begin_line": 1964,
        "end_line": 1968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.managers._preprocess_slice_or_indexer#1971",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill)",
        "snippet": "def _preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
        "begin_line": 1971,
        "end_line": 1986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.missing.fill_zeros#33",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.fill_zeros(result, x, y)",
        "snippet": "def fill_zeros(result, x, y):\n    \"\"\"\n    If this is a reversed op, then flip x,y\n\n    If we have an integer value (or array in y)\n    and we have 0's, fill them with np.nan,\n    return the result.\n\n    Mask the nan's from x.\n    \"\"\"\n    if is_float_dtype(result.dtype):\n        return result\n\n    is_variable_type = hasattr(y, \"dtype\") or hasattr(y, \"type\")\n    is_scalar_type = is_scalar(y)\n\n    if not is_variable_type and not is_scalar_type:\n        return result\n\n    if is_scalar_type:\n        y = np.array(y)\n\n    if is_integer_dtype(y.dtype):\n\n        if (y == 0).any():\n\n            # GH#7325, mask and nans must be broadcastable (also: GH#9308)\n            # Raveling and then reshaping makes np.putmask faster\n            mask = ((y == 0) & ~np.isnan(result)).ravel()\n\n            shape = result.shape\n            result = result.astype(\"float64\", copy=False).ravel()\n\n            np.putmask(result, mask, np.nan)\n\n            result = result.reshape(shape)\n\n    return result",
        "begin_line": 33,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025926886180969663,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.missing.mask_zero_div_zero#73",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.mask_zero_div_zero(x, y, result)",
        "snippet": "def mask_zero_div_zero(x, y, result):\n    \"\"\"\n    Set results of 0 / 0 or 0 // 0 to np.nan, regardless of the dtypes\n    of the numerator or the denominator.\n\n    Parameters\n    ----------\n    x : ndarray\n    y : ndarray\n    result : ndarray\n\n    Returns\n    -------\n    filled_result : ndarray\n\n    Examples\n    --------\n    >>> x = np.array([1, 0, -1], dtype=np.int64)\n    >>> y = 0       # int 0; numpy behavior is different with float\n    >>> result = x / y\n    >>> result      # raw numpy result does not fill division by zero\n    array([0, 0, 0])\n    >>> mask_zero_div_zero(x, y, result)\n    array([ inf,  nan, -inf])\n    \"\"\"\n    if not isinstance(result, np.ndarray):\n        # FIXME: SparseArray would raise TypeError with np.putmask\n        return result\n\n    if is_scalar(y):\n        y = np.array(y)\n\n    zmask = y == 0\n\n    if isinstance(zmask, bool):\n        # FIXME: numpy did not evaluate pointwise, seen in docs build\n        return result\n\n    if zmask.any():\n        shape = result.shape\n\n        # Flip sign if necessary for -0.0\n        zneg_mask = zmask & np.signbit(y)\n        zpos_mask = zmask & ~zneg_mask\n\n        nan_mask = (zmask & (x == 0)).ravel()\n        with np.errstate(invalid=\"ignore\"):\n            neginf_mask = ((zpos_mask & (x < 0)) | (zneg_mask & (x > 0))).ravel()\n            posinf_mask = ((zpos_mask & (x > 0)) | (zneg_mask & (x < 0))).ravel()\n\n        if nan_mask.any() or neginf_mask.any() or posinf_mask.any():\n            # Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN\n            result = result.astype(\"float64\", copy=False).ravel()\n\n            np.putmask(result, nan_mask, np.nan)\n            np.putmask(result, posinf_mask, np.inf)\n            np.putmask(result, neginf_mask, -np.inf)\n\n            result = result.reshape(shape)\n\n    return result",
        "begin_line": 73,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022466861379465288,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.methods.f#94",
        "src_path": "pandas/core/ops/methods.py",
        "class_name": "pandas.core.ops.methods",
        "signature": "pandas.core.ops.methods.f(self, other)",
        "snippet": "        def f(self, other):\n            result = method(self, other)\n\n            # this makes sure that we are aligned like the input\n            # we are updating inplace so we want to ignore is_copy\n            self._update_inplace(\n                result.reindex_like(self, copy=False)._data, verify_is_copy=False\n            )\n\n            return self",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017482517482517483,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.maybe_box#75",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box(indexer, values, obj, key)",
        "snippet": "def maybe_box(indexer, values, obj, key):\n\n    # if we have multiples coming back, box em\n    if isinstance(values, np.ndarray):\n        return obj[indexer.get_loc(key)]\n\n    # return the value\n    return values",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.maybe_box_datetimelike#85",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box_datetimelike(value)",
        "snippet": "def maybe_box_datetimelike(value):\n    # turn a datetime like into a Timestamp/timedelta as needed\n\n    if isinstance(value, (np.datetime64, datetime)):\n        value = tslibs.Timestamp(value)\n    elif isinstance(value, (np.timedelta64, timedelta)):\n        value = tslibs.Timedelta(value)\n\n    return value",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002642706131078224,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#99",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n        Whether `key` is a valid boolean indexer.\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n\n    See Also\n    --------\n    check_bool_array_indexer : Check that `key`\n        is a valid mask for an array, and convert to an ndarray.\n    \"\"\"\n    na_msg = \"cannot mask with array containing NA / NaN values\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(values_from_object(key))\n\n            if not lib.is_bool_array(key):\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            # an ndarray with bool-dtype by definition has no missing values.\n            # So we only need to check for NAs in ExtensionArrays\n            if is_extension_array_dtype(key.dtype):\n                if np.any(key.isna()):\n                    raise ValueError(na_msg)\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 99,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016059097478721696,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#156",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val == int(val):\n        return int(val)\n    return val",
        "begin_line": 156,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013482540110556829,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.any_none#181",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args):\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 181,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012465719272001995,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.all_none#188",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args):\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 188,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012208521548040532,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.any_not_none#195",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_not_none(*args)",
        "snippet": "def any_not_none(*args):\n    \"\"\"\n    Returns a boolean indicating if any argument is not None.\n    \"\"\"\n    return any(arg is not None for arg in args)",
        "begin_line": 195,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.count_not_none#209",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args):\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 209,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011957431543704412,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#224",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values.values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 224,
        "end_line": 244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#280",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable[T], T])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 280,
        "end_line": 286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012914890869172155,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#289",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj):\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 289,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#335",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 335,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013544629554381688,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate._getter#84",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate._getter(self)",
        "snippet": "            def _getter(self):\n                return self._delegate_property_get(name)",
        "begin_line": 84,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012704865963664082,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate.f#98",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate.f(self, *args, **kwargs)",
        "snippet": "            def f(self, *args, **kwargs):\n                return self._delegate_method(name, *args, **kwargs)",
        "begin_line": 98,
        "end_line": 99,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016051364365971107,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.accessor.CachedAccessor.__get__#183",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.CachedAccessor",
        "signature": "pandas.core.accessor.CachedAccessor.__get__(self, obj, cls)",
        "snippet": "    def __get__(self, obj, cls):\n        if obj is None:\n            # we're accessing the attribute of the class, i.e., Dataset.geo\n            return self._accessor\n        accessor_obj = self._accessor(obj)\n        # Replace the property with the accessor object. Inspired by:\n        # http://www.pydanny.com/cached-property.html\n        # We need to use object.__setattr__ because we overwrite __setattr__ on\n        # NDFrame\n        object.__setattr__(obj, self._name, accessor_obj)\n        return accessor_obj",
        "begin_line": 183,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#66",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = set(islice(arg, check_count))\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 66,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020202020202020202,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#122",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series(dtype=object)\n\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 122,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020202020202020202,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.datetimes._box_as_indexlike#157",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._box_as_indexlike(dt_array: ArrayLike, utc: Optional[bool]=None, name: Optional[str]=None)",
        "snippet": "def _box_as_indexlike(\n    dt_array: ArrayLike, utc: Optional[bool] = None, name: Optional[str] = None\n) -> Union[ABCIndex, ABCDatetimeIndex]:\n    \"\"\"\n    Properly boxes the ndarray of datetimes to DatetimeIndex\n    if it is possible or to generic Index instead\n\n    Parameters\n    ----------\n    dt_array: 1-d array\n        Array of datetimes to be wrapped in an Index.\n    tz : object\n        None or 'utc'\n    name : string, default None\n        Name for a resulting index\n\n    Returns\n    -------\n    result : datetime of converted dates\n        - DatetimeIndex if convertible to sole datetime64 type\n        - general Index otherwise\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n\n    if is_datetime64_dtype(dt_array):\n        tz = \"utc\" if utc else None\n        return DatetimeIndex(dt_array, tz=tz, name=name)\n    return Index(dt_array, name=name)",
        "begin_line": 157,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#246",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            return arg.tz_localize(tz)\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"_values\", arg)\n\n        # GH 30050 pass an ndarray to tslib.array_with_unit_to_datetime\n        # because it expects an ndarray argument\n        if isinstance(arg, IntegerArray):\n            # Explicitly pass NaT mask to array_with_unit_to_datetime\n            mask = arg.isna()\n            arg = arg._ndarray_values\n        else:\n            mask = None\n\n        result, tz_parsed = tslib.array_with_unit_to_datetime(\n            arg, mask, unit, errors=errors\n        )\n\n        if errors == \"ignore\":\n            from pandas import Index\n\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n        # GH 23758: We may still need to localize the result with tz\n        # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n        # result will be naive but in UTC\n        try:\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        except AttributeError:\n            # Regular Index from 'ignore' path\n            return result\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                    raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                return DatetimeIndex._simple_new(values, name=name, tz=tz)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        # is in UTC\n        return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n\n    utc = tz == \"utc\"\n    return _box_as_indexlike(result, utc=utc, name=name)",
        "begin_line": 246,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#530",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series DataFrame/dict-like\n        The object to convert to a datetime.\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    format : str, default None\n        The strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior.\n    exact : bool, True by default\n        Behaves as:\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        The unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings, and if it can be inferred, switch to a faster\n        method of parsing them. In some cases this can increase the parsing\n        speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True.\n\n    Returns\n    -------\n    datetime\n        If parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, format)\n    elif is_list_like(arg):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array)\n        else:\n            result = convert_listlike(arg, format)\n    else:\n        result = convert_listlike(np.array([arg]), format)[0]\n\n    return result",
        "begin_line": 530,
        "end_line": 745,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020202020202020202,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#29",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 29,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011961722488038278,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_iterator#96",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_iterator(obj)",
        "snippet": "def is_iterator(obj) -> bool:\n    \"\"\"\n    Check if the object is an iterator.\n\n    For example, lists are considered iterators\n    but not strings or datetime objects.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_iter : bool\n        Whether `obj` is an iterator.\n\n    Examples\n    --------\n    >>> is_iterator([1, 2, 3])\n    True\n    >>> is_iterator(datetime(2017, 1, 1))\n    False\n    >>> is_iterator(\"foo\")\n    False\n    >>> is_iterator(1)\n    False\n    \"\"\"\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return hasattr(obj, \"__next__\")",
        "begin_line": 96,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#220",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 220,
        "end_line": 250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001297521733489036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#299",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 299,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002007226013649137,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_named_tuple#331",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_named_tuple(obj)",
        "snippet": "def is_named_tuple(obj) -> bool:\n    \"\"\"\n    Check if the object is a named tuple.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_named_tuple : bool\n        Whether `obj` is a named tuple.\n\n    Examples\n    --------\n    >>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    >>> p = Point(1, 2)\n    >>>\n    >>> is_named_tuple(p)\n    True\n    >>> is_named_tuple((1, 2))\n    False\n    \"\"\"\n\n    return isinstance(obj, tuple) and hasattr(obj, \"_fields\")",
        "begin_line": 331,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#358",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 358,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030959752321981426,
            "pseudo_dstar_susp": 0.0030959752321981426,
            "pseudo_tarantula_susp": 0.003105590062111801,
            "pseudo_op2_susp": 0.0030959752321981426,
            "pseudo_barinel_susp": 0.003105590062111801
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#395",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj) -> bool:\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 395,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.02564102564102564,
            "pseudo_dstar_susp": 0.02564102564102564,
            "pseudo_tarantula_susp": 0.02564102564102564,
            "pseudo_op2_susp": 0.013157894736842105,
            "pseudo_barinel_susp": 0.02564102564102564
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#83",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, start, cls)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            start = start._range\n            return cls._simple_new(start, dtype=dtype, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, dtype=dtype, name=name)",
        "begin_line": 83,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#132",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values, name=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None):\n        result = object.__new__(cls)\n\n        # handle passed None, non-integers\n        if values is None:\n            # empty\n            values = range(0, 0, 1)\n        elif not isinstance(values, range):\n            return Index(values, dtype=dtype, name=name)\n\n        result._range = values\n        result.name = name\n\n        result._reset_identity()\n        return result",
        "begin_line": 132,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012184720360667723,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012701638511367967,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._int64index#171",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._int64index(self)",
        "snippet": "    def _int64index(self):\n        return Int64Index._simple_new(self._data, name=self.name)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000250689395838556,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012677484787018255,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012682308180088776,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012677484787018255,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012669453946534905,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_unique#321",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\" return if the index has unique values \"\"\"\n        return True",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019782393669634025,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_monotonic_increasing#326",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        return self._range.step > 0 or len(self) <= 1",
        "begin_line": 326,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__contains__#337",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__contains__(self, key: Union[int, np.integer])",
        "snippet": "    def __contains__(self, key: Union[int, np.integer]) -> bool:\n        hash(key)\n        try:\n            key = ensure_python_int(key)\n        except TypeError:\n            return False\n        return key in self._range",
        "begin_line": 337,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001809299800977022,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_loc#346",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if is_integer(key) and method is None and tolerance is None:\n            new_key = int(key)\n            try:\n                return self._range.index(new_key)\n            except ValueError:\n                raise KeyError(key)\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 346,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_indexer#356",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n\n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # GH 28678: work on reversed range for simplicity\n            reverse = self._range[::-1]\n            start, stop, step = reverse.start, reverse.stop, reverse.step\n\n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n\n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n\n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)",
        "begin_line": 356,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._shallow_copy#388",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            name = kwargs.get(\"name\", self.name)\n            return self._simple_new(self._range, name=name)\n        else:\n            kwargs.setdefault(\"name\", self.name)\n            return self._int64index._shallow_copy(values, **kwargs)",
        "begin_line": 388,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029515938606847696,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#444",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 444,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002770850651149903,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._union#549",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Form the union of two Index objects and sorts if possible\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        sort : False or None, default None\n            Whether to sort resulting index. ``sort=None`` returns a\n            monotonically increasing ``RangeIndex`` if possible or a sorted\n            ``Int64Index`` if not. ``sort=False`` always returns an\n            unsorted ``Int64Index``\n\n            .. versionadded:: 0.25.0\n\n        Returns\n        -------\n        union : Index\n        \"\"\"\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        if isinstance(other, RangeIndex) and sort is None:\n            start_s, step_s = self.start, self.step\n            end_s = self.start + self.step * (len(self) - 1)\n            start_o, step_o = other.start, other.step\n            end_o = other.start + other.step * (len(other) - 1)\n            if self.step < 0:\n                start_s, step_s, end_s = end_s, -step_s, start_s\n            if other.step < 0:\n                start_o, step_o, end_o = end_o, -step_o, start_o\n            if len(self) == 1 and len(other) == 1:\n                step_s = step_o = abs(self.start - other.start)\n            elif len(self) == 1:\n                step_s = step_o\n            elif len(other) == 1:\n                step_o = step_s\n            start_r = min(start_s, start_o)\n            end_r = max(end_s, end_o)\n            if step_o == step_s:\n                if (\n                    (start_s - start_o) % step_s == 0\n                    and (start_s - end_o) <= step_s\n                    and (start_o - end_s) <= step_s\n                ):\n                    return type(self)(start_r, end_r + step_s, step_s)\n                if (\n                    (step_s % 2 == 0)\n                    and (abs(start_s - start_o) <= step_s / 2)\n                    and (abs(end_s - end_o) <= step_s / 2)\n                ):\n                    return type(self)(start_r, end_r + step_s / 2, step_s / 2)\n            elif step_o % step_s == 0:\n                if (\n                    (start_o - start_s) % step_s == 0\n                    and (start_o + step_s >= start_s)\n                    and (end_o - step_s <= end_s)\n                ):\n                    return type(self)(start_r, end_r + step_s, step_s)\n            elif step_s % step_o == 0:\n                if (\n                    (start_s - start_o) % step_o == 0\n                    and (start_s + step_o >= start_o)\n                    and (end_s - step_o <= end_o)\n                ):\n                    return type(self)(start_r, end_r + step_o, step_o)\n        return self._int64index._union(other, sort=sort)",
        "begin_line": 549,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.join#619",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        if how == \"outer\" and self is not other:\n            # note: could return RangeIndex in more circumstances\n            return self._int64index.join(other, how, level, return_indexers, sort)\n\n        return super().join(other, how, level, return_indexers, sort)",
        "begin_line": 619,
        "end_line": 624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#675",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 675,
        "end_line": 679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012208521548040532,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__getitem__#685",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Conserve RangeIndex type for scalar and slice keys.\n        \"\"\"\n        if isinstance(key, slice):\n            new_range = self._range[key]\n            return self._simple_new(new_range, name=self.name)\n        elif is_integer(key):\n            new_key = int(key)\n            try:\n                return self._range[new_key]\n            except IndexError:\n                raise IndexError(\n                    f\"index {key} is out of bounds for axis 0 with size {len(self)}\"\n                )\n        elif is_scalar(key):\n            raise IndexError(\n                \"only integers, slices (`:`), \"\n                \"ellipsis (`...`), numpy.newaxis (`None`) \"\n                \"and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n        # fall back to Int64Index\n        return super().__getitem__(key)",
        "begin_line": 685,
        "end_line": 708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030156815440289503,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__floordiv__#711",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__floordiv__(self, other)",
        "snippet": "    def __floordiv__(self, other):\n\n        if is_integer(other) and other != 0:\n            if len(self) == 0 or self.start % other == 0 and self.step % other == 0:\n                start = self.start // other\n                step = self.step // other\n                stop = start + len(self) * step\n                new_range = range(start, stop, step or 1)\n                return self._simple_new(new_range, name=self.name)\n            if len(self) == 1:\n                start = self.start // other\n                new_range = range(start, start + 1, 1)\n                return self._simple_new(new_range, name=self.name)\n        return self._int64index // other",
        "begin_line": 711,
        "end_line": 724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._make_evaluate_binop#736",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._make_evaluate_binop(op, step=False)",
        "snippet": "        def _make_evaluate_binop(op, step=False):\n            \"\"\"\n            Parameters\n            ----------\n            op : callable that accepts 2 parms\n                perform the binary op\n            step : callable, optional, default to False\n                op to apply to the step parm if not None\n                if False, use the existing step\n            \"\"\"\n\n            @unpack_zerodim_and_defer(op.__name__)\n            def _evaluate_numeric_binop(self, other):\n                if isinstance(other, ABCTimedeltaIndex):\n                    # Defer to TimedeltaIndex implementation\n                    return NotImplemented\n                elif isinstance(other, (timedelta, np.timedelta64)):\n                    # GH#19333 is_integer evaluated True on timedelta64,\n                    # so we need to catch these explicitly\n                    return op(self._int64index, other)\n                elif is_timedelta64_dtype(other):\n                    # Must be an np.ndarray; GH#22390\n                    return op(self._int64index, other)\n\n                other = extract_array(other, extract_numpy=True)\n                attrs = self._get_attributes_dict()\n\n                left, right = self, other\n\n                try:\n                    # apply if we have an override\n                    if step:\n                        with np.errstate(all=\"ignore\"):\n                            rstep = step(left.step, right)\n\n                        # we don't have a representable op\n                        # so return a base index\n                        if not is_integer(rstep) or not rstep:\n                            raise ValueError\n\n                    else:\n                        rstep = left.step\n\n                    with np.errstate(all=\"ignore\"):\n                        rstart = op(left.start, right)\n                        rstop = op(left.stop, right)\n\n                    result = type(self)(rstart, rstop, rstep, **attrs)\n\n                    # for compat with numpy / Int64Index\n                    # even if we can represent as a RangeIndex, return\n                    # as a Float64Index if we have float-like descriptors\n                    if not all(is_integer(x) for x in [rstart, rstop, rstep]):\n                        result = result.astype(\"float64\")\n\n                    return result\n\n                except (ValueError, TypeError, ZeroDivisionError):\n                    # Defer to Int64Index implementation\n                    return op(self._int64index, other)\n                    # TODO: Do attrs get handled reliably?\n\n            name = f\"__{op.__name__}__\"\n            return compat.set_function_name(_evaluate_numeric_binop, name, cls)",
        "begin_line": 736,
        "end_line": 799,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002390057361376673,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._evaluate_numeric_binop#748",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._evaluate_numeric_binop(self, other)",
        "snippet": "            def _evaluate_numeric_binop(self, other):\n                if isinstance(other, ABCTimedeltaIndex):\n                    # Defer to TimedeltaIndex implementation\n                    return NotImplemented\n                elif isinstance(other, (timedelta, np.timedelta64)):\n                    # GH#19333 is_integer evaluated True on timedelta64,\n                    # so we need to catch these explicitly\n                    return op(self._int64index, other)\n                elif is_timedelta64_dtype(other):\n                    # Must be an np.ndarray; GH#22390\n                    return op(self._int64index, other)\n\n                other = extract_array(other, extract_numpy=True)\n                attrs = self._get_attributes_dict()\n\n                left, right = self, other\n\n                try:\n                    # apply if we have an override\n                    if step:\n                        with np.errstate(all=\"ignore\"):\n                            rstep = step(left.step, right)\n\n                        # we don't have a representable op\n                        # so return a base index\n                        if not is_integer(rstep) or not rstep:\n                            raise ValueError\n\n                    else:\n                        rstep = left.step\n\n                    with np.errstate(all=\"ignore\"):\n                        rstart = op(left.start, right)\n                        rstop = op(left.stop, right)\n\n                    result = type(self)(rstart, rstop, rstep, **attrs)\n\n                    # for compat with numpy / Int64Index\n                    # even if we can represent as a RangeIndex, return\n                    # as a Float64Index if we have float-like descriptors\n                    if not all(is_integer(x) for x in [rstart, rstop, rstep]):\n                        result = result.astype(\"float64\")\n\n                    return result\n\n                except (ValueError, TypeError, ZeroDivisionError):\n                    # Defer to Int64Index implementation\n                    return op(self._int64index, other)",
        "begin_line": 748,
        "end_line": 795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._decorators.decorate#224",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorate(func: F)",
        "snippet": "    def decorate(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)\n\n        kind = inspect.Parameter.POSITIONAL_OR_KEYWORD\n        params = [\n            inspect.Parameter(\"self\", kind),\n            inspect.Parameter(name, kind, default=None),\n            inspect.Parameter(\"index\", kind, default=None),\n            inspect.Parameter(\"columns\", kind, default=None),\n            inspect.Parameter(\"axis\", kind, default=None),\n        ]\n\n        for pname, default in extra_params:\n            params.append(inspect.Parameter(pname, kind, default=default))\n\n        sig = inspect.Signature(params)\n\n        # https://github.com/python/typing/issues/598\n        func.__signature__ = sig  # type: ignore\n        return cast(F, wrapper)",
        "begin_line": 224,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019413706076490002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#226",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019413706076490002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#111",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                f\"Wrong number of items passed {len(self.values)}, \"\n                f\"placement implies {len(self.mgr_locs)}\"\n            )",
        "begin_line": 111,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#122",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            raise ValueError(\n                \"Wrong number of dimensions. \"\n                f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n            )\n        return ndim",
        "begin_line": 122,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015477480266212662,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._consolidate_key#163",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._consolidate_key(self)",
        "snippet": "    def _consolidate_key(self):\n        return (self._can_consolidate, self.dtype.name)",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001525320317266626,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_view#171",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        return self.values.base is not None",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019275250578257516,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_categorical_astype#180",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_categorical_astype(self, dtype)",
        "snippet": "    def is_categorical_astype(self, dtype):\n        \"\"\"\n        validate that we have a astypeable to categorical,\n        returns a boolean if we are a categorical\n        \"\"\"\n        if dtype is Categorical or dtype is CategoricalDtype:\n            # this is a pd.Categorical, but is not\n            # a valid type for astypeing\n            raise TypeError(f\"invalid type {dtype} for astype\")\n\n        elif is_categorical_dtype(dtype):\n            return True\n\n        return False",
        "begin_line": 180,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016589250165892502,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.external_values#195",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.external_values(self, dtype=None)",
        "snippet": "    def external_values(self, dtype=None):\n        \"\"\" return an outside world format, currently just the ndarray \"\"\"\n        return self.values",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002390057361376673,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#199",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self, dtype=None)",
        "snippet": "    def internal_values(self, dtype=None):\n        \"\"\" return an internal format, currently just the ndarray\n        this should be the pure internal API format\n        \"\"\"\n        return self.values",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.get_values#205",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return an internal format, currently just the ndarray\n        this is often overridden to handle to_dense like operations\n        \"\"\"\n        if is_object_dtype(dtype):\n            return self.values.astype(object)\n        return self.values",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002610966057441253,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.to_dense#220",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.to_dense(self)",
        "snippet": "    def to_dense(self):\n        return self.values.view()",
        "begin_line": 220,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013296104241457252,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fill_value#224",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.nan",
        "begin_line": 224,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#228",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 228,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001250625312656328,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#232",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 232,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012537612838515547,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#245",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None) -> \"Block\":\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 245,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001506931886678722,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#255",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
        "begin_line": 255,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#291",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        return self.values[slicer]",
        "begin_line": 291,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.getitem_block#295",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.getitem_block(self, slicer, new_mgr_locs=None)",
        "snippet": "    def getitem_block(self, slicer, new_mgr_locs=None):\n        \"\"\"\n        Perform __getitem__-like, return result as block.\n\n        As of now, only supports slices that preserve dimensionality.\n        \"\"\"\n        if new_mgr_locs is None:\n            if isinstance(slicer, tuple):\n                axis0_slicer = slicer[0]\n            else:\n                axis0_slicer = slicer\n            new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n        new_values = self._slice(slicer)\n\n        if self._validate_ndim and new_values.ndim != self.ndim:\n            raise ValueError(\"Only same dim slicing is allowed\")\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 295,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#316",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 316,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014896469536719798,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#320",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 320,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012405408758218582,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.ftype#324",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.ftype(self)",
        "snippet": "    def ftype(self):\n        if getattr(self.values, \"_pandas_ftype\", False):\n            dtype = self.dtype.subtype\n        else:\n            dtype = self.dtype\n        return f\"{dtype}:{self._ftype}\"",
        "begin_line": 324,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013585110718652356,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#345",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 345,
        "end_line": 346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015659254619480113,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.apply#365",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.apply(self, func, **kwargs)",
        "snippet": "    def apply(self, func, **kwargs):\n        \"\"\" apply the function to my values; return a block if we are not\n        one\n        \"\"\"\n        with np.errstate(all=\"ignore\"):\n            result = func(self.values, **kwargs)\n\n        if is_extension_array_dtype(result) and result.ndim > 1:\n            # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n            nbs = []\n            for i, loc in enumerate(self.mgr_locs):\n                vals = result[i]\n                nv = _block_shape(vals, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=[loc])\n                nbs.append(block)\n            return nbs\n\n        if not isinstance(result, Block):\n            result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n\n        return result",
        "begin_line": 365,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034423407917383823,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fillna#387",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fillna(self, value, limit=None, inplace=False, downcast=None)",
        "snippet": "    def fillna(self, value, limit=None, inplace=False, downcast=None):\n        \"\"\" fillna on the block with the value. If we fail, then convert to\n        ObjectBlock and try again\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        mask = isna(self.values)\n        if limit is not None:\n            limit = libalgos._validate_limit(None, limit=limit)\n            mask[mask.cumsum(self.ndim - 1) > limit] = False\n\n        if not self._can_hold_na:\n            if inplace:\n                return self\n            else:\n                return self.copy()\n\n        if self._can_hold_element(value):\n            # equivalent: _try_coerce_args(value) would not raise\n            blocks = self.putmask(mask, value, inplace=inplace)\n            return self._maybe_downcast(blocks, downcast)\n\n        # we can't process the value, but nothing to do\n        if not mask.any():\n            return self if inplace else self.copy()\n\n        # operate column-by-column\n        def f(mask, val, idx):\n            block = self.coerce_to_target_dtype(value)\n\n            # slice out our block\n            if idx is not None:\n                # i.e. self.ndim == 2\n                block = block.getitem_block(slice(idx, idx + 1))\n            return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n\n        return self.split_and_operate(None, f, inplace)",
        "begin_line": 387,
        "end_line": 423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._maybe_downcast#485",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._maybe_downcast(self, blocks: List['Block'], downcast=None)",
        "snippet": "    def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n        # no need to downcast our float\n        # unless indicated\n        if downcast is None and (\n            self.is_float or self.is_timedelta or self.is_datetime\n        ):\n            return blocks\n\n        return _extend_blocks([b.downcast(downcast) for b in blocks])",
        "begin_line": 485,
        "end_line": 494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.astype#534",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        Coerce to the new dtype.\n\n        Parameters\n        ----------\n        dtype : str, dtype convertible\n        copy : bool, default False\n            copy if indicated\n        errors : str, {'raise', 'ignore'}, default 'ignore'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        errors_legal_values = (\"raise\", \"ignore\")\n\n        if errors not in errors_legal_values:\n            invalid_arg = (\n                \"Expected value of kwarg 'errors' to be one of \"\n                f\"{list(errors_legal_values)}. Supplied value is '{errors}'\"\n            )\n            raise ValueError(invalid_arg)\n\n        if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n            msg = (\n                f\"Expected an instance of {dtype.__name__}, \"\n                \"but got the class instead. Try instantiating 'dtype'.\"\n            )\n            raise TypeError(msg)\n\n        # may need to convert to categorical\n        if self.is_categorical_astype(dtype):\n\n            if is_categorical_dtype(self.values):\n                # GH 10696/18593: update an existing categorical efficiently\n                return self.make_block(self.values.astype(dtype, copy=copy))\n\n            return self.make_block(Categorical(self.values, dtype=dtype))\n\n        dtype = pandas_dtype(dtype)\n\n        # astype processing\n        if is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n\n        # force the copy here\n        if self.is_extension:\n            # TODO: Should we try/except this astype?\n            values = self.values.astype(dtype)\n        else:\n            if issubclass(dtype.type, str):\n\n                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types()\n\n                # astype formatting\n                else:\n                    values = self.get_values()\n\n            else:\n                values = self.get_values(dtype=dtype)\n\n            # _astype_nansafe works fine with 1-d only\n            vals1d = values.ravel()\n            try:\n                values = astype_nansafe(vals1d, dtype, copy=True)\n            except (ValueError, TypeError):\n                # e.g. astype_nansafe can fail on object-dtype of strings\n                #  trying to convert to float\n                if errors == \"raise\":\n                    raise\n                newb = self.copy() if copy else self\n                return newb\n\n        # TODO(extension)\n        # should we make this attribute?\n        if isinstance(values, np.ndarray):\n            values = values.reshape(self.shape)\n\n        newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n        if newb.is_numeric and self.is_numeric:\n            if newb.shape != self.shape:\n                raise TypeError(\n                    f\"cannot set astype for copy = [{copy}] for dtype \"\n                    f\"({self.dtype.name} [{self.shape}]) to different shape \"\n                    f\"({newb.dtype.name} [{newb.shape}])\"\n                )\n        return newb",
        "begin_line": 534,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001932367149758454,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#671",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 671,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018162005085361425,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.setitem#784",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a a maybe different typed block.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n\n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n\n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar(values, value)\n\n        else:\n            # current dtype cannot store value, coerce to common dtype\n            find_dtype = False\n\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n                find_dtype = True\n\n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n                find_dtype = True\n\n            if find_dtype:\n                dtype = find_common_type([values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n\n        # value must be storeable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n\n        # cast the values to a type that can hold nan (if necessary)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            values = values.astype(dtype)\n\n        if transpose:\n            values = values.T\n\n        # length checking\n        check_setitem_lengths(indexer, value, values)\n\n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n\n        elif is_scalar_indexer(indexer, arr_value):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n\n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        ):\n            values[indexer] = value\n            try:\n                values = values.astype(arr_value.dtype)\n            except ValueError:\n                pass\n\n        # set\n        else:\n            values[indexer] = value\n\n        if transpose:\n            values = values.T\n        block = self.make_block(values)\n        return block",
        "begin_line": 784,
        "end_line": 885,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.putmask#887",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
        "snippet": "    def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n        \"\"\" putmask the data to the block; it is possible that we may create a\n        new dtype of block\n\n        return the resulting block(s)\n\n        Parameters\n        ----------\n        mask  : the condition to respect\n        new : a ndarray/object\n        align : boolean, perform alignment on other/cond, default is True\n        inplace : perform inplace modification, default is False\n        axis : int\n        transpose : boolean\n            Set to True if self is stored with axes reversed\n\n        Returns\n        -------\n        a list of new blocks, the result of the putmask\n        \"\"\"\n\n        new_values = self.values if inplace else self.values.copy()\n\n        new = getattr(new, \"values\", new)\n        mask = getattr(mask, \"values\", mask)\n\n        # if we are passed a scalar None, convert it here\n        if not is_list_like(new) and isna(new) and not self.is_object:\n            # FIXME: make sure we have compatible NA\n            new = self.fill_value\n\n        if self._can_hold_element(new):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(new):\n                new = convert_scalar(new_values, new)\n\n            if transpose:\n                new_values = new_values.T\n\n            # If the default repeat behavior in np.putmask would go in the\n            # wrong direction, then explicitly repeat and reshape new instead\n            if getattr(new, \"ndim\", 0) >= 1:\n                if self.ndim - 1 == new.ndim and axis == 1:\n                    new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n                new = new.astype(new_values.dtype)\n\n            # we require exact matches between the len of the\n            # values we are setting (or is compat). np.putmask\n            # doesn't check this and will simply truncate / pad\n            # the output, but we want sane error messages\n            #\n            # TODO: this prob needs some better checking\n            # for 2D cases\n            if (\n                is_list_like(new)\n                and np.any(mask[mask])\n                and getattr(new, \"ndim\", 1) == 1\n            ):\n                if mask[mask].shape[-1] == len(new):\n                    # GH 30567\n                    # If length of ``new`` is less than the length of ``new_values``,\n                    # `np.putmask` would first repeat the ``new`` array and then\n                    # assign the masked values hence produces incorrect result.\n                    # `np.place` on the other hand uses the ``new`` values at it is\n                    # to place in the masked locations of ``new_values``\n                    np.place(new_values, mask, new)\n                elif mask.shape[-1] == len(new) or len(new) == 1:\n                    np.putmask(new_values, mask, new)\n                else:\n                    raise ValueError(\"cannot assign mismatch length to masked array\")\n            else:\n                np.putmask(new_values, mask, new)\n\n        # maybe upcast me\n        elif mask.any():\n            if transpose:\n                mask = mask.T\n                if isinstance(new, np.ndarray):\n                    new = new.T\n                axis = new_values.ndim - axis - 1\n\n            # Pseudo-broadcast\n            if getattr(new, \"ndim\", 0) >= 1:\n                if self.ndim - 1 == new.ndim:\n                    new_shape = list(new.shape)\n                    new_shape.insert(axis, 1)\n                    new = new.reshape(tuple(new_shape))\n\n            # operate column-by-column\n            def f(mask, val, idx):\n\n                if idx is None:\n                    # ndim==1 case.\n                    n = new\n                else:\n\n                    if isinstance(new, np.ndarray):\n                        n = np.squeeze(new[idx % new.shape[0]])\n                    else:\n                        n = np.array(new)\n\n                    # type of the new block\n                    dtype, _ = maybe_promote(n.dtype)\n\n                    # we need to explicitly astype here to make a copy\n                    n = n.astype(dtype)\n\n                nv = _putmask_smart(val, mask, n)\n                return nv\n\n            new_blocks = self.split_and_operate(mask, f, inplace)\n            return new_blocks\n\n        if inplace:\n            return [self]\n\n        if transpose:\n            new_values = new_values.T\n\n        return [self.make_block(new_values)]",
        "begin_line": 887,
        "end_line": 1007,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.take_nd#1237",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None)",
        "snippet": "    def take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None):\n        \"\"\"\n        Take values according to indexer and return them as a block.bb\n\n        \"\"\"\n\n        # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n        # so need to preserve types\n        # sparse is treated like an ndarray, but needs .get_values() shaping\n\n        values = self.values\n\n        if fill_tuple is None:\n            fill_value = self.fill_value\n            allow_fill = False\n        else:\n            fill_value = fill_tuple[0]\n            allow_fill = True\n\n        new_values = algos.take_nd(\n            values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        if not is_dtype_equal(new_values.dtype, self.dtype):\n            return self.make_block(new_values, new_mgr_locs)\n        else:\n            return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1237,
        "end_line": 1269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shift#1276",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shift(self, periods, axis=0, fill_value=None)",
        "snippet": "    def shift(self, periods, axis=0, fill_value=None):\n        \"\"\" shift the block by periods, possibly upcast \"\"\"\n\n        # convert integer to float if necessary. need to do a lot more than\n        # that, handle boolean etc also\n        new_values, fill_value = maybe_upcast(self.values, fill_value)\n\n        # make sure array sent to np.roll is c_contiguous\n        f_ordered = new_values.flags.f_contiguous\n        if f_ordered:\n            new_values = new_values.T\n            axis = new_values.ndim - axis - 1\n\n        if np.prod(new_values.shape):\n            new_values = np.roll(new_values, ensure_platform_int(periods), axis=axis)\n\n        axis_indexer = [slice(None)] * self.ndim\n        if periods > 0:\n            axis_indexer[axis] = slice(None, periods)\n        else:\n            axis_indexer[axis] = slice(periods, None)\n        new_values[tuple(axis_indexer)] = fill_value\n\n        # restore original order\n        if f_ordered:\n            new_values = new_values.T\n\n        return [self.make_block(new_values)]",
        "begin_line": 1276,
        "end_line": 1303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.equals#1416",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        return array_equivalent(self.values, other.values)",
        "begin_line": 1416,
        "end_line": 1419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__#1560",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)",
        "begin_line": 1560,
        "end_line": 1579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015124016938898973,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.iget#1587",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.iget(self, col)",
        "snippet": "    def iget(self, col):\n\n        if self.ndim == 2 and isinstance(col, tuple):\n            col, loc = col\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            elif isinstance(col, slice):\n                if col != slice(None):\n                    raise NotImplementedError(col)\n                return self.values[[loc]]\n            return self.values[loc]\n        else:\n            if col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            return self.values",
        "begin_line": 1587,
        "end_line": 1601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016315875346712352,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1688",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement, ndim)",
        "begin_line": 1688,
        "end_line": 1690,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001306506401881369,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1692",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1692,
        "end_line": 1707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017711654268508679,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.setitem#1733",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"Set the value inplace, returning a same-typed block.\n\n        This differs from Block.setitem by not allowing setitem to change\n        the dtype of the Block.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        if isinstance(indexer, tuple):\n            # we are always 1-D\n            indexer = indexer[0]\n\n        check_setitem_lengths(indexer, value, self.values)\n        self.values[indexer] = value\n        return self",
        "begin_line": 1733,
        "end_line": 1761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00033783783783783786,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.get_values#1763",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        # ExtensionArrays must be iterable, so this works.\n        values = np.asarray(self.values)\n        if values.ndim == self.ndim - 1:\n            values = values.reshape((1,) + values.shape)\n        return values",
        "begin_line": 1763,
        "end_line": 1768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022644927536231884,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._ftype#1933",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._ftype(self)",
        "snippet": "    def _ftype(self):\n        return getattr(self.values, \"_pandas_ftype\", Block._ftype)",
        "begin_line": 1933,
        "end_line": 1934,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015124016938898973,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatOrComplexBlock.equals#1982",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatOrComplexBlock",
        "signature": "pandas.core.internals.blocks.FloatOrComplexBlock.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        if self.dtype != other.dtype or self.shape != other.shape:\n            return False\n        left, right = self.values, other.values\n        return ((left == right) | (np.isnan(left) & np.isnan(right))).all()",
        "begin_line": 1982,
        "end_line": 1986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock._can_hold_element#1993",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n                tipo.type, (np.datetime64, np.timedelta64)\n            )\n        return isinstance(\n            element, (float, int, np.floating, np.int_)\n        ) and not isinstance(\n            element,\n            (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n        )",
        "begin_line": 1993,
        "end_line": 2004,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002714440825190011,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder#2092",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2092,
        "end_line": 2093,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value#2096",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.datetime64(\"NaT\", \"ns\")",
        "begin_line": 2096,
        "end_line": 2097,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values#2099",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return object dtype as boxed values, such as Timestamps/Timedelta\n        \"\"\"\n        if is_object_dtype(dtype):\n            values = self.values.ravel()\n            result = self._holder(values).astype(object)\n            return result.reshape(self.values.shape)\n        return self.values",
        "begin_line": 2099,
        "end_line": 2107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2114",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2114,
        "end_line": 2116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012943308309603936,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2122",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != _NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2122,
        "end_line": 2145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016233766233766234,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.astype#2147",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        these automatically copy, so copy=True has no effect\n        raise on an except if raise == True\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n\n        # if we are passed a datetime64[ns, tz]\n        if is_datetime64tz_dtype(dtype):\n            values = self.values\n            if getattr(values, \"tz\", None) is None:\n                values = DatetimeArray(values).tz_localize(\"UTC\")\n            values = values.tz_convert(dtype.tz)\n            return self.make_block(values)\n\n        # delegate\n        return super().astype(dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 2147,
        "end_line": 2163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element#2165",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            if self.is_datetimetz:\n                # require exact match, since non-nano does not exist\n                return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                    element, self.dtype\n                )\n\n            # GH#27419 if we get a non-nano datetime64 object\n            return is_datetime64_dtype(tipo)\n        elif element is NaT:\n            return True\n        elif isinstance(element, datetime):\n            if self.is_datetimetz:\n                return tz_compare(element.tzinfo, self.dtype.tz)\n            return element.tzinfo is None\n\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2165,
        "end_line": 2183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.external_values#2228",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
        "begin_line": 2228,
        "end_line": 2229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2244",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2244,
        "end_line": 2245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013231013495633765,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2247",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2247,
        "end_line": 2266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015223017202009437,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.is_view#2269",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        # check the ndarray values of the DatetimeIndex values\n        return self.values._data.base is not None",
        "begin_line": 2269,
        "end_line": 2272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00033783783783783786,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.get_values#2274",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        Returns an ndarray of values.\n\n        Parameters\n        ----------\n        dtype : np.dtype\n            Only `object`-like dtypes are respected here (not sure\n            why).\n\n        Returns\n        -------\n        values : ndarray\n            When ``dtype=object``, then and object-dtype ndarray of\n            boxed values is returned. Otherwise, an M8[ns] ndarray\n            is returned.\n\n            DatetimeArray is always 1-d. ``get_values`` will reshape\n            the return value to be the same dimensionality as the\n            block.\n        \"\"\"\n        values = self.values\n        if is_object_dtype(dtype):\n            values = values.astype(object)\n\n        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when\n            # the analogous NumPy-backed column would be a 2-D ndarray.\n            values = values.reshape(1, -1)\n        return values",
        "begin_line": 2274,
        "end_line": 2306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015605493133583021,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.setitem#2379",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        # https://github.com/pandas-dev/pandas/issues/24020\n        # Need a dedicated setitem until #24020 (type promotion in setitem\n        # for extension arrays) is designed and implemented.\n        if self._can_hold_element(value) or (\n            isinstance(indexer, np.ndarray) and indexer.size == 0\n        ):\n            return super().setitem(indexer, value)\n\n        obj_vals = self.values.astype(object)\n        newb = make_block(\n            obj_vals, placement=self.mgr_locs, klass=ObjectBlock, ndim=self.ndim\n        )\n        return newb.setitem(indexer, value)",
        "begin_line": 2379,
        "end_line": 2392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00033783783783783786,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.__init__#2421",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        if values.dtype != _TD_DTYPE:\n            values = conversion.ensure_timedelta64ns(values)\n        if isinstance(values, TimedeltaArray):\n            values = values._data\n        assert isinstance(values, np.ndarray), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2421,
        "end_line": 2427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015035333032626674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element#2433",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, np.timedelta64)\n        elif element is NaT:\n            return True\n        elif isinstance(element, (timedelta, np.timedelta64)):\n            return True\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2433,
        "end_line": 2441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024015369836695484,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.external_values#2485",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.external_values(self, dtype=None)",
        "snippet": "    def external_values(self, dtype=None):\n        return np.asarray(self.values.astype(\"timedelta64[ns]\", copy=False))",
        "begin_line": 2485,
        "end_line": 2486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2527",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2527,
        "end_line": 2531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013349352556401014,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock._can_hold_element#2588",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        return True",
        "begin_line": 2588,
        "end_line": 2589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2830",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2830,
        "end_line": 2834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002697599136768276,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2917",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2917,
        "end_line": 2960,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002697599136768276,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2963",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2963,
        "end_line": 2983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#2989",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    from pandas.core.internals import BlockManager\n\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    elif isinstance(result, BlockManager):\n        blocks.extend(result.blocks)\n    else:\n        blocks.append(result)\n    return blocks",
        "begin_line": 2989,
        "end_line": 3005,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015384615384615385,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks._block_shape#3008",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._block_shape(values, ndim=1, shape=None)",
        "snippet": "def _block_shape(values, ndim=1, shape=None):\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        if shape is None:\n            shape = values.shape\n        if not is_extension_array_dtype(values):\n            # TODO: https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))\n    return values",
        "begin_line": 3008,
        "end_line": 3018,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.blocks._merge_blocks#3021",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._merge_blocks(blocks, dtype=None, _can_consolidate=True)",
        "snippet": "def _merge_blocks(blocks, dtype=None, _can_consolidate=True):\n\n    if len(blocks) == 1:\n        return blocks[0]\n\n    if _can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n\n        # FIXME: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return make_block(new_values, placement=new_mgr_locs)\n\n    # no merge\n    return blocks",
        "begin_line": 3021,
        "end_line": 3044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#21",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ABCSeries, right: Any)",
        "snippet": "def should_extension_dispatch(left: ABCSeries, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should use dispatch_to_extension_op.\n\n    Parameters\n    ----------\n    left : Series\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if (\n        is_extension_array_dtype(left.dtype)\n        or is_datetime64_dtype(left.dtype)\n        or is_timedelta64_dtype(left.dtype)\n    ):\n        return True\n\n    if not is_scalar(right) and is_extension_array_dtype(right):\n        # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n        return True\n\n    return False",
        "begin_line": 21,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019751135690302193,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_series_dispatch#48",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_series_dispatch(left, right, op)",
        "snippet": "def should_series_dispatch(left, right, op):\n    \"\"\"\n    Identify cases where a DataFrame operation should dispatch to its\n    Series counterpart.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame or Series\n    op : binary operator\n\n    Returns\n    -------\n    override : bool\n    \"\"\"\n    if left._is_mixed_type or right._is_mixed_type:\n        return True\n\n    if op.__name__.strip(\"_\") in [\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"]:\n        # TODO: GH references for what this fixes\n        # Note: this check must come before the check for nonempty columns.\n        return True\n\n    if right.ndim == 1:\n        # operating with Series, short-circuit checks that would fail\n        #  with AttributeError.\n        return False\n\n    if not len(left.columns) or not len(right.columns):\n        # ensure obj.dtypes[0] exists for each obj\n        return False\n\n    ldtype = left.dtypes.iloc[0]\n    rdtype = right.dtypes.iloc[0]\n\n    if (is_timedelta64_dtype(ldtype) and is_integer_dtype(rdtype)) or (\n        is_timedelta64_dtype(rdtype) and is_integer_dtype(ldtype)\n    ):\n        # numpy integer dtypes as timedelta64 dtypes in this scenario\n        return True\n\n    if is_datetime64_dtype(ldtype) and is_object_dtype(rdtype):\n        # in particular case where right is an array of DateOffsets\n        return True\n\n    return False",
        "begin_line": 48,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.dispatch.dispatch_to_extension_op#96",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.dispatch_to_extension_op(op, left: Union[ABCExtensionArray, np.ndarray], right: Any)",
        "snippet": "def dispatch_to_extension_op(\n    op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n\n    Parameters\n    ----------\n    op : binary operator\n    left : ExtensionArray or np.ndarray\n    right : object\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n        2-tuple of these if op is divmod or rdivmod\n    \"\"\"\n    # NB: left and right should already be unboxed, so neither should be\n    #  a Series or Index.\n\n    if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n        # We need to cast datetime64 and timedelta64 ndarrays to\n        #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n        #  PandasArray as that behaves poorly with e.g. IntegerArray.\n        left = array(left)\n\n    # The op calls will raise TypeError if the op is not defined\n    # on the ExtensionArray\n    res_values = op(left, right)\n    return res_values",
        "begin_line": 96,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017768301350390902,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Timestamp, end: Timestamp, periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Timestamp, end: Timestamp, periods: int, freq: DateOffset\n) -> Tuple[np.ndarray, str]:\n    \"\"\"\n    Generate a range of dates with the spans between dates described by\n    the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timestamp or None\n        first point of produced date range\n    end : Timestamp or None\n        last point of produced date range\n    periods : int\n        number of periods in produced date range\n    freq : DateOffset\n        describes space between dates in produced date range\n\n    Returns\n    -------\n    ndarray[np.int64] representing nanosecond unix timestamps\n    \"\"\"\n    if isinstance(freq, Tick):\n        stride = freq.nanos\n        if periods is None:\n            b = Timestamp(start).value\n            # cannot just use e = Timestamp(end) + 1 because arange breaks when\n            # stride is too large, see GH10887\n            e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 + 1\n            # end.tz == start.tz by this point due to _generate implementation\n            tz = start.tz\n        elif start is not None:\n            b = Timestamp(start).value\n            e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n            tz = start.tz\n        elif end is not None:\n            e = Timestamp(end).value + stride\n            b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n            tz = end.tz\n        else:\n            raise ValueError(\n                \"at least 'start' or 'end' should be specified \"\n                \"if a 'period' is given.\"\n            )\n\n        with np.errstate(over=\"raise\"):\n            # If the range is sufficiently large, np.arange may overflow\n            #  and incorrectly return an empty array if not caught.\n            try:\n                values = np.arange(b, e, stride, dtype=np.int64)\n            except FloatingPointError:\n                xdr = [b]\n                while xdr[-1] != e:\n                    xdr.append(xdr[-1] + stride)\n                values = np.array(xdr[:-1], dtype=np.int64)\n\n    else:\n        tz = None\n        # start and end should have the same timezone by this point\n        if start is not None:\n            tz = start.tz\n        elif end is not None:\n            tz = end.tz\n\n        xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n\n        values = np.array([x.value for x in xdr], dtype=np.int64)\n\n    return values, tz",
        "begin_line": 15,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017889087656529517,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#86",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError:\n            raise OutOfBoundsDatetime(msg)\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 86,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012871669455528383,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#153",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n    )",
        "begin_line": 153,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012871669455528383,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.as_timestamp#83",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.as_timestamp(obj)",
        "snippet": "def as_timestamp(obj):\n    if isinstance(obj, Timestamp):\n        return obj\n    try:\n        return Timestamp(obj)\n    except (OutOfBoundsDatetime):\n        pass\n    return obj",
        "begin_line": 83,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002492522432701894,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.apply_wraps#93",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.apply_wraps(func)",
        "snippet": "def apply_wraps(func):\n    @functools.wraps(func)\n    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result\n\n    return wrapper",
        "begin_line": 93,
        "end_line": 149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014703720041170417,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.wrapper#95",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result",
        "begin_line": 95,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00037650602409638556,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.__init__#260",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.__init__(self, n=1, normalize=False, **kwds)",
        "snippet": "    def __init__(self, n=1, normalize=False, **kwds):\n        BaseOffset.__init__(self, n, normalize)\n\n        off, use_rd = liboffsets._determine_offset(kwds)\n        object.__setattr__(self, \"_offset\", off)\n        object.__setattr__(self, \"_use_relativedelta\", use_rd)\n        for key in kwds:\n            val = kwds[key]\n            object.__setattr__(self, key, val)",
        "begin_line": 260,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019727756954034326,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.apply#271",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self._use_relativedelta:\n            other = as_datetime(other)\n\n        if len(self.kwds) > 0:\n            tzinfo = getattr(other, \"tzinfo\", None)\n            if tzinfo is not None and self._use_relativedelta:\n                # perform calculation in UTC\n                other = other.replace(tzinfo=None)\n\n            if self.n > 0:\n                for i in range(self.n):\n                    other = other + self._offset\n            else:\n                for i in range(-self.n):\n                    other = other - self._offset\n\n            if tzinfo is not None and self._use_relativedelta:\n                # bring tz back from UTC calculation\n                other = conversion.localize_pydatetime(other, tzinfo)\n\n            return as_timestamp(other)\n        else:\n            return other + timedelta(self.n)",
        "begin_line": 271,
        "end_line": 294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.apply_index#297",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        \"\"\"\n        Vectorized apply of DateOffset to DatetimeIndex,\n        raises NotImplentedError for offsets without a\n        vectorized implementation.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n\n        Returns\n        -------\n        y : DatetimeIndex\n        \"\"\"\n\n        if type(self) is not DateOffset:\n            raise NotImplementedError(\n                f\"DateOffset subclass {type(self).__name__} \"\n                \"does not have a vectorized implementation\"\n            )\n        kwds = self.kwds\n        relativedelta_fast = {\n            \"years\",\n            \"months\",\n            \"weeks\",\n            \"days\",\n            \"hours\",\n            \"minutes\",\n            \"seconds\",\n            \"microseconds\",\n        }\n        # relativedelta/_offset path only valid for base DateOffset\n        if self._use_relativedelta and set(kwds).issubset(relativedelta_fast):\n\n            months = (kwds.get(\"years\", 0) * 12 + kwds.get(\"months\", 0)) * self.n\n            if months:\n                shifted = liboffsets.shift_months(i.asi8, months)\n                i = type(i)(shifted, dtype=i.dtype)\n\n            weeks = (kwds.get(\"weeks\", 0)) * self.n\n            if weeks:\n                # integer addition on PeriodIndex is deprecated,\n                #   so we directly use _time_shift instead\n                asper = i.to_period(\"W\")\n                if not isinstance(asper._data, np.ndarray):\n                    # unwrap PeriodIndex --> PeriodArray\n                    asper = asper._data\n                shifted = asper._time_shift(weeks)\n                i = shifted.to_timestamp() + i.to_perioddelta(\"W\")\n\n            timedelta_kwds = {\n                k: v\n                for k, v in kwds.items()\n                if k in [\"days\", \"hours\", \"minutes\", \"seconds\", \"microseconds\"]\n            }\n            if timedelta_kwds:\n                delta = Timedelta(**timedelta_kwds)\n                i = i + (self.n * delta)\n            return i\n        elif not self._use_relativedelta and hasattr(self, \"_offset\"):\n            # timedelta\n            return i + (self._offset * self.n)\n        else:\n            # relativedelta with other keywords\n            kwd = set(kwds) - relativedelta_fast\n            raise NotImplementedError(\n                \"DateOffset with relativedelta \"\n                f\"keyword(s) {kwd} not able to be \"\n                \"applied vectorized\"\n            )",
        "begin_line": 297,
        "end_line": 366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollback#411",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollback(self, dt)",
        "snippet": "    def rollback(self, dt):\n        \"\"\"\n        Roll provided date backward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.is_on_offset(dt):\n            dt = dt - type(self)(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 411,
        "end_line": 423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollforward#425",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.is_on_offset(dt):\n            dt = dt + type(self)(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 425,
        "end_line": 437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002544529262086514,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rule_code#459",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        return self._prefix",
        "begin_line": 459,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006211180124223602,
            "pseudo_dstar_susp": 0.006172839506172839,
            "pseudo_tarantula_susp": 0.006211180124223602,
            "pseudo_op2_susp": 0.005050505050505051,
            "pseudo_barinel_susp": 0.006211180124223602
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.freqstr#463",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.freqstr(self)",
        "snippet": "    def freqstr(self):\n        try:\n            code = self.rule_code\n        except NotImplementedError:\n            return repr(self)\n\n        if self.n != 1:\n            fstr = f\"{self.n}{code}\"\n        else:\n            fstr = code\n\n        try:\n            if self._offset:\n                fstr += self._offset_str()\n        except AttributeError:\n            # TODO: standardize `_offset` vs `offset` naming convention\n            pass\n\n        return fstr",
        "begin_line": 463,
        "end_line": 481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.006134969325153374,
            "pseudo_dstar_susp": 0.006097560975609756,
            "pseudo_tarantula_susp": 0.006134969325153374,
            "pseudo_op2_susp": 0.005,
            "pseudo_barinel_susp": 0.006134969325153374
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorOffset._from_name#493",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorOffset",
        "signature": "pandas.tseries.offsets.SingleConstructorOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        # default _from_name calls cls with no args\n        if suffix:\n            raise ValueError(f\"Bad freq suffix {suffix}\")\n        return cls()",
        "begin_line": 493,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomMixin.__init__#506",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomMixin",
        "signature": "pandas.tseries.offsets._CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "snippet": "    def __init__(self, weekmask, holidays, calendar):\n        calendar, holidays = _get_calendar(\n            weekmask=weekmask, holidays=holidays, calendar=calendar\n        )\n        # Custom offset instances are identified by the\n        # following two attributes. See DateOffset._params()\n        # holidays, weekmask\n\n        object.__setattr__(self, \"weekmask\", weekmask)\n        object.__setattr__(self, \"holidays\", holidays)\n        object.__setattr__(self, \"calendar\", calendar)",
        "begin_line": 506,
        "end_line": 516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002492522432701894,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin.offset#525",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin.offset(self)",
        "snippet": "    def offset(self):\n        \"\"\"\n        Alias for self._offset.\n        \"\"\"\n        # Alias for backward compat\n        return self._offset",
        "begin_line": 525,
        "end_line": 530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020764119601328904,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.__init__#552",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.__init__(self, n=1, normalize=False, offset=timedelta(0))",
        "snippet": "    def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 552,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025316455696202533,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply#588",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            wday = other.weekday()\n\n            # avoid slowness below by operating on weeks first\n            weeks = n // 5\n            if n <= 0 and wday > 4:\n                # roll forward\n                n += 1\n\n            n -= 5 * weeks\n\n            # n is always >= 0 at this point\n            if n == 0 and wday > 4:\n                # roll back\n                days = 4 - wday\n            elif wday > 4:\n                # roll forward\n                days = (7 - wday) + (n - 1)\n            elif wday + n <= 4:\n                # shift by n days without leaving the current week\n                days = n\n            else:\n                # shift by n days plus 2 to get past the weekend\n                days = n + 2\n\n            result = other + timedelta(days=7 * weeks + days)\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine business day with datetime or timedelta.\"\n            )",
        "begin_line": 588,
        "end_line": 625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply_index#628",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        time = i.to_perioddelta(\"D\")\n        # to_period rolls forward to next BDay; track and\n        # reduce n where it does when rolling forward\n        asper = i.to_period(\"B\")\n        if not isinstance(asper._data, np.ndarray):\n            # unwrap PeriodIndex --> PeriodArray\n            asper = asper._data\n\n        if self.n > 0:\n            shifted = (i.to_perioddelta(\"B\") - time).asi8 != 0\n\n            # Integer-array addition is deprecated, so we use\n            # _time_shift directly\n            roll = np.where(shifted, self.n - 1, self.n)\n            shifted = asper._addsub_int_array(roll, operator.add)\n        else:\n            # Integer addition is deprecated, so we use _time_shift directly\n            roll = self.n\n            shifted = asper._time_shift(roll)\n\n        result = shifted.to_timestamp() + time\n        return result",
        "begin_line": 628,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.is_on_offset#652",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.weekday() < 5",
        "begin_line": 652,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002901915264074289,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.__init__#659",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.__init__(self, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(self, start=\"09:00\", end=\"17:00\", offset=timedelta(0)):\n        # must be validated here to equality check\n        if not is_list_like(start):\n            start = [start]\n        if not len(start):\n            raise ValueError(\"Must include at least 1 start time\")\n\n        if not is_list_like(end):\n            end = [end]\n        if not len(end):\n            raise ValueError(\"Must include at least 1 end time\")\n\n        start = np.array([liboffsets._validate_business_time(x) for x in start])\n        end = np.array([liboffsets._validate_business_time(x) for x in end])\n\n        # Validation of input\n        if len(start) != len(end):\n            raise ValueError(\"number of starting time and ending time must be the same\")\n        num_openings = len(start)\n\n        # sort starting and ending time by starting time\n        index = np.argsort(start)\n\n        # convert to tuple so that start and end are hashable\n        start = tuple(start[index])\n        end = tuple(end[index])\n\n        total_secs = 0\n        for i in range(num_openings):\n            total_secs += self._get_business_hours_by_sec(start[i], end[i])\n            total_secs += self._get_business_hours_by_sec(\n                end[i], start[(i + 1) % num_openings]\n            )\n        if total_secs != 24 * 60 * 60:\n            raise ValueError(\n                \"invalid starting and ending time(s): \"\n                \"opening hours should not touch or overlap with \"\n                \"one another\"\n            )\n\n        object.__setattr__(self, \"start\", start)\n        object.__setattr__(self, \"end\", end)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 659,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.next_bday#704",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.next_bday(self)",
        "snippet": "    def next_bday(self):\n        \"\"\"\n        Used for moving to next business day.\n        \"\"\"\n        if self.n >= 0:\n            nb_offset = 1\n        else:\n            nb_offset = -1\n        if self._prefix.startswith(\"C\"):\n            # CustomBusinessHour\n            return CustomBusinessDay(\n                n=nb_offset,\n                weekmask=self.weekmask,\n                holidays=self.holidays,\n                calendar=self.calendar,\n            )\n        else:\n            return BusinessDay(n=nb_offset)",
        "begin_line": 704,
        "end_line": 721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._next_opening_time#723",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._next_opening_time(self, other, sign=1)",
        "snippet": "    def _next_opening_time(self, other, sign=1):\n        \"\"\"\n        If self.n and sign have the same sign, return the earliest opening time\n        later than or equal to current time.\n        Otherwise the latest opening time earlier than or equal to current\n        time.\n\n        Opening time always locates on BusinessDay.\n        However, closing time may not if business hour extends over midnight.\n\n        Parameters\n        ----------\n        other : datetime\n            Current time.\n        sign : int, default 1.\n            Either 1 or -1. Going forward in time if it has the same sign as\n            self.n. Going backward in time otherwise.\n\n        Returns\n        -------\n        result : datetime\n            Next opening time.\n        \"\"\"\n        earliest_start = self.start[0]\n        latest_start = self.start[-1]\n\n        if not self.next_bday.is_on_offset(other):\n            # today is not business day\n            other = other + sign * self.next_bday\n            if self.n * sign >= 0:\n                hour, minute = earliest_start.hour, earliest_start.minute\n            else:\n                hour, minute = latest_start.hour, latest_start.minute\n        else:\n            if self.n * sign >= 0:\n                if latest_start < other.time():\n                    # current time is after latest starting time in today\n                    other = other + sign * self.next_bday\n                    hour, minute = earliest_start.hour, earliest_start.minute\n                else:\n                    # find earliest starting time no earlier than current time\n                    for st in self.start:\n                        if other.time() <= st:\n                            hour, minute = st.hour, st.minute\n                            break\n            else:\n                if other.time() < earliest_start:\n                    # current time is before earliest starting time in today\n                    other = other + sign * self.next_bday\n                    hour, minute = latest_start.hour, latest_start.minute\n                else:\n                    # find latest starting time no later than current time\n                    for st in reversed(self.start):\n                        if other.time() >= st:\n                            hour, minute = st.hour, st.minute\n                            break\n\n        return datetime(other.year, other.month, other.day, hour, minute)",
        "begin_line": 723,
        "end_line": 780,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._prev_opening_time#782",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._prev_opening_time(self, other)",
        "snippet": "    def _prev_opening_time(self, other):\n        \"\"\"\n        If n is positive, return the latest opening time earlier than or equal\n        to current time.\n        Otherwise the earliest opening time later than or equal to current\n        time.\n\n        Parameters\n        ----------\n        other : datetime\n            Current time.\n\n        Returns\n        -------\n        result : datetime\n            Previous opening time.\n        \"\"\"\n        return self._next_opening_time(other, sign=-1)",
        "begin_line": 782,
        "end_line": 799,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec#801",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec(self, start, end)",
        "snippet": "    def _get_business_hours_by_sec(self, start, end):\n        \"\"\"\n        Return business hours in a day by seconds.\n        \"\"\"\n        # create dummy datetime to calculate businesshours in a day\n        dtstart = datetime(2014, 4, 1, start.hour, start.minute)\n        day = 1 if start < end else 2\n        until = datetime(2014, 4, day, end.hour, end.minute)\n        return int((until - dtstart).total_seconds())",
        "begin_line": 801,
        "end_line": 809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._get_closing_time#836",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._get_closing_time(self, dt)",
        "snippet": "    def _get_closing_time(self, dt):\n        \"\"\"\n        Get the closing time of a business hour interval by its opening time.\n\n        Parameters\n        ----------\n        dt : datetime\n            Opening time of a business hour interval.\n\n        Returns\n        -------\n        result : datetime\n            Corresponding closing time.\n        \"\"\"\n        for i, st in enumerate(self.start):\n            if st.hour == dt.hour and st.minute == dt.minute:\n                return dt + timedelta(\n                    seconds=self._get_business_hours_by_sec(st, self.end[i])\n                )\n        assert False",
        "begin_line": 836,
        "end_line": 855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin.apply#858",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            # reset timezone and nanosecond\n            # other may be a Timestamp, thus not use replace\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n\n            # adjust other to reduce number of cases to handle\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    # adjustment to move to previous business day\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # adjust by business days first\n            if bd != 0:\n                if isinstance(self, _CustomMixin):  # GH 30593\n                    skip_bd = CustomBusinessDay(\n                        n=bd,\n                        weekmask=self.weekmask,\n                        holidays=self.holidays,\n                        calendar=self.calendar,\n                    )\n                else:\n                    skip_bd = BusinessDay(n=bd)\n                # midnight business hour may not on BusinessDay\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            # remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n\n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(other)) - other\n                    )\n                    if bhour_remain < bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = self._next_opening_time(other) - other\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and nanosecond != 0\n                    ):\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(\n                            self._next_opening_time(\n                                other + bhour - timedelta(seconds=1)\n                            )\n                        )\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
        "begin_line": 858,
        "end_line": 956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHourMixin._is_on_offset#970",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHourMixin",
        "signature": "pandas.tseries.offsets.BusinessHourMixin._is_on_offset(self, dt)",
        "snippet": "    def _is_on_offset(self, dt):\n        \"\"\"\n        Slight speedups using calculated values.\n        \"\"\"\n        # if self.normalize and not _is_normalized(dt):\n        #     return False\n        # Valid BH can be on the different BusinessDay during midnight\n        # Distinguish by the time spent from previous opening time\n        if self.n >= 0:\n            op = self._prev_opening_time(dt)\n        else:\n            op = self._next_opening_time(dt)\n        span = (dt - op).total_seconds()\n        businesshours = 0\n        for i, st in enumerate(self.start):\n            if op.hour == st.hour and op.minute == st.minute:\n                businesshours = self._get_business_hours_by_sec(st, self.end[i])\n        if span <= businesshours:\n            return True\n        else:\n            return False",
        "begin_line": 970,
        "end_line": 990,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessHour.__init__#1012",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessHour",
        "signature": "pandas.tseries.offsets.BusinessHour.__init__(self, n=1, normalize=False, start='09:00', end='17:00', offset=timedelta(0))",
        "snippet": "    def __init__(\n        self, n=1, normalize=False, start=\"09:00\", end=\"17:00\", offset=timedelta(0)\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        super().__init__(start=start, end=end, offset=offset)",
        "begin_line": 1012,
        "end_line": 1016,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.__init__#1043",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "begin_line": 1043,
        "end_line": 1055,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002492522432701894,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.apply#1058",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.n <= 0:\n            roll = \"forward\"\n        else:\n            roll = \"backward\"\n\n        if isinstance(other, datetime):\n            date_in = other\n            np_dt = np.datetime64(date_in.date())\n\n            np_incr_dt = np.busday_offset(\n                np_dt, self.n, roll=roll, busdaycal=self.calendar\n            )\n\n            dt_date = np_incr_dt.astype(datetime)\n            result = datetime.combine(dt_date, date_in.time())\n\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine trading day with \"\n                \"datetime, datetime64 or timedelta.\"\n            )",
        "begin_line": 1058,
        "end_line": 1085,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.apply_index#1087",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        raise NotImplementedError",
        "begin_line": 1087,
        "end_line": 1088,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.CustomBusinessDay.is_on_offset#1090",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.CustomBusinessDay",
        "signature": "pandas.tseries.offsets.CustomBusinessDay.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        day64 = _to_dt64(dt, \"datetime64[D]\")\n        return np.is_busday(day64, busdaycal=self.calendar)",
        "begin_line": 1090,
        "end_line": 1094,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.is_on_offset#1144",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 1144,
        "end_line": 1147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002763957987838585,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply#1150",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n        n = liboffsets.roll_convention(other.day, self.n, compare_day)\n        return shift_month(other, n, self._day_opt)",
        "begin_line": 1150,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016452780519907864,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply_index#1156",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(i)._simple_new(shifted, freq=i.freq, dtype=i.dtype)",
        "begin_line": 1156,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021417862497322766,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.__init__#1229",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekmask=\"Mon Tue Wed Thu Fri\",\n        holidays=None,\n        calendar=None,\n        offset=timedelta(0),\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)\n\n        _CustomMixin.__init__(self, weekmask, holidays, calendar)",
        "begin_line": 1229,
        "end_line": 1241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.cbday_roll#1244",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.cbday_roll(self)",
        "snippet": "    def cbday_roll(self):\n        \"\"\"\n        Define default roll function to be called in apply method.\n        \"\"\"\n        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            roll_func = cbday.rollforward\n        else:\n            # MonthEnd\n            roll_func = cbday.rollback\n        return roll_func",
        "begin_line": 1244,
        "end_line": 1256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.m_offset#1259",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.m_offset(self)",
        "snippet": "    def m_offset(self):\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            moff = MonthBegin(n=1, normalize=False)\n        else:\n            # MonthEnd\n            moff = MonthEnd(n=1, normalize=False)\n        return moff",
        "begin_line": 1259,
        "end_line": 1266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.month_roll#1269",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.month_roll(self)",
        "snippet": "    def month_roll(self):\n        \"\"\"\n        Define default roll function to be called in apply method.\n        \"\"\"\n        if self._prefix.endswith(\"S\"):\n            # MonthBegin\n            roll_func = self.m_offset.rollback\n        else:\n            # MonthEnd\n            roll_func = self.m_offset.rollforward\n        return roll_func",
        "begin_line": 1269,
        "end_line": 1279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._CustomBusinessMonth.apply#1282",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._CustomBusinessMonth",
        "signature": "pandas.tseries.offsets._CustomBusinessMonth.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # First move to month offset\n        cur_month_offset_date = self.month_roll(other)\n\n        # Find this custom month offset\n        compare_date = self.cbday_roll(cur_month_offset_date)\n        n = liboffsets.roll_convention(other.day, self.n, compare_date.day)\n\n        new = cur_month_offset_date + n * self.m_offset\n        result = self.cbday_roll(new)\n        return result",
        "begin_line": 1282,
        "end_line": 1292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.__init__#1317",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.__init__(self, n=1, normalize=False, day_of_month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, day_of_month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if day_of_month is None:\n            object.__setattr__(self, \"day_of_month\", self._default_day_of_month)\n        else:\n            object.__setattr__(self, \"day_of_month\", int(day_of_month))\n        if not self._min_day_of_month <= self.day_of_month <= 27:\n            raise ValueError(\n                \"day_of_month must be \"\n                f\"{self._min_day_of_month}<=day_of_month<=27, \"\n                f\"got {self.day_of_month}\"\n            )",
        "begin_line": 1317,
        "end_line": 1329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.apply#1341",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # shift `other` to self.day_of_month, incrementing `n` if necessary\n        n = liboffsets.roll_convention(other.day, self.n, self.day_of_month)\n\n        days_in_month = ccalendar.get_days_in_month(other.year, other.month)\n\n        # For SemiMonthBegin on other.day == 1 and\n        # SemiMonthEnd on other.day == days_in_month,\n        # shifting `other` to `self.day_of_month` _always_ requires\n        # incrementing/decrementing `n`, regardless of whether it is\n        # initially positive.\n        if type(self) is SemiMonthBegin and (self.n <= 0 and other.day == 1):\n            n -= 1\n        elif type(self) is SemiMonthEnd and (self.n > 0 and other.day == days_in_month):\n            n += 1\n\n        return self._apply(n, other)",
        "begin_line": 1341,
        "end_line": 1357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthOffset.apply_index#1366",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthOffset",
        "signature": "pandas.tseries.offsets.SemiMonthOffset.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        # determine how many days away from the 1st of the month we are\n        dti = i\n        days_from_start = i.to_perioddelta(\"M\").asi8\n        delta = Timedelta(days=self.day_of_month - 1).value\n\n        # get boolean array for each element before the day_of_month\n        before_day_of_month = days_from_start < delta\n\n        # get boolean array for each element after the day_of_month\n        after_day_of_month = days_from_start > delta\n\n        # determine the correct n for each date in i\n        roll = self._get_roll(i, before_day_of_month, after_day_of_month)\n\n        # isolate the time since it will be striped away one the next line\n        time = i.to_perioddelta(\"D\")\n\n        # apply the correct number of months\n\n        # integer-array addition on PeriodIndex is deprecated,\n        #  so we use _addsub_int_array directly\n        asper = i.to_period(\"M\")\n        if not isinstance(asper._data, np.ndarray):\n            # unwrap PeriodIndex --> PeriodArray\n            asper = asper._data\n\n        shifted = asper._addsub_int_array(roll // 2, operator.add)\n        i = type(dti)(shifted.to_timestamp())\n\n        # apply the correct day\n        i = self._apply_index_days(i, roll)\n\n        return i + time",
        "begin_line": 1366,
        "end_line": 1399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._apply#1438",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._apply(self, n, other)",
        "snippet": "    def _apply(self, n, other):\n        months = n // 2\n        day = 31 if n % 2 else self.day_of_month\n        return shift_month(other, months, day)",
        "begin_line": 1438,
        "end_line": 1441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._get_roll#1443",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._get_roll(self, i, before_day_of_month, after_day_of_month)",
        "snippet": "    def _get_roll(self, i, before_day_of_month, after_day_of_month):\n        n = self.n\n        is_month_end = i.is_month_end\n        if n > 0:\n            roll_end = np.where(is_month_end, 1, 0)\n            roll_before = np.where(before_day_of_month, n, n + 1)\n            roll = roll_end + roll_before\n        elif n == 0:\n            roll_after = np.where(after_day_of_month, 2, 0)\n            roll_before = np.where(~after_day_of_month, 1, 0)\n            roll = roll_before + roll_after\n        else:\n            roll = np.where(after_day_of_month, n + 2, n + 1)\n        return roll",
        "begin_line": 1443,
        "end_line": 1456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthEnd._apply_index_days#1458",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthEnd",
        "signature": "pandas.tseries.offsets.SemiMonthEnd._apply_index_days(self, i, roll)",
        "snippet": "    def _apply_index_days(self, i, roll):\n        \"\"\"\n        Add days portion of offset to DatetimeIndex i.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n        roll : ndarray[int64_t]\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        nanos = (roll % 2) * Timedelta(days=self.day_of_month).value\n        i += nanos.astype(\"timedelta64[ns]\")\n        return i + Timedelta(days=-1)",
        "begin_line": 1458,
        "end_line": 1473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._apply#1495",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._apply(self, n, other)",
        "snippet": "    def _apply(self, n, other):\n        months = n // 2 + n % 2\n        day = 1 if n % 2 else self.day_of_month\n        return shift_month(other, months, day)",
        "begin_line": 1495,
        "end_line": 1498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._get_roll#1500",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._get_roll(self, i, before_day_of_month, after_day_of_month)",
        "snippet": "    def _get_roll(self, i, before_day_of_month, after_day_of_month):\n        n = self.n\n        is_month_start = i.is_month_start\n        if n > 0:\n            roll = np.where(before_day_of_month, n, n + 1)\n        elif n == 0:\n            roll_start = np.where(is_month_start, 0, 1)\n            roll_after = np.where(after_day_of_month, 1, 0)\n            roll = roll_start + roll_after\n        else:\n            roll_after = np.where(after_day_of_month, n + 2, n + 1)\n            roll_start = np.where(is_month_start, -1, 0)\n            roll = roll_after + roll_start\n        return roll",
        "begin_line": 1500,
        "end_line": 1513,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.SemiMonthBegin._apply_index_days#1515",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SemiMonthBegin",
        "signature": "pandas.tseries.offsets.SemiMonthBegin._apply_index_days(self, i, roll)",
        "snippet": "    def _apply_index_days(self, i, roll):\n        \"\"\"\n        Add days portion of offset to DatetimeIndex i.\n\n        Parameters\n        ----------\n        i : DatetimeIndex\n        roll : ndarray[int64_t]\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        nanos = (roll % 2) * Timedelta(days=self.day_of_month - 1).value\n        return i + nanos.astype(\"timedelta64[ns]\")",
        "begin_line": 1515,
        "end_line": 1529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.__init__#1551",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.__init__(self, n=1, normalize=False, weekday=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=None):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.weekday is not None:\n            if self.weekday < 0 or self.weekday > 6:\n                raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
        "begin_line": 1551,
        "end_line": 1557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000214638334406525,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.apply#1563",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if self.weekday is None:\n            return other + self.n * self._inc\n\n        if not isinstance(other, datetime):\n            raise TypeError(\n                f\"Cannot add {type(other).__name__} to {type(self).__name__}\"\n            )\n\n        k = self.n\n        otherDay = other.weekday()\n        if otherDay != self.weekday:\n            other = other + timedelta((self.weekday - otherDay) % 7)\n            if k > 0:\n                k -= 1\n\n        return other + timedelta(weeks=k)",
        "begin_line": 1563,
        "end_line": 1579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.apply_index#1582",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.apply_index(self, i)",
        "snippet": "    def apply_index(self, i):\n        if self.weekday is None:\n            # integer addition on PeriodIndex is deprecated,\n            #  so we use _time_shift directly\n            asper = i.to_period(\"W\")\n            if not isinstance(asper._data, np.ndarray):\n                # unwrap PeriodIndex --> PeriodArray\n                asper = asper._data\n\n            shifted = asper._time_shift(self.n)\n            return shifted.to_timestamp() + i.to_perioddelta(\"W\")\n        else:\n            return self._end_apply_index(i)",
        "begin_line": 1582,
        "end_line": 1594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week._end_apply_index#1596",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week._end_apply_index(self, dtindex)",
        "snippet": "    def _end_apply_index(self, dtindex):\n        \"\"\"\n        Add self to the given DatetimeIndex, specialized for case where\n        self.weekday is non-null.\n\n        Parameters\n        ----------\n        dtindex : DatetimeIndex\n\n        Returns\n        -------\n        result : DatetimeIndex\n        \"\"\"\n        off = dtindex.to_perioddelta(\"D\")\n\n        base, mult = libfrequencies.get_freq_code(self.freqstr)\n        base_period = dtindex.to_period(base)\n        if not isinstance(base_period._data, np.ndarray):\n            # unwrap PeriodIndex --> PeriodArray\n            base_period = base_period._data\n\n        if self.n > 0:\n            # when adding, dates on end roll to next\n            normed = dtindex - off + Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n            roll = np.where(\n                base_period.to_timestamp(how=\"end\") == normed, self.n, self.n - 1\n            )\n            # integer-array addition on PeriodIndex is deprecated,\n            #  so we use _addsub_int_array directly\n            shifted = base_period._addsub_int_array(roll, operator.add)\n            base = shifted.to_timestamp(how=\"end\")\n        else:\n            # integer addition on PeriodIndex is deprecated,\n            #  so we use _time_shift directly\n            roll = self.n\n            base = base_period._time_shift(roll).to_timestamp(how=\"end\")\n\n        return base + off + Timedelta(1, \"ns\") - Timedelta(1, \"D\")",
        "begin_line": 1596,
        "end_line": 1633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.is_on_offset#1635",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        elif self.weekday is None:\n            return True\n        return dt.weekday() == self.weekday",
        "begin_line": 1635,
        "end_line": 1640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week.rule_code#1643",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week.rule_code(self)",
        "snippet": "    def rule_code(self):\n        suffix = \"\"\n        if self.weekday is not None:\n            weekday = ccalendar.int_to_weekday[self.weekday]\n            suffix = f\"-{weekday}\"\n        return self._prefix + suffix",
        "begin_line": 1643,
        "end_line": 1648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002158894645941278,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Week._from_name#1651",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Week",
        "signature": "pandas.tseries.offsets.Week._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        if not suffix:\n            weekday = None\n        else:\n            weekday = ccalendar.weekday_to_int[suffix]\n        return cls(weekday=weekday)",
        "begin_line": 1651,
        "end_line": 1656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._WeekOfMonthMixin.apply#1665",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets._WeekOfMonthMixin",
        "signature": "pandas.tseries.offsets._WeekOfMonthMixin.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n\n        months = self.n\n        if months > 0 and compare_day > other.day:\n            months -= 1\n        elif months <= 0 and compare_day < other.day:\n            months += 1\n\n        shifted = shift_month(other, months, \"start\")\n        to_day = self._get_offset_day(shifted)\n        return liboffsets.shift_day(shifted, to_day - shifted.day)",
        "begin_line": 1665,
        "end_line": 1676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth.__init__#1710",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth.__init__(self, n=1, normalize=False, week=0, weekday=0)",
        "snippet": "    def __init__(self, n=1, normalize=False, week=0, weekday=0):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n        object.__setattr__(self, \"week\", week)\n\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")\n        if self.week < 0 or self.week > 3:\n            raise ValueError(f\"Week must be 0<=week<=3, got {self.week}\")",
        "begin_line": 1710,
        "end_line": 1718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.WeekOfMonth._get_offset_day#1720",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.WeekOfMonth",
        "signature": "pandas.tseries.offsets.WeekOfMonth._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        \"\"\"\n        Find the day in the same month as other that has the same\n        weekday as self.weekday and is the self.week'th such day in the month.\n\n        Parameters\n        ----------\n        other : datetime\n\n        Returns\n        -------\n        day : int\n        \"\"\"\n        mstart = datetime(other.year, other.month, 1)\n        wday = mstart.weekday()\n        shift_days = (self.weekday - wday) % 7\n        return 1 + shift_days + self.week * 7",
        "begin_line": 1720,
        "end_line": 1736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth.__init__#1778",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth.__init__(self, n=1, normalize=False, weekday=0)",
        "snippet": "    def __init__(self, n=1, normalize=False, weekday=0):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")\n\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
        "begin_line": 1778,
        "end_line": 1786,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.LastWeekOfMonth._get_offset_day#1788",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.LastWeekOfMonth",
        "signature": "pandas.tseries.offsets.LastWeekOfMonth._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        \"\"\"\n        Find the day in the same month as other that has the same\n        weekday as self.weekday and is the last such day in the month.\n\n        Parameters\n        ----------\n        other: datetime\n\n        Returns\n        -------\n        day: int\n        \"\"\"\n        dim = ccalendar.get_days_in_month(other.year, other.month)\n        mend = datetime(other.year, other.month, dim)\n        wday = mend.weekday()\n        shift_days = (wday - self.weekday) % 7\n        return dim - shift_days",
        "begin_line": 1788,
        "end_line": 1805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.__init__#1838",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.__init__(self, n=1, normalize=False, startingMonth=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, startingMonth=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if startingMonth is None:\n            startingMonth = self._default_startingMonth\n        object.__setattr__(self, \"startingMonth\", startingMonth)",
        "begin_line": 1838,
        "end_line": 1843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002610966057441253,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset._from_name#1849",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"startingMonth\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        else:\n            if cls._from_name_startingMonth is not None:\n                kwargs[\"startingMonth\"] = cls._from_name_startingMonth\n        return cls(**kwargs)",
        "begin_line": 1849,
        "end_line": 1856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.rule_code#1859",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        return f\"{self._prefix}-{month}\"",
        "begin_line": 1859,
        "end_line": 1861,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002574002574002574,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply#1864",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # months_since: find the calendar quarter containing other.month,\n        # e.g. if other.month == 8, the calendar quarter is [Jul, Aug, Sep].\n        # Then find the month in that quarter containing an is_on_offset date for\n        # self.  `months_since` is the number of months to shift other.month\n        # to get to this on-offset month.\n        months_since = other.month % 3 - self.startingMonth % 3\n        qtrs = liboffsets.roll_qtrday(\n            other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3\n        )\n        months = qtrs * 3 - months_since\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1864,
        "end_line": 1875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021677866897897247,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.is_on_offset#1877",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        mod_month = (dt.month - self.startingMonth) % 3\n        return mod_month == 0 and dt.day == self._get_offset_day(dt)",
        "begin_line": 1877,
        "end_line": 1881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025497195308516065,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.apply_index#1884",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.apply_index(self, dtindex)",
        "snippet": "    def apply_index(self, dtindex):\n        shifted = liboffsets.shift_quarters(\n            dtindex.asi8, self.n, self.startingMonth, self._day_opt\n        )\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(dtindex)._simple_new(\n            shifted, freq=dtindex.freq, dtype=dtindex.dtype\n        )",
        "begin_line": 1884,
        "end_line": 1892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002610966057441253,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._get_offset_day#1956",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        # override BaseOffset method to use self.month instead of other.month\n        # TODO: there may be a more performant way to do this\n        return liboffsets.get_day_of_month(\n            other.replace(month=self.month), self._day_opt\n        )",
        "begin_line": 1956,
        "end_line": 1961,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018814675446848542,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply#1964",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        years = roll_yearday(other, self.n, self.month, self._day_opt)\n        months = years * 12 + (self.month - other.month)\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1964,
        "end_line": 1967,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001779042874933286,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply_index#1970",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply_index(self, dtindex)",
        "snippet": "    def apply_index(self, dtindex):\n        shifted = liboffsets.shift_quarters(\n            dtindex.asi8, self.n, self.month, self._day_opt, modby=12\n        )\n        # TODO: going through __new__ raises on call to _validate_frequency;\n        #  are we passing incorrect freq?\n        return type(dtindex)._simple_new(\n            shifted, freq=dtindex.freq, dtype=dtindex.dtype\n        )",
        "begin_line": 1970,
        "end_line": 1978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022522522522522523,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.is_on_offset#1980",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.month == self.month and dt.day == self._get_offset_day(dt)",
        "begin_line": 1980,
        "end_line": 1983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018800526414739614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.__init__#1985",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.__init__(self, n=1, normalize=False, month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        month = month if month is not None else self._default_month\n        object.__setattr__(self, \"month\", month)\n\n        if self.month < 1 or self.month > 12:\n            raise ValueError(\"Month must go from 1 to 12\")",
        "begin_line": 1985,
        "end_line": 1992,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017590149516270889,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._from_name#1995",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"month\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        return cls(**kwargs)",
        "begin_line": 1995,
        "end_line": 1999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.rule_code#2002",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        month = ccalendar.MONTH_ALIASES[self.month]\n        return f\"{self._prefix}-{month}\"",
        "begin_line": 2002,
        "end_line": 2004,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020308692120227456,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.__init__#2105",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, variation='nearest')",
        "snippet": "    def __init__(\n        self, n=1, normalize=False, weekday=0, startingMonth=1, variation=\"nearest\"\n    ):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"startingMonth\", startingMonth)\n        object.__setattr__(self, \"weekday\", weekday)\n\n        object.__setattr__(self, \"variation\", variation)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")\n\n        if self.variation not in [\"nearest\", \"last\"]:\n            raise ValueError(f\"{self.variation} is not a valid variation\")",
        "begin_line": 2105,
        "end_line": 2118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.is_on_offset#2125",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.is_on_offset(self, dt)",
        "snippet": "    def is_on_offset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        dt = datetime(dt.year, dt.month, dt.day)\n        year_end = self.get_year_end(dt)\n\n        if self.variation == \"nearest\":\n            # We have to check the year end of \"this\" cal year AND the previous\n            return year_end == dt or self.get_year_end(shift_month(dt, -1, None)) == dt\n        else:\n            return year_end == dt",
        "begin_line": 2125,
        "end_line": 2135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.apply#2138",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.apply(self, other)",
        "snippet": "    def apply(self, other):\n        norm = Timestamp(other).normalize()\n\n        n = self.n\n        prev_year = self.get_year_end(datetime(other.year - 1, self.startingMonth, 1))\n        cur_year = self.get_year_end(datetime(other.year, self.startingMonth, 1))\n        next_year = self.get_year_end(datetime(other.year + 1, self.startingMonth, 1))\n\n        prev_year = conversion.localize_pydatetime(prev_year, other.tzinfo)\n        cur_year = conversion.localize_pydatetime(cur_year, other.tzinfo)\n        next_year = conversion.localize_pydatetime(next_year, other.tzinfo)\n\n        # Note: next_year.year == other.year + 1, so we will always\n        # have other < next_year\n        if norm == prev_year:\n            n -= 1\n        elif norm == cur_year:\n            pass\n        elif n > 0:\n            if norm < prev_year:\n                n -= 2\n            elif prev_year < norm < cur_year:\n                n -= 1\n            elif cur_year < norm < next_year:\n                pass\n        else:\n            if cur_year < norm < next_year:\n                n += 1\n            elif prev_year < norm < cur_year:\n                pass\n            elif (\n                norm.year == prev_year.year\n                and norm < prev_year\n                and prev_year - norm <= timedelta(6)\n            ):\n                # GH#14774, error when next_year.year == cur_year.year\n                # e.g. prev_year == datetime(2004, 1, 3),\n                # other == datetime(2004, 1, 1)\n                n -= 1\n            else:\n                assert False\n\n        shifted = datetime(other.year + n, self.startingMonth, 1)\n        result = self.get_year_end(shifted)\n        result = datetime(\n            result.year,\n            result.month,\n            result.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        return result",
        "begin_line": 2138,
        "end_line": 2191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253.get_year_end#2193",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253",
        "signature": "pandas.tseries.offsets.FY5253.get_year_end(self, dt)",
        "snippet": "    def get_year_end(self, dt):\n        assert dt.tzinfo is None\n\n        dim = ccalendar.get_days_in_month(dt.year, self.startingMonth)\n        target_date = datetime(dt.year, self.startingMonth, dim)\n        wkday_diff = self.weekday - target_date.weekday()\n        if wkday_diff == 0:\n            # year_end is the same for \"last\" and \"nearest\" cases\n            return target_date\n\n        if self.variation == \"last\":\n            days_forward = (wkday_diff % 7) - 7\n\n            # days_forward is always negative, so we always end up\n            # in the same year as dt\n            return target_date + timedelta(days=days_forward)\n        else:\n            # variation == \"nearest\":\n            days_forward = wkday_diff % 7\n            if days_forward <= 3:\n                # The upcoming self.weekday is closer than the previous one\n                return target_date + timedelta(days_forward)\n            else:\n                # The previous self.weekday is closer than the upcoming one\n                return target_date + timedelta(days_forward - 7)",
        "begin_line": 2193,
        "end_line": 2217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.__init__#2322",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, qtr_with_extra_week=1, variation='nearest')",
        "snippet": "    def __init__(\n        self,\n        n=1,\n        normalize=False,\n        weekday=0,\n        startingMonth=1,\n        qtr_with_extra_week=1,\n        variation=\"nearest\",\n    ):\n        BaseOffset.__init__(self, n, normalize)\n\n        object.__setattr__(self, \"startingMonth\", startingMonth)\n        object.__setattr__(self, \"weekday\", weekday)\n        object.__setattr__(self, \"qtr_with_extra_week\", qtr_with_extra_week)\n        object.__setattr__(self, \"variation\", variation)\n\n        if self.n == 0:\n            raise ValueError(\"N cannot be 0\")",
        "begin_line": 2322,
        "end_line": 2339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._offset#2342",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._offset(self)",
        "snippet": "    def _offset(self):\n        return FY5253(\n            startingMonth=self.startingMonth,\n            weekday=self.weekday,\n            variation=self.variation,\n        )",
        "begin_line": 2342,
        "end_line": 2347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter._rollback_to_year#2352",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter._rollback_to_year(self, other)",
        "snippet": "    def _rollback_to_year(self, other):\n        \"\"\"\n        Roll `other` back to the most recent date that was on a fiscal year\n        end.\n\n        Return the date of that year-end, the number of full quarters\n        elapsed between that year-end and other, and the remaining Timedelta\n        since the most recent quarter-end.\n\n        Parameters\n        ----------\n        other : datetime or Timestamp\n\n        Returns\n        -------\n        tuple of\n        prev_year_end : Timestamp giving most recent fiscal year end\n        num_qtrs : int\n        tdelta : Timedelta\n        \"\"\"\n        num_qtrs = 0\n\n        norm = Timestamp(other).tz_localize(None)\n        start = self._offset.rollback(norm)\n        # Note: start <= norm and self._offset.is_on_offset(start)\n\n        if start < norm:\n            # roll adjustment\n            qtr_lens = self.get_weeks(norm)\n\n            # check thet qtr_lens is consistent with self._offset addition\n            end = liboffsets.shift_day(start, days=7 * sum(qtr_lens))\n            assert self._offset.is_on_offset(end), (start, end, qtr_lens)\n\n            tdelta = norm - start\n            for qlen in qtr_lens:\n                if qlen * 7 <= tdelta.days:\n                    num_qtrs += 1\n                    tdelta -= Timedelta(days=qlen * 7)\n                else:\n                    break\n        else:\n            tdelta = Timedelta(0)\n\n        # Note: we always have tdelta.value >= 0\n        return start, num_qtrs, tdelta",
        "begin_line": 2352,
        "end_line": 2397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.apply#2400",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # Note: self.n == 0 is not allowed.\n        n = self.n\n\n        prev_year_end, num_qtrs, tdelta = self._rollback_to_year(other)\n        res = prev_year_end\n        n += num_qtrs\n        if self.n <= 0 and tdelta.value > 0:\n            n += 1\n\n        # Possible speedup by handling years first.\n        years = n // 4\n        if years:\n            res += self._offset * years\n            n -= years * 4\n\n        # Add an extra day to make *sure* we are getting the quarter lengths\n        # for the upcoming year, not the previous year\n        qtr_lens = self.get_weeks(res + Timedelta(days=1))\n\n        # Note: we always have 0 <= n < 4\n        weeks = sum(qtr_lens[:n])\n        if weeks:\n            res = liboffsets.shift_day(res, days=weeks * 7)\n\n        return res",
        "begin_line": 2400,
        "end_line": 2425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.get_weeks#2427",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.get_weeks(self, dt)",
        "snippet": "    def get_weeks(self, dt):\n        ret = [13] * 4\n\n        year_has_extra_week = self.year_has_extra_week(dt)\n\n        if year_has_extra_week:\n            ret[self.qtr_with_extra_week - 1] = 14\n\n        return ret",
        "begin_line": 2427,
        "end_line": 2435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week#2437",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.FY5253Quarter",
        "signature": "pandas.tseries.offsets.FY5253Quarter.year_has_extra_week(self, dt)",
        "snippet": "    def year_has_extra_week(self, dt):\n        # Avoid round-down errors --> normalize to get\n        # e.g. '370D' instead of '360D23H'\n        norm = Timestamp(dt).normalize().tz_localize(None)\n\n        next_year_end = self._offset.rollforward(norm)\n        prev_year_end = norm - self._offset\n        weeks_in_year = (next_year_end - prev_year_end).days / 7\n        assert weeks_in_year in [52, 53], weeks_in_year\n        return weeks_in_year == 53",
        "begin_line": 2437,
        "end_line": 2446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Easter.apply#2491",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Easter",
        "signature": "pandas.tseries.offsets.Easter.apply(self, other)",
        "snippet": "    def apply(self, other):\n        current_easter = easter(other.year)\n        current_easter = datetime(\n            current_easter.year, current_easter.month, current_easter.day\n        )\n        current_easter = conversion.localize_pydatetime(current_easter, other.tzinfo)\n\n        n = self.n\n        if n >= 0 and other < current_easter:\n            n -= 1\n        elif n < 0 and other > current_easter:\n            n += 1\n        # TODO: Why does this handle the 0 case the opposite of others?\n\n        # NOTE: easter returns a datetime.date so we have to convert to type of\n        # other\n        new = easter(other.year + n)\n        new = datetime(\n            new.year,\n            new.month,\n            new.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        return new",
        "begin_line": 2491,
        "end_line": 2517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2551",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2551,
        "end_line": 2556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004366812227074236,
            "pseudo_dstar_susp": 0.004366812227074236,
            "pseudo_tarantula_susp": 0.004405286343612335,
            "pseudo_op2_susp": 0.004366812227074236,
            "pseudo_barinel_susp": 0.004405286343612335
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__add__#2563",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n        if isinstance(other, Tick):\n            if type(self) == type(other):\n                return type(self)(self.n + other.n)\n            else:\n                return _delta_to_tick(self.delta + other.delta)\n        elif isinstance(other, Period):\n            return other + self\n        try:\n            return self.apply(other)\n        except ApplyTypeError:\n            return NotImplemented\n        except OverflowError:\n            raise OverflowError(\n                f\"the add operation between {self} and {other} will overflow\"\n            )",
        "begin_line": 2563,
        "end_line": 2578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022361359570661896,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__eq__#2580",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return False\n\n        if isinstance(other, Tick):\n            return self.delta == other.delta\n        else:\n            return False",
        "begin_line": 2580,
        "end_line": 2595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001643925694558606,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2602",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2602,
        "end_line": 2617,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000189000189000189,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2620",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self):\n        return self.n * self._inc",
        "begin_line": 2620,
        "end_line": 2621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012144765606023804,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2624",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2624,
        "end_line": 2625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012271444348999877,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.apply#2628",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.apply(self, other)",
        "snippet": "    def apply(self, other):\n        # Timestamp can handle tz and nano sec, thus no need to use apply_wraps\n        if isinstance(other, Timestamp):\n\n            # GH 15126\n            # in order to avoid a recursive\n            # call of __add__ and __radd__ if there is\n            # an exception, when we call using the + operator,\n            # we directly call the known method\n            result = other.__add__(self)\n            if result is NotImplemented:\n                raise OverflowError\n            return result\n        elif isinstance(other, (datetime, np.datetime64, date)):\n            return as_timestamp(other) + self\n\n        if isinstance(other, timedelta):\n            return other + self.delta\n        elif isinstance(other, type(self)):\n            return type(self)(self.n + other.n)\n\n        raise ApplyTypeError(f\"Unhandled type: {type(other).__name__}\")",
        "begin_line": 2628,
        "end_line": 2649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets._delta_to_tick#2655",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets._delta_to_tick(delta)",
        "snippet": "def _delta_to_tick(delta):\n    if delta.microseconds == 0 and getattr(delta, \"nanoseconds\", 0) == 0:\n        # nanoseconds only for pd.Timedelta\n        if delta.seconds == 0:\n            return Day(delta.days)\n        else:\n            seconds = delta.days * 86400 + delta.seconds\n            if seconds % 3600 == 0:\n                return Hour(seconds / 3600)\n            elif seconds % 60 == 0:\n                return Minute(seconds / 60)\n            else:\n                return Second(seconds)\n    else:\n        nanos = delta_to_nanoseconds(delta)\n        if nanos % 1000000 == 0:\n            return Milli(nanos // 1000000)\n        elif nanos % 1000 == 0:\n            return Micro(nanos // 1000)\n        else:  # pragma: no cover\n            return Nano(nanos)",
        "begin_line": 2655,
        "end_line": 2675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.offsets.generate_range#2723",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.generate_range(start=None, end=None, periods=None, offset=BDay())",
        "snippet": "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = Timestamp(start)\n    start = start if start is not NaT else None\n    end = Timestamp(end)\n    end = end if end is not NaT else None\n\n    if start and not offset.is_on_offset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.is_on_offset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(f\"Offset {offset} did not increment date\")\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(f\"Offset {offset} did not decrement date\")\n            cur = next_date",
        "begin_line": 2723,
        "end_line": 2800,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003053435114503817,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__eq__#89",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Check whether 'other' is equal to self.\n\n        By default, 'other' is considered equal if either\n\n        * it's a string matching 'self.name'.\n        * it's an instance of this type and all of the\n          the attributes in ``self._metadata`` are equal between\n          `self` and `other`.\n\n        Parameters\n        ----------\n        other : Any\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n        if isinstance(other, type(self)):\n            return all(\n                getattr(self, attr) == getattr(other, attr) for attr in self._metadata\n            )\n        return False",
        "begin_line": 89,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.names#174",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.names(self)",
        "snippet": "    def names(self) -> Optional[List[str]]:\n        \"\"\"\n        Ordered list of field names, or None if there are no fields.\n\n        This is for compatibility with NumPy arrays, and may be removed in the\n        future.\n        \"\"\"\n        return None",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015130882130428205,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#195",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(f\"Cannot construct a '{cls.__name__}' from\n        ...             \" \"'{string}'\")\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(f\"Expects a string, got {type(string).__name__}\")\n\n        # error: Non-overlapping equality check (left operand type: \"str\", right\n        #  operand type: \"Callable[[ExtensionDtype], str]\")  [comparison-overlap]\n        assert isinstance(cls.name, str), (cls, type(cls.name))\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")\n        return cls()",
        "begin_line": 195,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#248",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        is_dtype : bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        if isinstance(dtype, str):\n            try:\n                return cls.construct_from_string(dtype) is not None\n            except TypeError:\n                return False\n        return False",
        "begin_line": 248,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003355704697986577,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.0033783783783783786,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.0033783783783783786
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#63",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 63,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001518141794443601,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast_putmask#234",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other)",
        "snippet": "def maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result.\n    The result is replaced with the first N elements of other,\n    where N is the number of True values in mask.\n    If the length of other is shorter than N, other will be repeated.\n\n    Parameters\n    ----------\n    result : ndarray\n        The destination array. This will be mutated in-place if no upcasting is\n        necessary.\n    mask : boolean ndarray\n    other : scalar\n        The source value.\n\n    Returns\n    -------\n    result : ndarray\n    changed : bool\n        Set to true if the result array was upcasted.\n\n    Examples\n    --------\n    >>> result, _ = maybe_upcast_putmask(np.arange(1,6),\n    np.array([False, True, False, True, True]), np.arange(21,23))\n    >>> result\n    array([1, 21, 3, 22, 21])\n    \"\"\"\n\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"The result input must be a ndarray.\")\n    if not is_scalar(other):\n        # We _could_ support non-scalar other, but until we have a compelling\n        #  use case, we assume away the possibility.\n        raise ValueError(\"other must be a scalar\")\n\n    if mask.any():\n        # Two conversions for date-like dtypes that can't be done automatically\n        # in np.place:\n        #   NaN -> NaT\n        #   integer or integer array -> date-like array\n        if result.dtype.kind in [\"m\", \"M\"]:\n            if is_scalar(other):\n                if isna(other):\n                    other = result.dtype.type(\"nat\")\n                elif is_integer(other):\n                    other = np.array(other, dtype=result.dtype)\n            elif is_integer_dtype(other):\n                other = np.array(other, dtype=result.dtype)\n\n        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True\n\n        # we want to decide whether place will work\n        # if we have nans in the False portion of our mask then we need to\n        # upcast (possibly), otherwise we DON't want to upcast (e.g. if we\n        # have values, say integers, in the success portion then it's ok to not\n        # upcast)\n        new_dtype, _ = maybe_promote(result.dtype, other)\n        if new_dtype != result.dtype:\n\n            # we have a scalar or len 0 ndarray\n            # and its nan and we are changing some values\n            if is_scalar(other) or (isinstance(other, np.ndarray) and other.ndim < 1):\n                if isna(other):\n                    return changeit()\n\n            # we have an ndarray and the masking has nans in it\n            else:\n\n                if isna(other).any():\n                    return changeit()\n\n        try:\n            np.place(result, mask, other)\n        except TypeError:\n            # e.g. int-dtype result and float-dtype other\n            return changeit()\n\n    return result, False",
        "begin_line": 234,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.changeit#285",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.changeit()",
        "snippet": "        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True",
        "begin_line": 285,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#340",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n\n    Parameters\n    ----------\n    dtype : np.dtype or ExtensionDtype\n    fill_value : scalar, default np.nan\n\n    Returns\n    -------\n    dtype\n        Upcasted from dtype argument if necessary.\n    fill_value\n        Upcasted from fill_value argument if necessary.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n        elif not isinstance(fill_value, datetime):\n            dtype = np.dtype(np.object_)\n        elif fill_value.tzinfo is None:\n            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 340,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#496",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 496,
        "end_line": 522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003053435114503817,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#542",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
        "begin_line": 542,
        "end_line": 617,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_dtype_type#675",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_dtype_type(element)",
        "snippet": "def maybe_infer_dtype_type(element):\n    \"\"\"\n    Try to infer an object's dtype, for use in arithmetic ops.\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    numpy.int64\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
        "begin_line": 675,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023963575365444525,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast#709",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool=False)",
        "snippet": "def maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool = False):\n    \"\"\"\n    Provide explicit type promotion and coercion.\n\n    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n        The array that we want to maybe upcast.\n    fill_value : what we want to fill with\n    dtype : if None, then use the dtype of the values, else coerce to this type\n    copy : bool, default True\n        If True always make a copy even if no upcast is required.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(values.dtype):\n        # We allow arbitrary fill values for object dtype\n        raise ValueError(\"fill_value must be a scalar\")\n\n    if is_extension_array_dtype(values):\n        if copy:\n            values = values.copy()\n    else:\n        if dtype is None:\n            dtype = values.dtype\n        new_dtype, fill_value = maybe_promote(dtype, fill_value)\n        if new_dtype != values.dtype:\n            values = values.astype(new_dtype)\n        elif copy:\n            values = values.copy()\n\n    return values, fill_value",
        "begin_line": 709,
        "end_line": 738,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#750",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 750,
        "end_line": 759,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.astype_nansafe#792",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)",
        "snippet": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
        "begin_line": 792,
        "end_line": 892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#1016",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 1016,
        "end_line": 1027,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019821605550049553,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1030",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1030,
        "end_line": 1134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1074",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1074,
        "end_line": 1097,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1099",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)",
        "begin_line": 1099,
        "end_line": 1108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018751171948246765,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1137",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\" try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1137,
        "end_line": 1267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002610966057441253,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.find_common_type#1270",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.find_common_type(types)",
        "snippet": "def find_common_type(types):\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
        "begin_line": 1270,
        "end_line": 1315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.cast_scalar_to_array#1318",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.cast_scalar_to_array(shape, value, dtype=None)",
        "snippet": "def cast_scalar_to_array(shape, value, dtype=None):\n    \"\"\"\n    Create np.ndarray of specified shape and dtype, filled with values.\n\n    Parameters\n    ----------\n    shape : tuple\n    value : scalar value\n    dtype : np.dtype, optional\n        dtype to coerce\n\n    Returns\n    -------\n    ndarray of shape, filled with value, of specified / inferred dtype\n\n    \"\"\"\n\n    if dtype is None:\n        dtype, fill_value = infer_dtype_from_scalar(value)\n    else:\n        fill_value = value\n\n    values = np.empty(shape, dtype=dtype)\n    values.fill(fill_value)\n\n    return values",
        "begin_line": 1318,
        "end_line": 1343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1346",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length: int, dtype)",
        "snippet": "def construct_1d_arraylike_from_scalar(value, length: int, dtype):\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype / np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n        if not isinstance(dtype, (np.dtype, type(np.dtype))):\n            dtype = dtype.dtype\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1346,
        "end_line": 1383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1386",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1386,
        "end_line": 1408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012833675564681725,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1411",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool = False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1411,
        "end_line": 1449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001290489095367144,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1452",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    int_arr : ndarray\n        An array of integer or unsigned integer dtype\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            f\"casted to the dtype {dtype}\"\n        )\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1452,
        "end_line": 1520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#221",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        name = maybe_extract_name(name, data, cls)\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name, freq=dtarr.freq, tz=dtarr.tz)\n        return subarr",
        "begin_line": 221,
        "end_line": 258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#261",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values, name=None, freq=None, tz=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, tz=None, dtype=None):\n        \"\"\"\n        We require the we have a dtype compat for the values\n        if we are passed a non-dtype compat, then coerce using the constructor\n        \"\"\"\n        if isinstance(values, DatetimeArray):\n            if tz:\n                tz = validate_tz_from_dtype(dtype, tz)\n                dtype = DatetimeTZDtype(tz=tz)\n            elif dtype is None:\n                dtype = _NS_DTYPE\n\n            values = DatetimeArray(values, freq=freq, dtype=dtype)\n            tz = values.tz\n            freq = values.freq\n            values = values._data\n\n        # DatetimeArray._simple_new will accept either i8 or M8[ns] dtypes\n        if isinstance(values, DatetimeIndex):\n            values = values._data\n\n        dtype = tz_to_dtype(tz)\n        dtarr = DatetimeArray._simple_new(values, freq=freq, dtype=dtype)\n        assert isinstance(dtarr, DatetimeArray)\n\n        result = object.__new__(cls)\n        result._data = dtarr\n        result.name = name\n        result._no_setting_name = False\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = dtarr._data\n        result._reset_identity()\n        return result",
        "begin_line": 261,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001397624039133473,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__array__#297",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 297,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00037650602409638556,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._wrap_setop_result#412",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._wrap_setop_result(self, other, result)",
        "snippet": "    def _wrap_setop_result(self, other, result):\n        name = get_op_result_name(self, other)\n        return self._shallow_copy(result, name=name, freq=None, tz=self.tz)",
        "begin_line": 412,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.to_series#424",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.to_series(self, keep_tz=lib._no_default, index=None, name=None)",
        "snippet": "    def to_series(self, keep_tz=lib._no_default, index=None, name=None):\n        \"\"\"\n        Create a Series with both index and values equal to the index keys\n        useful with map for returning an indexer based on an index.\n\n        Parameters\n        ----------\n        keep_tz : optional, defaults True\n            Return the data keeping the timezone.\n\n            If keep_tz is True:\n\n              If the timezone is not set, the resulting\n              Series will have a datetime64[ns] dtype.\n\n              Otherwise the Series will have an datetime64[ns, tz] dtype; the\n              tz will be preserved.\n\n            If keep_tz is False:\n\n              Series will have a datetime64[ns] dtype. TZ aware\n              objects will have the tz removed.\n\n            .. versionchanged:: 1.0.0\n                The default value is now True.  In a future version,\n                this keyword will be removed entirely.  Stop passing the\n                argument to obtain the future behavior and silence the warning.\n\n        index : Index, optional\n            Index of resulting Series. If None, defaults to original index.\n        name : str, optional\n            Name of resulting Series. If None, defaults to name of original\n            index.\n\n        Returns\n        -------\n        Series\n        \"\"\"\n        from pandas import Series\n\n        if index is None:\n            index = self._shallow_copy()\n        if name is None:\n            name = self.name\n\n        if keep_tz is not lib._no_default:\n            if keep_tz:\n                warnings.warn(\n                    \"The 'keep_tz' keyword in DatetimeIndex.to_series \"\n                    \"is deprecated and will be removed in a future version.  \"\n                    \"You can stop passing 'keep_tz' to silence this warning.\",\n                    FutureWarning,\n                    stacklevel=2,\n                )\n            else:\n                warnings.warn(\n                    \"Specifying 'keep_tz=False' is deprecated and this \"\n                    \"option will be removed in a future release. If \"\n                    \"you want to remove the timezone information, you \"\n                    \"can do 'idx.tz_convert(None)' before calling \"\n                    \"'to_series'.\",\n                    FutureWarning,\n                    stacklevel=2,\n                )\n        else:\n            keep_tz = True\n\n        if keep_tz and self.tz is not None:\n            # preserve the tz & copy\n            values = self.copy(deep=True)\n        else:\n            values = self.values.copy()\n\n        return Series(values, index=index, name=name)",
        "begin_line": 424,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_value#673",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n        \"\"\"\n        Fast lookup of value from 1-dimensional ndarray. Only use this if you\n        know what you're doing\n        \"\"\"\n\n        if isinstance(key, datetime):\n\n            # needed to localize naive datetimes\n            if self.tz is not None:\n                if key.tzinfo is not None:\n                    key = Timestamp(key).tz_convert(self.tz)\n                else:\n                    key = Timestamp(key).tz_localize(self.tz)\n\n            return self.get_value_maybe_box(series, key)\n\n        if isinstance(key, time):\n            locs = self.indexer_at_time(key)\n            return series.take(locs)\n\n        try:\n            return com.maybe_box(self, Index.get_value(self, series, key), series, key)\n        except KeyError:\n            try:\n                loc = self._get_string_slice(key)\n                return series[loc]\n            except (TypeError, ValueError, KeyError):\n                pass\n\n            try:\n                return self.get_value_maybe_box(series, key)\n            except (TypeError, ValueError, KeyError):\n                raise KeyError(key)",
        "begin_line": 673,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_value_maybe_box#708",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_value_maybe_box(self, series, key)",
        "snippet": "    def get_value_maybe_box(self, series, key):\n        # needed to localize naive datetimes\n        if self.tz is not None:\n            key = Timestamp(key)\n            if key.tzinfo is not None:\n                key = key.tz_convert(self.tz)\n            else:\n                key = key.tz_localize(self.tz)\n        elif not isinstance(key, Timestamp):\n            key = Timestamp(key)\n        values = self._engine.get_value(com.values_from_object(series), key, tz=self.tz)\n        return com.maybe_box(self, values, series, key)",
        "begin_line": 708,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice#818",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
        "snippet": "    def _get_string_slice(self, key: str, use_lhs: bool = True, use_rhs: bool = True):\n        freq = getattr(self, \"freqstr\", getattr(self, \"inferred_freq\", None))\n        _, parsed, reso = parsing.parse_time_string(key, freq)\n        loc = self._partial_date_slice(reso, parsed, use_lhs=use_lhs, use_rhs=use_rhs)\n        return loc",
        "begin_line": 818,
        "end_line": 822,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__#878",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        elif result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            assert isinstance(result, np.ndarray), result\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 878,
        "end_line": 887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019275250578257516,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#905",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 905,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015475085112968121,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#1051",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs,\n    )\n    return DatetimeIndex._simple_new(dtarr, tz=dtarr.tz, freq=dtarr.freq, name=name)",
        "begin_line": 1051,
        "end_line": 1212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012548625925461163,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.bdate_range#1215",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, weekmask=None, holidays=None, closed=None, **kwargs)",
        "snippet": "def bdate_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=\"B\",\n    tz=None,\n    normalize=True,\n    name=None,\n    weekmask=None,\n    holidays=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex, with business day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or datetime-like, default None\n        Left bound for generating dates.\n    end : str or datetime-like, default None\n        Right bound for generating dates.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'B' (business daily)\n        Frequency strings can have multiples, e.g. '5H'.\n    tz : str or None\n        Time zone name for returning localized DatetimeIndex, for example\n        Asia/Beijing.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    weekmask : str or None, default None\n        Weekmask of valid business days, passed to ``numpy.busdaycalendar``,\n        only used when custom frequency strings are passed.  The default\n        value None is equivalent to 'Mon Tue Wed Thu Fri'.\n\n        .. versionadded:: 0.21.0\n\n    holidays : list-like or None, default None\n        Dates to exclude from the set of valid business days, passed to\n        ``numpy.busdaycalendar``, only used when custom frequency strings\n        are passed.\n\n        .. versionadded:: 0.21.0\n\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    DatetimeIndex\n\n    Notes\n    -----\n    Of the four parameters: ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified.  Specifying ``freq`` is a requirement\n    for ``bdate_range``.  Use ``date_range`` if specifying ``freq`` is not\n    desired.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Note how the two weekend days are skipped in the result.\n\n    >>> pd.bdate_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-08'],\n              dtype='datetime64[ns]', freq='B')\n    \"\"\"\n    if freq is None:\n        msg = \"freq must be specified for bdate_range; use date_range instead\"\n        raise TypeError(msg)\n\n    if isinstance(freq, str) and freq.startswith(\"C\"):\n        try:\n            weekmask = weekmask or \"Mon Tue Wed Thu Fri\"\n            freq = prefix_mapping[freq](holidays=holidays, weekmask=weekmask)\n        except (KeyError, TypeError):\n            msg = f\"invalid custom frequency string: {freq}\"\n            raise ValueError(msg)\n    elif holidays or weekmask:\n        msg = (\n            \"a custom frequency string is required when holidays or \"\n            f\"weekmask are passed, got frequency {freq}\"\n        )\n        raise ValueError(msg)\n\n    return date_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        name=name,\n        closed=closed,\n        **kwargs,\n    )",
        "begin_line": 1215,
        "end_line": 1320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003544842254519674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#98",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 98,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001490979573579842,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._maybe_match_name#121",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._maybe_match_name(a, b)",
        "snippet": "def _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between\n    a and b.  If only one of these has a `name` attribute, return that\n    name.  Otherwise return a consensus name if they match of None if\n    they have different names.\n\n    Parameters\n    ----------\n    a : object\n    b : object\n\n    Returns\n    -------\n    name : str or None\n\n    See Also\n    --------\n    pandas.core.common.consensus_name_attr\n    \"\"\"\n    a_has = hasattr(a, \"name\")\n    b_has = hasattr(b, \"name\")\n    if a_has and b_has:\n        if a.name == b.name:\n            return a.name\n        else:\n            # TODO: what if they both have np.nan for their names?\n            return None\n    elif a_has:\n        return a.name\n    elif b_has:\n        return b.name\n    return None",
        "begin_line": 121,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019782393669634025,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.maybe_upcast_for_op#156",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is datetime.timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and is_timedelta64_dtype(obj.dtype):\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 156,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.fill_binop#313",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.fill_binop(left, right, fill_value)",
        "snippet": "def fill_binop(left, right, fill_value):\n    \"\"\"\n    If a non-None fill_value is given, replace null entries in left and right\n    with this value, but only in positions where _one_ of left/right is null,\n    not both.\n\n    Parameters\n    ----------\n    left : array-like\n    right : array-like\n    fill_value : object\n\n    Returns\n    -------\n    left : array-like\n    right : array-like\n\n    Notes\n    -----\n    Makes copies if fill_value is not None\n    \"\"\"\n    # TODO: can we make a no-copy implementation?\n    if fill_value is not None:\n        left_mask = isna(left)\n        right_mask = isna(right)\n        left = left.copy()\n        right = right.copy()\n\n        # one but not both\n        mask = left_mask ^ right_mask\n        left[left_mask & mask] = fill_value\n        right[right_mask & mask] = fill_value\n    return left, right",
        "begin_line": 313,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.dispatch_to_series#352",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.dispatch_to_series(left, right, func, str_rep=None, axis=None)",
        "snippet": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        # Get the appropriate array-op to apply to each block's values.\n        array_op = get_array_op(func, str_rep=str_rep)\n        bm = left._data.apply(array_op, right=right)\n        return type(left)(bm)\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        # We only get here if called via _combine_series_frame,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n\n        if right.dtype == \"timedelta64[ns]\":\n            # ensure we treat NaT values as the correct dtype\n            # Note: we do not do this unconditionally as it may be lossy or\n            #  expensive for EA dtypes.\n            right = np.asarray(right)\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\n\n        else:\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)  # Handle other cases later\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
        "begin_line": 352,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000275178866263071,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.column_op#384",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.column_op(a, b)",
        "snippet": "        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}",
        "begin_line": 384,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024061597690086623,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.column_op#398",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.column_op(a, b)",
        "snippet": "            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}",
        "begin_line": 398,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024061597690086623,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.column_op#403",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.column_op(a, b)",
        "snippet": "            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}",
        "begin_line": 403,
        "end_line": 404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024061597690086623,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#424",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 424,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._construct_result#445",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._construct_result(left: ABCSeries, result: Union[np.ndarray, ABCExtensionArray], index: ABCIndexClass, name)",
        "snippet": "def _construct_result(\n    left: ABCSeries,\n    result: Union[np.ndarray, ABCExtensionArray],\n    index: ABCIndexClass,\n    name,\n):\n    \"\"\"\n    Construct an appropriately-labelled Series from the result of an op.\n\n    Parameters\n    ----------\n    left : Series\n    result : ndarray or ExtensionArray\n    index : Index\n    name : object\n\n    Returns\n    -------\n    Series\n        In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n    \"\"\"\n    if isinstance(result, tuple):\n        # produced by divmod or rdivmod\n        return (\n            _construct_result(left, result[0], index=index, name=name),\n            _construct_result(left, result[1], index=index, name=name),\n        )\n\n    # We do not pass dtype to ensure that the Series constructor\n    #  does inference in the case where `result` has object-dtype.\n    out = left._constructor(result, index=index)\n    out = out.__finalize__(left)\n\n    # Set the result's name after __finalize__ is called because __finalize__\n    #  would set it back to self.name\n    out.name = name\n    return out",
        "begin_line": 445,
        "end_line": 481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020781379883624273,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_SERIES#484",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_SERIES(cls, op, special)",
        "snippet": "def _arith_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return _construct_result(left, result, index=left.index, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 484,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012933264355923435,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#493",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return _construct_result(left, result, index=left.index, name=res_name)",
        "begin_line": 493,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013190871916633689,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._comp_method_SERIES#508",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._comp_method_SERIES(cls, op, special)",
        "snippet": "def _comp_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 508,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000163826998689384,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#516",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)",
        "begin_line": 516,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017930787161556393,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._flex_method_SERIES#556",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._flex_method_SERIES(cls, op, special)",
        "snippet": "def _flex_method_SERIES(cls, op, special):\n    name = _get_op_name(op, special)\n    doc = _make_flex_doc(name, \"series\")\n\n    @Appender(doc)\n    def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n        # validate axis\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(other, ABCSeries):\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        elif isinstance(other, (np.ndarray, list, tuple)):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must be equal\")\n            other = self._constructor(other, self.index)\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        else:\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            return op(self, other)\n\n    flex_wrapper.__name__ = name\n    return flex_wrapper",
        "begin_line": 556,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.flex_wrapper#561",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.flex_wrapper(self, other, level=None, fill_value=None, axis=0)",
        "snippet": "    def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n        # validate axis\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(other, ABCSeries):\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        elif isinstance(other, (np.ndarray, list, tuple)):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must be equal\")\n            other = self._constructor(other, self.index)\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        else:\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            return op(self, other)",
        "begin_line": 561,
        "end_line": 577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._combine_series_frame#587",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._combine_series_frame(self, other, func, fill_value=None, axis=None, level=None)",
        "snippet": "def _combine_series_frame(self, other, func, fill_value=None, axis=None, level=None):\n    \"\"\"\n    Apply binary operator `func` to self, other using alignment and fill\n    conventions determined by the fill_value, axis, and level kwargs.\n\n    Parameters\n    ----------\n    self : DataFrame\n    other : Series\n    func : binary operator\n    fill_value : object, default None\n    axis : {0, 1, 'columns', 'index', None}, default None\n    level : int or None, default None\n\n    Returns\n    -------\n    result : DataFrame\n    \"\"\"\n    if fill_value is not None:\n        raise NotImplementedError(f\"fill_value {fill_value} not supported.\")\n\n    if axis is None:\n        # default axis is columns\n        axis = 1\n\n    axis = self._get_axis_number(axis)\n    left, right = self.align(other, join=\"outer\", axis=axis, level=level, copy=False)\n    if axis == 0:\n        new_data = left._combine_match_index(right, func)\n    else:\n        new_data = dispatch_to_series(left, right, func, axis=\"columns\")\n\n    return left._construct_result(new_data)",
        "begin_line": 587,
        "end_line": 619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019342359767891682,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_FRAME#622",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_FRAME(left, right, axis)",
        "snippet": "def _align_method_FRAME(left, right, axis):\n    \"\"\" convert rhs to meet lhs dims if input is list, tuple or np.ndarray \"\"\"\n\n    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right\n\n    if isinstance(right, np.ndarray):\n\n        if right.ndim == 1:\n            right = to_series(right)\n\n        elif right.ndim == 2:\n            if right.shape == left.shape:\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[0] == left.shape[0] and right.shape[1] == 1:\n                # Broadcast across columns\n                right = np.broadcast_to(right, left.shape)\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[1] == left.shape[1] and right.shape[0] == 1:\n                # Broadcast along rows\n                right = to_series(right[0, :])\n\n            else:\n                raise ValueError(\n                    \"Unable to coerce to DataFrame, shape \"\n                    f\"must be {left.shape}: given {right.shape}\"\n                )\n\n        elif right.ndim > 2:\n            raise ValueError(\n                \"Unable to coerce to Series/DataFrame, dim \"\n                f\"must be <= 2: {right.shape}\"\n            )\n\n    elif is_list_like(right) and not isinstance(right, (ABCSeries, ABCDataFrame)):\n        # GH17901\n        right = to_series(right)\n\n    return right",
        "begin_line": 622,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021523891519586742,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.to_series#625",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.to_series(right)",
        "snippet": "    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right",
        "begin_line": 625,
        "end_line": 639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_FRAME#678",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_FRAME(cls, op, special)",
        "snippet": "def _arith_method_FRAME(cls, op, special):\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n    default_axis = _get_frame_op_default_axis(op_name)\n\n    na_op = define_na_arithmetic_op(op, str_rep)\n    is_logical = str_rep in [\"&\", \"|\", \"^\"]\n\n    if op_name in _op_descriptions:\n        # i.e. include \"add\" but not \"__add__\"\n        doc = _make_flex_doc(op_name, \"dataframe\")\n    else:\n        doc = _arith_doc_FRAME % op_name\n\n    @Appender(doc)\n    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        other = _align_method_FRAME(self, other, axis)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n\n            left, right = self.align(other, join=\"outer\", level=level, copy=False)\n            new_data = left._combine_frame(right, pass_op, fill_value)\n            return left._construct_result(new_data)\n\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n            return _combine_series_frame(\n                self, other, pass_op, fill_value=fill_value, axis=axis, level=level\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)\n\n    f.__name__ = op_name\n\n    return f",
        "begin_line": 678,
        "end_line": 724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014721036360959813,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.f#693",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.f(self, other, axis=default_axis, level=None, fill_value=None)",
        "snippet": "    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        other = _align_method_FRAME(self, other, axis)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n\n            left, right = self.align(other, join=\"outer\", level=level, copy=False)\n            new_data = left._combine_frame(right, pass_op, fill_value)\n            return left._construct_result(new_data)\n\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n            return _combine_series_frame(\n                self, other, pass_op, fill_value=fill_value, axis=axis, level=level\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)",
        "begin_line": 693,
        "end_line": 720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__._comp_method_FRAME#762",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._comp_method_FRAME(cls, op, special)",
        "snippet": "def _comp_method_FRAME(cls, op, special):\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @Appender(f\"Wrapper for comparison method {op_name}\")\n    def f(self, other):\n\n        other = _align_method_FRAME(self, other, axis=None)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            if not self._indexed_same(other):\n                raise ValueError(\n                    \"Can only compare identically-labeled DataFrame objects\"\n                )\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)\n\n        elif isinstance(other, ABCSeries):\n            return _combine_series_frame(\n                self, other, op, fill_value=None, axis=None, level=None\n            )\n        else:\n\n            # straight boolean comparisons we want to allow all columns\n            # (regardless of dtype to pass thru) See #4537 for discussion.\n            new_data = dispatch_to_series(self, other, op)\n            return self._construct_result(new_data)\n\n    f.__name__ = op_name\n\n    return f",
        "begin_line": 762,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016638935108153079,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.__init__.f#767",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.f(self, other)",
        "snippet": "    def f(self, other):\n\n        other = _align_method_FRAME(self, other, axis=None)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            if not self._indexed_same(other):\n                raise ValueError(\n                    \"Can only compare identically-labeled DataFrame objects\"\n                )\n            new_data = dispatch_to_series(self, other, op, str_rep)\n            return self._construct_result(new_data)\n\n        elif isinstance(other, ABCSeries):\n            return _combine_series_frame(\n                self, other, op, fill_value=None, axis=None, level=None\n            )\n        else:\n\n            # straight boolean comparisons we want to allow all columns\n            # (regardless of dtype to pass thru) See #4537 for discussion.\n            new_data = dispatch_to_series(self, other, op)\n            return self._construct_result(new_data)",
        "begin_line": 767,
        "end_line": 789,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00033783783783783786,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#56",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype=None)",
        "snippet": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [ensure_index(columns), index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 56,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024648755237860487,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.init_ndarray#123",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_ndarray(values, index, columns, dtype=None, copy=False)",
        "snippet": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n\n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n\n        if not hasattr(values, \"dtype\"):\n            values = prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        # GH#19157\n\n        if isinstance(values, np.ndarray) and values.ndim > 1:\n            # GH#12513 a EA dtype passed with a 2D array, split into\n            #  multiple EAs that view the values\n            values = [values[:, n] for n in range(values.shape[1])]\n        else:\n            values = [values]\n\n        if columns is None:\n            columns = list(range(len(values)))\n        return arrays_to_mgr(values, columns, index, columns, dtype=dtype)\n\n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = prep_ndarray(values, copy=copy)\n\n    if dtype is not None:\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                # e.g. ValueError when trying to cast object dtype to float64\n                raise ValueError(\n                    f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                ) from orig\n\n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n\n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])",
        "begin_line": 123,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#213",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data, index, columns, dtype=None)",
        "snippet": "def init_dict(data, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    if columns is not None:\n        from pandas.core.series import Series\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or np.issubdtype(dtype, np.flexible):\n                # GH#1783\n                nan_dtype = object\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = list(data.keys())\n        columns = data_names = Index(keys)\n        arrays = (com.maybe_iterable_to_list(data[k]) for k in keys)\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 213,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.prep_ndarray#260",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.prep_ndarray(values, copy=True)",
        "snippet": "def prep_ndarray(values, copy=True) -> np.ndarray:\n    if not isinstance(values, (np.ndarray, ABCSeries, Index)):\n        if len(values) == 0:\n            return np.empty((0, 0), dtype=object)\n        elif isinstance(values, range):\n            arr = np.arange(values.start, values.stop, values.step, dtype=\"int64\")\n            return arr[..., np.newaxis]\n\n        def convert(v):\n            return maybe_convert_platform(v)\n\n        # we could have a 1-dim or 2-dim list here\n        # this is equiv of np.asarray, but does object conversion\n        # and platform dtype preservation\n        try:\n            if is_list_like(values[0]) or hasattr(values[0], \"len\"):\n                values = np.array([convert(v) for v in values])\n            elif isinstance(values[0], np.ndarray) and values[0].ndim == 0:\n                # GH#21861\n                values = np.array([convert(v) for v in values])\n            else:\n                values = convert(values)\n        except (ValueError, TypeError):\n            values = convert(values)\n\n    else:\n\n        # drop subclass info, do not copy data\n        values = np.asarray(values)\n        if copy:\n            values = values.copy()\n\n    if values.ndim == 1:\n        values = values.reshape((values.shape[0], 1))\n    elif values.ndim != 2:\n        raise ValueError(\"Must pass 2-d input\")\n\n    return values",
        "begin_line": 260,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#268",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(v)",
        "snippet": "        def convert(v):\n            return maybe_convert_platform(v)",
        "begin_line": 268,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#300",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype=None)",
        "snippet": "def _homogenize(data, index, dtype=None):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex.values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 300,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025588536335721597,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#331",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data):\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = union_indexes(indexes)\n        elif have_dicts:\n            index = union_indexes(indexes, sort=False)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = (\n                        f\"array length {lengths[0]} does not match index \"\n                        f\"length {len(index)}\"\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 331,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction._get_axes#417",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._get_axes(N, K, index, columns)",
        "snippet": "def _get_axes(N, K, index, columns):\n    # helper to create the axes as indexes\n    # return axes or defaults\n\n    if index is None:\n        index = ibase.default_index(N)\n    else:\n        index = ensure_index(index)\n\n    if columns is None:\n        columns = ibase.default_index(K)\n    else:\n        columns = ensure_index(columns)\n    return index, columns",
        "begin_line": 417,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019557989438685703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.to_arrays#437",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def to_arrays(data, columns, coerce_float=False, dtype=None):\n    \"\"\"\n    Return list of arrays, columns.\n    \"\"\"\n    if isinstance(data, ABCDataFrame):\n        if columns is not None:\n            arrays = [\n                data._ixs(i, axis=1).values\n                for i, col in enumerate(data.columns)\n                if col in columns\n            ]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], abc.Mapping):\n        return _list_of_dict_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], ABCSeries):\n        return _list_of_series_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = ibase.default_index(len(data))\n        return data, columns\n    elif (\n        isinstance(data, (np.ndarray, ABCSeries, Index))\n        and data.dtype.names is not None\n    ):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = [tuple(x) for x in data]\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)",
        "begin_line": 437,
        "end_line": 485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction._list_to_arrays#488",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def _list_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    # gh-26429 do not raise user-facing AssertionError\n    try:\n        result = _convert_object_array(\n            content, columns, dtype=dtype, coerce_float=coerce_float\n        )\n    except AssertionError as e:\n        raise ValueError(e) from e\n    return result",
        "begin_line": 488,
        "end_line": 501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction._convert_object_array#574",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._convert_object_array(content, columns, coerce_float=False, dtype=None)",
        "snippet": "def _convert_object_array(content, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        columns = ibase.default_index(len(content))\n    else:\n        if len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError(\n                f\"{len(columns)} columns passed, passed data had \"\n                f\"{len(content)} columns\"\n            )\n\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays, columns",
        "begin_line": 574,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#586",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(arr)",
        "snippet": "    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr",
        "begin_line": 586,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#15",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 15,
        "end_line": 28,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001422677479015507,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexers.is_scalar_indexer#31",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_scalar_indexer(indexer, arr_value)",
        "snippet": "def is_scalar_indexer(indexer, arr_value) -> bool:\n    \"\"\"\n    Return True if we are all scalar indexers.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n            return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 31,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020968756552736424,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexers.is_empty_indexer#46",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_empty_indexer(indexer, arr_value: np.ndarray)",
        "snippet": "def is_empty_indexer(indexer, arr_value: np.ndarray) -> bool:\n    \"\"\"\n    Check if we have an empty indexer.\n\n    Parameters\n    ----------\n    indexer : object\n    arr_value : np.ndarray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if is_list_like(indexer) and not len(indexer):\n        return True\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n        return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 46,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020968756552736424,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexers.check_setitem_lengths#72",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_setitem_lengths(indexer, value, values)",
        "snippet": "def check_setitem_lengths(indexer, value, values) -> None:\n    \"\"\"\n    Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        Key for the setitem.\n    value : array-like\n        Value for the setitem.\n    values : array-like\n        Values being set into.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't match.\n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (\n                isinstance(indexer, np.ndarray)\n                and indexer.dtype == np.bool_\n                and len(indexer[indexer]) == len(value)\n            ):\n                raise ValueError(\n                    \"cannot set using a list-like indexer \"\n                    \"with a different length than the value\"\n                )\n\n    elif isinstance(indexer, slice):\n        # slice\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\n                    \"cannot set using a slice indexer with a \"\n                    \"different length than the value\"\n                )",
        "begin_line": 72,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexers.validate_indices#121",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.validate_indices(indices: np.ndarray, n: int)",
        "snippet": "def validate_indices(indices: np.ndarray, n: int) -> None:\n    \"\"\"\n    Perform bounds-checking for an indexer.\n\n    -1 is allowed for indicating missing values.\n\n    Parameters\n    ----------\n    indices : ndarray\n    n : int\n        Length of the array being indexed.\n\n    Raises\n    ------\n    ValueError\n\n    Examples\n    --------\n    >>> validate_indices([1, 2], 3)\n    # OK\n    >>> validate_indices([1, -2], 3)\n    ValueError\n    >>> validate_indices([1, 2, 3], 3)\n    IndexError\n    >>> validate_indices([-1, -1], 0)\n    # OK\n    >>> validate_indices([0, 1], 0)\n    IndexError\n    \"\"\"\n    if len(indices):\n        min_idx = indices.min()\n        if min_idx < -1:\n            msg = f\"'indices' contains values less than allowed ({min_idx} < -1)\"\n            raise ValueError(msg)\n\n        max_idx = indices.max()\n        if max_idx >= n:\n            raise IndexError(\"indices are out-of-bounds\")",
        "begin_line": 121,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexers.check_bool_array_indexer#247",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_bool_array_indexer(array: AnyArrayLike, mask: AnyArrayLike)",
        "snippet": "def check_bool_array_indexer(array: AnyArrayLike, mask: AnyArrayLike) -> np.ndarray:\n    \"\"\"\n    Check if `mask` is a valid boolean indexer for `array`.\n\n    `array` and `mask` are checked to have the same length, and the\n    dtype is validated.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    array : array\n        The array that's being masked.\n    mask : array\n        The boolean array that's masking.\n\n    Returns\n    -------\n    numpy.ndarray\n        The validated boolean mask.\n\n    Raises\n    ------\n    IndexError\n        When the lengths don't match.\n    ValueError\n        When `mask` cannot be converted to a bool-dtype ndarray.\n\n    See Also\n    --------\n    api.types.is_bool_dtype : Check if `key` is of boolean dtype.\n\n    Examples\n    --------\n    A boolean ndarray is returned when the arguments are all valid.\n\n    >>> mask = pd.array([True, False])\n    >>> arr = pd.array([1, 2])\n    >>> pd.api.extensions.check_bool_array_indexer(arr, mask)\n    array([ True, False])\n\n    An IndexError is raised when the lengths don't match.\n\n    >>> mask = pd.array([True, False, True])\n    >>> pd.api.extensions.check_bool_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    IndexError: Item wrong length 3 instead of 2.\n\n    A ValueError is raised when the mask cannot be converted to\n    a bool-dtype ndarray.\n\n    >>> mask = pd.array([True, pd.NA])\n    >>> pd.api.extensions.check_bool_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    ValueError: cannot convert to bool numpy array in presence of missing values\n    \"\"\"\n    result = np.asarray(mask, dtype=bool)\n    # GH26658\n    if len(result) != len(array):\n        raise IndexError(f\"Item wrong length {len(result)} instead of {len(array)}.\")\n    return result",
        "begin_line": 247,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001818512456810329,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.printing.adjoin#25",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.adjoin(space: int, *lists: List[str], **kwargs)",
        "snippet": "def adjoin(space: int, *lists: List[str], **kwargs) -> str:\n    \"\"\"\n    Glues together two sets of strings using the amount of space requested.\n    The idea is to prettify.\n\n    ----------\n    space : int\n        number of spaces for padding\n    lists : str\n        list of str which being joined\n    strlen : callable\n        function used to calculate the length of each str. Needed for unicode\n        handling.\n    justfunc : callable\n        function used to justify str. Needed for unicode handling.\n    \"\"\"\n    strlen = kwargs.pop(\"strlen\", len)\n    justfunc = kwargs.pop(\"justfunc\", justify)\n\n    out_lines = []\n    newLists = []\n    lengths = [max(map(strlen, x)) + space for x in lists[:-1]]\n    # not the last one\n    lengths.append(max(map(len, lists[-1])))\n    maxLen = max(map(len, lists))\n    for i, lst in enumerate(lists):\n        nl = justfunc(lst, lengths[i], mode=\"left\")\n        nl.extend([\" \" * lengths[i]] * (maxLen - len(lst)))\n        newLists.append(nl)\n    toJoin = zip(*newLists)\n    for lines in toJoin:\n        out_lines.append(\"\".join(lines))\n    return \"\\n\".join(out_lines)",
        "begin_line": 25,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.printing.justify#60",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.justify(texts: Iterable[str], max_len: int, mode: str='right')",
        "snippet": "def justify(texts: Iterable[str], max_len: int, mode: str = \"right\") -> List[str]:\n    \"\"\"\n    Perform ljust, center, rjust against string or list-like\n    \"\"\"\n    if mode == \"left\":\n        return [x.ljust(max_len) for x in texts]\n    elif mode == \"center\":\n        return [x.center(max_len) for x in texts]\n    else:\n        return [x.rjust(max_len) for x in texts]",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.printing._pprint_seq#96",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._pprint_seq(seq: Sequence, _nest_lvl: int=0, max_seq_items: Optional[int]=None, **kwds)",
        "snippet": "def _pprint_seq(\n    seq: Sequence, _nest_lvl: int = 0, max_seq_items: Optional[int] = None, **kwds\n) -> str:\n    \"\"\"\n    internal. pprinter for iterables. you should probably use pprint_thing()\n    rather then calling this directly.\n\n    bounds length of printed sequence, depending on options\n    \"\"\"\n    if isinstance(seq, set):\n        fmt = \"{{{body}}}\"\n    else:\n        fmt = \"[{body}]\" if hasattr(seq, \"__setitem__\") else \"({body})\"\n\n    if max_seq_items is False:\n        nitems = len(seq)\n    else:\n        nitems = max_seq_items or get_option(\"max_seq_items\") or len(seq)\n\n    s = iter(seq)\n    # handle sets, no slicing\n    r = [\n        pprint_thing(next(s), _nest_lvl + 1, max_seq_items=max_seq_items, **kwds)\n        for i in range(min(nitems, len(seq)))\n    ]\n    body = \", \".join(r)\n\n    if nitems < len(seq):\n        body += \", ...\"\n    elif isinstance(seq, tuple) and len(seq) == 1:\n        body += \",\"\n\n    return fmt.format(body=body)",
        "begin_line": 96,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "pandas.io.formats.printing.pprint_thing#162",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.pprint_thing(thing: Any, _nest_lvl: int=0, escape_chars: Optional[EscapeChars]=None, default_escapes: bool=False, quote_strings: bool=False, max_seq_items: Optional[int]=None)",
        "snippet": "def pprint_thing(\n    thing: Any,\n    _nest_lvl: int = 0,\n    escape_chars: Optional[EscapeChars] = None,\n    default_escapes: bool = False,\n    quote_strings: bool = False,\n    max_seq_items: Optional[int] = None,\n) -> str:\n    \"\"\"\n    This function is the sanctioned way of converting objects\n    to a string representation and properly handles nested sequences.\n\n    Parameters\n    ----------\n    thing : anything to be formatted\n    _nest_lvl : internal use only. pprint_thing() is mutually-recursive\n        with pprint_sequence, this argument is used to keep track of the\n        current nesting level, and limit it.\n    escape_chars : list or dict, optional\n        Characters to escape. If a dict is passed the values are the\n        replacements\n    default_escapes : bool, default False\n        Whether the input escape characters replaces or adds to the defaults\n    max_seq_items : int or None, default None\n        Pass through to other pretty printers to limit sequence printing\n\n    Returns\n    -------\n    str\n    \"\"\"\n\n    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result\n\n    if hasattr(thing, \"__next__\"):\n        return str(thing)\n    elif isinstance(thing, dict) and _nest_lvl < get_option(\n        \"display.pprint_nest_depth\"\n    ):\n        result = _pprint_dict(\n            thing, _nest_lvl, quote_strings=True, max_seq_items=max_seq_items\n        )\n    elif is_sequence(thing) and _nest_lvl < get_option(\"display.pprint_nest_depth\"):\n        result = _pprint_seq(\n            thing,\n            _nest_lvl,\n            escape_chars=escape_chars,\n            quote_strings=quote_strings,\n            max_seq_items=max_seq_items,\n        )\n    elif isinstance(thing, str) and quote_strings:\n        result = \"'{thing}'\".format(thing=as_escaped_string(thing))\n    else:\n        result = as_escaped_string(thing)\n\n    return result",
        "begin_line": 162,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.08333333333333333,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.02040816326530612,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "pandas.io.formats.printing.as_escaped_string#193",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.as_escaped_string(thing: Any, escape_chars: Optional[EscapeChars]=escape_chars)",
        "snippet": "    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result",
        "begin_line": 193,
        "end_line": 209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.08333333333333333,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.034482758620689655,
            "pseudo_op2_susp": 0.3333333333333333,
            "pseudo_barinel_susp": 0.034482758620689655
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._constructor#396",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"DataFrame\"]:\n        return DataFrame",
        "begin_line": 396,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001362954886193267,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#410",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, (abc.Sequence, ExtensionArray)):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    f\"incompatible data and dtype: {e}\"\n                )\n                raise exc from e\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr, fastpath=True)",
        "begin_line": 410,
        "end_line": 507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.axes#512",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]",
        "begin_line": 512,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.shape#529",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, int]:\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)",
        "begin_line": 529,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015012760846719713,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._is_homogeneous_type#551",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._is_homogeneous_type(self)",
        "snippet": "    def _is_homogeneous_type(self) -> bool:\n        \"\"\"\n        Whether all the columns in a DataFrame have the same type.\n\n        Returns\n        -------\n        bool\n\n        See Also\n        --------\n        Index._is_homogeneous_type : Whether the object has a single\n            dtype.\n        MultiIndex._is_homogeneous_type : Whether all the levels of a\n            MultiIndex have the same dtype.\n\n        Examples\n        --------\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n        True\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n        False\n\n        Items with the same type but different sizes are considered\n        different types.\n\n        >>> DataFrame({\n        ...    \"A\": np.array([1, 2], dtype=np.int32),\n        ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n        False\n        \"\"\"\n        if self._data.any_extension_types:\n            return len({block.dtype for block in self._data.blocks}) == 1\n        else:\n            return not self._data.is_mixed_type",
        "begin_line": 551,
        "end_line": 584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001602307322544464,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.items#887",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.items(self)",
        "snippet": "    def items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n        if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)",
        "begin_line": 887,
        "end_line": 893,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1033",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1033,
        "end_line": 1037,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.transpose#2577",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.transpose(self, *args, copy: bool=False)",
        "snippet": "    def transpose(self, *args, copy: bool = False):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        *args : tuple, optional\n            Accepted for compatibility with NumPy.\n        copy : bool, default False\n            Whether to copy the data after transposing, even for DataFrames\n            with a single dtype.\n\n            Note that a copy is always required for mixed dtype DataFrames,\n            or for DataFrames with any extension types.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        # construct the args\n\n        dtypes = list(self.dtypes)\n        if self._is_homogeneous_type and dtypes and is_extension_array_dtype(dtypes[0]):\n            # We have EAs with the same dtype. We can preserve that dtype in transpose.\n            dtype = dtypes[0]\n            arr_type = dtype.construct_array_type()\n            values = self.values\n\n            new_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]\n            result = self._constructor(\n                dict(zip(self.index, new_values)), index=self.columns\n            )\n\n        else:\n            new_values = self.values.T\n            if copy:\n                new_values = new_values.copy()\n            result = self._constructor(\n                new_values, index=self.columns, columns=self.index\n            )\n\n        return result.__finalize__(self)",
        "begin_line": 2577,
        "end_line": 2697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001602307322544464,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ixs#2704",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        # irow\n        if axis == 0:\n            new_values = self._data.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_values, np.ndarray) and new_values.base is None\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[i],\n                dtype=new_values.dtype,\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            # if the values returned are not the same length\n            # as the index (iow a not found value), iget returns\n            # a 0-len ndarray. This is effectively catching\n            # a numpy error (as numpy should really raise)\n            values = self._data.iget(i)\n\n            if len(self.index) and not len(values):\n                values = np.array([np.nan] * len(self.index), dtype=object)\n            result = self._box_col_values(values, label)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n\n            return result",
        "begin_line": 2704,
        "end_line": 2747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002070822116380203,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2749",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self.take(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2749,
        "end_line": 2804,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_value#2867",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_value(self, index, col, takeable: bool=False)",
        "snippet": "    def _get_value(self, index, col, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        scalar\n        \"\"\"\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        try:\n            return engine.get_value(series._values, index)\n        except KeyError:\n            # GH 20629\n            if self.index.nlevels > 1:\n                # partial indexing forbidden\n                raise\n        except (TypeError, ValueError):\n            pass\n\n        # we cannot handle direct indexing\n        # use positional\n        col = self.columns.get_loc(col)\n        index = self.index.get_loc(index)\n        return self._get_value(index, col, takeable=True)",
        "begin_line": 2867,
        "end_line": 2902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002937720329024677,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2904",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2904,
        "end_line": 2920,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#2967",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 2967,
        "end_line": 2986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#3025",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError):\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a \"\n                    \"Series\"\n                )\n\n            self._data = self._data.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 3025,
        "end_line": 3043,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_item_values#3045",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_item_values(self, key, values)",
        "snippet": "    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)",
        "begin_line": 3045,
        "end_line": 3050,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00027948574622694243,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#3052",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, items)",
        "snippet": "    def _box_col_values(self, values, items):\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=items, fastpath=True)",
        "begin_line": 3052,
        "end_line": 3057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014394702749388226,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3549",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    )\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index, copy=False)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3549,
        "end_line": 3651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3569",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    )\n            return value",
        "begin_line": 3569,
        "end_line": 3589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.align#3790",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ):\n        return super().align(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n            broadcast_axis=broadcast_axis,\n        )",
        "begin_line": 3790,
        "end_line": 3814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001710278775440397,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindex#3829",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"labels\", None)\n        return super().reindex(**kwargs)",
        "begin_line": 3829,
        "end_line": 3835,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019413706076490002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.fillna#4101",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)",
        "snippet": "    def fillna(\n        self,\n        value=None,\n        method=None,\n        axis=None,\n        inplace=False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[\"DataFrame\"]:\n        return super().fillna(\n            value=value,\n            method=method,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            downcast=downcast,\n        )",
        "begin_line": 4101,
        "end_line": 4117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._combine_frame#5244",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._combine_frame(self, other, func, fill_value=None, level=None)",
        "snippet": "    def _combine_frame(self, other, func, fill_value=None, level=None):\n        # at this point we have `self._indexed_same(other)`\n\n        if fill_value is None:\n            # since _arith_op may be called in a loop, avoid function call\n            #  overhead if possible by doing this check once\n            _arith_op = func\n\n        else:\n\n            def _arith_op(left, right):\n                # for the mixed_type case where we iterate over columns,\n                # _arith_op(left, right) is equivalent to\n                # left._binop(right, func, fill_value=fill_value)\n                left, right = ops.fill_binop(left, right, fill_value)\n                return func(left, right)\n\n        if ops.should_series_dispatch(self, other, func):\n            # iterate over columns\n            new_data = ops.dispatch_to_series(self, other, _arith_op)\n        else:\n            with np.errstate(all=\"ignore\"):\n                res_values = _arith_op(self.values, other.values)\n            new_data = dispatch_fill_zeros(func, self.values, other.values, res_values)\n\n        return new_data",
        "begin_line": 5244,
        "end_line": 5269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._arith_op#5254",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._arith_op(left, right)",
        "snippet": "            def _arith_op(left, right):\n                # for the mixed_type case where we iterate over columns,\n                # _arith_op(left, right) is equivalent to\n                # left._binop(right, func, fill_value=fill_value)\n                left, right = ops.fill_binop(left, right, fill_value)\n                return func(left, right)",
        "begin_line": 5254,
        "end_line": 5259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._construct_result#5283",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._construct_result(self, result)",
        "snippet": "    def _construct_result(self, result) -> \"DataFrame\":\n        \"\"\"\n        Wrap the result of an arithmetic, comparison, or logical operation.\n\n        Parameters\n        ----------\n        result : DataFrame\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        out = self._constructor(result, index=self.index, copy=False)\n        # Pin columns instead of passing to constructor for compat with\n        #  non-unique columns case\n        out.columns = self.columns\n        return out",
        "begin_line": 5283,
        "end_line": 5299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014979029358897544,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.apply#6687",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
        "snippet": "    def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n\n        raw : bool, default False\n            Determines if row or column is passed as a Series or ndarray object:\n\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Returns\n        -------\n        Series or DataFrame\n            Result of applying ``func`` along the given axis of the\n            DataFrame.\n\n        See Also\n        --------\n        DataFrame.applymap: For elementwise operations.\n        DataFrame.aggregate: Only perform aggregating type operations.\n        DataFrame.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Returning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n        \"\"\"\n        from pandas.core.apply import frame_apply\n\n        op = frame_apply(\n            self,\n            func=func,\n            axis=axis,\n            raw=raw,\n            result_type=result_type,\n            args=args,\n            kwds=kwds,\n        )\n        return op.get_result()",
        "begin_line": 6687,
        "end_line": 6834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reduce#7804",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        if axis is None and filter_type == \"bool\":\n            labels = None\n            constructor = None\n        else:\n            # TODO: Make other agg func handle axis=None properly\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        def _get_data(axis_matters):\n            if filter_type is None or filter_type == \"numeric\":\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                if axis_matters:\n                    # GH#25101, GH#24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:\n                    data = self._get_bool_data()\n            else:  # pragma: no cover\n                msg = (\n                    f\"Generating numeric_only data with filter_type {filter_type} \"\n                    \"not supported.\"\n                )\n                raise NotImplementedError(msg)\n            return data\n\n        if numeric_only is not None and axis in [0, 1]:\n            df = self\n            if numeric_only is True:\n                df = _get_data(axis_matters=True)\n            if axis == 1:\n                df = df.T\n                axis = 0\n\n            out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n            # After possibly _get_data and transposing, we are now in the\n            #  simple case where we can use BlockManager._reduce\n            res = df._data.reduce(op, axis=1, skipna=skipna, **kwds)\n            assert isinstance(res, dict)\n            if len(res):\n                assert len(res) == max(list(res.keys())) + 1, res.keys()\n            out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n            out.index = df.columns\n            return out\n\n        if numeric_only is None:\n            values = self.values\n            try:\n                result = f(values)\n\n                if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                    # work around https://github.com/numpy/numpy/issues/10489\n                    # TODO: combine with hasattr(result, 'dtype') further down\n                    # hard since we don't have `values` down there.\n                    result = np.bool_(result)\n            except TypeError:\n                # e.g. in nanops trying to convert strs to float\n\n                # try by-column first\n                if filter_type is None and axis == 0:\n                    # this can end up with a non-reduction\n                    # but not always. if the types are mixed\n                    # with datelike then need to make sure a series\n\n                    # we only end up here if we have not specified\n                    # numeric_only and yet we have tried a\n                    # column-by-column reduction, where we have mixed type.\n                    # So let's just do what we can\n                    from pandas.core.apply import frame_apply\n\n                    opa = frame_apply(\n                        self, func=f, result_type=\"expand\", ignore_failures=True\n                    )\n                    result = opa.get_result()\n                    if result.ndim == self.ndim:\n                        result = result.iloc[0]\n                    return result\n\n                # TODO: why doesnt axis matter here?\n                data = _get_data(axis_matters=False)\n                with np.errstate(all=\"ignore\"):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                data = _get_data(axis_matters=True)\n\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n\n        if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == \"numeric\":\n                    result = result.astype(np.float64)\n                elif filter_type == \"bool\" and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n\n                # try to coerce to the original dtypes item by item if we can\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result",
        "begin_line": 7804,
        "end_line": 7918,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.f#7816",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.f(x)",
        "snippet": "        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)",
        "begin_line": 7816,
        "end_line": 7817,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_data#7819",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_data(axis_matters)",
        "snippet": "        def _get_data(axis_matters):\n            if filter_type is None or filter_type == \"numeric\":\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                if axis_matters:\n                    # GH#25101, GH#24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:\n                    data = self._get_bool_data()\n            else:  # pragma: no cover\n                msg = (\n                    f\"Generating numeric_only data with filter_type {filter_type} \"\n                    \"not supported.\"\n                )\n                raise NotImplementedError(msg)\n            return data",
        "begin_line": 7819,
        "end_line": 7834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_agg_axis#8036",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_agg_axis(self, axis_num)",
        "snippet": "    def _get_agg_axis(self, axis_num):\n        \"\"\"\n        Let's be explicit about this.\n        \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError(f\"Axis must be 0 or 1 (got {repr(axis_num)})\")",
        "begin_line": 8036,
        "end_line": 8045,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.api.union_indexes#149",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.union_indexes(indexes, sort=True)",
        "snippet": "def union_indexes(indexes, sort=True) -> Index:\n    \"\"\"\n    Return the union of indexes.\n\n    The behavior of sort and names is not consistent.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if len(indexes) == 0:\n        raise AssertionError(\"Must have at least 1 Index to union\")\n    if len(indexes) == 1:\n        result = indexes[0]\n        if isinstance(result, list):\n            result = Index(sorted(result))\n        return result\n\n    indexes, kind = _sanitize_and_check(indexes)\n\n    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))\n\n    if kind == \"special\":\n        result = indexes[0]\n\n        if hasattr(result, \"union_many\"):\n            # DatetimeIndex\n            return result.union_many(indexes[1:])\n        else:\n            for other in indexes[1:]:\n                result = result.union(other)\n            return result\n    elif kind == \"array\":\n        index = indexes[0]\n        for other in indexes[1:]:\n            if not index.equals(other):\n                return _unique_indices(indexes)\n\n        name = get_consensus_names(indexes)[0]\n        if name != index.name:\n            index = index._shallow_copy(name=name)\n        return index\n    else:  # kind='list'\n        return _unique_indices(indexes)",
        "begin_line": 149,
        "end_line": 218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.api._unique_indices#175",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._unique_indices(inds)",
        "snippet": "    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))",
        "begin_line": 175,
        "end_line": 195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.api._sanitize_and_check#221",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._sanitize_and_check(indexes)",
        "snippet": "def _sanitize_and_check(indexes):\n    \"\"\"\n    Verify the type of indexes and convert lists to Index.\n\n    Cases:\n\n    - [list, list, ...]: Return ([list, list, ...], 'list')\n    - [list, Index, ...]: Return _sanitize_and_check([Index, Index, ...])\n        Lists are sorted and converted to Index.\n    - [Index, Index, ...]: Return ([Index, Index, ...], TYPE)\n        TYPE = 'special' if at least one special type, 'array' otherwise.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n\n    Returns\n    -------\n    sanitized_indexes : list of Index or list objects\n    type : {'list', 'array', 'special'}\n    \"\"\"\n    kinds = list({type(index) for index in indexes})\n\n    if list in kinds:\n        if len(kinds) > 1:\n            indexes = [\n                Index(com.try_sort(x)) if not isinstance(x, Index) else x\n                for x in indexes\n            ]\n            kinds.remove(list)\n        else:\n            return indexes, \"list\"\n\n    if len(kinds) > 1 or Index not in kinds:\n        return indexes, \"special\"\n    else:\n        return indexes, \"array\"",
        "begin_line": 221,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.api.get_consensus_names#260",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.get_consensus_names(indexes)",
        "snippet": "def get_consensus_names(indexes):\n    \"\"\"\n    Give a consensus 'names' to indexes.\n\n    If there's exactly one non-empty 'names', return this,\n    otherwise, return empty.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    list\n        A list representing the consensus 'names' found.\n    \"\"\"\n    # find the non-none names, need to tupleify to make\n    # the set hashable, then reverse on return\n    consensus_names = {tuple(i.names) for i in indexes if com.any_not_none(*i.names)}\n    if len(consensus_names) == 1:\n        return list(list(consensus_names)[0])\n    return [None] * indexes[0].nlevels",
        "begin_line": 260,
        "end_line": 281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#181",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            name = ibase.maybe_extract_name(name, data, type(self))\n\n            if is_empty_data(data) and dtype is None:\n                # gh-17261\n                warnings.warn(\n                    \"The default dtype for empty Series will be 'object' instead \"\n                    \"of 'float64' in a future version. Specify a dtype explicitly \"\n                    \"to silence this warning.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                # uncomment the line below when removing the DeprecationWarning\n                # dtype = np.dtype(object)\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # need to copy to avoid aliasing issues\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                        # GH#24096 need copy to be deep for datetime64tz case\n                        # TODO: See if we can avoid these copies\n                        data = data._values.copy(deep=True)\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                if len(data.dtype):\n                    # GH#13296 we are dealing with a compound dtype, which\n                    #  should be treated as 2D\n                    raise ValueError(\n                        \"Cannot construct a Series from an ndarray with \"\n                        \"compound dtype.  Use DataFrame instead.\"\n                    )\n                pass\n            elif isinstance(data, ABCSeries):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif is_dict_like(data):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument. `copy` must be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n            elif isinstance(data, ABCSparseArray):\n                # handle sparse passed here (and force conversion)\n                data = data.to_dense()\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            f\"Length of passed values is {len(data)}, \"\n                            f\"index implies {len(index)}.\"\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager(data, index, fastpath=True)\n\n        generic.NDFrame.__init__(self, data, fastpath=True)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 181,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#311",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n\n        # TODO: passing np.float64 to not break anything yet. See GH-17261\n        s = create_series_with_explicit_dtype(\n            values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n        )\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._data, s.index",
        "begin_line": 311,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#358",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self):\n        return Series",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013025921583952066,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._constructor_expanddim#362",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor_expanddim(self)",
        "snippet": "    def _constructor_expanddim(self):\n        from pandas.core.frame import DataFrame\n\n        return DataFrame",
        "begin_line": 362,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001380452788514633,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#374",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis, labels, fastpath=False)",
        "snippet": "    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\"\n        Override generic, we want to set the _typ here.\n        \"\"\"\n\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        self._set_subtyp(is_all_dates)\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)",
        "begin_line": 374,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._set_subtyp#401",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_subtyp(self, is_all_dates)",
        "snippet": "    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, \"_subtyp\", \"time_series\")\n        else:\n            object.__setattr__(self, \"_subtyp\", \"series\")",
        "begin_line": 401,
        "end_line": 405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034423407917383823,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._update_inplace#407",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._update_inplace(self, result, **kwargs)",
        "snippet": "    def _update_inplace(self, result, **kwargs):\n        # we want to call the generic version and not the IndexOpsMixin\n        return generic.NDFrame._update_inplace(self, result, **kwargs)",
        "begin_line": 407,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019413706076490002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#413",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 413,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012410027302060066,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.name#427",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Optional[Hashable]:\n        return self.attrs.get(\"name\", None)",
        "begin_line": 427,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011971746677840296,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.name#431",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Optional[Hashable])",
        "snippet": "    def name(self, value: Optional[Hashable]) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        self.attrs[\"name\"] = value",
        "begin_line": 431,
        "end_line": 434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.values#437",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like depending on the dtype.\n\n        .. warning::\n\n           We recommend using :attr:`Series.array` or\n           :meth:`Series.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n\n        See Also\n        --------\n        Series.array : Reference to the underlying data.\n        Series.to_numpy : A NumPy array representing the underlying data.\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n        \"\"\"\n        return self._data.external_values()",
        "begin_line": 437,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002281021897810219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._values#479",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data.\n        \"\"\"\n        return self._data.internal_values()",
        "begin_line": 479,
        "end_line": 483,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._internal_get_values#485",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        \"\"\"\n        Same as values (but handles sparseness conversions); is a view.\n\n        Returns\n        -------\n        numpy.ndarray\n            Data of the Series.\n        \"\"\"\n\n        return self._data.get_values()",
        "begin_line": 485,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013296104241457252,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#513",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 513,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012623074981065388,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__array_ufunc__#593",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any)",
        "snippet": "    def __array_ufunc__(\n        self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any\n    ):\n        # TODO: handle DataFrame\n        cls = type(self)\n\n        # for binary ops, use our custom dunder methods\n        result = ops.maybe_dispatch_ufunc_to_dunder_op(\n            self, ufunc, method, *inputs, **kwargs\n        )\n        if result is not NotImplemented:\n            return result\n\n        # Determine if we should defer.\n        no_defer = (np.ndarray.__array_ufunc__, cls.__array_ufunc__)\n\n        for item in inputs:\n            higher_priority = (\n                hasattr(item, \"__array_priority__\")\n                and item.__array_priority__ > self.__array_priority__\n            )\n            has_array_ufunc = (\n                hasattr(item, \"__array_ufunc__\")\n                and type(item).__array_ufunc__ not in no_defer\n                and not isinstance(item, self._HANDLED_TYPES)\n            )\n            if higher_priority or has_array_ufunc:\n                return NotImplemented\n\n        # align all the inputs.\n        names = [getattr(x, \"name\") for x in inputs if hasattr(x, \"name\")]\n        types = tuple(type(x) for x in inputs)\n        # TODO: dataframe\n        alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n\n        if len(alignable) > 1:\n            # This triggers alignment.\n            # At the moment, there aren't any ufuncs with more than two inputs\n            # so this ends up just being x1.index | x2.index, but we write\n            # it to handle *args.\n            index = alignable[0].index\n            for s in alignable[1:]:\n                index |= s.index\n            inputs = tuple(\n                x.reindex(index) if issubclass(t, Series) else x\n                for x, t in zip(inputs, types)\n            )\n        else:\n            index = self.index\n\n        inputs = tuple(extract_array(x, extract_numpy=True) for x in inputs)\n        result = getattr(ufunc, method)(*inputs, **kwargs)\n\n        name: Optional[Hashable]\n        if len(set(names)) == 1:\n            name = names[0]\n        else:\n            name = None\n\n        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    # GH#27198\n                    raise NotImplementedError\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)\n\n        if type(result) is tuple:\n            # multiple return values\n            return tuple(construct_return(x) for x in result)\n        elif method == \"at\":\n            # no return value\n            return None\n        else:\n            return construct_return(result)",
        "begin_line": 593,
        "end_line": 670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.construct_return#652",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.construct_return(result)",
        "snippet": "        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    # GH#27198\n                    raise NotImplementedError\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)",
        "begin_line": 652,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#672",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarary`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discarded with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 672,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001427959445951735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.axes#762",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.axes(self)",
        "snippet": "    def axes(self):\n        \"\"\"\n        Return a list of the row axis labels.\n        \"\"\"\n        return [self.index]",
        "begin_line": 762,
        "end_line": 766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021249468763280918,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._ixs#798",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n\n        # dispatch to the values if we need\n        values = self._values\n        if isinstance(values, np.ndarray):\n            return libindex.get_value_at(values, i)\n        else:\n            return values[i]",
        "begin_line": 798,
        "end_line": 816,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002621231979030144,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._slice#818",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._slice(self, slobj: slice, axis: int=0, kind=None)",
        "snippet": "    def _slice(self, slobj: slice, axis: int = 0, kind=None):\n        slobj = self.index._convert_slice_indexer(slobj, kind=kind or \"getitem\")\n        return self._get_values(slobj)",
        "begin_line": 818,
        "end_line": 820,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#822",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n\n                    # we need to box if loc of the key isn't scalar here\n                    # otherwise have inline ndarray/lists\n                    try:\n                        if not is_scalar(self.index.get_loc(key)):\n                            result = self._constructor(\n                                result, index=[key] * len(result), dtype=self.dtype\n                            ).__finalize__(self)\n                    except KeyError:\n                        pass\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            elif key is Ellipsis:\n                return self\n            elif com.is_bool_indexer(key):\n                pass\n            else:\n\n                # we can try to coerce the indexer (or this will raise)\n                new_key = self.index._convert_scalar_indexer(key, kind=\"getitem\")\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n\n        return self._get_with(key)",
        "begin_line": 822,
        "end_line": 864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._get_with#866",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_with(self, key)",
        "snippet": "    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            return self._slice(key)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n        elif isinstance(key, tuple):\n            try:\n                return self._get_values_tuple(key)\n            except ValueError:\n                # if we don't have a MultiIndex, we may still be able to handle\n                #  a 1-tuple.  see test_1tuple_without_multiindex\n                if len(key) == 1:\n                    key = key[0]\n                    if isinstance(key, slice):\n                        return self._get_values(key)\n                raise\n\n        if not isinstance(key, (list, np.ndarray, Series, Index)):\n            key = list(key)\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        if key_type == \"integer\":\n            if self.index.is_integer() or self.index.is_floating():\n                return self.loc[key]\n            else:\n                return self._get_values(key)\n        elif key_type == \"boolean\":\n            return self._get_values(key)\n\n        if isinstance(key, (list, tuple)):\n            # TODO: de-dup with tuple case handled above?\n            # handle the dup indexing case GH#4246\n            if len(key) == 1 and isinstance(key[0], slice):\n                # [slice(0, 5, None)] will break if you convert to ndarray,\n                # e.g. as requested by np.median\n                # FIXME: hack\n                return self._get_values(key)\n\n            return self.loc[key]\n\n        return self.reindex(key)",
        "begin_line": 866,
        "end_line": 914,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#930",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(\n                self._data.get_slice(indexer), fastpath=True\n            ).__finalize__(self)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 930,
        "end_line": 938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__setitem__#957",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n        try:\n            self._set_with_engine(key, value)\n        except com.SettingWithCopyError:\n            raise\n        except (KeyError, ValueError):\n            values = self._values\n            if is_integer(key) and not self.index.inferred_type == \"integer\":\n                values[key] = value\n            elif key is Ellipsis:\n                self[:] = value\n            else:\n                self.loc[key] = value\n\n        except TypeError as e:\n            if isinstance(key, tuple) and not isinstance(self.index, MultiIndex):\n                raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n            # python 3 type errors should be raised\n            if _is_unorderable_exception(e):\n                raise IndexError(key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                try:\n                    self._where(~key, value, inplace=True)\n                    return\n                except InvalidIndexError:\n                    pass\n\n            self._set_with(key, value)\n\n        if cacher_needs_updating:\n            self._maybe_update_cacher()",
        "begin_line": 957,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002516356316054353,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._set_with_engine#995",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with_engine(self, key, value)",
        "snippet": "    def _set_with_engine(self, key, value):\n        values = self._values\n        if is_extension_array_dtype(values.dtype):\n            # The cython indexing engine does not support ExtensionArrays.\n            values[self.index.get_loc(key)] = value\n            return\n        try:\n            self.index._engine.set_value(values, key, value)\n            return\n        except KeyError:\n            values[self.index.get_loc(key)] = value\n            return",
        "begin_line": 995,
        "end_line": 1006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002516356316054353,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._is_mixed_type#1099",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        return False",
        "begin_line": 1099,
        "end_line": 1100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000211954217888936,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.__repr__#1296",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        \"\"\"\n        Return a string representation for a particular Series.\n        \"\"\"\n        buf = StringIO(\"\")\n        width, height = get_terminal_size()\n        max_rows = (\n            height\n            if get_option(\"display.max_rows\") == 0\n            else get_option(\"display.max_rows\")\n        )\n        min_rows = (\n            height\n            if get_option(\"display.max_rows\") == 0\n            else get_option(\"display.min_rows\")\n        )\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        self.to_string(\n            buf=buf,\n            name=self.name,\n            dtype=self.dtype,\n            min_rows=min_rows,\n            max_rows=max_rows,\n            length=show_dimensions,\n        )\n        result = buf.getvalue()\n\n        return result",
        "begin_line": 1296,
        "end_line": 1324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.to_string#1326",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_string(self, buf=None, na_rep='NaN', float_format=None, header=True, index=True, length=False, dtype=False, name=False, max_rows=None, min_rows=None)",
        "snippet": "    def to_string(\n        self,\n        buf=None,\n        na_rep=\"NaN\",\n        float_format=None,\n        header=True,\n        index=True,\n        length=False,\n        dtype=False,\n        name=False,\n        max_rows=None,\n        min_rows=None,\n    ):\n        \"\"\"\n        Render a string representation of the Series.\n\n        Parameters\n        ----------\n        buf : StringIO-like, optional\n            Buffer to write to.\n        na_rep : str, optional\n            String representation of NaN to use, default 'NaN'.\n        float_format : one-parameter function, optional\n            Formatter function to apply to columns' elements if they are\n            floats, default None.\n        header : bool, default True\n            Add the Series header (index name).\n        index : bool, optional\n            Add index (row) labels, default True.\n        length : bool, default False\n            Add the Series length.\n        dtype : bool, default False\n            Add the Series dtype.\n        name : bool, default False\n            Add the Series name if not None.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n        min_rows : int, optional\n            The number of rows to display in a truncated repr (when number\n            of rows is above `max_rows`).\n\n        Returns\n        -------\n        str or None\n            String representation of Series if ``buf=None``, otherwise None.\n        \"\"\"\n\n        formatter = fmt.SeriesFormatter(\n            self,\n            name=name,\n            length=length,\n            header=header,\n            index=index,\n            dtype=dtype,\n            na_rep=na_rep,\n            float_format=float_format,\n            min_rows=min_rows,\n            max_rows=max_rows,\n        )\n        result = formatter.to_string()\n\n        # catch contract violations\n        if not isinstance(result, str):\n            raise AssertionError(\n                \"result must be of type str, type\"\n                f\" of result is {repr(type(result).__name__)}\"\n            )\n\n        if buf is None:\n            return result\n        else:\n            try:\n                buf.write(result)\n            except AttributeError:\n                with open(buf, \"w\") as f:\n                    f.write(result)",
        "begin_line": 1326,
        "end_line": 1402,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.items#1427",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.items(self)",
        "snippet": "    def items(self):\n        \"\"\"\n        Lazily iterate over (index, value) tuples.\n\n        This method returns an iterable tuple (index, value). This is\n        convenient if you want to create a lazy iterator.\n\n        Returns\n        -------\n        iterable\n            Iterable of tuples containing the (index, value) pairs from a\n            Series.\n\n        See Also\n        --------\n        DataFrame.items : Iterate over (column name, Series) pairs.\n        DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n\n        Examples\n        --------\n        >>> s = pd.Series(['A', 'B', 'C'])\n        >>> for index, value in s.items():\n        ...     print(f\"Index : {index}, Value : {value}\")\n        Index : 0, Value : A\n        Index : 1, Value : B\n        Index : 2, Value : C\n        \"\"\"\n        return zip(iter(self.index), iter(self))",
        "begin_line": 1427,
        "end_line": 1454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.to_frame#1509",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_frame(self, name=None)",
        "snippet": "    def to_frame(self, name=None):\n        \"\"\"\n        Convert Series to DataFrame.\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([\"a\", \"b\", \"c\"],\n        ...               name=\"vals\")\n        >>> s.to_frame()\n          vals\n        0    a\n        1    b\n        2    c\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n\n        return df",
        "begin_line": 1509,
        "end_line": 1539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001380452788514633,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._set_name#1541",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_name(self, name, inplace=False)",
        "snippet": "    def _set_name(self, name, inplace=False):\n        \"\"\"\n        Set the Series name.\n\n        Parameters\n        ----------\n        name : str\n        inplace : bool\n            Whether to modify `self` directly or return a copy.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        ser = self if inplace else self.copy()\n        ser.name = name\n        return ser",
        "begin_line": 1541,
        "end_line": 1554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._binop#2529",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._binop(self, other, func, level=None, fill_value=None)",
        "snippet": "    def _binop(self, other, func, level=None, fill_value=None):\n        \"\"\"\n        Perform generic binary operation with optional fill value.\n\n        Parameters\n        ----------\n        other : Series\n        func : binary operator\n        fill_value : float or object\n            Value to substitute for NA/null values. If both Series are NA in a\n            location, the result will be NA regardless of the passed fill value.\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n\n        Returns\n        -------\n        Series\n        \"\"\"\n\n        if not isinstance(other, Series):\n            raise AssertionError(\"Other operand must be Series\")\n\n        new_index = self.index\n        this = self\n\n        if not self.index.equals(other.index):\n            this, other = self.align(other, level=level, join=\"outer\", copy=False)\n            new_index = this.index\n\n        this_vals, other_vals = ops.fill_binop(this.values, other.values, fill_value)\n\n        with np.errstate(all=\"ignore\"):\n            result = func(this_vals, other_vals)\n\n        name = ops.get_op_result_name(self, other)\n        ret = ops._construct_result(self, result, new_index, name)\n        return ret",
        "begin_line": 2529,
        "end_line": 2566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.combine#2568",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.combine(self, other, func, fill_value=None)",
        "snippet": "    def combine(self, other, func, fill_value=None):\n        \"\"\"\n        Combine the Series with a Series or scalar according to `func`.\n\n        Combine the Series and `other` using `func` to perform elementwise\n        selection for combined Series.\n        `fill_value` is assumed when value is missing at some index\n        from one of the two objects being combined.\n\n        Parameters\n        ----------\n        other : Series or scalar\n            The value(s) to be combined with the `Series`.\n        func : function\n            Function that takes two scalars as inputs and returns an element.\n        fill_value : scalar, optional\n            The value to assume when an index is missing from\n            one Series or the other. The default specifies to use the\n            appropriate NaN value for the underlying dtype of the Series.\n\n        Returns\n        -------\n        Series\n            The result of combining the Series with the other object.\n\n        See Also\n        --------\n        Series.combine_first : Combine Series values, choosing the calling\n            Series' values first.\n\n        Examples\n        --------\n        Consider 2 Datasets ``s1`` and ``s2`` containing\n        highest clocked speeds of different birds.\n\n        >>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n        >>> s1\n        falcon    330.0\n        eagle     160.0\n        dtype: float64\n        >>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n        >>> s2\n        falcon    345.0\n        eagle     200.0\n        duck       30.0\n        dtype: float64\n\n        Now, to combine the two datasets and view the highest speeds\n        of the birds across the two datasets\n\n        >>> s1.combine(s2, max)\n        duck        NaN\n        eagle     200.0\n        falcon    345.0\n        dtype: float64\n\n        In the previous example, the resulting value for duck is missing,\n        because the maximum of a NaN and a float is a NaN.\n        So, in the example, we set ``fill_value=0``,\n        so the maximum value returned will be the value from some dataset.\n\n        >>> s1.combine(s2, max, fill_value=0)\n        duck       30.0\n        eagle     200.0\n        falcon    345.0\n        dtype: float64\n        \"\"\"\n        if fill_value is None:\n            fill_value = na_value_for_dtype(self.dtype, compat=False)\n\n        if isinstance(other, Series):\n            # If other is a Series, result is based on union of Series,\n            # so do this element by element\n            new_index = self.index.union(other.index)\n            new_name = ops.get_op_result_name(self, other)\n            new_values = []\n            for idx in new_index:\n                lv = self.get(idx, fill_value)\n                rv = other.get(idx, fill_value)\n                with np.errstate(all=\"ignore\"):\n                    new_values.append(func(lv, rv))\n        else:\n            # Assume that other is a scalar, so apply the function for\n            # each element in the Series\n            new_index = self.index\n            with np.errstate(all=\"ignore\"):\n                new_values = [func(lv, other) for lv in self._values]\n            new_name = self.name\n\n        if is_categorical_dtype(self.values):\n            pass\n        elif is_extension_array_dtype(self.values):\n            # The function can return something of any type, so check\n            # if the type is compatible with the calling EA.\n            new_values = try_cast_to_ea(self._values, new_values)\n        return self._constructor(new_values, index=new_index, name=new_name)",
        "begin_line": 2568,
        "end_line": 2663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.map#3499",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.map(self, arg, na_action=None)",
        "snippet": "    def map(self, arg, na_action=None):\n        \"\"\"\n        Map values of Series according to input correspondence.\n\n        Used for substituting each value in a Series with another value,\n        that may be derived from a function, a ``dict`` or\n        a :class:`Series`.\n\n        Parameters\n        ----------\n        arg : function, collections.abc.Mapping subclass or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}, default None\n            If 'ignore', propagate NaN values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        Series\n            Same index as caller.\n\n        See Also\n        --------\n        Series.apply : For applying more complex functions on a Series.\n        DataFrame.apply : Apply a function row-/column-wise.\n        DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\n        Notes\n        -----\n        When ``arg`` is a dictionary, values in Series that are not in the\n        dictionary (as keys) are converted to ``NaN``. However, if the\n        dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n        provides a method for default values), then this default is used\n        rather than ``NaN``.\n\n        Examples\n        --------\n        >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n        >>> s\n        0      cat\n        1      dog\n        2      NaN\n        3   rabbit\n        dtype: object\n\n        ``map`` accepts a ``dict`` or a ``Series``. Values that are not found\n        in the ``dict`` are converted to ``NaN``, unless the dict has a default\n        value (e.g. ``defaultdict``):\n\n        >>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n        0   kitten\n        1    puppy\n        2      NaN\n        3      NaN\n        dtype: object\n\n        It also accepts a function:\n\n        >>> s.map('I am a {}'.format)\n        0       I am a cat\n        1       I am a dog\n        2       I am a nan\n        3    I am a rabbit\n        dtype: object\n\n        To avoid applying the function to missing values (and keep them as\n        ``NaN``) ``na_action='ignore'`` can be used:\n\n        >>> s.map('I am a {}'.format, na_action='ignore')\n        0     I am a cat\n        1     I am a dog\n        2            NaN\n        3  I am a rabbit\n        dtype: object\n        \"\"\"\n        new_values = super()._map_values(arg, na_action=na_action)\n        return self._constructor(new_values, index=self.index).__finalize__(self)",
        "begin_line": 3499,
        "end_line": 3575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.apply#3663",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.apply(self, func, convert_dtype=True, args=(), **kwds)",
        "snippet": "    def apply(self, func, convert_dtype=True, args=(), **kwds):\n        \"\"\"\n        Invoke function on values of Series.\n\n        Can be ufunc (a NumPy function that applies to the entire Series)\n        or a Python function that only works on single values.\n\n        Parameters\n        ----------\n        func : function\n            Python function or NumPy ufunc to apply.\n        convert_dtype : bool, default True\n            Try to find better dtype for elementwise function results. If\n            False, leave as dtype=object.\n        args : tuple\n            Positional arguments passed to func after the series value.\n        **kwds\n            Additional keyword arguments passed to func.\n\n        Returns\n        -------\n        Series or DataFrame\n            If func returns a Series object the result will be a DataFrame.\n\n        See Also\n        --------\n        Series.map: For element-wise operations.\n        Series.agg: Only perform aggregating type operations.\n        Series.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n        Create a series with typical summer temperatures for each city.\n\n        >>> s = pd.Series([20, 21, 12],\n        ...               index=['London', 'New York', 'Helsinki'])\n        >>> s\n        London      20\n        New York    21\n        Helsinki    12\n        dtype: int64\n\n        Square the values by defining a function and passing it as an\n        argument to ``apply()``.\n\n        >>> def square(x):\n        ...     return x ** 2\n        >>> s.apply(square)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Square the values by passing an anonymous function as an\n        argument to ``apply()``.\n\n        >>> s.apply(lambda x: x ** 2)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Define a custom function that needs additional positional\n        arguments and pass these additional arguments using the\n        ``args`` keyword.\n\n        >>> def subtract_custom_value(x, custom_value):\n        ...     return x - custom_value\n\n        >>> s.apply(subtract_custom_value, args=(5,))\n        London      15\n        New York    16\n        Helsinki     7\n        dtype: int64\n\n        Define a custom function that takes keyword arguments\n        and pass these arguments to ``apply``.\n\n        >>> def add_custom_values(x, **kwargs):\n        ...     for month in kwargs:\n        ...         x += kwargs[month]\n        ...     return x\n\n        >>> s.apply(add_custom_values, june=30, july=20, august=25)\n        London      95\n        New York    96\n        Helsinki    87\n        dtype: int64\n\n        Use a function from the Numpy library.\n\n        >>> s.apply(np.log)\n        London      2.995732\n        New York    3.044522\n        Helsinki    2.484907\n        dtype: float64\n        \"\"\"\n        if len(self) == 0:\n            return self._constructor(dtype=self.dtype, index=self.index).__finalize__(\n                self\n            )\n\n        # dispatch to agg\n        if isinstance(func, (list, dict)):\n            return self.aggregate(func, *args, **kwds)\n\n        # if we are a string, try to dispatch\n        if isinstance(func, str):\n            return self._try_aggregate_string_function(func, *args, **kwds)\n\n        # handle ufuncs and lambdas\n        if kwds or args and not isinstance(func, np.ufunc):\n\n            def f(x):\n                return func(x, *args, **kwds)\n\n        else:\n            f = func\n\n        with np.errstate(all=\"ignore\"):\n            if isinstance(f, np.ufunc):\n                return f(self)\n\n            # row-wise access\n            if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n                # GH#23179 some EAs do not have `map`\n                mapped = self._values.map(f)\n            else:\n                values = self.astype(object).values\n                mapped = lib.map_infer(values, f, convert=convert_dtype)\n\n        if len(mapped) and isinstance(mapped[0], Series):\n            # GH 25959 use pd.array instead of tolist\n            # so extension arrays can be used\n            return self._constructor_expanddim(pd.array(mapped), index=self.index)\n        else:\n            return self._constructor(mapped, index=self.index).__finalize__(self)",
        "begin_line": 3663,
        "end_line": 3799,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._reduce#3801",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n        delegate = self._values\n\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(delegate, Categorical):\n            return delegate._reduce(name, skipna=skipna, **kwds)\n        elif isinstance(delegate, ExtensionArray):\n            # dispatch to ExtensionArray interface\n            return delegate._reduce(name, skipna=skipna, **kwds)\n        elif is_datetime64_dtype(delegate):\n            # use DatetimeIndex implementation to handle skipna correctly\n            delegate = DatetimeIndex(delegate)\n        elif is_timedelta64_dtype(delegate) and hasattr(TimedeltaIndex, name):\n            # use TimedeltaIndex to handle skipna correctly\n            # TODO: remove hasattr check after TimedeltaIndex has `std` method\n            delegate = TimedeltaIndex(delegate)\n\n        # dispatch to numpy arrays\n        elif isinstance(delegate, np.ndarray):\n            if numeric_only:\n                raise NotImplementedError(\n                    f\"Series.{name} does not implement numeric_only.\"\n                )\n            with np.errstate(all=\"ignore\"):\n                return op(delegate, skipna=skipna, **kwds)\n\n        # TODO(EA) dispatch to Index\n        # remove once all internals extension types are\n        # moved to ExtensionArrays\n        return delegate._reduce(\n            op=op,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            filter_type=filter_type,\n            **kwds,\n        )",
        "begin_line": 3801,
        "end_line": 3848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._reindex_indexer#3850",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reindex_indexer(self, new_index, indexer, copy)",
        "snippet": "    def _reindex_indexer(self, new_index, indexer, copy):\n        if indexer is None:\n            if copy:\n                return self.copy()\n            return self\n\n        new_values = algorithms.take_1d(\n            self._values, indexer, allow_fill=True, fill_value=None\n        )\n        return self._constructor(new_values, index=new_index)",
        "begin_line": 3850,
        "end_line": 3859,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series._needs_reindex_multi#3861",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"\n        Check if we do need a multi reindex; this is for compat with\n        higher dims.\n        \"\"\"\n        return False",
        "begin_line": 3861,
        "end_line": 3866,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.align#3869",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ):\n        return super().align(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n            broadcast_axis=broadcast_axis,\n        )",
        "begin_line": 3869,
        "end_line": 3893,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.rename#3895",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.rename(self, index=None, **kwargs)",
        "snippet": "    def rename(self, index=None, **kwargs):\n        \"\"\"\n        Alter Series index labels or name.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        Alternatively, change ``Series.name`` with a scalar value.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        index : scalar, hashable sequence, dict-like or function, optional\n            Functions or dict-like are transformations to apply to\n            the index.\n            Scalar or hashable sequence-like will alter the ``Series.name``\n            attribute.\n\n        **kwargs\n            Additional keyword arguments passed to the function. Only the\n            \"inplace\" keyword is used.\n\n        Returns\n        -------\n        Series\n            Series with index labels or name altered.\n\n        See Also\n        --------\n        Series.rename_axis : Set the name of the axis.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\")  # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n        \"\"\"\n        kwargs[\"inplace\"] = validate_bool_kwarg(kwargs.get(\"inplace\", False), \"inplace\")\n\n        if callable(index) or is_dict_like(index):\n            return super().rename(index=index, **kwargs)\n        else:\n            return self._set_name(index, inplace=kwargs.get(\"inplace\"))",
        "begin_line": 3895,
        "end_line": 3957,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.reindex#3961",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reindex(self, index=None, **kwargs)",
        "snippet": "    def reindex(self, index=None, **kwargs):\n        return super().reindex(index=index, **kwargs)",
        "begin_line": 3961,
        "end_line": 3962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018453589223103894,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.shift#4114",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.shift(self, periods=1, freq=None, axis=0, fill_value=None)",
        "snippet": "    def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        return super().shift(\n            periods=periods, freq=freq, axis=axis, fill_value=fill_value\n        )",
        "begin_line": 4114,
        "end_line": 4117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.series.Series.isna#4305",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isna(self)",
        "snippet": "    def isna(self):\n        return super().isna()",
        "begin_line": 4305,
        "end_line": 4306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.frame_apply#26",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply",
        "signature": "pandas.core.apply.frame_apply(obj: 'DataFrame', func, axis=0, raw: bool=False, result_type=None, ignore_failures: bool=False, args=None, kwds=None)",
        "snippet": "def frame_apply(\n    obj: \"DataFrame\",\n    func,\n    axis=0,\n    raw: bool = False,\n    result_type=None,\n    ignore_failures: bool = False,\n    args=None,\n    kwds=None,\n):\n    \"\"\" construct and return a row or column based frame apply object \"\"\"\n\n    axis = obj._get_axis_number(axis)\n    klass: Type[FrameApply]\n    if axis == 0:\n        klass = FrameRowApply\n    elif axis == 1:\n        klass = FrameColumnApply\n\n    return klass(\n        obj,\n        func,\n        raw=raw,\n        result_type=result_type,\n        ignore_failures=ignore_failures,\n        args=args,\n        kwds=kwds,\n    )",
        "begin_line": 26,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.result_index#64",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        pass",
        "begin_line": 64,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.result_columns#69",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        pass",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.series_generator#74",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.series_generator(self)",
        "snippet": "    def series_generator(self) -> Iterator[\"Series\"]:\n        pass",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.wrap_results_for_axis#78",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        pass",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.__init__#85",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.__init__(self, obj: 'DataFrame', func, raw: bool, result_type, ignore_failures: bool, args, kwds)",
        "snippet": "    def __init__(\n        self,\n        obj: \"DataFrame\",\n        func,\n        raw: bool,\n        result_type,\n        ignore_failures: bool,\n        args,\n        kwds,\n    ):\n        self.obj = obj\n        self.raw = raw\n        self.ignore_failures = ignore_failures\n        self.args = args or ()\n        self.kwds = kwds or {}\n\n        if result_type not in [None, \"reduce\", \"broadcast\", \"expand\"]:\n            raise ValueError(\n                \"invalid value for result_type, must be one \"\n                \"of {None, 'reduce', 'broadcast', 'expand'}\"\n            )\n\n        self.result_type = result_type\n\n        # curry if needed\n        if (kwds or args) and not isinstance(func, (np.ufunc, str)):\n\n            def f(x):\n                return func(x, *args, **kwds)\n\n        else:\n            f = func\n\n        self.f = f",
        "begin_line": 85,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.res_columns#121",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.res_columns(self)",
        "snippet": "    def res_columns(self) -> \"Index\":\n        return self.result_columns",
        "begin_line": 121,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.columns#125",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.columns(self)",
        "snippet": "    def columns(self) -> \"Index\":\n        return self.obj.columns",
        "begin_line": 125,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.index#129",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.index(self)",
        "snippet": "    def index(self) -> \"Index\":\n        return self.obj.index",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.values#133",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.values(self)",
        "snippet": "    def values(self):\n        return self.obj.values",
        "begin_line": 133,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.dtypes#137",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.dtypes(self)",
        "snippet": "    def dtypes(self) -> \"Series\":\n        return self.obj.dtypes",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.agg_axis#141",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.agg_axis(self)",
        "snippet": "    def agg_axis(self) -> \"Index\":\n        return self.obj._get_agg_axis(self.axis)",
        "begin_line": 141,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.get_result#144",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.get_result(self)",
        "snippet": "    def get_result(self):\n        \"\"\" compute the results \"\"\"\n\n        # dispatch to agg\n        if is_list_like(self.f) or is_dict_like(self.f):\n            return self.obj.aggregate(self.f, axis=self.axis, *self.args, **self.kwds)\n\n        # all empty\n        if len(self.columns) == 0 and len(self.index) == 0:\n            return self.apply_empty_result()\n\n        # string dispatch\n        if isinstance(self.f, str):\n            # Support for `frame.transform('method')`\n            # Some methods (shift, etc.) require the axis argument, others\n            # don't, so inspect and insert if necessary.\n            func = getattr(self.obj, self.f)\n            sig = inspect.getfullargspec(func)\n            if \"axis\" in sig.args:\n                self.kwds[\"axis\"] = self.axis\n            return func(*self.args, **self.kwds)\n\n        # ufunc\n        elif isinstance(self.f, np.ufunc):\n            with np.errstate(all=\"ignore\"):\n                results = self.obj._data.apply(\"apply\", func=self.f)\n            return self.obj._constructor(\n                data=results, index=self.index, columns=self.columns, copy=False\n            )\n\n        # broadcasting\n        if self.result_type == \"broadcast\":\n            return self.apply_broadcast(self.obj)\n\n        # one axis empty\n        elif not all(self.obj.shape):\n            return self.apply_empty_result()\n\n        # raw\n        elif self.raw and not self.obj._is_mixed_type:\n            return self.apply_raw()\n\n        return self.apply_standard()",
        "begin_line": 144,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_empty_result#188",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_empty_result(self)",
        "snippet": "    def apply_empty_result(self):\n        \"\"\"\n        we have an empty result; at least 1 axis is 0\n\n        we will try to apply the function to an empty\n        series in order to see if this is a reduction function\n        \"\"\"\n\n        # we are not asked to reduce or infer reduction\n        # so just return a copy of the existing object\n        if self.result_type not in [\"reduce\", None]:\n            return self.obj.copy()\n\n        # we may need to infer\n        should_reduce = self.result_type == \"reduce\"\n\n        from pandas import Series\n\n        if not should_reduce:\n            try:\n                r = self.f(Series([], dtype=np.float64))\n            except Exception:\n                pass\n            else:\n                should_reduce = not isinstance(r, Series)\n\n        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([], dtype=np.float64))\n            else:\n                r = np.nan\n\n            return self.obj._constructor_sliced(r, index=self.agg_axis)\n        else:\n            return self.obj.copy()",
        "begin_line": 188,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_raw#224",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_raw(self)",
        "snippet": "    def apply_raw(self):\n        \"\"\" apply to the values as a numpy array \"\"\"\n        try:\n            result = libreduction.compute_reduction(self.values, self.f, axis=self.axis)\n        except ValueError as err:\n            if \"Function does not reduce\" not in str(err):\n                # catch only ValueError raised intentionally in libreduction\n                raise\n            # We expect np.apply_along_axis to give a two-dimensional result, or\n            #  also raise.\n            result = np.apply_along_axis(self.f, self.axis, self.values)\n\n        # TODO: mixed type case\n        if result.ndim == 2:\n            return self.obj._constructor(result, index=self.index, columns=self.columns)\n        else:\n            return self.obj._constructor_sliced(result, index=self.agg_axis)",
        "begin_line": 224,
        "end_line": 240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_broadcast#242",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        result_values = np.empty_like(target.values)\n\n        # axis which we want to compare compliance\n        result_compare = target.shape[0]\n\n        for i, col in enumerate(target.columns):\n            res = self.f(target[col])\n            ares = np.asarray(res).ndim\n\n            # must be a scalar or 1d\n            if ares > 1:\n                raise ValueError(\"too many dims to broadcast\")\n            elif ares == 1:\n\n                # must match return dim\n                if result_compare != len(res):\n                    raise ValueError(\"cannot broadcast result\")\n\n            result_values[:, i] = res\n\n        # we *always* preserve the original index / columns\n        result = self.obj._constructor(\n            result_values, index=target.index, columns=target.columns\n        )\n        return result",
        "begin_line": 242,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_standard#269",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_standard(self)",
        "snippet": "    def apply_standard(self):\n\n        # try to reduce first (by default)\n        # this only matters if the reduction in values is of different dtype\n        # e.g. if we want to apply to a SparseFrame, then can't directly reduce\n\n        # we cannot reduce using non-numpy dtypes,\n        # as demonstrated in gh-12244\n        if (\n            self.result_type in [\"reduce\", None]\n            and not self.dtypes.apply(is_extension_array_dtype).any()\n            # Disallow complex_internals since libreduction shortcut\n            #  cannot handle MultiIndex\n            and not isinstance(self.agg_axis, ABCMultiIndex)\n        ):\n\n            values = self.values\n            index = self.obj._get_axis(self.axis)\n            labels = self.agg_axis\n            empty_arr = np.empty(len(index), dtype=values.dtype)\n\n            # Preserve subclass for e.g. test_subclassed_apply\n            dummy = self.obj._constructor_sliced(\n                empty_arr, index=index, dtype=values.dtype\n            )\n\n            try:\n                result = libreduction.compute_reduction(\n                    values, self.f, axis=self.axis, dummy=dummy, labels=labels\n                )\n            except ValueError as err:\n                if \"Function does not reduce\" not in str(err):\n                    # catch only ValueError raised intentionally in libreduction\n                    raise\n            except TypeError:\n                # e.g. test_apply_ignore_failures we just ignore\n                if not self.ignore_failures:\n                    raise\n            except ZeroDivisionError:\n                # reached via numexpr; fall back to python implementation\n                pass\n            else:\n                return self.obj._constructor_sliced(result, index=labels)\n\n        # compute the result using the series generator\n        results, res_index = self.apply_series_generator()\n\n        # wrap results\n        return self.wrap_results(results, res_index)",
        "begin_line": 269,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_series_generator#319",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_series_generator(self)",
        "snippet": "    def apply_series_generator(self) -> Tuple[ResType, \"Index\"]:\n        series_gen = self.series_generator\n        res_index = self.result_index\n\n        keys = []\n        results = {}\n        if self.ignore_failures:\n            successes = []\n            for i, v in enumerate(series_gen):\n                try:\n                    results[i] = self.f(v)\n                except Exception:\n                    pass\n                else:\n                    keys.append(v.name)\n                    successes.append(i)\n\n            # so will work with MultiIndex\n            if len(successes) < len(res_index):\n                res_index = res_index.take(successes)\n\n        else:\n            for i, v in enumerate(series_gen):\n                results[i] = self.f(v)\n                keys.append(v.name)\n\n        return results, res_index",
        "begin_line": 319,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.wrap_results#347",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.wrap_results(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        from pandas import Series\n\n        # see if we can infer the results\n        if len(results) > 0 and 0 in results and is_sequence(results[0]):\n\n            return self.wrap_results_for_axis(results, res_index)\n\n        # dict of scalars\n\n        # the default dtype of an empty Series will be `object`, but this\n        # code can be hit by df.mean() where the result should have dtype\n        # float64 even if it's an empty Series.\n        constructor_sliced = self.obj._constructor_sliced\n        if constructor_sliced is Series:\n            result = create_series_with_explicit_dtype(\n                results, dtype_if_empty=np.float64\n            )\n        else:\n            result = constructor_sliced(results)\n        result.index = res_index\n\n        return result",
        "begin_line": 347,
        "end_line": 371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.apply_broadcast#377",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        return super().apply_broadcast(target)",
        "begin_line": 377,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.series_generator#381",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.series_generator(self)",
        "snippet": "    def series_generator(self):\n        return (self.obj._ixs(i, axis=1) for i in range(len(self.columns)))",
        "begin_line": 381,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.result_index#385",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        return self.columns",
        "begin_line": 385,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.result_columns#389",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        return self.index",
        "begin_line": 389,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.wrap_results_for_axis#392",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> \"DataFrame\":\n        \"\"\" return the results for the rows \"\"\"\n\n        result = self.obj._constructor(data=results)\n\n        if not isinstance(results[0], ABCSeries):\n            if len(result.index) == len(self.res_columns):\n                result.index = self.res_columns\n\n        if len(result.columns) == len(res_index):\n            result.columns = res_index\n\n        return result",
        "begin_line": 392,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.apply_broadcast#412",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        result = super().apply_broadcast(target.T)\n        return result.T",
        "begin_line": 412,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.series_generator#417",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.series_generator(self)",
        "snippet": "    def series_generator(self):\n        constructor = self.obj._constructor_sliced\n        return (\n            constructor(arr, index=self.columns, name=name)\n            for i, (arr, name) in enumerate(zip(self.values, self.index))\n        )",
        "begin_line": 417,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.result_index#425",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        return self.index",
        "begin_line": 425,
        "end_line": 426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.result_columns#429",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        return self.columns",
        "begin_line": 429,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.wrap_results_for_axis#432",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        \"\"\" return the results for the columns \"\"\"\n        result: Union[\"Series\", \"DataFrame\"]\n\n        # we have requested to expand\n        if self.result_type == \"expand\":\n            result = self.infer_to_same_shape(results, res_index)\n\n        # we have a non-series and don't want inference\n        elif not isinstance(results[0], ABCSeries):\n            from pandas import Series\n\n            result = Series(results)\n            result.index = res_index\n\n        # we may want to infer results\n        else:\n            result = self.infer_to_same_shape(results, res_index)\n\n        return result",
        "begin_line": 432,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.infer_to_same_shape#455",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.infer_to_same_shape(self, results: ResType, res_index: 'Index')",
        "snippet": "    def infer_to_same_shape(self, results: ResType, res_index: \"Index\") -> \"DataFrame\":\n        \"\"\" infer the results to the same shape as the input object \"\"\"\n\n        result = self.obj._constructor(data=results)\n        result = result.T\n\n        # set the index\n        result.index = res_index\n\n        # infer dtypes\n        result = result.infer_objects()\n\n        return result",
        "begin_line": 455,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.extension.fget#43",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.fget(self)",
        "snippet": "            def fget(self):\n                return getattr(self._data, name)",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001224589762429586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#60",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, *args, **kwargs)",
        "snippet": "        def method(self, *args, **kwargs):\n            result = attr(self._data, *args, **kwargs)\n            return result",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002894356005788712,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.extension.wrapper#95",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if isinstance(other, ABCSeries):\n            # the arrays defer to Series for comparison ops but the indexes\n            #  don't, so we have to unwrap here.\n            other = other._values\n\n        other = _maybe_unwrap_index(other)\n\n        op = getattr(self._data, opname)\n        return op(other)",
        "begin_line": 95,
        "end_line": 104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007692307692307693,
            "pseudo_dstar_susp": 0.007633587786259542,
            "pseudo_tarantula_susp": 0.007692307692307693,
            "pseudo_op2_susp": 0.005988023952095809,
            "pseudo_barinel_susp": 0.007692307692307693
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#111",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, other)",
        "snippet": "    def method(self, other):\n        meth = getattr(self._data, opname)\n        result = meth(_maybe_unwrap_index(other))\n        return _wrap_arithmetic_op(self, other, result)",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013964530093562352,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.extension._wrap_arithmetic_op#120",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._wrap_arithmetic_op(self, other, result)",
        "snippet": "def _wrap_arithmetic_op(self, other, result):\n    if result is NotImplemented:\n        return NotImplemented\n\n    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (\n            _wrap_arithmetic_op(self, other, result[0]),\n            _wrap_arithmetic_op(self, other, result[1]),\n        )\n\n    if not isinstance(result, Index):\n        # Index.__new__ will choose appropriate subclass for dtype\n        result = Index(result)\n\n    res_name = get_op_result_name(self, other)\n    result.name = res_name\n    return result",
        "begin_line": 120,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034904013961605586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.extension._maybe_unwrap_index#141",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._maybe_unwrap_index(obj)",
        "snippet": "def _maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying\n    data before deferring to the DatetimeArray/TimedeltaArray/PeriodArray\n    implementation, otherwise we will incorrectly return NotImplemented.\n\n    Parameters\n    ----------\n    obj : object\n\n    Returns\n    -------\n    unwrapped object\n    \"\"\"\n    if isinstance(obj, Index):\n        return obj._data\n    return obj",
        "begin_line": 141,
        "end_line": 157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005747126436781609,
            "pseudo_dstar_susp": 0.004807692307692308,
            "pseudo_tarantula_susp": 0.005780346820809248,
            "pseudo_op2_susp": 0.004761904761904762,
            "pseudo_barinel_susp": 0.005780346820809248
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.take#167",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n\n        taken = self._assert_take_fillable(\n            self._data,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=self._na_value,\n        )\n        return type(self)(taken, name=self.name)",
        "begin_line": 167,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.iloc#94",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.iloc(self)",
        "snippet": "    def iloc(self) -> \"_iLocIndexer\":\n        \"\"\"\n        Purely integer-location based indexing for selection by position.\n\n        ``.iloc[]`` is primarily integer position based (from ``0`` to\n        ``length-1`` of the axis), but may also be used with a boolean\n        array.\n\n        Allowed inputs are:\n\n        - An integer, e.g. ``5``.\n        - A list or array of integers, e.g. ``[4, 3, 0]``.\n        - A slice object with ints, e.g. ``1:7``.\n        - A boolean array.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above).\n          This is useful in method chains, when you don't have a reference to the\n          calling object, but would like to base your selection on some value.\n\n        ``.iloc`` will raise ``IndexError`` if a requested indexer is\n        out-of-bounds, except *slice* indexers which allow out-of-bounds\n        indexing (this conforms with python/numpy *slice* semantics).\n\n        See more at :ref:`Selection by Position <indexing.integer>`.\n\n        See Also\n        --------\n        DataFrame.iat : Fast integer location scalar accessor.\n        DataFrame.loc : Purely label-location based indexer for selection by label.\n        Series.iloc : Purely integer-location based indexing for\n                       selection by position.\n\n        Examples\n        --------\n\n        >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n        ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n        >>> df = pd.DataFrame(mydict)\n        >>> df\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        **Indexing just the rows**\n\n        With a scalar integer.\n\n        >>> type(df.iloc[0])\n        <class 'pandas.core.series.Series'>\n        >>> df.iloc[0]\n        a    1\n        b    2\n        c    3\n        d    4\n        Name: 0, dtype: int64\n\n        With a list of integers.\n\n        >>> df.iloc[[0]]\n           a  b  c  d\n        0  1  2  3  4\n        >>> type(df.iloc[[0]])\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> df.iloc[[0, 1]]\n             a    b    c    d\n        0    1    2    3    4\n        1  100  200  300  400\n\n        With a `slice` object.\n\n        >>> df.iloc[:3]\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        With a boolean mask the same length as the index.\n\n        >>> df.iloc[[True, False, True]]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        With a callable, useful in method chains. The `x` passed\n        to the ``lambda`` is the DataFrame being sliced. This selects\n        the rows whose index label even.\n\n        >>> df.iloc[lambda x: x.index % 2 == 0]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        **Indexing both axes**\n\n        You can mix the indexer types for the index and columns. Use ``:`` to\n        select the entire axis.\n\n        With scalar integers.\n\n        >>> df.iloc[0, 1]\n        2\n\n        With lists of integers.\n\n        >>> df.iloc[[0, 2], [1, 3]]\n              b     d\n        0     2     4\n        2  2000  4000\n\n        With `slice` objects.\n\n        >>> df.iloc[1:3, 0:3]\n              a     b     c\n        1   100   200   300\n        2  1000  2000  3000\n\n        With a boolean array whose length matches the columns.\n\n        >>> df.iloc[:, [True, False, True, False]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n\n        With a callable function that expects the Series or DataFrame.\n\n        >>> df.iloc[:, lambda df: [0, 2]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n        \"\"\"\n        return _iLocIndexer(\"iloc\", self)",
        "begin_line": 94,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001413827230312456,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.loc#232",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.loc(self)",
        "snippet": "    def loc(self) -> \"_LocIndexer\":\n        \"\"\"\n        Access a group of rows and columns by label(s) or a boolean array.\n\n        ``.loc[]`` is primarily label based, but may also be used with a\n        boolean array.\n\n        Allowed inputs are:\n\n        - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n          interpreted as a *label* of the index, and **never** as an\n          integer position along the index).\n        - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n        - A slice object with labels, e.g. ``'a':'f'``.\n\n          .. warning:: Note that contrary to usual python slices, **both** the\n              start and the stop are included\n\n        - A boolean array of the same length as the axis being sliced,\n          e.g. ``[True, False, True]``.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above)\n\n        See more at :ref:`Selection by Label <indexing.label>`\n\n        Raises\n        ------\n        KeyError\n            If any items are not found.\n\n        See Also\n        --------\n        DataFrame.at : Access a single value for a row/column label pair.\n        DataFrame.iloc : Access group of rows and columns by integer position(s).\n        DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n            Series/DataFrame.\n        Series.loc : Access group of values using labels.\n\n        Examples\n        --------\n        **Getting values**\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=['cobra', 'viper', 'sidewinder'],\n        ...      columns=['max_speed', 'shield'])\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4       5\n        sidewinder          7       8\n\n        Single label. Note this returns the row as a Series.\n\n        >>> df.loc['viper']\n        max_speed    4\n        shield       5\n        Name: viper, dtype: int64\n\n        List of labels. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[['viper', 'sidewinder']]\n                    max_speed  shield\n        viper               4       5\n        sidewinder          7       8\n\n        Single label for row and column\n\n        >>> df.loc['cobra', 'shield']\n        2\n\n        Slice with labels for row and single label for column. As mentioned\n        above, note that both the start and stop of the slice are included.\n\n        >>> df.loc['cobra':'viper', 'max_speed']\n        cobra    1\n        viper    4\n        Name: max_speed, dtype: int64\n\n        Boolean list with the same length as the row axis\n\n        >>> df.loc[[False, False, True]]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series\n\n        >>> df.loc[df['shield'] > 6]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series with column labels specified\n\n        >>> df.loc[df['shield'] > 6, ['max_speed']]\n                    max_speed\n        sidewinder          7\n\n        Callable that returns a boolean Series\n\n        >>> df.loc[lambda df: df['shield'] == 8]\n                    max_speed  shield\n        sidewinder          7       8\n\n        **Setting values**\n\n        Set value for all items matching the list of labels\n\n        >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire row\n\n        >>> df.loc['cobra'] = 10\n        >>> df\n                    max_speed  shield\n        cobra              10      10\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire column\n\n        >>> df.loc[:, 'max_speed'] = 30\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper              30      50\n        sidewinder         30      50\n\n        Set value for rows matching callable condition\n\n        >>> df.loc[df['shield'] > 35] = 0\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper               0       0\n        sidewinder          0       0\n\n        **Getting values on a DataFrame with an index that has integer labels**\n\n        Another example using integers for the index\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n        >>> df\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        Slice with integer labels for rows. As mentioned above, note that both\n        the start and stop of the slice are included.\n\n        >>> df.loc[7:9]\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        **Getting values with a MultiIndex**\n\n        A number of examples using a DataFrame with a MultiIndex\n\n        >>> tuples = [\n        ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n        ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n        ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n        ... ]\n        >>> index = pd.MultiIndex.from_tuples(tuples)\n        >>> values = [[12, 2], [0, 4], [10, 20],\n        ...         [1, 4], [7, 1], [16, 36]]\n        >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n        >>> df\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Single label. Note this returns a DataFrame with a single index.\n\n        >>> df.loc['cobra']\n                 max_speed  shield\n        mark i          12       2\n        mark ii          0       4\n\n        Single index tuple. Note this returns a Series.\n\n        >>> df.loc[('cobra', 'mark ii')]\n        max_speed    0\n        shield       4\n        Name: (cobra, mark ii), dtype: int64\n\n        Single label for row and column. Similar to passing in a tuple, this\n        returns a Series.\n\n        >>> df.loc['cobra', 'mark i']\n        max_speed    12\n        shield        2\n        Name: (cobra, mark i), dtype: int64\n\n        Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[[('cobra', 'mark ii')]]\n                       max_speed  shield\n        cobra mark ii          0       4\n\n        Single tuple for the index with a single label for the column\n\n        >>> df.loc[('cobra', 'mark i'), 'shield']\n        2\n\n        Slice from index tuple to single label\n\n        >>> df.loc[('cobra', 'mark i'):'viper']\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Slice from index tuple to index tuple\n\n        >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                            max_speed  shield\n        cobra      mark i          12       2\n                   mark ii          0       4\n        sidewinder mark i          10      20\n                   mark ii          1       4\n        viper      mark ii          7       1\n        \"\"\"\n        return _LocIndexer(\"loc\", self)",
        "begin_line": 232,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_loc#627",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_loc(self, key: int, axis: int)",
        "snippet": "    def _get_loc(self, key: int, axis: int):\n        return self.obj._ixs(key, axis=axis)",
        "begin_line": 627,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014347202295552367,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_setitem_indexer#633",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_setitem_indexer(self, key)",
        "snippet": "    def _get_setitem_indexer(self, key):\n        if self.axis is not None:\n            return self._convert_tuple(key)\n\n        ax = self.obj._get_axis(0)\n\n        if isinstance(ax, ABCMultiIndex) and self.name != \"iloc\":\n            try:\n                return ax.get_loc(key)\n            except (TypeError, KeyError):\n                # TypeError e.g. passed a bool\n                pass\n\n        if isinstance(key, tuple):\n            try:\n                return self._convert_tuple(key)\n            except IndexingError:\n                pass\n\n        if isinstance(key, range):\n            return list(key)\n\n        axis = self.axis or 0\n        try:\n            return self._convert_to_indexer(key, axis=axis)\n        except TypeError as e:\n\n            # invalid indexer type vs 'other' indexing errors\n            if \"cannot do\" in str(e):\n                raise\n            raise IndexingError(key)",
        "begin_line": 633,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer.__setitem__#665",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._setitem_with_indexer(indexer, value)",
        "begin_line": 665,
        "end_line": 671,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._has_valid_tuple#695",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._has_valid_tuple(self, key: Tuple)",
        "snippet": "    def _has_valid_tuple(self, key: Tuple):\n        \"\"\"\n        Check the key for valid keys across my indexer.\n        \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            try:\n                self._validate_key(k, i)\n            except ValueError:\n                raise ValueError(\n                    \"Location based indexing can only have \"\n                    f\"[{self._valid_types}] types\"\n                )",
        "begin_line": 695,
        "end_line": 708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._is_nested_tuple_indexer#710",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._is_nested_tuple_indexer(self, tup: Tuple)",
        "snippet": "    def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False",
        "begin_line": 710,
        "end_line": 718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_tuple#720",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_tuple(self, key)",
        "snippet": "    def _convert_tuple(self, key):\n        keyidx = []\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            for i in range(self.ndim):\n                if i == axis:\n                    keyidx.append(self._convert_to_indexer(key, axis=axis))\n                else:\n                    keyidx.append(slice(None))\n        else:\n            for i, k in enumerate(key):\n                if i >= self.ndim:\n                    raise IndexingError(\"Too many indexers\")\n                idx = self._convert_to_indexer(k, axis=i)\n                keyidx.append(idx)\n        return tuple(keyidx)",
        "begin_line": 720,
        "end_line": 735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_scalar_indexer#737",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_scalar_indexer(self, key, axis: int)",
        "snippet": "    def _convert_scalar_indexer(self, key, axis: int):\n        # if we are accessing via lowered dim, use the last dim\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        # a scalar\n        return ax._convert_scalar_indexer(key, kind=self.name)",
        "begin_line": 737,
        "end_line": 741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_slice_indexer#743",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_slice_indexer(self, key: slice, axis: int)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, axis: int):\n        # if we are accessing via lowered dim, use the last dim\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        return ax._convert_slice_indexer(key, kind=self.name)",
        "begin_line": 743,
        "end_line": 746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._has_valid_setitem_indexer#748",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer) -> bool:\n        return True",
        "begin_line": 748,
        "end_line": 749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._has_valid_positional_setitem_indexer#751",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._has_valid_positional_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_positional_setitem_indexer(self, indexer) -> bool:\n        \"\"\"\n        Validate that a positional indexer cannot enlarge its target\n        will raise if needed, does not modify the indexer externally.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(indexer, dict):\n            raise IndexError(f\"{self.name} cannot enlarge its target object\")\n        else:\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n            for ax, i in zip(self.obj.axes, indexer):\n                if isinstance(i, slice):\n                    # should check the stop slice?\n                    pass\n                elif is_list_like_indexer(i):\n                    # should check the elements?\n                    pass\n                elif is_integer(i):\n                    if i >= len(ax):\n                        raise IndexError(\n                            f\"{self.name} cannot enlarge its target object\"\n                        )\n                elif isinstance(i, dict):\n                    raise IndexError(f\"{self.name} cannot enlarge its target object\")\n\n        return True",
        "begin_line": 751,
        "end_line": 780,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._setitem_with_indexer#782",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._setitem_with_indexer(self, indexer, value)",
        "snippet": "    def _setitem_with_indexer(self, indexer, value):\n        self._has_valid_setitem_indexer(indexer)\n\n        # also has the side effect of consolidating in-place\n        from pandas import Series\n\n        info_axis = self.obj._info_axis_number\n\n        # maybe partial set\n        take_split_path = self.obj._is_mixed_type\n\n        # if there is only one block/type, still have to take split path\n        # unless the block is one-dimensional or it can hold the value\n        if not take_split_path and self.obj._data.blocks:\n            (blk,) = self.obj._data.blocks\n            if 1 < blk.ndim:  # in case of dict, keys are indices\n                val = list(value.values()) if isinstance(value, dict) else value\n                take_split_path = not blk._can_hold_element(val)\n\n        # if we have any multi-indexes that have non-trivial slices\n        # (not null slices) then we must take the split path, xref\n        # GH 10360, GH 27841\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, ABCMultiIndex) and not (\n                    is_integer(i) or com.is_null_slice(i)\n                ):\n                    take_split_path = True\n                    break\n\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n\n                    # reindex the axis to the new value\n                    # and set inplace\n                    key, _ = convert_missing_indexer(idx)\n\n                    # if this is the items axes, then take the main missing\n                    # path first\n                    # this correctly sets the dtype and avoids cache issues\n                    # essentially this separates out the block that is needed\n                    # to possibly be modified\n                    if self.ndim > 1 and i == self.obj._info_axis_number:\n\n                        # add the new item, and set the value\n                        # must have all defined axes if we have a scalar\n                        # or a list-like on the non-info axes if we have a\n                        # list-like\n                        len_non_info_axes = (\n                            len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                        )\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    \"cannot set a frame with no \"\n                                    \"defined index and a scalar\"\n                                )\n                            self.obj[key] = value\n                            return self.obj\n\n                        # add a new item with the dtype setup\n                        self.obj[key] = _infer_fill_value(value)\n\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes\n                        )\n                        self._setitem_with_indexer(new_indexer, value)\n\n                        return self.obj\n\n                    # reindex the axis\n                    # make sure to clear the cache because we are\n                    # just replacing the block manager here\n                    # so the object is the same\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._data = self.obj.reindex(labels, axis=i)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n\n                    nindexer.append(labels.get_loc(key))\n\n                else:\n                    nindexer.append(idx)\n\n            indexer = tuple(nindexer)\n        else:\n\n            indexer, missing = convert_missing_indexer(indexer)\n\n            if missing:\n                return self._setitem_with_indexer_missing(indexer, value)\n\n        # set\n        item_labels = self.obj._get_axis(info_axis)\n\n        # align and set the values\n        if take_split_path:\n            # Above we only set take_split_path to True for 2D cases\n            assert self.ndim == 2\n            assert info_axis == 1\n\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n\n            # if we have a partial multiindex, then need to adjust the plane\n            # indexer here\n            if len(labels) == 1 and isinstance(\n                self.obj[labels[0]].axes[0], ABCMultiIndex\n            ):\n                item = labels[0]\n                obj = self.obj[item]\n                index = obj.index\n                idx = indexer[:info_axis][0]\n\n                plane_indexer = tuple([idx]) + indexer[info_axis + 1 :]\n                lplane_indexer = length_of_indexer(plane_indexer[0], index)\n\n                # require that we are setting the right number of values that\n                # we are indexing\n                if (\n                    is_list_like_indexer(value)\n                    and np.iterable(value)\n                    and lplane_indexer != len(value)\n                ):\n\n                    if len(obj[idx]) != len(value):\n                        raise ValueError(\n                            \"cannot set using a multi-index \"\n                            \"selection indexer with a different \"\n                            \"length than the value\"\n                        )\n\n                    # make sure we have an ndarray\n                    value = getattr(value, \"values\", value).ravel()\n\n                    # we can directly set the series here\n                    # as we select a slice indexer on the mi\n                    idx = index._convert_slice_indexer(idx)\n                    obj._consolidate_inplace()\n                    obj = obj.copy()\n                    obj._data = obj._data.setitem(indexer=tuple([idx]), value=value)\n                    self.obj[item] = obj\n                    return\n\n            # non-mi\n            else:\n                plane_indexer = indexer[:info_axis] + indexer[info_axis + 1 :]\n                plane_axis = self.obj.axes[:info_axis][0]\n                lplane_indexer = length_of_indexer(plane_indexer[0], plane_axis)\n\n            def setter(item, v):\n                s = self.obj[item]\n                pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    s = v\n                else:\n                    # set the item, possibly having a dtype change\n                    s._consolidate_inplace()\n                    s = s.copy()\n                    s._data = s._data.setitem(indexer=pi, value=v)\n                    s._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj[item] = s\n\n            # we need an iterable, with a ndim of at least 1\n            # eg. don't pass through np.array(0)\n            if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n                # we have an equal len Frame\n                if isinstance(value, ABCDataFrame):\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, ABCMultiIndex)\n\n                    for item in labels:\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(\n                                tuple(sub_indexer), value[item], multiindex_indexer\n                            )\n                        else:\n                            v = np.nan\n\n                        setter(item, v)\n\n                # we have an equal len ndarray/convertible to our labels\n                # hasattr first, to avoid coercing to ndarray without reason.\n                # But we may be relying on the ndarray coercion to check ndim.\n                # Why not just convert to an ndarray earlier on if needed?\n                elif np.ndim(value) == 2:\n\n                    # note that this coerces the dtype if we are mixed\n                    # GH 7551\n                    value = np.array(value, dtype=object)\n                    if len(labels) != value.shape[1]:\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an ndarray\"\n                        )\n\n                    for i, item in enumerate(labels):\n\n                        # setting with a list, recoerces\n                        setter(item, value[:, i].tolist())\n\n                # we have an equal len list/ndarray\n                elif _can_do_equal_len(\n                    labels, value, plane_indexer, lplane_indexer, self.obj\n                ):\n                    setter(labels[0], value)\n\n                # per label values\n                else:\n\n                    if len(labels) != len(value):\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an iterable\"\n                        )\n\n                    for item, v in zip(labels, value):\n                        setter(item, v)\n            else:\n\n                # scalar\n                for item in labels:\n                    setter(item, value)\n\n        else:\n            if isinstance(indexer, tuple):\n                indexer = maybe_convert_ix(*indexer)\n\n                # if we are setting on the info axis ONLY\n                # set using those methods to avoid block-splitting\n                # logic here\n                if (\n                    len(indexer) > info_axis\n                    and is_integer(indexer[info_axis])\n                    and all(\n                        com.is_null_slice(idx)\n                        for i, idx in enumerate(indexer)\n                        if i != info_axis\n                    )\n                    and item_labels.is_unique\n                ):\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n\n            if isinstance(value, (ABCSeries, dict)):\n                # TODO(EA): ExtensionBlock.setitem this causes issues with\n                # setting for extensionarrays that store dicts. Need to decide\n                # if it's worth supporting that.\n                value = self._align_series(indexer, Series(value))\n\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n\n            # check for chained assignment\n            self.obj._check_is_chained_assignment_possible()\n\n            # actually do the set\n            self.obj._consolidate_inplace()\n            self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)\n            self.obj._maybe_update_cacher(clear=True)",
        "begin_line": 782,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._getitem_lowerdim#1363",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._getitem_lowerdim(self, tup: Tuple)",
        "snippet": "    def _getitem_lowerdim(self, tup: Tuple):\n\n        # we can directly get the axis result since the axis is specified\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n\n        # we may have a nested tuples indexer here\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n\n        # we maybe be using a tuple to represent multiple dimensions here\n        ax0 = self.obj._get_axis(0)\n        # ...but iloc should handle the tuple as simple integer-location\n        # instead of checking it as multiindex representation (GH 13797)\n        if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n        if len(tup) > self.ndim:\n            raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n        for i, key in enumerate(tup):\n            if is_label_like(key) or isinstance(key, tuple):\n                section = self._getitem_axis(key, axis=i)\n\n                # we have yielded a scalar ?\n                if not is_list_like_indexer(section):\n                    return section\n\n                elif section.ndim == self.ndim:\n                    # we're in the middle of slicing through a MultiIndex\n                    # revise the key wrt to `section` by inserting an _NS\n                    new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n                else:\n                    new_key = tup[:i] + tup[i + 1 :]\n\n                    # unfortunately need an odious kludge here because of\n                    # DataFrame transposing convention\n                    if (\n                        isinstance(section, ABCDataFrame)\n                        and i > 0\n                        and len(new_key) == 2\n                    ):\n                        a, b = new_key\n                        new_key = b, a\n\n                    if len(new_key) == 1:\n                        new_key = new_key[0]\n\n                # Slices should return views, but calling iloc/loc with a null\n                # slice returns a new object.\n                if com.is_null_slice(new_key):\n                    return section\n                # This is an elided recursive call to iloc/loc/etc'\n                return getattr(section, self.name)[new_key]\n\n        raise IndexingError(\"not applicable\")",
        "begin_line": 1363,
        "end_line": 1422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_to_indexer#1659",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_to_indexer(self, obj, axis: int, raise_missing: bool=False)",
        "snippet": "    def _convert_to_indexer(self, obj, axis: int, raise_missing: bool = False):\n        \"\"\"\n        Convert indexing key into something we can use to do actual fancy\n        indexing on a ndarray.\n\n        Examples\n        ix[:5] -> slice(0, 5)\n        ix[[1,2,3]] -> [1,2,3]\n        ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n        Going by Zen of Python?\n        'In the face of ambiguity, refuse the temptation to guess.'\n        raise AmbiguousIndexError with integer labels?\n        - No, prefer label-based indexing\n        \"\"\"\n        labels = self.obj._get_axis(axis)\n\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n\n        # try to find out correct indexer, if not type correct raise\n        try:\n            obj = self._convert_scalar_indexer(obj, axis)\n        except TypeError:\n            # but we will allow setting\n            pass\n\n        # see if we are positional in nature\n        is_int_index = labels.is_integer()\n        is_int_positional = is_integer(obj) and not is_int_index\n\n        # if we are a label return me\n        try:\n            return labels.get_loc(obj)\n        except LookupError:\n            if isinstance(obj, tuple) and isinstance(labels, ABCMultiIndex):\n                if len(obj) == labels.nlevels:\n                    return {\"key\": obj}\n                raise\n        except TypeError:\n            pass\n        except ValueError:\n            if not is_int_positional:\n                raise\n\n        # a positional\n        if is_int_positional:\n\n            # if we are setting and its not a valid location\n            # its an insert which fails by definition\n\n            if self.name == \"loc\":\n                # always valid\n                return {\"key\": obj}\n\n            if obj >= self.obj.shape[axis] and not isinstance(labels, ABCMultiIndex):\n                # a positional\n                raise ValueError(\"cannot set by positional indexing with enlargement\")\n\n            return obj\n\n        if is_nested_tuple(obj, labels):\n            return labels.get_locs(obj)\n\n        elif is_list_like_indexer(obj):\n\n            if com.is_bool_indexer(obj):\n                obj = check_bool_indexer(labels, obj)\n                (inds,) = obj.nonzero()\n                return inds\n            else:\n                # When setting, missing keys are not allowed, even with .loc:\n                return self._get_listlike_indexer(obj, axis, raise_missing=True)[1]\n        else:\n            try:\n                return labels.get_loc(obj)\n            except LookupError:\n                # allow a not found key only if we are a setter\n                if not is_list_like_indexer(obj):\n                    return {\"key\": obj}\n                raise",
        "begin_line": 1659,
        "end_line": 1739,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#1753",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self._getitem_scalar(key)\n                except (KeyError, IndexError, AttributeError):\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 1753,
        "end_line": 1767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002937720329024677,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_key#1975",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n        if com.is_bool_indexer(key):\n            if hasattr(key, \"index\") and isinstance(key.index, Index):\n                if key.index.inferred_type == \"integer\":\n                    raise NotImplementedError(\n                        \"iLocation based boolean \"\n                        \"indexing on an integer type \"\n                        \"is not available\"\n                    )\n                raise ValueError(\n                    \"iLocation based boolean indexing cannot use \"\n                    \"an indexable as a mask\"\n                )\n            return\n\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            # a tuple should already have been caught by this point\n            # so don't treat a tuple as a valid indexer\n            raise IndexingError(\"Too many indexers\")\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n\n            # check that the key has a numeric dtype\n            if not is_numeric_dtype(arr.dtype):\n                raise IndexError(f\".iloc requires numeric indexers, got {arr}\")\n\n            # check that the key does not exceed the maximum size of the index\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
        "begin_line": 1975,
        "end_line": 2010,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer#2012",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer):\n        self._has_valid_positional_setitem_indexer(indexer)",
        "begin_line": 2012,
        "end_line": 2013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021132713440405747,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._is_scalar_access#2015",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n\n            ax = self.obj.axes[i]\n            if not ax.is_unique:\n                return False\n\n        return True",
        "begin_line": 2015,
        "end_line": 2036,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002937720329024677,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_scalar#2038",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_scalar(self, key)",
        "snippet": "    def _getitem_scalar(self, key):\n        # a fast-path to scalar access\n        # if not, raise\n        values = self.obj._get_value(*key, takeable=True)\n        return values",
        "begin_line": 2038,
        "end_line": 2042,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002937720329024677,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#2044",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int) -> None:\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position.\n        axis : int\n            Desired axis.\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'.\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 2044,
        "end_line": 2062,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001422677479015507,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_tuple#2064",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        retval = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n\n            # if the dim was reduced, then pass a lower-dim the next time\n            if retval.ndim < self.ndim:\n                # TODO: this is never reached in tests; can we confirm that\n                #  it is impossible?\n                axis -= 1\n\n            # try to get for the next axis\n            axis += 1\n\n        return retval",
        "begin_line": 2064,
        "end_line": 2090,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#2115",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self._get_loc(key, axis=axis)",
        "begin_line": 2115,
        "end_line": 2139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014347202295552367,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._convert_to_indexer#2142",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._convert_to_indexer(self, obj, axis: int, raise_missing: bool=False)",
        "snippet": "    def _convert_to_indexer(self, obj, axis: int, raise_missing: bool = False):\n        \"\"\"\n        Much simpler as we only have to deal with our valid types.\n        \"\"\"\n        # make need to convert a float key\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n\n        elif is_float(obj):\n            return self._convert_scalar_indexer(obj, axis)\n\n        try:\n            self._validate_key(obj, axis)\n            return obj\n        except ValueError:\n            raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
        "begin_line": 2142,
        "end_line": 2157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing._tuplify#2240",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing._tuplify(ndim: int, loc: Hashable)",
        "snippet": "def _tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]:\n    \"\"\"\n    Given an indexer for the first dimension, create an equivalent tuple\n    for indexing over all dimensions.\n\n    Parameters\n    ----------\n    ndim : int\n    loc : object\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    _tup: List[Union[Hashable, slice]]\n    _tup = [slice(None, None) for _ in range(ndim)]\n    _tup[0] = loc\n    return tuple(_tup)",
        "begin_line": 2240,
        "end_line": 2257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021249468763280918,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2260",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj, key)",
        "snippet": "def convert_to_index_sliceable(obj, key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj._data.items:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2260,
        "end_line": 2282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.check_bool_indexer#2285",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.check_bool_indexer(index: Index, key)",
        "snippet": "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done.\n    key : list-like\n        Boolean indexer to check.\n\n    Returns\n    -------\n    np.array\n        Resulting key.\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index.\n    IndexingError\n        If the index of the key is unalignable to index.\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    else:\n        if is_sparse(result):\n            result = result.to_dense()\n        result = check_bool_array_indexer(index, result)\n\n    return result",
        "begin_line": 2285,
        "end_line": 2327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.convert_missing_indexer#2330",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_missing_indexer(indexer)",
        "snippet": "def convert_missing_indexer(indexer):\n    \"\"\"\n    Reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
        "begin_line": 2330,
        "end_line": 2344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000211954217888936,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.maybe_convert_ix#2358",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.maybe_convert_ix(*args)",
        "snippet": "def maybe_convert_ix(*args):\n    \"\"\"\n    We likely want to take the cross-product.\n    \"\"\"\n    ixify = True\n    for arg in args:\n        if not isinstance(arg, (np.ndarray, list, ABCSeries, Index)):\n            ixify = False\n\n    if ixify:\n        return np.ix_(*args)\n    else:\n        return args",
        "begin_line": 2358,
        "end_line": 2370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.is_nested_tuple#2373",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_nested_tuple(tup, labels)",
        "snippet": "def is_nested_tuple(tup, labels) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for i, k in enumerate(tup):\n\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
        "begin_line": 2373,
        "end_line": 2388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexing.is_label_like#2391",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_label_like(key)",
        "snippet": "def is_label_like(key) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
        "begin_line": 2391,
        "end_line": 2398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#73",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid fill method. Expecting {expecting}. Got {method}\")\n    return method",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015867978419549348,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#601",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 601,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001690045631232043,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__new__#151",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True)",
        "snippet": "    def __new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True):\n\n        if isinstance(data, ABCSeries) and is_interval_dtype(data):\n            data = data.values\n\n        if isinstance(data, (cls, ABCIntervalIndex)):\n            left = data.left\n            right = data.right\n            closed = closed or data.closed\n        else:\n\n            # don't allow scalars\n            if is_scalar(data):\n                msg = (\n                    f\"{cls.__name__}(...) must be called with a collection \"\n                    f\"of some kind, {data} was passed\"\n                )\n                raise TypeError(msg)\n\n            # might need to convert empty or purely na data\n            data = maybe_convert_platform_interval(data)\n            left, right, infer_closed = intervals_to_interval_bounds(\n                data, validate_closed=closed is None\n            )\n            closed = closed or infer_closed\n\n        return cls._simple_new(\n            left,\n            right,\n            closed,\n            copy=copy,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n        )",
        "begin_line": 151,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002275830678197542,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._simple_new#187",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
        "snippet": "    def _simple_new(\n        cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True\n    ):\n        result = IntervalMixin.__new__(cls)\n\n        closed = closed or \"right\"\n        left = ensure_index(left, copy=copy)\n        right = ensure_index(right, copy=copy)\n\n        if dtype is not None:\n            # GH 19262: dtype must be an IntervalDtype to override inferred\n            dtype = pandas_dtype(dtype)\n            if not is_interval_dtype(dtype):\n                msg = f\"dtype must be an IntervalDtype, got {dtype}\"\n                raise TypeError(msg)\n            elif dtype.subtype is not None:\n                left = left.astype(dtype.subtype)\n                right = right.astype(dtype.subtype)\n\n        # coerce dtypes to match if needed\n        if is_float_dtype(left) and is_integer_dtype(right):\n            right = right.astype(left.dtype)\n        elif is_float_dtype(right) and is_integer_dtype(left):\n            left = left.astype(right.dtype)\n\n        if type(left) != type(right):\n            msg = (\n                f\"must not have differing left [{type(left).__name__}] and \"\n                f\"right [{type(right).__name__}] types\"\n            )\n            raise ValueError(msg)\n        elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalArray\"\n            )\n            raise TypeError(msg)\n        elif isinstance(left, ABCPeriodIndex):\n            msg = \"Period dtypes are not supported, use a PeriodIndex instead\"\n            raise ValueError(msg)\n        elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n            msg = (\n                \"left and right must have the same time zone, got \"\n                f\"'{left.tz}' and '{right.tz}'\"\n            )\n            raise ValueError(msg)\n\n        result._left = left\n        result._right = right\n        result._closed = closed\n        if verify_integrity:\n            result._validate()\n        return result",
        "begin_line": 187,
        "end_line": 240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_sequence#243",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars, dtype=dtype, copy=copy)",
        "begin_line": 243,
        "end_line": 244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018751171948246765,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_factorized#247",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        if len(values) == 0:\n            # An empty array returns object-dtype here. We can't create\n            # a new IA from an (empty) object-dtype array, so turn it into the\n            # correct dtype.\n            values = values.astype(original.dtype.subtype)\n        return cls(values, closed=original.closed)",
        "begin_line": 247,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_breaks#304",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_breaks(cls, breaks, closed=\"right\", copy=False, dtype=None):\n        breaks = maybe_convert_platform_interval(breaks)\n\n        return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
        "begin_line": 304,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_arrays#375",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_arrays(cls, left, right, closed=\"right\", copy=False, dtype=None):\n        left = maybe_convert_platform_interval(left)\n        right = maybe_convert_platform_interval(right)\n\n        return cls._simple_new(\n            left, right, closed, copy=copy, dtype=dtype, verify_integrity=True\n        )",
        "begin_line": 375,
        "end_line": 381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016108247422680412,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._validate#460",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"Verify that the IntervalArray is valid.\n\n        Checks that\n\n        * closed is valid\n        * left and right match lengths\n        * left and right have the same missing values\n        * left is always below right\n        \"\"\"\n        if self.closed not in _VALID_CLOSED:\n            msg = f\"invalid option for 'closed': {self.closed}\"\n            raise ValueError(msg)\n        if len(self.left) != len(self.right):\n            msg = \"left and right must have the same length\"\n            raise ValueError(msg)\n        left_mask = notna(self.left)\n        right_mask = notna(self.right)\n        if not (left_mask == right_mask).all():\n            msg = (\n                \"missing values must be missing in the same \"\n                \"location both left and right sides\"\n            )\n            raise ValueError(msg)\n        if not (self.left[left_mask] <= self.right[left_mask]).all():\n            msg = \"left side of interval must be <= right side\"\n            raise ValueError(msg)",
        "begin_line": 460,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016108247422680412,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__iter__#491",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return iter(np.asarray(self))",
        "begin_line": 491,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016273393002441008,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__len__#494",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.left)",
        "begin_line": 494,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016220600162206002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__getitem__#497",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__getitem__(self, value)",
        "snippet": "    def __getitem__(self, value):\n        left = self.left[value]\n        right = self.right[value]\n\n        # scalar\n        if not isinstance(left, ABCIndexClass):\n            if isna(left):\n                return self._fill_value\n            return Interval(left, right, self.closed)\n\n        return self._shallow_copy(left, right)",
        "begin_line": 497,
        "end_line": 507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003403675970047651,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__eq__#553",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        # ensure pandas array for list-like and eliminate non-interval scalars\n        if is_list_like(other):\n            if len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n            other = array(other)\n        elif not isinstance(other, Interval):\n            # non-interval scalar -> no matches\n            return np.zeros(len(self), dtype=bool)\n\n        # determine the dtype of the elements we want to compare\n        if isinstance(other, Interval):\n            other_dtype = \"interval\"\n        elif not is_categorical_dtype(other):\n            other_dtype = other.dtype\n        else:\n            # for categorical defer to categories for dtype\n            other_dtype = other.categories.dtype\n\n            # extract intervals if we have interval categories with matching closed\n            if is_interval_dtype(other_dtype):\n                if self.closed != other.categories.closed:\n                    return np.zeros(len(self), dtype=bool)\n                other = other.categories.take(other.codes)\n\n        # interval-like -> need same closed and matching endpoints\n        if is_interval_dtype(other_dtype):\n            if self.closed != other.closed:\n                return np.zeros(len(self), dtype=bool)\n            return (self.left == other.left) & (self.right == other.right)\n\n        # non-interval/non-object dtype -> no matches\n        if not is_object_dtype(other_dtype):\n            return np.zeros(len(self), dtype=bool)\n\n        # object dtype -> iteratively check for intervals\n        result = np.zeros(len(self), dtype=bool)\n        for i, obj in enumerate(other):\n            # need object to be an Interval with same closed and endpoints\n            if (\n                isinstance(obj, Interval)\n                and self.closed == obj.closed\n                and self.left[i] == obj.left\n                and self.right[i] == obj.right\n            ):\n                result[i] = True\n\n        return result",
        "begin_line": 553,
        "end_line": 600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__ne__#602",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        return ~self.__eq__(other)",
        "begin_line": 602,
        "end_line": 603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017838030681412772,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.dtype#652",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return IntervalDtype(self.left.dtype)",
        "begin_line": 652,
        "end_line": 653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018751171948246765,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.astype#655",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to an ExtensionArray or NumPy array with dtype 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        array : ExtensionArray or ndarray\n            ExtensionArray or NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n        if is_interval_dtype(dtype):\n            if dtype == self.dtype:\n                return self.copy() if copy else self\n\n            # need to cast to different subtype\n            try:\n                new_left = self.left.astype(dtype.subtype)\n                new_right = self.right.astype(dtype.subtype)\n            except TypeError:\n                msg = (\n                    f\"Cannot convert {self.dtype} to {dtype}; subtypes are incompatible\"\n                )\n                raise TypeError(msg)\n            return self._shallow_copy(new_left, new_right)\n        elif is_categorical_dtype(dtype):\n            return Categorical(np.asarray(self))\n        # TODO: This try/except will be repeated.\n        try:\n            return np.asarray(self).astype(dtype, copy=copy)\n        except (TypeError, ValueError):\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)",
        "begin_line": 655,
        "end_line": 696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._shallow_copy#720",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._shallow_copy(self, left=None, right=None, closed=None)",
        "snippet": "    def _shallow_copy(self, left=None, right=None, closed=None):\n        \"\"\"\n        Return a new IntervalArray with the replacement attributes\n\n        Parameters\n        ----------\n        left : array-like\n            Values to be used for the left-side of the the intervals.\n            If None, the existing left and right values will be used.\n\n        right : array-like\n            Values to be used for the right-side of the the intervals.\n            If None and left is IntervalArray-like, the left and right\n            of the IntervalArray-like will be used.\n\n        closed : {'left', 'right', 'both', 'neither'}, optional\n            Whether the intervals are closed on the left-side, right-side, both\n            or neither.  If None, the existing closed will be used.\n        \"\"\"\n        if left is None:\n\n            # no values passed\n            left, right = self.left, self.right\n\n        elif right is None:\n\n            # only single value passed, could be an IntervalArray\n            # or array of Intervals\n            if not isinstance(left, (type(self), ABCIntervalIndex)):\n                left = type(self)(left)\n\n            left, right = left.left, left.right\n        else:\n\n            # both left and right are values\n            pass\n\n        closed = closed or self.closed\n        return self._simple_new(left, right, closed=closed, verify_integrity=False)",
        "begin_line": 720,
        "end_line": 758,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.copy#760",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.copy(self)",
        "snippet": "    def copy(self):\n        \"\"\"\n        Return a copy of the array.\n\n        Returns\n        -------\n        IntervalArray\n        \"\"\"\n        left = self.left.copy(deep=True)\n        right = self.right.copy(deep=True)\n        closed = self.closed\n        # TODO: Could skip verify_integrity here.\n        return type(self).from_arrays(left, right, closed=closed)",
        "begin_line": 760,
        "end_line": 772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.isna#774",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.isna(self)",
        "snippet": "    def isna(self):\n        return isna(self.left)",
        "begin_line": 774,
        "end_line": 775,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016273393002441008,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.take#786",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs):\n        \"\"\"\n        Take elements from the IntervalArray.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : Interval or NA, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        axis : any, default None\n            Present for compat with IntervalIndex; does nothing.\n\n        Returns\n        -------\n        IntervalArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n        \"\"\"\n        nv.validate_take(tuple(), kwargs)\n\n        fill_left = fill_right = fill_value\n        if allow_fill:\n            if fill_value is None:\n                fill_left = fill_right = self.left._na_value\n            elif is_interval(fill_value):\n                self._check_closed_matches(fill_value, name=\"fill_value\")\n                fill_left, fill_right = fill_value.left, fill_value.right\n            elif not is_scalar(fill_value) and notna(fill_value):\n                msg = (\n                    \"'IntervalArray.fillna' only supports filling with a \"\n                    \"'scalar pandas.Interval or NA'. \"\n                    f\"Got a '{type(fill_value).__name__}' instead.\"\n                )\n                raise ValueError(msg)\n\n        left_take = take(\n            self.left, indices, allow_fill=allow_fill, fill_value=fill_left\n        )\n        right_take = take(\n            self.right, indices, allow_fill=allow_fill, fill_value=fill_right\n        )\n\n        return self._shallow_copy(left_take, right_take)",
        "begin_line": 786,
        "end_line": 856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002763957987838585,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.left#933",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.left(self)",
        "snippet": "    def left(self):\n        \"\"\"\n        Return the left endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._left",
        "begin_line": 933,
        "end_line": 938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015158405335758679,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.right#941",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.right(self)",
        "snippet": "    def right(self):\n        \"\"\"\n        Return the right endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._right",
        "begin_line": 941,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015158405335758679,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.closed#949",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.closed(self)",
        "snippet": "    def closed(self):\n        \"\"\"\n        Whether the intervals are closed on the left-side, right-side, both or\n        neither.\n        \"\"\"\n        return self._closed",
        "begin_line": 949,
        "end_line": 954,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016035920461834508,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__array__#1066",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        Return the IntervalArray's data as a numpy array of Interval\n        objects (with dtype='object')\n        \"\"\"\n        left = self.left\n        right = self.right\n        mask = self.isna()\n        closed = self._closed\n\n        result = np.empty(len(left), dtype=object)\n        for i in range(len(left)):\n            if mask[i]:\n                result[i] = np.nan\n            else:\n                result[i] = Interval(left[i], right[i], closed)\n        return result",
        "begin_line": 1066,
        "end_line": 1082,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017777777777777779,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.interval.maybe_convert_platform_interval#1250",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval",
        "signature": "pandas.core.arrays.interval.maybe_convert_platform_interval(values)",
        "snippet": "def maybe_convert_platform_interval(values):\n    \"\"\"\n    Try to do platform conversion, with special casing for IntervalArray.\n    Wrapper around maybe_convert_platform that alters the default return\n    dtype in certain cases to be compatible with IntervalArray.  For example,\n    empty lists return with integer dtype instead of object dtype, which is\n    prohibited for IntervalArray.\n\n    Parameters\n    ----------\n    values : array-like\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(values, (list, tuple)) and len(values) == 0:\n        # GH 19016\n        # empty lists/tuples get object dtype by default, but this is\n        # prohibited for IntervalArray, so coerce to integer instead\n        return np.array([], dtype=np.int64)\n    elif is_categorical_dtype(values):\n        values = np.asarray(values)\n\n    return maybe_convert_platform(values)",
        "begin_line": 1250,
        "end_line": 1274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016043638697256537,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#140",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        closed=None,\n        dtype=_TD_DTYPE,\n        copy=False,\n        name=None,\n    ):\n        name = maybe_extract_name(name, data, cls)\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            raise ValueError(\n                \"Units 'M' and 'Y' are no longer supported, as they do not \"\n                \"represent unambiguous timedelta values durations.\"\n            )\n\n        if isinstance(data, TimedeltaArray):\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name, freq=freq)\n\n        if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 140,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020008003201280514,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#183",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE):\n        # `dtype` is passed by _shallow_copy in corner cases, should always\n        #  be timedelta64[ns] if present\n        if not isinstance(values, TimedeltaArray):\n            values = TimedeltaArray._simple_new(values, dtype=dtype, freq=freq)\n        else:\n            if freq is None:\n                freq = values.freq\n        assert isinstance(values, TimedeltaArray), type(values)\n        assert dtype == _TD_DTYPE, dtype\n        assert values.dtype == \"m8[ns]\", values.dtype\n\n        tdarr = TimedeltaArray._simple_new(values._data, freq=freq)\n        result = object.__new__(cls)\n        result._data = tdarr\n        result._name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = tdarr._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 183,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001795654516071108,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__getitem__#228",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 228,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022841480127912289,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.astype#237",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # Have to repeat the check for 'timedelta64' (not ns) dtype\n            #  so that we can return a numeric index, since pandas will return\n            #  a TimedeltaIndex when dtype='timedelta'\n            result = self._data.astype(dtype, copy=copy)\n            if self.hasnans:\n                return Index(result, name=self.name)\n            return Index(result.astype(\"i8\"), name=self.name)\n        return DatetimeIndexOpsMixin.astype(self, dtype, copy=copy)",
        "begin_line": 237,
        "end_line": 247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type#381",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"timedelta64\"",
        "begin_line": 381,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018040772145047808,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.timedelta_range#439",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas",
        "signature": "pandas.core.indexes.timedeltas.timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None)",
        "snippet": "def timedelta_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=None\n) -> TimedeltaIndex:\n    \"\"\"\n    Return a fixed frequency TimedeltaIndex, with day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or timedelta-like, default None\n        Left bound for generating timedeltas.\n    end : str or timedelta-like, default None\n        Right bound for generating timedeltas.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'.\n    name : str, default None\n        Name of the resulting TimedeltaIndex.\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n\n    Returns\n    -------\n    rng : TimedeltaIndex\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.timedelta_range(start='1 day', periods=4)\n    TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``closed`` parameter specifies which endpoint is included.  The default\n    behavior is to include both endpoints.\n\n    >>> pd.timedelta_range(start='1 day', periods=4, closed='right')\n    TimedeltaIndex(['2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.\n    Only fixed frequencies can be passed, non-fixed frequencies such as\n    'M' (month end) will raise.\n\n    >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')\n    TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                    '1 days 18:00:00', '2 days 00:00:00'],\n                   dtype='timedelta64[ns]', freq='6H')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\n    TimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n                '5 days 00:00:00'],\n               dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    freq, freq_infer = dtl.maybe_infer_freq(freq)\n    tdarr = TimedeltaArray._generate_range(start, end, periods, freq, closed=closed)\n    return TimedeltaIndex._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 439,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001763046544428773,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#65",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\" standard evaluation \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 65,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001455604075691412,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#160",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017064846416382253,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#169",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                f\"evaluating in Python space because the {repr(op_str)} \"\n                f\"operator is not supported by numexpr for \"\n                f\"the bool dtype, use {repr(unsupported[op_str])} instead\"\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                f\"operator {repr(op_str)} not implemented for bool dtypes\"\n            )\n    return True",
        "begin_line": 169,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001455604075691412,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#191",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 191,
        "end_line": 209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001455604075691412,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#186",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        axes: Optional[List[Index]] = None,\n        copy: bool = False,\n        dtype: Optional[Dtype] = None,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n        fastpath: bool = False,\n    ):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_data\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 186,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._init_mgr#215",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._init_mgr(self, mgr, axes=None, dtype=None, copy=False)",
        "snippet": "    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(\n                    axe, axis=self._get_block_manager_axis(a), copy=False\n                )\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr",
        "begin_line": 215,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015405946695424435,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#235",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 235,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011971746677840296,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#247",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(self, dtype)",
        "snippet": "    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented\"\n                    f\" in the {type(self).__name__} constructor\"\n                )\n\n        return dtype",
        "begin_line": 247,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013147515119642388,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict#335",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict(self, axes=None, **kwargs)",
        "snippet": "    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015992323684631377,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#348",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        self, args, kwargs, require_all: bool = False, sentinel=None\n    ):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n\n        # construct the args\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\"not enough/duplicate arguments specified!\")\n\n        axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 348,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016934801016088062,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#389",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis)",
        "snippet": "    def _get_axis_number(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in cls._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls}\")",
        "begin_line": 389,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001707941929974381,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#402",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis)",
        "snippet": "    def _get_axis_name(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, str):\n            if axis in cls._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls}\")",
        "begin_line": 402,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019413706076490002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#414",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis)",
        "snippet": "    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)",
        "begin_line": 414,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013440860215053763,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_block_manager_axis#419",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_block_manager_axis(cls, axis)",
        "snippet": "    def _get_block_manager_axis(cls, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        if cls._AXIS_REVERSED:\n            m = cls._AXIS_LEN - 1\n            return m - axis\n        return axis",
        "begin_line": 419,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#484",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self):\n        return getattr(self, self._info_axis_name)",
        "begin_line": 484,
        "end_line": 485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001352447930754666,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ndim#508",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._data.ndim",
        "begin_line": 508,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014206563432305724,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.size#531",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Return an int representing the number of elements in this object.\n\n        Return the number of rows if Series. Otherwise return the number of\n        rows times number of columns if DataFrame.\n\n        See Also\n        --------\n        ndarray.size : Number of elements in the array.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.size\n        3\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.size\n        4\n        \"\"\"\n        return np.prod(self.shape)",
        "begin_line": 531,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019817677368212446,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_axis#652",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_axis(self, axis, labels)",
        "snippet": "    def _set_axis(self, axis, labels) -> None:\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()",
        "begin_line": 652,
        "end_line": 654,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001497005988023952,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.squeeze#791",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.squeeze(self, axis=None)",
        "snippet": "    def squeeze(self, axis=None):\n        \"\"\"\n        Squeeze 1 dimensional axis objects into scalars.\n\n        Series or DataFrames with a single element are squeezed to a scalar.\n        DataFrames with a single column or a single row are squeezed to a\n        Series. Otherwise the object is unchanged.\n\n        This method is most useful when you don't know if your\n        object is a Series or DataFrame, but you do know it has just a single\n        column. In that case you can safely call `squeeze` to ensure you have a\n        Series.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            A specific axis to squeeze. By default, all length-1 axes are\n            squeezed.\n\n        Returns\n        -------\n        DataFrame, Series, or scalar\n            The projection after squeezing `axis` or all the axes.\n\n        See Also\n        --------\n        Series.iloc : Integer-location based indexing for selecting scalars.\n        DataFrame.iloc : Integer-location based indexing for selecting Series.\n        Series.to_frame : Inverse of DataFrame.squeeze for a\n            single-column DataFrame.\n\n        Examples\n        --------\n        >>> primes = pd.Series([2, 3, 5, 7])\n\n        Slicing might produce a Series with a single value:\n\n        >>> even_primes = primes[primes % 2 == 0]\n        >>> even_primes\n        0    2\n        dtype: int64\n\n        >>> even_primes.squeeze()\n        2\n\n        Squeezing objects with more than one value in every axis does nothing:\n\n        >>> odd_primes = primes[primes % 2 == 1]\n        >>> odd_primes\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        >>> odd_primes.squeeze()\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        Squeezing is even more effective when used with DataFrames.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n        >>> df\n           a  b\n        0  1  2\n        1  3  4\n\n        Slicing a single column will produce a DataFrame with the columns\n        having only one value:\n\n        >>> df_a = df[['a']]\n        >>> df_a\n           a\n        0  1\n        1  3\n\n        So the columns can be squeezed down, resulting in a Series:\n\n        >>> df_a.squeeze('columns')\n        0    1\n        1    3\n        Name: a, dtype: int64\n\n        Slicing a single row from a single column will produce a single\n        scalar DataFrame:\n\n        >>> df_0a = df.loc[df.index < 1, ['a']]\n        >>> df_0a\n           a\n        0  1\n\n        Squeezing the rows produces a single scalar Series:\n\n        >>> df_0a.squeeze('rows')\n        a    1\n        Name: 0, dtype: int64\n\n        Squeezing all axes will project directly into a scalar:\n\n        >>> df_0a.squeeze()\n        1\n        \"\"\"\n        axis = self._AXIS_NAMES if axis is None else (self._get_axis_number(axis),)\n        return self.iloc[\n            tuple(\n                0 if i in axis and len(a) == 1 else slice(None)\n                for i, a in enumerate(self.axes)\n            )\n        ]",
        "begin_line": 791,
        "end_line": 900,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002070822116380203,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._indexed_same#1323",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._indexed_same(self, other)",
        "snippet": "    def _indexed_same(self, other) -> bool:\n        return all(\n            self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n        )",
        "begin_line": 1323,
        "end_line": 1326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023963575365444525,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.equals#1328",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Test whether two objects contain the same elements.\n\n        This function allows two Series or DataFrames to be compared against\n        each other to see if they have the same shape and elements. NaNs in\n        the same location are considered equal. The column headers do not\n        need to have the same type, but the elements within the columns must\n        be the same dtype.\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n            The other Series or DataFrame to be compared with the first.\n\n        Returns\n        -------\n        bool\n            True if all elements are the same in both objects, False\n            otherwise.\n\n        See Also\n        --------\n        Series.eq : Compare two Series objects of the same length\n            and return a Series where each element is True if the element\n            in each Series is equal, False otherwise.\n        DataFrame.eq : Compare two DataFrame objects of the same shape and\n            return a DataFrame where each element is True if the respective\n            element in each DataFrame is equal, False otherwise.\n        testing.assert_series_equal : Raises an AssertionError if left and\n            right are not equal. Provides an easy interface to ignore\n            inequality in dtypes, indexes and precision among others.\n        testing.assert_frame_equal : Like assert_series_equal, but targets\n            DataFrames.\n        numpy.array_equal : Return True if two arrays have the same shape\n            and elements, False otherwise.\n\n        Notes\n        -----\n        This function requires that the elements have the same dtype as their\n        respective elements in the other Series or DataFrame. However, the\n        column labels do not need to have the same type, as long as they are\n        still considered equal.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({1: [10], 2: [20]})\n        >>> df\n            1   2\n        0  10  20\n\n        DataFrames df and exactly_equal have the same types and values for\n        their elements and column labels, which will return True.\n\n        >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n        >>> exactly_equal\n            1   2\n        0  10  20\n        >>> df.equals(exactly_equal)\n        True\n\n        DataFrames df and different_column_type have the same element\n        types and values, but have different types for the column labels,\n        which will still return True.\n\n        >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n        >>> different_column_type\n           1.0  2.0\n        0   10   20\n        >>> df.equals(different_column_type)\n        True\n\n        DataFrames df and different_data_type have different types for the\n        same values for their elements, and will return False even though\n        their column labels are the same values and types.\n\n        >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n        >>> different_data_type\n              1     2\n        0  10.0  20.0\n        >>> df.equals(different_data_type)\n        False\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._data.equals(other._data)",
        "begin_line": 1328,
        "end_line": 1413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002736726874657909,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__neg__#1418",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__neg__(self)",
        "snippet": "    def __neg__(self):\n        values = com.values_from_object(self)\n        if is_bool_dtype(values):\n            arr = operator.inv(values)\n        elif (\n            is_numeric_dtype(values)\n            or is_timedelta64_dtype(values)\n            or is_object_dtype(values)\n        ):\n            arr = operator.neg(values)\n        else:\n            raise TypeError(f\"Unary negative expects numeric dtype, not {values.dtype}\")\n        return self.__array_wrap__(arr)",
        "begin_line": 1418,
        "end_line": 1430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__invert__#1446",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__invert__(self)",
        "snippet": "    def __invert__(self):\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        arr = operator.inv(com.values_from_object(self))\n        return self.__array_wrap__(arr)",
        "begin_line": 1446,
        "end_line": 1452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017768301350390902,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__contains__#1825",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool_t:\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis",
        "begin_line": 1825,
        "end_line": 1827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014478065730418415,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array__#1885",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return com.values_from_object(self)",
        "begin_line": 1885,
        "end_line": 1886,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array_wrap__#1888",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        result = lib.item_from_zerodim(result)\n        if is_scalar(result):\n            # e.g. we get here with np.ptp(series)\n            # ptp also requires the item_from_zerodim\n            return result\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)",
        "begin_line": 1888,
        "end_line": 1895,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001763979537837361,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3204",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher) -> None:\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3204,
        "end_line": 3208,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014394702749388226,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_cached#3221",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_cached(self)",
        "snippet": "    def _is_cached(self) -> bool_t:\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, \"_cacher\", None) is not None",
        "begin_line": 3221,
        "end_line": 3223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002158894645941278,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_update_cacher#3232",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True)",
        "snippet": "    def _maybe_update_cacher(\n        self, clear: bool_t = False, verify_is_copy: bool_t = True\n    ) -> None:\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                # Note: we need to call ref._maybe_cache_changed even in the\n                #  case where it will raise.  (Uh, not clear why)\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except AssertionError:\n                    # ref._data.setitem can raise\n                    #  AssertionError because of shape mismatch\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n        if clear:\n            self._clear_item_cache()",
        "begin_line": 3232,
        "end_line": 3269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020968756552736424,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3271",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()",
        "begin_line": 3271,
        "end_line": 3272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_item_cache#3548",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_item_cache(self, item)",
        "snippet": "    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res",
        "begin_line": 3548,
        "end_line": 3560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00027948574622694243,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._iget_item_cache#3562",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._iget_item_cache(self, item)",
        "snippet": "    def _iget_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n        ax = self._info_axis\n        if ax.is_unique:\n            lower = self._get_item_cache(ax[item])\n        else:\n            lower = self.take(item, axis=self._info_axis_number)\n        return lower",
        "begin_line": 3562,
        "end_line": 3569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002937720329024677,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._slice#3574",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None)",
        "snippet": "    def _slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None) -> FrameOrSeries:\n        \"\"\"\n        Construct a slice of this container.\n\n        kind parameter is maintained for compatibility with Series slicing.\n        \"\"\"\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._data.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result",
        "begin_line": 3574,
        "end_line": 3588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3590",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value) -> None:\n        self._data.set(key, value)\n        self._clear_item_cache()",
        "begin_line": 3590,
        "end_line": 3592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_is_copy#3594",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_is_copy(self, ref=None, copy: bool_t=True)",
        "snippet": "    def _set_is_copy(self, ref=None, copy: bool_t = True) -> None:\n        if not copy:\n            self._is_copy = None\n        else:\n            if ref is not None:\n                self._is_copy = weakref.ref(ref)\n            else:\n                self._is_copy = None",
        "begin_line": 3594,
        "end_line": 3601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible#3603",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)",
        "snippet": "    def _check_is_chained_assignment_possible(self) -> bool_t:\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\")\n        return False",
        "begin_line": 3603,
        "end_line": 3621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019275250578257516,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3623",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3623,
        "end_line": 3698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002081165452653486,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.get#3737",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.get(self, key, default=None)",
        "snippet": "    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (ex: DataFrame column).\n\n        Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : same type as items contained in object\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default",
        "begin_line": 3737,
        "end_line": 3754,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_view#3757",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_view(self)",
        "snippet": "    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view",
        "begin_line": 3757,
        "end_line": 3759,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019275250578257516,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex_like#3761",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
        "snippet": "    def reindex_like(\n        self: FrameOrSeries,\n        other,\n        method: Optional[str] = None,\n        copy: bool_t = True,\n        limit=None,\n        tolerance=None,\n    ) -> FrameOrSeries:\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n        ...                     [31, 87.8, 'high'],\n        ...                     [22, 71.6, 'medium'],\n        ...                     [35, 95, 'medium']],\n        ...                    columns=['temp_celsius', 'temp_fahrenheit',\n        ...                             'windspeed'],\n        ...                    index=pd.date_range(start='2014-02-12',\n        ...                                        end='2014-02-15', freq='D'))\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame([[28, 'low'],\n        ...                     [30, 'low'],\n        ...                     [35.1, 'medium']],\n        ...                    columns=['temp_celsius', 'windspeed'],\n        ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n        ...                                            '2014-02-15']))\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            copy=copy,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)",
        "begin_line": 3761,
        "end_line": 3872,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017482517482517483,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._update_inplace#3965",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._update_inplace(self, result, verify_is_copy: bool_t=True)",
        "snippet": "    def _update_inplace(self, result, verify_is_copy: bool_t = True) -> None:\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n\n        self._reset_cache()\n        self._clear_item_cache()\n        self._data = getattr(result, \"_data\", result)\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
        "begin_line": 3965,
        "end_line": 3980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017482517482517483,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4266",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self: FrameOrSeries, *args, **kwargs)",
        "snippet": "    def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n        ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...                   index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...              'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self)",
        "begin_line": 4266,
        "end_line": 4512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_axes#4514",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(\n        self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy\n    ) -> FrameOrSeries:\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                copy=copy,\n                allow_dups=False,\n            )\n\n        return obj",
        "begin_line": 4514,
        "end_line": 4537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_with_indexers#4551",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
        "snippet": "    def _reindex_with_indexers(\n        self: FrameOrSeries,\n        reindexers,\n        fill_value=None,\n        copy: bool_t = False,\n        allow_dups: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4551,
        "end_line": 4586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5202",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self: FrameOrSeries, other, method=None, **kwargs)",
        "snippet": "    def __finalize__(\n        self: FrameOrSeries, other, method=None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5202,
        "end_line": 5222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012968486577616392,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5224",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name: str)",
        "snippet": "    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5224,
        "end_line": 5241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020529665366454526,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5243",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name: str, value)",
        "snippet": "    def __setattr__(self, name: str, value) -> None:\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5243,
        "end_line": 5282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014394702749388226,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5298",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5298,
        "end_line": 5306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5308",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5308,
        "end_line": 5314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013408420488066506,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5311",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._data = self._data.consolidate()",
        "begin_line": 5311,
        "end_line": 5312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013408420488066506,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_mixed_type#5339",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)",
        "begin_line": 5339,
        "end_line": 5341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002642706131078224,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.values#5380",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_numpy : Recommended alternative to this method.\n        DataFrame.index : Retrieve the index labels.\n        DataFrame.columns : Retrieving the column names.\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]], dtype=int64)\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)",
        "begin_line": 5380,
        "end_line": 5454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013917884481558804,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.dtypes#5487",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.dtypes(self)",
        "snippet": "    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'float': [1.0],\n        ...                    'int': [1],\n        ...                    'datetime': [pd.Timestamp('20180310')],\n        ...                    'string': ['foo']})\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[ns]\n        string              object\n        dtype: object\n        \"\"\"\n        from pandas import Series\n\n        return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
        "begin_line": 5487,
        "end_line": 5516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013848497438027975,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.astype#5530",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.astype(self: FrameOrSeries, dtype, copy: bool_t=True, errors: str='raise')",
        "snippet": "    def astype(\n        self: FrameOrSeries, dtype, copy: bool_t = True, errors: str = \"raise\"\n    ) -> FrameOrSeries:\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        casted : same type as caller\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype('int32').dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({'col1': 'int32'}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> cat_dtype = pd.api.types.CategoricalDtype(\n        ...     categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1, 2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors)\n\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument.\"\n                    )\n            results = []\n            for col_name, col in self.items():\n                if col_name in dtype:\n                    results.append(\n                        col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                    )\n                else:\n                    results.append(col.copy() if copy else col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: use iloc to handle duplicate column names\n            results = [\n                self.iloc[:, i].astype(dtype, copy=copy)\n                for i in range(len(self.columns))\n            ]\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n            return self._constructor(new_data).__finalize__(self)\n\n        # GH 19920: retain column metadata after concat\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result",
        "begin_line": 5530,
        "end_line": 5671,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016589250165892502,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5673",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self: FrameOrSeries, deep: bool_t=True)",
        "snippet": "    def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)",
        "begin_line": 5673,
        "end_line": 5779,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002420135527589545,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.fillna#5891",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None)",
        "snippet": "    def fillna(\n        self: FrameOrSeries,\n        value=None,\n        method=None,\n        axis=None,\n        inplace: bool_t = False,\n        limit=None,\n        downcast=None,\n    ) -> Optional[FrameOrSeries]:\n        \"\"\"\n        Fill NA/NaN values using the specified method.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame).  Values not\n            in the dict/Series/DataFrame will not be filled. This value cannot\n            be a list.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use next valid observation to fill gap.\n        axis : %(axes_single_arg)s\n            Axis along which to fill missing values.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            A dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible).\n\n        Returns\n        -------\n        %(klass)s or None\n            Object with missing values filled or None if ``inplace=True``.\n\n        See Also\n        --------\n        interpolate : Fill NaN values using interpolation.\n        reindex : Conform object to new index.\n        asfreq : Convert TimeSeries to specified frequency.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                   columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n        3  NaN  3.0 NaN  4\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n            A   B   C   D\n        0   0.0 2.0 0.0 0\n        1   3.0 4.0 0.0 1\n        2   0.0 0.0 0.0 5\n        3   0.0 3.0 0.0 4\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method='ffill')\n            A   B   C   D\n        0   NaN 2.0 NaN 0\n        1   3.0 4.0 NaN 1\n        2   3.0 4.0 NaN 5\n        3   3.0 3.0 NaN 4\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n        >>> df.fillna(value=values)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 2.0 1\n        2   0.0 1.0 2.0 5\n        3   0.0 3.0 2.0 4\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 NaN 1\n        2   NaN 1.0 NaN 5\n        3   NaN 3.0 NaN 4\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        value, method = validate_fillna_kwargs(value, method)\n\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        if value is None:\n\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                # need to downcast here because of all of the transposes\n                result._data = result._data.downcast()\n\n                return result\n\n            new_data = self._data.interpolate(\n                method=method,\n                axis=axis,\n                limit=limit,\n                inplace=inplace,\n                coerce=True,\n                downcast=downcast,\n            )\n        else:\n            if len(self._get_axis(axis)) == 0:\n                return self\n\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    value = create_series_with_explicit_dtype(\n                        value, dtype_if_empty=object\n                    )\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError(\n                        '\"value\" parameter must be a scalar, dict '\n                        \"or Series, but you passed a \"\n                        f'\"{type(value).__name__}\"'\n                    )\n\n                new_data = self._data.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError(\n                        \"Currently only can fill \"\n                        \"with dict/Series column \"\n                        \"by column\"\n                    )\n\n                result = self if inplace else self.copy()\n                for k, v in value.items():\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result if not inplace else None\n\n            elif not is_list_like(value):\n                new_data = self._data.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n            elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n                new_data = self.where(self.notna(), value)\n            else:\n                raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n        if inplace:\n            self._update_inplace(new_data)\n            return None\n        else:\n            return self._constructor(new_data).__finalize__(self)",
        "begin_line": 5891,
        "end_line": 6078,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.isna#7097",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.isna(self: FrameOrSeries)",
        "snippet": "    def isna(self: FrameOrSeries) -> FrameOrSeries:\n        return isna(self).__finalize__(self)",
        "begin_line": 7097,
        "end_line": 7098,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.align#8241",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ):\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, ABCSeries):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons(\n                    {c: self for c in other.columns}, **other._construct_axes_dict()\n                )\n                return df._align_frame(\n                    other,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n            elif isinstance(other, ABCSeries):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons(\n                    {c: other for c in self.columns}, **self._construct_axes_dict()\n                )\n                return self._align_frame(\n                    df,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, ABCDataFrame):\n            return self._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        elif isinstance(other, ABCSeries):\n            return self._align_series(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        else:  # pragma: no cover\n            raise TypeError(f\"unsupported type: {type(other)}\")",
        "begin_line": 8241,
        "end_line": 8321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002671653753673524,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._align_frame#8323",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
        "snippet": "    def _align_frame(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy: bool_t = True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n    ):\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if axis is None or axis == 0:\n            if not self.index.equals(other.index):\n                join_index, ilidx, iridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n        if axis is None or axis == 1:\n            if not is_series and not self.columns.equals(other.columns):\n                join_columns, clidx, cridx = self.columns.join(\n                    other.columns, how=join, level=level, return_indexers=True\n                )\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(\n            reindexers, copy=copy, fill_value=fill_value, allow_dups=True\n        )\n        # other must be always DataFrame\n        right = other._reindex_with_indexers(\n            {0: [join_index, iridx], 1: [join_columns, cridx]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=True,\n        )\n\n        if method is not None:\n            left = self._ensure_type(\n                left.fillna(method=method, axis=fill_axis, limit=limit)\n            )\n            right = self._ensure_type(\n                right.fillna(method=method, axis=fill_axis, limit=limit)\n            )\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)",
        "begin_line": 8323,
        "end_line": 8385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._align_series#8387",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
        "snippet": "    def _align_series(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy: bool_t = True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n    ):\n\n        is_series = isinstance(self, ABCSeries)\n\n        # series/series compat, other must always be a Series\n        if is_series:\n            if axis:\n                raise ValueError(\"cannot align series to a series other than axis 0\")\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._data\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(\n                        other.index, how=join, level=level, return_indexers=True\n                    )\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(\n                        other.index, how=join, level=level, return_indexers=True\n                    )\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError(\"Must specify axis=0 or 1\")\n\n            if copy and fdata is self._data:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notna(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            if is_datetime64tz_dtype(left.index):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)",
        "begin_line": 8387,
        "end_line": 8469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.shift#8869",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.shift(self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None)",
        "snippet": "    def shift(\n        self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None\n    ) -> FrameOrSeries:\n        if periods == 0:\n            return self.copy()\n\n        block_axis = self._get_block_manager_axis(axis)\n        if freq is None:\n            new_data = self._data.shift(\n                periods=periods, axis=block_axis, fill_value=fill_value\n            )\n        else:\n            return self.tshift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 8869,
        "end_line": 8883,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic._make_min_count_stat_function#10974",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also: str='', examples: str='')",
        "snippet": "def _make_min_count_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also: str = \"\", examples: str = \"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 10974,
        "end_line": 11019,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.stat_func#10987",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
        "snippet": "    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )",
        "begin_line": 10987,
        "end_line": 11017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function#11022",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also: str='', examples: str='')",
        "snippet": "def _make_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also: str = \"\", examples: str = \"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11022,
        "end_line": 11052,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11035",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )",
        "begin_line": 11035,
        "end_line": 11050,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic._make_logical_function#11172",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_logical_function(cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value)",
        "snippet": "def _make_logical_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
        "begin_line": 11172,
        "end_line": 11202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.generic.logical_func#11185",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
        "snippet": "    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )",
        "begin_line": 11185,
        "end_line": 11200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties.__init__#26",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties.__init__(self, data, orig)",
        "snippet": "    def __init__(self, data, orig):\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n            )\n\n        self._parent = data\n        self.orig = orig\n        self.name = getattr(data, \"name\", None)\n        self._freeze()",
        "begin_line": 26,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._get_values#37",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._get_values(self)",
        "snippet": "    def _get_values(self):\n        data = self._parent\n        if is_datetime64_dtype(data.dtype):\n            return DatetimeIndex(data, copy=False, name=self.name)\n\n        elif is_datetime64tz_dtype(data.dtype):\n            return DatetimeIndex(data, copy=False, name=self.name)\n\n        elif is_timedelta64_dtype(data.dtype):\n            return TimedeltaIndex(data, copy=False, name=self.name)\n\n        else:\n            if is_period_arraylike(data):\n                # TODO: use to_period_array\n                return PeriodArray(data, copy=False)\n            if is_datetime_arraylike(data):\n                return DatetimeIndex(data, copy=False, name=self.name)\n\n        raise TypeError(\n            f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n        )",
        "begin_line": 37,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._delegate_method#97",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        from pandas import Series\n\n        values = self._get_values()\n\n        method = getattr(values, name)\n        result = method(*args, **kwargs)\n\n        if not is_list_like(result):\n            return result\n\n        result = Series(result, index=self._parent.index, name=self.name)\n\n        # setting this object will show a SettingWithCopyWarning/Error\n        result._is_copy = (\n            \"modifications to a method of a datetimelike \"\n            \"object are not supported and are discarded. \"\n            \"Change values on the original.\"\n        )\n\n        return result",
        "begin_line": 97,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__#306",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties",
        "signature": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__(cls, data)",
        "snippet": "    def __new__(cls, data):\n        # CombinedDatetimelikeProperties isn't really instantiated. Instead\n        # we need to choose which parent (datetime or timedelta) is\n        # appropriate. Since we're checking the dtypes anyway, we'll just\n        # do all the validation here.\n        from pandas import Series\n\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                f\"cannot convert an object of type {type(data)} to a datetimelike index\"\n            )\n\n        orig = data if is_categorical_dtype(data) else None\n        if orig is not None:\n            data = Series(\n                orig.array,\n                name=orig.name,\n                copy=False,\n                dtype=orig.values.categories.dtype,\n            )\n\n        if is_datetime64_dtype(data.dtype):\n            return DatetimeProperties(data, orig)\n        elif is_datetime64tz_dtype(data.dtype):\n            return DatetimeProperties(data, orig)\n        elif is_timedelta64_dtype(data.dtype):\n            return TimedeltaProperties(data, orig)\n        elif is_period_arraylike(data):\n            return PeriodProperties(data, orig)\n        elif is_datetime_arraylike(data):\n            return DatetimeProperties(data, orig)\n\n        raise AttributeError(\"Can only use .dt accessor with datetimelike values\")",
        "begin_line": 306,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas._config.config._get_single_key#83",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat, silent)",
        "snippet": "def _get_single_key(pat, silent):\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0051813471502590676,
            "pseudo_dstar_susp": 0.005235602094240838,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "pandas._config.config._get_option#101",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat, silent=False)",
        "snippet": "def _get_option(pat, silent=False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011494252873563218,
            "pseudo_dstar_susp": 0.011494252873563218,
            "pseudo_tarantula_susp": 0.011494252873563218,
            "pseudo_op2_susp": 0.008064516129032258,
            "pseudo_barinel_susp": 0.011494252873563218
        }
    },
    {
        "name": "pandas._config.config._set_option#109",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs):\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 109,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028328611898017,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002840909090909091,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002840909090909091
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0051813471502590676,
            "pseudo_dstar_susp": 0.005235602094240838,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "pandas._config.config._select_options#535",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat)",
        "snippet": "def _select_options(pat):\n    \"\"\"returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 535,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011494252873563218,
            "pseudo_dstar_susp": 0.011494252873563218,
            "pseudo_tarantula_susp": 0.011494252873563218,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.011494252873563218
        }
    },
    {
        "name": "pandas._config.config._get_root#553",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key)",
        "snippet": "def _get_root(key):\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 553,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0051813471502590676,
            "pseudo_dstar_susp": 0.005235602094240838,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#568",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key)",
        "snippet": "def _get_deprecated_option(key):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 568,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0051813471502590676,
            "pseudo_dstar_susp": 0.005235602094240838,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#585",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key)",
        "snippet": "def _get_registered_option(key):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 585,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028328611898017,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002840909090909091,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002840909090909091
        }
    },
    {
        "name": "pandas._config.config._translate_key#596",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key)",
        "snippet": "def _translate_key(key):\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 596,
        "end_line": 606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0051813471502590676,
            "pseudo_dstar_susp": 0.005235602094240838,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#609",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key)",
        "snippet": "def _warn_if_deprecated(key):\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 609,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0051813471502590676,
            "pseudo_dstar_susp": 0.005235602094240838,
            "pseudo_tarantula_susp": 0.004975124378109453,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.004975124378109453
        }
    },
    {
        "name": "pandas._config.config.inner#807",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x):\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 807,
        "end_line": 816,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028328611898017,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002840909090909091,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002840909090909091
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#49",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 49,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028328611898017,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002840909090909091,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002840909090909091
        }
    },
    {
        "name": "pandas.conftest.configure_tests#72",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028328611898017,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002840909090909091,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002840909090909091
        }
    },
    {
        "name": "pandas.conftest.add_imports#80",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0028328611898017,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002840909090909091,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002840909090909091
        }
    },
    {
        "name": "pandas.conftest.all_arithmetic_operators#165",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.all_arithmetic_operators(request)",
        "snippet": "def all_arithmetic_operators(request):\n    \"\"\"\n    Fixture for dunder names for common arithmetic operations.\n    \"\"\"\n    return request.param",
        "begin_line": 165,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003403675970047651,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.closed#416",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.closed(request)",
        "snippet": "def closed(request):\n    \"\"\"\n    Fixture for trying all interval closed parameters.\n    \"\"\"\n    return request.param",
        "begin_line": 416,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019094901661256445,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.other_closed#424",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.other_closed(request)",
        "snippet": "def other_closed(request):\n    \"\"\"\n    Secondary closed fixture to allow parametrizing over all pairs of closed.\n    \"\"\"\n    return request.param",
        "begin_line": 424,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019094901661256445,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.nulls_fixture#432",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.nulls_fixture(request)",
        "snippet": "def nulls_fixture(request):\n    \"\"\"\n    Fixture for each null type in pandas.\n    \"\"\"\n    return request.param",
        "begin_line": 432,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002242152466367713,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.tz_naive_fixture#475",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_naive_fixture(request)",
        "snippet": "def tz_naive_fixture(request):\n    \"\"\"\n    Fixture for trying timezones including default (None): {0}\n    \"\"\"\n    return request.param",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001278935925310142,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.tz_aware_fixture#484",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_aware_fixture(request)",
        "snippet": "def tz_aware_fixture(request):\n    \"\"\"\n    Fixture for trying explicit timezones: {0}\n    \"\"\"\n    return request.param",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001462629808395495,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.any_real_dtype#674",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.any_real_dtype(request)",
        "snippet": "def any_real_dtype(request):\n    \"\"\"\n    Parameterized fixture for any (purely) real numeric dtype.\n\n    * int\n    * 'int8'\n    * 'uint8'\n    * 'int16'\n    * 'uint16'\n    * 'int32'\n    * 'uint32'\n    * 'int64'\n    * 'uint64'\n    * float\n    * 'float32'\n    * 'float64'\n    \"\"\"\n    return request.param",
        "begin_line": 674,
        "end_line": 691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016331863465621427,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.tick_classes#814",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tick_classes(request)",
        "snippet": "def tick_classes(request):\n    \"\"\"\n    Fixture for Tick based datetime offsets available for a time series.\n    \"\"\"\n    return request.param",
        "begin_line": 814,
        "end_line": 818,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002901915264074289,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.float_frame#859",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.float_frame()",
        "snippet": "def float_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    P7GACiRnxd -0.465578 -0.361863  0.886172 -0.053465\n    qZKh6afn8n -0.466693 -0.373773  0.266873  1.673901\n    tkp0r6Qble  0.148691 -0.059051  0.174817  1.598433\n    wP70WOCtv8  0.133045 -0.581994 -0.992240  0.261651\n    M2AeYQMnCz -1.207959 -0.185775  0.588206  0.563938\n    QEPzyGDYDo -0.381843 -0.758281  0.502575 -0.565053\n    r78Jwns6dn -0.653707  0.883127  0.682199  0.206159\n    ...              ...       ...       ...       ...\n    IHEGx9NO0T -0.277360  0.113021 -1.018314  0.196316\n    lPMj8K27FA -1.313667 -0.604776 -1.305618 -0.863999\n    qa66YMWQa5  1.110525  0.475310 -0.747865  0.032121\n    yOa0ATsmcE -0.431457  0.067094  0.096567 -0.264962\n    65znX3uRNG  1.528446  0.160416 -0.109635 -0.032987\n    eCOBvKqf3e  0.235281  1.622222  0.781255  0.392871\n    xSucinXxuV -1.263557  0.252799 -0.552247  0.400426\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getSeriesData())",
        "begin_line": 859,
        "end_line": 884,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.conftest.index_or_series#888",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.index_or_series(request)",
        "snippet": "def index_or_series(request):\n    \"\"\"\n    Fixture to parametrize over Index and Series, made necessary by a mypy\n    bug, giving an error:\n\n    List item 0 has incompatible type \"Type[Series]\"; expected \"Type[PandasObject]\"\n\n    See GH#29725\n    \"\"\"\n    return request.param",
        "begin_line": 888,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001798237727027513,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies.get_period_alias#56",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.get_period_alias(offset_str: str)",
        "snippet": "def get_period_alias(offset_str: str) -> Optional[str]:\n    \"\"\"\n    Alias to closest period strings BQ->Q etc.\n    \"\"\"\n    return _offset_to_period_map.get(offset_str, None)",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#74",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq) -> Optional[DateOffset]:\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset\n\n    Examples\n    --------\n    >>> to_offset('5min')\n    <5 * Minutes>\n\n    >>> to_offset('1D1H')\n    <25 * Hours>\n\n    >>> to_offset(('W', 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, 'B'))\n    <2 * BusinessDays>\n\n    >>> to_offset(datetime.timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = _get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            splitted = re.split(libfreqs.opattern, freq)\n            if splitted[-1] != \"\" and not splitted[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(\n                splitted[0::4], splitted[1::4], splitted[2::4]\n            ):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = _get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError):\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 74,
        "end_line": 182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004464285714285714,
            "pseudo_dstar_susp": 0.004464285714285714,
            "pseudo_tarantula_susp": 0.0045045045045045045,
            "pseudo_op2_susp": 0.004464285714285714,
            "pseudo_barinel_susp": 0.0045045045045045045
        }
    },
    {
        "name": "pandas.tseries.frequencies._get_offset#204",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._get_offset(name: str)",
        "snippet": "def _get_offset(name: str) -> DateOffset:\n    \"\"\"\n    Return DateOffset object associated with rule name.\n\n    Examples\n    --------\n    _get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError):\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name))\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 204,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004,
            "pseudo_dstar_susp": 0.004,
            "pseudo_tarantula_susp": 0.004032258064516129,
            "pseudo_op2_susp": 0.004,
            "pseudo_barinel_susp": 0.004032258064516129
        }
    },
    {
        "name": "pandas.tseries.frequencies.infer_freq#239",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.infer_freq(index, warn: bool=True)",
        "snippet": "def infer_freq(index, warn: bool = True) -> Optional[str]:\n    \"\"\"\n    Infer the most likely frequency given the input index. If the frequency is\n    uncertain, a warning will be printed.\n\n    Parameters\n    ----------\n    index : DatetimeIndex or TimedeltaIndex\n      if passed a Series will use the values of the series (NOT THE INDEX).\n    warn : bool, default True\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency\n        TypeError if the index is not datetime-like\n        ValueError if there are less than three values.\n    \"\"\"\n    import pandas as pd\n\n    if isinstance(index, ABCSeries):\n        values = index._values\n        if not (\n            is_datetime64_dtype(values)\n            or is_timedelta64_dtype(values)\n            or values.dtype == object\n        ):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible dtype \"\n                f\"on a Series of {index.dtype}\"\n            )\n        index = values\n\n    inferer: _FrequencyInferer\n    if is_period_arraylike(index):\n        raise TypeError(\n            \"PeriodIndex given. Check the `freq` attribute \"\n            \"instead of using infer_freq.\"\n        )\n    elif is_timedelta64_dtype(index):\n        # Allow TimedeltaIndex and TimedeltaArray\n        inferer = _TimedeltaFrequencyInferer(index, warn=warn)\n        return inferer.get_freq()\n\n    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):\n        if isinstance(index, (pd.Int64Index, pd.Float64Index)):\n            raise TypeError(\n                f\"cannot infer freq from a non-convertible index type {type(index)}\"\n            )\n        index = index.values\n\n    if not isinstance(index, pd.DatetimeIndex):\n        try:\n            index = pd.DatetimeIndex(index)\n        except AmbiguousTimeError:\n            index = pd.DatetimeIndex(index.asi8)\n\n    inferer = _FrequencyInferer(index, warn=warn)\n    return inferer.get_freq()",
        "begin_line": 239,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019634792852935403,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.__init__#305",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.__init__(self, index, warn: bool=True)",
        "snippet": "    def __init__(self, index, warn: bool = True):\n        self.index = index\n        self.values = index.asi8\n\n        # This moves the values, which are implicitly in UTC, to the\n        # the timezone so they are in local time\n        if hasattr(index, \"tz\"):\n            if index.tz is not None:\n                self.values = tz_convert(self.values, UTC, index.tz)\n\n        self.warn = warn\n\n        if len(index) < 3:\n            raise ValueError(\"Need at least 3 dates to infer frequency\")\n\n        self.is_monotonic = (\n            self.index._is_monotonic_increasing or self.index._is_monotonic_decreasing\n        )",
        "begin_line": 305,
        "end_line": 322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015105740181268882,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas#325",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas(self)",
        "snippet": "    def deltas(self):\n        return unique_deltas(self.values)",
        "begin_line": 325,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014001680201624196,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8#329",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)",
        "snippet": "    def deltas_asi8(self):\n        return unique_deltas(self.index.asi8)",
        "begin_line": 329,
        "end_line": 330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025588536335721597,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique#333",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return len(self.deltas) == 1",
        "begin_line": 333,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000143184421534937,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8#337",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)",
        "snippet": "    def is_unique_asi8(self):\n        return len(self.deltas_asi8) == 1",
        "begin_line": 337,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025588536335721597,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.get_freq#340",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.get_freq(self)",
        "snippet": "    def get_freq(self) -> Optional[str]:\n        \"\"\"\n        Find the appropriate frequency string to describe the inferred\n        frequency of self.values\n\n        Returns\n        -------\n        str or None\n        \"\"\"\n        if not self.is_monotonic or not self.index._is_unique:\n            return None\n\n        delta = self.deltas[0]\n        if _is_multiple(delta, _ONE_DAY):\n            return self._infer_daily_rule()\n\n        # Business hourly, maybe. 17: one day / 65: one weekend\n        if self.hour_deltas in ([1, 17], [1, 65], [1, 17, 65]):\n            return \"BH\"\n        # Possibly intraday frequency.  Here we use the\n        # original .asi8 values as the modified values\n        # will not work around DST transitions.  See #8772\n        elif not self.is_unique_asi8:\n            return None\n\n        delta = self.deltas_asi8[0]\n        if _is_multiple(delta, _ONE_HOUR):\n            # Hours\n            return _maybe_add_count(\"H\", delta / _ONE_HOUR)\n        elif _is_multiple(delta, _ONE_MINUTE):\n            # Minutes\n            return _maybe_add_count(\"T\", delta / _ONE_MINUTE)\n        elif _is_multiple(delta, _ONE_SECOND):\n            # Seconds\n            return _maybe_add_count(\"S\", delta / _ONE_SECOND)\n        elif _is_multiple(delta, _ONE_MILLI):\n            # Milliseconds\n            return _maybe_add_count(\"L\", delta / _ONE_MILLI)\n        elif _is_multiple(delta, _ONE_MICRO):\n            # Microseconds\n            return _maybe_add_count(\"U\", delta / _ONE_MICRO)\n        else:\n            # Nanoseconds\n            return _maybe_add_count(\"N\", delta)",
        "begin_line": 340,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025588536335721597,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.day_deltas#386",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)",
        "snippet": "    def day_deltas(self):\n        return [x / _ONE_DAY for x in self.deltas]",
        "begin_line": 386,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018782870022539445,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas#390",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)",
        "snippet": "    def hour_deltas(self):\n        return [x / _ONE_HOUR for x in self.deltas]",
        "begin_line": 390,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.fields#394",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.fields(self)",
        "snippet": "    def fields(self):\n        return build_field_sarray(self.values)",
        "begin_line": 394,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014240956992309884,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.rep_stamp#398",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.rep_stamp(self)",
        "snippet": "    def rep_stamp(self):\n        return Timestamp(self.values[0])",
        "begin_line": 398,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.month_position_check#401",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)",
        "snippet": "    def month_position_check(self):\n        return libresolution.month_position_check(self.fields, self.index.dayofweek)",
        "begin_line": 401,
        "end_line": 402,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017752529735487306,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.mdiffs#405",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)",
        "snippet": "    def mdiffs(self):\n        nmonths = self.fields[\"Y\"] * 12 + self.fields[\"M\"]\n        return unique_deltas(nmonths.astype(\"i8\"))",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001461133839859731,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.ydiffs#410",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)",
        "snippet": "    def ydiffs(self):\n        return unique_deltas(self.fields[\"Y\"].astype(\"i8\"))",
        "begin_line": 410,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014240956992309884,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule#413",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self) -> Optional[str]:\n        annual_rule = self._get_annual_rule()\n        if annual_rule:\n            nyears = self.ydiffs[0]\n            month = MONTH_ALIASES[self.rep_stamp.month]\n            alias = f\"{annual_rule}-{month}\"\n            return _maybe_add_count(alias, nyears)\n\n        quarterly_rule = self._get_quarterly_rule()\n        if quarterly_rule:\n            nquarters = self.mdiffs[0] / 3\n            mod_dict = {0: 12, 2: 11, 1: 10}\n            month = MONTH_ALIASES[mod_dict[self.rep_stamp.month % 3]]\n            alias = f\"{quarterly_rule}-{month}\"\n            return _maybe_add_count(alias, nquarters)\n\n        monthly_rule = self._get_monthly_rule()\n        if monthly_rule:\n            return _maybe_add_count(monthly_rule, self.mdiffs[0])\n\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                day = int_to_weekday[self.rep_stamp.weekday()]\n                return _maybe_add_count(f\"W-{day}\", days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)\n\n        if self._is_business_daily():\n            return \"B\"\n\n        wom_rule = self._get_wom_rule()\n        if wom_rule:\n            return wom_rule\n\n        return None",
        "begin_line": 413,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule#451",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)",
        "snippet": "    def _get_annual_rule(self) -> Optional[str]:\n        if len(self.ydiffs) > 1:\n            return None\n\n        if len(unique(self.fields[\"M\"])) > 1:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"AS\", \"bs\": \"BAS\", \"ce\": \"A\", \"be\": \"BA\"}.get(pos_check)",
        "begin_line": 451,
        "end_line": 459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017752529735487306,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule#461",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)",
        "snippet": "    def _get_quarterly_rule(self) -> Optional[str]:\n        if len(self.mdiffs) > 1:\n            return None\n\n        if not self.mdiffs[0] % 3 == 0:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"QS\", \"bs\": \"BQS\", \"ce\": \"Q\", \"be\": \"BQ\"}.get(pos_check)",
        "begin_line": 461,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018828845791752966,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule#471",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)",
        "snippet": "    def _get_monthly_rule(self) -> Optional[str]:\n        if len(self.mdiffs) > 1:\n            return None\n        pos_check = self.month_position_check()\n        return {\"cs\": \"MS\", \"bs\": \"BMS\", \"ce\": \"M\", \"be\": \"BM\"}.get(pos_check)",
        "begin_line": 471,
        "end_line": 475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018828845791752966,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily#477",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily(self)",
        "snippet": "    def _is_business_daily(self) -> bool:\n        # quick check: cannot be business daily\n        if self.day_deltas != [1, 3]:\n            return False\n\n        # probably business daily, but need to confirm\n        first_weekday = self.index[0].weekday()\n        shifts = np.diff(self.index.asi8)\n        shifts = np.floor_divide(shifts, _ONE_DAY)\n        weekdays = np.mod(first_weekday + np.cumsum(shifts), 7)\n        return np.all(\n            ((weekdays == 0) & (shifts == 3))\n            | ((weekdays > 0) & (weekdays <= 4) & (shifts == 1))\n        )",
        "begin_line": 477,
        "end_line": 490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule#492",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_wom_rule(self)",
        "snippet": "    def _get_wom_rule(self) -> Optional[str]:\n        #         wdiffs = unique(np.diff(self.index.week))\n        # We also need -47, -49, -48 to catch index spanning year boundary\n        #     if not lib.ismember(wdiffs, set([4, 5, -47, -49, -48])).all():\n        #         return None\n\n        weekdays = unique(self.index.weekday)\n        if len(weekdays) > 1:\n            return None\n\n        week_of_months = unique((self.index.day - 1) // 7)\n        # Only attempt to infer up to WOM-4. See #9425\n        week_of_months = week_of_months[week_of_months < 4]\n        if len(week_of_months) == 0 or len(week_of_months) > 1:\n            return None\n\n        # get which week\n        week = week_of_months[0] + 1\n        wd = int_to_weekday[weekdays[0]]\n\n        return f\"WOM-{week}{wd}\"",
        "begin_line": 492,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002173913043478261,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._TimedeltaFrequencyInferer._infer_daily_rule#516",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._TimedeltaFrequencyInferer",
        "signature": "pandas.tseries.frequencies._TimedeltaFrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self):\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                wd = int_to_weekday[self.rep_stamp.weekday()]\n                alias = f\"W-{wd}\"\n                return _maybe_add_count(alias, days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)",
        "begin_line": 516,
        "end_line": 525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022841480127912289,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._is_multiple#528",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._is_multiple(us, mult: int)",
        "snippet": "def _is_multiple(us, mult: int) -> bool:\n    return us % mult == 0",
        "begin_line": 528,
        "end_line": 529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014001680201624196,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.tseries.frequencies._maybe_add_count#532",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._maybe_add_count(base: str, count: float)",
        "snippet": "def _maybe_add_count(base: str, count: float) -> str:\n    if count != 1:\n        assert count == int(count)\n        count = int(count)\n        return f\"{count}{base}\"\n    else:\n        return base",
        "begin_line": 532,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002671653753673524,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim#332",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return self._data.ndim",
        "begin_line": 332,
        "end_line": 333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012468827930174563,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape#336",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape(self)",
        "snippet": "    def shape(self):\n        return self._data.shape",
        "begin_line": 336,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012795905310300704,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.reshape#339",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.reshape(self, *args, **kwargs)",
        "snippet": "    def reshape(self, *args, **kwargs):\n        # Note: we drop any freq\n        data = self._data.reshape(*args, **kwargs)\n        return type(self)(data, dtype=self.dtype)",
        "begin_line": 339,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020529665366454526,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ravel#344",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.ravel(self, *args, **kwargs)",
        "snippet": "    def ravel(self, *args, **kwargs):\n        # Note: we drop any freq\n        data = self._data.ravel(*args, **kwargs)\n        return type(self)(data, dtype=self.dtype)",
        "begin_line": 344,
        "end_line": 347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002063557573256294,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#356",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 356,
        "end_line": 360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000138811771238201,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__#362",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return (self._box_func(v) for v in self.asi8)",
        "begin_line": 362,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020024028834601522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#366",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 366,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035087719298245615,
            "pseudo_dstar_susp": 0.0035087719298245615,
            "pseudo_tarantula_susp": 0.0035335689045936395,
            "pseudo_op2_susp": 0.0035087719298245615,
            "pseudo_barinel_susp": 0.0035335689045936395
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values#379",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self):\n        return self._data",
        "begin_line": 379,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013101008777675882,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#406",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 406,
        "end_line": 410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size#413",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"The number of elements in this array.\"\"\"\n        return np.prod(self.shape)",
        "begin_line": 413,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017686593562079943,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#417",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 417,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001180080245456691,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#420",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        is_int = lib.is_integer(key)\n        if lib.is_scalar(key) and not is_int:\n            raise IndexError(\n                \"only integers, slices (`:`), ellipsis (`...`), \"\n                \"numpy.newaxis (`None`) and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n\n        getitem = self._data.__getitem__\n        if is_int:\n            val = getitem(key)\n            if lib.is_scalar(val):\n                # i.e. self.ndim == 1\n                return self._box_func(val)\n            return type(self)(val, dtype=self.dtype)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_array_indexer(self, key)\n            if key.all():\n                key = slice(0, None, None)\n            else:\n                key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n\n        is_period = is_period_dtype(self)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n\n        result = getitem(key)\n        if result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            if is_period:\n                return self._simple_new(result, dtype=self.dtype, freq=freq)\n            return result\n\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 420,
        "end_line": 472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034904013961605586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__#474",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__(self, key: Union[int, Sequence[int], Sequence[bool], slice], value: Union[NaTType, Any, Sequence[Any]])",
        "snippet": "    def __setitem__(\n        self,\n        key: Union[int, Sequence[int], Sequence[bool], slice],\n        value: Union[NaTType, Any, Sequence[Any]],\n    ) -> None:\n        # I'm fudging the types a bit here. \"Any\" above really depends\n        # on type(self). For PeriodArray, it's Period (or stuff coercible\n        # to a period in from_sequence). For DatetimeArray, it's Timestamp...\n        # I don't know if mypy can do that, possibly with Generics.\n        # https://mypy.readthedocs.io/en/latest/generics.html\n        if lib.is_scalar(value) and not isna(value):\n            value = com.maybe_box_datetimelike(value)\n\n        if is_list_like(value):\n            is_slice = isinstance(key, slice)\n\n            if lib.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n\n            if not is_slice:\n                key = cast(Sequence, key)\n                if len(key) != len(value) and not com.is_bool_indexer(key):\n                    msg = (\n                        f\"shape mismatch: value array of length '{len(key)}' \"\n                        \"does not match indexing result of length \"\n                        f\"'{len(value)}'.\"\n                    )\n                    raise ValueError(msg)\n                elif not len(key):\n                    return\n\n            value = type(self)._from_sequence(value, dtype=self.dtype)\n            self._check_compatible_with(value, setitem=True)\n            value = value.asi8\n        elif isinstance(value, self._scalar_type):\n            self._check_compatible_with(value, setitem=True)\n            value = self._unbox_scalar(value)\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            value = iNaT\n        else:\n            msg = (\n                f\"'value' should be a '{self._scalar_type.__name__}', 'NaT', \"\n                f\"or array of those. Got '{type(value).__name__}' instead.\"\n            )\n            raise TypeError(msg)\n        self._data[key] = value\n        self._maybe_clear_freq()",
        "begin_line": 474,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00033783783783783786,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#527",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        from pandas import Categorical\n\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 527,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#565",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 565,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00819672131147541,
            "pseudo_dstar_susp": 0.00819672131147541,
            "pseudo_tarantula_susp": 0.00819672131147541,
            "pseudo_op2_susp": 0.006289308176100629,
            "pseudo_barinel_susp": 0.00819672131147541
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take#596",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take(self, indices, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None):\n        if allow_fill:\n            fill_value = self._validate_fill_value(fill_value)\n\n        new_values = take(\n            self.asi8, indices, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        return type(self)(new_values, dtype=self.dtype)",
        "begin_line": 596,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#615",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)",
        "snippet": "    def copy(self):\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 615,
        "end_line": 617,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001278281989006775,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna#726",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)",
        "snippet": "    def isna(self):\n        return self._isnan",
        "begin_line": 726,
        "end_line": 727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001987281399046105,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#730",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 730,
        "end_line": 734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004651162790697674,
            "pseudo_dstar_susp": 0.004651162790697674,
            "pseudo_tarantula_susp": 0.005555555555555556,
            "pseudo_op2_susp": 0.004608294930875576,
            "pseudo_barinel_susp": 0.005555555555555556
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#737",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 737,
        "end_line": 741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004694835680751174,
            "pseudo_dstar_susp": 0.004694835680751174,
            "pseudo_tarantula_susp": 0.0056179775280898875,
            "pseudo_op2_susp": 0.004651162790697674,
            "pseudo_barinel_susp": 0.0056179775280898875
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#743",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 743,
        "end_line": 767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#820",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 820,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000117813383600377,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#827",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self, value)",
        "snippet": "    def freq(self, value):\n        if value is not None:\n            value = frequencies.to_offset(value)\n            self._validate_frequency(self, value)\n\n        self._freq = value",
        "begin_line": 827,
        "end_line": 832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr#835",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if its set, otherwise None\n        \"\"\"\n        if self.freq is None:\n            return None\n        return self.freq.freqstr",
        "begin_line": 835,
        "end_line": 841,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.01639344262295082,
            "pseudo_dstar_susp": 0.01639344262295082,
            "pseudo_tarantula_susp": 0.01639344262295082,
            "pseudo_op2_susp": 0.01020408163265306,
            "pseudo_barinel_susp": 0.01639344262295082
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#844",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tryies to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        if self.ndim != 1:\n            return None\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 844,
        "end_line": 855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002598752598752599,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency#869",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency(cls, index, freq, **kwargs)",
        "snippet": "    def _validate_frequency(cls, index, freq, **kwargs):\n        \"\"\"\n        Validate that a frequency is compatible with the values of a given\n        Datetime Array/Index or Timedelta Array/Index\n\n        Parameters\n        ----------\n        index : DatetimeIndex or TimedeltaIndex\n            The index on which to determine if the given frequency is valid\n        freq : DateOffset\n            The frequency to validate\n        \"\"\"\n        if is_period_dtype(cls):\n            # Frequency validation is not meaningful for Period Array/Index\n            return None\n\n        inferred = index.inferred_freq\n        if index.size == 0 or inferred == freq.freqstr:\n            return None\n\n        try:\n            on_freq = cls._generate_range(\n                start=index[0], end=None, periods=len(index), freq=freq, **kwargs\n            )\n            if not np.array_equal(index.asi8, on_freq.asi8):\n                raise ValueError\n        except ValueError as e:\n            if \"non-fixed\" in str(e):\n                # non-fixed frequencies are not meaningful for timedelta64;\n                #  we retain that error message\n                raise e\n            # GH#11587 the main way this is reached is if the `np.array_equal`\n            #  check above is False.  This can also be reached if index[0]\n            #  is `NaT`, in which case the call to `cls._generate_range` will\n            #  raise a ValueError, which we re-raise with a more targeted\n            #  message.\n            raise ValueError(\n                f\"Inferred frequency {inferred} from passed values \"\n                f\"does not conform to passed frequency {freq.freqstr}\"\n            )",
        "begin_line": 869,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020764119601328904,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_monotonic_increasing#914",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_monotonic_increasing(self)",
        "snippet": "    def _is_monotonic_increasing(self):\n        return algos.is_monotonic(self.asi8, timelike=True)[0]",
        "begin_line": 914,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019634792852935403,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_monotonic_decreasing#918",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_monotonic_decreasing(self)",
        "snippet": "    def _is_monotonic_decreasing(self):\n        return algos.is_monotonic(self.asi8, timelike=True)[1]",
        "begin_line": 918,
        "end_line": 919,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002231644722160232,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_unique#922",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._is_unique(self)",
        "snippet": "    def _is_unique(self):\n        return len(unique1d(self.asi8)) == len(self)",
        "begin_line": 922,
        "end_line": 923,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022558087074216106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_datetimelike_scalar#943",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_datetimelike_scalar(self, other)",
        "snippet": "    def _add_datetimelike_scalar(self, other):\n        # Overridden by TimedeltaArray\n        raise TypeError(f\"cannot add {type(self).__name__} and {type(other).__name__}\")",
        "begin_line": 943,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018487705675725643,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_datetimelike_scalar#949",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_datetimelike_scalar(self, other)",
        "snippet": "    def _sub_datetimelike_scalar(self, other):\n        # Overridden by DatetimeArray\n        assert other is not NaT\n        raise TypeError(f\"cannot subtract a datelike from a {type(self).__name__}\")",
        "begin_line": 949,
        "end_line": 952,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018532246108228317,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_period#956",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_period(self, other)",
        "snippet": "    def _sub_period(self, other):\n        # Overridden by PeriodArray\n        raise TypeError(f\"cannot subtract Period from a {type(self).__name__}\")",
        "begin_line": 956,
        "end_line": 958,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002492522432701894,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta#963",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta(self, other)",
        "snippet": "    def _add_delta(self, other):\n        \"\"\"\n        Add a timedelta-like, Tick or TimedeltaIndex-like object\n        to self, yielding an int64 numpy array\n\n        Parameters\n        ----------\n        delta : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : ndarray[int64]\n\n        Notes\n        -----\n        The result's name is set outside of _add_delta by the calling\n        method (__add__ or __sub__), if necessary (i.e. for Indexes).\n        \"\"\"\n        if isinstance(other, (Tick, timedelta, np.timedelta64)):\n            new_values = self._add_timedeltalike_scalar(other)\n        elif is_timedelta64_dtype(other):\n            # ndarray[timedelta64] or TimedeltaArray/index\n            new_values = self._add_delta_tdi(other)\n\n        return new_values",
        "begin_line": 963,
        "end_line": 988,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001737619461337967,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#990",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n        return the i8 result view\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(self.shape, dtype=\"i8\")\n            new_values[:] = iNaT\n            return new_values\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n        return new_values.view(\"i8\")",
        "begin_line": 990,
        "end_line": 1006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta_tdi#1008",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta_tdi(self, other)",
        "snippet": "    def _add_delta_tdi(self, other):\n        \"\"\"\n        Add a delta of a TimedeltaIndex\n        return the i8 result view\n        \"\"\"\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            # ndarray[timedelta64]; wrap in TimedeltaIndex for op\n            from pandas.core.arrays import TimedeltaArray\n\n            other = TimedeltaArray._from_sequence(other)\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        new_values = checked_add_with_arr(\n            self_i8, other_i8, arr_mask=self._isnan, b_mask=other._isnan\n        )\n        if self._hasnans or other._hasnans:\n            mask = (self._isnan) | (other._isnan)\n            new_values[mask] = iNaT\n        return new_values.view(\"i8\")",
        "begin_line": 1008,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_nat#1032",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_nat(self)",
        "snippet": "    def _add_nat(self):\n        \"\"\"\n        Add pd.NaT to self\n        \"\"\"\n        if is_period_dtype(self):\n            raise TypeError(\n                f\"Cannot add {type(self).__name__} and {type(NaT).__name__}\"\n            )\n\n        # GH#19124 pd.NaT is treated like a timedelta for both timedelta\n        # and datetime dtypes\n        result = np.zeros(self.shape, dtype=np.int64)\n        result.fill(iNaT)\n        return type(self)(result, dtype=self.dtype, freq=None)",
        "begin_line": 1032,
        "end_line": 1045,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_nat#1047",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_nat(self)",
        "snippet": "    def _sub_nat(self):\n        \"\"\"\n        Subtract pd.NaT from self\n        \"\"\"\n        # GH#19124 Timedelta - datetime is not in general well-defined.\n        # We make an exception for pd.NaT, which in this case quacks\n        # like a timedelta.\n        # For datetime64 dtypes by convention we treat NaT as a datetime, so\n        # this subtraction returns a timedelta64 dtype.\n        # For period dtype, timedelta64 is a close-enough return dtype.\n        result = np.zeros(self.shape, dtype=np.int64)\n        result.fill(iNaT)\n        return result.view(\"timedelta64[ns]\")",
        "begin_line": 1047,
        "end_line": 1059,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034423407917383823,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_period_array#1061",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._sub_period_array(self, other)",
        "snippet": "    def _sub_period_array(self, other):\n        \"\"\"\n        Subtract a Period Array/Index from self.  This is only valid if self\n        is itself a Period Array/Index, raises otherwise.  Both objects must\n        have the same frequency.\n\n        Parameters\n        ----------\n        other : PeriodIndex or PeriodArray\n\n        Returns\n        -------\n        result : np.ndarray[object]\n            Array of DateOffset objects; nulls represented by NaT.\n        \"\"\"\n        if not is_period_dtype(self):\n            raise TypeError(\n                f\"cannot subtract {other.dtype}-dtype from {type(self).__name__}\"\n            )\n\n        if self.freq != other.freq:\n            msg = DIFFERENT_FREQ.format(\n                cls=type(self).__name__, own_freq=self.freqstr, other_freq=other.freqstr\n            )\n            raise IncompatibleFrequency(msg)\n\n        new_values = checked_add_with_arr(\n            self.asi8, -other.asi8, arr_mask=self._isnan, b_mask=other._isnan\n        )\n\n        new_values = np.array([self.freq.base * x for x in new_values])\n        if self._hasnans or other._hasnans:\n            mask = (self._isnan) | (other._isnan)\n            new_values[mask] = NaT\n        return new_values",
        "begin_line": 1061,
        "end_line": 1095,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._addsub_object_array#1097",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._addsub_object_array(self, other: np.ndarray, op)",
        "snippet": "    def _addsub_object_array(self, other: np.ndarray, op):\n        \"\"\"\n        Add or subtract array-like of DateOffset objects\n\n        Parameters\n        ----------\n        other : np.ndarray[object]\n        op : {operator.add, operator.sub}\n\n        Returns\n        -------\n        result : same class as self\n        \"\"\"\n        assert op in [operator.add, operator.sub]\n        if len(other) == 1:\n            return op(self, other[0])\n\n        warnings.warn(\n            \"Adding/subtracting array of DateOffsets to \"\n            f\"{type(self).__name__} not vectorized\",\n            PerformanceWarning,\n        )\n\n        # For EA self.astype('O') returns a numpy array, not an Index\n        left = self.astype(\"O\")\n\n        res_values = op(left, np.array(other))\n        kwargs = {}\n        if not is_period_dtype(self):\n            kwargs[\"freq\"] = \"infer\"\n        try:\n            res = type(self)._from_sequence(res_values, **kwargs)\n        except ValueError:\n            # e.g. we've passed a Timestamp to TimedeltaArray\n            res = res_values\n        return res",
        "begin_line": 1097,
        "end_line": 1132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._time_shift#1134",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._time_shift(self, periods, freq=None)",
        "snippet": "    def _time_shift(self, periods, freq=None):\n        \"\"\"\n        Shift each value by `periods`.\n\n        Note this is different from ExtensionArray.shift, which\n        shifts the *position* of each element, padding the end with\n        missing values.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to shift by.\n        freq : pandas.DateOffset, pandas.Timedelta, or str\n            Frequency increment to shift by.\n        \"\"\"\n        if freq is not None and freq != self.freq:\n            if isinstance(freq, str):\n                freq = frequencies.to_offset(freq)\n            offset = periods * freq\n            result = self + offset\n            return result\n\n        if periods == 0:\n            # immutable so OK\n            return self.copy()\n\n        if self.freq is None:\n            raise NullFrequencyError(\"Cannot shift with no freq\")\n\n        start = self[0] + periods * self.freq\n        end = self[-1] + periods * self.freq\n\n        # Note: in the DatetimeTZ case, _generate_range will infer the\n        #  appropriate timezone from `start` and `end`, so tz does not need\n        #  to be passed explicitly.\n        return self._generate_range(start=start, end=end, periods=None, freq=self.freq)",
        "begin_line": 1134,
        "end_line": 1169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__#1172",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._add_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._add_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(other)\n        elif is_object_dtype(other):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.add)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.add)\n        else:\n            # Includes Categorical, other ExtensionArrays\n            # For PeriodDtype, if self is a TimedeltaArray and other is a\n            #  PeriodArray with  a timedelta-like (i.e. Tick) freq, this\n            #  operation is valid.  Defer to the PeriodArray implementation.\n            #  In remaining cases, this will end up raising TypeError.\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1172,
        "end_line": 1217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__radd__#1219",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__radd__(self, other)",
        "snippet": "    def __radd__(self, other):\n        # alias for __add__\n        return self.__add__(other)",
        "begin_line": 1219,
        "end_line": 1221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015042117930204573,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1224",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(-other)\n        elif is_object_dtype(other):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.sub)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1224,
        "end_line": 1271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__rsub__#1273",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__rsub__(self, other)",
        "snippet": "    def __rsub__(self, other):\n        if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n            # ndarray[datetime64] cannot be subtracted from self, so\n            # we need to wrap in DatetimeArray/Index and flip the operation\n            if lib.is_scalar(other):\n                # i.e. np.datetime64 object\n                return Timestamp(other) - self\n            if not isinstance(other, DatetimeLikeArrayMixin):\n                # Avoid down-casting DatetimeIndex\n                from pandas.core.arrays import DatetimeArray\n\n                other = DatetimeArray(other)\n            return other - self\n        elif (\n            is_datetime64_any_dtype(self.dtype)\n            and hasattr(other, \"dtype\")\n            and not is_datetime64_any_dtype(other.dtype)\n        ):\n            # GH#19959 datetime - datetime is well-defined as timedelta,\n            # but any other type - datetime is not well-defined.\n            raise TypeError(\n                f\"cannot subtract {type(self).__name__} from {type(other).__name__}\"\n            )\n        elif is_period_dtype(self.dtype) and is_timedelta64_dtype(other):\n            # TODO: Can we simplify/generalize these cases at all?\n            raise TypeError(f\"cannot subtract {type(self).__name__} from {other.dtype}\")\n        elif is_timedelta64_dtype(self.dtype):\n            if lib.is_integer(other) or is_integer_dtype(other):\n                # need to subtract before negating, since that flips freq\n                # -self flips self.freq, messing up results\n                return -(self - other)\n\n            return (-self) + other\n\n        return -(self - other)",
        "begin_line": 1273,
        "end_line": 1307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__#1309",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iadd__(self, other)",
        "snippet": "    def __iadd__(self, other):  # type: ignore\n        result = self + other\n        self[:] = result[:]\n\n        if not is_period_dtype(self):\n            # restore freq, which is invalidated by setitem\n            self._freq = result._freq\n        return self",
        "begin_line": 1309,
        "end_line": 1316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002242152466367713,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__isub__#1318",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__isub__(self, other)",
        "snippet": "    def __isub__(self, other):  # type: ignore\n        result = self - other\n        self[:] = result[:]\n\n        if not is_period_dtype(self):\n            # restore freq, which is invalidated by setitem\n            self._freq = result._freq\n        return self",
        "begin_line": 1318,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1482",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(f\"periods must be a number, got {periods}\")\n    return periods",
        "begin_line": 1482,
        "end_line": 1505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012746972594008922,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1508",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1508,
        "end_line": 1538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012236906510034264,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1541",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                f\"Inferred frequency {inferred_freq} from passed \"\n                \"values does not conform to passed frequency \"\n                f\"{freq.freqstr}\"\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1541,
        "end_line": 1573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013083867591259977,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1576",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1576,
        "end_line": 1600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001279263144428809,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#53",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        name = maybe_extract_name(name, data, cls)\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 53,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001669727834362999,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#80",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            raise ValueError(\n                f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            )",
        "begin_line": 80,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013819789939192924,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#104",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None and not self._can_hold_na:\n            # Ensure we are not returning an Int64Index with float data:\n            return self._shallow_copy_with_infer(values=values, **kwargs)\n        return super()._shallow_copy(values=values, **kwargs)",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017627357659086903,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting#139",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Subclasses need to override this only if the process of casting data\n        from some accepted dtype to the internal dtype(s) bears the risk of\n        truncation (e.g. float to int).\n        \"\"\"\n        pass",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000275178866263071,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#152",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 152,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012208521548040532,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.insert#159",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        # treat NA values as nans:\n        if is_scalar(item) and isna(item):\n            item = self._na_value\n        return super().insert(loc, item)",
        "begin_line": 159,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._union#165",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        # Right now, we treat union(int, float) a bit special.\n        # See https://github.com/pandas-dev/pandas/issues/26778 for discussion\n        # We may change union(int, float) to go to object.\n        # float | [u]int -> float  (the special case)\n        # <T>   | <T>    -> T\n        # <T>   | <U>    -> object\n        needs_cast = (is_integer_dtype(self.dtype) and is_float_dtype(other.dtype)) or (\n            is_integer_dtype(other.dtype) and is_float_dtype(self.dtype)\n        )\n        if needs_cast:\n            first = self.astype(\"float\")\n            second = other.astype(\"float\")\n            return first._union(second, sort)\n        else:\n            return super()._union(other, sort)",
        "begin_line": 165,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.__contains__#224",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n        hash(key)\n        try:\n            if is_float(key) and int(key) != key:\n                return False\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 224,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019782393669634025,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index.inferred_type#246",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``Int64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 246,
        "end_line": 250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012779552715654952,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer#258",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # don't coerce ilocs to integers\n        if kind != \"iloc\":\n            key = self._maybe_cast_indexer(key)\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018989745537409798,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._wrap_joined_index#266",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        return Int64Index(joined, name=name)",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting#271",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as ints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.signedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017355085039916696,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other#279",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        return super()._is_compatible_with_other(other) or all(\n            isinstance(type(obj), (ABCInt64Index, ABCFloat64Index, ABCRangeIndex))\n            for obj in [self, other]\n        )",
        "begin_line": 279,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.UInt64Index.inferred_type#303",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.UInt64Index",
        "signature": "pandas.core.indexes.numeric.UInt64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``UInt64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 303,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.UInt64Index._assert_safe_casting#349",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.UInt64Index",
        "signature": "pandas.core.indexes.numeric.UInt64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as uints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.unsignedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.inferred_type#380",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'floating' for ``Float64Index``\n        \"\"\"\n        return \"floating\"",
        "begin_line": 380,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017001020061203673,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.astype#387",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if needs_i8_conversion(dtype):\n            raise TypeError(\n                f\"Cannot convert Float64Index to dtype {dtype}; integer \"\n                \"values are required for conversion\"\n            )\n        elif is_integer_dtype(dtype) and not is_extension_array_dtype(dtype):\n            # TODO(jreback); this can change once we have an EA Index type\n            # GH 13149\n            arr = astype_nansafe(self.values, dtype=dtype)\n            return Int64Index(arr)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 387,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002671653753673524,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.equals#450",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self is other:\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        # need to compare nans locations and make sure that they are the same\n        # since nans don't compare equal this is a bit tricky\n        try:\n            if not isinstance(other, Float64Index):\n                other = self._constructor(other)\n            if not is_dtype_equal(self.dtype, other.dtype) or self.shape != other.shape:\n                return False\n            left, right = self._ndarray_values, other._ndarray_values\n            return ((left == right) | (self._isnan & other._isnan)).all()\n        except (TypeError, ValueError):\n            return False",
        "begin_line": 450,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017001020061203673,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.is_unique#507",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return super().is_unique and self._nan_idxs.size < 2",
        "begin_line": 507,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#62",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : str or dtype\n    \"\"\"\n\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), \"object\"\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), \"object\"\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall through to here\n        return ensure_object(values), \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\"",
        "begin_line": 62,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#169",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 169,
        "end_line": 195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#198",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\", \"unicode\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 198,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001508523155830442,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._get_hashtable_algo#222",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_hashtable_algo(values)",
        "snippet": "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    htable : HashTable subclass\n    values : ndarray\n    \"\"\"\n    values, _ = _ensure_data(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables[ndtype]\n    return htable, values",
        "begin_line": 222,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015316281206922958,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#240",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 240,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#248",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#257",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 257,
        "end_line": 278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.unique#286",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.unique(values)",
        "snippet": "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique\n    Series.unique\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, values = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques",
        "begin_line": 286,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015316281206922958,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#449",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None)",
        "snippet": "def _factorize_array(\n    values, na_sentinel: int = -1, size_hint=None, na_value=None\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Factorize an array-like to codes and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passsed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n\n    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, codes = table.factorize(values, na_sentinel=na_sentinel, na_value=na_value)\n\n    codes = ensure_platform_int(codes)\n    return codes, uniques",
        "begin_line": 449,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#601",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, na_sentinel: int=-1, size_hint: Optional[int]=None)",
        "snippet": "def factorize(\n    values, sort: bool = False, na_sentinel: int = -1, size_hint: Optional[int] = None\n) -> Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]:\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values):\n        values = extract_array(values)\n        codes, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        codes, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        uniques, codes = safe_sort(\n            uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return codes, uniques",
        "begin_line": 601,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#901",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 901,
        "end_line": 974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.wrapper#1269",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.wrapper(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def wrapper(arr, indexer, out, fill_value=np.nan):\n        if arr_dtype is not None:\n            arr = arr.view(arr_dtype)\n        if out_dtype is not None:\n            out = out.view(out_dtype)\n        if fill_wrap is not None:\n            fill_value = fill_wrap(fill_value)\n        f(arr, indexer, out, fill_value=fill_value)",
        "begin_line": 1269,
        "end_line": 1276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._take_nd_object#1312",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._take_nd_object(arr, indexer, out, axis: int, fill_value, mask_info)",
        "snippet": "def _take_nd_object(arr, indexer, out, axis: int, fill_value, mask_info):\n    if mask_info is not None:\n        mask, needs_masking = mask_info\n    else:\n        mask = indexer == -1\n        needs_masking = mask.any()\n    if arr.dtype != out.dtype:\n        arr = arr.astype(out.dtype)\n    if arr.shape[axis] > 0:\n        arr.take(ensure_platform_int(indexer), axis=axis, out=out)\n    if needs_masking:\n        outindexer = [slice(None)] * arr.ndim\n        outindexer[axis] = mask\n        out[tuple(outindexer)] = fill_value",
        "begin_line": 1312,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1429",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim: int, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(\n    ndim: int, arr_dtype, out_dtype, axis: int = 0, mask_info=None\n):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1429,
        "end_line": 1462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.func2#1456",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.func2(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )",
        "begin_line": 1456,
        "end_line": 1460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.take#1465",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take(arr, indices, axis: int=0, allow_fill: bool=False, fill_value=None)",
        "snippet": "def take(arr, indices, axis: int = 0, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
        "begin_line": 1465,
        "end_line": 1555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1558",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis: int=0, out=None, fill_value=np.nan, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr, indexer, axis: int = 0, out=None, fill_value=np.nan, allow_fill: bool = True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n    mask_info = None\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                mask = indexer == -1\n                needs_masking = mask.any()\n                mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._data.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1558,
        "end_line": 1659,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.safe_sort#1907",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.safe_sort(values, codes=None, na_sentinel: int=-1, assume_unique: bool=False, verify: bool=True)",
        "snippet": "def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,\n    verify: bool = True,\n) -> Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``codes``.\n\n    ``values`` should be unique if ``codes`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``codes`` is not None.\n    codes : list_like, optional\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``codes`` to mark \"not found\".\n        Ignored when ``codes`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``codes`` is None.\n    verify : bool, default True\n        Check if codes are out of bound for the values and put out of bound\n        codes equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound codes. Ignored when ``codes`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_codes : ndarray\n        Reordered ``codes``; returned when ``codes`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``codes`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``codes`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # codes:\n\n    if codes is None:\n        return ordered\n\n    if not is_list_like(codes):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to \"\n            \"be passed to safe_sort as codes\"\n        )\n    codes = ensure_platform_int(np.asarray(codes))\n\n    from pandas import Index\n\n    if not assume_unique and not Index(values).is_unique:\n        raise ValueError(\"values should be unique if codes is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = _get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_codes = take_1d(order2, codes, fill_value=-1)\n        if verify:\n            mask = (codes < -len(values)) | (codes >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_codes = reverse_indexer.take(codes, mode=\"wrap\")\n\n        mask = codes == na_sentinel\n        if verify:\n            mask = mask | (codes < -len(values)) | (codes >= len(values))\n\n    if mask is not None:\n        np.putmask(new_codes, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_codes)",
        "begin_line": 1907,
        "end_line": 2034,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.algorithms.sort_mixed#1966",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 1966,
        "end_line": 1971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#65",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key=None)",
        "snippet": "    def _reset_cache(self, key=None):\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017482517482517483,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin._freeze#111",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin._freeze(self)",
        "snippet": "    def _freeze(self):\n        \"\"\"Prevents setting additional attributes\"\"\"\n        object.__setattr__(self, \"__frozen\", True)",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin.__setattr__#116",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin.__setattr__(self, key, value)",
        "snippet": "    def __setattr__(self, key, value):\n        # _cache is used by a decorator\n        # We need to check both 1.) cls.__dict__ and 2.) getattr(self, key)\n        # because\n        # 1.) getattr is false for attributes that raise errors\n        # 2.) cls.__dict__ doesn't traverse into base classes\n        if getattr(self, \"__frozen\", False) and not (\n            key == \"_cache\"\n            or key in type(self).__dict__\n            or getattr(self, key, None) is not None\n        ):\n            raise AttributeError(f\"You cannot add any new attribute '{key}'\")\n        object.__setattr__(self, key, value)",
        "begin_line": 116,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#632",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 632,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#639",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 639,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013178703215603585,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#679",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017822135091783995,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.array#686",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        \"\"\"\n        The ExtensionArray of the data backing this Series or Index.\n\n        .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        ExtensionArray\n            An ExtensionArray of the values stored within. For extension\n            types, this is the actual array. For NumPy native types, this\n            is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n            ``.array`` differs ``.values`` which may require converting the\n            data to a different form.\n\n        See Also\n        --------\n        Index.to_numpy : Similar method that always returns a NumPy array.\n        Series.to_numpy : Similar method that always returns a NumPy array.\n\n        Notes\n        -----\n        This table lays out the different array types for each extension\n        dtype within pandas.\n\n        ================== =============================\n        dtype              array type\n        ================== =============================\n        category           Categorical\n        period             PeriodArray\n        interval           IntervalArray\n        IntegerNA          IntegerArray\n        datetime64[ns, tz] DatetimeArray\n        ================== =============================\n\n        For any 3rd-party extension types, the array type will be an\n        ExtensionArray.\n\n        For all remaining dtypes ``.array`` will be a\n        :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\n        stored within. If you absolutely need a NumPy array (possibly with\n        copying / coercing data), then use :meth:`Series.to_numpy` instead.\n\n        Examples\n        --------\n\n        For regular NumPy types like int, and float, a PandasArray\n        is returned.\n\n        >>> pd.Series([1, 2, 3]).array\n        <PandasArray>\n        [1, 2, 3]\n        Length: 3, dtype: int64\n\n        For extension types, like Categorical, the actual ExtensionArray\n        is returned\n\n        >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n        >>> ser.array\n        [a, b, a]\n        Categories (2, object): [a, b]\n        \"\"\"\n        # As a mixin, we depend on the mixing class having _values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        result = self._values  # type: ignore\n\n        if is_datetime64_ns_dtype(result.dtype):\n            from pandas.arrays import DatetimeArray\n\n            result = DatetimeArray(result)\n        elif is_timedelta64_ns_dtype(result.dtype):\n            from pandas.arrays import TimedeltaArray\n\n            result = TimedeltaArray(result)\n\n        elif not is_extension_array_dtype(result.dtype):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            result = PandasArray(result)\n\n        return result",
        "begin_line": 686,
        "end_line": 768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015634771732332708,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.to_numpy#770",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.to_numpy(self, dtype=None, copy=False)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        A NumPy ndarray representing the values in this Series or Index.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to pass to :meth:`numpy.asarray`.\n        copy : bool, default False\n            Whether to ensure that the returned value is a not a view on\n            another array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary.\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        Series.array : Get the actual data stored within.\n        Index.array : Get the actual data stored within.\n        DataFrame.to_numpy : Similar method for DataFrame.\n\n        Notes\n        -----\n        The returned array will be the same up to equality (values equal\n        in `self` will be equal in the returned array; likewise for values\n        that are not equal). When `self` contains an ExtensionArray, the\n        dtype may be different. For example, for a category-dtype Series,\n        ``to_numpy()`` will return a NumPy array and the categorical dtype\n        will be lost.\n\n        For NumPy dtypes, this will be a reference to the actual data stored\n        in this Series or Index (assuming ``copy=False``). Modifying the result\n        in place will modify the data stored in the Series or Index (not that\n        we recommend doing that).\n\n        For extension types, ``to_numpy()`` *may* require copying data and\n        coercing the result to a NumPy type (possibly object), which may be\n        expensive. When you need a no-copy reference to the underlying data,\n        :attr:`Series.array` should be used instead.\n\n        This table lays out the different dtypes and default return types of\n        ``to_numpy()`` for various dtypes within pandas.\n\n        ================== ================================\n        dtype              array type\n        ================== ================================\n        category[T]        ndarray[T] (same dtype as input)\n        period             ndarray[object] (Periods)\n        interval           ndarray[object] (Intervals)\n        IntegerNA          ndarray[object]\n        datetime64[ns]     datetime64[ns]\n        datetime64[ns, tz] ndarray[object] (Timestamps)\n        ================== ================================\n\n        Examples\n        --------\n        >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n        >>> ser.to_numpy()\n        array(['a', 'b', 'a'], dtype=object)\n\n        Specify the `dtype` to control how datetime-aware data is represented.\n        Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\n        objects, each with the correct ``tz``.\n\n        >>> ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> ser.to_numpy(dtype=object)\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or ``dtype='datetime64[ns]'`` to return an ndarray of native\n        datetime64 values. The values are converted to UTC and the timezone\n        info is dropped.\n\n        >>> ser.to_numpy(dtype=\"datetime64[ns]\")\n        ... # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n              dtype='datetime64[ns]')\n        \"\"\"\n        if is_datetime64tz_dtype(self.dtype) and dtype is None:\n            # note: this is going to change very soon.\n            # I have a WIP PR making this unnecessary, but it's\n            # a bit out of scope for the DatetimeArray PR.\n            dtype = \"object\"\n\n        result = np.asarray(self._values, dtype=dtype)\n        # TODO(GH-24345): Avoid potential double copy\n        if copy:\n            result = result.copy()\n        return result",
        "begin_line": 770,
        "end_line": 864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025926886180969663,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._ndarray_values#867",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        \"\"\"\n        The data as an ndarray, possibly losing information.\n\n        The expectation is that this is cheap to compute, and is primarily\n        used for interacting with our indexers.\n\n        - categorical -> codes\n        \"\"\"\n        if is_extension_array_dtype(self):\n            return self.array._ndarray_values\n        # As a mixin, we depend on the mixing class having values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        return self.values  # type: ignore",
        "begin_line": 867,
        "end_line": 881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014415453366008361,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#884",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 884,
        "end_line": 885,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020024028834601522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.tolist#1014",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self):\n        \"\"\"\n        Return a list of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        list\n\n        See Also\n        --------\n        numpy.ndarray.tolist\n        \"\"\"\n        if self.dtype.kind in [\"m\", \"M\"]:\n            return [com.maybe_box_datetimelike(x) for x in self._values]\n        elif is_extension_array_dtype(self._values):\n            return list(self._values)\n        else:\n            return self._values.tolist()",
        "begin_line": 1014,
        "end_line": 1035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1039",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if self.dtype.kind in [\"m\", \"M\"]:\n            return map(com.maybe_box_datetimelike, self._values)\n        elif is_extension_array_dtype(self._values):\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1039,
        "end_line": 1057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._reduce#1066",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\" perform the reduction type operation if we can \"\"\"\n        func = getattr(self, name, None)\n        if func is None:\n            raise TypeError(\n                f\"{type(self).__name__} cannot perform the operation {name}\"\n            )\n        return func(skipna=skipna, **kwds)",
        "begin_line": 1066,
        "end_line": 1075,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._map_values#1077",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._map_values(self, mapper, na_action=None)",
        "snippet": "    def _map_values(self, mapper, na_action=None):\n        \"\"\"\n        An internal function that maps values using the input\n        correspondence (which can be a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            The input correspondence object\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n\n        \"\"\"\n\n        # we can fastpath dict/Series to an efficient map\n        # as we know that we are not going to have to yield\n        # python types\n        if is_dict_like(mapper):\n            if isinstance(mapper, dict) and hasattr(mapper, \"__missing__\"):\n                # If a dictionary subclass defines a default value method,\n                # convert mapper to a lookup function (GH #15999).\n                dict_with_default = mapper\n                mapper = lambda x: dict_with_default[x]\n            else:\n                # Dictionary does not have a default. Thus it's safe to\n                # convert to an Series for efficiency.\n                # we specify the keys here to handle the\n                # possibility that they are tuples\n\n                # The return value of mapping with an empty mapper is\n                # expected to be pd.Series(np.nan, ...). As np.nan is\n                # of dtype float64 the return value of this method should\n                # be float64 as well\n                mapper = create_series_with_explicit_dtype(\n                    mapper, dtype_if_empty=np.float64\n                )\n\n        if isinstance(mapper, ABCSeries):\n            # Since values were input this means we came from either\n            # a dict or a series and mapper should be an index\n            if is_categorical_dtype(self._values):\n                # use the built in categorical series mapper which saves\n                # time by mapping the categories instead of all values\n                return self._values.map(mapper)\n            if is_extension_array_dtype(self.dtype):\n                values = self._values\n            else:\n                values = self.values\n\n            indexer = mapper.index.get_indexer(values)\n            new_values = algorithms.take_1d(mapper._values, indexer)\n\n            return new_values\n\n        # we must convert to python types\n        if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n            # GH#23179 some EAs do not have `map`\n            values = self._values\n            if na_action is not None:\n                raise NotImplementedError\n            map_f = lambda values, f: values.map(f)\n        else:\n            values = self.astype(object)\n            values = getattr(values, \"values\", values)\n            if na_action == \"ignore\":\n\n                def map_f(values, f):\n                    return lib.map_infer_mask(values, f, isna(values).view(np.uint8))\n\n            else:\n                map_f = lib.map_infer\n\n        # mapper is a function\n        new_values = map_f(values, mapper)\n\n        return new_values",
        "begin_line": 1077,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#44",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype)",
        "snippet": "    def __init__(self, dtype):\n        dtype = np.dtype(dtype)\n        self._dtype = dtype\n        self._name = dtype.name\n        self._type = dtype.type",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001327668613913967,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.type#63",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.type(self)",
        "snippet": "    def type(self):\n        return self._type",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#141",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values: Union[np.ndarray, 'PandasArray'], copy: bool=False)",
        "snippet": "    def __init__(self, values: Union[np.ndarray, \"PandasArray\"], copy: bool = False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"'values' must be a NumPy array, not {type(values).__name__}\"\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 141,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001327668613913967,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray._from_sequence#159",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        if isinstance(dtype, PandasDtype):\n            dtype = dtype._dtype\n\n        result = np.asarray(scalars, dtype=dtype)\n        if copy and result is scalars:\n            result = result.copy()\n        return cls(result)",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029515938606847696,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.dtype#180",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021372088053002778,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#186",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 186,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015482272797646694,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__getitem__#235",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, type(self)):\n            item = item._ndarray\n\n        elif com.is_bool_indexer(item):\n            item = check_bool_array_indexer(self, item)\n\n        result = self._ndarray[item]\n        if not lib.is_scalar(item):\n            result = type(self)(result)\n        return result",
        "begin_line": 235,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024295432458697764,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__setitem__#247",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        value = extract_array(value, extract_numpy=True)\n\n        scalar_key = lib.is_scalar(key)\n        scalar_value = lib.is_scalar(value)\n\n        if not scalar_key and scalar_value:\n            key = np.asarray(key)\n\n        if not scalar_value:\n            value = np.asarray(value, dtype=self._ndarray.dtype)\n\n        self._ndarray[key] = value",
        "begin_line": 247,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__len__#261",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._ndarray)",
        "begin_line": 261,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024295432458697764,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.isna#268",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.isna(self)",
        "snippet": "    def isna(self):\n        return isna(self._ndarray)",
        "begin_line": 268,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#424",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy=False)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        Convert the PandasArray to a :class:`numpy.ndarray`.\n\n        By default, this requires no coercion or copying of data.\n\n        Parameters\n        ----------\n        dtype : numpy.dtype\n            The NumPy dtype to pass to :func:`numpy.asarray`.\n        copy : bool, default False\n            Whether to copy the underlying data.\n\n        Returns\n        -------\n        ndarray\n        \"\"\"\n        result = np.asarray(self._ndarray, dtype=dtype)\n        if copy and result is self._ndarray:\n            result = result.copy()\n\n        return result",
        "begin_line": 424,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014122299110295156,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._td_array_cmp#75",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._td_array_cmp(cls, op)",
        "snippet": "def _td_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert timedelta-like to timedelta64\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n\n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as timedelta\n                return invalid_comparison(self, other, op)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n            other_i8 = self._unbox_scalar(other)\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. other is datetimearray\n                return invalid_comparison(self, other, op)\n\n            else:\n                other = type(self)._from_sequence(other)\n\n                self._check_compatible_with(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
        "begin_line": 75,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019857029388403494,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.wrapper#83",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as timedelta\n                return invalid_comparison(self, other, op)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n            other_i8 = self._unbox_scalar(other)\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. other is datetimearray\n                return invalid_comparison(self, other, op)\n\n            else:\n                other = type(self)._from_sequence(other)\n\n                self._check_compatible_with(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result",
        "begin_line": 83,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func#202",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timedelta(x, unit=\"ns\")",
        "begin_line": 202,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#206",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return _TD_DTYPE",
        "begin_line": 206,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001326259946949602,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#225",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            if freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be a \"\n                \"TimedeltaArray ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg)\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_TD_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 225,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#277",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        assert dtype == _TD_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values.view(_TD_DTYPE)\n        result._freq = to_offset(freq)\n        result._dtype = _TD_DTYPE\n        return result",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013458950201884252,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#288",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 288,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00031036623215394165,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range#310",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range(cls, start, end, periods, freq, closed=None)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, closed=None):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n\n        if start is not None:\n            start = Timedelta(start)\n\n        if end is not None:\n            end = Timedelta(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of startand end are defined\"\n                )\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        if freq is not None:\n            index = _generate_regular_range(start, end, periods, freq)\n        else:\n            index = np.linspace(start.value, end.value, periods).astype(\"i8\")\n\n        if not left_closed:\n            index = index[1:]\n        if not right_closed:\n            index = index[:-1]\n\n        return cls._simple_new(index, freq=freq)",
        "begin_line": 310,
        "end_line": 346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._unbox_scalar#351",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._unbox_scalar(self, value)",
        "snippet": "    def _unbox_scalar(self, value):\n        if not isinstance(value, self._scalar_type) and value is not NaT:\n            raise ValueError(\"'value' should be a Timedelta.\")\n        self._check_compatible_with(value)\n        return value.value",
        "begin_line": 351,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029197080291970805,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._scalar_from_string#357",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._scalar_from_string(self, value)",
        "snippet": "    def _scalar_from_string(self, value):\n        return Timedelta(value)",
        "begin_line": 357,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._check_compatible_with#360",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        # we don't have anything to validate.\n        pass",
        "begin_line": 360,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021317416329140907,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.astype#380",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> timedelta64[ns]\n        #   --> timedelta64\n        # DatetimeLikeArrayMixin super call handles other cases\n        dtype = pandas_dtype(dtype)\n\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # by pandas convention, converting to non-nano timedelta64\n            #  returns an int64-dtyped array with ints representing multiples\n            #  of the desired timedelta unit.  This is essentially division\n            if self._hasnans:\n                # avoid double-copying\n                result = self._data.astype(dtype, copy=False)\n                values = self._maybe_mask_results(\n                    result, fill_value=None, convert=\"float64\"\n                )\n                return values\n            result = self._data.astype(dtype, copy=copy)\n            return result.astype(\"i8\")\n        elif is_timedelta64_ns_dtype(dtype):\n            if copy:\n                return self.copy()\n            return self\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy=copy)",
        "begin_line": 380,
        "end_line": 404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._add_offset#484",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._add_offset(self, other)",
        "snippet": "    def _add_offset(self, other):\n        assert not isinstance(other, Tick)\n        raise TypeError(\n            f\"cannot add the type {type(other).__name__} to a {type(self).__name__}\"\n        )",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._add_delta#490",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._add_delta(self, delta)",
        "snippet": "    def _add_delta(self, delta):\n        \"\"\"\n        Add a timedelta-like, Tick, or TimedeltaIndex-like object\n        to self, yielding a new TimedeltaArray.\n\n        Parameters\n        ----------\n        other : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : TimedeltaArray\n        \"\"\"\n        new_values = super()._add_delta(delta)\n        return type(self)._from_sequence(new_values, freq=\"infer\")",
        "begin_line": 490,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019751135690302193,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._add_datetime_arraylike#507",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._add_datetime_arraylike(self, other)",
        "snippet": "    def _add_datetime_arraylike(self, other):\n        \"\"\"\n        Add DatetimeArray/Index or ndarray[datetime64] to TimedeltaArray.\n        \"\"\"\n        if isinstance(other, np.ndarray):\n            # At this point we have already checked that dtype is datetime64\n            from pandas.core.arrays import DatetimeArray\n\n            other = DatetimeArray(other)\n\n        # defer to implementation in DatetimeArray\n        return other + self",
        "begin_line": 507,
        "end_line": 518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._add_datetimelike_scalar#520",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._add_datetimelike_scalar(self, other)",
        "snippet": "    def _add_datetimelike_scalar(self, other):\n        # adding a timedeltaindex to a datetimelike\n        from pandas.core.arrays import DatetimeArray\n\n        assert other is not NaT\n        other = Timestamp(other)\n        if other is NaT:\n            # In this case we specifically interpret NaT as a datetime, not\n            # the timedelta interpretation we would get by returning self + NaT\n            result = self.asi8.view(\"m8[ms]\") + NaT.to_datetime64()\n            return DatetimeArray(result)\n\n        i8 = self.asi8\n        result = checked_add_with_arr(i8, other.value, arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        dtype = DatetimeTZDtype(tz=other.tz) if other.tz else _NS_DTYPE\n        return DatetimeArray(result, dtype=dtype, freq=self.freq)",
        "begin_line": 520,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._addsub_object_array#538",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._addsub_object_array(self, other, op)",
        "snippet": "    def _addsub_object_array(self, other, op):\n        # Add or subtract Array-like of objects\n        try:\n            # TimedeltaIndex can only operate with a subset of DateOffset\n            # subclasses.  Incompatible classes will raise AttributeError,\n            # which we re-raise as TypeError\n            return super()._addsub_object_array(other, op)\n        except AttributeError:\n            raise TypeError(\n                f\"Cannot add/subtract non-tick DateOffset to {type(self).__name__}\"\n            )",
        "begin_line": 538,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034904013961605586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__mul__#550",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__mul__(self, other)",
        "snippet": "    def __mul__(self, other):\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):\n            return NotImplemented\n\n        if is_scalar(other):\n            # numpy will accept float and int, raise TypeError for others\n            result = self._data * other\n            freq = None\n            if self.freq is not None and not isna(other):\n                freq = self.freq * other\n            return type(self)(result, freq=freq)\n\n        if not hasattr(other, \"dtype\"):\n            # list, tuple\n            other = np.array(other)\n        if len(other) != len(self) and not is_timedelta64_dtype(other):\n            # Exclude timedelta64 here so we correctly raise TypeError\n            #  for that instead of ValueError\n            raise ValueError(\"Cannot multiply with unequal lengths\")\n\n        if is_object_dtype(other.dtype):\n            # this multiplication will succeed only if all elements of other\n            #  are int or float scalars, so we will end up with\n            #  timedelta64[ns]-dtyped result\n            result = [self[n] * other[n] for n in range(len(self))]\n            result = np.array(result)\n            return type(self)(result)\n\n        # numpy will accept float or int dtype, raise TypeError for others\n        result = self._data * other\n        return type(self)(result)",
        "begin_line": 550,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__truediv__#586",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__truediv__(self, other)",
        "snippet": "    def __truediv__(self, other):\n        # timedelta / X is well-defined for timedelta-like or numeric X\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n            if other is NaT:\n                # specifically timedelta64-NaT\n                result = np.empty(self.shape, dtype=np.float64)\n                result.fill(np.nan)\n                return result\n\n            # otherwise, dispatch to Timedelta implementation\n            return self._data / other\n\n        elif lib.is_scalar(other):\n            # assume it is numeric\n            result = self._data / other\n            freq = None\n            if self.freq is not None:\n                # Tick division is not implemented, so operate on Timedelta\n                freq = self.freq.delta / other\n            return type(self)(result, freq=freq)\n\n        if not hasattr(other, \"dtype\"):\n            # e.g. list, tuple\n            other = np.array(other)\n\n        if len(other) != len(self):\n            raise ValueError(\"Cannot divide vectors with unequal lengths\")\n\n        elif is_timedelta64_dtype(other.dtype):\n            # let numpy handle it\n            return self._data / other\n\n        elif is_object_dtype(other.dtype):\n            # Note: we do not do type inference on the result, so either\n            #  an object array or numeric-dtyped (if numpy does inference)\n            #  will be returned.  GH#23829\n            result = [self[n] / other[n] for n in range(len(self))]\n            result = np.array(result)\n            return result\n\n        else:\n            result = self._data / other\n            return type(self)(result)",
        "begin_line": 586,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__rtruediv__#636",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__rtruediv__(self, other)",
        "snippet": "    def __rtruediv__(self, other):\n        # X / timedelta is defined only for timedelta-like X\n        other = lib.item_from_zerodim(other)\n\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n            if other is NaT:\n                # specifically timedelta64-NaT\n                result = np.empty(self.shape, dtype=np.float64)\n                result.fill(np.nan)\n                return result\n\n            # otherwise, dispatch to Timedelta implementation\n            return other / self._data\n\n        elif lib.is_scalar(other):\n            raise TypeError(\n                f\"Cannot divide {type(other).__name__} by {type(self).__name__}\"\n            )\n\n        if not hasattr(other, \"dtype\"):\n            # e.g. list, tuple\n            other = np.array(other)\n\n        if len(other) != len(self):\n            raise ValueError(\"Cannot divide vectors with unequal lengths\")\n\n        elif is_timedelta64_dtype(other.dtype):\n            # let numpy handle it\n            return other / self._data\n\n        elif is_object_dtype(other.dtype):\n            # Note: unlike in __truediv__, we do not _need_ to do type\n            #  inference on the result.  It does not raise, a numeric array\n            #  is returned.  GH#23829\n            result = [other[n] / self[n] for n in range(len(self))]\n            return np.array(result)\n\n        else:\n            raise TypeError(\n                f\"Cannot divide {other.dtype} data by {type(self).__name__}\"\n            )",
        "begin_line": 636,
        "end_line": 680,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__floordiv__#682",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__floordiv__(self, other)",
        "snippet": "    def __floordiv__(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if is_scalar(other):\n            if isinstance(other, (timedelta, np.timedelta64, Tick)):\n                other = Timedelta(other)\n                if other is NaT:\n                    # treat this specifically as timedelta-NaT\n                    result = np.empty(self.shape, dtype=np.float64)\n                    result.fill(np.nan)\n                    return result\n\n                # dispatch to Timedelta implementation\n                result = other.__rfloordiv__(self._data)\n                return result\n\n            # at this point we should only have numeric scalars; anything\n            #  else will raise\n            result = self.asi8 // other\n            result[self._isnan] = iNaT\n            freq = None\n            if self.freq is not None:\n                # Note: freq gets division, not floor-division\n                freq = self.freq / other\n            return type(self)(result.view(\"m8[ns]\"), freq=freq)\n\n        if not hasattr(other, \"dtype\"):\n            # list, tuple\n            other = np.array(other)\n        if len(other) != len(self):\n            raise ValueError(\"Cannot divide with unequal lengths\")\n\n        elif is_timedelta64_dtype(other.dtype):\n            other = type(self)(other)\n\n            # numpy timedelta64 does not natively support floordiv, so operate\n            #  on the i8 values\n            result = self.asi8 // other.asi8\n            mask = self._isnan | other._isnan\n            if mask.any():\n                result = result.astype(np.int64)\n                result[mask] = np.nan\n            return result\n\n        elif is_object_dtype(other.dtype):\n            result = [self[n] // other[n] for n in range(len(self))]\n            result = np.array(result)\n            if lib.infer_dtype(result, skipna=False) == \"timedelta\":\n                result, _ = sequence_to_td64ns(result)\n                return type(self)(result)\n            return result\n\n        elif is_integer_dtype(other.dtype) or is_float_dtype(other.dtype):\n            result = self._data // other\n            return type(self)(result)\n\n        else:\n            dtype = getattr(other, \"dtype\", type(other).__name__)\n            raise TypeError(f\"Cannot divide {dtype} by {type(self).__name__}\")",
        "begin_line": 682,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__rfloordiv__#744",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__rfloordiv__(self, other)",
        "snippet": "    def __rfloordiv__(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if is_scalar(other):\n            if isinstance(other, (timedelta, np.timedelta64, Tick)):\n                other = Timedelta(other)\n                if other is NaT:\n                    # treat this specifically as timedelta-NaT\n                    result = np.empty(self.shape, dtype=np.float64)\n                    result.fill(np.nan)\n                    return result\n\n                # dispatch to Timedelta implementation\n                result = other.__floordiv__(self._data)\n                return result\n\n            raise TypeError(\n                f\"Cannot divide {type(other).__name__} by {type(self).__name__}\"\n            )\n\n        if not hasattr(other, \"dtype\"):\n            # list, tuple\n            other = np.array(other)\n        if len(other) != len(self):\n            raise ValueError(\"Cannot divide with unequal lengths\")\n\n        elif is_timedelta64_dtype(other.dtype):\n            other = type(self)(other)\n\n            # numpy timedelta64 does not natively support floordiv, so operate\n            #  on the i8 values\n            result = other.asi8 // self.asi8\n            mask = self._isnan | other._isnan\n            if mask.any():\n                result = result.astype(np.int64)\n                result[mask] = np.nan\n            return result\n\n        elif is_object_dtype(other.dtype):\n            result = [other[n] // self[n] for n in range(len(self))]\n            result = np.array(result)\n            return result\n\n        else:\n            dtype = getattr(other, \"dtype\", type(other).__name__)\n            raise TypeError(f\"Cannot divide {dtype} by {type(self).__name__}\")",
        "begin_line": 744,
        "end_line": 791,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__mod__#793",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__mod__(self, other)",
        "snippet": "    def __mod__(self, other):\n        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n        return self - (self // other) * other",
        "begin_line": 793,
        "end_line": 801,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__rmod__#803",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__rmod__(self, other)",
        "snippet": "    def __rmod__(self, other):\n        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n        return other - (other // self) * self",
        "begin_line": 803,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034904013961605586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__divmod__#813",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__divmod__(self, other)",
        "snippet": "    def __divmod__(self, other):\n        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n\n        res1 = self // other\n        res2 = self - res1 * other\n        return res1, res2",
        "begin_line": 813,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__rdivmod__#826",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__rdivmod__(self, other)",
        "snippet": "    def __rdivmod__(self, other):\n        # Note: This is a naive implementation, can likely be optimized\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            other = Timedelta(other)\n\n        res1 = other // self\n        res2 = other - res1 * self\n        return res1, res2",
        "begin_line": 826,
        "end_line": 837,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034904013961605586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__neg__#839",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__neg__(self)",
        "snippet": "    def __neg__(self):\n        if self.freq is not None:\n            return type(self)(-self._data, freq=-self.freq)\n        return type(self)(-self._data)",
        "begin_line": 839,
        "end_line": 842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026308866087871614,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__abs__#847",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__abs__(self)",
        "snippet": "    def __abs__(self):\n        # Note: freq is not preserved\n        return type(self)(np.abs(self._data))",
        "begin_line": 847,
        "end_line": 849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#986",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != _TD_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to timedelta64[ns]\")\n\n    data = np.array(data, copy=copy)\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 986,
        "end_line": 1069,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.ints_to_td64ns#1072",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.ints_to_td64ns(data, unit='ns')",
        "snippet": "def ints_to_td64ns(data, unit=\"ns\"):\n    \"\"\"\n    Convert an ndarray with integer-dtype to timedelta64[ns] dtype, treating\n    the integers as multiples of the given timedelta unit.\n\n    Parameters\n    ----------\n    data : numpy.ndarray with integer-dtype\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n    bool : whether a copy was made\n    \"\"\"\n    copy_made = False\n    unit = unit if unit is not None else \"ns\"\n\n    if data.dtype != np.int64:\n        # converting to int64 makes a copy, so we can avoid\n        # re-copying later\n        data = data.astype(np.int64)\n        copy_made = True\n\n    if unit != \"ns\":\n        dtype_str = f\"timedelta64[{unit}]\"\n        data = data.view(dtype_str)\n\n        # TODO: watch out for overflows when converting from lower-resolution\n        data = data.astype(\"timedelta64[ns]\")\n        # the astype conversion makes a copy, so we can avoid re-copying later\n        copy_made = True\n\n    else:\n        data = data.view(\"timedelta64[ns]\")\n\n    return data, copy_made",
        "begin_line": 1072,
        "end_line": 1109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019062142584826535,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.objects_to_td64ns#1112",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.objects_to_td64ns(data, unit='ns', errors='raise')",
        "snippet": "def objects_to_td64ns(data, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert a object-dtyped or string-dtyped array into an\n    timedelta64[ns]-dtyped array.\n\n    Parameters\n    ----------\n    data : ndarray or Index\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    # coerce Index to np.ndarray, converting string-dtype if necessary\n    values = np.array(data, dtype=np.object_, copy=False)\n\n    result = array_to_timedelta64(values, unit=unit, errors=errors)\n    return result.view(\"timedelta64[ns]\")",
        "begin_line": 1112,
        "end_line": 1144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014639145073927682,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1147",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        # no precision disallowed GH#24806\n        msg = (\n            \"Passing in 'timedelta' dtype with no precision is not allowed. \"\n            \"Please pass in 'timedelta64[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if not is_dtype_equal(dtype, _TD_DTYPE):\n        raise ValueError(_BAD_DTYPE.format(dtype=dtype))\n\n    return dtype",
        "begin_line": 1147,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013338668800853674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._generate_regular_range#1163",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._generate_regular_range(start, end, periods, offset)",
        "snippet": "def _generate_regular_range(start, end, periods, offset):\n    stride = offset.nanos\n    if periods is None:\n        b = Timedelta(start).value\n        e = Timedelta(end).value\n        e += stride - e % stride\n    elif start is not None:\n        b = Timedelta(start).value\n        e = b + periods * stride\n    elif end is not None:\n        e = Timedelta(end).value + stride\n        b = e - periods * stride\n    else:\n        raise ValueError(\n            \"at least 'start' or 'end' should be specified if a 'period' is given.\"\n        )\n\n    data = np.arange(b, e, stride, dtype=np.int64)\n    return data",
        "begin_line": 1163,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019904458598726116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#61",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return _NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 61,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012434717731907486,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._to_M8#79",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._to_M8(key, tz=None)",
        "snippet": "def _to_M8(key, tz=None):\n    \"\"\"\n    Timestamp-like => dt64\n    \"\"\"\n    if not isinstance(key, Timestamp):\n        # this also converts strings\n        key = Timestamp(key)\n        if key.tzinfo is not None and tz is not None:\n            # Don't tz_localize(None) if key is already tz-aware\n            key = key.tz_convert(tz)\n        else:\n            key = key.tz_localize(tz)\n\n    return np.int64(conversion.pydt_to_i8(key)).view(_NS_DTYPE)",
        "begin_line": 79,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.f#96",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.f(self)",
        "snippet": "    def f(self):\n        values = self.asi8\n        if self.tz is not None and not timezones.is_utc(self.tz):\n            values = self._local_timestamps()\n\n        if field in self._bool_ops:\n            if field.endswith((\"start\", \"end\")):\n                freq = self.freq\n                month_kw = 12\n                if freq:\n                    kwds = freq.kwds\n                    month_kw = kwds.get(\"startingMonth\", kwds.get(\"month\", 12))\n\n                result = fields.get_start_end_field(\n                    values, field, self.freqstr, month_kw\n                )\n            else:\n                result = fields.get_date_field(values, field)\n\n            # these return a boolean by-definition\n            return result\n\n        if field in self._object_ops:\n            result = fields.get_date_name_field(values, field)\n            result = self._maybe_mask_results(result, fill_value=None)\n\n        else:\n            result = fields.get_date_field(values, field)\n            result = self._maybe_mask_results(\n                result, fill_value=None, convert=\"float64\"\n            )\n\n        return result",
        "begin_line": 96,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._dt_array_cmp#135",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._dt_array_cmp(cls, op)",
        "snippet": "def _dt_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert datetime-like to datetime64\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that cannot be parsed to Timestamp\n                return invalid_comparison(self, other, op)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._assert_tzawareness_compat(other)\n\n            other_i8 = other.value\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                # Following Timestamp convention, __eq__ is all-False\n                # and __ne__ is all True, others raise TypeError.\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                # We have to use comp_method_OBJECT_ARRAY instead of numpy\n                #  comparison otherwise it would fail to raise when\n                #  comparing tz-aware and tz-naive\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n\n            else:\n                self._assert_tzawareness_compat(other)\n                other = type(self)._from_sequence(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
        "begin_line": 135,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013135426244581636,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.wrapper#143",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that cannot be parsed to Timestamp\n                return invalid_comparison(self, other, op)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._assert_tzawareness_compat(other)\n\n            other_i8 = other.value\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                # Following Timestamp convention, __eq__ is all-False\n                # and __ne__ is all True, others raise TypeError.\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                # We have to use comp_method_OBJECT_ARRAY instead of numpy\n                #  comparison otherwise it would fail to raise when\n                #  comparing tz-aware and tz-naive\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n\n            else:\n                self._assert_tzawareness_compat(other)\n                other = type(self)._from_sequence(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result",
        "begin_line": 143,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029197080291970805,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#308",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        f\"'{dtz}' != '{values.tz}'\"\n                    )\n                    raise TypeError(msg)\n            elif values.tz:\n                dtype = values.dtype\n            # freq = validate_values_freq(values, freq)\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be \"\n                \"a DatetimeArray ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg)\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_NS_DTYPE)\n\n        if values.dtype != _NS_DTYPE:\n            msg = (\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'.\"\n                f\" Got {values.dtype} instead.\"\n            )\n            raise ValueError(msg)\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 308,
        "end_line": 381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#384",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=_NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype == \"i8\":\n            values = values.view(_NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 384,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011950286806883365,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#396",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 396,
        "end_line": 434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018040772145047808,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#437",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of start and end are defined\"\n                )\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start = _maybe_localize_point(\n                start,\n                getattr(start, \"tz\", None),\n                start,\n                freq,\n                tz,\n                ambiguous,\n                nonexistent,\n            )\n            end = _maybe_localize_point(\n                end, getattr(end, \"tz\", None), end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n            # TODO: consider re-implementing _cached_range; GH#17914\n            values, _tz = generate_regular_range(start, end, periods, freq)\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 437,
        "end_line": 541,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014146272457207527,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._scalar_from_string#553",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._scalar_from_string(self, value)",
        "snippet": "    def _scalar_from_string(self, value):\n        return Timestamp(value, tz=self.tz)",
        "begin_line": 553,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002455795677799607,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with#556",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        if other is NaT:\n            return\n        self._assert_tzawareness_compat(other)\n        if setitem:\n            # Stricter check for setitem vs comparison methods\n            if not timezones.tz_compare(self.tz, other.tz):\n                raise ValueError(f\"Timezones don't match. '{self.tz} != {other.tz}'\")",
        "begin_line": 556,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019219680953296174,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq#565",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        self._freq = None",
        "begin_line": 565,
        "end_line": 566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018989745537409798,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#572",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 572,
        "end_line": 573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001258970162407151,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#576",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 576,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011828720132481665,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#598",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 598,
        "end_line": 608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001183151916706105,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#619",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 619,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016239038648911984,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._timezone#626",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._timezone(self)",
        "snippet": "    def _timezone(self):\n        \"\"\"\n        Comparable timezone both for pytz / dateutil\n        \"\"\"\n        return timezones.get_timezone(self.tzinfo)",
        "begin_line": 626,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001996007984031936,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#646",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 646,
        "end_line": 651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00024061597690086623,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#653",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 653,
        "end_line": 674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016730801405387318,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#676",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 676,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._validate_fill_value#707",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._validate_fill_value(self, fill_value)",
        "snippet": "    def _validate_fill_value(self, fill_value):\n        if isna(fill_value):\n            fill_value = iNaT\n        elif isinstance(fill_value, (datetime, np.datetime64)):\n            self._assert_tzawareness_compat(fill_value)\n            fill_value = Timestamp(fill_value).value\n        else:\n            raise ValueError(f\"'fill_value' should be a Timestamp. Got '{fill_value}'.\")\n        return fill_value",
        "begin_line": 707,
        "end_line": 715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz#734",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self, other)",
        "snippet": "    def _has_same_tz(self, other):\n        zzone = self._timezone\n\n        # vzone shouldn't be None if value is non-datetime like\n        if isinstance(other, np.datetime64):\n            # convert to Timestamp as np.datetime64 doesn't have tz attr\n            other = Timestamp(other)\n        vzone = timezones.get_timezone(getattr(other, \"tzinfo\", \"__no_tz__\"))\n        return zzone == vzone",
        "begin_line": 734,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001996007984031936,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#744",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 744,
        "end_line": 761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029197080291970805,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike#766",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike(self, other)",
        "snippet": "    def _sub_datetime_arraylike(self, other):\n        \"\"\"subtract DatetimeArray/Index or ndarray[datetime64]\"\"\"\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            assert is_datetime64_dtype(other)\n            other = type(self)(other)\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                f\"{type(self).__name__} subtraction must have the same \"\n                \"timezones or no timezones\"\n            )\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        arr_mask = self._isnan | other._isnan\n        new_values = checked_add_with_arr(self_i8, -other_i8, arr_mask=arr_mask)\n        if self._hasnans or other._hasnans:\n            new_values[arr_mask] = iNaT\n        return new_values.view(\"timedelta64[ns]\")",
        "begin_line": 766,
        "end_line": 788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_offset#790",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_offset(self, offset)",
        "snippet": "    def _add_offset(self, offset):\n        if self.ndim == 2:\n            return self.ravel()._add_offset(offset).reshape(self.shape)\n\n        assert not isinstance(offset, Tick)\n        try:\n            if self.tz is not None:\n                values = self.tz_localize(None)\n            else:\n                values = self\n            result = offset.apply_index(values).tz_localize(self.tz)\n\n        except NotImplementedError:\n            warnings.warn(\n                \"Non-vectorized DateOffset being applied to Series or DatetimeIndex\",\n                PerformanceWarning,\n            )\n            result = self.astype(\"O\") + offset\n            if not len(self):\n                # GH#30336 _from_sequence won't be able to infer self.tz\n                return type(self)._from_sequence(result).tz_localize(self.tz)\n\n        return type(self)._from_sequence(result, freq=\"infer\")",
        "begin_line": 790,
        "end_line": 812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002063557573256294,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar#814",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar(self, other)",
        "snippet": "    def _sub_datetimelike_scalar(self, other):\n        # subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]\n        assert isinstance(other, (datetime, np.datetime64))\n        assert other is not NaT\n        other = Timestamp(other)\n        if other is NaT:\n            return self - NaT\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                \"Timestamp subtraction must have the same timezones or no timezones\"\n            )\n\n        i8 = self.asi8\n        result = checked_add_with_arr(i8, -other.value, arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return result.view(\"timedelta64[ns]\")",
        "begin_line": 814,
        "end_line": 831,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003403675970047651,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_delta#833",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_delta(self, delta)",
        "snippet": "    def _add_delta(self, delta):\n        \"\"\"\n        Add a timedelta-like, Tick, or TimedeltaIndex-like object\n        to self, yielding a new DatetimeArray\n\n        Parameters\n        ----------\n        other : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : DatetimeArray\n        \"\"\"\n        new_values = super()._add_delta(delta)\n        return type(self)._from_sequence(new_values, tz=self.tz, freq=\"infer\")",
        "begin_line": 833,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013257324671881213,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._local_timestamps#853",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._local_timestamps(self)",
        "snippet": "    def _local_timestamps(self):\n        \"\"\"\n        Convert to an i8 (unix-like nanosecond timestamp) representation\n        while keeping the local timezone and not using UTC.\n        This is used to calculate time-of-day information as if the timestamps\n        were timezone-naive.\n        \"\"\"\n        return tzconversion.tz_convert(self.asi8, utc, self.tz)",
        "begin_line": 853,
        "end_line": 860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018989745537409798,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#862",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 862,
        "end_line": 936,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002586652871184687,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#938",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise')",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq='D')\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        \"\"\"\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(_NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(new_dates, dtype=dtype, freq=self.freq)",
        "begin_line": 938,
        "end_line": 1101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001818512456810329,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_period#1165",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_period(self, freq=None)",
        "snippet": "    def to_period(self, freq=None):\n        \"\"\"\n        Cast to PeriodArray/Index at a particular frequency.\n\n        Converts DatetimeArray/Index to PeriodArray/Index.\n\n        Parameters\n        ----------\n        freq : str or Offset, optional\n            One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n            or an Offset object. Will be inferred by default.\n\n        Returns\n        -------\n        PeriodArray/Index\n\n        Raises\n        ------\n        ValueError\n            When converting a DatetimeArray/Index with non-regular values,\n            so that a frequency cannot be inferred.\n\n        See Also\n        --------\n        PeriodIndex: Immutable ndarray holding ordinal values.\n        DatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n        ...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n        ...                                         \"2000-05-31 00:00:00\",\n        ...                                         \"2000-08-31 00:00:00\"]))\n        >>> df.index.to_period(\"M\")\n        PeriodIndex(['2000-03', '2000-05', '2000-08'],\n                    dtype='period[M]', freq='M')\n\n        Infer the daily frequency\n\n        >>> idx = pd.date_range(\"2017-01-01\", periods=2)\n        >>> idx.to_period()\n        PeriodIndex(['2017-01-01', '2017-01-02'],\n                    dtype='period[D]', freq='D')\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        if self.tz is not None:\n            warnings.warn(\n                \"Converting to PeriodArray/Index representation \"\n                \"will drop timezone information.\",\n                UserWarning,\n            )\n\n        if freq is None:\n            freq = self.freqstr or self.inferred_freq\n\n            if freq is None:\n                raise ValueError(\n                    \"You must pass a freq argument as current index has none.\"\n                )\n\n            freq = get_period_alias(freq)\n\n        return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)",
        "begin_line": 1165,
        "end_line": 1228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta#1230",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_perioddelta(self, freq)",
        "snippet": "    def to_perioddelta(self, freq):\n        \"\"\"\n        Calculate TimedeltaArray of difference between index\n        values and index converted to PeriodArray at specified\n        freq. Used for vectorized offsets.\n\n        Parameters\n        ----------\n        freq : Period frequency\n\n        Returns\n        -------\n        TimedeltaArray/Index\n        \"\"\"\n        # TODO: consider privatizing (discussion in GH#23113)\n        from pandas.core.arrays.timedeltas import TimedeltaArray\n\n        i8delta = self.asi8 - self.to_period(freq).to_timestamp().asi8\n        m8delta = i8delta.view(\"m8[ns]\")\n        return TimedeltaArray(m8delta)",
        "begin_line": 1230,
        "end_line": 1249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020529665366454526,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1792",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != _NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n\n        assert data.dtype == _NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != _INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        result = data.view(_NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1792,
        "end_line": 1917,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#1920",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 1920,
        "end_line": 2000,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001466275659824047,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2003",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if is_float_dtype(data):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(_NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid. Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data) and not is_datetime64tz_dtype(data):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2003,
        "end_line": 2053,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2060",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            f\"data is already tz-aware {inferred_tz}, unable to \"\n            f\"set specified tz: {tz}\"\n        )\n    return tz",
        "begin_line": 2060,
        "end_line": 2087,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016490765171503957,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2090",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, disallowed GH#24806\n            msg = (\n                \"Passing in 'datetime64' dtype with no precision is not allowed. \"\n                \"Please pass in 'datetime64[ns]' instead.\"\n            )\n            raise ValueError(msg)\n\n        if (isinstance(dtype, np.dtype) and dtype != _NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                f\"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\"\n            )\n    return dtype",
        "begin_line": 2090,
        "end_line": 2129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011855364552459988,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2132",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2132,
        "end_line": 2176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001511258878645912,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2179",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        )\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2179,
        "end_line": 2217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001232741617357002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2220",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start, end, normalize)",
        "snippet": "def _maybe_normalize_endpoints(start, end, normalize):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = normalize_date(start)\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = normalize_date(end)\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2220,
        "end_line": 2237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003544842254519674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2240",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2240,
        "end_line": 2270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012575452716297788,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period._period_array_cmp#67",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._period_array_cmp(cls, op)",
        "snippet": "def _period_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Period-like to PeriodDtype\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        ordinal_op = getattr(self.asi8, opname)\n\n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that can't be parsed as Period\n                return invalid_comparison(self, other, op)\n        elif isinstance(other, int):\n            # TODO: sure we want to allow this?  we dont for DTA/TDA\n            #  2 tests rely on this\n            other = Period(other, freq=self.freq)\n            result = ordinal_op(other.ordinal)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n            other_i8 = self._unbox_scalar(other)\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                # TODO: could use pd.Index to do inference?\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n\n            else:\n                assert isinstance(other, cls), type(other)\n\n                self._check_compatible_with(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
        "begin_line": 67,
        "end_line": 141,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.015384615384615385,
            "pseudo_dstar_susp": 0.015384615384615385,
            "pseudo_tarantula_susp": 0.015384615384615385,
            "pseudo_op2_susp": 0.00980392156862745,
            "pseudo_barinel_susp": 0.015384615384615385
        }
    },
    {
        "name": "pandas.core.arrays.period.wrapper#75",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        ordinal_op = getattr(self.asi8, opname)\n\n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that can't be parsed as Period\n                return invalid_comparison(self, other, op)\n        elif isinstance(other, int):\n            # TODO: sure we want to allow this?  we dont for DTA/TDA\n            #  2 tests rely on this\n            other = Period(other, freq=self.freq)\n            result = ordinal_op(other.ordinal)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n            other_i8 = self._unbox_scalar(other)\n\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            if isinstance(other, list):\n                # TODO: could use pd.Index to do inference?\n                other = np.array(other)\n\n            if not isinstance(other, (np.ndarray, cls)):\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n\n            elif not cls._is_recognized_dtype(other.dtype):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n\n            else:\n                assert isinstance(other, cls), type(other)\n\n                self._check_compatible_with(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result",
        "begin_line": 75,
        "end_line": 139,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.08333333333333333,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.02040816326530612,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#229",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                raise raise_on_incompatible(values, freq)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 229,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00819672131147541,
            "pseudo_dstar_susp": 0.00819672131147541,
            "pseudo_tarantula_susp": 0.00819672131147541,
            "pseudo_op2_susp": 0.006289308176100629,
            "pseudo_barinel_susp": 0.00819672131147541
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#255",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, freq=None, **kwargs):\n        # alias for PeriodArray.__init__\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018453589223103894,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_sequence#260",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_sequence(cls, scalars: Sequence[Optional[Period]], dtype: Optional[PeriodDtype]=None, copy: bool=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        scalars: Sequence[Optional[Period]],\n        dtype: Optional[PeriodDtype] = None,\n        copy: bool = False,\n    ) -> ABCPeriodArray:\n        if dtype:\n            freq = dtype.freq\n        else:\n            freq = None\n\n        if isinstance(scalars, cls):\n            validate_dtype_freq(scalars.dtype, freq)\n            if copy:\n                scalars = scalars.copy()\n            return scalars\n\n        periods = np.asarray(scalars, dtype=object)\n        if copy:\n            periods = periods.copy()\n\n        freq = freq or libperiod.extract_freq(periods)\n        ordinals = libperiod.extract_ordinals(periods, freq)\n        return cls(ordinals, freq=freq)",
        "begin_line": 260,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.013157894736842105,
            "pseudo_dstar_susp": 0.013157894736842105,
            "pseudo_tarantula_susp": 0.013157894736842105,
            "pseudo_op2_susp": 0.008849557522123894,
            "pseudo_barinel_susp": 0.013157894736842105
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_datetime64#290",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_datetime64(cls, data, freq, tz=None)",
        "snippet": "    def _from_datetime64(cls, data, freq, tz=None):\n        \"\"\"\n        Construct a PeriodArray from a datetime64 array\n\n        Parameters\n        ----------\n        data : ndarray[datetime64[ns], datetime64[ns, tz]]\n        freq : str or Tick\n        tz : tzinfo, optional\n\n        Returns\n        -------\n        PeriodArray[freq]\n        \"\"\"\n        data, freq = dt64arr_to_periodarr(data, freq, tz)\n        return cls(data, freq=freq)",
        "begin_line": 290,
        "end_line": 305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000167897918065816,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#308",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 308,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001866019779809666,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._unbox_scalar#331",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._unbox_scalar(self, value: Union[Period, NaTType])",
        "snippet": "    def _unbox_scalar(self, value: Union[Period, NaTType]) -> int:\n        if value is NaT:\n            return value.value\n        elif isinstance(value, self._scalar_type):\n            if not isna(value):\n                self._check_compatible_with(value)\n            return value.ordinal\n        else:\n            raise ValueError(f\"'value' should be a Period. Got '{value}' instead.\")",
        "begin_line": 331,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.021739130434782608,
            "pseudo_dstar_susp": 0.021739130434782608,
            "pseudo_tarantula_susp": 0.021739130434782608,
            "pseudo_op2_susp": 0.012048192771084338,
            "pseudo_barinel_susp": 0.021739130434782608
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._scalar_from_string#341",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._scalar_from_string(self, value: str)",
        "snippet": "    def _scalar_from_string(self, value: str) -> Period:\n        return Period(value, freq=self.freq)",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._check_compatible_with#344",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        if other is NaT:\n            return\n        if self.freqstr != other.freqstr:\n            raise raise_on_incompatible(self, other)",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.017241379310344827,
            "pseudo_dstar_susp": 0.017241379310344827,
            "pseudo_tarantula_susp": 0.017241379310344827,
            "pseudo_op2_susp": 0.010526315789473684,
            "pseudo_barinel_susp": 0.017241379310344827
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#354",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 354,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00684931506849315,
            "pseudo_dstar_susp": 0.006802721088435374,
            "pseudo_tarantula_susp": 0.00684931506849315,
            "pseudo_op2_susp": 0.00546448087431694,
            "pseudo_barinel_susp": 0.00684931506849315
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#359",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 359,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007518796992481203,
            "pseudo_dstar_susp": 0.007462686567164179,
            "pseudo_tarantula_susp": 0.007518796992481203,
            "pseudo_op2_susp": 0.0058823529411764705,
            "pseudo_barinel_susp": 0.007518796992481203
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__array__#365",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        # overriding DatetimelikeArray\n        return np.array(list(self), dtype=object)",
        "begin_line": 365,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000213903743315508,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.to_timestamp#469",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.to_timestamp(self, freq=None, how='start')",
        "snippet": "    def to_timestamp(self, freq=None, how=\"start\"):\n        \"\"\"\n        Cast to DatetimeArray/Index.\n\n        Parameters\n        ----------\n        freq : str or DateOffset, optional\n            Target frequency. The default is 'D' for week or longer,\n            'S' otherwise.\n        how : {'s', 'e', 'start', 'end'}\n            Whether to use the start or end of the time period being converted.\n\n        Returns\n        -------\n        DatetimeArray/Index\n        \"\"\"\n        from pandas.core.arrays import DatetimeArray\n\n        how = libperiod._validate_end_alias(how)\n\n        end = how == \"E\"\n        if end:\n            if freq == \"B\":\n                # roll forward to ensure we land on B date\n                adjust = Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n                return self.to_timestamp(how=\"start\") + adjust\n            else:\n                adjust = Timedelta(1, \"ns\")\n                return (self + self.freq).to_timestamp(how=\"start\") - adjust\n\n        if freq is None:\n            base, mult = libfrequencies.get_freq_code(self.freq)\n            freq = libfrequencies.get_to_timestamp_base(base)\n        else:\n            freq = Period._maybe_convert_freq(freq)\n\n        base, mult = libfrequencies.get_freq_code(freq)\n        new_data = self.asfreq(freq, how=how)\n\n        new_data = libperiod.periodarr_to_dt64arr(new_data.asi8, base)\n        return DatetimeArray._from_sequence(new_data, freq=\"infer\")",
        "begin_line": 469,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002845759817871372,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._time_shift#530",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._time_shift(self, periods, freq=None)",
        "snippet": "    def _time_shift(self, periods, freq=None):\n        \"\"\"\n        Shift each value by `periods`.\n\n        Note this is different from ExtensionArray.shift, which\n        shifts the *position* of each element, padding the end with\n        missing values.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to shift by.\n        freq : pandas.DateOffset, pandas.Timedelta, or str\n            Frequency increment to shift by.\n        \"\"\"\n        if freq is not None:\n            raise TypeError(\n                \"`freq` argument is not supported for \"\n                f\"{type(self).__name__}._time_shift\"\n            )\n        values = self.asi8 + periods * self.freq.n\n        if self._hasnans:\n            values[self._isnan] = iNaT\n        return type(self)(values, freq=self.freq)",
        "begin_line": 530,
        "end_line": 553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._box_func#556",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Period._from_ordinal(ordinal=x, freq=self.freq)",
        "begin_line": 556,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016420361247947455,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.asfreq#559",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.asfreq(self, freq=None, how='E')",
        "snippet": "    def asfreq(self, freq=None, how=\"E\"):\n        \"\"\"\n        Convert the Period Array/Index to the specified frequency `freq`.\n\n        Parameters\n        ----------\n        freq : str\n            A frequency.\n        how : str {'E', 'S'}\n            Whether the elements should be aligned to the end\n            or start within pa period.\n\n            * 'E', 'END', or 'FINISH' for end,\n            * 'S', 'START', or 'BEGIN' for start.\n\n            January 31st ('END') vs. January 1st ('START') for example.\n\n        Returns\n        -------\n        Period Array/Index\n            Constructed with the new frequency.\n\n        Examples\n        --------\n        >>> pidx = pd.period_range('2010-01-01', '2015-01-01', freq='A')\n        >>> pidx\n        PeriodIndex(['2010', '2011', '2012', '2013', '2014', '2015'],\n        dtype='period[A-DEC]', freq='A-DEC')\n\n        >>> pidx.asfreq('M')\n        PeriodIndex(['2010-12', '2011-12', '2012-12', '2013-12', '2014-12',\n        '2015-12'], dtype='period[M]', freq='M')\n\n        >>> pidx.asfreq('M', how='S')\n        PeriodIndex(['2010-01', '2011-01', '2012-01', '2013-01', '2014-01',\n        '2015-01'], dtype='period[M]', freq='M')\n        \"\"\"\n        how = libperiod._validate_end_alias(how)\n\n        freq = Period._maybe_convert_freq(freq)\n\n        base1, mult1 = libfrequencies.get_freq_code(self.freq)\n        base2, mult2 = libfrequencies.get_freq_code(freq)\n\n        asi8 = self.asi8\n        # mult1 can't be negative or 0\n        end = how == \"E\"\n        if end:\n            ordinal = asi8 + mult1 - 1\n        else:\n            ordinal = asi8\n\n        new_data = period_asfreq_arr(ordinal, base1, base2, end)\n\n        if self._hasnans:\n            new_data[self._isnan] = iNaT\n\n        return type(self)(new_data, freq=freq)",
        "begin_line": 559,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018372221201543268,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.astype#648",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle Period[T] -> Period[U]\n        # Our parent handles everything else.\n        dtype = pandas_dtype(dtype)\n\n        if is_period_dtype(dtype):\n            return self.asfreq(dtype.freq)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 648,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00027948574622694243,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._sub_period#665",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._sub_period(self, other)",
        "snippet": "    def _sub_period(self, other):\n        # If the operation is well-defined, we return an object-Index\n        # of DateOffsets.  Null entries are filled with pd.NaT\n        self._check_compatible_with(other)\n        asi8 = self.asi8\n        new_data = asi8 - other.ordinal\n        new_data = np.array([self.freq * x for x in new_data])\n\n        if self._hasnans:\n            new_data[self._isnan] = NaT\n\n        return new_data",
        "begin_line": 665,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._addsub_int_array#678",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._addsub_int_array(self, other: np.ndarray, op: Callable[[Any, Any], Any])",
        "snippet": "    def _addsub_int_array(\n        self, other: np.ndarray, op: Callable[[Any, Any], Any],\n    ) -> \"PeriodArray\":\n        \"\"\"\n        Add or subtract array of integers; equivalent to applying\n        `_time_shift` pointwise.\n\n        Parameters\n        ----------\n        other : np.ndarray[integer-dtype]\n        op : {operator.add, operator.sub}\n\n        Returns\n        -------\n        result : PeriodArray\n        \"\"\"\n\n        assert op in [operator.add, operator.sub]\n        if op is operator.sub:\n            other = -other\n        res_values = algos.checked_add_with_arr(self.asi8, other, arr_mask=self._isnan)\n        res_values = res_values.view(\"i8\")\n        res_values[self._isnan] = iNaT\n        return type(self)(res_values, freq=self.freq)",
        "begin_line": 678,
        "end_line": 701,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._add_offset#703",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._add_offset(self, other)",
        "snippet": "    def _add_offset(self, other):\n        assert not isinstance(other, Tick)\n        base = libfrequencies.get_base_alias(other.rule_code)\n        if base != self.freq.rule_code:\n            raise raise_on_incompatible(self, other)\n\n        # Note: when calling parent class's _add_timedeltalike_scalar,\n        #  it will call delta_to_nanoseconds(delta).  Because delta here\n        #  is an integer, delta_to_nanoseconds will return it unchanged.\n        result = super()._add_timedeltalike_scalar(other.n)\n        return type(self)(result, freq=self.freq)",
        "begin_line": 703,
        "end_line": 713,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00039277297721916735,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._add_timedeltalike_scalar#715",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Parameters\n        ----------\n        other : timedelta, Tick, np.timedelta64\n\n        Returns\n        -------\n        result : ndarray[int64]\n        \"\"\"\n        assert isinstance(self.freq, Tick)  # checked by calling function\n        assert isinstance(other, (timedelta, np.timedelta64, Tick))\n\n        if notna(other):\n            # special handling for np.timedelta64(\"NaT\"), avoid calling\n            #  _check_timedeltalike_freq_compat as that would raise TypeError\n            other = self._check_timedeltalike_freq_compat(other)\n\n        # Note: when calling parent class's _add_timedeltalike_scalar,\n        #  it will call delta_to_nanoseconds(delta).  Because delta here\n        #  is an integer, delta_to_nanoseconds will return it unchanged.\n        ordinals = super()._add_timedeltalike_scalar(other)\n        return ordinals",
        "begin_line": 715,
        "end_line": 737,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023866348448687351,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._add_delta_tdi#739",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._add_delta_tdi(self, other)",
        "snippet": "    def _add_delta_tdi(self, other):\n        \"\"\"\n        Parameters\n        ----------\n        other : TimedeltaArray or ndarray[timedelta64]\n\n        Returns\n        -------\n        result : ndarray[int64]\n        \"\"\"\n        assert isinstance(self.freq, Tick)  # checked by calling function\n\n        if not np.all(isna(other)):\n            delta = self._check_timedeltalike_freq_compat(other)\n        else:\n            # all-NaT TimedeltaIndex is equivalent to a single scalar td64 NaT\n            return self + np.timedelta64(\"NaT\")\n\n        return self._addsub_int_array(delta, operator.add).asi8",
        "begin_line": 739,
        "end_line": 757,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._add_delta#759",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._add_delta(self, other)",
        "snippet": "    def _add_delta(self, other):\n        \"\"\"\n        Add a timedelta-like, Tick, or TimedeltaIndex-like object\n        to self, yielding a new PeriodArray\n\n        Parameters\n        ----------\n        other : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : PeriodArray\n        \"\"\"\n        if not isinstance(self.freq, Tick):\n            # We cannot add timedelta-like to non-tick PeriodArray\n            raise raise_on_incompatible(self, other)\n\n        new_ordinals = super()._add_delta(other)\n        return type(self)(new_ordinals, freq=self.freq)",
        "begin_line": 759,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00037650602409638556,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._check_timedeltalike_freq_compat#780",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._check_timedeltalike_freq_compat(self, other)",
        "snippet": "    def _check_timedeltalike_freq_compat(self, other):\n        \"\"\"\n        Arithmetic operations with timedelta-like scalars or array `other`\n        are only valid if `other` is an integer multiple of `self.freq`.\n        If the operation is valid, find that integer multiple.  Otherwise,\n        raise because the operation is invalid.\n\n        Parameters\n        ----------\n        other : timedelta, np.timedelta64, Tick,\n                ndarray[timedelta64], TimedeltaArray, TimedeltaIndex\n\n        Returns\n        -------\n        multiple : int or ndarray[int64]\n\n        Raises\n        ------\n        IncompatibleFrequency\n        \"\"\"\n        assert isinstance(self.freq, Tick)  # checked by calling function\n        own_offset = frequencies.to_offset(self.freq.rule_code)\n        base_nanos = delta_to_nanoseconds(own_offset)\n\n        if isinstance(other, (timedelta, np.timedelta64, Tick)):\n            nanos = delta_to_nanoseconds(other)\n\n        elif isinstance(other, np.ndarray):\n            # numpy timedelta64 array; all entries must be compatible\n            assert other.dtype.kind == \"m\"\n            if other.dtype != _TD_DTYPE:\n                # i.e. non-nano unit\n                # TODO: disallow unit-less timedelta64\n                other = other.astype(_TD_DTYPE)\n            nanos = other.view(\"i8\")\n        else:\n            # TimedeltaArray/Index\n            nanos = other.asi8\n\n        if np.all(nanos % base_nanos == 0):\n            # nanos being added is an integer multiple of the\n            #  base-frequency to self.freq\n            delta = nanos // base_nanos\n            # delta is the integer (or integer-array) number of periods\n            # by which will be added to self.\n            return delta\n\n        raise raise_on_incompatible(self, other)",
        "begin_line": 780,
        "end_line": 827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.raise_on_incompatible#833",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.raise_on_incompatible(left, right)",
        "snippet": "def raise_on_incompatible(left, right):\n    \"\"\"\n    Helper function to render a consistent error message when raising\n    IncompatibleFrequency.\n\n    Parameters\n    ----------\n    left : PeriodArray\n    right : None, DateOffset, Period, ndarray, or timedelta-like\n\n    Returns\n    ------\n    IncompatibleFrequency\n        Exception to be raised by the caller.\n    \"\"\"\n    # GH#24283 error message format depends on whether right is scalar\n    if isinstance(right, np.ndarray) or right is None:\n        other_freq = None\n    elif isinstance(right, (ABCPeriodIndex, PeriodArray, Period, DateOffset)):\n        other_freq = right.freqstr\n    else:\n        other_freq = _delta_to_tick(Timedelta(right)).freqstr\n\n    msg = DIFFERENT_FREQ.format(\n        cls=type(left).__name__, own_freq=left.freqstr, other_freq=other_freq\n    )\n    return IncompatibleFrequency(msg)",
        "begin_line": 833,
        "end_line": 859,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#866",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Sequence[Optional[Period]],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    if is_datetime64_dtype(data):\n        return PeriodArray._from_datetime64(data, freq)\n    if isinstance(data, (ABCPeriodIndex, ABCSeries, PeriodArray)):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    dtype: Optional[PeriodDtype]\n    if freq:\n        dtype = PeriodDtype(freq)\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 866,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.014492753623188406,
            "pseudo_dstar_susp": 0.014492753623188406,
            "pseudo_tarantula_susp": 0.014492753623188406,
            "pseudo_op2_susp": 0.009433962264150943,
            "pseudo_barinel_susp": 0.014492753623188406
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#948",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 948,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00684931506849315,
            "pseudo_dstar_susp": 0.006802721088435374,
            "pseudo_tarantula_susp": 0.00684931506849315,
            "pseudo_op2_susp": 0.00546448087431694,
            "pseudo_barinel_susp": 0.00684931506849315
        }
    },
    {
        "name": "pandas.core.arrays.period.dt64arr_to_periodarr#981",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.dt64arr_to_periodarr(data, freq, tz=None)",
        "snippet": "def dt64arr_to_periodarr(data, freq, tz=None):\n    \"\"\"\n    Convert an datetime-like array to values Period ordinals.\n\n    Parameters\n    ----------\n    data : Union[Series[datetime64[ns]], DatetimeIndex, ndarray[datetime64ns]]\n    freq : Optional[Union[str, Tick]]\n        Must match the `freq` on the `data` if `data` is a DatetimeIndex\n        or Series.\n    tz : Optional[tzinfo]\n\n    Returns\n    -------\n    ordinals : ndarray[int]\n    freq : Tick\n        The frequency extracted from the Series or DatetimeIndex if that's\n        used.\n\n    \"\"\"\n    if data.dtype != np.dtype(\"M8[ns]\"):\n        raise ValueError(f\"Wrong dtype: {data.dtype}\")\n\n    if freq is None:\n        if isinstance(data, ABCIndexClass):\n            data, freq = data._values, data.freq\n        elif isinstance(data, ABCSeries):\n            data, freq = data._values, data.dt.freq\n\n    freq = Period._maybe_convert_freq(freq)\n\n    if isinstance(data, (ABCIndexClass, ABCSeries)):\n        data = data._values\n\n    base, mult = libfrequencies.get_freq_code(freq)\n    return libperiod.dt64arr_to_periodarr(data.view(\"i8\"), base, tz), freq",
        "begin_line": 981,
        "end_line": 1016,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000167897918065816,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#1019",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 1019,
        "end_line": 1063,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025960539979231567,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.compat.numpy.__init__.tz_replacer#32",
        "src_path": "pandas/compat/numpy/__init__.py",
        "class_name": "pandas.compat.numpy.__init__",
        "signature": "pandas.compat.numpy.__init__.tz_replacer(s)",
        "snippet": "def tz_replacer(s):\n    if isinstance(s, str):\n        if s.endswith(\"Z\"):\n            s = s[:-1]\n        elif _tz_regex.search(s):\n            s = s[:-5]\n    return s",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.compat.numpy.__init__.np_datetime64_compat#41",
        "src_path": "pandas/compat/numpy/__init__.py",
        "class_name": "pandas.compat.numpy.__init__",
        "signature": "pandas.compat.numpy.__init__.np_datetime64_compat(s, *args, **kwargs)",
        "snippet": "def np_datetime64_compat(s, *args, **kwargs):\n    \"\"\"\n    provide compat for construction of strings to numpy datetime64's with\n    tz-changes in 1.11 that make '2015-01-01 09:00:00Z' show a deprecation\n    warning, when need to pass '2015-01-01 09:00:00'\n    \"\"\"\n    s = tz_replacer(s)\n    return np.datetime64(s, *args, **kwargs)",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#66",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019634792852935403,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#76",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012371644191513053,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__reduce__#88",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__reduce__(self)",
        "snippet": "    def __reduce__(self):\n        return type(self), (list(self),)",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.sorting.nargsort#243",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.nargsort(items, kind: str='quicksort', ascending: bool=True, na_position: str='last')",
        "snippet": "def nargsort(\n    items, kind: str = \"quicksort\", ascending: bool = True, na_position: str = \"last\"\n):\n    \"\"\"\n    Intended to be a drop-in replacement for np.argsort which handles NaNs.\n\n    Adds ascending and na_position parameters.\n\n    (GH #6399, #5231)\n\n    Parameters\n    ----------\n    kind : str, default 'quicksort'\n    ascending : bool, default True\n    na_position : {'first', 'last'}, default 'last'\n    \"\"\"\n    items = extract_array(items)\n    mask = np.asarray(isna(items))\n\n    if is_extension_array_dtype(items):\n        items = items._values_for_argsort()\n    else:\n        items = np.asanyarray(items)\n\n    idx = np.arange(len(items))\n    non_nans = items[~mask]\n    non_nan_idx = idx[~mask]\n    nan_idx = np.nonzero(mask)[0]\n    if not ascending:\n        non_nans = non_nans[::-1]\n        non_nan_idx = non_nan_idx[::-1]\n    indexer = non_nan_idx[non_nans.argsort(kind=kind)]\n    if not ascending:\n        indexer = indexer[::-1]\n    # Finally, place the NaNs at the end or the beginning according to\n    # na_position\n    if na_position == \"last\":\n        indexer = np.concatenate([indexer, nan_idx])\n    elif na_position == \"first\":\n        indexer = np.concatenate([nan_idx, indexer])\n    else:\n        raise ValueError(f\"invalid na_position: {na_position}\")\n    return indexer",
        "begin_line": 243,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter.__init__#230",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter.__init__(self, series: 'Series', buf: Optional[IO[str]]=None, length: Union[bool, str]=True, header: bool=True, index: bool=True, na_rep: str='NaN', name: bool=False, float_format: Optional[str]=None, dtype: bool=True, max_rows: Optional[int]=None, min_rows: Optional[int]=None)",
        "snippet": "    def __init__(\n        self,\n        series: \"Series\",\n        buf: Optional[IO[str]] = None,\n        length: Union[bool, str] = True,\n        header: bool = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        name: bool = False,\n        float_format: Optional[str] = None,\n        dtype: bool = True,\n        max_rows: Optional[int] = None,\n        min_rows: Optional[int] = None,\n    ):\n        self.series = series\n        self.buf = buf if buf is not None else StringIO()\n        self.name = name\n        self.na_rep = na_rep\n        self.header = header\n        self.length = length\n        self.index = index\n        self.max_rows = max_rows\n        self.min_rows = min_rows\n\n        if float_format is None:\n            float_format = get_option(\"display.float_format\")\n        self.float_format = float_format\n        self.dtype = dtype\n        self.adj = _get_adjustment()\n\n        self._chk_truncate()",
        "begin_line": 230,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._chk_truncate#262",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._chk_truncate(self)",
        "snippet": "    def _chk_truncate(self) -> None:\n        from pandas.core.reshape.concat import concat\n\n        self.tr_row_num: Optional[int]\n\n        min_rows = self.min_rows\n        max_rows = self.max_rows\n        # truncation determined by max_rows, actual truncated number of rows\n        # used below by min_rows\n        truncate_v = max_rows and (len(self.series) > max_rows)\n        series = self.series\n        if truncate_v:\n            max_rows = cast(int, max_rows)\n            if min_rows:\n                # if min_rows is set (not None or 0), set max_rows to minimum\n                # of both\n                max_rows = min(min_rows, max_rows)\n            if max_rows == 1:\n                row_num = max_rows\n                series = series.iloc[:max_rows]\n            else:\n                row_num = max_rows // 2\n                series = series._ensure_type(\n                    concat((series.iloc[:row_num], series.iloc[-row_num:]))\n                )\n            self.tr_row_num = row_num\n        else:\n            self.tr_row_num = None\n        self.tr_series = series\n        self.truncate_v = truncate_v",
        "begin_line": 262,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_footer#293",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_footer(self)",
        "snippet": "    def _get_footer(self) -> str:\n        name = self.series.name\n        footer = \"\"\n\n        if getattr(self.series.index, \"freq\", None) is not None:\n            footer += \"Freq: {freq}\".format(freq=self.series.index.freqstr)\n\n        if self.name is not False and name is not None:\n            if footer:\n                footer += \", \"\n\n            series_name = pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            footer += (\n                (\"Name: {sname}\".format(sname=series_name)) if name is not None else \"\"\n            )\n\n        if self.length is True or (self.length == \"truncate\" and self.truncate_v):\n            if footer:\n                footer += \", \"\n            footer += \"Length: {length}\".format(length=len(self.series))\n\n        if self.dtype is not False and self.dtype is not None:\n            name = getattr(self.tr_series.dtype, \"name\", None)\n            if name:\n                if footer:\n                    footer += \", \"\n                footer += \"dtype: {typ}\".format(typ=pprint_thing(name))\n\n        # level infos are added to the end and in a new line, like it is done\n        # for Categoricals\n        if is_categorical_dtype(self.tr_series.dtype):\n            level_info = self.tr_series._values._repr_categories_info()\n            if footer:\n                footer += \"\\n\"\n            footer += level_info\n\n        return str(footer)",
        "begin_line": 293,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_formatted_index#331",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_formatted_index(self)",
        "snippet": "    def _get_formatted_index(self) -> Tuple[List[str], bool]:\n        index = self.tr_series.index\n        is_multi = isinstance(index, ABCMultiIndex)\n\n        if is_multi:\n            have_header = any(name for name in index.names)\n            fmt_index = index.format(names=True)\n        else:\n            have_header = index.name is not None\n            fmt_index = index.format(name=True)\n        return fmt_index, have_header",
        "begin_line": 331,
        "end_line": 341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_formatted_values#343",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_formatted_values(self)",
        "snippet": "    def _get_formatted_values(self) -> List[str]:\n        return format_array(\n            self.tr_series._values,\n            None,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n        )",
        "begin_line": 343,
        "end_line": 349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter.to_string#351",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter.to_string(self)",
        "snippet": "    def to_string(self) -> str:\n        series = self.tr_series\n        footer = self._get_footer()\n\n        if len(series) == 0:\n            return \"{name}([], {footer})\".format(\n                name=type(self.series).__name__, footer=footer\n            )\n\n        fmt_index, have_header = self._get_formatted_index()\n        fmt_values = self._get_formatted_values()\n\n        if self.truncate_v:\n            n_header_rows = 0\n            row_num = self.tr_row_num\n            row_num = cast(int, row_num)\n            width = self.adj.len(fmt_values[row_num - 1])\n            if width > 3:\n                dot_str = \"...\"\n            else:\n                dot_str = \"..\"\n            # Series uses mode=center because it has single value columns\n            # DataFrame uses mode=left\n            dot_str = self.adj.justify([dot_str], width, mode=\"center\")[0]\n            fmt_values.insert(row_num + n_header_rows, dot_str)\n            fmt_index.insert(row_num + 1, \"\")\n\n        if self.index:\n            result = self.adj.adjoin(3, *[fmt_index[1:], fmt_values])\n        else:\n            result = self.adj.adjoin(3, fmt_values)\n\n        if self.header and have_header:\n            result = fmt_index[0] + \"\\n\" + result\n\n        if footer:\n            result += \"\\n\" + footer\n\n        return str(\"\".join(result))",
        "begin_line": 351,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#393",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 393,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#396",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 396,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.justify#399",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.justify(self, texts: Any, max_len: int, mode: str='right')",
        "snippet": "    def justify(self, texts: Any, max_len: int, mode: str = \"right\") -> List[str]:\n        return justify(texts, max_len, mode=mode)",
        "begin_line": 399,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.adjoin#402",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.adjoin(self, space: int, *lists, **kwargs)",
        "snippet": "    def adjoin(self, space: int, *lists, **kwargs) -> str:\n        return adjoin(space, *lists, strlen=self.len, justfunc=self.justify, **kwargs)",
        "begin_line": 402,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#445",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 445,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.format_array#1099",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.format_array(values: Any, formatter: Optional[Callable], float_format: Optional[float_format_type]=None, na_rep: str='NaN', digits: Optional[int]=None, space: Optional[Union[str, int]]=None, justify: str='right', decimal: str='.', leading_space: Optional[bool]=None)",
        "snippet": "def format_array(\n    values: Any,\n    formatter: Optional[Callable],\n    float_format: Optional[float_format_type] = None,\n    na_rep: str = \"NaN\",\n    digits: Optional[int] = None,\n    space: Optional[Union[str, int]] = None,\n    justify: str = \"right\",\n    decimal: str = \".\",\n    leading_space: Optional[bool] = None,\n) -> List[str]:\n    \"\"\"\n    Format an array for printing.\n\n    Parameters\n    ----------\n    values\n    formatter\n    float_format\n    na_rep\n    digits\n    space\n    justify\n    decimal\n    leading_space : bool, optional\n        Whether the array should be formatted with a leading space.\n        When an array as a column of a Series or DataFrame, we do want\n        the leading space to pad between columns.\n\n        When formatting an Index subclass\n        (e.g. IntervalIndex._format_native_types), we don't want the\n        leading space since it should be left-aligned.\n\n    Returns\n    -------\n    List[str]\n    \"\"\"\n\n    fmt_klass: Type[GenericArrayFormatter]\n    if is_datetime64_dtype(values.dtype):\n        fmt_klass = Datetime64Formatter\n    elif is_datetime64tz_dtype(values):\n        fmt_klass = Datetime64TZFormatter\n    elif is_timedelta64_dtype(values.dtype):\n        fmt_klass = Timedelta64Formatter\n    elif is_extension_array_dtype(values.dtype):\n        fmt_klass = ExtensionArrayFormatter\n    elif is_float_dtype(values.dtype) or is_complex_dtype(values.dtype):\n        fmt_klass = FloatArrayFormatter\n    elif is_integer_dtype(values.dtype):\n        fmt_klass = IntArrayFormatter\n    else:\n        fmt_klass = GenericArrayFormatter\n\n    if space is None:\n        space = get_option(\"display.column_space\")\n\n    if float_format is None:\n        float_format = get_option(\"display.float_format\")\n\n    if digits is None:\n        digits = get_option(\"display.precision\")\n\n    fmt_obj = fmt_klass(\n        values,\n        digits=digits,\n        na_rep=na_rep,\n        float_format=float_format,\n        formatter=formatter,\n        space=space,\n        justify=justify,\n        decimal=decimal,\n        leading_space=leading_space,\n    )\n\n    return fmt_obj.get_result()",
        "begin_line": 1099,
        "end_line": 1174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.__init__#1178",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.__init__(self, values: Any, digits: int=7, formatter: Optional[Callable]=None, na_rep: str='NaN', space: Union[str, int]=12, float_format: Optional[float_format_type]=None, justify: str='right', decimal: str='.', quoting: Optional[int]=None, fixed_width: bool=True, leading_space: Optional[bool]=None)",
        "snippet": "    def __init__(\n        self,\n        values: Any,\n        digits: int = 7,\n        formatter: Optional[Callable] = None,\n        na_rep: str = \"NaN\",\n        space: Union[str, int] = 12,\n        float_format: Optional[float_format_type] = None,\n        justify: str = \"right\",\n        decimal: str = \".\",\n        quoting: Optional[int] = None,\n        fixed_width: bool = True,\n        leading_space: Optional[bool] = None,\n    ):\n        self.values = values\n        self.digits = digits\n        self.na_rep = na_rep\n        self.space = space\n        self.formatter = formatter\n        self.float_format = float_format\n        self.justify = justify\n        self.decimal = decimal\n        self.quoting = quoting\n        self.fixed_width = fixed_width\n        self.leading_space = leading_space",
        "begin_line": 1178,
        "end_line": 1202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.get_result#1204",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.get_result(self)",
        "snippet": "    def get_result(self) -> List[str]:\n        fmt_values = self._format_strings()\n        return _make_fixed_width(fmt_values, self.justify)",
        "begin_line": 1204,
        "end_line": 1206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format_strings#1208",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        if self.float_format is None:\n            float_format = get_option(\"display.float_format\")\n            if float_format is None:\n                fmt_str = \"{{x: .{prec:d}g}}\".format(\n                    prec=get_option(\"display.precision\")\n                )\n                float_format = lambda x: fmt_str.format(x=x)\n        else:\n            float_format = self.float_format\n\n        formatter = (\n            self.formatter\n            if self.formatter is not None\n            else (lambda x: pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")))\n        )\n\n        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NA:\n                        return \"NA\"\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return \"{x}\".format(x=x)\n            else:\n                # object dtype\n                return \"{x}\".format(x=formatter(x))\n\n        vals = self.values\n        if isinstance(vals, Index):\n            vals = vals._values\n        elif isinstance(vals, ABCSparseArray):\n            vals = vals.values\n\n        is_float_type = lib.map_infer(vals, is_float) & notna(vals)\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()\n\n        fmt_values = []\n        for i, v in enumerate(vals):\n            if not is_float_type[i] and leading_space:\n                fmt_values.append(\" {v}\".format(v=_format(v)))\n            elif is_float_type[i]:\n                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here.\n                    tpl = \"{v}\"\n                else:\n                    tpl = \" {v}\"\n                fmt_values.append(tpl.format(v=_format(v)))\n\n        return fmt_values",
        "begin_line": 1208,
        "end_line": 1272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format#1225",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format(x)",
        "snippet": "        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NA:\n                        return \"NA\"\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return \"{x}\".format(x=x)\n            else:\n                # object dtype\n                return \"{x}\".format(x=formatter(x))",
        "begin_line": 1225,
        "end_line": 1244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format._make_fixed_width#1733",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._make_fixed_width(strings: List[str], justify: str='right', minimum: Optional[int]=None, adj: Optional[TextAdjustment]=None)",
        "snippet": "def _make_fixed_width(\n    strings: List[str],\n    justify: str = \"right\",\n    minimum: Optional[int] = None,\n    adj: Optional[TextAdjustment] = None,\n) -> List[str]:\n\n    if len(strings) == 0 or justify == \"all\":\n        return strings\n\n    if adj is None:\n        adj = _get_adjustment()\n\n    max_len = max(adj.len(x) for x in strings)\n\n    if minimum is not None:\n        max_len = max(minimum, max_len)\n\n    conf_max = get_option(\"display.max_colwidth\")\n    if conf_max is not None and max_len > conf_max:\n        max_len = conf_max\n\n    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x\n\n    strings = [just(x) for x in strings]\n    result = adj.justify(strings, max_len, mode=justify)\n    return result",
        "begin_line": 1733,
        "end_line": 1763,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.io.formats.format.just#1755",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.just(x)",
        "snippet": "    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x",
        "begin_line": 1755,
        "end_line": 1759,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#30",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 30,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003389830508474576,
            "pseudo_dstar_susp": 0.003389830508474576,
            "pseudo_tarantula_susp": 0.0034129692832764505,
            "pseudo_op2_susp": 0.003389830508474576,
            "pseudo_barinel_susp": 0.0034129692832764505
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#50",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)",
        "begin_line": 50,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003436426116838488,
            "pseudo_dstar_susp": 0.003436426116838488,
            "pseudo_tarantula_susp": 0.0034602076124567475,
            "pseudo_op2_susp": 0.003436426116838488,
            "pseudo_barinel_susp": 0.0034602076124567475
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#309",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype.ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                if len(values) == 0:\n                    sanitize_dtype = \"object\"\n                else:\n                    sanitize_dtype = None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError:\n                codes, categories = factorize(values, sort=False)\n                if dtype.ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    )\n            except ValueError:\n\n                # FIXME\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                )\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype.ordered)\n\n        elif is_categorical_dtype(values):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = _recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 309,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#394",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 394,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#444",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 444,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._from_sequence#459",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return Categorical(scalars, dtype=dtype)",
        "begin_line": 459,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_codes#653",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_codes(self)",
        "snippet": "    def _get_codes(self):\n        \"\"\"\n        Get the codes.\n\n        Returns\n        -------\n        codes : integer array view\n            A non writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 653,
        "end_line": 664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__array__#1264",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The numpy array interface.\n\n        Returns\n        -------\n        numpy.array\n            A numpy array of either the specified dtype or,\n            if dtype==None (default), the same dtype as\n            categorical.categories.dtype.\n        \"\"\"\n        ret = take_1d(self.categories.values, self._codes)\n        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            # When we're a Categorical[ExtensionArray], like Interval,\n            # we need to ensure __array__ get's all the way to an\n            # ndarray.\n            ret = np.asarray(ret)\n        return ret",
        "begin_line": 1264,
        "end_line": 1283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._internal_get_values#1462",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        \"\"\"\n        Return the values.\n\n        For internal compatibility with pandas formatting.\n\n        Returns\n        -------\n        np.ndarray or Index\n            A numpy array of the same dtype as categorical.categories.dtype or\n            Index if datetime / periods.\n        \"\"\"\n        # if we are a datetime and period index, return Index to keep metadata\n        if needs_i8_conversion(self.categories):\n            return self.categories.take(self._codes, fill_value=np.nan)\n        elif is_integer_dtype(self.categories) and -1 in self._codes:\n            return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n        return np.array(self)",
        "begin_line": 1462,
        "end_line": 1479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__len__#1865",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        The length of this Categorical.\n        \"\"\"\n        return len(self._codes)",
        "begin_line": 1865,
        "end_line": 1869,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__iter__#1871",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Returns an Iterator over the values of this Categorical.\n        \"\"\"\n        return iter(self._internal_get_values().tolist())",
        "begin_line": 1871,
        "end_line": 1875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022026431718061675,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.categorical._recode_for_categories#2576",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
        "snippet": "def _recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> _recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1])\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
        "begin_line": 2576,
        "end_line": 2607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY#42",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY(op, x, y)",
        "snippet": "def comp_method_OBJECT_ARRAY(op, x, y):\n    if isinstance(y, list):\n        y = construct_1d_object_array_from_listlike(y)\n\n    # TODO: Should the checks below be ABCIndexClass?\n    if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):\n        # TODO: should this be ABCIndexClass??\n        if not is_object_dtype(y.dtype):\n            y = y.astype(np.object_)\n\n        if isinstance(y, (ABCSeries, ABCIndex)):\n            y = y.values\n\n        result = libops.vec_compare(x.ravel(), y, op)\n    else:\n        result = libops.scalar_compare(x.ravel(), y, op)\n    return result.reshape(x.shape)",
        "begin_line": 42,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.masked_arith_op#61",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.masked_arith_op(x, y, op)",
        "snippet": "def masked_arith_op(x, y, op):\n    \"\"\"\n    If the given arithmetic operation fails, attempt it again on\n    only the non-null elements of the input array(s).\n\n    Parameters\n    ----------\n    x : np.ndarray\n    y : np.ndarray, Series, Index\n    op : binary operator\n    \"\"\"\n    # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes\n    # the logic valid for both Series and DataFrame ops.\n    xrav = x.ravel()\n    assert isinstance(x, np.ndarray), type(x)\n    if isinstance(y, np.ndarray):\n        dtype = find_common_type([x.dtype, y.dtype])\n        result = np.empty(x.size, dtype=dtype)\n\n        # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex\n        #  we would get int64 dtype, see GH#19956\n        yrav = y.ravel()\n        mask = notna(xrav) & notna(yrav)\n\n        if yrav.shape != mask.shape:\n            # FIXME: GH#5284, GH#5035, GH#19448\n            # Without specifically raising here we get mismatched\n            # errors in Py3 (TypeError) vs Py2 (ValueError)\n            # Note: Only = an issue in DataFrame case\n            raise ValueError(\"Cannot broadcast operands together.\")\n\n        if mask.any():\n            with np.errstate(all=\"ignore\"):\n                result[mask] = op(xrav[mask], yrav[mask])\n\n    else:\n        if not is_scalar(y):\n            raise TypeError(type(y))\n\n        # mask is only meaningful for x\n        result = np.empty(x.size, dtype=x.dtype)\n        mask = notna(xrav)\n\n        # 1 ** np.nan is 1. So we have to unmask those.\n        if op is pow:\n            mask = np.where(x == 1, False, mask)\n        elif op is rpow:\n            mask = np.where(y == 1, False, mask)\n\n        if mask.any():\n            with np.errstate(all=\"ignore\"):\n                result[mask] = op(xrav[mask], y)\n\n    result, _ = maybe_upcast_putmask(result, ~mask, np.nan)\n    result = result.reshape(x.shape)  # 2D compat\n    return result",
        "begin_line": 61,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_op#120",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_op(x, y)",
        "snippet": "    def na_op(x, y):\n        return na_arithmetic_op(x, y, op, str_rep)",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003053435114503817,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#126",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: str)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: str):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        result = masked_arith_op(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 126,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018060321473722233,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#156",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str)",
        "snippet": "def arithmetic_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str\n):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    from pandas.core.ops import maybe_upcast_for_op\n\n    # NB: We assume that extract_array has already been called\n    #  on `left` and `right`.\n    lvalues = left\n    rvalues = right\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here\n        #  because they have `freq` attribute which is handled correctly\n        #  by dispatch_to_extension_op.\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
        "begin_line": 156,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015227653418608191,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comparison_op#201",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comparison_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op)",
        "snippet": "def comparison_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\"\n    Evaluate a comparison operation `=`, `!=`, `>=`, `>`, `<=`, or `<`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n    \"\"\"\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray, ABCIndexClass)):\n        # TODO: make this treatment consistent across ops and classes.\n        #  We are not catching all listlikes here (e.g. frozenset, tuple)\n        #  The ambiguous case is object-dtype.  See GH#27803\n        if len(lvalues) != len(rvalues):\n            raise ValueError(\"Lengths must match to compare\")\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    elif is_scalar(rvalues) and isna(rvalues):\n        # numpy does not like comparisons vs None\n        if op is operator.ne:\n            res_values = np.ones(lvalues.shape, dtype=bool)\n        else:\n            res_values = np.zeros(lvalues.shape, dtype=bool)\n\n    elif is_object_dtype(lvalues.dtype):\n        res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n\n    else:\n        op_name = f\"__{op.__name__}__\"\n        method = getattr(lvalues, op_name)\n        with np.errstate(all=\"ignore\"):\n            res_values = method(rvalues)\n\n        if res_values is NotImplemented:\n            res_values = invalid_comparison(lvalues, rvalues, op)\n        if is_scalar(res_values):\n            typ = type(rvalues)\n            raise TypeError(f\"Could not compare {typ} type with Series\")\n\n    return res_values",
        "begin_line": 201,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.array_ops.get_array_op#371",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.get_array_op(op, str_rep: Optional[str]=None)",
        "snippet": "def get_array_op(op, str_rep: Optional[str] = None):\n    \"\"\"\n    Return a binary array operation corresponding to the given operator op.\n\n    Parameters\n    ----------\n    op : function\n        Binary operator from operator or roperator module.\n    str_rep : str or None, default None\n        str_rep to pass to arithmetic_op\n\n    Returns\n    -------\n    function\n    \"\"\"\n    op_name = op.__name__.strip(\"_\")\n    if op_name in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}:\n        return partial(comparison_op, op=op)\n    elif op_name in {\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"}:\n        return partial(logical_op, op=op)\n    else:\n        return partial(arithmetic_op, op=op, str_rep=str_rep)",
        "begin_line": 371,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016823687752355316,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.timedeltas.to_timedelta#16",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas.to_timedelta(arg, unit='ns', errors='raise')",
        "snippet": "def to_timedelta(arg, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert argument to timedelta.\n\n    Timedeltas are absolute differences in times, expressed in difference\n    units (e.g. days, hours, minutes, seconds). This method converts\n    an argument from a recognized timedelta format / value into\n    a Timedelta type.\n\n    Parameters\n    ----------\n    arg : str, timedelta, list-like or Series\n        The data to be converted to timedelta.\n    unit : str, default 'ns'\n        Denotes the unit of the arg. Possible values:\n        ('Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr',\n        'h', 'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n        'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n        'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n        'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n        'nanosecond', 'N').\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n\n    Returns\n    -------\n    timedelta64 or numpy.array of timedelta64\n        Output type returned if parsing succeeded.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n\n    Examples\n    --------\n\n    Parsing a single string to a Timedelta:\n\n    >>> pd.to_timedelta('1 days 06:05:01.00003')\n    Timedelta('1 days 06:05:01.000030')\n    >>> pd.to_timedelta('15.5us')\n    Timedelta('0 days 00:00:00.000015')\n\n    Parsing a list or array of strings:\n\n    >>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\n    TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015', NaT],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Converting numbers by specifying the `unit` keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), unit='s')\n    TimedeltaIndex(['00:00:00', '00:00:01', '00:00:02',\n                    '00:00:03', '00:00:04'],\n                   dtype='timedelta64[ns]', freq=None)\n    >>> pd.to_timedelta(np.arange(5), unit='d')\n    TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    unit = parse_timedelta_unit(unit)\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"errors must be one of 'ignore', 'raise', or 'coerce'}\")\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if arg is None:\n        return arg\n    elif isinstance(arg, ABCSeries):\n        values = _convert_listlike(arg._values, unit=unit, errors=errors)\n        return arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, ABCIndexClass):\n        return _convert_listlike(arg, unit=unit, errors=errors, name=arg.name)\n    elif isinstance(arg, np.ndarray) and arg.ndim == 0:\n        # extract array scalar and process below\n        arg = arg.item()\n    elif is_list_like(arg) and getattr(arg, \"ndim\", 1) == 1:\n        return _convert_listlike(arg, unit=unit, errors=errors)\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, timedelta, list, tuple, 1-d array, or Series\"\n        )\n\n    # ...so it must be a scalar value. Return scalar.\n    return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)",
        "begin_line": 16,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._coerce_scalar_to_timedelta_type#111",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._coerce_scalar_to_timedelta_type(r, unit='ns', errors='raise')",
        "snippet": "def _coerce_scalar_to_timedelta_type(r, unit=\"ns\", errors=\"raise\"):\n    \"\"\"Convert string 'r' to a timedelta object.\"\"\"\n\n    try:\n        result = Timedelta(r, unit)\n    except ValueError:\n        if errors == \"raise\":\n            raise\n        elif errors == \"ignore\":\n            return r\n\n        # coerce\n        result = NaT\n\n    return result",
        "begin_line": 111,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._convert_listlike#128",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._convert_listlike(arg, unit='ns', errors='raise', name=None)",
        "snippet": "def _convert_listlike(arg, unit=\"ns\", errors=\"raise\", name=None):\n    \"\"\"Convert a list of objects to a timedelta index object.\"\"\"\n\n    if isinstance(arg, (list, tuple)) or not hasattr(arg, \"dtype\"):\n        # This is needed only to ensure that in the case where we end up\n        #  returning arg (errors == \"ignore\"), and where the input is a\n        #  generator, we return a useful list-like instead of a\n        #  used-up generator\n        arg = np.array(list(arg), dtype=object)\n\n    try:\n        value = sequence_to_td64ns(arg, unit=unit, errors=errors, copy=False)[0]\n    except ValueError:\n        if errors == \"ignore\":\n            return arg\n        else:\n            # This else-block accounts for the cases when errors='raise'\n            # and errors='coerce'. If errors == 'raise', these errors\n            # should be raised. If errors == 'coerce', we shouldn't\n            # expect any errors to be raised, since all parsing errors\n            # cause coercion to pd.NaT. However, if an error / bug is\n            # introduced that causes an Exception to be raised, we would\n            # like to surface it.\n            raise\n\n    from pandas import TimedeltaIndex\n\n    value = TimedeltaIndex(value, unit=\"ns\", name=name)\n    return value",
        "begin_line": 128,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#169",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields,\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            argument = list(set(fields) - valid_field_set)[0]\n            raise TypeError(f\"__new__() got an unexpected keyword argument {argument}\")\n\n        name = maybe_extract_name(name, data, cls)\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n            # PeriodArray._generate range does validation that fields is\n            # empty when really using the range-based constructor.\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 169,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009615384615384616,
            "pseudo_dstar_susp": 0.009615384615384616,
            "pseudo_tarantula_susp": 0.009615384615384616,
            "pseudo_op2_susp": 0.0070921985815602835,
            "pseudo_barinel_susp": 0.009615384615384616
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#230",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values, name=None, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, **kwargs):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n\n        \"\"\"\n        # TODO: raising on floats is tested, but maybe not useful.\n        # Should the callers know not to pass floats?\n        # At the very least, I think we can ensure that lists aren't passed.\n        if isinstance(values, list):\n            values = np.asarray(values)\n        if is_float_dtype(values):\n            raise TypeError(\"PeriodIndex._simple_new does not accept floats.\")\n        if freq:\n            freq = Period._maybe_convert_freq(freq)\n        values = PeriodArray(values, freq=freq)\n\n        if not isinstance(values, PeriodArray):\n            raise TypeError(\"PeriodIndex._simple_new only accepts PeriodArray\")\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._reset_identity()\n        return result",
        "begin_line": 230,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009615384615384616,
            "pseudo_dstar_susp": 0.009615384615384616,
            "pseudo_tarantula_susp": 0.009615384615384616,
            "pseudo_op2_susp": 0.0070921985815602835,
            "pseudo_barinel_susp": 0.009615384615384616
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.values#266",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.values(self)",
        "snippet": "    def values(self):\n        return np.asarray(self)",
        "begin_line": 266,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._shallow_copy#269",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        # TODO: simplify, figure out type of values\n        if values is None:\n            values = self._data\n\n        if isinstance(values, type(self)):\n            values = values._data\n\n        if not isinstance(values, PeriodArray):\n            if isinstance(values, np.ndarray) and values.dtype == \"i8\":\n                values = PeriodArray(values, freq=self.freq)\n            else:\n                # GH#30713 this should never be reached\n                raise TypeError(type(values), getattr(values, \"dtype\", None))\n\n        # We don't allow changing `freq` in _shallow_copy.\n        validate_dtype_freq(self.dtype, kwargs.get(\"freq\"))\n        attributes = self._get_attributes_dict()\n\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n        return self._simple_new(values, **attributes)",
        "begin_line": 269,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034423407917383823,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__array__#404",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if is_integer_dtype(dtype):\n            return self.asi8\n        else:\n            return self.astype(object).values",
        "begin_line": 404,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__array_wrap__#410",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc. Needs additional handling as\n        PeriodIndex stores internal data as int dtype\n\n        Replace this to __numpy_ufunc__ in future version\n        \"\"\"\n        if isinstance(context, tuple) and len(context) > 0:\n            func = context[0]\n            if func is np.add:\n                pass\n            elif func is np.subtract:\n                name = self.name\n                left = context[1][0]\n                right = context[1][1]\n                if isinstance(left, PeriodIndex) and isinstance(right, PeriodIndex):\n                    name = left.name if left.name == right.name else None\n                    return Index(result, name=name)\n                elif isinstance(left, Period) or isinstance(right, Period):\n                    return Index(result, name=name)\n            elif isinstance(func, np.ufunc):\n                if \"M->M\" not in func.types:\n                    msg = f\"ufunc '{func.__name__}' not supported for the PeriodIndex\"\n                    # This should be TypeError, but TypeError cannot be raised\n                    # from here because numpy catches.\n                    raise ValueError(msg)\n\n        if is_bool_dtype(result):\n            return result\n        # the result is object dtype array of Period\n        # cannot pass _simple_new as it is\n        return type(self)(result, freq=self.freq, name=self.name)",
        "begin_line": 410,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.astype#468",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.astype(self, dtype, copy=True, how='start')",
        "snippet": "    def astype(self, dtype, copy=True, how=\"start\"):\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_any_dtype(dtype):\n            # 'how' is index-specific, isn't part of the EA interface.\n            tz = getattr(dtype, \"tz\", None)\n            return self.to_timestamp(how=how).tz_localize(tz)\n\n        # TODO: should probably raise on `how` here, so we don't ignore it.\n        return super().astype(dtype, copy=copy)",
        "begin_line": 468,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002937720329024677,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.inferred_type#508",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c data is represented as ints make sure we can't have ambiguous\n        # indexing\n        return \"period\"",
        "begin_line": 508,
        "end_line": 511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022291573785109228,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.insert#735",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        if not isinstance(item, Period) or self.freq != item.freq:\n            return self.astype(object).insert(loc, item)\n\n        idx = np.concatenate(\n            (self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8)\n        )\n        return self._shallow_copy(idx)",
        "begin_line": 735,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#880",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(\n    start=None, end=None, periods=None, freq=None, name=None\n) -> PeriodIndex:\n    \"\"\"\n    Return a fixed frequency PeriodIndex.\n\n    The day (calendar) is the default frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods.\n    end : str or period-like, default None\n        Right bound for generating periods.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n    name : str, default None\n        Name of the resulting PeriodIndex.\n\n    Returns\n    -------\n    PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 880,
        "end_line": 943,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00025960539979231567,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.invalid.invalid_comparison#9",
        "src_path": "pandas/core/ops/invalid.py",
        "class_name": "pandas.core.ops.invalid",
        "signature": "pandas.core.ops.invalid.invalid_comparison(left, right, op)",
        "snippet": "def invalid_comparison(left, right, op):\n    \"\"\"\n    If a comparison has mismatched types and is not necessarily meaningful,\n    follow python3 conventions by:\n\n        - returning all-False for equality\n        - returning all-True for inequality\n        - raising TypeError otherwise\n\n    Parameters\n    ----------\n    left : array-like\n    right : scalar, array-like\n    op : operator.{eq, ne, lt, le, gt}\n\n    Raises\n    ------\n    TypeError : on inequality comparisons\n    \"\"\"\n    if op is operator.eq:\n        res_values = np.zeros(left.shape, dtype=bool)\n    elif op is operator.ne:\n        res_values = np.ones(left.shape, dtype=bool)\n    else:\n        typ = type(right).__name__\n        raise TypeError(f\"Invalid comparison between dtype={left.dtype} and {typ}\")\n    return res_values",
        "begin_line": 9,
        "end_line": 35,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015928639694170118,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.ops.invalid.invalid_op#51",
        "src_path": "pandas/core/ops/invalid.py",
        "class_name": "pandas.core.ops.invalid",
        "signature": "pandas.core.ops.invalid.invalid_op(self, other=None)",
        "snippet": "    def invalid_op(self, other=None):\n        typ = type(self).__name__\n        raise TypeError(f\"cannot perform {name} with this index type: {typ}\")",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002450379808870375,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.integer.integer_array#122",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.integer_array(values, dtype=None, copy=False)",
        "snippet": "def integer_array(values, dtype=None, copy=False):\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : dtype, optional\n        dtype to coerce\n    copy : bool, default False\n\n    Returns\n    -------\n    IntegerArray\n\n    Raises\n    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)",
        "begin_line": 122,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.integer.safe_cast#145",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.safe_cast(values, dtype, copy)",
        "snippet": "def safe_cast(values, dtype, copy):\n    \"\"\"\n    Safely cast the values to the dtype if they\n    are equivalent, meaning floats must be equivalent to the\n    ints.\n\n    \"\"\"\n\n    try:\n        return values.astype(dtype, casting=\"safe\", copy=copy)\n    except TypeError:\n\n        casted = values.astype(dtype, copy=copy)\n        if (casted == values).all():\n            return casted\n\n        raise TypeError(\n            f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n        )",
        "begin_line": 145,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.integer.coerce_to_array#166",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.coerce_to_array(values, dtype, mask=None, copy=False)",
        "snippet": "def coerce_to_array(values, dtype, mask=None, copy=False):\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : integer dtype\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    # if values is integer numpy array, preserve it's dtype\n    if dtype is None and hasattr(values, \"dtype\"):\n        if is_integer_dtype(values.dtype):\n            dtype = values.dtype\n\n    if dtype is not None:\n        if isinstance(dtype, str) and (\n            dtype.startswith(\"Int\") or dtype.startswith(\"UInt\")\n        ):\n            # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\n            # https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n\n        if not issubclass(type(dtype), _IntegerDtype):\n            try:\n                dtype = _dtypes[str(np.dtype(dtype))]\n            except KeyError:\n                raise ValueError(f\"invalid dtype specified {dtype}\")\n\n    if isinstance(values, IntegerArray):\n        values, mask = values._data, values._mask\n        if dtype is not None:\n            values = values.astype(dtype.numpy_dtype, copy=False)\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    values = np.array(values, copy=copy)\n    if is_object_dtype(values):\n        inferred_type = lib.infer_dtype(values, skipna=True)\n        if inferred_type == \"empty\":\n            values = np.empty(len(values))\n            values.fill(np.nan)\n        elif inferred_type not in [\n            \"floating\",\n            \"integer\",\n            \"mixed-integer\",\n            \"integer-na\",\n            \"mixed-integer-float\",\n        ]:\n            raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n\n    elif not (is_integer_dtype(values) or is_float_dtype(values)):\n        raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    if mask is None:\n        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:\n        raise TypeError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise TypeError(\"mask must be a 1D list-like\")\n\n    # infer dtype if needed\n    if dtype is None:\n        dtype = np.dtype(\"int64\")\n    else:\n        dtype = dtype.type\n\n    # if we are float, let's make sure that we can\n    # safely cast\n\n    # we copy as need to coerce here\n    if mask.any():\n        values = values.copy()\n        values[mask] = 1\n        values = safe_cast(values, dtype, copy=False)\n    else:\n        values = safe_cast(values, dtype, copy=False)\n\n    return values, mask",
        "begin_line": 166,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.dtype#333",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return _dtypes[str(self._data.dtype)]",
        "begin_line": 333,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__init__#336",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__init__(self, values, mask, copy=False)",
        "snippet": "    def __init__(self, values, mask, copy=False):\n        if not (isinstance(values, np.ndarray) and is_integer_dtype(values.dtype)):\n            raise TypeError(\n                \"values should be integer numpy array. Use \"\n                \"the 'integer_array' function instead\"\n            )\n        if not (isinstance(mask, np.ndarray) and is_bool_dtype(mask.dtype)):\n            raise TypeError(\n                \"mask should be boolean numpy array. Use \"\n                \"the 'integer_array' function instead\"\n            )\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n\n        self._data = values\n        self._mask = mask",
        "begin_line": 336,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._from_sequence#356",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return integer_array(scalars, dtype=dtype, copy=copy)",
        "begin_line": 356,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#49",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(pd.NA)\n    True\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 49,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004524886877828055,
            "pseudo_dstar_susp": 0.004524886877828055,
            "pseudo_tarantula_susp": 0.0045662100456621,
            "pseudo_op2_susp": 0.004524886877828055,
            "pseudo_barinel_susp": 0.0045662100456621
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#132",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 132,
        "end_line": 160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0047169811320754715,
            "pseudo_dstar_susp": 0.0047169811320754715,
            "pseudo_tarantula_susp": 0.005649717514124294,
            "pseudo_op2_susp": 0.004672897196261682,
            "pseudo_barinel_susp": 0.005649717514124294
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#225",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 225,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#299",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(pd.NA)\n    False\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 299,
        "end_line": 379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016622340425531914,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#402",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif left_value is libmissing.NA and right_value is not libmissing.NA:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    elif \"boolean value of NA is ambiguous\" in str(err):\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left) or needs_i8_conversion(right):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 402,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00425531914893617,
            "pseudo_dstar_susp": 0.00425531914893617,
            "pseudo_tarantula_susp": 0.004291845493562232,
            "pseudo_op2_susp": 0.00425531914893617,
            "pseudo_barinel_susp": 0.004291845493562232
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#530",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)",
        "snippet": "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_period_dtype(dtype)\n    ):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
        "begin_line": 530,
        "end_line": 575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#588",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 588,
        "end_line": 609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003234152652005175,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#177",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"Value needs to be a scalar value, was type {type(value)}\")\n    msg = \"Wrong type {} for value {}\"\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError):\n        raise TypeError(msg.format(type(value), value))\n    return new_value",
        "begin_line": 177,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#204",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0045662100456621,
            "pseudo_dstar_susp": 0.0045662100456621,
            "pseudo_tarantula_susp": 0.002702702702702703,
            "pseudo_op2_susp": 0.02564102564102564,
            "pseudo_barinel_susp": 0.002702702702702703
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#209",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 209,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012539184952978057,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#220",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 220,
        "end_line": 247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011755025273304338,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#250",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.arrays.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.arrays.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 250,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012084592145015106,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#337",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 337,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011967448539971278,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#370",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 370,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0033222591362126247,
            "pseudo_dstar_susp": 0.0033222591362126247,
            "pseudo_tarantula_susp": 0.0033444816053511705,
            "pseudo_op2_susp": 0.0033222591362126247,
            "pseudo_barinel_susp": 0.0033444816053511705
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#401",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 401,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00267379679144385,
            "pseudo_dstar_susp": 0.00267379679144385,
            "pseudo_tarantula_susp": 0.00267379679144385,
            "pseudo_op2_susp": 0.00267379679144385,
            "pseudo_barinel_susp": 0.00267379679144385
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#439",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 439,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011766090128250382,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#470",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 470,
        "end_line": 501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003048780487804878,
            "pseudo_dstar_susp": 0.003048780487804878,
            "pseudo_tarantula_susp": 0.0030581039755351682,
            "pseudo_op2_susp": 0.003048780487804878,
            "pseudo_barinel_susp": 0.0030581039755351682
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#504",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 504,
        "end_line": 537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012272950417280314,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#540",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 540,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011964584828906437,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#573",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)\n\n    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 573,
        "end_line": 613,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003236245954692557,
            "pseudo_dstar_susp": 0.003236245954692557,
            "pseudo_tarantula_susp": 0.003257328990228013,
            "pseudo_op2_susp": 0.003236245954692557,
            "pseudo_barinel_susp": 0.003257328990228013
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#603",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)",
        "begin_line": 603,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0045871559633027525,
            "pseudo_dstar_susp": 0.0045871559633027525,
            "pseudo_tarantula_susp": 0.003257328990228013,
            "pseudo_op2_susp": 0.02631578947368421,
            "pseudo_barinel_susp": 0.003257328990228013
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_excluded_dtype#606",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_excluded_dtype(dtype)",
        "snippet": "    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)",
        "begin_line": 606,
        "end_line": 611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002577319587628866,
            "pseudo_dstar_susp": 0.002577319587628866,
            "pseudo_tarantula_susp": 0.002577319587628866,
            "pseudo_op2_susp": 0.002577319587628866,
            "pseudo_barinel_susp": 0.002577319587628866
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_arraylike#616",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_arraylike(arr)",
        "snippet": "def is_period_arraylike(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a periodical array-like or PeriodIndex.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a periodical array-like or\n        PeriodIndex instance.\n\n    Examples\n    --------\n    >>> is_period_arraylike([1, 2, 3])\n    False\n    >>> is_period_arraylike(pd.Index([1, 2, 3]))\n    False\n    >>> is_period_arraylike(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\n    True\n    \"\"\"\n\n    if isinstance(arr, (ABCPeriodIndex, ABCPeriodArray)):\n        return True\n    elif isinstance(arr, (np.ndarray, ABCSeries)):\n        return is_period_dtype(arr.dtype)\n    return getattr(arr, \"inferred_type\", None) == \"period\"",
        "begin_line": 616,
        "end_line": 645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012763241863433312,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#683",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(), \"datetime64\")\n    False\n    \"\"\"\n\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 683,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013095861707700367,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#773",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 773,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011953143676786995,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#828",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 828,
        "end_line": 882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012605571662674902,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#885",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 885,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013090718680455556,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#985",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                                dtype=np.datetime64))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 985,
        "end_line": 1022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012645422357106728,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#1025",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, \"base\", None) == _NS_DTYPE",
        "begin_line": 1025,
        "end_line": 1072,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002173913043478261,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#1075",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == _TD_DTYPE)",
        "begin_line": 1075,
        "end_line": 1103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012919896640826872,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1106",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1106,
        "end_line": 1142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035335689045936395,
            "pseudo_dstar_susp": 0.0035335689045936395,
            "pseudo_tarantula_susp": 0.0035587188612099642,
            "pseudo_op2_susp": 0.0035335689045936395,
            "pseudo_barinel_susp": 0.0035587188612099642
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1223",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> dt = np.datetime64(pd.datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1223,
        "end_line": 1277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00425531914893617,
            "pseudo_dstar_susp": 0.00425531914893617,
            "pseudo_tarantula_susp": 0.004291845493562232,
            "pseudo_op2_susp": 0.00425531914893617,
            "pseudo_barinel_susp": 0.004291845493562232
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1269",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1269,
        "end_line": 1273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003484320557491289,
            "pseudo_dstar_susp": 0.003484320557491289,
            "pseudo_tarantula_susp": 0.0035087719298245615,
            "pseudo_op2_susp": 0.003484320557491289,
            "pseudo_barinel_susp": 0.0035087719298245615
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1280",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1280,
        "end_line": 1321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004424778761061947,
            "pseudo_dstar_susp": 0.004424778761061947,
            "pseudo_tarantula_susp": 0.004464285714285714,
            "pseudo_op2_susp": 0.004424778761061947,
            "pseudo_barinel_susp": 0.004464285714285714
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_dtype#1324",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)",
        "snippet": "def is_numeric_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a numeric dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a numeric dtype.\n\n    Examples\n    --------\n    >>> is_numeric_dtype(str)\n    False\n    >>> is_numeric_dtype(int)\n    True\n    >>> is_numeric_dtype(float)\n    True\n    >>> is_numeric_dtype(np.uint64)\n    True\n    >>> is_numeric_dtype(np.datetime64)\n    False\n    >>> is_numeric_dtype(np.timedelta64)\n    False\n    >>> is_numeric_dtype(np.array(['a', 'b']))\n    False\n    >>> is_numeric_dtype(pd.Series([1, 2]))\n    True\n    >>> is_numeric_dtype(pd.Index([1, 2.]))\n    True\n    >>> is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    False\n    \"\"\"\n\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.number, np.bool_)\n    )",
        "begin_line": 1324,
        "end_line": 1364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1367",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1367,
        "end_line": 1396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019782393669634025,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1399",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1399,
        "end_line": 1430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0031645569620253164,
            "pseudo_dstar_susp": 0.0031645569620253164,
            "pseudo_tarantula_susp": 0.0031746031746031746,
            "pseudo_op2_susp": 0.0031645569620253164,
            "pseudo_barinel_susp": 0.0031746031746031746
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1433",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.arrays.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1433,
        "end_line": 1495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002158894645941278,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1563",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1563,
        "end_line": 1609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011746740279572419,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1612",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1612,
        "end_line": 1642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004166666666666667,
            "pseudo_dstar_susp": 0.004166666666666667,
            "pseudo_tarantula_susp": 0.004201680672268907,
            "pseudo_op2_susp": 0.004166666666666667,
            "pseudo_barinel_susp": 0.004201680672268907
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1645",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1645,
        "end_line": 1667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003194888178913738,
            "pseudo_dstar_susp": 0.003194888178913738,
            "pseudo_tarantula_susp": 0.003205128205128205,
            "pseudo_op2_susp": 0.003194888178913738,
            "pseudo_barinel_susp": 0.003205128205128205
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1670",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1670,
        "end_line": 1703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0034482758620689655,
            "pseudo_dstar_susp": 0.0034482758620689655,
            "pseudo_tarantula_susp": 0.003472222222222222,
            "pseudo_op2_susp": 0.0034482758620689655,
            "pseudo_barinel_susp": 0.003472222222222222
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1706",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1706,
        "end_line": 1748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005714285714285714,
            "pseudo_dstar_susp": 0.004784688995215311,
            "pseudo_tarantula_susp": 0.005747126436781609,
            "pseudo_op2_susp": 0.004739336492890996,
            "pseudo_barinel_susp": 0.005747126436781609
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1842",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype):\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(f\"data type '{dtype}' not understood\")\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(f\"dtype '{dtype}' not understood\")\n\n    return npdtype",
        "begin_line": 1842,
        "end_line": 1889,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002617801047120419,
            "pseudo_dstar_susp": 0.002617801047120419,
            "pseudo_tarantula_susp": 0.002617801047120419,
            "pseudo_op2_susp": 0.002617801047120419,
            "pseudo_barinel_susp": 0.002617801047120419
        }
    },
    {
        "name": "pandas.core.construction.array#55",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.array(data: Sequence[object], dtype: Optional[Union[str, np.dtype, ExtensionDtype]]=None, copy: bool=True)",
        "snippet": "def array(\n    data: Sequence[object],\n    dtype: Optional[Union[str, np.dtype, ExtensionDtype]] = None,\n    copy: bool = True,\n) -> ABCExtensionArray:\n    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    data : Sequence of objects\n        The scalars inside `data` should be instances of the\n        scalar type for `dtype`. It's expected that `data`\n        represents a 1-dimensional array of data.\n\n        When `data` is an Index or Series, the underlying array\n        will be extracted from `data`.\n\n    dtype : str, np.dtype, or ExtensionDtype, optional\n        The dtype to use for the array. This may be a NumPy\n        dtype or an extension type registered with pandas using\n        :meth:`pandas.api.extensions.register_extension_dtype`.\n\n        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be\n        held in extension arrays.\n\n        Currently, pandas will infer an extension dtype for sequences of\n\n        ============================== =====================================\n        Scalar Type                    Array Type\n        ============================== =====================================\n        :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n        :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n        :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n        :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n        :class:`int`                   :class:`pandas.arrays.IntegerArray`\n        :class:`str`                   :class:`pandas.arrays.StringArray`\n        :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n        ============================== =====================================\n\n        For all other cases, NumPy's usual inference rules will be used.\n\n        .. versionchanged:: 1.0.0\n\n           Pandas infers nullable-integer dtype for integer data,\n           string dtype for string data, and nullable-boolean dtype\n           for boolean data.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. Depending\n        on the type of `data`, creating the new array may require\n        copying data, even if ``copy=False``.\n\n    Returns\n    -------\n    ExtensionArray\n        The newly created array.\n\n    Raises\n    ------\n    ValueError\n        When `data` is not 1-dimensional.\n\n    See Also\n    --------\n    numpy.array : Construct a NumPy array.\n    Series : Construct a pandas Series.\n    Index : Construct a pandas Index.\n    arrays.PandasArray : ExtensionArray wrapping a NumPy array.\n    Series.array : Extract the array stored within a Series.\n\n    Notes\n    -----\n    Omitting the `dtype` argument means pandas will attempt to infer the\n    best array type from the values in the data. As new array types are\n    added by pandas and 3rd party libraries, the \"best\" array type may\n    change. We recommend specifying `dtype` to ensure that\n\n    1. the correct array type for the data is returned\n    2. the returned array type doesn't change as new extension types\n       are added by pandas and third-party libraries\n\n    Additionally, if the underlying memory representation of the returned\n    array matters, we recommend specifying the `dtype` as a concrete object\n    rather than a string alias or allowing it to be inferred. For example,\n    a future version of pandas or a 3rd-party library may include a\n    dedicated ExtensionArray for string data. In this event, the following\n    would no longer return a :class:`arrays.PandasArray` backed by a NumPy\n    array.\n\n    >>> pd.array(['a', 'b'], dtype=str)\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    This would instead return the new ExtensionArray dedicated for string\n    data. If you really need the new array to be backed by a  NumPy array,\n    specify that in the dtype.\n\n    >>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`\n      * :class:`arrays.TimedeltaArray`\n\n    When data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\n    passed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\n    rather than a ``PandasArray``. This is for symmetry with the case of\n    timezone-aware data, which NumPy does not natively support.\n\n    >>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n    <DatetimeArray>\n    ['2015-01-01 00:00:00', '2016-01-01 00:00:00']\n    Length: 2, dtype: datetime64[ns]\n\n    >>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n    <TimedeltaArray>\n    ['01:00:00', '02:00:00']\n    Length: 2, dtype: timedelta64[ns]\n\n    Examples\n    --------\n    If a dtype is not specified, pandas will infer the best dtype from the values.\n    See the description of `dtype` for the types pandas infers for.\n\n    >>> pd.array([1, 2])\n    <IntegerArray>\n    [1, 2]\n    Length: 2, dtype: Int64\n\n    >>> pd.array([1, 2, np.nan])\n    <IntegerArray>\n    [1, 2, NaN]\n    Length: 3, dtype: Int64\n\n    >>> pd.array([\"a\", None, \"c\"])\n    <StringArray>\n    ['a', nan, 'c']\n    Length: 3, dtype: string\n\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]\n\n    You can use the string alias for `dtype`\n\n    >>> pd.array(['a', 'b', 'a'], dtype='category')\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    Or specify the actual dtype\n\n    >>> pd.array(['a', 'b', 'a'],\n    ...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    If pandas does not infer a dedicated extension type a\n    :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1.1, 2.2])\n    <PandasArray>\n    [1.1, 2.2]\n    Length: 2, dtype: float64\n\n    As mentioned in the \"Notes\" section, new extension types may be added\n    in the future (by pandas or 3rd party libraries), causing the return\n    value to no longer be a :class:`arrays.PandasArray`. Specify the `dtype`\n    as a NumPy dtype if you need to ensure there's no future change in\n    behavior.\n\n    >>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int32\n\n    `data` must be 1-dimensional. A ValueError is raised when the input\n    has the wrong dimensionality.\n\n    >>> pd.array(1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot pass scalar '1' to 'pandas.array'.\n    \"\"\"\n    from pandas.core.arrays import (\n        period_array,\n        BooleanArray,\n        IntegerArray,\n        IntervalArray,\n        PandasArray,\n        DatetimeArray,\n        TimedeltaArray,\n        StringArray,\n    )\n\n    if lib.is_scalar(data):\n        msg = f\"Cannot pass scalar '{data}' to 'pandas.array'.\"\n        raise ValueError(msg)\n\n    if dtype is None and isinstance(\n        data, (ABCSeries, ABCIndexClass, ABCExtensionArray)\n    ):\n        dtype = data.dtype\n\n    data = extract_array(data, extract_numpy=True)\n\n    # this returns None for not-found dtypes.\n    if isinstance(dtype, str):\n        dtype = registry.find(dtype) or dtype\n\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=True)\n        if inferred_dtype == \"period\":\n            try:\n                return period_array(data, copy=copy)\n            except IncompatibleFrequency:\n                # We may have a mixture of frequencies.\n                # We choose to return an ndarray, rather than raising.\n                pass\n        elif inferred_dtype == \"interval\":\n            try:\n                return IntervalArray(data, copy=copy)\n            except ValueError:\n                # We may have a mixture of `closed` here.\n                # We choose to return an ndarray, rather than raising.\n                pass\n\n        elif inferred_dtype.startswith(\"datetime\"):\n            # datetime, datetime64\n            try:\n                return DatetimeArray._from_sequence(data, copy=copy)\n            except ValueError:\n                # Mixture of timezones, fall back to PandasArray\n                pass\n\n        elif inferred_dtype.startswith(\"timedelta\"):\n            # timedelta, timedelta64\n            return TimedeltaArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"string\":\n            return StringArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"integer\":\n            return IntegerArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"boolean\":\n            return BooleanArray._from_sequence(data, copy=copy)\n\n    # Pandas overrides NumPy for\n    #   1. datetime64[ns]\n    #   2. timedelta64[ns]\n    # so that a DatetimeArray is returned.\n    if is_datetime64_ns_dtype(dtype):\n        return DatetimeArray._from_sequence(data, dtype=dtype, copy=copy)\n    elif is_timedelta64_ns_dtype(dtype):\n        return TimedeltaArray._from_sequence(data, dtype=dtype, copy=copy)\n\n    result = PandasArray._from_sequence(data, dtype=dtype, copy=copy)\n    return result",
        "begin_line": 55,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.construction.extract_array#337",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy=False)",
        "snippet": "def extract_array(obj, extract_numpy=False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 337,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014122299110295156,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#388",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr",
        "begin_line": 388,
        "end_line": 503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.construction._try_cast#506",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[Union[np.dtype, 'ExtensionDtype']], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr,\n    dtype: Optional[Union[np.dtype, \"ExtensionDtype\"]],\n    copy: bool,\n    raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            subarr = maybe_cast_to_integer_array(arr, dtype)\n\n        subarr = maybe_cast_to_datetime(arr, dtype)\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if is_categorical_dtype(dtype):\n            # We *do* allow casting to categorical, since we know\n            # that Categorical is the only array type for 'category'.\n            dtype = cast(CategoricalDtype, dtype)\n            subarr = dtype.construct_array_type()(\n                arr, dtype.categories, ordered=dtype.ordered\n            )\n        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)\n        elif dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 506,
        "end_line": 567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.construction.is_empty_data#570",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.is_empty_data(data: Any)",
        "snippet": "def is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    is_none = data is None\n    is_list_like_without_dtype = is_list_like(data) and not hasattr(data, \"dtype\")\n    is_simple_empty = is_list_like_without_dtype and not data\n    return is_none or is_simple_empty",
        "begin_line": 570,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012159533073929961,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.construction.create_series_with_explicit_dtype#590",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.create_series_with_explicit_dtype(data: Any=None, index: Optional[Union[ArrayLike, 'Index']]=None, dtype: Optional[Dtype]=None, name: Optional[str]=None, copy: bool=False, fastpath: bool=False, dtype_if_empty: Dtype=object)",
        "snippet": "def create_series_with_explicit_dtype(\n    data: Any = None,\n    index: Optional[Union[ArrayLike, \"Index\"]] = None,\n    dtype: Optional[Dtype] = None,\n    name: Optional[str] = None,\n    copy: bool = False,\n    fastpath: bool = False,\n    dtype_if_empty: Dtype = object,\n) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261.\n\n    Parameters\n    ----------\n    data : Mirrored from Series.__init__\n    index : Mirrored from Series.__init__\n    dtype : Mirrored from Series.__init__\n    name : Mirrored from Series.__init__\n    copy : Mirrored from Series.__init__\n    fastpath : Mirrored from Series.__init__\n    dtype_if_empty : str, numpy.dtype, or ExtensionDtype\n        This dtype will be passed explicitly if an empty Series will\n        be instantiated.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    if is_empty_data(data) and dtype is None:\n        dtype = dtype_if_empty\n    return Series(\n        data=data, index=index, dtype=dtype, name=name, copy=copy, fastpath=fastpath\n    )",
        "begin_line": 590,
        "end_line": 626,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002007226013649137,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.cmp_method#102",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.cmp_method(self, other)",
        "snippet": "    def cmp_method(self, other):\n        if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)):\n            if other.ndim > 0 and len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n\n        if is_object_dtype(self) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, other)\n\n        elif is_object_dtype(self) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)",
        "begin_line": 102,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.index_arithmetic_method#133",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.index_arithmetic_method(self, other)",
        "snippet": "    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)",
        "begin_line": 133,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._outer_indexer#241",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._outer_indexer(self, left, right)",
        "snippet": "    def _outer_indexer(self, left, right):\n        return libjoin.outer_join_indexer(left, right)",
        "begin_line": 241,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00037650602409638556,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#276",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n\n        from .range import RangeIndex\n        from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex\n        from .numeric import Float64Index, Int64Index, UInt64Index\n        from .interval import IntervalIndex\n        from .category import CategoricalIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        # interval\n        elif is_interval_dtype(data) or is_interval_dtype(dtype):\n            closed = kwargs.pop(\"closed\", None)\n            if is_dtype_equal(_o_dtype, dtype):\n                return IntervalIndex(\n                    data, name=name, copy=copy, closed=closed, **kwargs\n                ).astype(object)\n            return IntervalIndex(\n                data, dtype=dtype, name=name, copy=copy, closed=closed, **kwargs\n            )\n\n        elif (\n            is_datetime64_any_dtype(data)\n            or is_datetime64_any_dtype(dtype)\n            or \"tz\" in kwargs\n        ):\n            if is_dtype_equal(_o_dtype, dtype):\n                # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n                #  will raise in the where `data` is already tz-aware.  So\n                #  we leave it out of this step and cast to object-dtype after\n                #  the DatetimeIndex construction.\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                return DatetimeIndex(data, copy=False, name=name, **kwargs).astype(\n                    object\n                )\n            else:\n                return DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            if is_dtype_equal(_o_dtype, dtype):\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                return TimedeltaIndex(data, copy=False, name=name, **kwargs).astype(\n                    object\n                )\n            else:\n                return TimedeltaIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_period_dtype(data) or is_period_dtype(dtype):\n            if is_dtype_equal(_o_dtype, dtype):\n                return PeriodIndex(data, copy=False, name=name, **kwargs).astype(object)\n            return PeriodIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n            else:\n                data = np.asarray(data, dtype=object)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype  # TODO: maybe not for object?\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n                if new_dtype is not None:\n                    return cls(\n                        new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                    )\n\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n            return cls._simple_new(subarr, name, **kwargs)\n\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from .multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 276,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002910360884749709,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#452",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            # Index._data must always be an ndarray.\n            # This is no-copy for when _values is an ndarray,\n            # which should be always at this point.\n            values = np.asarray(values._values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides. We don't re-use `_ndarray_values`, since\n        # we actually set this value too.\n        result._index_data = values\n        result._name = name\n\n        return result._reset_identity()",
        "begin_line": 452,
        "end_line": 475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00021372088053002778,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#484",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015651901706057285,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#506",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            values = self.values\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n\n        # _simple_new expects an the type of self._data\n        values = getattr(values, \"_values\", values)\n        if isinstance(values, ABCDatetimeArray):\n            # `self.values` returns `self` for tz-aware, so we need to unwrap\n            #  more specifically\n            values = values.asi8\n\n        return self._simple_new(values, **attributes)",
        "begin_line": 506,
        "end_line": 521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy_with_infer#523",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy_with_infer(self, values, **kwargs)",
        "snippet": "    def _shallow_copy_with_infer(self, values, **kwargs):\n        \"\"\"\n        Create a new Index inferring the class with passed value, don't copy\n        the data, use the same object attributes with passed in attributes\n        taking precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        kwargs : updates the default attributes for this Index\n        \"\"\"\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        attributes[\"copy\"] = False\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n        if self._infer_as_myclass:\n            try:\n                return self._constructor(values, **attributes)\n            except (TypeError, ValueError):\n                pass\n        return Index(values, **attributes)",
        "begin_line": 523,
        "end_line": 546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00017590149516270889,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#552",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 552,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012961762799740766,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#571",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 571,
        "end_line": 576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003003003003003003,
            "pseudo_dstar_susp": 0.003003003003003003,
            "pseudo_tarantula_susp": 0.0030120481927710845,
            "pseudo_op2_susp": 0.003003003003003003,
            "pseudo_barinel_susp": 0.0030120481927710845
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#582",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `_ndarray_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        _ndarray_values = self._ndarray_values\n        return self._engine_type(lambda: _ndarray_values, len(self))",
        "begin_line": 582,
        "end_line": 588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012851818532322323,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#594",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 594,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011834319526627219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#600",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001585791309863622,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array_wrap__#606",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc.\n        \"\"\"\n        result = lib.item_from_zerodim(result)\n        if is_bool_dtype(result) or lib.is_scalar(result):\n            return result\n\n        attrs = self._get_attributes_dict()\n        return Index(result, **attrs)",
        "begin_line": 606,
        "end_line": 615,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#618",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 618,
        "end_line": 622,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011778563015312132,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#639",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 639,
        "end_line": 649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.000241196333815726,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#677",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n        try:\n            return Index(\n                self.values.astype(dtype, copy=copy), name=self.name, dtype=dtype\n            )\n        except (TypeError, ValueError):\n            raise TypeError(f\"Cannot cast {type(self).__name__} to dtype {dtype}\")",
        "begin_line": 677,
        "end_line": 694,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020308692120227456,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.take#725",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        if self._can_hold_na:\n            taken = self._assert_take_fillable(\n                self.values,\n                indices,\n                allow_fill=allow_fill,\n                fill_value=fill_value,\n                na_value=self._na_value,\n            )\n        else:\n            if allow_fill and fill_value is not None:\n                cls_name = type(self).__name__\n                raise ValueError(\n                    f\"Unable to fill values because {cls_name} cannot contain NA\"\n                )\n            taken = self.values.take(indices)\n        return self._shallow_copy(taken)",
        "begin_line": 725,
        "end_line": 744,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#746",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                raise ValueError(\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 746,
        "end_line": 766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#839",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, **kwargs)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, **kwargs):\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = kwargs.get(\"names\")\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 839,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.format#931",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.format(self, name=False, formatter=None, **kwargs)",
        "snippet": "    def format(self, name=False, formatter=None, **kwargs):\n        \"\"\"\n        Render a string representation of the Index.\n        \"\"\"\n        header = []\n        if name:\n            header.append(\n                pprint_thing(self.name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                if self.name is not None\n                else \"\"\n            )\n\n        if formatter is not None:\n            return header + list(self.map(formatter))\n\n        return self._format_with_header(header, **kwargs)",
        "begin_line": 931,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_with_header#948",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_with_header(self, header, na_rep='NaN', **kwargs)",
        "snippet": "    def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n        values = self.values\n\n        from pandas.io.formats.format import format_array\n\n        if is_categorical_dtype(values.dtype):\n            values = np.array(values)\n\n        elif is_object_dtype(values.dtype):\n            values = lib.maybe_convert_objects(values, safe=1)\n\n        if is_object_dtype(values.dtype):\n            result = [pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")) for x in values]\n\n            # could have nans\n            mask = isna(values)\n            if mask.any():\n                result = np.array(result)\n                result[mask] = na_rep\n                result = result.tolist()\n\n        else:\n            result = _trim_front(format_array(values, None, justify=\"left\"))\n        return header + result",
        "begin_line": 948,
        "end_line": 971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.to_series#1068",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.to_series(self, index=None, name=None)",
        "snippet": "    def to_series(self, index=None, name=None):\n        \"\"\"\n        Create a Series with both index and values equal to the index keys.\n\n        Useful with map for returning an indexer based on an index.\n\n        Parameters\n        ----------\n        index : Index, optional\n            Index of resulting Series. If None, defaults to original index.\n        name : str, optional\n            Dame of resulting Series. If None, defaults to name of original\n            index.\n\n        Returns\n        -------\n        Series\n            The dtype will be based on the type of the Index values.\n        \"\"\"\n\n        from pandas import Series\n\n        if index is None:\n            index = self._shallow_copy()\n        if name is None:\n            name = self.name\n\n        return Series(self.values.copy(), index=index, name=name)",
        "begin_line": 1068,
        "end_line": 1095,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.to_frame#1097",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.to_frame(self, index=True, name=None)",
        "snippet": "    def to_frame(self, index=True, name=None):\n        \"\"\"\n        Create a DataFrame with a column containing the Index.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        index : bool, default True\n            Set the index of the returned DataFrame as the original Index.\n\n        name : object, default None\n            The passed name should substitute for the index name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame containing the original Index data.\n\n        See Also\n        --------\n        Index.to_series : Convert an Index to a Series.\n        Series.to_frame : Convert Series to DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n        >>> idx.to_frame()\n               animal\n        animal\n        Ant       Ant\n        Bear     Bear\n        Cow       Cow\n\n        By default, the original Index is reused. To enforce a new Index:\n\n        >>> idx.to_frame(index=False)\n            animal\n        0   Ant\n        1  Bear\n        2   Cow\n\n        To override the name of the resulting column, specify `name`:\n\n        >>> idx.to_frame(index=False, name='zoo')\n            zoo\n        0   Ant\n        1  Bear\n        2   Cow\n        \"\"\"\n\n        from pandas import DataFrame\n\n        if name is None:\n            name = self.name or 0\n        result = DataFrame({name: self._values.copy()})\n\n        if index:\n            result.index = self\n        return result",
        "begin_line": 1097,
        "end_line": 1157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1163",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self)",
        "snippet": "    def name(self):\n        return self._name",
        "begin_line": 1163,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001179245283018868,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1167",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self, value)",
        "snippet": "    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value",
        "begin_line": 1167,
        "end_line": 1175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003289473684210526,
            "pseudo_dstar_susp": 0.003289473684210526,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.003289473684210526,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1177",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep=False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1177,
        "end_line": 1195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019634792852935403,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1197",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1197,
        "end_line": 1198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012285012285012285,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1200",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n        self._name = values[0]",
        "begin_line": 1200,
        "end_line": 1226,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019634792852935403,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1230",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace=False)",
        "snippet": "    def set_names(self, names, level=None, inplace=False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1230,
        "end_line": 1307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019634792852935403,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1364",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1364,
        "end_line": 1368,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011821728336682824,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic#1562",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic(self)",
        "snippet": "    def is_monotonic(self) -> bool:\n        \"\"\"\n        Alias for is_monotonic_increasing.\n        \"\"\"\n        return self.is_monotonic_increasing",
        "begin_line": 1562,
        "end_line": 1566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00034904013961605586,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1569",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self):\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1569,
        "end_line": 1583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013239772275916854,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_decreasing#1586",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_decreasing(self)",
        "snippet": "    def is_monotonic_decreasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic decreasing (only equal or\n        decreasing) values.\n\n        Examples\n        --------\n        >>> Index([3, 2, 1]).is_monotonic_decreasing\n        True\n        >>> Index([3, 2, 2]).is_monotonic_decreasing\n        True\n        >>> Index([3, 1, 2]).is_monotonic_decreasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_decreasing",
        "begin_line": 1586,
        "end_line": 1600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016231131309852296,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1637",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1637,
        "end_line": 1641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00013865779256794233,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_boolean#1647",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_boolean(self)",
        "snippet": "    def is_boolean(self) -> bool:\n        return self.inferred_type in [\"boolean\"]",
        "begin_line": 1647,
        "end_line": 1648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1650",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self) -> bool:\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1650,
        "end_line": 1651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_object#1659",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_object(self)",
        "snippet": "    def is_object(self) -> bool:\n        return is_object_dtype(self.dtype)",
        "begin_line": 1659,
        "end_line": 1660,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020529665366454526,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_categorical#1662",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_categorical(self)",
        "snippet": "    def is_categorical(self) -> bool:\n        \"\"\"\n        Check if the Index holds categorical data.\n\n        Returns\n        -------\n        boolean\n            True if the Index is categorical.\n\n        See Also\n        --------\n        CategoricalIndex : Index for categorical data.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_categorical()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_categorical()\n        False\n\n        >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n        >>> s\n        0        Peter\n        1       Victor\n        2    Elisabeth\n        3          Mar\n        dtype: object\n        >>> s.index.is_categorical()\n        False\n        \"\"\"\n        return self.inferred_type in [\"categorical\"]",
        "begin_line": 1662,
        "end_line": 1696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020470829068577277,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1711",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1711,
        "end_line": 1715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00022361359570661896,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1718",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return is_datetime_array(ensure_object(self.values))",
        "begin_line": 1718,
        "end_line": 1719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00018789928598271326,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1765",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1765,
        "end_line": 1775,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001684352366515075,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._nan_idxs#1778",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._nan_idxs(self)",
        "snippet": "    def _nan_idxs(self):\n        if self._can_hold_na:\n            return self._isnan.nonzero()[0]\n        else:\n            return np.array([], dtype=np.int64)",
        "begin_line": 1778,
        "end_line": 1782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00030349013657056146,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#1785",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self):\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 1785,
        "end_line": 1792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.isna#1794",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n        mapped to ``True`` values.\n        Everything else get mapped to ``False`` values. Characters such as\n        empty strings `''` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        numpy.ndarray\n            A boolean array of whether my values are NA.\n\n        See Also\n        --------\n        Index.notna : Boolean inverse of isna.\n        Index.dropna : Omit entries with missing values.\n        isna : Top-level isna.\n        Series.isna : Detect missing values in Series object.\n\n        Examples\n        --------\n        Show which entries in a pandas.Index are NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.isna()\n        array([False, False,  True], dtype=bool)\n\n        Empty strings are not considered NA values. None is considered an NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.isna()\n        array([False, False, False,  True], dtype=bool)\n\n        For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n        >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n        ...                         pd.Timestamp(''), None, pd.NaT])\n        >>> idx\n        DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                      dtype='datetime64[ns]', freq=None)\n        >>> idx.isna()\n        array([False,  True,  True,  True], dtype=bool)\n        \"\"\"\n        return self._isnan",
        "begin_line": 1794,
        "end_line": 1847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__add__#2123",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame)):\n            return NotImplemented\n        from pandas import Series\n\n        return Index(Series(self) + other)",
        "begin_line": 2123,
        "end_line": 2128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0004177109440267335,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__radd__#2130",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__radd__(self, other)",
        "snippet": "    def __radd__(self, other):\n        from pandas import Series\n\n        return Index(other + Series(self))",
        "begin_line": 2130,
        "end_line": 2133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__iadd__#2135",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__iadd__(self, other)",
        "snippet": "    def __iadd__(self, other):\n        # alias for __add__\n        return self + other",
        "begin_line": 2135,
        "end_line": 2137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001932367149758454,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__sub__#2139",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n        return Index(np.array(self) - other)",
        "begin_line": 2139,
        "end_line": 2140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00044742729306487697,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__rsub__#2142",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__rsub__(self, other)",
        "snippet": "    def __rsub__(self, other):\n        # wrap Series to ensure we pin name correctly\n        from pandas import Series\n\n        return Index(other - Series(self))",
        "begin_line": 2142,
        "end_line": 2146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_reconciled_name_object#2168",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_reconciled_name_object(self, other)",
        "snippet": "    def _get_reconciled_name_object(self, other):\n        \"\"\"\n        If the result of a set operation will be self,\n        return self, unless the name changes, in which\n        case make a shallow copy of self.\n        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self._shallow_copy(name=name)\n        return self",
        "begin_line": 2168,
        "end_line": 2177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._is_compatible_with_other#2203",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        \"\"\"\n        Check whether this and the other dtype are compatible with each other.\n        Meaning a union can be formed between them without needing to be cast\n        to dtype object.\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
        "begin_line": 2203,
        "end_line": 2217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_sort_keyword#2219",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_sort_keyword(self, sort)",
        "snippet": "    def _validate_sort_keyword(self, sort):\n        if sort not in [None, False]:\n            raise ValueError(\n                \"The 'sort' keyword only takes the values of \"\n                f\"None or False; {sort} was passed.\"\n            )",
        "begin_line": 2219,
        "end_line": 2224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.union#2226",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.union(self, other, sort=None)",
        "snippet": "    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two Index objects.\n\n        If the Index objects are incompatible, both Index objects will be\n        cast to dtype('object') first.\n\n            .. versionchanged:: 0.25.0\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : bool or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` or `other` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        union : Index\n\n        Examples\n        --------\n\n        Union matching dtypes\n\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.union(idx2)\n        Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n        Union mismatched dtypes\n\n        >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n        >>> idx2 = pd.Index([1, 2, 3, 4])\n        >>> idx1.union(idx2)\n        Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n\n        if not self._is_compatible_with_other(other):\n            return self._union_incompatible_dtypes(other, sort=sort)\n\n        return self._union(other, sort=sort)",
        "begin_line": 2226,
        "end_line": 2284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._union#2286",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Specific union logic should go here. In subclasses, union behavior\n        should be overwritten here rather than in `self.union`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        if not len(other) or self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not len(self):\n            return other._get_reconciled_name_object(self)\n\n        # TODO(EA): setops-refactor, clean all this up\n        if is_period_dtype(self) or is_datetime64tz_dtype(self):\n            lvals = self._ndarray_values\n        else:\n            lvals = self._values\n        if is_period_dtype(other) or is_datetime64tz_dtype(other):\n            rvals = other._ndarray_values\n        else:\n            rvals = other._values\n\n        if sort is None and self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._outer_indexer(lvals, rvals)[0]\n            except TypeError:\n                # incomparable objects\n                result = list(lvals)\n\n                # worth making this faster? a very unusual case\n                value_set = set(lvals)\n                result.extend([x for x in rvals if x not in value_set])\n        else:\n            # find indexes of things in \"other\" that are not in \"self\"\n            if self.is_unique:\n                indexer = self.get_indexer(other)\n                indexer = (indexer == -1).nonzero()[0]\n            else:\n                indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n            if len(indexer) > 0:\n                other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n                result = concat_compat((lvals, other_diff))\n\n            else:\n                result = lvals\n\n            if sort is None:\n                try:\n                    result = algos.safe_sort(result)\n                except TypeError as err:\n                    warnings.warn(\n                        f\"{err}, sort order is undefined for incomparable objects\",\n                        RuntimeWarning,\n                        stacklevel=3,\n                    )\n\n        # for subclasses\n        return self._wrap_setop_result(other, result)",
        "begin_line": 2286,
        "end_line": 2358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_can_do_setop#2590",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_can_do_setop(self, other)",
        "snippet": "    def _assert_can_do_setop(self, other):\n        if not is_list_like(other):\n            raise TypeError(\"Input must be Index or array-like\")\n        return True",
        "begin_line": 2590,
        "end_line": 2593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2647",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            try:\n                return self._engine.get_loc(key)\n            except KeyError:\n                return self._engine.get_loc(self._maybe_cast_indexer(key))\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2647,
        "end_line": 2664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer#2716",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        # Treat boolean labels passed to a numeric index as not found. Without\n        # this fix False and True would be treated as 0 and 1 respectively.\n        # (GH #16877)\n        if target.is_boolean() and self.is_numeric():\n            return ensure_platform_int(np.repeat(-1, target.size))\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            this = self.astype(object)\n            target = target.astype(object)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not self.is_unique:\n            raise InvalidIndexError(\n                \"Reindexing only valid with uniquely valued Index objects\"\n            )\n\n        if method == \"pad\" or method == \"backfill\":\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._ndarray_values)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2716,
        "end_line": 2764,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_scalar_indexer#2863",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        if kind == \"iloc\":\n            return self._validate_indexer(\"positional\", key, kind)\n\n        if len(self) and not isinstance(self, ABCMultiIndex):\n\n            # we can raise here if we are definitive that this\n            # is positional indexing (eg. .ix on with a float)\n            # or label indexing if we are using a type able\n            # to be represented in the index\n\n            if kind in [\"getitem\", \"ix\"] and is_float(key):\n                if not self.is_floating():\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_float(key):\n\n                # we want to raise KeyError on string/mixed here\n                # technically we *could* raise a TypeError\n                # on anything but mixed though\n                if self.inferred_type not in [\n                    \"floating\",\n                    \"mixed-integer-float\",\n                    \"integer-na\",\n                    \"string\",\n                    \"unicode\",\n                    \"mixed\",\n                ]:\n                    self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_integer(key):\n                if not self.holds_integer():\n                    self._invalid_indexer(\"label\", key)\n\n        return key",
        "begin_line": 2863,
        "end_line": 2899,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001893580761219466,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#2916",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind=None)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # validate iloc\n        if kind == \"iloc\":\n            return slice(\n                self._validate_indexer(\"slice\", key.start, kind),\n                self._validate_indexer(\"slice\", key.stop, kind),\n                self._validate_indexer(\"slice\", key.step, kind),\n            )\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_null_slicer = start is None and stop is None\n        is_index_slice = is_int(start) and is_int(stop)\n        is_positional = is_index_slice and not (\n            self.is_integer() or self.is_categorical()\n        )\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                return slice(\n                    self._validate_indexer(\"slice\", key.start, kind),\n                    self._validate_indexer(\"slice\", key.stop, kind),\n                    self._validate_indexer(\"slice\", key.step, kind),\n                )\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        try:\n            if is_positional and self.is_mixed():\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n        except KeyError:\n            if self.inferred_type in [\"mixed-integer-float\", \"integer-na\"]:\n                raise\n\n        if is_null_slicer:\n            indexer = key\n        elif is_positional:\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 2916,
        "end_line": 2974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#2931",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 2931,
        "end_line": 2932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_reindex#3093",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_reindex(self, indexer)",
        "snippet": "    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n\n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")",
        "begin_line": 3093,
        "end_line": 3108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.reindex#3110",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values\n        as necessary).\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = _ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            attrs = self._get_attributes_dict()\n            attrs.pop(\"freq\", None)  # don't preserve freq\n            values = self._data[:0]  # appropriately-dtyped empty array\n            target = self._simple_new(values, dtype=self.dtype, **attrs)\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                # check is_overlapping for IntervalIndex compat\n                if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, missing = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer",
        "begin_line": 3110,
        "end_line": 3168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.join#3254",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n\n        # try to figure out the join level\n        # GH3662\n        if level is None and (self_is_mi or other_is_mi):\n\n            # have the same levels/names so a simple join\n            if self.names == other.names:\n                pass\n            else:\n                return self._join_multi(other, how=how, return_indexers=return_indexers)\n\n        # join on the level\n        if level is not None and (self_is_mi or other_is_mi):\n            return self._join_level(\n                other, level, how=how, return_indexers=return_indexers\n            )\n\n        other = ensure_index(other)\n\n        if len(other) == 0 and how in (\"left\", \"outer\"):\n            join_index = self._shallow_copy()\n            if return_indexers:\n                rindexer = np.repeat(-1, len(join_index))\n                return join_index, None, rindexer\n            else:\n                return join_index\n\n        if len(self) == 0 and how in (\"right\", \"outer\"):\n            join_index = other._shallow_copy()\n            if return_indexers:\n                lindexer = np.repeat(-1, len(join_index))\n                return join_index, lindexer, None\n            else:\n                return join_index\n\n        if self._join_precedence < other._join_precedence:\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n            result = other.join(\n                self, how=how, level=level, return_indexers=return_indexers\n            )\n            if return_indexers:\n                x, y, z = result\n                result = x, z, y\n            return result\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this.join(other, how=how, return_indexers=return_indexers)\n\n        _validate_join_method(how)\n\n        if not self.is_unique and not other.is_unique:\n            return self._join_non_unique(\n                other, how=how, return_indexers=return_indexers\n            )\n        elif not self.is_unique or not other.is_unique:\n            if self.is_monotonic and other.is_monotonic:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            else:\n                return self._join_non_unique(\n                    other, how=how, return_indexers=return_indexers\n                )\n        elif self.is_monotonic and other.is_monotonic:\n            try:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            except TypeError:\n                pass\n\n        if how == \"left\":\n            join_index = self\n        elif how == \"right\":\n            join_index = other\n        elif how == \"inner\":\n            # TODO: sort=False here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.intersection(other, sort=False)\n        elif how == \"outer\":\n            # TODO: sort=True here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.union(other)\n\n        if sort:\n            join_index = join_index.sort_values()\n\n        if return_indexers:\n            if join_index is self:\n                lindexer = None\n            else:\n                lindexer = self.get_indexer(join_index)\n            if join_index is other:\n                rindexer = None\n            else:\n                rindexer = other.get_indexer(join_index)\n            return join_index, lindexer, rindexer\n        else:\n            return join_index",
        "begin_line": 3254,
        "end_line": 3357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003544842254519674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._join_monotonic#3596",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._join_monotonic(self, other, how='left', return_indexers=False)",
        "snippet": "    def _join_monotonic(self, other, how=\"left\", return_indexers=False):\n        if self.equals(other):\n            ret_index = other if how == \"right\" else self\n            if return_indexers:\n                return ret_index, None, None\n            else:\n                return ret_index\n\n        sv = self._ndarray_values\n        ov = other._ndarray_values\n\n        if self.is_unique and other.is_unique:\n            # We can perform much better than the general case\n            if how == \"left\":\n                join_index = self\n                lidx = None\n                ridx = self._left_indexer_unique(sv, ov)\n            elif how == \"right\":\n                join_index = other\n                lidx = self._left_indexer_unique(ov, sv)\n                ridx = None\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n        else:\n            if how == \"left\":\n                join_index, lidx, ridx = self._left_indexer(sv, ov)\n            elif how == \"right\":\n                join_index, ridx, lidx = self._left_indexer(ov, sv)\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n\n        if return_indexers:\n            lidx = None if lidx is None else ensure_platform_int(lidx)\n            ridx = None if ridx is None else ensure_platform_int(ridx)\n            return join_index, lidx, ridx\n        else:\n            return join_index",
        "begin_line": 3596,
        "end_line": 3639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003544842254519674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._wrap_joined_index#3641",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        return Index(joined, name=name)",
        "begin_line": 3641,
        "end_line": 3643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3649",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3649,
        "end_line": 3668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001243781094527363,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3671",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, ABCIndexClass, np.ndarray]:\n        # TODO(EA): remove index types as they become extension arrays\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray, ExtensionArray, or Index subclass. This differs\n        from ``_ndarray_values``, which always returns an ndarray.\n\n        Both ``_values`` and ``_ndarray_values`` are consistent between\n        ``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       | _ndarray_values |\n        ----------------- | --------------- | ------------- | --------------- |\n        Index             | ndarray         | ndarray       | ndarray         |\n        CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n        DatetimeIndex     | ndarray[M8ns]   | ndarray[M8ns] | ndarray[M8ns]   |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DTI[tz]       | ndarray[M8ns]   |\n        PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n        IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n        See Also\n        --------\n        values\n        _ndarray_values\n        \"\"\"\n        return self._data",
        "begin_line": 3671,
        "end_line": 3698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00011938872970391595,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._internal_get_values#3700",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        \"\"\"\n        Return `Index` data as an `numpy.ndarray`.\n\n        Returns\n        -------\n        numpy.ndarray\n            A one-dimensional numpy array of the `Index` values.\n\n        See Also\n        --------\n        Index.values : The attribute that _internal_get_values wraps.\n\n        Examples\n        --------\n        Getting the `Index` values of a `DataFrame`:\n\n        >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n        ...                    index=['a', 'b', 'c'], columns=['A', 'B', 'C'])\n        >>> df\n           A  B  C\n        a  1  2  3\n        b  4  5  6\n        c  7  8  9\n        >>> df.index._internal_get_values()\n        array(['a', 'b', 'c'], dtype=object)\n\n        Standalone `Index` values:\n\n        >>> idx = pd.Index(['1', '2', '3'])\n        >>> idx._internal_get_values()\n        array(['1', '2', '3'], dtype=object)\n\n        `MultiIndex` arrays also have only one dimension:\n\n        >>> midx = pd.MultiIndex.from_arrays([[1, 2, 3], ['a', 'b', 'c']],\n        ...                                  names=('number', 'letter'))\n        >>> midx._internal_get_values()\n        array([(1, 'a'), (2, 'b'), (3, 'c')], dtype=object)\n        >>> midx._internal_get_values().ndim\n        1\n        \"\"\"\n        return self.values",
        "begin_line": 3700,
        "end_line": 3742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014999250037498125,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_scalar_to_index#3809",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_scalar_to_index(self, item)",
        "snippet": "    def _coerce_scalar_to_index(self, item):\n        \"\"\"\n        We need to coerce a scalar to a compat for our index type.\n\n        Parameters\n        ----------\n        item : scalar item to coerce\n        \"\"\"\n        dtype = self.dtype\n\n        if self._is_numeric_dtype and isna(item):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return Index([item], dtype=dtype, **self._get_attributes_dict())",
        "begin_line": 3809,
        "end_line": 3824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#3890",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 3890,
        "end_line": 3895,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029515938606847696,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#3903",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        key = com.values_from_object(key)\n        result = getitem(key)\n        if not is_scalar(result):\n            return promote(result)\n        else:\n            return result",
        "begin_line": 3903,
        "end_line": 3936,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002275830678197542,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name#3938",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name(self, name)",
        "snippet": "    def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n        \"\"\"\n        Faster check for ``name in self`` when we know `name` is a Python\n        identifier (e.g. in NDFrame.__getattr__, which hits this to support\n        . key lookup). For indexes that can't hold identifiers (everything\n        but object & categorical) we just return False.\n\n        https://github.com/pandas-dev/pandas/issues/19764\n        \"\"\"\n        if self.is_object() or self.is_categorical():\n            return name in self\n        return False",
        "begin_line": 3938,
        "end_line": 3949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4035",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determine if two Index objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements as calling\n            index; False otherwise.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self) and not is_object_dtype(other):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        if isinstance(other, ABCMultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            if not is_object_dtype(self.dtype):\n                if self.nlevels != other.nlevels:\n                    return False\n\n        return array_equivalent(\n            com.values_from_object(self), com.values_from_object(other)\n        )",
        "begin_line": 4035,
        "end_line": 4063,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00015015015015015014,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4065",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4065,
        "end_line": 4085,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016972165648336727,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_value#4362",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n\n        # if we have something that is Index-like, then\n        # use this, e.g. DatetimeIndex\n        # Things like `Series._get_value` (via .at) pass the EA directly here.\n        s = extract_array(series, extract_numpy=True)\n        if isinstance(s, ExtensionArray):\n            if is_scalar(key):\n                # GH 20882, 21257\n                # First try to convert the key to a location\n                # If that fails, raise a KeyError if an integer\n                # index, otherwise, see if key is an integer, and\n                # try that\n                try:\n                    iloc = self.get_loc(key)\n                    return s[iloc]\n                except KeyError:\n                    if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                        raise\n                    elif is_integer(key):\n                        return s[key]\n            else:\n                # if key is not a scalar, directly raise an error (the code below\n                # would convert to numpy arrays and raise later any way) - GH29926\n                raise InvalidIndexError(key)\n\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        k = self._convert_scalar_indexer(k, kind=\"getitem\")\n        try:\n            return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n        except KeyError as e1:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                raise\n\n            try:\n                return libindex.get_value_at(s, key)\n            except IndexError:\n                raise\n            except TypeError:\n                # generator/iterator-like\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:\n                raise e1\n        except TypeError:\n            # e.g. \"[False] is an invalid key\"\n            if is_scalar(key):\n                raise IndexError(key)\n            raise InvalidIndexError(key)",
        "begin_line": 4362,
        "end_line": 4414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_promote#4494",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_promote(self, other)",
        "snippet": "    def _maybe_promote(self, other):\n        # A hack, but it works\n\n        if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n        return self, other",
        "begin_line": 4494,
        "end_line": 4502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.map#4531",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        \"\"\"\n        Map values using input correspondence (a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        applied : Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n\n        from .multi import MultiIndex\n\n        new_values = super()._map_values(mapper, na_action=na_action)\n\n        attributes = self._get_attributes_dict()\n\n        # we can return a MultiIndex\n        if new_values.size and isinstance(new_values[0], tuple):\n            if isinstance(self, MultiIndex):\n                names = self.names\n            elif attributes.get(\"name\"):\n                names = [attributes.get(\"name\")] * len(new_values[0])\n            else:\n                names = None\n            return MultiIndex.from_tuples(new_values, names=names)\n\n        attributes[\"copy\"] = False\n        if not new_values.size:\n            # empty\n            attributes[\"dtype\"] = self.dtype\n\n        return Index(new_values, **attributes)",
        "begin_line": 4531,
        "end_line": 4572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005414185165132648,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4711",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n\n        if is_float(key) and not self.is_floating():\n            try:\n                ckey = int(key)\n                if ckey == key:\n                    key = ckey\n            except (OverflowError, ValueError, TypeError):\n                pass\n        return key",
        "begin_line": 4711,
        "end_line": 4724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001893580761219466,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_indexer#4726",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_indexer(self, form, key, kind)",
        "snippet": "    def _validate_indexer(self, form, key, kind):\n        \"\"\"\n        If we are positional indexer, validate that we have appropriate\n        typed bounds must be an integer.\n        \"\"\"\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\"]\n\n        if key is None:\n            pass\n        elif is_integer(key):\n            pass\n        elif kind in [\"iloc\", \"getitem\"]:\n            self._invalid_indexer(form, key)\n        return key",
        "begin_line": 4726,
        "end_line": 4739,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00026504108136761196,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.insert#4961",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        _self = np.asarray(self)\n        item = self._coerce_scalar_to_index(item)._ndarray_values\n        idx = np.concatenate((_self[:loc], item, _self[loc:]))\n        return self._shallow_copy_with_infer(idx)",
        "begin_line": 4961,
        "end_line": 4979,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.shape#5226",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        # not using \"(len(self), )\" to return \"correct\" shape if the values\n        # consists of a >1 D array (see GH-27775)\n        # overridden in MultiIndex.shape to avoid materializing the values\n        return self._values.shape",
        "begin_line": 5226,
        "end_line": 5233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00016490765171503957,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5282",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy=False)",
        "snippet": "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from .multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
        "begin_line": 5282,
        "end_line": 5346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base._ensure_has_len#5349",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._ensure_has_len(seq)",
        "snippet": "def _ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
        "begin_line": 5349,
        "end_line": 5358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0001535862386730149,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base._validate_join_method#5371",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._validate_join_method(method)",
        "snippet": "def _validate_join_method(method):\n    if method not in [\"left\", \"right\", \"inner\", \"outer\"]:\n        raise ValueError(f\"do not recognize join method {method}\")",
        "begin_line": 5371,
        "end_line": 5373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003544842254519674,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5376",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5376,
        "end_line": 5379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00012224938875305622,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base.maybe_extract_name#5382",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.maybe_extract_name(name, obj, cls)",
        "snippet": "def maybe_extract_name(name, obj, cls) -> Optional[Hashable]:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
        "begin_line": 5382,
        "end_line": 5395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003134796238244514,
            "pseudo_dstar_susp": 0.003134796238244514,
            "pseudo_tarantula_susp": 0.0031446540880503146,
            "pseudo_op2_susp": 0.003134796238244514,
            "pseudo_barinel_susp": 0.0031446540880503146
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_with_dtype#5398",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool)",
        "snippet": "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
        "begin_line": 5398,
        "end_line": 5449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_data_without_dtype#5452",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)",
        "snippet": "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
        "begin_line": 5452,
        "end_line": 5520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.base._try_convert_to_int_array#5523",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype)",
        "snippet": "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
        "begin_line": 5523,
        "end_line": 5564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014932059130954157,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n\n    # https://github.com/python/mypy/issues/1006\n    # error: 'classmethod' used with a non-method\n    @classmethod  # type: ignore\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0025906735751295338,
            "pseudo_dstar_susp": 0.0025906735751295338,
            "pseudo_tarantula_susp": 0.0025906735751295338,
            "pseudo_op2_susp": 0.0025906735751295338,
            "pseudo_barinel_susp": 0.0025906735751295338
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#11",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0025906735751295338,
            "pseudo_dstar_susp": 0.0025906735751295338,
            "pseudo_tarantula_susp": 0.0025906735751295338,
            "pseudo_op2_susp": 0.0025906735751295338,
            "pseudo_barinel_susp": 0.0025906735751295338
        }
    },
    {
        "name": "pandas.util._exceptions.rewrite_exception#6",
        "src_path": "pandas/util/_exceptions.py",
        "class_name": "pandas.util._exceptions",
        "signature": "pandas.util._exceptions.rewrite_exception(old_name: str, new_name: str)",
        "snippet": "def rewrite_exception(old_name: str, new_name: str):\n    \"\"\"\n    Rewrite the message of an exception.\n    \"\"\"\n    try:\n        yield\n    except Exception as err:\n        msg = err.args[0]\n        msg = msg.replace(old_name, new_name)\n        args: Tuple[str, ...] = (msg,)\n        if len(err.args) > 1:\n            args = args + err.args[1:]\n        err.args = args\n        raise",
        "begin_line": 6,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__new__#238",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__new__(cls, data, closed=None, dtype=None, copy: bool=False, name=None, verify_integrity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        data,\n        closed=None,\n        dtype=None,\n        copy: bool = False,\n        name=None,\n        verify_integrity: bool = True,\n    ):\n\n        name = maybe_extract_name(name, data, cls)\n\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray(\n                data,\n                closed=closed,\n                copy=copy,\n                dtype=dtype,\n                verify_integrity=verify_integrity,\n            )\n\n        return cls._simple_new(array, name)",
        "begin_line": 238,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._simple_new#262",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._simple_new(cls, array, name, closed=None)",
        "snippet": "    def _simple_new(cls, array, name, closed=None):\n        \"\"\"\n        Construct from an IntervalArray\n\n        Parameters\n        ----------\n        array : IntervalArray\n        name : str\n            Attached as result.name\n        closed : Any\n            Ignored.\n        \"\"\"\n        result = IntervalMixin.__new__(cls)\n        result._data = array\n        result.name = name\n        result._no_setting_name = False\n        result._reset_identity()\n        return result",
        "begin_line": 262,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_breaks#298",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_breaks(cls, breaks, closed: str='right', name=None, copy: bool=False, dtype=None)",
        "snippet": "    def from_breaks(\n        cls, breaks, closed: str = \"right\", name=None, copy: bool = False, dtype=None\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_breaks(\n                breaks, closed=closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 298,
        "end_line": 305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_arrays#324",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_arrays(cls, left, right, closed: str='right', name=None, copy: bool=False, dtype=None)",
        "snippet": "    def from_arrays(\n        cls,\n        left,\n        right,\n        closed: str = \"right\",\n        name=None,\n        copy: bool = False,\n        dtype=None,\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_arrays(\n                left, right, closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 324,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002063557573256294,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._shallow_copy#366",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._shallow_copy(self, left=None, right=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, left=None, right=None, **kwargs):\n        result = self._data._shallow_copy(left=left, right=right)\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        return self._simple_new(result, **attributes)",
        "begin_line": 366,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._isnan#373",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return a mask indicating if each value is NA.\n        \"\"\"\n        if self._mask is None:\n            self._mask = isna(self.left)\n        return self._mask",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.values#414",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return the IntervalIndex's data as an IntervalArray.\n        \"\"\"\n        return self._data",
        "begin_line": 414,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._values#421",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._values(self)",
        "snippet": "    def _values(self):\n        return self._data",
        "begin_line": 421,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_unique#477",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_unique(self)",
        "snippet": "    def is_unique(self):\n        \"\"\"\n        Return True if the IntervalIndex contains unique elements, else False.\n        \"\"\"\n        left = self.left\n        right = self.right\n\n        if self.isna().sum() > 1:\n            return False\n\n        if left.is_unique or right.is_unique:\n            return True\n\n        seen_pairs = set()\n        check_idx = np.where(left.duplicated(keep=False))[0]\n        for idx in check_idx:\n            pair = (left[idx], right[idx])\n            if pair in seen_pairs:\n                return False\n            seen_pairs.add(pair)\n\n        return True",
        "begin_line": 477,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.take#997",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        result = self._data.take(\n            indices, axis=axis, allow_fill=allow_fill, fill_value=fill_value, **kwargs\n        )\n        return self._shallow_copy(result)",
        "begin_line": 997,
        "end_line": 1001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002763957987838585,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__getitem__#1003",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__getitem__(self, value)",
        "snippet": "    def __getitem__(self, value):\n        result = self._data[value]\n        if isinstance(result, IntervalArray):\n            return self._shallow_copy(result)\n        else:\n            # scalar\n            return result",
        "begin_line": 1003,
        "end_line": 1009,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.equals#1072",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two IntervalIndex objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        # if we can coerce to an II\n        # then we can compare\n        if not isinstance(other, IntervalIndex):\n            if not is_interval_dtype(other):\n                return False\n            other = Index(getattr(other, \".values\", other))\n\n        return (\n            self.left.equals(other.left)\n            and self.right.equals(other.right)\n            and self.closed == other.closed\n        )",
        "begin_line": 1072,
        "end_line": 1090,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00023353573096683791,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._delegate_property_get#1191",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._delegate_property_get(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_property_get(self, name, *args, **kwargs):\n        \"\"\" method delegation to the ._values \"\"\"\n        prop = getattr(self._data, name)\n        return prop  # no wrapping for now",
        "begin_line": 1191,
        "end_line": 1194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0002039983680130559,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._delegate_method#1196",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        \"\"\" method delegation to the ._data \"\"\"\n        method = getattr(self._data, name)\n        res = method(*args, **kwargs)\n        if is_scalar(res) or name in self._raw_inherit:\n            return res\n        if isinstance(res, IntervalArray):\n            return type(self)._simple_new(res, name=self.name)\n        return Index(res)",
        "begin_line": 1196,
        "end_line": 1204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00020529665366454526,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops.disallow.check#55",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.check(self, obj)",
        "snippet": "    def check(self, obj) -> bool:\n        return hasattr(obj, \"dtype\") and issubclass(obj.dtype.type, self.dtypes)",
        "begin_line": 55,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops.disallow.__call__#58",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.__call__(self, f)",
        "snippet": "    def __call__(self, f):\n        @functools.wraps(f)\n        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e)\n                raise\n\n        return _f",
        "begin_line": 58,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops.disallow._f#60",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow._f(*args, **kwargs)",
        "snippet": "        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e)\n                raise",
        "begin_line": 60,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops._get_fill_value#166",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_fill_value(dtype, fill_value=None, fill_value_typ=None)",
        "snippet": "def _get_fill_value(dtype, fill_value=None, fill_value_typ=None):\n    \"\"\" return the correct fill value for the dtype of the values \"\"\"\n    if fill_value is not None:\n        return fill_value\n    if _na_ok_dtype(dtype):\n        if fill_value_typ is None:\n            return np.nan\n        else:\n            if fill_value_typ == \"+inf\":\n                return np.inf\n            else:\n                return -np.inf\n    else:\n        if fill_value_typ is None:\n            return iNaT\n        else:\n            if fill_value_typ == \"+inf\":\n                # need the max int here\n                return _int64_max\n            else:\n                return iNaT",
        "begin_line": 166,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops._maybe_get_mask#189",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_get_mask(values: np.ndarray, skipna: bool, mask: Optional[np.ndarray])",
        "snippet": "def _maybe_get_mask(\n    values: np.ndarray, skipna: bool, mask: Optional[np.ndarray]\n) -> Optional[np.ndarray]:\n    \"\"\"\n    Compute a mask if and only if necessary.\n\n    This function will compute a mask iff it is necessary. Otherwise,\n    return the provided mask (potentially None) when a mask does not need to be\n    computed.\n\n    A mask is never necessary if the values array is of boolean or integer\n    dtypes, as these are incapable of storing NaNs. If passing a NaN-capable\n    dtype that is interpretable as either boolean or integer data (eg,\n    timedelta64), a mask must be provided.\n\n    If the skipna parameter is False, a new mask will not be computed.\n\n    The mask is computed using isna() by default. Setting invert=True selects\n    notna() as the masking function.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    mask : Optional[ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    Optional[np.ndarray]\n    \"\"\"\n\n    if mask is None:\n        if is_bool_dtype(values.dtype) or is_integer_dtype(values.dtype):\n            # Boolean data cannot contain nulls, so signal via mask being None\n            return None\n\n        if skipna:\n            mask = isna(values)\n\n    return mask",
        "begin_line": 189,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops._get_values#234",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_values(values: np.ndarray, skipna: bool, fill_value: Any=None, fill_value_typ: Optional[str]=None, mask: Optional[np.ndarray]=None)",
        "snippet": "def _get_values(\n    values: np.ndarray,\n    skipna: bool,\n    fill_value: Any = None,\n    fill_value_typ: Optional[str] = None,\n    mask: Optional[np.ndarray] = None,\n) -> Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]:\n    \"\"\"\n    Utility to get the values view, mask, dtype, dtype_max, and fill_value.\n\n    If both mask and fill_value/fill_value_typ are not None and skipna is True,\n    the values array will be copied.\n\n    For input arrays of boolean or integer dtypes, copies will only occur if a\n    precomputed mask, a fill_value/fill_value_typ, and skipna=True are\n    provided.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    fill_value : Any\n        value to fill NaNs with\n    fill_value_typ : str\n        Set to '+inf' or '-inf' to handle dtype-specific infinities\n    mask : Optional[np.ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    values : ndarray\n        Potential copy of input value array\n    mask : Optional[ndarray[bool]]\n        Mask for values, if deemed necessary to compute\n    dtype : dtype\n        dtype for values\n    dtype_max : dtype\n        platform independent dtype\n    fill_value : Any\n        fill value used\n    \"\"\"\n\n    # In _get_values is only called from within nanops, and in all cases\n    #  with scalar fill_value.  This guarantee is important for the\n    #  maybe_upcast_putmask call below\n    assert is_scalar(fill_value)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    if is_datetime64tz_dtype(values):\n        # lib.values_from_object returns M8[ns] dtype instead of tz-aware,\n        #  so this case must be handled separately from the rest\n        dtype = values.dtype\n        values = getattr(values, \"_values\", values)\n    else:\n        values = lib.values_from_object(values)\n        dtype = values.dtype\n\n    if is_datetime_or_timedelta_dtype(values) or is_datetime64tz_dtype(values):\n        # changing timedelta64/datetime64 to int64 needs to happen after\n        #  finding `mask` above\n        values = getattr(values, \"asi8\", values)\n        values = values.view(np.int64)\n\n    dtype_ok = _na_ok_dtype(dtype)\n\n    # get our fill value (in case we need to provide an alternative\n    # dtype for it)\n    fill_value = _get_fill_value(\n        dtype, fill_value=fill_value, fill_value_typ=fill_value_typ\n    )\n\n    copy = (mask is not None) and (fill_value is not None)\n\n    if skipna and copy:\n        values = values.copy()\n        if dtype_ok:\n            np.putmask(values, mask, fill_value)\n\n        # promote if needed\n        else:\n            values, _ = maybe_upcast_putmask(values, mask, fill_value)\n\n    # return a platform independent precision dtype\n    dtype_max = dtype\n    if is_integer_dtype(dtype) or is_bool_dtype(dtype):\n        dtype_max = np.int64\n    elif is_float_dtype(dtype):\n        dtype_max = np.float64\n\n    return values, mask, dtype, dtype_max, fill_value",
        "begin_line": 234,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops._na_ok_dtype#329",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_ok_dtype(dtype)",
        "snippet": "def _na_ok_dtype(dtype):\n    # TODO: what about datetime64tz?  PeriodDtype?\n    return not issubclass(dtype.type, (np.integer, np.timedelta64, np.datetime64))",
        "begin_line": 329,
        "end_line": 331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00029806259314456036,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops._wrap_results#334",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._wrap_results(result, dtype, fill_value=None)",
        "snippet": "def _wrap_results(result, dtype, fill_value=None):\n    \"\"\" wrap our results if needed \"\"\"\n\n    if is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if fill_value is None:\n            # GH#24293\n            fill_value = iNaT\n        if not isinstance(result, np.ndarray):\n            tz = getattr(dtype, \"tz\", None)\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = Timestamp(result, tz=tz)\n        else:\n            result = result.view(dtype)\n    elif is_timedelta64_dtype(dtype):\n        if not isinstance(result, np.ndarray):\n            if result == fill_value:\n                result = np.nan\n\n            # raise if we have a timedelta64[ns] which is too large\n            if np.fabs(result) > _int64_max:\n                raise ValueError(\"overflow in timedelta operation\")\n\n            result = Timedelta(result, unit=\"ns\")\n        else:\n            result = result.astype(\"m8[ns]\").view(dtype)\n\n    return result",
        "begin_line": 334,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops.nanany#396",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanany(values, axis=None, skipna: bool=True, mask=None)",
        "snippet": "def nanany(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if any elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2])\n    >>> nanops.nanany(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([np.nan])\n    >>> nanops.nanany(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=False, mask=mask)\n    return values.any(axis)",
        "begin_line": 396,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0005015045135406219,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops.nanall#428",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanall(values, axis=None, skipna: bool=True, mask=None)",
        "snippet": "def nanall(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if all elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanall(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 0])\n    >>> nanops.nanall(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=True, mask=mask)\n    return values.all(axis)",
        "begin_line": 428,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003053435114503817,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops.nansum#461",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansum(values, axis=None, skipna=True, min_count=0, mask=None)",
        "snippet": "def nansum(values, axis=None, skipna=True, min_count=0, mask=None):\n    \"\"\"\n    Sum the elements along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nansum(s)\n    3.0\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    if is_float_dtype(dtype):\n        dtype_sum = dtype\n    elif is_timedelta64_dtype(dtype):\n        dtype_sum = np.float64\n    the_sum = values.sum(axis, dtype=dtype_sum)\n    the_sum = _maybe_null_out(the_sum, axis, mask, values.shape, min_count=min_count)\n\n    return _wrap_results(the_sum, dtype)",
        "begin_line": 461,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.nanops._maybe_null_out#1181",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], shape: Tuple, min_count: int=1)",
        "snippet": "def _maybe_null_out(\n    result: np.ndarray,\n    axis: Optional[int],\n    mask: Optional[np.ndarray],\n    shape: Tuple,\n    min_count: int = 1,\n) -> np.ndarray:\n    if mask is not None and axis is not None and getattr(result, \"ndim\", False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):\n                if np.iscomplexobj(result):\n                    result = result.astype(\"c16\")\n                else:\n                    result = result.astype(\"f8\")\n                result[null_mask] = np.nan\n            else:\n                # GH12941, use None to auto cast null\n                result[null_mask] = None\n    elif result is not NaT:\n        if mask is not None:\n            null_mask = mask.size - mask.sum()\n        else:\n            null_mask = np.prod(shape)\n        if null_mask < min_count:\n            result = np.nan\n\n    return result",
        "begin_line": 1181,
        "end_line": 1208,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0011389521640091116,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._validators._check_for_default_values#33",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_default_values(fname, arg_val_dict, compat_args)",
        "snippet": "def _check_for_default_values(fname, arg_val_dict, compat_args):\n    \"\"\"\n    Check that the keys in `arg_val_dict` are mapped to their\n    default values as specified in `compat_args`.\n\n    Note that this function is to be called only when it has been\n    checked that arg_val_dict.keys() is a subset of compat_args\n    \"\"\"\n    for key in arg_val_dict:\n        # try checking equality directly with '=' operator,\n        # as comparison may have been overridden for the left\n        # hand object\n        try:\n            v1 = arg_val_dict[key]\n            v2 = compat_args[key]\n\n            # check for None-ness otherwise we could end up\n            # comparing a numpy array vs None\n            if (v1 is not None and v2 is None) or (v1 is None and v2 is not None):\n                match = False\n            else:\n                match = v1 == v2\n\n            if not is_bool(match):\n                raise ValueError(\"'match' is not a boolean\")\n\n        # could not compare them directly, so try comparison\n        # using the 'is' operator\n        except ValueError:\n            match = arg_val_dict[key] is compat_args[key]\n\n        if not match:\n            raise ValueError(\n                f\"the '{key}' parameter is not supported in \"\n                f\"the pandas implementation of {fname}()\"\n            )",
        "begin_line": 33,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._validators._check_for_invalid_keys#111",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_invalid_keys(fname, kwargs, compat_args)",
        "snippet": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError(f\"{fname}() got an unexpected keyword argument '{bad_arg}'\")",
        "begin_line": 111,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._validators.validate_kwargs#124",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_kwargs(fname, kwargs, compat_args)",
        "snippet": "def validate_kwargs(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname : str\n        The name of the function being passed the `**kwargs` parameter\n    kwargs : dict\n        The `**kwargs` parameter passed into `fname`\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to have and their\n        associated default values\n\n    Raises\n    ------\n    TypeError if `kwargs` contains keys not in `compat_args`\n    ValueError if `kwargs` contains keys in `compat_args` that do not\n    map to the default values specified in `compat_args`\n    \"\"\"\n    kwds = kwargs.copy()\n    _check_for_invalid_keys(fname, kwargs, compat_args)\n    _check_for_default_values(fname, kwds, compat_args)",
        "begin_line": 124,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0003078817733990148,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#207",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            f'For argument \"{arg_name}\" expected type bool, received '\n            f\"type {type(value).__name__}.\"\n        )\n    return value",
        "begin_line": 207,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00047732696897374703,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._validators.validate_axis_style_args#217",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_axis_style_args(data, args, kwargs, arg_name, method_name)",
        "snippet": "def validate_axis_style_args(data, args, kwargs, arg_name, method_name):\n    \"\"\"Argument handler for mixed index, columns / axis functions\n\n    In an attempt to handle both `.method(index, columns)`, and\n    `.method(arg, axis=.)`, we have to do some bad things to argument\n    parsing. This translates all arguments to `{index=., columns=.}` style.\n\n    Parameters\n    ----------\n    data : DataFrame\n    args : tuple\n        All positional arguments from the user\n    kwargs : dict\n        All keyword arguments from the user\n    arg_name, method_name : str\n        Used for better error messages\n\n    Returns\n    -------\n    kwargs : dict\n        A dictionary of keyword arguments. Doesn't modify ``kwargs``\n        inplace, so update them with the return value here.\n\n    Examples\n    --------\n    >>> df._validate_axis_style_args((str.upper,), {'columns': id},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n\n    This emits a warning\n    >>> df._validate_axis_style_args((str.upper, id), {},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n    \"\"\"\n    # TODO: Change to keyword-only args and remove all this\n\n    out = {}\n    # Goal: fill 'out' with index/columns-style arguments\n    # like out = {'index': foo, 'columns': bar}\n\n    # Start by validating for consistency\n    if \"axis\" in kwargs and any(x in kwargs for x in data._AXIS_NUMBERS):\n        msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'.\"\n        raise TypeError(msg)\n\n    # First fill with explicit values provided by the user...\n    if arg_name in kwargs:\n        if args:\n            msg = f\"{method_name} got multiple values for argument '{arg_name}'\"\n            raise TypeError(msg)\n\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = kwargs[arg_name]\n\n    # More user-provided arguments, now from kwargs\n    for k, v in kwargs.items():\n        try:\n            ax = data._get_axis_name(k)\n        except ValueError:\n            pass\n        else:\n            out[ax] = v\n\n    # All user-provided kwargs have been handled now.\n    # Now we supplement with positional arguments, emitting warnings\n    # when there's ambiguity and raising when there's conflicts\n\n    if len(args) == 0:\n        pass  # It's up to the function to decide if this is valid\n    elif len(args) == 1:\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = args[0]\n    elif len(args) == 2:\n        if \"axis\" in kwargs:\n            # Unambiguously wrong\n            msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n            raise TypeError(msg)\n\n        msg = (\n            \"Interpreting call\\n\\t'.{method_name}(a, b)' as \"\n            \"\\n\\t'.{method_name}(index=a, columns=b)'.\\nUse named \"\n            \"arguments to remove any ambiguity. In the future, using \"\n            \"positional arguments for 'index' or 'columns' will raise \"\n            \" a 'TypeError'.\"\n        )\n        warnings.warn(msg.format(method_name=method_name), FutureWarning, stacklevel=4)\n        out[data._AXIS_NAMES[0]] = args[0]\n        out[data._AXIS_NAMES[1]] = args[1]\n    else:\n        msg = f\"Cannot specify all of '{arg_name}', 'index', 'columns'.\"\n        raise TypeError(msg)\n    return out",
        "begin_line": 217,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00019413706076490002,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.util._validators.validate_fillna_kwargs#311",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_fillna_kwargs(value, method, validate_scalar_dict_value=True)",
        "snippet": "def validate_fillna_kwargs(value, method, validate_scalar_dict_value=True):\n    \"\"\"Validate the keyword arguments to 'fillna'.\n\n    This checks that exactly one of 'value' and 'method' is specified.\n    If 'method' is specified, this validates that it's a valid method.\n\n    Parameters\n    ----------\n    value, method : object\n        The 'value' and 'method' keyword arguments for 'fillna'.\n    validate_scalar_dict_value : bool, default True\n        Whether to validate that 'value' is a scalar or dict. Specifically,\n        validate that it is not a list or tuple.\n\n    Returns\n    -------\n    value, method : object\n    \"\"\"\n    from pandas.core.missing import clean_fill_method\n\n    if value is None and method is None:\n        raise ValueError(\"Must specify a fill 'value' or 'method'.\")\n    elif value is None and method is not None:\n        method = clean_fill_method(method)\n\n    elif value is not None and method is None:\n        if validate_scalar_dict_value and isinstance(value, (list, tuple)):\n            raise TypeError(\n                '\"value\" parameter must be a scalar or dict, but '\n                f'you passed a \"{type(value).__name__}\"'\n            )\n\n    elif value is not None and method is not None:\n        raise ValueError(\"Cannot specify both 'value' and 'method'.\")\n\n    return value, method",
        "begin_line": 311,
        "end_line": 346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.0006373486297004461,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.type#56",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.type(self)",
        "snippet": "    def type(self) -> Type:\n        return str",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.construct_array_type#60",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> \"Type[StringArray]\":\n        return StringArray",
        "begin_line": 60,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray.__init__#156",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray.__init__(self, values, copy=False)",
        "snippet": "    def __init__(self, values, copy=False):\n        values = extract_array(values)\n        skip_validation = isinstance(values, type(self))\n\n        super().__init__(values, copy=copy)\n        self._dtype = StringDtype()\n        if not skip_validation:\n            self._validate()",
        "begin_line": 156,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray._validate#165",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"Validate that we only store NA or strings.\"\"\"\n        if len(self._ndarray) and not lib.is_string_array(self._ndarray, skipna=True):\n            raise ValueError(\n                \"StringArray requires a sequence of strings or missing values.\"\n            )\n        if self._ndarray.dtype != \"object\":\n            raise ValueError(\n                \"StringArray requires a sequence of strings. Got \"\n                f\"'{self._ndarray.dtype}' dtype instead.\"\n            )",
        "begin_line": 165,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray._from_sequence#178",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        if dtype:\n            assert dtype == \"string\"\n        result = super()._from_sequence(scalars, dtype=object, copy=copy)\n        # Standardize all missing-like values to NA\n        # TODO: it would be nice to do this in _validate / lib.is_string_array\n        # We are already doing a scan over the values there.\n        result[result.isna()] = StringDtype.na_value\n        return result",
        "begin_line": 178,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray.__setitem__#211",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        value = extract_array(value, extract_numpy=True)\n        if isinstance(value, type(self)):\n            # extract_array doesn't extract PandasArray subclasses\n            value = value._ndarray\n\n        scalar_key = lib.is_scalar(key)\n        scalar_value = lib.is_scalar(value)\n        if scalar_key and not scalar_value:\n            raise ValueError(\"setting an array element with a sequence.\")\n\n        # validate new items\n        if scalar_value:\n            if isna(value):\n                value = StringDtype.na_value\n            elif not isinstance(value, str):\n                raise ValueError(\n                    f\"Cannot set non-string value '{value}' into a StringArray.\"\n                )\n        else:\n            if not is_array_like(value):\n                value = np.asarray(value, dtype=object)\n            if len(value) and not lib.is_string_array(value, skipna=True):\n                raise ValueError(\"Must provide strings.\")\n\n        super().__setitem__(key, value)",
        "begin_line": 211,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00036643459142543056,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#183",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        msg = f\"Cannot construct a 'SparseDtype' from '{string}'\"\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError:\n                raise TypeError(msg)\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    f\"Cannot construct a 'SparseDtype' from '{string}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg)\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 183,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00022456770716370987,
            "pseudo_dstar_susp": 0.00022456770716370987,
            "pseudo_tarantula_susp": 0.00022456770716370987,
            "pseudo_op2_susp": 0.00014084507042253522,
            "pseudo_barinel_susp": 0.00022456770716370987
        }
    }
]