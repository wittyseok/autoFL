[
    {
        "name": "tests.keras.layers.core_test.test_masking#17",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_masking()",
        "snippet": "def test_masking():\n    layer_test(layers.Masking,\n               kwargs={},\n               input_shape=(3, 2, 3))",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_dropout#24",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_dropout()",
        "snippet": "def test_dropout():\n    layer_test(layers.Dropout,\n               kwargs={'rate': 0.5},\n               input_shape=(3, 2))\n\n    layer_test(layers.Dropout,\n               kwargs={'rate': 0.5, 'noise_shape': [3, 1]},\n               input_shape=(3, 2))\n\n    layer_test(layers.Dropout,\n               kwargs={'rate': 0.5, 'noise_shape': [None, 1]},\n               input_shape=(3, 2))\n\n    layer_test(layers.SpatialDropout1D,\n               kwargs={'rate': 0.5},\n               input_shape=(2, 3, 4))\n\n    for data_format in ['channels_last', 'channels_first']:\n        for shape in [(4, 5), (4, 5, 6)]:\n            if data_format == 'channels_last':\n                input_shape = (2,) + shape + (3,)\n            else:\n                input_shape = (2, 3) + shape\n            layer_test(layers.SpatialDropout2D if len(shape) == 2 else layers.SpatialDropout3D,\n                       kwargs={'rate': 0.5,\n                               'data_format': data_format},\n                       input_shape=input_shape)\n\n            # Test invalid use cases\n            with pytest.raises(ValueError):\n                layer_test(layers.SpatialDropout2D if len(shape) == 2 else layers.SpatialDropout3D,\n                           kwargs={'rate': 0.5,\n                                   'data_format': 'channels_middle'},\n                           input_shape=input_shape)",
        "begin_line": 24,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_activation#61",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_activation()",
        "snippet": "def test_activation():\n    # with string argument\n    layer_test(layers.Activation,\n               kwargs={'activation': 'relu'},\n               input_shape=(3, 2))\n\n    # with function argument\n    layer_test(layers.Activation,\n               kwargs={'activation': K.relu},\n               input_shape=(3, 2))",
        "begin_line": 61,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_reshape#74",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_reshape()",
        "snippet": "def test_reshape():\n    layer_test(layers.Reshape,\n               kwargs={'target_shape': (8, 1)},\n               input_shape=(3, 2, 4))\n\n    layer_test(layers.Reshape,\n               kwargs={'target_shape': (-1, 1)},\n               input_shape=(3, 2, 4))\n\n    layer_test(layers.Reshape,\n               kwargs={'target_shape': (1, -1)},\n               input_shape=(3, 2, 4))\n\n    layer_test(layers.Reshape,\n               kwargs={'target_shape': (-1, 1)},\n               input_shape=(None, None, 4))",
        "begin_line": 74,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_permute#93",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_permute()",
        "snippet": "def test_permute():\n    layer_test(layers.Permute,\n               kwargs={'dims': (2, 1)},\n               input_shape=(3, 2, 4))",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_flatten#100",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_flatten()",
        "snippet": "def test_flatten():\n\n    def test_4d():\n        np_inp_channels_last = np.arange(24, dtype='float32').reshape(\n                                        (1, 4, 3, 2))\n\n        np_output_cl = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_last'},\n                                  input_data=np_inp_channels_last)\n\n        np_inp_channels_first = np.transpose(np_inp_channels_last,\n                                             [0, 3, 1, 2])\n\n        np_output_cf = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_first'},\n                                  input_data=np_inp_channels_first,\n                                  expected_output=np_output_cl)\n\n    def test_3d():\n        np_inp_channels_last = np.arange(12, dtype='float32').reshape(\n            (1, 4, 3))\n\n        np_output_cl = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_last'},\n                                  input_data=np_inp_channels_last)\n\n        np_inp_channels_first = np.transpose(np_inp_channels_last,\n                                             [0, 2, 1])\n\n        np_output_cf = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_first'},\n                                  input_data=np_inp_channels_first,\n                                  expected_output=np_output_cl)\n\n    def test_5d():\n        np_inp_channels_last = np.arange(120, dtype='float32').reshape(\n            (1, 5, 4, 3, 2))\n\n        np_output_cl = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_last'},\n                                  input_data=np_inp_channels_last)\n\n        np_inp_channels_first = np.transpose(np_inp_channels_last,\n                                             [0, 4, 1, 2, 3])\n\n        np_output_cf = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_first'},\n                                  input_data=np_inp_channels_first,\n                                  expected_output=np_output_cl)\n    test_3d()\n    test_4d()\n    test_5d()",
        "begin_line": 100,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_4d#102",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_4d()",
        "snippet": "    def test_4d():\n        np_inp_channels_last = np.arange(24, dtype='float32').reshape(\n                                        (1, 4, 3, 2))\n\n        np_output_cl = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_last'},\n                                  input_data=np_inp_channels_last)\n\n        np_inp_channels_first = np.transpose(np_inp_channels_last,\n                                             [0, 3, 1, 2])\n\n        np_output_cf = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_first'},\n                                  input_data=np_inp_channels_first,\n                                  expected_output=np_output_cl)",
        "begin_line": 102,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_3d#120",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_3d()",
        "snippet": "    def test_3d():\n        np_inp_channels_last = np.arange(12, dtype='float32').reshape(\n            (1, 4, 3))\n\n        np_output_cl = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_last'},\n                                  input_data=np_inp_channels_last)\n\n        np_inp_channels_first = np.transpose(np_inp_channels_last,\n                                             [0, 2, 1])\n\n        np_output_cf = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_first'},\n                                  input_data=np_inp_channels_first,\n                                  expected_output=np_output_cl)",
        "begin_line": 120,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_5d#138",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_5d()",
        "snippet": "    def test_5d():\n        np_inp_channels_last = np.arange(120, dtype='float32').reshape(\n            (1, 5, 4, 3, 2))\n\n        np_output_cl = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_last'},\n                                  input_data=np_inp_channels_last)\n\n        np_inp_channels_first = np.transpose(np_inp_channels_last,\n                                             [0, 4, 1, 2, 3])\n\n        np_output_cf = layer_test(layers.Flatten,\n                                  kwargs={'data_format':\n                                          'channels_first'},\n                                  input_data=np_inp_channels_first,\n                                  expected_output=np_output_cl)",
        "begin_line": 138,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_repeat_vector#161",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_repeat_vector()",
        "snippet": "def test_repeat_vector():\n    layer_test(layers.RepeatVector,\n               kwargs={'n': 3},\n               input_shape=(3, 2))",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_lambda#168",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_lambda()",
        "snippet": "def test_lambda():\n    layer_test(layers.Lambda,\n               kwargs={'function': lambda x: x + 1},\n               input_shape=(3, 2))\n\n    layer_test(layers.Lambda,\n               kwargs={'function': lambda x, a, b: x * a + b,\n                       'arguments': {'a': 0.6, 'b': 0.4}},\n               input_shape=(3, 2))\n\n    def antirectifier(x):\n        x -= K.mean(x, axis=1, keepdims=True)\n        x = K.l2_normalize(x, axis=1)\n        pos = K.relu(x)\n        neg = K.relu(-x)\n        return K.concatenate([pos, neg], axis=1)\n\n    def antirectifier_output_shape(input_shape):\n        shape = list(input_shape)\n        assert len(shape) == 2  # only valid for 2D tensors\n        shape[-1] *= 2\n        return tuple(shape)\n\n    layer_test(layers.Lambda,\n               kwargs={'function': antirectifier,\n                       'output_shape': antirectifier_output_shape},\n               input_shape=(3, 2))\n\n    # test layer with multiple outputs\n    def test_multiple_outputs():\n        def func(x):\n            return [x * 0.2, x * 0.3]\n\n        def output_shape(input_shape):\n            return [input_shape, input_shape]\n\n        def mask(inputs, mask=None):\n            return [None, None]\n\n        i = layers.Input(shape=(3, 2, 1))\n        o = layers.Lambda(function=func,\n                          output_shape=output_shape,\n                          mask=mask)(i)\n\n        o1, o2 = o\n        assert o1._keras_shape == (None, 3, 2, 1)\n        assert o2._keras_shape == (None, 3, 2, 1)\n\n        model = Model(i, o)\n\n        x = np.random.random((4, 3, 2, 1))\n        out1, out2 = model.predict(x)\n        assert out1.shape == (4, 3, 2, 1)\n        assert out2.shape == (4, 3, 2, 1)\n        assert_allclose(out1, x * 0.2, atol=1e-4)\n        assert_allclose(out2, x * 0.3, atol=1e-4)\n\n    test_multiple_outputs()\n\n    # test layer with multiple outputs and no\n    # explicit mask\n    def test_multiple_outputs_no_mask():\n        def func(x):\n            return [x * 0.2, x * 0.3]\n\n        def output_shape(input_shape):\n            return [input_shape, input_shape]\n\n        i = layers.Input(shape=(3, 2, 1))\n        o = layers.Lambda(function=func,\n                          output_shape=output_shape)(i)\n\n        assert o[0]._keras_shape == (None, 3, 2, 1)\n        assert o[1]._keras_shape == (None, 3, 2, 1)\n\n        o = layers.add(o)\n        model = Model(i, o)\n\n        i2 = layers.Input(shape=(3, 2, 1))\n        o2 = model(i2)\n        model2 = Model(i2, o2)\n\n        x = np.random.random((4, 3, 2, 1))\n        out = model2.predict(x)\n        assert out.shape == (4, 3, 2, 1)\n        assert_allclose(out, x * 0.2 + x * 0.3, atol=1e-4)\n\n    test_multiple_outputs_no_mask()\n\n    # test serialization with function\n    def f(x):\n        return x + 1\n\n    ld = layers.Lambda(f)\n    config = ld.get_config()\n    ld = deserialize_layer({'class_name': 'Lambda', 'config': config})\n\n    # test with lambda\n    ld = layers.Lambda(\n        lambda x: K.concatenate([K.square(x), x]),\n        output_shape=lambda s: tuple(list(s)[:-1] + [2 * s[-1]]))\n    config = ld.get_config()\n    ld = layers.Lambda.from_config(config)\n\n    # test serialization with output_shape function\n    def f(x):\n        return K.concatenate([K.square(x), x])\n\n    def f_shape(s):\n        return tuple(list(s)[:-1] + [2 * s[-1]])\n\n    ld = layers.Lambda(f, output_shape=f_shape)\n    config = ld.get_config()\n    ld = deserialize_layer({'class_name': 'Lambda', 'config': config})",
        "begin_line": 168,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.antirectifier#178",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.antirectifier(x)",
        "snippet": "    def antirectifier(x):\n        x -= K.mean(x, axis=1, keepdims=True)\n        x = K.l2_normalize(x, axis=1)\n        pos = K.relu(x)\n        neg = K.relu(-x)\n        return K.concatenate([pos, neg], axis=1)",
        "begin_line": 178,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.antirectifier_output_shape#185",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.antirectifier_output_shape(input_shape)",
        "snippet": "    def antirectifier_output_shape(input_shape):\n        shape = list(input_shape)\n        assert len(shape) == 2  # only valid for 2D tensors\n        shape[-1] *= 2\n        return tuple(shape)",
        "begin_line": 185,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_multiple_outputs#197",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_multiple_outputs()",
        "snippet": "    def test_multiple_outputs():\n        def func(x):\n            return [x * 0.2, x * 0.3]\n\n        def output_shape(input_shape):\n            return [input_shape, input_shape]\n\n        def mask(inputs, mask=None):\n            return [None, None]\n\n        i = layers.Input(shape=(3, 2, 1))\n        o = layers.Lambda(function=func,\n                          output_shape=output_shape,\n                          mask=mask)(i)\n\n        o1, o2 = o\n        assert o1._keras_shape == (None, 3, 2, 1)\n        assert o2._keras_shape == (None, 3, 2, 1)\n\n        model = Model(i, o)\n\n        x = np.random.random((4, 3, 2, 1))\n        out1, out2 = model.predict(x)\n        assert out1.shape == (4, 3, 2, 1)\n        assert out2.shape == (4, 3, 2, 1)\n        assert_allclose(out1, x * 0.2, atol=1e-4)\n        assert_allclose(out2, x * 0.3, atol=1e-4)",
        "begin_line": 197,
        "end_line": 223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.func#198",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.func(x)",
        "snippet": "        def func(x):\n            return [x * 0.2, x * 0.3]",
        "begin_line": 198,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.output_shape#201",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.output_shape(input_shape)",
        "snippet": "        def output_shape(input_shape):\n            return [input_shape, input_shape]",
        "begin_line": 201,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.mask#204",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.mask(inputs, mask=None)",
        "snippet": "        def mask(inputs, mask=None):\n            return [None, None]",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_multiple_outputs_no_mask#229",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_multiple_outputs_no_mask()",
        "snippet": "    def test_multiple_outputs_no_mask():\n        def func(x):\n            return [x * 0.2, x * 0.3]\n\n        def output_shape(input_shape):\n            return [input_shape, input_shape]\n\n        i = layers.Input(shape=(3, 2, 1))\n        o = layers.Lambda(function=func,\n                          output_shape=output_shape)(i)\n\n        assert o[0]._keras_shape == (None, 3, 2, 1)\n        assert o[1]._keras_shape == (None, 3, 2, 1)\n\n        o = layers.add(o)\n        model = Model(i, o)\n\n        i2 = layers.Input(shape=(3, 2, 1))\n        o2 = model(i2)\n        model2 = Model(i2, o2)\n\n        x = np.random.random((4, 3, 2, 1))\n        out = model2.predict(x)\n        assert out.shape == (4, 3, 2, 1)\n        assert_allclose(out, x * 0.2 + x * 0.3, atol=1e-4)",
        "begin_line": 229,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.func#230",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.func(x)",
        "snippet": "        def func(x):\n            return [x * 0.2, x * 0.3]",
        "begin_line": 230,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.output_shape#233",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.output_shape(input_shape)",
        "snippet": "        def output_shape(input_shape):\n            return [input_shape, input_shape]",
        "begin_line": 233,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.f#258",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.f(x)",
        "snippet": "    def f(x):\n        return x + 1",
        "begin_line": 258,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.f#273",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.f(x)",
        "snippet": "    def f(x):\n        return K.concatenate([K.square(x), x])",
        "begin_line": 273,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.f_shape#276",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.f_shape(s)",
        "snippet": "    def f_shape(s):\n        return tuple(list(s)[:-1] + [2 * s[-1]])",
        "begin_line": 276,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_lambda_output_shape#288",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_lambda_output_shape()",
        "snippet": "def test_lambda_output_shape():\n    layer_test(layers.Lambda,\n               kwargs={'function': lambda x: K.mean(x, axis=-1)},\n               input_shape=(3, 2, 4))",
        "begin_line": 288,
        "end_line": 291,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_dense#295",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_dense()",
        "snippet": "def test_dense():\n    layer_test(layers.Dense,\n               kwargs={'units': 3},\n               input_shape=(3, 2))\n\n    layer_test(layers.Dense,\n               kwargs={'units': 3},\n               input_shape=(3, 4, 2))\n\n    layer_test(layers.Dense,\n               kwargs={'units': 3},\n               input_shape=(None, None, 2))\n\n    layer_test(layers.Dense,\n               kwargs={'units': 3},\n               input_shape=(3, 4, 5, 2))\n\n    layer_test(layers.Dense,\n               kwargs={'units': 3,\n                       'kernel_regularizer': regularizers.l2(0.01),\n                       'bias_regularizer': regularizers.l1(0.01),\n                       'activity_regularizer': regularizers.L1L2(l1=0.01, l2=0.01),\n                       'kernel_constraint': constraints.MaxNorm(1),\n                       'bias_constraint': constraints.max_norm(1)},\n               input_shape=(3, 2))\n\n    layer = layers.Dense(3,\n                         kernel_regularizer=regularizers.l1(0.01),\n                         bias_regularizer='l1')\n    layer.build((None, 4))\n    assert len(layer.losses) == 2",
        "begin_line": 295,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_activity_regularization#329",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_activity_regularization()",
        "snippet": "def test_activity_regularization():\n    layer = layers.ActivityRegularization(l1=0.01, l2=0.01)\n\n    # test in functional API\n    x = layers.Input(shape=(3,))\n    z = layers.Dense(2)(x)\n    y = layer(z)\n    model = Model(x, y)\n    model.compile('rmsprop', 'mse')\n\n    model.predict(np.random.random((2, 3)))\n\n    # test serialization\n    model_config = model.get_config()\n    model = Model.from_config(model_config)\n    model.compile('rmsprop', 'mse')",
        "begin_line": 329,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.layers.core_test.test_sequential_as_downstream_of_masking_layer#348",
        "src_path": "tests/keras/layers/core_test.py",
        "class_name": "tests.keras.layers.core_test",
        "signature": "tests.keras.layers.core_test.test_sequential_as_downstream_of_masking_layer()",
        "snippet": "def test_sequential_as_downstream_of_masking_layer():\n\n    inputs = layers.Input(shape=(3, 4))\n    x = layers.Masking(mask_value=0., input_shape=(3, 4))(inputs)\n    s = Sequential()\n    s.add(layers.Dense(5, input_shape=(4,)))\n    s.add(layers.Activation('relu'))\n    x = layers.wrappers.TimeDistributed(s)(x)\n    model = Model(inputs=inputs, outputs=x)\n    model.compile(optimizer='rmsprop', loss='mse')\n    model_input = np.random.randint(low=1, high=5, size=(10, 3, 4))\n    for i in range(4):\n        model_input[i, i:, :] = 0.\n    model.fit(model_input,\n              np.random.random((10, 3, 5)), epochs=1, batch_size=6)\n\n    mask_outputs = [model.layers[1].compute_mask(model.layers[1].input)]\n    mask_outputs += [model.layers[2].compute_mask(model.layers[2].input, mask_outputs[-1])]\n    func = K.function([model.input], mask_outputs)\n    mask_outputs_val = func([model_input])\n    assert np.array_equal(mask_outputs_val[0], np.any(model_input, axis=-1))\n    assert np.array_equal(mask_outputs_val[1], np.any(model_input, axis=-1))",
        "begin_line": 348,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    }
]