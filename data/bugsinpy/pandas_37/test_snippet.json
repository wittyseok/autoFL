[
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal#12",
        "src_path": "pandas/tests/extension/base/base.py",
        "class_name": "pandas.tests.extension.base.base.BaseExtensionTests",
        "signature": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal(cls, left, right, *args, **kwargs)",
        "snippet": "    def assert_series_equal(cls, left, right, *args, **kwargs):\n        return tm.assert_series_equal(left, right, *args, **kwargs)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.dtype#29",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.dtype(request)",
        "snippet": "def dtype(request):\n    return request.param()",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data#34",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data(dtype)",
        "snippet": "def data(dtype):\n    return integer_array(\n        list(range(8)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100],\n        dtype=dtype,\n    )",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data_missing#42",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data_missing(dtype)",
        "snippet": "def data_missing(dtype):\n    return integer_array([np.nan, 1], dtype=dtype)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.all_data#47",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.all_data(request, data, data_missing)",
        "snippet": "def all_data(request, data, data_missing):\n    \"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"\n    if request.param == \"data\":\n        return data\n    elif request.param == \"data_missing\":\n        return data_missing",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_repr#12",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_repr()",
        "snippet": "def test_repr():\n    df = pd.DataFrame({\"A\": pd.array([\"a\", pd.NA, \"b\"], dtype=\"string\")})\n    expected = \"      A\\n0     a\\n1  <NA>\\n2     b\"\n    assert repr(df) == expected\n\n    expected = \"0       a\\n1    <NA>\\n2       b\\nName: A, dtype: string\"\n    assert repr(df.A) == expected\n\n    expected = \"<StringArray>\\n['a', <NA>, 'b']\\nLength: 3, dtype: string\"\n    assert repr(df.A.array) == expected",
        "begin_line": 12,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_none_to_nan#24",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_none_to_nan()",
        "snippet": "def test_none_to_nan():\n    a = pd.arrays.StringArray._from_sequence([\"a\", None, \"b\"])\n    assert a[1] is not None\n    assert a[1] is pd.NA",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_setitem_validates#30",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_setitem_validates()",
        "snippet": "def test_setitem_validates():\n    a = pd.arrays.StringArray._from_sequence([\"a\", \"b\"])\n    with pytest.raises(ValueError, match=\"10\"):\n        a[0] = 10\n\n    with pytest.raises(ValueError, match=\"strings\"):\n        a[:] = np.array([1, 2])",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_setitem_with_scalar_string#39",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_setitem_with_scalar_string()",
        "snippet": "def test_setitem_with_scalar_string():\n    # is_float_dtype considers some strings, like 'd', to be floats\n    # which can cause issues.\n    arr = pd.array([\"a\", \"c\"], dtype=\"string\")\n    arr[0] = \"d\"\n    expected = pd.array([\"d\", \"c\"], dtype=\"string\")\n    tm.assert_extension_array_equal(arr, expected)",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_string_methods#56",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_string_methods(input, method)",
        "snippet": "def test_string_methods(input, method):\n    a = pd.Series(input, dtype=\"string\")\n    b = pd.Series(input, dtype=\"object\")\n    result = method(a.str)\n    expected = method(b.str)\n\n    assert result.dtype.name == \"string\"\n    tm.assert_series_equal(result.astype(object), expected)",
        "begin_line": 56,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_astype_roundtrip#66",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_astype_roundtrip()",
        "snippet": "def test_astype_roundtrip():\n    s = pd.Series(pd.date_range(\"2000\", periods=12))\n    s[0] = None\n\n    result = s.astype(\"string\").astype(\"datetime64[ns]\")\n    tm.assert_series_equal(result, s)",
        "begin_line": 66,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_add#74",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_add()",
        "snippet": "def test_add():\n    a = pd.Series([\"a\", \"b\", \"c\", None, None], dtype=\"string\")\n    b = pd.Series([\"x\", \"y\", None, \"z\", None], dtype=\"string\")\n\n    result = a + b\n    expected = pd.Series([\"ax\", \"by\", None, None, None], dtype=\"string\")\n    tm.assert_series_equal(result, expected)\n\n    result = a.add(b)\n    tm.assert_series_equal(result, expected)\n\n    result = a.radd(b)\n    expected = pd.Series([\"xa\", \"yb\", None, None, None], dtype=\"string\")\n    tm.assert_series_equal(result, expected)\n\n    result = a.add(b, fill_value=\"-\")\n    expected = pd.Series([\"ax\", \"by\", \"c-\", \"-z\", None], dtype=\"string\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 74,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_add_2d#94",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_add_2d()",
        "snippet": "def test_add_2d():\n    a = pd.array([\"a\", \"b\", \"c\"], dtype=\"string\")\n    b = np.array([[\"a\", \"b\", \"c\"]], dtype=object)\n    with pytest.raises(ValueError, match=\"3 != 1\"):\n        a + b\n\n    s = pd.Series(a)\n    with pytest.raises(ValueError, match=\"3 != 1\"):\n        s + b",
        "begin_line": 94,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_add_sequence#105",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_add_sequence()",
        "snippet": "def test_add_sequence():\n    a = pd.array([\"a\", \"b\", None, None], dtype=\"string\")\n    other = [\"x\", None, \"y\", None]\n\n    result = a + other\n    expected = pd.array([\"ax\", None, None, None], dtype=\"string\")\n    tm.assert_extension_array_equal(result, expected)\n\n    result = other + a\n    expected = pd.array([\"xa\", None, None, None], dtype=\"string\")\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 105,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_mul#118",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_mul()",
        "snippet": "def test_mul():\n    a = pd.array([\"a\", \"b\", None], dtype=\"string\")\n    result = a * 2\n    expected = pd.array([\"aa\", \"bb\", None], dtype=\"string\")\n    tm.assert_extension_array_equal(result, expected)\n\n    result = 2 * a\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_add_strings#129",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_add_strings()",
        "snippet": "def test_add_strings():\n    array = pd.array([\"a\", \"b\", \"c\", \"d\"], dtype=\"string\")\n    df = pd.DataFrame([[\"t\", \"u\", \"v\", \"w\"]])\n    assert array.__add__(df) is NotImplemented\n\n    result = array + df\n    expected = pd.DataFrame([[\"at\", \"bu\", \"cv\", \"dw\"]]).astype(\"string\")\n    tm.assert_frame_equal(result, expected)\n\n    result = df + array\n    expected = pd.DataFrame([[\"ta\", \"ub\", \"vc\", \"wd\"]]).astype(\"string\")\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 129,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_add_frame#144",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_add_frame()",
        "snippet": "def test_add_frame():\n    array = pd.array([\"a\", \"b\", np.nan, np.nan], dtype=\"string\")\n    df = pd.DataFrame([[\"x\", np.nan, \"y\", np.nan]])\n\n    assert array.__add__(df) is NotImplemented\n\n    result = array + df\n    expected = pd.DataFrame([[\"ax\", np.nan, np.nan, np.nan]]).astype(\"string\")\n    tm.assert_frame_equal(result, expected)\n\n    result = df + array\n    expected = pd.DataFrame([[\"xa\", np.nan, np.nan, np.nan]]).astype(\"string\")\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 144,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_comparison_methods_scalar#159",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_comparison_methods_scalar(all_compare_operators)",
        "snippet": "def test_comparison_methods_scalar(all_compare_operators):\n    op_name = all_compare_operators\n\n    a = pd.array([\"a\", None, \"c\"], dtype=\"string\")\n    other = \"a\"\n    result = getattr(a, op_name)(other)\n    expected = np.array([getattr(item, op_name)(other) for item in a], dtype=object)\n    expected = pd.array(expected, dtype=\"boolean\")\n    tm.assert_extension_array_equal(result, expected)\n\n    result = getattr(a, op_name)(pd.NA)\n    expected = pd.array([None, None, None], dtype=\"boolean\")\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 159,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_comparison_methods_array#174",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_comparison_methods_array(all_compare_operators)",
        "snippet": "def test_comparison_methods_array(all_compare_operators):\n    op_name = all_compare_operators\n\n    a = pd.array([\"a\", None, \"c\"], dtype=\"string\")\n    other = [None, None, \"c\"]\n    result = getattr(a, op_name)(other)\n    expected = np.empty_like(a, dtype=\"object\")\n    expected[-1] = getattr(other[-1], op_name)(a[-1])\n    expected = pd.array(expected, dtype=\"boolean\")\n    tm.assert_extension_array_equal(result, expected)\n\n    result = getattr(a, op_name)(pd.NA)\n    expected = pd.array([None, None, None], dtype=\"boolean\")\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 174,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_constructor_raises#190",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_constructor_raises()",
        "snippet": "def test_constructor_raises():\n    with pytest.raises(ValueError, match=\"sequence of strings\"):\n        pd.arrays.StringArray(np.array([\"a\", \"b\"], dtype=\"S1\"))\n\n    with pytest.raises(ValueError, match=\"sequence of strings\"):\n        pd.arrays.StringArray(np.array([]))\n\n    with pytest.raises(ValueError, match=\"strings or pandas.NA\"):\n        pd.arrays.StringArray(np.array([\"a\", np.nan], dtype=object))\n\n    with pytest.raises(ValueError, match=\"strings or pandas.NA\"):\n        pd.arrays.StringArray(np.array([\"a\", None], dtype=object))\n\n    with pytest.raises(ValueError, match=\"strings or pandas.NA\"):\n        pd.arrays.StringArray(np.array([\"a\", pd.NaT], dtype=object))",
        "begin_line": 190,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_from_sequence_no_mutate#208",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_from_sequence_no_mutate(copy)",
        "snippet": "def test_from_sequence_no_mutate(copy):\n    a = np.array([\"a\", np.nan], dtype=object)\n    original = a.copy()\n    result = pd.arrays.StringArray._from_sequence(a, copy=copy)\n    expected = pd.arrays.StringArray(np.array([\"a\", pd.NA], dtype=object))\n    tm.assert_extension_array_equal(result, expected)\n    tm.assert_numpy_array_equal(a, original)",
        "begin_line": 208,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_astype_int#217",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_astype_int()",
        "snippet": "def test_astype_int():\n    arr = pd.array([\"1\", pd.NA, \"3\"], dtype=\"string\")\n\n    result = arr.astype(\"Int64\")\n    expected = pd.array([1, pd.NA, 3], dtype=\"Int64\")\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 217,
        "end_line": 222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_reduce#227",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_reduce(skipna)",
        "snippet": "def test_reduce(skipna):\n    arr = pd.Series([\"a\", \"b\", \"c\"], dtype=\"string\")\n    result = arr.sum(skipna=skipna)\n    assert result == \"abc\"",
        "begin_line": 227,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_reduce_missing#235",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_reduce_missing(skipna)",
        "snippet": "def test_reduce_missing(skipna):\n    arr = pd.Series([None, \"a\", None, \"b\", \"c\", None], dtype=\"string\")\n    result = arr.sum(skipna=skipna)\n    if skipna:\n        assert result == \"abc\"\n    else:\n        assert pd.isna(result)",
        "begin_line": 235,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_arrow_array#245",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_arrow_array()",
        "snippet": "def test_arrow_array():\n    # protocol added in 0.15.0\n    import pyarrow as pa\n\n    data = pd.array([\"a\", \"b\", \"c\"], dtype=\"string\")\n    arr = pa.array(data)\n    expected = pa.array(list(data), type=pa.string(), from_pandas=True)\n    assert arr.equals(expected)",
        "begin_line": 245,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_arrow_roundtrip#256",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_arrow_roundtrip()",
        "snippet": "def test_arrow_roundtrip():\n    # roundtrip possible from arrow 1.0.0\n    import pyarrow as pa\n\n    data = pd.array([\"a\", \"b\", None], dtype=\"string\")\n    df = pd.DataFrame({\"a\": data})\n    table = pa.table(df)\n    assert table.field(\"a\").type == \"string\"\n    result = table.to_pandas()\n    assert isinstance(result[\"a\"].dtype, pd.StringDtype)\n    tm.assert_frame_equal(result, df)\n    # ensure the missing value is represented by NA and not np.nan or None\n    assert result.loc[2, \"a\"] is pd.NA",
        "begin_line": 256,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.string_.test_string.test_value_counts_na#271",
        "src_path": "pandas/tests/arrays/string_/test_string.py",
        "class_name": "pandas.tests.arrays.string_.test_string",
        "signature": "pandas.tests.arrays.string_.test_string.test_value_counts_na()",
        "snippet": "def test_value_counts_na():\n    arr = pd.array([\"a\", \"b\", \"a\", pd.NA], dtype=\"string\")\n    result = arr.value_counts(dropna=False)\n    expected = pd.Series([2, 1, 1], index=[\"a\", \"b\", pd.NA], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)\n\n    result = arr.value_counts(dropna=True)\n    expected = pd.Series([2, 1], index=[\"a\", \"b\"], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 271,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#24",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#31",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DecimalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#49",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#65",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#111",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            item = pd.api.indexers.check_array_indexer(self, item)\n            return type(self)(self._data[item])",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#132",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#148",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 148,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#158",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 158,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    }
]