[
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.setup_class#12",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.setup_class(cls)",
        "snippet": "    def setup_class(cls):\n        cls.img_w = cls.img_h = 20\n        rgb_images = []\n        gray_images = []\n        for n in range(8):\n            bias = np.random.rand(cls.img_w, cls.img_h, 1) * 64\n            variance = np.random.rand(cls.img_w, cls.img_h, 1) * (255 - 64)\n            imarray = np.random.rand(cls.img_w, cls.img_h, 3) * variance + bias\n            im = Image.fromarray(imarray.astype('uint8')).convert('RGB')\n            rgb_images.append(im)\n\n            imarray = np.random.rand(cls.img_w, cls.img_h, 1) * variance + bias\n            im = Image.fromarray(imarray.astype('uint8').squeeze()).convert('L')\n            gray_images.append(im)\n\n        cls.all_test_images = [rgb_images, gray_images]",
        "begin_line": 12,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.teardown_class#29",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.teardown_class(cls)",
        "snippet": "    def teardown_class(cls):\n        del cls.all_test_images",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator#32",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator(self, tmpdir)",
        "snippet": "    def test_image_data_generator(self, tmpdir):\n        for test_images in self.all_test_images:\n            img_list = []\n            for im in test_images:\n                img_list.append(image.img_to_array(im)[None, ...])\n\n            images = np.vstack(img_list)\n            generator = image.ImageDataGenerator(\n                featurewise_center=True,\n                samplewise_center=True,\n                featurewise_std_normalization=True,\n                samplewise_std_normalization=True,\n                zca_whitening=True,\n                rotation_range=90.,\n                width_shift_range=0.1,\n                height_shift_range=0.1,\n                shear_range=0.5,\n                zoom_range=0.2,\n                channel_shift_range=0.,\n                brightness_range=(1, 5),\n                fill_mode='nearest',\n                cval=0.5,\n                horizontal_flip=True,\n                vertical_flip=True)\n            generator.fit(images, augment=True)\n\n            for x, y in generator.flow(images, np.arange(images.shape[0]),\n                                       shuffle=False, save_to_dir=str(tmpdir),\n                                       batch_size=3):\n                assert x.shape == images[:3].shape\n                assert list(y) == [0, 1, 2]\n                break\n\n            # Test with `shuffle=True`\n            for x, y in generator.flow(images, np.arange(images.shape[0]),\n                                       shuffle=True, save_to_dir=str(tmpdir),\n                                       batch_size=3):\n                assert x.shape == images[:3].shape\n                # Check that the sequence is shuffled.\n                assert list(y) != [0, 1, 2]\n                break\n\n            # Test `flow` behavior as Sequence\n            seq = generator.flow(images, np.arange(images.shape[0]),\n                                 shuffle=False, save_to_dir=str(tmpdir),\n                                 batch_size=3)\n            assert len(seq) == images.shape[0] // 3 + 1\n            x, y = seq[0]\n            assert x.shape == images[:3].shape\n            assert list(y) == [0, 1, 2]\n\n            # Test with `shuffle=True`\n            seq = generator.flow(images, np.arange(images.shape[0]),\n                                 shuffle=True, save_to_dir=str(tmpdir),\n                                 batch_size=3, seed=123)\n            x, y = seq[0]\n            # Check that the sequence is shuffled.\n            assert list(y) != [0, 1, 2]\n\n            # `on_epoch_end` should reshuffle the sequence.\n            seq.on_epoch_end()\n            x2, y2 = seq[0]\n            assert list(y) != list(y2)",
        "begin_line": 32,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_with_validation_split#96",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_with_validation_split(self)",
        "snippet": "    def test_image_data_generator_with_validation_split(self):\n        for test_images in self.all_test_images:\n            img_list = []\n            for im in test_images:\n                img_list.append(image.img_to_array(im)[None, ...])\n\n            images = np.vstack(img_list)\n            generator = image.ImageDataGenerator(validation_split=0.5)\n            seq = generator.flow(images, np.arange(images.shape[0]),\n                                 shuffle=False, batch_size=3,\n                                 subset='validation')\n            x, y = seq[0]\n            assert list(y) == [0, 1, 2]\n            seq = generator.flow(images, np.arange(images.shape[0]),\n                                 shuffle=False, batch_size=3,\n                                 subset='training')\n            x2, y2 = seq[0]\n            assert list(y2) == [4, 5, 6]\n\n            with pytest.raises(ValueError):\n                generator.flow(images, np.arange(images.shape[0]),\n                               shuffle=False, batch_size=3,\n                               subset='foo')",
        "begin_line": 96,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_with_split_value_error#120",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_with_split_value_error(self)",
        "snippet": "    def test_image_data_generator_with_split_value_error(self):\n        with pytest.raises(ValueError):\n            generator = image.ImageDataGenerator(validation_split=5)",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_invalid_data#124",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_invalid_data(self)",
        "snippet": "    def test_image_data_generator_invalid_data(self):\n        generator = image.ImageDataGenerator(\n            featurewise_center=True,\n            samplewise_center=True,\n            featurewise_std_normalization=True,\n            samplewise_std_normalization=True,\n            zca_whitening=True,\n            data_format='channels_last')\n        # Test fit with invalid data\n        with pytest.raises(ValueError):\n            x = np.random.random((3, 10, 10))\n            generator.fit(x)\n\n        # Test flow with invalid data\n        with pytest.raises(ValueError):\n            x = np.random.random((32, 10, 10))\n            generator.flow(np.arange(x.shape[0]))",
        "begin_line": 124,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_fit#142",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_image_data_generator_fit(self)",
        "snippet": "    def test_image_data_generator_fit(self):\n        generator = image.ImageDataGenerator(\n            featurewise_center=True,\n            samplewise_center=True,\n            featurewise_std_normalization=True,\n            samplewise_std_normalization=True,\n            zca_whitening=True,\n            zoom_range=(0.2, 0.2),\n            data_format='channels_last')\n        # Test grayscale\n        x = np.random.random((32, 10, 10, 1))\n        generator.fit(x)\n        # Test RBG\n        x = np.random.random((32, 10, 10, 3))\n        generator.fit(x)\n        # Test more samples than dims\n        x = np.random.random((32, 4, 4, 1))\n        generator.fit(x)\n        generator = image.ImageDataGenerator(\n            featurewise_center=True,\n            samplewise_center=True,\n            featurewise_std_normalization=True,\n            samplewise_std_normalization=True,\n            zca_whitening=True,\n            data_format='channels_first')\n        # Test grayscale\n        x = np.random.random((32, 1, 10, 10))\n        generator.fit(x)\n        # Test RBG\n        x = np.random.random((32, 3, 10, 10))\n        generator.fit(x)\n        # Test more samples than dims\n        x = np.random.random((32, 1, 4, 4))\n        generator.fit(x)",
        "begin_line": 142,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_directory_iterator#177",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_directory_iterator(self, tmpdir)",
        "snippet": "    def test_directory_iterator(self, tmpdir):\n        num_classes = 2\n\n        # create folders and subfolders\n        paths = []\n        for cl in range(num_classes):\n            class_directory = 'class-{}'.format(cl)\n            classpaths = [\n                class_directory,\n                os.path.join(class_directory, 'subfolder-1'),\n                os.path.join(class_directory, 'subfolder-2'),\n                os.path.join(class_directory, 'subfolder-1', 'sub-subfolder')\n            ]\n            for path in classpaths:\n                tmpdir.join(path).mkdir()\n            paths.append(classpaths)\n\n        # save the images in the paths\n        count = 0\n        filenames = []\n        for test_images in self.all_test_images:\n            for im in test_images:\n                # rotate image class\n                im_class = count % num_classes\n                # rotate subfolders\n                classpaths = paths[im_class]\n                filename = os.path.join(classpaths[count % len(classpaths)], 'image-{}.jpg'.format(count))\n                filenames.append(filename)\n                im.save(str(tmpdir / filename))\n                count += 1\n\n        # create iterator\n        generator = image.ImageDataGenerator()\n        dir_iterator = generator.flow_from_directory(str(tmpdir))\n\n        # check number of classes and images\n        assert len(dir_iterator.class_indices) == num_classes\n        assert len(dir_iterator.classes) == count\n        assert set(dir_iterator.filenames) == set(filenames)\n\n        # Test invalid use cases\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(str(tmpdir), color_mode='cmyk')\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(str(tmpdir), class_mode='output')\n\n        # Test usage as Sequence\n        generator = image.ImageDataGenerator()\n        dir_seq = generator.flow_from_directory(str(tmpdir),\n                                                target_size=(26, 26),\n                                                color_mode='rgb',\n                                                batch_size=3,\n                                                class_mode='categorical')\n        assert len(dir_seq) == count // 3 + 1\n        x1, y1 = dir_seq[1]\n        assert x1.shape == (3, 26, 26, 3)\n        assert y1.shape == (3, num_classes)\n        x1, y1 = dir_seq[5]\n        with pytest.raises(ValueError):\n            x1, y1 = dir_seq[9]\n\n        # Test Preprocessing before resize\n        def preprocess_test(img):\n            return img.resize((1, 1))\n\n        generator = image.ImageDataGenerator(preprocessing_function=preprocess_test)\n        dir_seq = generator.flow_from_directory(str(tmpdir),\n                                                target_size=(26, 26),\n                                                color_mode='rgb',\n                                                batch_size=1,\n                                                class_mode='categorical')\n\n        gen_x1, gen_y1 = dir_seq[1]\n\n        test_x1 = image.load_img(os.path.join(dir_seq.directory, dir_seq.filenames[1]),\n                                 grayscale=False)\n        test_x1 = preprocess_test(test_x1)\n        test_x1 = test_x1.resize((26, 26))\n        test_x1 = image.img_to_array(test_x1)\n        test_x1 = dir_seq.image_data_generator.random_transform(test_x1)\n        test_x1 = dir_seq.image_data_generator.standardize(test_x1)\n\n        assert gen_x1.shape[1:] == test_x1.shape",
        "begin_line": 177,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.preprocess_test#239",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.preprocess_test(img)",
        "snippet": "        def preprocess_test(img):\n            return img.resize((1, 1))",
        "begin_line": 239,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_directory_iterator_class_mode_input#261",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_directory_iterator_class_mode_input(self, tmpdir)",
        "snippet": "    def test_directory_iterator_class_mode_input(self, tmpdir):\n        tmpdir.join('class-1').mkdir()\n\n        # save the images in the paths\n        count = 0\n        for test_images in self.all_test_images:\n            for im in test_images:\n                filename = str(tmpdir / 'class-1' / 'image-{}.jpg'.format(count))\n                im.save(filename)\n                count += 1\n\n        # create iterator\n        generator = image.ImageDataGenerator()\n        dir_iterator = generator.flow_from_directory(str(tmpdir), class_mode='input')\n        batch = next(dir_iterator)\n\n        # check if input and output have the same shape\n        assert(batch[0].shape == batch[1].shape)\n        # check if the input and output images are not the same numpy array\n        input_img = batch[0][0]\n        output_img = batch[1][0]\n        output_img[0][0][0] += 1\n        assert(input_img[0][0][0] != output_img[0][0][0])",
        "begin_line": 261,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_directory_iterator_with_validation_split#290",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_directory_iterator_with_validation_split(self, validation_split, num_training)",
        "snippet": "    def test_directory_iterator_with_validation_split(self, validation_split, num_training):\n        num_classes = 2\n        tmp_folder = tempfile.mkdtemp(prefix='test_images')\n\n        # create folders and subfolders\n        paths = []\n        for cl in range(num_classes):\n            class_directory = 'class-{}'.format(cl)\n            classpaths = [\n                class_directory,\n                os.path.join(class_directory, 'subfolder-1'),\n                os.path.join(class_directory, 'subfolder-2'),\n                os.path.join(class_directory, 'subfolder-1', 'sub-subfolder')\n            ]\n            for path in classpaths:\n                os.mkdir(os.path.join(tmp_folder, path))\n            paths.append(classpaths)\n\n        # save the images in the paths\n        count = 0\n        filenames = []\n        for test_images in self.all_test_images:\n            for im in test_images:\n                # rotate image class\n                im_class = count % num_classes\n                # rotate subfolders\n                classpaths = paths[im_class]\n                filename = os.path.join(classpaths[count % len(classpaths)], 'image-{}.jpg'.format(count))\n                filenames.append(filename)\n                im.save(os.path.join(tmp_folder, filename))\n                count += 1\n\n        # create iterator\n        generator = image.ImageDataGenerator(validation_split=validation_split)\n\n        with pytest.raises(ValueError):\n            generator.flow_from_directory(tmp_folder, subset='foo')\n\n        train_iterator = generator.flow_from_directory(tmp_folder, subset='training')\n        assert train_iterator.samples == num_training\n\n        valid_iterator = generator.flow_from_directory(tmp_folder, subset='validation')\n        assert valid_iterator.samples == count - num_training\n\n        # check number of classes and images\n        assert len(train_iterator.class_indices) == num_classes\n        assert len(train_iterator.classes) == num_training\n        assert len(set(train_iterator.filenames) & set(filenames)) == num_training\n\n        shutil.rmtree(tmp_folder)",
        "begin_line": 290,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_img_utils#341",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_img_utils(self)",
        "snippet": "    def test_img_utils(self):\n        height, width = 10, 8\n\n        # Test th data format\n        x = np.random.random((3, height, width))\n        img = image.array_to_img(x, data_format='channels_first')\n        assert img.size == (width, height)\n        x = image.img_to_array(img, data_format='channels_first')\n        assert x.shape == (3, height, width)\n        # Test 2D\n        x = np.random.random((1, height, width))\n        img = image.array_to_img(x, data_format='channels_first')\n        assert img.size == (width, height)\n        x = image.img_to_array(img, data_format='channels_first')\n        assert x.shape == (1, height, width)\n\n        # Test tf data format\n        x = np.random.random((height, width, 3))\n        img = image.array_to_img(x, data_format='channels_last')\n        assert img.size == (width, height)\n        x = image.img_to_array(img, data_format='channels_last')\n        assert x.shape == (height, width, 3)\n        # Test 2D\n        x = np.random.random((height, width, 1))\n        img = image.array_to_img(x, data_format='channels_last')\n        assert img.size == (width, height)\n        x = image.img_to_array(img, data_format='channels_last')\n        assert x.shape == (height, width, 1)\n\n        # Test invalid use case\n        with pytest.raises(ValueError):\n            x = np.random.random((height, width))  # not 3D\n            img = image.array_to_img(x, data_format='channels_first')\n        with pytest.raises(ValueError):\n            x = np.random.random((height, width, 3))\n            img = image.array_to_img(x, data_format='channels')  # unknown data_format\n        with pytest.raises(ValueError):\n            x = np.random.random((height, width, 5))  # neither RGB nor gray-scale\n            img = image.array_to_img(x, data_format='channels_last')\n        with pytest.raises(ValueError):\n            x = np.random.random((height, width, 3))\n            img = image.img_to_array(x, data_format='channels')  # unknown data_format\n        with pytest.raises(ValueError):\n            x = np.random.random((height, width, 5, 3))  # neither RGB nor gray-scale\n            img = image.img_to_array(x, data_format='channels_last')",
        "begin_line": 341,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_random_transforms#387",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_random_transforms(self)",
        "snippet": "    def test_random_transforms(self):\n        x = np.random.random((2, 28, 28))\n        assert image.random_rotation(x, 45).shape == (2, 28, 28)\n        assert image.random_shift(x, 1, 1).shape == (2, 28, 28)\n        assert image.random_shear(x, 20).shape == (2, 28, 28)\n        assert image.random_zoom(x, (5, 5)).shape == (2, 28, 28)\n        assert image.random_channel_shift(x, 20).shape == (2, 28, 28)",
        "begin_line": 387,
        "end_line": 393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_batch_standardize#395",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_batch_standardize(self)",
        "snippet": "    def test_batch_standardize(self):\n        # ImageDataGenerator.standardize should work on batches\n        for test_images in self.all_test_images:\n            img_list = []\n            for im in test_images:\n                img_list.append(image.img_to_array(im)[None, ...])\n\n            images = np.vstack(img_list)\n            generator = image.ImageDataGenerator(\n                featurewise_center=True,\n                samplewise_center=True,\n                featurewise_std_normalization=True,\n                samplewise_std_normalization=True,\n                zca_whitening=True,\n                rotation_range=90.,\n                width_shift_range=0.1,\n                height_shift_range=0.1,\n                shear_range=0.5,\n                zoom_range=0.2,\n                channel_shift_range=0.,\n                brightness_range=(1, 5),\n                fill_mode='nearest',\n                cval=0.5,\n                horizontal_flip=True,\n                vertical_flip=True)\n            generator.fit(images, augment=True)\n\n            transformed = np.copy(images)\n            for i, im in enumerate(transformed):\n                transformed[i] = generator.random_transform(im)\n            transformed = generator.standardize(transformed)",
        "begin_line": 395,
        "end_line": 425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.preprocessing.image_test.TestImage.test_load_img#427",
        "src_path": "tests/keras/preprocessing/image_test.py",
        "class_name": "tests.keras.preprocessing.image_test.TestImage",
        "signature": "tests.keras.preprocessing.image_test.TestImage.test_load_img(self, tmpdir)",
        "snippet": "    def test_load_img(self, tmpdir):\n        filename = str(tmpdir / 'image.png')\n\n        original_im_array = np.array(255 * np.random.rand(100, 100, 3),\n                                     dtype=np.uint8)\n        original_im = image.array_to_img(original_im_array, scale=False)\n        original_im.save(filename)\n\n        # Test that loaded image is exactly equal to original.\n\n        loaded_im = image.load_img(filename)\n        loaded_im_array = image.img_to_array(loaded_im)\n        assert loaded_im_array.shape == original_im_array.shape\n        assert np.all(loaded_im_array == original_im_array)\n\n        loaded_im = image.load_img(filename, grayscale=True)\n        loaded_im_array = image.img_to_array(loaded_im)\n        assert loaded_im_array.shape == (original_im_array.shape[0],\n                                         original_im_array.shape[1], 1)\n\n        # Test that nothing is changed when target size is equal to original.\n\n        loaded_im = image.load_img(filename, target_size=(100, 100))\n        loaded_im_array = image.img_to_array(loaded_im)\n        assert loaded_im_array.shape == original_im_array.shape\n        assert np.all(loaded_im_array == original_im_array)\n\n        loaded_im = image.load_img(filename, grayscale=True,\n                                   target_size=(100, 100))\n        loaded_im_array = image.img_to_array(loaded_im)\n        assert loaded_im_array.shape == (original_im_array.shape[0],\n                                         original_im_array.shape[1], 1)\n\n        # Test down-sampling with bilinear interpolation.\n\n        loaded_im = image.load_img(filename, target_size=(25, 25))\n        loaded_im_array = image.img_to_array(loaded_im)\n        assert loaded_im_array.shape == (25, 25, 3)\n\n        loaded_im = image.load_img(filename, grayscale=True,\n                                   target_size=(25, 25))\n        loaded_im_array = image.img_to_array(loaded_im)\n        assert loaded_im_array.shape == (25, 25, 1)\n\n        # Test down-sampling with nearest neighbor interpolation.\n\n        loaded_im_nearest = image.load_img(filename, target_size=(25, 25),\n                                           interpolation=\"nearest\")\n        loaded_im_array_nearest = image.img_to_array(loaded_im_nearest)\n        assert loaded_im_array_nearest.shape == (25, 25, 3)\n        assert np.any(loaded_im_array_nearest != loaded_im_array)\n\n        # Check that exception is raised if interpolation not supported.\n\n        loaded_im = image.load_img(filename, interpolation=\"unsupported\")\n        with pytest.raises(ValueError):\n            loaded_im = image.load_img(filename, target_size=(25, 25),\n                                       interpolation=\"unsupported\")",
        "begin_line": 427,
        "end_line": 484,
        "comment": "",
        "is_bug": false
    }
]