[
    {
        "name": "pandas.tests.groupby.test_function.numpy_dtypes_for_minmax#33",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.numpy_dtypes_for_minmax(request)",
        "snippet": "def numpy_dtypes_for_minmax(request):\n    \"\"\"\n    Fixture of numpy dtypes with min and max values used for testing\n    cummin and cummax\n    \"\"\"\n    dtype = request.param\n    min_val = (\n        np.iinfo(dtype).min if np.dtype(dtype).kind == \"i\" else np.finfo(dtype).min\n    )\n    max_val = (\n        np.iinfo(dtype).max if np.dtype(dtype).kind == \"i\" else np.finfo(dtype).max\n    )\n\n    return (dtype, min_val, max_val)",
        "begin_line": 33,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_bool_aggs#69",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_bool_aggs(agg_func, skipna, vals)",
        "snippet": "def test_groupby_bool_aggs(agg_func, skipna, vals):\n    df = DataFrame({\"key\": [\"a\"] * 3 + [\"b\"] * 3, \"val\": vals * 2})\n\n    # Figure out expectation using Python builtin\n    exp = getattr(builtins, agg_func)(vals)\n\n    # edge case for missing data with skipna and 'any'\n    if skipna and all(isna(vals)) and agg_func == \"any\":\n        exp = False\n\n    exp_df = DataFrame([exp] * 2, columns=[\"val\"], index=Index([\"a\", \"b\"], name=\"key\"))\n    result = getattr(df.groupby(\"key\"), agg_func)(skipna=skipna)\n    tm.assert_frame_equal(result, exp_df)",
        "begin_line": 69,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_max_min_non_numeric#84",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_max_min_non_numeric()",
        "snippet": "def test_max_min_non_numeric():\n    # #2700\n    aa = DataFrame({\"nn\": [11, 11, 22, 22], \"ii\": [1, 2, 3, 4], \"ss\": 4 * [\"mama\"]})\n\n    result = aa.groupby(\"nn\").max()\n    assert \"ss\" in result\n\n    result = aa.groupby(\"nn\").max(numeric_only=False)\n    assert \"ss\" in result\n\n    result = aa.groupby(\"nn\").min()\n    assert \"ss\" in result\n\n    result = aa.groupby(\"nn\").min(numeric_only=False)\n    assert \"ss\" in result",
        "begin_line": 84,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_intercept_builtin_sum#101",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_intercept_builtin_sum()",
        "snippet": "def test_intercept_builtin_sum():\n    s = Series([1.0, 2.0, np.nan, 3.0])\n    grouped = s.groupby([0, 1, 2, 2])\n\n    result = grouped.agg(builtins.sum)\n    result2 = grouped.apply(builtins.sum)\n    expected = grouped.sum()\n    tm.assert_series_equal(result, expected)\n    tm.assert_series_equal(result2, expected)",
        "begin_line": 101,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_builtins_apply#118",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_builtins_apply(keys, f)",
        "snippet": "def test_builtins_apply(keys, f):\n    # see gh-8155\n    df = pd.DataFrame(np.random.randint(1, 50, (1000, 2)), columns=[\"jim\", \"joe\"])\n    df[\"jolie\"] = np.random.randn(1000)\n\n    fname = f.__name__\n    result = df.groupby(keys).apply(f)\n    ngroups = len(df.drop_duplicates(subset=keys))\n\n    assert_msg = f\"invalid frame shape: {result.shape} (expected ({ngroups}, 3))\"\n    assert result.shape == (ngroups, 3), assert_msg\n\n    tm.assert_frame_equal(\n        result,  # numpy's equivalent function\n        df.groupby(keys).apply(getattr(np, fname)),\n    )\n\n    if f != sum:\n        expected = df.groupby(keys).agg(fname).reset_index()\n        expected.set_index(keys, inplace=True, drop=False)\n        tm.assert_frame_equal(result, expected, check_dtype=False)\n\n    tm.assert_series_equal(getattr(result, fname)(), getattr(df, fname)())",
        "begin_line": 118,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_arg_passthru#143",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_arg_passthru()",
        "snippet": "def test_arg_passthru():\n    # make sure that we are passing thru kwargs\n    # to our agg functions\n\n    # GH3668\n    # GH5724\n    df = pd.DataFrame(\n        {\n            \"group\": [1, 1, 2],\n            \"int\": [1, 2, 3],\n            \"float\": [4.0, 5.0, 6.0],\n            \"string\": list(\"abc\"),\n            \"category_string\": pd.Series(list(\"abc\")).astype(\"category\"),\n            \"category_int\": [7, 8, 9],\n            \"datetime\": pd.date_range(\"20130101\", periods=3),\n            \"datetimetz\": pd.date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"timedelta\": pd.timedelta_range(\"1 s\", periods=3, freq=\"s\"),\n        },\n        columns=[\n            \"group\",\n            \"int\",\n            \"float\",\n            \"string\",\n            \"category_string\",\n            \"category_int\",\n            \"datetime\",\n            \"datetimetz\",\n            \"timedelta\",\n        ],\n    )\n\n    expected_columns_numeric = Index([\"int\", \"float\", \"category_int\"])\n\n    # mean / median\n    expected = pd.DataFrame(\n        {\n            \"category_int\": [7.5, 9],\n            \"float\": [4.5, 6.0],\n            \"timedelta\": [pd.Timedelta(\"1.5s\"), pd.Timedelta(\"3s\")],\n            \"int\": [1.5, 3],\n            \"datetime\": [\n                pd.Timestamp(\"2013-01-01 12:00:00\"),\n                pd.Timestamp(\"2013-01-03 00:00:00\"),\n            ],\n            \"datetimetz\": [\n                pd.Timestamp(\"2013-01-01 12:00:00\", tz=\"US/Eastern\"),\n                pd.Timestamp(\"2013-01-03 00:00:00\", tz=\"US/Eastern\"),\n            ],\n        },\n        index=Index([1, 2], name=\"group\"),\n        columns=[\"int\", \"float\", \"category_int\", \"datetime\", \"datetimetz\", \"timedelta\"],\n    )\n\n    for attr in [\"mean\", \"median\"]:\n        result = getattr(df.groupby(\"group\"), attr)()\n        tm.assert_index_equal(result.columns, expected_columns_numeric)\n\n        result = getattr(df.groupby(\"group\"), attr)(numeric_only=False)\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n\n    # TODO: min, max *should* handle\n    # categorical (ordered) dtype\n    expected_columns = Index(\n        [\n            \"int\",\n            \"float\",\n            \"string\",\n            \"category_int\",\n            \"datetime\",\n            \"datetimetz\",\n            \"timedelta\",\n        ]\n    )\n    for attr in [\"min\", \"max\"]:\n        result = getattr(df.groupby(\"group\"), attr)()\n        tm.assert_index_equal(result.columns, expected_columns)\n\n        result = getattr(df.groupby(\"group\"), attr)(numeric_only=False)\n        tm.assert_index_equal(result.columns, expected_columns)\n\n    expected_columns = Index(\n        [\n            \"int\",\n            \"float\",\n            \"string\",\n            \"category_string\",\n            \"category_int\",\n            \"datetime\",\n            \"datetimetz\",\n            \"timedelta\",\n        ]\n    )\n    for attr in [\"first\", \"last\"]:\n        result = getattr(df.groupby(\"group\"), attr)()\n        tm.assert_index_equal(result.columns, expected_columns)\n\n        result = getattr(df.groupby(\"group\"), attr)(numeric_only=False)\n        tm.assert_index_equal(result.columns, expected_columns)\n\n    expected_columns = Index([\"int\", \"float\", \"string\", \"category_int\", \"timedelta\"])\n\n    result = df.groupby(\"group\").sum()\n    tm.assert_index_equal(result.columns, expected_columns_numeric)\n\n    result = df.groupby(\"group\").sum(numeric_only=False)\n    tm.assert_index_equal(result.columns, expected_columns)\n\n    expected_columns = Index([\"int\", \"float\", \"category_int\"])\n    for attr in [\"prod\", \"cumprod\"]:\n        result = getattr(df.groupby(\"group\"), attr)()\n        tm.assert_index_equal(result.columns, expected_columns_numeric)\n\n        result = getattr(df.groupby(\"group\"), attr)(numeric_only=False)\n        tm.assert_index_equal(result.columns, expected_columns)\n\n    # like min, max, but don't include strings\n    expected_columns = Index(\n        [\"int\", \"float\", \"category_int\", \"datetime\", \"datetimetz\", \"timedelta\"]\n    )\n    for attr in [\"cummin\", \"cummax\"]:\n        result = getattr(df.groupby(\"group\"), attr)()\n        # GH 15561: numeric_only=False set by default like min/max\n        tm.assert_index_equal(result.columns, expected_columns)\n\n        result = getattr(df.groupby(\"group\"), attr)(numeric_only=False)\n        tm.assert_index_equal(result.columns, expected_columns)\n\n    expected_columns = Index([\"int\", \"float\", \"category_int\", \"timedelta\"])\n\n    result = getattr(df.groupby(\"group\"), \"cumsum\")()\n    tm.assert_index_equal(result.columns, expected_columns_numeric)\n\n    result = getattr(df.groupby(\"group\"), \"cumsum\")(numeric_only=False)\n    tm.assert_index_equal(result.columns, expected_columns)",
        "begin_line": 143,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_non_cython_api#279",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_non_cython_api()",
        "snippet": "def test_non_cython_api():\n\n    # GH5610\n    # non-cython calls should not include the grouper\n\n    df = DataFrame(\n        [[1, 2, \"foo\"], [1, np.nan, \"bar\"], [3, np.nan, \"baz\"]], columns=[\"A\", \"B\", \"C\"]\n    )\n    g = df.groupby(\"A\")\n    gni = df.groupby(\"A\", as_index=False)\n\n    # mad\n    expected = DataFrame([[0], [np.nan]], columns=[\"B\"], index=[1, 3])\n    expected.index.name = \"A\"\n    result = g.mad()\n    tm.assert_frame_equal(result, expected)\n\n    expected = DataFrame([[0.0, 0.0], [0, np.nan]], columns=[\"A\", \"B\"], index=[0, 1])\n    result = gni.mad()\n    tm.assert_frame_equal(result, expected)\n\n    # describe\n    expected_index = pd.Index([1, 3], name=\"A\")\n    expected_col = pd.MultiIndex(\n        levels=[[\"B\"], [\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"]],\n        codes=[[0] * 8, list(range(8))],\n    )\n    expected = pd.DataFrame(\n        [\n            [1.0, 2.0, np.nan, 2.0, 2.0, 2.0, 2.0, 2.0],\n            [0.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n        ],\n        index=expected_index,\n        columns=expected_col,\n    )\n    result = g.describe()\n    tm.assert_frame_equal(result, expected)\n\n    expected = pd.concat(\n        [\n            df[df.A == 1].describe().unstack().to_frame().T,\n            df[df.A == 3].describe().unstack().to_frame().T,\n        ]\n    )\n    expected.index = pd.Index([0, 1])\n    result = gni.describe()\n    tm.assert_frame_equal(result, expected)\n\n    # any\n    expected = DataFrame(\n        [[True, True], [False, True]], columns=[\"B\", \"C\"], index=[1, 3]\n    )\n    expected.index.name = \"A\"\n    result = g.any()\n    tm.assert_frame_equal(result, expected)\n\n    # idxmax\n    expected = DataFrame([[0.0], [np.nan]], columns=[\"B\"], index=[1, 3])\n    expected.index.name = \"A\"\n    result = g.idxmax()\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 279,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_cython_api2#342",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_cython_api2()",
        "snippet": "def test_cython_api2():\n\n    # this takes the fast apply path\n\n    # cumsum (GH5614)\n    df = DataFrame([[1, 2, np.nan], [1, np.nan, 9], [3, 4, 9]], columns=[\"A\", \"B\", \"C\"])\n    expected = DataFrame([[2, np.nan], [np.nan, 9], [4, 9]], columns=[\"B\", \"C\"])\n    result = df.groupby(\"A\").cumsum()\n    tm.assert_frame_equal(result, expected)\n\n    # GH 5755 - cumsum is a transformer and should ignore as_index\n    result = df.groupby(\"A\", as_index=False).cumsum()\n    tm.assert_frame_equal(result, expected)\n\n    # GH 13994\n    result = df.groupby(\"A\").cumsum(axis=1)\n    expected = df.cumsum(axis=1)\n    tm.assert_frame_equal(result, expected)\n    result = df.groupby(\"A\").cumprod(axis=1)\n    expected = df.cumprod(axis=1)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 342,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_cython_median#365",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_cython_median()",
        "snippet": "def test_cython_median():\n    df = DataFrame(np.random.randn(1000))\n    df.values[::2] = np.nan\n\n    labels = np.random.randint(0, 50, size=1000).astype(float)\n    labels[::17] = np.nan\n\n    result = df.groupby(labels).median()\n    exp = df.groupby(labels).agg(nanops.nanmedian)\n    tm.assert_frame_equal(result, exp)\n\n    df = DataFrame(np.random.randn(1000, 5))\n    rs = df.groupby(labels).agg(np.median)\n    xp = df.groupby(labels).median()\n    tm.assert_frame_equal(rs, xp)",
        "begin_line": 365,
        "end_line": 379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_median_empty_bins#382",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_median_empty_bins(observed)",
        "snippet": "def test_median_empty_bins(observed):\n    df = pd.DataFrame(np.random.randint(0, 44, 500))\n\n    grps = range(0, 55, 5)\n    bins = pd.cut(df[0], grps)\n\n    result = df.groupby(bins, observed=observed).median()\n    expected = df.groupby(bins, observed=observed).agg(lambda x: x.median())\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 382,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_non_arithmetic_agg_types#407",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_non_arithmetic_agg_types(dtype, method, data)",
        "snippet": "def test_groupby_non_arithmetic_agg_types(dtype, method, data):\n    # GH9311, GH6620\n    df = pd.DataFrame(\n        [{\"a\": 1, \"b\": 1}, {\"a\": 1, \"b\": 2}, {\"a\": 2, \"b\": 3}, {\"a\": 2, \"b\": 4}]\n    )\n\n    df[\"b\"] = df.b.astype(dtype)\n\n    if \"args\" not in data:\n        data[\"args\"] = []\n\n    if \"out_type\" in data:\n        out_type = data[\"out_type\"]\n    else:\n        out_type = dtype\n\n    exp = data[\"df\"]\n    df_out = pd.DataFrame(exp)\n\n    df_out[\"b\"] = df_out.b.astype(out_type)\n    df_out.set_index(\"a\", inplace=True)\n\n    grpd = df.groupby(\"a\")\n    t = getattr(grpd, method)(*data[\"args\"])\n    tm.assert_frame_equal(t, df_out)",
        "begin_line": 407,
        "end_line": 431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_non_arithmetic_agg_int_like_precision#444",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_non_arithmetic_agg_int_like_precision(i)",
        "snippet": "def test_groupby_non_arithmetic_agg_int_like_precision(i):\n    # see gh-6620, gh-9311\n    df = pd.DataFrame([{\"a\": 1, \"b\": i[0]}, {\"a\": 1, \"b\": i[1]}])\n\n    grp_exp = {\n        \"first\": {\"expected\": i[0]},\n        \"last\": {\"expected\": i[1]},\n        \"min\": {\"expected\": i[0]},\n        \"max\": {\"expected\": i[1]},\n        \"nth\": {\"expected\": i[1], \"args\": [1]},\n        \"count\": {\"expected\": 2},\n    }\n\n    for method, data in grp_exp.items():\n        if \"args\" not in data:\n            data[\"args\"] = []\n\n        grouped = df.groupby(\"a\")\n        res = getattr(grouped, method)(*data[\"args\"])\n\n        assert res.iloc[0].b == data[\"expected\"]",
        "begin_line": 444,
        "end_line": 464,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_idxmin_idxmax_returns_int_types#474",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_idxmin_idxmax_returns_int_types(func, values)",
        "snippet": "def test_idxmin_idxmax_returns_int_types(func, values):\n    # GH 25444\n    df = pd.DataFrame(\n        {\n            \"name\": [\"A\", \"A\", \"B\", \"B\"],\n            \"c_int\": [1, 2, 3, 4],\n            \"c_float\": [4.02, 3.03, 2.04, 1.05],\n            \"c_date\": [\"2019\", \"2018\", \"2016\", \"2017\"],\n        }\n    )\n    df[\"c_date\"] = pd.to_datetime(df[\"c_date\"])\n\n    result = getattr(df.groupby(\"name\"), func)()\n\n    expected = pd.DataFrame(values, index=Index([\"A\", \"B\"], name=\"name\"))\n\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 474,
        "end_line": 490,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_fill_consistency#493",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_fill_consistency()",
        "snippet": "def test_fill_consistency():\n\n    # GH9221\n    # pass thru keyword arguments to the generated wrapper\n    # are set if the passed kw is None (only)\n    df = DataFrame(\n        index=pd.MultiIndex.from_product(\n            [[\"value1\", \"value2\"], date_range(\"2014-01-01\", \"2014-01-06\")]\n        ),\n        columns=Index([\"1\", \"2\"], name=\"id\"),\n    )\n    df[\"1\"] = [\n        np.nan,\n        1,\n        np.nan,\n        np.nan,\n        11,\n        np.nan,\n        np.nan,\n        2,\n        np.nan,\n        np.nan,\n        22,\n        np.nan,\n    ]\n    df[\"2\"] = [\n        np.nan,\n        3,\n        np.nan,\n        np.nan,\n        33,\n        np.nan,\n        np.nan,\n        4,\n        np.nan,\n        np.nan,\n        44,\n        np.nan,\n    ]\n\n    expected = df.groupby(level=0, axis=0).fillna(method=\"ffill\")\n    result = df.T.groupby(level=0, axis=1).fillna(method=\"ffill\").T\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 493,
        "end_line": 535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_cumprod#538",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_cumprod()",
        "snippet": "def test_groupby_cumprod():\n    # GH 4095\n    df = pd.DataFrame({\"key\": [\"b\"] * 10, \"value\": 2})\n\n    actual = df.groupby(\"key\")[\"value\"].cumprod()\n    expected = df.groupby(\"key\")[\"value\"].apply(lambda x: x.cumprod())\n    expected.name = \"value\"\n    tm.assert_series_equal(actual, expected)\n\n    df = pd.DataFrame({\"key\": [\"b\"] * 100, \"value\": 2})\n    actual = df.groupby(\"key\")[\"value\"].cumprod()\n    # if overflows, groupby product casts to float\n    # while numpy passes back invalid values\n    df[\"value\"] = df[\"value\"].astype(float)\n    expected = df.groupby(\"key\")[\"value\"].apply(lambda x: x.cumprod())\n    expected.name = \"value\"\n    tm.assert_series_equal(actual, expected)",
        "begin_line": 538,
        "end_line": 554,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.scipy_sem#557",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.scipy_sem(*args, **kwargs)",
        "snippet": "def scipy_sem(*args, **kwargs):\n    from scipy.stats import sem\n\n    return sem(*args, ddof=1, **kwargs)",
        "begin_line": 557,
        "end_line": 560,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_ops_general#580",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_ops_general(op, targop)",
        "snippet": "def test_ops_general(op, targop):\n    df = DataFrame(np.random.randn(1000))\n    labels = np.random.randint(0, 50, size=1000).astype(float)\n\n    result = getattr(df.groupby(labels), op)().astype(float)\n    expected = df.groupby(labels).agg(targop)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 580,
        "end_line": 586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_max_nan_bug#589",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_max_nan_bug()",
        "snippet": "def test_max_nan_bug():\n    raw = \"\"\",Date,app,File\n-04-23,2013-04-23 00:00:00,,log080001.log\n-05-06,2013-05-06 00:00:00,,log.log\n-05-07,2013-05-07 00:00:00,OE,xlsx\"\"\"\n\n    df = pd.read_csv(StringIO(raw), parse_dates=[0])\n    gb = df.groupby(\"Date\")\n    r = gb[[\"File\"]].max()\n    e = gb[\"File\"].max().to_frame()\n    tm.assert_frame_equal(r, e)\n    assert not r[\"File\"].isna().any()",
        "begin_line": 589,
        "end_line": 600,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nlargest#603",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nlargest()",
        "snippet": "def test_nlargest():\n    a = Series([1, 3, 5, 7, 2, 9, 0, 4, 6, 10])\n    b = Series(list(\"a\" * 5 + \"b\" * 5))\n    gb = a.groupby(b)\n    r = gb.nlargest(3)\n    e = Series(\n        [7, 5, 3, 10, 9, 6],\n        index=MultiIndex.from_arrays([list(\"aaabbb\"), [3, 2, 1, 9, 5, 8]]),\n    )\n    tm.assert_series_equal(r, e)\n\n    a = Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0])\n    gb = a.groupby(b)\n    e = Series(\n        [3, 2, 1, 3, 3, 2],\n        index=MultiIndex.from_arrays([list(\"aaabbb\"), [2, 3, 1, 6, 5, 7]]),\n    )\n    tm.assert_series_equal(gb.nlargest(3, keep=\"last\"), e)",
        "begin_line": 603,
        "end_line": 620,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nlargest_mi_grouper#623",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nlargest_mi_grouper()",
        "snippet": "def test_nlargest_mi_grouper():\n    # see gh-21411\n    npr = np.random.RandomState(123456789)\n\n    dts = date_range(\"20180101\", periods=10)\n    iterables = [dts, [\"one\", \"two\"]]\n\n    idx = MultiIndex.from_product(iterables, names=[\"first\", \"second\"])\n    s = Series(npr.randn(20), index=idx)\n\n    result = s.groupby(\"first\").nlargest(1)\n\n    exp_idx = MultiIndex.from_tuples(\n        [\n            (dts[0], dts[0], \"one\"),\n            (dts[1], dts[1], \"one\"),\n            (dts[2], dts[2], \"one\"),\n            (dts[3], dts[3], \"two\"),\n            (dts[4], dts[4], \"one\"),\n            (dts[5], dts[5], \"one\"),\n            (dts[6], dts[6], \"one\"),\n            (dts[7], dts[7], \"one\"),\n            (dts[8], dts[8], \"two\"),\n            (dts[9], dts[9], \"one\"),\n        ],\n        names=[\"first\", \"first\", \"second\"],\n    )\n\n    exp_values = [\n        2.2129019979039612,\n        1.8417114045748335,\n        0.858963679564603,\n        1.3759151378258088,\n        0.9430284594687134,\n        0.5296914208183142,\n        0.8318045593815487,\n        -0.8476703342910327,\n        0.3804446884133735,\n        -0.8028845810770998,\n    ]\n\n    expected = Series(exp_values, index=exp_idx)\n    tm.assert_series_equal(result, expected, check_exact=False, check_less_precise=True)",
        "begin_line": 623,
        "end_line": 665,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nsmallest#668",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nsmallest()",
        "snippet": "def test_nsmallest():\n    a = Series([1, 3, 5, 7, 2, 9, 0, 4, 6, 10])\n    b = Series(list(\"a\" * 5 + \"b\" * 5))\n    gb = a.groupby(b)\n    r = gb.nsmallest(3)\n    e = Series(\n        [1, 2, 3, 0, 4, 6],\n        index=MultiIndex.from_arrays([list(\"aaabbb\"), [0, 4, 1, 6, 7, 8]]),\n    )\n    tm.assert_series_equal(r, e)\n\n    a = Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0])\n    gb = a.groupby(b)\n    e = Series(\n        [0, 1, 1, 0, 1, 2],\n        index=MultiIndex.from_arrays([list(\"aaabbb\"), [4, 1, 0, 9, 8, 7]]),\n    )\n    tm.assert_series_equal(gb.nsmallest(3, keep=\"last\"), e)",
        "begin_line": 668,
        "end_line": 685,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_numpy_compat#689",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_numpy_compat(func)",
        "snippet": "def test_numpy_compat(func):\n    # see gh-12811\n    df = pd.DataFrame({\"A\": [1, 2, 1], \"B\": [1, 2, 3]})\n    g = df.groupby(\"A\")\n\n    msg = \"numpy operations are not valid with groupby\"\n\n    with pytest.raises(UnsupportedFunctionCall, match=msg):\n        getattr(g, func)(1, 2, 3)\n    with pytest.raises(UnsupportedFunctionCall, match=msg):\n        getattr(g, func)(foo=1)",
        "begin_line": 689,
        "end_line": 699,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_cummin#707",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_cummin(numpy_dtypes_for_minmax)",
        "snippet": "def test_cummin(numpy_dtypes_for_minmax):\n    dtype = numpy_dtypes_for_minmax[0]\n    min_val = numpy_dtypes_for_minmax[1]\n\n    # GH 15048\n    base_df = pd.DataFrame(\n        {\"A\": [1, 1, 1, 1, 2, 2, 2, 2], \"B\": [3, 4, 3, 2, 2, 3, 2, 1]}\n    )\n    expected_mins = [3, 3, 3, 2, 2, 2, 2, 1]\n\n    df = base_df.astype(dtype)\n\n    expected = pd.DataFrame({\"B\": expected_mins}).astype(dtype)\n    result = df.groupby(\"A\").cummin()\n    tm.assert_frame_equal(result, expected)\n    result = df.groupby(\"A\").B.apply(lambda x: x.cummin()).to_frame()\n    tm.assert_frame_equal(result, expected)\n\n    # Test w/ min value for dtype\n    df.loc[[2, 6], \"B\"] = min_val\n    expected.loc[[2, 3, 6, 7], \"B\"] = min_val\n    result = df.groupby(\"A\").cummin()\n    tm.assert_frame_equal(result, expected)\n    expected = df.groupby(\"A\").B.apply(lambda x: x.cummin()).to_frame()\n    tm.assert_frame_equal(result, expected)\n\n    # Test nan in some values\n    base_df.loc[[0, 2, 4, 6], \"B\"] = np.nan\n    expected = pd.DataFrame({\"B\": [np.nan, 4, np.nan, 2, np.nan, 3, np.nan, 1]})\n    result = base_df.groupby(\"A\").cummin()\n    tm.assert_frame_equal(result, expected)\n    expected = base_df.groupby(\"A\").B.apply(lambda x: x.cummin()).to_frame()\n    tm.assert_frame_equal(result, expected)\n\n    # GH 15561\n    df = pd.DataFrame(dict(a=[1], b=pd.to_datetime([\"2001\"])))\n    expected = pd.Series(pd.to_datetime(\"2001\"), index=[0], name=\"b\")\n\n    result = df.groupby(\"a\")[\"b\"].cummin()\n    tm.assert_series_equal(expected, result)\n\n    # GH 15635\n    df = pd.DataFrame(dict(a=[1, 2, 1], b=[1, 2, 2]))\n    result = df.groupby(\"a\").b.cummin()\n    expected = pd.Series([1, 2, 1], name=\"b\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 707,
        "end_line": 752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_cummin_all_nan_column#760",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_cummin_all_nan_column()",
        "snippet": "def test_cummin_all_nan_column():\n    base_df = pd.DataFrame({\"A\": [1, 1, 1, 1, 2, 2, 2, 2], \"B\": [np.nan] * 8})\n\n    expected = pd.DataFrame({\"B\": [np.nan] * 8})\n    result = base_df.groupby(\"A\").cummin()\n    tm.assert_frame_equal(expected, result)\n    result = base_df.groupby(\"A\").B.apply(lambda x: x.cummin()).to_frame()\n    tm.assert_frame_equal(expected, result)",
        "begin_line": 760,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_cummax#775",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_cummax(numpy_dtypes_for_minmax)",
        "snippet": "def test_cummax(numpy_dtypes_for_minmax):\n    dtype = numpy_dtypes_for_minmax[0]\n    max_val = numpy_dtypes_for_minmax[2]\n\n    # GH 15048\n    base_df = pd.DataFrame(\n        {\"A\": [1, 1, 1, 1, 2, 2, 2, 2], \"B\": [3, 4, 3, 2, 2, 3, 2, 1]}\n    )\n    expected_maxs = [3, 4, 4, 4, 2, 3, 3, 3]\n\n    df = base_df.astype(dtype)\n\n    expected = pd.DataFrame({\"B\": expected_maxs}).astype(dtype)\n    result = df.groupby(\"A\").cummax()\n    tm.assert_frame_equal(result, expected)\n    result = df.groupby(\"A\").B.apply(lambda x: x.cummax()).to_frame()\n    tm.assert_frame_equal(result, expected)\n\n    # Test w/ max value for dtype\n    df.loc[[2, 6], \"B\"] = max_val\n    expected.loc[[2, 3, 6, 7], \"B\"] = max_val\n    result = df.groupby(\"A\").cummax()\n    tm.assert_frame_equal(result, expected)\n    expected = df.groupby(\"A\").B.apply(lambda x: x.cummax()).to_frame()\n    tm.assert_frame_equal(result, expected)\n\n    # Test nan in some values\n    base_df.loc[[0, 2, 4, 6], \"B\"] = np.nan\n    expected = pd.DataFrame({\"B\": [np.nan, 4, np.nan, 4, np.nan, 3, np.nan, 3]})\n    result = base_df.groupby(\"A\").cummax()\n    tm.assert_frame_equal(result, expected)\n    expected = base_df.groupby(\"A\").B.apply(lambda x: x.cummax()).to_frame()\n    tm.assert_frame_equal(result, expected)\n\n    # GH 15561\n    df = pd.DataFrame(dict(a=[1], b=pd.to_datetime([\"2001\"])))\n    expected = pd.Series(pd.to_datetime(\"2001\"), index=[0], name=\"b\")\n\n    result = df.groupby(\"a\")[\"b\"].cummax()\n    tm.assert_series_equal(expected, result)\n\n    # GH 15635\n    df = pd.DataFrame(dict(a=[1, 2, 1], b=[2, 1, 1]))\n    result = df.groupby(\"a\").b.cummax()\n    expected = pd.Series([2, 1, 2], name=\"b\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 775,
        "end_line": 820,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_cummax_all_nan_column#828",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_cummax_all_nan_column()",
        "snippet": "def test_cummax_all_nan_column():\n    base_df = pd.DataFrame({\"A\": [1, 1, 1, 1, 2, 2, 2, 2], \"B\": [np.nan] * 8})\n\n    expected = pd.DataFrame({\"B\": [np.nan] * 8})\n    result = base_df.groupby(\"A\").cummax()\n    tm.assert_frame_equal(expected, result)\n    result = base_df.groupby(\"A\").B.apply(lambda x: x.cummax()).to_frame()\n    tm.assert_frame_equal(expected, result)",
        "begin_line": 828,
        "end_line": 835,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_is_monotonic_increasing#856",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_is_monotonic_increasing(in_vals, out_vals)",
        "snippet": "def test_is_monotonic_increasing(in_vals, out_vals):\n    # GH 17015\n    source_dict = {\n        \"A\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"],\n        \"B\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\"],\n        \"C\": in_vals,\n    }\n    df = pd.DataFrame(source_dict)\n    result = df.groupby(\"B\").C.is_monotonic_increasing\n    index = Index(list(\"abcd\"), name=\"B\")\n    expected = pd.Series(index=index, data=out_vals, name=\"C\")\n    tm.assert_series_equal(result, expected)\n\n    # Also check result equal to manually taking x.is_monotonic_increasing.\n    expected = df.groupby([\"B\"]).C.apply(lambda x: x.is_monotonic_increasing)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 856,
        "end_line": 871,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_is_monotonic_decreasing#892",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_is_monotonic_decreasing(in_vals, out_vals)",
        "snippet": "def test_is_monotonic_decreasing(in_vals, out_vals):\n    # GH 17015\n    source_dict = {\n        \"A\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"],\n        \"B\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\"],\n        \"C\": in_vals,\n    }\n\n    df = pd.DataFrame(source_dict)\n    result = df.groupby(\"B\").C.is_monotonic_decreasing\n    index = Index(list(\"abcd\"), name=\"B\")\n    expected = pd.Series(index=index, data=out_vals, name=\"C\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 892,
        "end_line": 904,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_apply_describe_bug#911",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_apply_describe_bug(mframe)",
        "snippet": "def test_apply_describe_bug(mframe):\n    grouped = mframe.groupby(level=\"first\")\n    grouped.describe()  # it works!",
        "begin_line": 911,
        "end_line": 913,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_series_describe_multikey#916",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_series_describe_multikey()",
        "snippet": "def test_series_describe_multikey():\n    ts = tm.makeTimeSeries()\n    grouped = ts.groupby([lambda x: x.year, lambda x: x.month])\n    result = grouped.describe()\n    tm.assert_series_equal(result[\"mean\"], grouped.mean(), check_names=False)\n    tm.assert_series_equal(result[\"std\"], grouped.std(), check_names=False)\n    tm.assert_series_equal(result[\"min\"], grouped.min(), check_names=False)",
        "begin_line": 916,
        "end_line": 922,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_series_describe_single#925",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_series_describe_single()",
        "snippet": "def test_series_describe_single():\n    ts = tm.makeTimeSeries()\n    grouped = ts.groupby(lambda x: x.month)\n    result = grouped.apply(lambda x: x.describe())\n    expected = grouped.describe().stack()\n    tm.assert_series_equal(result, expected)",
        "begin_line": 925,
        "end_line": 930,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_series_index_name#933",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_series_index_name(df)",
        "snippet": "def test_series_index_name(df):\n    grouped = df.loc[:, [\"C\"]].groupby(df[\"A\"])\n    result = grouped.agg(lambda x: x.mean())\n    assert result.index.name == \"A\"",
        "begin_line": 933,
        "end_line": 936,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_frame_describe_multikey#939",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_frame_describe_multikey(tsframe)",
        "snippet": "def test_frame_describe_multikey(tsframe):\n    grouped = tsframe.groupby([lambda x: x.year, lambda x: x.month])\n    result = grouped.describe()\n    desc_groups = []\n    for col in tsframe:\n        group = grouped[col].describe()\n        # GH 17464 - Remove duplicate MultiIndex levels\n        group_col = pd.MultiIndex(\n            levels=[[col], group.columns],\n            codes=[[0] * len(group.columns), range(len(group.columns))],\n        )\n        group = pd.DataFrame(group.values, columns=group_col, index=group.index)\n        desc_groups.append(group)\n    expected = pd.concat(desc_groups, axis=1)\n    tm.assert_frame_equal(result, expected)\n\n    groupedT = tsframe.groupby({\"A\": 0, \"B\": 0, \"C\": 1, \"D\": 1}, axis=1)\n    result = groupedT.describe()\n    expected = tsframe.describe().T\n    expected.index = pd.MultiIndex(\n        levels=[[0, 1], expected.index],\n        codes=[[0, 0, 1, 1], range(len(expected.index))],\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 939,
        "end_line": 962,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_frame_describe_tupleindex#965",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_frame_describe_tupleindex()",
        "snippet": "def test_frame_describe_tupleindex():\n\n    # GH 14848 - regression from 0.19.0 to 0.19.1\n    df1 = DataFrame(\n        {\n            \"x\": [1, 2, 3, 4, 5] * 3,\n            \"y\": [10, 20, 30, 40, 50] * 3,\n            \"z\": [100, 200, 300, 400, 500] * 3,\n        }\n    )\n    df1[\"k\"] = [(0, 0, 1), (0, 1, 0), (1, 0, 0)] * 5\n    df2 = df1.rename(columns={\"k\": \"key\"})\n    msg = \"Names should be list-like for a MultiIndex\"\n    with pytest.raises(ValueError, match=msg):\n        df1.groupby(\"k\").describe()\n    with pytest.raises(ValueError, match=msg):\n        df2.groupby(\"key\").describe()",
        "begin_line": 965,
        "end_line": 981,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_frame_describe_unstacked_format#984",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_frame_describe_unstacked_format()",
        "snippet": "def test_frame_describe_unstacked_format():\n    # GH 4792\n    prices = {\n        pd.Timestamp(\"2011-01-06 10:59:05\", tz=None): 24990,\n        pd.Timestamp(\"2011-01-06 12:43:33\", tz=None): 25499,\n        pd.Timestamp(\"2011-01-06 12:54:09\", tz=None): 25499,\n    }\n    volumes = {\n        pd.Timestamp(\"2011-01-06 10:59:05\", tz=None): 1500000000,\n        pd.Timestamp(\"2011-01-06 12:43:33\", tz=None): 5000000000,\n        pd.Timestamp(\"2011-01-06 12:54:09\", tz=None): 100000000,\n    }\n    df = pd.DataFrame({\"PRICE\": prices, \"VOLUME\": volumes})\n    result = df.groupby(\"PRICE\").VOLUME.describe()\n    data = [\n        df[df.PRICE == 24990].VOLUME.describe().values.tolist(),\n        df[df.PRICE == 25499].VOLUME.describe().values.tolist(),\n    ]\n    expected = pd.DataFrame(\n        data,\n        index=pd.Index([24990, 25499], name=\"PRICE\"),\n        columns=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 984,
        "end_line": 1007,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_series_groupby_nunique#1018",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_series_groupby_nunique(n, m, sort, dropna)",
        "snippet": "def test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "begin_line": 1018,
        "end_line": 1054,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.check_nunique#1019",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.check_nunique(df, keys, as_index=True)",
        "snippet": "    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)",
        "begin_line": 1019,
        "end_line": 1030,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nunique#1057",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nunique()",
        "snippet": "def test_nunique():\n    df = DataFrame({\"A\": list(\"abbacc\"), \"B\": list(\"abxacc\"), \"C\": list(\"abbacx\")})\n\n    expected = DataFrame({\"A\": [1] * 3, \"B\": [1, 2, 1], \"C\": [1, 1, 2]})\n    result = df.groupby(\"A\", as_index=False).nunique()\n    tm.assert_frame_equal(result, expected)\n\n    # as_index\n    expected.index = list(\"abc\")\n    expected.index.name = \"A\"\n    result = df.groupby(\"A\").nunique()\n    tm.assert_frame_equal(result, expected)\n\n    # with na\n    result = df.replace({\"x\": None}).groupby(\"A\").nunique(dropna=False)\n    tm.assert_frame_equal(result, expected)\n\n    # dropna\n    expected = DataFrame({\"A\": [1] * 3, \"B\": [1] * 3, \"C\": [1] * 3}, index=list(\"abc\"))\n    expected.index.name = \"A\"\n    result = df.replace({\"x\": None}).groupby(\"A\").nunique()\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1057,
        "end_line": 1078,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nunique_with_object#1081",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nunique_with_object()",
        "snippet": "def test_nunique_with_object():\n    # GH 11077\n    data = pd.DataFrame(\n        [\n            [100, 1, \"Alice\"],\n            [200, 2, \"Bob\"],\n            [300, 3, \"Charlie\"],\n            [-400, 4, \"Dan\"],\n            [500, 5, \"Edith\"],\n        ],\n        columns=[\"amount\", \"id\", \"name\"],\n    )\n\n    result = data.groupby([\"id\", \"amount\"])[\"name\"].nunique()\n    index = MultiIndex.from_arrays([data.id, data.amount])\n    expected = pd.Series([1] * 5, name=\"name\", index=index)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1081,
        "end_line": 1097,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nunique_with_empty_series#1100",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nunique_with_empty_series()",
        "snippet": "def test_nunique_with_empty_series():\n    # GH 12553\n    data = pd.Series(name=\"name\", dtype=object)\n    result = data.groupby(level=0).nunique()\n    expected = pd.Series(name=\"name\", dtype=\"int64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1100,
        "end_line": 1105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nunique_with_timegrouper#1108",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nunique_with_timegrouper()",
        "snippet": "def test_nunique_with_timegrouper():\n    # GH 13453\n    test = pd.DataFrame(\n        {\n            \"time\": [\n                Timestamp(\"2016-06-28 09:35:35\"),\n                Timestamp(\"2016-06-28 16:09:30\"),\n                Timestamp(\"2016-06-28 16:46:28\"),\n            ],\n            \"data\": [\"1\", \"2\", \"3\"],\n        }\n    ).set_index(\"time\")\n    result = test.groupby(pd.Grouper(freq=\"h\"))[\"data\"].nunique()\n    expected = test.groupby(pd.Grouper(freq=\"h\"))[\"data\"].apply(pd.Series.nunique)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1108,
        "end_line": 1122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nunique_with_NaT#1154",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nunique_with_NaT(key, data, dropna, expected)",
        "snippet": "def test_nunique_with_NaT(key, data, dropna, expected):\n    # GH 27951\n    df = pd.DataFrame({\"key\": key, \"data\": data})\n    result = df.groupby([\"key\"])[\"data\"].nunique(dropna=dropna)\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1154,
        "end_line": 1158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_nunique_preserves_column_level_names#1161",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_nunique_preserves_column_level_names()",
        "snippet": "def test_nunique_preserves_column_level_names():\n    # GH 23222\n    test = pd.DataFrame([1, 2, 2], columns=pd.Index([\"A\"], name=\"level_0\"))\n    result = test.groupby([0, 0, 0]).nunique()\n    expected = pd.DataFrame([2], columns=test.columns)\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1161,
        "end_line": 1166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_timedelta_cython_count#1173",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_timedelta_cython_count()",
        "snippet": "def test_groupby_timedelta_cython_count():\n    df = DataFrame(\n        {\"g\": list(\"ab\" * 2), \"delt\": np.arange(4).astype(\"timedelta64[ns]\")}\n    )\n    expected = Series([2, 2], index=pd.Index([\"a\", \"b\"], name=\"g\"), name=\"delt\")\n    result = df.groupby(\"g\").delt.count()\n    tm.assert_series_equal(expected, result)",
        "begin_line": 1173,
        "end_line": 1179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_count#1182",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_count()",
        "snippet": "def test_count():\n    n = 1 << 15\n    dr = date_range(\"2015-08-30\", periods=n // 10, freq=\"T\")\n\n    df = DataFrame(\n        {\n            \"1st\": np.random.choice(list(ascii_lowercase), n),\n            \"2nd\": np.random.randint(0, 5, n),\n            \"3rd\": np.random.randn(n).round(3),\n            \"4th\": np.random.randint(-10, 10, n),\n            \"5th\": np.random.choice(dr, n),\n            \"6th\": np.random.randn(n).round(3),\n            \"7th\": np.random.randn(n).round(3),\n            \"8th\": np.random.choice(dr, n) - np.random.choice(dr, 1),\n            \"9th\": np.random.choice(list(ascii_lowercase), n),\n        }\n    )\n\n    for col in df.columns.drop([\"1st\", \"2nd\", \"4th\"]):\n        df.loc[np.random.choice(n, n // 10), col] = np.nan\n\n    df[\"9th\"] = df[\"9th\"].astype(\"category\")\n\n    for key in [\"1st\", \"2nd\", [\"1st\", \"2nd\"]]:\n        left = df.groupby(key).count()\n        right = df.groupby(key).apply(DataFrame.count).drop(key, axis=1)\n        tm.assert_frame_equal(left, right)",
        "begin_line": 1182,
        "end_line": 1208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_count_non_nulls#1211",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_count_non_nulls()",
        "snippet": "def test_count_non_nulls():\n    # GH#5610\n    # count counts non-nulls\n    df = pd.DataFrame(\n        [[1, 2, \"foo\"], [1, np.nan, \"bar\"], [3, np.nan, np.nan]],\n        columns=[\"A\", \"B\", \"C\"],\n    )\n\n    count_as = df.groupby(\"A\").count()\n    count_not_as = df.groupby(\"A\", as_index=False).count()\n\n    expected = DataFrame([[1, 2], [0, 0]], columns=[\"B\", \"C\"], index=[1, 3])\n    expected.index.name = \"A\"\n    tm.assert_frame_equal(count_not_as, expected.reset_index())\n    tm.assert_frame_equal(count_as, expected)\n\n    count_B = df.groupby(\"A\")[\"B\"].count()\n    tm.assert_series_equal(count_B, expected[\"B\"])",
        "begin_line": 1211,
        "end_line": 1228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_count_object#1231",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_count_object()",
        "snippet": "def test_count_object():\n    df = pd.DataFrame({\"a\": [\"a\"] * 3 + [\"b\"] * 3, \"c\": [2] * 3 + [3] * 3})\n    result = df.groupby(\"c\").a.count()\n    expected = pd.Series([3, 3], index=pd.Index([2, 3], name=\"c\"), name=\"a\")\n    tm.assert_series_equal(result, expected)\n\n    df = pd.DataFrame({\"a\": [\"a\", np.nan, np.nan] + [\"b\"] * 3, \"c\": [2] * 3 + [3] * 3})\n    result = df.groupby(\"c\").a.count()\n    expected = pd.Series([1, 3], index=pd.Index([2, 3], name=\"c\"), name=\"a\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1231,
        "end_line": 1240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_count_cross_type#1243",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_count_cross_type()",
        "snippet": "def test_count_cross_type():\n    # GH8169\n    vals = np.hstack(\n        (np.random.randint(0, 5, (100, 2)), np.random.randint(0, 2, (100, 2)))\n    )\n\n    df = pd.DataFrame(vals, columns=[\"a\", \"b\", \"c\", \"d\"])\n    df[df == 2] = np.nan\n    expected = df.groupby([\"c\", \"d\"]).count()\n\n    for t in [\"float32\", \"object\"]:\n        df[\"a\"] = df[\"a\"].astype(t)\n        df[\"b\"] = df[\"b\"].astype(t)\n        result = df.groupby([\"c\", \"d\"]).count()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 1243,
        "end_line": 1257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_lower_int_prec_count#1260",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_lower_int_prec_count()",
        "snippet": "def test_lower_int_prec_count():\n    df = DataFrame(\n        {\n            \"a\": np.array([0, 1, 2, 100], np.int8),\n            \"b\": np.array([1, 2, 3, 6], np.uint32),\n            \"c\": np.array([4, 5, 6, 8], np.int16),\n            \"grp\": list(\"ab\" * 2),\n        }\n    )\n    result = df.groupby(\"grp\").count()\n    expected = DataFrame(\n        {\"a\": [2, 2], \"b\": [2, 2], \"c\": [2, 2]}, index=pd.Index(list(\"ab\"), name=\"grp\")\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1260,
        "end_line": 1273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_count_uses_size_on_exception#1276",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_count_uses_size_on_exception()",
        "snippet": "def test_count_uses_size_on_exception():\n    class RaisingObjectException(Exception):\n        pass\n\n    class RaisingObject:\n        def __init__(self, msg=\"I will raise inside Cython\"):\n            super().__init__()\n            self.msg = msg\n\n        def __eq__(self, other):\n            # gets called in Cython to check that raising calls the method\n            raise RaisingObjectException(self.msg)\n\n    df = DataFrame({\"a\": [RaisingObject() for _ in range(4)], \"grp\": list(\"ab\" * 2)})\n    result = df.groupby(\"grp\").count()\n    expected = DataFrame({\"a\": [2, 2]}, index=pd.Index(list(\"ab\"), name=\"grp\"))\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1276,
        "end_line": 1292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.RaisingObjectException.test_count_uses_size_on_exception#1276",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function.RaisingObjectException",
        "signature": "pandas.tests.groupby.test_function.RaisingObjectException.test_count_uses_size_on_exception()",
        "snippet": "def test_count_uses_size_on_exception():\n    class RaisingObjectException(Exception):\n        pass\n\n    class RaisingObject:\n        def __init__(self, msg=\"I will raise inside Cython\"):\n            super().__init__()\n            self.msg = msg\n\n        def __eq__(self, other):\n            # gets called in Cython to check that raising calls the method\n            raise RaisingObjectException(self.msg)\n\n    df = DataFrame({\"a\": [RaisingObject() for _ in range(4)], \"grp\": list(\"ab\" * 2)})\n    result = df.groupby(\"grp\").count()\n    expected = DataFrame({\"a\": [2, 2]}, index=pd.Index(list(\"ab\"), name=\"grp\"))\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1276,
        "end_line": 1292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.RaisingObject.test_count_uses_size_on_exception#1276",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function.RaisingObject",
        "signature": "pandas.tests.groupby.test_function.RaisingObject.test_count_uses_size_on_exception()",
        "snippet": "def test_count_uses_size_on_exception():\n    class RaisingObjectException(Exception):\n        pass\n\n    class RaisingObject:\n        def __init__(self, msg=\"I will raise inside Cython\"):\n            super().__init__()\n            self.msg = msg\n\n        def __eq__(self, other):\n            # gets called in Cython to check that raising calls the method\n            raise RaisingObjectException(self.msg)\n\n    df = DataFrame({\"a\": [RaisingObject() for _ in range(4)], \"grp\": list(\"ab\" * 2)})\n    result = df.groupby(\"grp\").count()\n    expected = DataFrame({\"a\": [2, 2]}, index=pd.Index(list(\"ab\"), name=\"grp\"))\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1276,
        "end_line": 1292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.RaisingObject.__init__#1281",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function.RaisingObject",
        "signature": "pandas.tests.groupby.test_function.RaisingObject.__init__(self, msg='I will raise inside Cython')",
        "snippet": "        def __init__(self, msg=\"I will raise inside Cython\"):\n            super().__init__()\n            self.msg = msg",
        "begin_line": 1281,
        "end_line": 1283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.RaisingObject.__eq__#1285",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function.RaisingObject",
        "signature": "pandas.tests.groupby.test_function.RaisingObject.__eq__(self, other)",
        "snippet": "        def __eq__(self, other):\n            # gets called in Cython to check that raising calls the method\n            raise RaisingObjectException(self.msg)",
        "begin_line": 1285,
        "end_line": 1287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_size#1299",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_size(df)",
        "snippet": "def test_size(df):\n    grouped = df.groupby([\"A\", \"B\"])\n    result = grouped.size()\n    for key, group in grouped:\n        assert result[key] == len(group)\n\n    grouped = df.groupby(\"A\")\n    result = grouped.size()\n    for key, group in grouped:\n        assert result[key] == len(group)\n\n    grouped = df.groupby(\"B\")\n    result = grouped.size()\n    for key, group in grouped:\n        assert result[key] == len(group)\n\n    df = DataFrame(np.random.choice(20, (1000, 3)), columns=list(\"abc\"))\n    for sort, key in product((False, True), (\"a\", \"b\", [\"a\", \"b\"])):\n        left = df.groupby(key, sort=sort).size()\n        right = df.groupby(key, sort=sort)[\"c\"].apply(lambda a: a.shape[0])\n        tm.assert_series_equal(left, right, check_names=False)\n\n    # GH11699\n    df = DataFrame(columns=[\"A\", \"B\"])\n    out = Series(dtype=\"int64\", index=Index([], name=\"A\"))\n    tm.assert_series_equal(df.groupby(\"A\").size(), out)",
        "begin_line": 1299,
        "end_line": 1324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_size_groupby_all_null#1327",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_size_groupby_all_null()",
        "snippet": "def test_size_groupby_all_null():\n    # GH23050\n    # Assert no 'Value Error : Length of passed values is 2, index implies 0'\n    df = DataFrame({\"A\": [None, None]})  # all-null groups\n    result = df.groupby(\"A\").size()\n    expected = Series(dtype=\"int64\", index=Index([], name=\"A\"))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1327,
        "end_line": 1333,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile#1363",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile(interpolation, a_vals, b_vals, q)",
        "snippet": "def test_quantile(interpolation, a_vals, b_vals, q):\n    if interpolation == \"nearest\" and q == 0.5 and b_vals == [4, 3, 2, 1]:\n        pytest.skip(\n            \"Unclear numpy expectation for nearest result with equidistant data\"\n        )\n\n    a_expected = pd.Series(a_vals).quantile(q, interpolation=interpolation)\n    b_expected = pd.Series(b_vals).quantile(q, interpolation=interpolation)\n\n    df = DataFrame(\n        {\"key\": [\"a\"] * len(a_vals) + [\"b\"] * len(b_vals), \"val\": a_vals + b_vals}\n    )\n\n    expected = DataFrame(\n        [a_expected, b_expected], columns=[\"val\"], index=Index([\"a\", \"b\"], name=\"key\")\n    )\n    result = df.groupby(\"key\").quantile(q, interpolation=interpolation)\n\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1363,
        "end_line": 1381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_array#1384",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_array()",
        "snippet": "def test_quantile_array():\n    # https://github.com/pandas-dev/pandas/issues/27526\n    df = pd.DataFrame({\"A\": [0, 1, 2, 3, 4]})\n    result = df.groupby([0, 0, 1, 1, 1]).quantile([0.25])\n\n    index = pd.MultiIndex.from_product([[0, 1], [0.25]])\n    expected = pd.DataFrame({\"A\": [0.25, 2.50]}, index=index)\n    tm.assert_frame_equal(result, expected)\n\n    df = pd.DataFrame({\"A\": [0, 1, 2, 3], \"B\": [4, 5, 6, 7]})\n    index = pd.MultiIndex.from_product([[0, 1], [0.25, 0.75]])\n\n    result = df.groupby([0, 0, 1, 1]).quantile([0.25, 0.75])\n    expected = pd.DataFrame(\n        {\"A\": [0.25, 0.75, 2.25, 2.75], \"B\": [4.25, 4.75, 6.25, 6.75]}, index=index\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1384,
        "end_line": 1400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_array2#1403",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_array2()",
        "snippet": "def test_quantile_array2():\n    # https://github.com/pandas-dev/pandas/pull/28085#issuecomment-524066959\n    df = pd.DataFrame(\n        np.random.RandomState(0).randint(0, 5, size=(10, 3)), columns=list(\"ABC\")\n    )\n    result = df.groupby(\"A\").quantile([0.3, 0.7])\n    expected = pd.DataFrame(\n        {\n            \"B\": [0.9, 2.1, 2.2, 3.4, 1.6, 2.4, 2.3, 2.7, 0.0, 0.0],\n            \"C\": [1.2, 2.8, 1.8, 3.0, 0.0, 0.0, 1.9, 3.1, 3.0, 3.0],\n        },\n        index=pd.MultiIndex.from_product(\n            [[0, 1, 2, 3, 4], [0.3, 0.7]], names=[\"A\", None]\n        ),\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1403,
        "end_line": 1418,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_array_no_sort#1421",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_array_no_sort()",
        "snippet": "def test_quantile_array_no_sort():\n    df = pd.DataFrame({\"A\": [0, 1, 2], \"B\": [3, 4, 5]})\n    result = df.groupby([1, 0, 1], sort=False).quantile([0.25, 0.5, 0.75])\n    expected = pd.DataFrame(\n        {\"A\": [0.5, 1.0, 1.5, 1.0, 1.0, 1.0], \"B\": [3.5, 4.0, 4.5, 4.0, 4.0, 4.0]},\n        index=pd.MultiIndex.from_product([[1, 0], [0.25, 0.5, 0.75]]),\n    )\n    tm.assert_frame_equal(result, expected)\n\n    result = df.groupby([1, 0, 1], sort=False).quantile([0.75, 0.25])\n    expected = pd.DataFrame(\n        {\"A\": [1.5, 0.5, 1.0, 1.0], \"B\": [4.5, 3.5, 4.0, 4.0]},\n        index=pd.MultiIndex.from_product([[1, 0], [0.75, 0.25]]),\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1421,
        "end_line": 1435,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_array_multiple_levels#1438",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_array_multiple_levels()",
        "snippet": "def test_quantile_array_multiple_levels():\n    df = pd.DataFrame(\n        {\"A\": [0, 1, 2], \"B\": [3, 4, 5], \"c\": [\"a\", \"a\", \"a\"], \"d\": [\"a\", \"a\", \"b\"]}\n    )\n    result = df.groupby([\"c\", \"d\"]).quantile([0.25, 0.75])\n    index = pd.MultiIndex.from_tuples(\n        [(\"a\", \"a\", 0.25), (\"a\", \"a\", 0.75), (\"a\", \"b\", 0.25), (\"a\", \"b\", 0.75)],\n        names=[\"c\", \"d\", None],\n    )\n    expected = pd.DataFrame(\n        {\"A\": [0.25, 0.75, 2.0, 2.0], \"B\": [3.25, 3.75, 5.0, 5.0]}, index=index\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1438,
        "end_line": 1450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_quantile_with_arraylike_q_and_int_columns#1456",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_quantile_with_arraylike_q_and_int_columns(frame_size, groupby, q)",
        "snippet": "def test_groupby_quantile_with_arraylike_q_and_int_columns(frame_size, groupby, q):\n    # GH30289\n    nrow, ncol = frame_size\n    df = pd.DataFrame(\n        np.array([ncol * [_ % 4] for _ in range(nrow)]), columns=range(ncol)\n    )\n\n    idx_levels = [list(range(min(nrow, 4)))] * len(groupby) + [q]\n    idx_codes = [[x for x in range(min(nrow, 4)) for _ in q]] * len(groupby) + [\n        list(range(len(q))) * min(nrow, 4)\n    ]\n    expected_index = pd.MultiIndex(\n        levels=idx_levels, codes=idx_codes, names=groupby + [None]\n    )\n    expected_values = [\n        [float(x)] * (ncol - len(groupby)) for x in range(min(nrow, 4)) for _ in q\n    ]\n    expected_columns = [x for x in range(ncol) if x not in groupby]\n    expected = pd.DataFrame(\n        expected_values, index=expected_index, columns=expected_columns\n    )\n    result = df.groupby(groupby).quantile(q)\n\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1456,
        "end_line": 1479,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_raises#1482",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_raises()",
        "snippet": "def test_quantile_raises():\n    df = pd.DataFrame(\n        [[\"foo\", \"a\"], [\"foo\", \"b\"], [\"foo\", \"c\"]], columns=[\"key\", \"val\"]\n    )\n\n    with pytest.raises(TypeError, match=\"cannot be performed against 'object' dtypes\"):\n        df.groupby(\"key\").quantile()",
        "begin_line": 1482,
        "end_line": 1488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_out_of_bounds_q_raises#1491",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_out_of_bounds_q_raises()",
        "snippet": "def test_quantile_out_of_bounds_q_raises():\n    # https://github.com/pandas-dev/pandas/issues/27470\n    df = pd.DataFrame(dict(a=[0, 0, 0, 1, 1, 1], b=range(6)))\n    g = df.groupby([0, 0, 0, 1, 1, 1])\n    with pytest.raises(ValueError, match=\"Got '50.0' instead\"):\n        g.quantile(50)\n\n    with pytest.raises(ValueError, match=\"Got '-1.0' instead\"):\n        g.quantile(-1)",
        "begin_line": 1491,
        "end_line": 1499,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_missing_group_values_no_segfaults#1502",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_missing_group_values_no_segfaults()",
        "snippet": "def test_quantile_missing_group_values_no_segfaults():\n    # GH 28662\n    data = np.array([1.0, np.nan, 1.0])\n    df = pd.DataFrame(dict(key=data, val=range(3)))\n\n    # Random segfaults; would have been guaranteed in loop\n    grp = df.groupby(\"key\")\n    for _ in range(100):\n        grp.quantile()",
        "begin_line": 1502,
        "end_line": 1510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_quantile_missing_group_values_correct_results#1513",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_quantile_missing_group_values_correct_results()",
        "snippet": "def test_quantile_missing_group_values_correct_results():\n    # GH 28662\n    data = np.array([1.0, np.nan, 3.0, np.nan])\n    df = pd.DataFrame(dict(key=data, val=range(4)))\n\n    result = df.groupby(\"key\").quantile()\n    expected = pd.DataFrame(\n        [1.0, 3.0], index=pd.Index([1.0, 3.0], name=\"key\"), columns=[\"val\"]\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 1513,
        "end_line": 1522,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_pipe#1529",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_pipe()",
        "snippet": "def test_pipe():\n    # Test the pipe method of DataFrameGroupBy.\n    # Issue #17871\n\n    random_state = np.random.RandomState(1234567890)\n\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n            \"B\": random_state.randn(8),\n            \"C\": random_state.randn(8),\n        }\n    )\n\n    def f(dfgb):\n        return dfgb.B.max() - dfgb.C.min().min()\n\n    def square(srs):\n        return srs ** 2\n\n    # Note that the transformations are\n    # GroupBy -> Series\n    # Series -> Series\n    # This then chains the GroupBy.pipe and the\n    # NDFrame.pipe methods\n    result = df.groupby(\"A\").pipe(f).pipe(square)\n\n    index = Index([\"bar\", \"foo\"], dtype=\"object\", name=\"A\")\n    expected = pd.Series([8.99110003361, 8.17516964785], name=\"B\", index=index)\n\n    tm.assert_series_equal(expected, result)",
        "begin_line": 1529,
        "end_line": 1559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.f#1543",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.f(dfgb)",
        "snippet": "    def f(dfgb):\n        return dfgb.B.max() - dfgb.C.min().min()",
        "begin_line": 1543,
        "end_line": 1544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.square#1546",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.square(srs)",
        "snippet": "    def square(srs):\n        return srs ** 2",
        "begin_line": 1546,
        "end_line": 1547,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_pipe_args#1562",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_pipe_args()",
        "snippet": "def test_pipe_args():\n    # Test passing args to the pipe method of DataFrameGroupBy.\n    # Issue #17871\n\n    df = pd.DataFrame(\n        {\n            \"group\": [\"A\", \"A\", \"B\", \"B\", \"C\"],\n            \"x\": [1.0, 2.0, 3.0, 2.0, 5.0],\n            \"y\": [10.0, 100.0, 1000.0, -100.0, -1000.0],\n        }\n    )\n\n    def f(dfgb, arg1):\n        return dfgb.filter(lambda grp: grp.y.mean() > arg1, dropna=False).groupby(\n            dfgb.grouper\n        )\n\n    def g(dfgb, arg2):\n        return dfgb.sum() / dfgb.sum().sum() + arg2\n\n    def h(df, arg3):\n        return df.x + df.y - arg3\n\n    result = df.groupby(\"group\").pipe(f, 0).pipe(g, 10).pipe(h, 100)\n\n    # Assert the results here\n    index = pd.Index([\"A\", \"B\", \"C\"], name=\"group\")\n    expected = pd.Series([-79.5160891089, -78.4839108911, -80], index=index)\n\n    tm.assert_series_equal(expected, result)\n\n    # test SeriesGroupby.pipe\n    ser = pd.Series([1, 1, 2, 2, 3, 3])\n    result = ser.groupby(ser).pipe(lambda grp: grp.sum() * grp.count())\n\n    expected = pd.Series([4, 8, 12], index=pd.Int64Index([1, 2, 3]))\n\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1562,
        "end_line": 1599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.f#1574",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.f(dfgb, arg1)",
        "snippet": "    def f(dfgb, arg1):\n        return dfgb.filter(lambda grp: grp.y.mean() > arg1, dropna=False).groupby(\n            dfgb.grouper\n        )",
        "begin_line": 1574,
        "end_line": 1577,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.g#1579",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.g(dfgb, arg2)",
        "snippet": "    def g(dfgb, arg2):\n        return dfgb.sum() / dfgb.sum().sum() + arg2",
        "begin_line": 1579,
        "end_line": 1580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.h#1582",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.h(df, arg3)",
        "snippet": "    def h(df, arg3):\n        return df.x + df.y - arg3",
        "begin_line": 1582,
        "end_line": 1583,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.test_function.test_groupby_mean_no_overflow#1602",
        "src_path": "pandas/tests/groupby/test_function.py",
        "class_name": "pandas.tests.groupby.test_function",
        "signature": "pandas.tests.groupby.test_function.test_groupby_mean_no_overflow()",
        "snippet": "def test_groupby_mean_no_overflow():\n    # Regression test for (#22487)\n    df = pd.DataFrame(\n        {\n            \"user\": [\"A\", \"A\", \"A\", \"A\", \"A\"],\n            \"connections\": [4970, 4749, 4719, 4704, 18446744073699999744],\n        }\n    )\n    assert df.groupby(\"user\")[\"connections\"].mean()[\"A\"] == 3689348814740003840",
        "begin_line": 1602,
        "end_line": 1610,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.mframe#10",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.mframe()",
        "snippet": "def mframe():\n    index = MultiIndex(\n        levels=[[\"foo\", \"bar\", \"baz\", \"qux\"], [\"one\", \"two\", \"three\"]],\n        codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],\n        names=[\"first\", \"second\"],\n    )\n    return DataFrame(np.random.randn(10, 3), index=index, columns=[\"A\", \"B\", \"C\"])",
        "begin_line": 10,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.df#20",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.df()",
        "snippet": "def df():\n    return DataFrame(\n        {\n            \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n            \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n            \"C\": np.random.randn(8),\n            \"D\": np.random.randn(8),\n        }\n    )",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.ts#32",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.ts()",
        "snippet": "def ts():\n    return tm.makeTimeSeries()",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.tsd#37",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.tsd()",
        "snippet": "def tsd():\n    return tm.getTimeSeriesData()",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.tsframe#42",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.tsframe(tsd)",
        "snippet": "def tsframe(tsd):\n    return DataFrame(tsd)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.df_mixed_floats#47",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.df_mixed_floats()",
        "snippet": "def df_mixed_floats():\n    return DataFrame(\n        {\n            \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n            \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n            \"C\": np.random.randn(8),\n            \"D\": np.array(np.random.randn(8), dtype=\"float32\"),\n        }\n    )",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.three_group#59",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.three_group()",
        "snippet": "def three_group():\n    return DataFrame(\n        {\n            \"A\": [\n                \"foo\",\n                \"foo\",\n                \"foo\",\n                \"foo\",\n                \"bar\",\n                \"bar\",\n                \"bar\",\n                \"bar\",\n                \"foo\",\n                \"foo\",\n                \"foo\",\n            ],\n            \"B\": [\n                \"one\",\n                \"one\",\n                \"one\",\n                \"two\",\n                \"one\",\n                \"one\",\n                \"one\",\n                \"two\",\n                \"two\",\n                \"two\",\n                \"one\",\n            ],\n            \"C\": [\n                \"dull\",\n                \"dull\",\n                \"shiny\",\n                \"dull\",\n                \"dull\",\n                \"shiny\",\n                \"shiny\",\n                \"dull\",\n                \"shiny\",\n                \"shiny\",\n                \"shiny\",\n            ],\n            \"D\": np.random.randn(11),\n            \"E\": np.random.randn(11),\n            \"F\": np.random.randn(11),\n        }\n    )",
        "begin_line": 59,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.reduction_func#109",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.reduction_func(request)",
        "snippet": "def reduction_func(request):\n    \"\"\"\n    yields the string names of all groupby reduction functions, one at a time.\n    \"\"\"\n    return request.param",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.transformation_func#117",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.transformation_func(request)",
        "snippet": "def transformation_func(request):\n    \"\"\"yields the string names of all groupby transformation functions.\"\"\"\n    return request.param",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.groupby.conftest.groupby_func#123",
        "src_path": "pandas/tests/groupby/conftest.py",
        "class_name": "pandas.tests.groupby.conftest",
        "signature": "pandas.tests.groupby.conftest.groupby_func(request)",
        "snippet": "def groupby_func(request):\n    \"\"\"yields both aggregation and transformation functions.\"\"\"\n    return request.param",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#24",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__repr__#27",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        return f\"DecimalDtype(context={self.context})\"",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#31",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DecimalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype._is_numeric#42",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self) -> bool:\n        return True",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#49",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#65",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence_of_strings#73",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence_of_strings(cls, strings, dtype=None, copy=False)",
        "snippet": "    def _from_sequence_of_strings(cls, strings, dtype=None, copy=False):\n        return cls._from_sequence([decimal.Decimal(x) for x in strings], dtype, copy)",
        "begin_line": 73,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_factorized#77",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        return cls(values)",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.to_numpy#82",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.to_numpy(self, dtype=None, copy=False, na_value=no_default, decimals=None)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False, na_value=no_default, decimals=None):\n        result = np.asarray(self, dtype=dtype)\n        if decimals is not None:\n            result = np.asarray([round(x, decimals) for x in result])\n        return result",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__array_ufunc__#88",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
        "snippet": "    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n        #\n        if not all(\n            isinstance(t, self._HANDLED_TYPES + (DecimalArray,)) for t in inputs\n        ):\n            return NotImplemented\n\n        inputs = tuple(x._data if isinstance(x, DecimalArray) else x for x in inputs)\n        result = getattr(ufunc, method)(*inputs, **kwargs)\n\n        def reconstruct(x):\n            if isinstance(x, (decimal.Decimal, numbers.Number)):\n                return x\n            else:\n                return DecimalArray._from_sequence(x)\n\n        if isinstance(result, tuple):\n            return tuple(reconstruct(x) for x in result)\n        else:\n            return reconstruct(result)",
        "begin_line": 88,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#109",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            item = pd.api.indexers.check_array_indexer(self, item)\n            return type(self)(self._data[item])",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.take#117",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.take(self, indexer, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indexer, allow_fill=False, fill_value=None):\n        from pandas.api.extensions import take\n\n        data = self._data\n        if allow_fill and fill_value is None:\n            fill_value = self.dtype.na_value\n\n        result = take(data, indexer, fill_value=fill_value, allow_fill=allow_fill)\n        return self._from_sequence(result)",
        "begin_line": 117,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.copy#127",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.copy(self)",
        "snippet": "    def copy(self):\n        return type(self)(self._data.copy())",
        "begin_line": 127,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#130",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__setitem__#135",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if pd.api.types.is_list_like(value):\n            if pd.api.types.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n            value = [decimal.Decimal(v) for v in value]\n        else:\n            value = decimal.Decimal(value)\n\n        key = check_array_indexer(self, key)\n        self._data[key] = value",
        "begin_line": 135,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#146",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 146,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.nbytes#150",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.nbytes(self)",
        "snippet": "    def nbytes(self) -> int:\n        n = len(self)\n        if n:\n            return n * sys.getsizeof(self[0])\n        return 0",
        "begin_line": 150,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#156",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._na_value#160",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._na_value(self)",
        "snippet": "    def _na_value(self):\n        return decimal.Decimal(\"NaN\")",
        "begin_line": 160,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._formatter#163",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._formatter(self, boxed=False)",
        "snippet": "    def _formatter(self, boxed=False):\n        if boxed:\n            return \"Decimal: {0}\".format\n        return repr",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._concat_same_type#169",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._concat_same_type(cls, to_concat)",
        "snippet": "    def _concat_same_type(cls, to_concat):\n        return cls(np.concatenate([x._data for x in to_concat]))",
        "begin_line": 169,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._reduce#172",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._reduce(self, name, skipna=True, **kwargs)",
        "snippet": "    def _reduce(self, name, skipna=True, **kwargs):\n\n        if skipna:\n            # If we don't have any NAs, we can ignore skipna\n            if self.isna().any():\n                other = self[~self.isna()]\n                return other._reduce(name, **kwargs)\n\n        if name == \"sum\" and len(self) == 0:\n            # GH#29630 avoid returning int 0 or np.bool_(False) on old numpy\n            return decimal.Decimal(0)\n\n        try:\n            op = getattr(self.data, name)\n        except AttributeError:\n            raise NotImplementedError(f\"decimal does not support the {name} operation\")\n        return op(axis=0)",
        "begin_line": 172,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.to_decimal#191",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.to_decimal(values, context=None)",
        "snippet": "def to_decimal(values, context=None):\n    return DecimalArray([decimal.Decimal(x) for x in values], context=context)",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.make_data#195",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.make_data()",
        "snippet": "def make_data():\n    return [decimal.Decimal(random.random()) for _ in range(100)]",
        "begin_line": 195,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    }
]