coverage run -m pytest pandas/tests/groupby/test_function.py::test_series_groupby_nunique
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 48 items

pandas/tests/groupby/test_function.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 70%]
FFFFFFFFFFFFFF                                                           [100%]

=================================== FAILURES ===================================
________________ test_series_groupby_nunique[False-False-10-n0] ________________

n = 100, m = 10, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [3.0, 5.0, 5.0, 8.0, 3.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 3.0, 0.0, 5.0, 0.0, 4.0, 4.0, 4.0, 8.0, 2.0, 6.0, 6.0, 0.0, 8.0, 8.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 6.0, 4.0, 5.0, 6.0, 3.0, 3.0, 3.0, 8.0, 5.0, 0.0, 7.0, 2.0, 5.0, 2.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 1.0, 9.0, 8.0, 6.0, 1.0, 9.0, 2.0, 1.0, 1.0, 6.0, 9.0, 2.0, 8.0, 2.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 8.0, 6.0, 6.0, 6.0, 1.0, 6.0, 7.0, 4.0, 3.0, 5.0, 6.0, 1.0, 2.0, 7.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 3.0, 2.0, 8.0, 4.0, 1.0, 4.0, 9.0, 2.0, 7.0, 2.0, 2.0, 8.0, 2.0]
E   [right]: [3.0, 5.0, 5.0, 8.0, 3.0, 1.0, 8.0, nan, nan, nan, 2.0, 3.0, 0.0, 5.0, 0.0, 4.0, 4.0, 4.0, 8.0, 2.0, 6.0, 6.0, 0.0, 8.0, 8.0, 2.0, nan, nan, nan, 0.0, 6.0, 4.0, 5.0, 6.0, 3.0, 3.0, 3.0, 8.0, 5.0, 0.0, 7.0, 2.0, 5.0, 2.0, 8.0, nan, nan, nan, 1.0, 1.0, 9.0, 8.0, 6.0, 1.0, 9.0, 2.0, 1.0, 1.0, 6.0, 9.0, 2.0, 8.0, 2.0, 3.0, nan, nan, nan, 6.0, 8.0, 6.0, 6.0, 6.0, 1.0, 6.0, 7.0, 4.0, 3.0, 5.0, 6.0, 1.0, 2.0, 7.0, 7.0, nan, nan, nan, 1.0, 3.0, 2.0, 8.0, 4.0, 1.0, 4.0, 9.0, 2.0, 7.0, 2.0, 2.0, 8.0, 2.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-False-10-n1] ________________

n = 1000, m = 10, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [0.0, 7.0, 6.0, 5.0, 9.0, 8.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 2.0, 5.0, 5.0, 3.0, 9.0, 3.0, 2.0, 6.0, 7.0, 7.0, 4.0, 2.0, 5.0, 7.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 2.0, 4.0, 3.0, 3.0, 2.0, 5.0, 5.0, 6.0, 8.0, 3.0, 8.0, 4.0, 1.0, 9.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 9.0, 5.0, 3.0, 3.0, 4.0, 0.0, 0.0, 7.0, 5.0, 7.0, 4.0, 3.0, 7.0, 6.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 9.0, 6.0, 9.0, 7.0, 7.0, 2.0, 5.0, 6.0, 4.0, 3.0, 2.0, 0.0, 4.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 9.0, 5.0, 3.0, 1.0, 7.0, 7.0, 7.0, 6.0, 9.0, 9.0, 3.0, 7.0, 1.0, ...]
E   [right]: [0.0, 7.0, 6.0, 5.0, 9.0, 8.0, 3.0, nan, nan, nan, 2.0, 2.0, 5.0, 5.0, 3.0, 9.0, 3.0, 2.0, 6.0, 7.0, 7.0, 4.0, 2.0, 5.0, 7.0, 3.0, nan, nan, nan, 8.0, 2.0, 4.0, 3.0, 3.0, 2.0, 5.0, 5.0, 6.0, 8.0, 3.0, 8.0, 4.0, 1.0, 9.0, 1.0, nan, nan, nan, 8.0, 9.0, 5.0, 3.0, 3.0, 4.0, 0.0, 0.0, 7.0, 5.0, 7.0, 4.0, 3.0, 7.0, 6.0, 1.0, nan, nan, nan, 7.0, 9.0, 6.0, 9.0, 7.0, 7.0, 2.0, 5.0, 6.0, 4.0, 3.0, 2.0, 0.0, 4.0, 9.0, 2.0, nan, nan, nan, 7.0, 9.0, 5.0, 3.0, 1.0, 7.0, 7.0, 7.0, 6.0, 9.0, 9.0, 3.0, 7.0, 1.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-False-10-n2] ________________

n = 10000, m = 10, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [8.0, 7.0, 4.0, 4.0, 2.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 2.0, 1.0, 0.0, 6.0, 2.0, 1.0, 9.0, 5.0, 1.0, 8.0, 9.0, 8.0, 9.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 4.0, 6.0, 1.0, 7.0, 9.0, 0.0, 2.0, 6.0, 0.0, 4.0, 6.0, 0.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 7.0, 3.0, 0.0, 8.0, 4.0, 6.0, 7.0, 6.0, 2.0, 0.0, 4.0, 3.0, 3.0, 5.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 2.0, 4.0, 1.0, 1.0, 6.0, 6.0, 3.0, 5.0, 6.0, 2.0, 0.0, 9.0, 3.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 4.0, 3.0, 6.0, 7.0, 9.0, 1.0, 7.0, 9.0, 0.0, 3.0, 2.0, 3.0, 4.0, ...]
E   [right]: [8.0, 7.0, 4.0, 4.0, 2.0, 0.0, 3.0, nan, nan, nan, 5.0, 2.0, 1.0, 0.0, 6.0, 2.0, 1.0, 9.0, 5.0, 1.0, 8.0, 9.0, 8.0, 9.0, 3.0, 1.0, nan, nan, nan, 1.0, 8.0, 4.0, 6.0, 1.0, 7.0, 9.0, 0.0, 2.0, 6.0, 0.0, 4.0, 6.0, 0.0, 3.0, 1.0, nan, nan, nan, 2.0, 7.0, 3.0, 0.0, 8.0, 4.0, 6.0, 7.0, 6.0, 2.0, 0.0, 4.0, 3.0, 3.0, 5.0, 1.0, nan, nan, nan, 8.0, 1.0, 2.0, 4.0, 1.0, 1.0, 6.0, 6.0, 3.0, 5.0, 6.0, 2.0, 0.0, 9.0, 3.0, 5.0, nan, nan, nan, 2.0, 4.0, 3.0, 6.0, 7.0, 9.0, 1.0, 7.0, 9.0, 0.0, 3.0, 2.0, 3.0, 4.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-False-10-n3] ________________

n = 100000, m = 10, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [7.0, 6.0, 9.0, 1.0, 1.0, 3.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 3.0, 7.0, 7.0, 7.0, 0.0, 4.0, 3.0, 0.0, 1.0, 1.0, 0.0, 4.0, 3.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 8.0, 5.0, 8.0, 2.0, 8.0, 8.0, 7.0, 0.0, 0.0, 1.0, 8.0, 7.0, 0.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 4.0, 2.0, 2.0, 9.0, 2.0, 9.0, 6.0, 2.0, 6.0, 1.0, 2.0, 3.0, 7.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 5.0, 9.0, 7.0, 4.0, 4.0, 6.0, 5.0, 3.0, 7.0, 7.0, 6.0, 0.0, 2.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 2.0, 2.0, 7.0, 1.0, 5.0, 9.0, 8.0, 7.0, 8.0, 3.0, 4.0, 7.0, 7.0, ...]
E   [right]: [7.0, 6.0, 9.0, 1.0, 1.0, 3.0, 4.0, nan, nan, nan, 0.0, 7.0, 3.0, 7.0, 7.0, 7.0, 0.0, 4.0, 3.0, 0.0, 1.0, 1.0, 0.0, 4.0, 3.0, 2.0, nan, nan, nan, 1.0, 8.0, 8.0, 5.0, 8.0, 2.0, 8.0, 8.0, 7.0, 0.0, 0.0, 1.0, 8.0, 7.0, 0.0, 1.0, nan, nan, nan, 7.0, 0.0, 4.0, 2.0, 2.0, 9.0, 2.0, 9.0, 6.0, 2.0, 6.0, 1.0, 2.0, 3.0, 7.0, 5.0, nan, nan, nan, 1.0, 8.0, 5.0, 9.0, 7.0, 4.0, 4.0, 6.0, 5.0, 3.0, 7.0, 7.0, 6.0, 0.0, 2.0, 6.0, nan, nan, nan, 9.0, 2.0, 2.0, 7.0, 1.0, 5.0, 9.0, 8.0, 7.0, 8.0, 3.0, 4.0, 7.0, 7.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-100-n0] ________________

n = 100, m = 100, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [33.0, 5.0, 68.0, 90.0, 35.0, 75.0, 41.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 98.0, 14.0, 35.0, 16.0, 97.0, 41.0, 2.0, 98.0, 53.0, 94.0, 91.0, 68.0, 28.0, 96.0, 94.0, 75.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 72.0, 70.0, 98.0, 49.0, 15.0, 92.0, 95.0, 94.0, 34.0, 67.0, 73.0, 36.0, 67.0, 46.0, 64.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 43.0, 76.0, 28.0, 8.0, 69.0, 57.0, 90.0, 90.0, 44.0, 57.0, 52.0, 1.0, 89.0, 31.0, 24.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 4.0, 74.0, 17.0, 74.0, 31.0, 65.0, 97.0, 44.0, 76.0, 13.0, 59.0, 32.0, 3.0, 96.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 98.0, 86.0, 32.0, 61.0, 32.0, 65.0, 86.0, 1.0, 10.0, 31.0, 97.0, 73.0, 14.0]
E   [right]: [33.0, 5.0, 68.0, 90.0, 35.0, 75.0, 41.0, nan, nan, nan, 98.0, 14.0, 35.0, 16.0, 97.0, 41.0, 2.0, 98.0, 53.0, 94.0, 91.0, 68.0, 28.0, 96.0, 94.0, 75.0, nan, nan, nan, 44.0, 72.0, 70.0, 98.0, 49.0, 15.0, 92.0, 95.0, 94.0, 34.0, 67.0, 73.0, 36.0, 67.0, 46.0, 64.0, nan, nan, nan, 58.0, 43.0, 76.0, 28.0, 8.0, 69.0, 57.0, 90.0, 90.0, 44.0, 57.0, 52.0, 1.0, 89.0, 31.0, 24.0, nan, nan, nan, 69.0, 4.0, 74.0, 17.0, 74.0, 31.0, 65.0, 97.0, 44.0, 76.0, 13.0, 59.0, 32.0, 3.0, 96.0, 74.0, nan, nan, nan, 90.0, 98.0, 86.0, 32.0, 61.0, 32.0, 65.0, 86.0, 1.0, 10.0, 31.0, 97.0, 73.0, 14.0]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-100-n1] ________________

n = 1000, m = 100, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [11.0, 59.0, 3.0, 72.0, 43.0, 59.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 48.0, 54.0, 89.0, 85.0, 63.0, 89.0, 90.0, 33.0, 82.0, 1.0, 88.0, 70.0, 24.0, 24.0, 89.0, 18.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 30.0, 34.0, 64.0, 60.0, 37.0, 80.0, 31.0, 82.0, 20.0, 25.0, 29.0, 77.0, 58.0, 30.0, 52.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 24.0, 77.0, 21.0, 57.0, 43.0, 15.0, 54.0, 9.0, 38.0, 25.0, 58.0, 60.0, 51.0, 6.0, 80.0, 14.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 56.0, 26.0, 56.0, 26.0, 21.0, 82.0, 27.0, 12.0, 56.0, 82.0, 89.0, 65.0, 65.0, 80.0, 87.0, 93.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 93.0, 50.0, 54.0, 55.0, 61.0, 87.0, 52.0, 48.0, 92.0, 39.0, 1.0, 22.0, 57.0, ...]
E   [right]: [11.0, 59.0, 3.0, 72.0, 43.0, 59.0, 6.0, nan, nan, nan, 48.0, 54.0, 89.0, 85.0, 63.0, 89.0, 90.0, 33.0, 82.0, 1.0, 88.0, 70.0, 24.0, 24.0, 89.0, 18.0, nan, nan, nan, 4.0, 30.0, 34.0, 64.0, 60.0, 37.0, 80.0, 31.0, 82.0, 20.0, 25.0, 29.0, 77.0, 58.0, 30.0, 52.0, nan, nan, nan, 24.0, 77.0, 21.0, 57.0, 43.0, 15.0, 54.0, 9.0, 38.0, 25.0, 58.0, 60.0, 51.0, 6.0, 80.0, 14.0, nan, nan, nan, 56.0, 26.0, 56.0, 26.0, 21.0, 82.0, 27.0, 12.0, 56.0, 82.0, 89.0, 65.0, 65.0, 80.0, 87.0, 93.0, nan, nan, nan, 1.0, 93.0, 50.0, 54.0, 55.0, 61.0, 87.0, 52.0, 48.0, 92.0, 39.0, 1.0, 22.0, 57.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-100-n2] ________________

n = 10000, m = 100, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [25.0, 50.0, 26.0, 0.0, 9.0, 53.0, 13.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 57.0, 67.0, 58.0, 99.0, 69.0, 47.0, 49.0, 39.0, 1.0, 75.0, 67.0, 36.0, 13.0, 93.0, 32.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 12.0, 93.0, 18.0, 99.0, 63.0, 40.0, 76.0, 77.0, 87.0, 85.0, 24.0, 49.0, 78.0, 94.0, 59.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 30.0, 98.0, 95.0, 13.0, 0.0, 87.0, 76.0, 53.0, 0.0, 19.0, 68.0, 33.0, 38.0, 30.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 77.0, 59.0, 32.0, 61.0, 12.0, 75.0, 66.0, 65.0, 29.0, 30.0, 51.0, 80.0, 31.0, 13.0, 59.0, 36.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 45.0, 8.0, 70.0, 1.0, 40.0, 49.0, 56.0, 33.0, 86.0, 16.0, 17.0, 96.0, 10.0, ...]
E   [right]: [25.0, 50.0, 26.0, 0.0, 9.0, 53.0, 13.0, nan, nan, nan, 4.0, 57.0, 67.0, 58.0, 99.0, 69.0, 47.0, 49.0, 39.0, 1.0, 75.0, 67.0, 36.0, 13.0, 93.0, 32.0, nan, nan, nan, 2.0, 12.0, 93.0, 18.0, 99.0, 63.0, 40.0, 76.0, 77.0, 87.0, 85.0, 24.0, 49.0, 78.0, 94.0, 59.0, nan, nan, nan, 58.0, 30.0, 98.0, 95.0, 13.0, 0.0, 87.0, 76.0, 53.0, 0.0, 19.0, 68.0, 33.0, 38.0, 30.0, 38.0, nan, nan, nan, 77.0, 59.0, 32.0, 61.0, 12.0, 75.0, 66.0, 65.0, 29.0, 30.0, 51.0, 80.0, 31.0, 13.0, 59.0, 36.0, nan, nan, nan, 5.0, 45.0, 8.0, 70.0, 1.0, 40.0, 49.0, 56.0, 33.0, 86.0, 16.0, 17.0, 96.0, 10.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-100-n3] ________________

n = 100000, m = 100, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [65.0, 94.0, 56.0, 48.0, 26.0, 60.0, 42.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 66.0, 0.0, 34.0, 86.0, 97.0, 86.0, 6.0, 34.0, 91.0, 93.0, 21.0, 7.0, 91.0, 90.0, 85.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 46.0, 0.0, 73.0, 40.0, 94.0, 27.0, 43.0, 67.0, 42.0, 2.0, 21.0, 16.0, 60.0, 81.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 67.0, 69.0, 11.0, 84.0, 60.0, 15.0, 10.0, 91.0, 6.0, 66.0, 44.0, 6.0, 32.0, 63.0, 97.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 94.0, 88.0, 68.0, 57.0, 51.0, 42.0, 68.0, 96.0, 49.0, 61.0, 79.0, 74.0, 5.0, 92.0, 62.0, 69.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 46.0, 70.0, 65.0, 48.0, 96.0, 41.0, 41.0, 75.0, 71.0, 66.0, 53.0, 82.0, 13.0, 96.0, ...]
E   [right]: [65.0, 94.0, 56.0, 48.0, 26.0, 60.0, 42.0, nan, nan, nan, 66.0, 0.0, 34.0, 86.0, 97.0, 86.0, 6.0, 34.0, 91.0, 93.0, 21.0, 7.0, 91.0, 90.0, 85.0, 4.0, nan, nan, nan, 78.0, 46.0, 0.0, 73.0, 40.0, 94.0, 27.0, 43.0, 67.0, 42.0, 2.0, 21.0, 16.0, 60.0, 81.0, 89.0, nan, nan, nan, 67.0, 69.0, 11.0, 84.0, 60.0, 15.0, 10.0, 91.0, 6.0, 66.0, 44.0, 6.0, 32.0, 63.0, 97.0, 6.0, nan, nan, nan, 94.0, 88.0, 68.0, 57.0, 51.0, 42.0, 68.0, 96.0, 49.0, 61.0, 79.0, 74.0, 5.0, 92.0, 62.0, 69.0, nan, nan, nan, 46.0, 70.0, 65.0, 48.0, 96.0, 41.0, 41.0, 75.0, 71.0, 66.0, 53.0, 82.0, 13.0, 96.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-1000-n0] _______________

n = 100, m = 1000, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [904.0, 209.0, 620.0, 859.0, 155.0, 313.0, 621.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 319.0, 385.0, 820.0, 35.0, 24.0, 387.0, 37.0, 686.0, 890.0, 469.0, 448.0, 425.0, 919.0, 410.0, 357.0, 952.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 903.0, 25.0, 793.0, 785.0, 257.0, 81.0, 834.0, 987.0, 409.0, 618.0, 970.0, 453.0, 849.0, 815.0, 678.0, 616.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 862.0, 476.0, 757.0, 962.0, 22.0, 742.0, 36.0, 588.0, 637.0, 431.0, 498.0, 829.0, 325.0, 747.0, 553.0, 601.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 255.0, 659.0, 481.0, 447.0, 138.0, 585.0, 764.0, 166.0, 779.0, 403.0, 576.0, 957.0, 55.0, 249.0, 580.0, 498.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 567.0, 772.0, 621.0, 570.0, 181.0, 455.0, 181.0, 194.0, 913.0, 191.0, 970.0, 562.0, 710.0, 249.0]
E   [right]: [904.0, 209.0, 620.0, 859.0, 155.0, 313.0, 621.0, nan, nan, nan, 319.0, 385.0, 820.0, 35.0, 24.0, 387.0, 37.0, 686.0, 890.0, 469.0, 448.0, 425.0, 919.0, 410.0, 357.0, 952.0, nan, nan, nan, 903.0, 25.0, 793.0, 785.0, 257.0, 81.0, 834.0, 987.0, 409.0, 618.0, 970.0, 453.0, 849.0, 815.0, 678.0, 616.0, nan, nan, nan, 862.0, 476.0, 757.0, 962.0, 22.0, 742.0, 36.0, 588.0, 637.0, 431.0, 498.0, 829.0, 325.0, 747.0, 553.0, 601.0, nan, nan, nan, 255.0, 659.0, 481.0, 447.0, 138.0, 585.0, 764.0, 166.0, 779.0, 403.0, 576.0, 957.0, 55.0, 249.0, 580.0, 498.0, nan, nan, nan, 567.0, 772.0, 621.0, 570.0, 181.0, 455.0, 181.0, 194.0, 913.0, 191.0, 970.0, 562.0, 710.0, 249.0]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-1000-n1] _______________

n = 1000, m = 1000, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [278.0, 23.0, 488.0, 803.0, 611.0, 226.0, 613.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 319.0, 17.0, 191.0, 111.0, 899.0, 990.0, 825.0, 844.0, 317.0, 484.0, 793.0, 854.0, 489.0, 798.0, 479.0, 348.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 472.0, 234.0, 701.0, 450.0, 932.0, 232.0, 69.0, 613.0, 82.0, 286.0, 74.0, 671.0, 213.0, 28.0, 514.0, 770.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 265.0, 361.0, 453.0, 392.0, 36.0, 626.0, 588.0, 208.0, 584.0, 85.0, 707.0, 17.0, 119.0, 699.0, 305.0, 752.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 585.0, 598.0, 140.0, 251.0, 198.0, 650.0, 135.0, 968.0, 652.0, 497.0, 223.0, 343.0, 223.0, 667.0, 867.0, 765.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 890.0, 631.0, 41.0, 517.0, 732.0, 563.0, 833.0, 315.0, 830.0, 725.0, 240.0, 820.0, 93.0, 808.0, ...]
E   [right]: [278.0, 23.0, 488.0, 803.0, 611.0, 226.0, 613.0, nan, nan, nan, 319.0, 17.0, 191.0, 111.0, 899.0, 990.0, 825.0, 844.0, 317.0, 484.0, 793.0, 854.0, 489.0, 798.0, 479.0, 348.0, nan, nan, nan, 472.0, 234.0, 701.0, 450.0, 932.0, 232.0, 69.0, 613.0, 82.0, 286.0, 74.0, 671.0, 213.0, 28.0, 514.0, 770.0, nan, nan, nan, 265.0, 361.0, 453.0, 392.0, 36.0, 626.0, 588.0, 208.0, 584.0, 85.0, 707.0, 17.0, 119.0, 699.0, 305.0, 752.0, nan, nan, nan, 585.0, 598.0, 140.0, 251.0, 198.0, 650.0, 135.0, 968.0, 652.0, 497.0, 223.0, 343.0, 223.0, 667.0, 867.0, 765.0, nan, nan, nan, 890.0, 631.0, 41.0, 517.0, 732.0, 563.0, 833.0, 315.0, 830.0, 725.0, 240.0, 820.0, 93.0, 808.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-1000-n2] _______________

n = 10000, m = 1000, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [432.0, 933.0, 20.0, 662.0, 927.0, 900.0, 870.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 887.0, 468.0, 312.0, 522.0, 482.0, 200.0, 148.0, 997.0, 957.0, 444.0, 451.0, 115.0, 798.0, 718.0, 866.0, 897.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 191.0, 941.0, 145.0, 195.0, 734.0, 781.0, 242.0, 216.0, 296.0, 267.0, 539.0, 518.0, 320.0, 11.0, 20.0, 686.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 971.0, 545.0, 87.0, 647.0, 412.0, 170.0, 560.0, 644.0, 521.0, 203.0, 323.0, 694.0, 628.0, 129.0, 3.0, 400.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 344.0, 843.0, 441.0, 879.0, 613.0, 963.0, 107.0, 393.0, 34.0, 650.0, 229.0, 624.0, 92.0, 785.0, 448.0, 534.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 499.0, 306.0, 94.0, 640.0, 168.0, 237.0, 125.0, 13.0, 786.0, 287.0, 815.0, 946.0, 144.0, 222.0, ...]
E   [right]: [432.0, 933.0, 20.0, 662.0, 927.0, 900.0, 870.0, nan, nan, nan, 887.0, 468.0, 312.0, 522.0, 482.0, 200.0, 148.0, 997.0, 957.0, 444.0, 451.0, 115.0, 798.0, 718.0, 866.0, 897.0, nan, nan, nan, 191.0, 941.0, 145.0, 195.0, 734.0, 781.0, 242.0, 216.0, 296.0, 267.0, 539.0, 518.0, 320.0, 11.0, 20.0, 686.0, nan, nan, nan, 971.0, 545.0, 87.0, 647.0, 412.0, 170.0, 560.0, 644.0, 521.0, 203.0, 323.0, 694.0, 628.0, 129.0, 3.0, 400.0, nan, nan, nan, 344.0, 843.0, 441.0, 879.0, 613.0, 963.0, 107.0, 393.0, 34.0, 650.0, 229.0, 624.0, 92.0, 785.0, 448.0, 534.0, nan, nan, nan, 499.0, 306.0, 94.0, 640.0, 168.0, 237.0, 125.0, 13.0, 786.0, 287.0, 815.0, 946.0, 144.0, 222.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-False-1000-n3] _______________

n = 100000, m = 1000, sort = False, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [860.0, 915.0, 694.0, 569.0, 168.0, 802.0, 482.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 699.0, 56.0, 379.0, 196.0, 332.0, 524.0, 628.0, 15.0, 410.0, 273.0, 101.0, 594.0, 528.0, 915.0, 117.0, 470.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 403.0, 686.0, 258.0, 655.0, 10.0, 420.0, 705.0, 744.0, 547.0, 205.0, 640.0, 565.0, 14.0, 122.0, 917.0, 751.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 364.0, 589.0, 99.0, 820.0, 470.0, 262.0, 559.0, 436.0, 322.0, 346.0, 913.0, 893.0, 538.0, 133.0, 676.0, 369.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 405.0, 268.0, 616.0, 615.0, 638.0, 652.0, 521.0, 250.0, 542.0, 847.0, 135.0, 648.0, 354.0, 304.0, 304.0, 283.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 794.0, 125.0, 819.0, 144.0, 691.0, 223.0, 297.0, 921.0, 506.0, 63.0, 177.0, 441.0, 421.0, 205.0, ...]
E   [right]: [860.0, 915.0, 694.0, 569.0, 168.0, 802.0, 482.0, nan, nan, nan, 699.0, 56.0, 379.0, 196.0, 332.0, 524.0, 628.0, 15.0, 410.0, 273.0, 101.0, 594.0, 528.0, 915.0, 117.0, 470.0, nan, nan, nan, 403.0, 686.0, 258.0, 655.0, 10.0, 420.0, 705.0, 744.0, 547.0, 205.0, 640.0, 565.0, 14.0, 122.0, 917.0, 751.0, nan, nan, nan, 364.0, 589.0, 99.0, 820.0, 470.0, 262.0, 559.0, 436.0, 322.0, 346.0, 913.0, 893.0, 538.0, 133.0, 676.0, 369.0, nan, nan, nan, 405.0, 268.0, 616.0, 615.0, 638.0, 652.0, 521.0, 250.0, 542.0, 847.0, 135.0, 648.0, 354.0, 304.0, 304.0, 283.0, nan, nan, nan, 794.0, 125.0, 819.0, 144.0, 691.0, 223.0, 297.0, 921.0, 506.0, 63.0, 177.0, 441.0, 421.0, 205.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-10-n0] _________________

n = 100, m = 10, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [3.0, 6.0, 0.0, 6.0, 6.0, 7.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 0.0, 9.0, 5.0, 7.0, 5.0, 5.0, 1.0, 0.0, 5.0, 5.0, 6.0, 5.0, 3.0, 3.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 3.0, 1.0, 6.0, 4.0, 8.0, 4.0, 9.0, 5.0, 4.0, 9.0, 5.0, 9.0, 0.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 6.0, 8.0, 8.0, 6.0, 9.0, 0.0, 7.0, 2.0, 2.0, 4.0, 0.0, 6.0, 9.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 4.0, 8.0, 8.0, 9.0, 9.0, 2.0, 2.0, 8.0, 4.0, 3.0, 7.0, 1.0, 0.0, 8.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 6.0, 4.0, 6.0, 9.0, 7.0, 4.0, 8.0, 2.0, 0.0, 5.0, 1.0, 8.0, 6.0]
E   [right]: [3.0, 6.0, 0.0, 6.0, 6.0, 7.0, 8.0, nan, nan, nan, 8.0, 0.0, 9.0, 5.0, 7.0, 5.0, 5.0, 1.0, 0.0, 5.0, 5.0, 6.0, 5.0, 3.0, 3.0, 6.0, nan, nan, nan, 9.0, 3.0, 1.0, 6.0, 4.0, 8.0, 4.0, 9.0, 5.0, 4.0, 9.0, 5.0, 9.0, 0.0, 9.0, 2.0, nan, nan, nan, 7.0, 0.0, 6.0, 8.0, 8.0, 6.0, 9.0, 0.0, 7.0, 2.0, 2.0, 4.0, 0.0, 6.0, 9.0, 5.0, nan, nan, nan, 9.0, 4.0, 8.0, 8.0, 9.0, 9.0, 2.0, 2.0, 8.0, 4.0, 3.0, 7.0, 1.0, 0.0, 8.0, 1.0, nan, nan, nan, 5.0, 6.0, 4.0, 6.0, 9.0, 7.0, 4.0, 8.0, 2.0, 0.0, 5.0, 1.0, 8.0, 6.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-10-n1] _________________

n = 1000, m = 10, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [3.0, 3.0, 6.0, 7.0, 6.0, 1.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 8.0, 3.0, 6.0, 8.0, 6.0, 9.0, 9.0, 9.0, 4.0, 3.0, 8.0, 2.0, 9.0, 0.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 0.0, 0.0, 8.0, 2.0, 1.0, 3.0, 4.0, 7.0, 7.0, 5.0, 4.0, 8.0, 4.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 2.0, 7.0, 9.0, 2.0, 6.0, 3.0, 8.0, 2.0, 8.0, 9.0, 5.0, 8.0, 7.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 1.0, 4.0, 9.0, 9.0, 5.0, 6.0, 5.0, 1.0, 5.0, 6.0, 9.0, 3.0, 0.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 4.0, 6.0, 8.0, 2.0, 8.0, 8.0, 3.0, 4.0, 7.0, 9.0, 7.0, 9.0, ...]
E   [right]: [3.0, 3.0, 6.0, 7.0, 6.0, 1.0, 0.0, nan, nan, nan, 9.0, 8.0, 3.0, 6.0, 8.0, 6.0, 9.0, 9.0, 9.0, 4.0, 3.0, 8.0, 2.0, 9.0, 0.0, 2.0, nan, nan, nan, 4.0, 3.0, 0.0, 0.0, 8.0, 2.0, 1.0, 3.0, 4.0, 7.0, 7.0, 5.0, 4.0, 8.0, 4.0, 8.0, nan, nan, nan, 4.0, 3.0, 2.0, 7.0, 9.0, 2.0, 6.0, 3.0, 8.0, 2.0, 8.0, 9.0, 5.0, 8.0, 7.0, 1.0, nan, nan, nan, 2.0, 1.0, 4.0, 9.0, 9.0, 5.0, 6.0, 5.0, 1.0, 5.0, 6.0, 9.0, 3.0, 0.0, 7.0, 0.0, nan, nan, nan, 0.0, 7.0, 4.0, 6.0, 8.0, 2.0, 8.0, 8.0, 3.0, 4.0, 7.0, 9.0, 7.0, 9.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-10-n2] _________________

n = 10000, m = 10, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [5.0, 6.0, 6.0, 4.0, 0.0, 3.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 3.0, 1.0, 0.0, 9.0, 5.0, 1.0, 4.0, 8.0, 3.0, 8.0, 8.0, 5.0, 5.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 4.0, 5.0, 8.0, 9.0, 7.0, 1.0, 0.0, 8.0, 1.0, 1.0, 5.0, 4.0, 7.0, 8.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 4.0, 2.0, 0.0, 6.0, 7.0, 4.0, 7.0, 5.0, 6.0, 3.0, 4.0, 5.0, 2.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 8.0, 5.0, 0.0, 3.0, 8.0, 7.0, 7.0, 1.0, 6.0, 6.0, 8.0, 3.0, 9.0, 1.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 1.0, 3.0, 6.0, 7.0, 1.0, 1.0, 5.0, 2.0, 1.0, 1.0, 7.0, 1.0, 9.0, ...]
E   [right]: [5.0, 6.0, 6.0, 4.0, 0.0, 3.0, 7.0, nan, nan, nan, 2.0, 6.0, 3.0, 1.0, 0.0, 9.0, 5.0, 1.0, 4.0, 8.0, 3.0, 8.0, 8.0, 5.0, 5.0, 0.0, nan, nan, nan, 6.0, 4.0, 5.0, 8.0, 9.0, 7.0, 1.0, 0.0, 8.0, 1.0, 1.0, 5.0, 4.0, 7.0, 8.0, 6.0, nan, nan, nan, 8.0, 1.0, 4.0, 2.0, 0.0, 6.0, 7.0, 4.0, 7.0, 5.0, 6.0, 3.0, 4.0, 5.0, 2.0, 5.0, nan, nan, nan, 9.0, 8.0, 5.0, 0.0, 3.0, 8.0, 7.0, 7.0, 1.0, 6.0, 6.0, 8.0, 3.0, 9.0, 1.0, 4.0, nan, nan, nan, 4.0, 1.0, 3.0, 6.0, 7.0, 1.0, 1.0, 5.0, 2.0, 1.0, 1.0, 7.0, 1.0, 9.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-10-n3] _________________

n = 100000, m = 10, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [3.0, 1.0, 5.0, 1.0, 7.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 3.0, 7.0, 7.0, 4.0, 3.0, 2.0, 7.0, 5.0, 7.0, 1.0, 9.0, 3.0, 5.0, 7.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 6.0, 0.0, 1.0, 3.0, 1.0, 5.0, 2.0, 1.0, 6.0, 2.0, 5.0, 8.0, 4.0, 3.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 0.0, 2.0, 8.0, 6.0, 8.0, 6.0, 1.0, 0.0, 4.0, 0.0, 1.0, 5.0, 7.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 3.0, 3.0, 6.0, 7.0, 6.0, 6.0, 8.0, 3.0, 6.0, 2.0, 1.0, 0.0, 6.0, 6.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 0.0, 2.0, 8.0, 2.0, 9.0, 2.0, 1.0, 1.0, 8.0, 6.0, 6.0, 8.0, 8.0, ...]
E   [right]: [3.0, 1.0, 5.0, 1.0, 7.0, 3.0, 1.0, nan, nan, nan, 9.0, 3.0, 7.0, 7.0, 4.0, 3.0, 2.0, 7.0, 5.0, 7.0, 1.0, 9.0, 3.0, 5.0, 7.0, 4.0, nan, nan, nan, 4.0, 6.0, 0.0, 1.0, 3.0, 1.0, 5.0, 2.0, 1.0, 6.0, 2.0, 5.0, 8.0, 4.0, 3.0, 2.0, nan, nan, nan, 6.0, 0.0, 2.0, 8.0, 6.0, 8.0, 6.0, 1.0, 0.0, 4.0, 0.0, 1.0, 5.0, 7.0, 0.0, 8.0, nan, nan, nan, 3.0, 3.0, 3.0, 6.0, 7.0, 6.0, 6.0, 8.0, 3.0, 6.0, 2.0, 1.0, 0.0, 6.0, 6.0, 3.0, nan, nan, nan, 1.0, 0.0, 2.0, 8.0, 2.0, 9.0, 2.0, 1.0, 1.0, 8.0, 6.0, 6.0, 8.0, 8.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-100-n0] ________________

n = 100, m = 100, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [40.0, 44.0, 74.0, 21.0, 89.0, 17.0, 91.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 21.0, 13.0, 27.0, 77.0, 77.0, 87.0, 75.0, 95.0, 36.0, 82.0, 27.0, 75.0, 43.0, 8.0, 34.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 62.0, 99.0, 19.0, 20.0, 11.0, 10.0, 96.0, 98.0, 3.0, 1.0, 78.0, 9.0, 32.0, 91.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 46.0, 52.0, 34.0, 7.0, 27.0, 96.0, 91.0, 29.0, 89.0, 90.0, 90.0, 27.0, 52.0, 47.0, 21.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 66.0, 74.0, 32.0, 48.0, 78.0, 19.0, 15.0, 18.0, 71.0, 32.0, 62.0, 95.0, 45.0, 84.0, 92.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 78.0, 62.0, 56.0, 78.0, 71.0, 94.0, 39.0, 85.0, 73.0, 26.0, 67.0, 38.0, 51.0]
E   [right]: [40.0, 44.0, 74.0, 21.0, 89.0, 17.0, 91.0, nan, nan, nan, 2.0, 21.0, 13.0, 27.0, 77.0, 77.0, 87.0, 75.0, 95.0, 36.0, 82.0, 27.0, 75.0, 43.0, 8.0, 34.0, nan, nan, nan, 31.0, 62.0, 99.0, 19.0, 20.0, 11.0, 10.0, 96.0, 98.0, 3.0, 1.0, 78.0, 9.0, 32.0, 91.0, 5.0, nan, nan, nan, 4.0, 46.0, 52.0, 34.0, 7.0, 27.0, 96.0, 91.0, 29.0, 89.0, 90.0, 90.0, 27.0, 52.0, 47.0, 21.0, nan, nan, nan, 66.0, 74.0, 32.0, 48.0, 78.0, 19.0, 15.0, 18.0, 71.0, 32.0, 62.0, 95.0, 45.0, 84.0, 92.0, 3.0, nan, nan, nan, 20.0, 78.0, 62.0, 56.0, 78.0, 71.0, 94.0, 39.0, 85.0, 73.0, 26.0, 67.0, 38.0, 51.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-100-n1] ________________

n = 1000, m = 100, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [59.0, 76.0, 87.0, 69.0, 2.0, 61.0, 51.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 59.0, 77.0, 15.0, 37.0, 79.0, 97.0, 64.0, 26.0, 97.0, 49.0, 52.0, 91.0, 18.0, 51.0, 56.0, 10.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 72.0, 49.0, 76.0, 79.0, 37.0, 1.0, 63.0, 39.0, 10.0, 92.0, 56.0, 95.0, 61.0, 33.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 18.0, 3.0, 48.0, 80.0, 52.0, 71.0, 58.0, 7.0, 33.0, 41.0, 93.0, 77.0, 58.0, 24.0, 89.0, 42.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 37.0, 79.0, 18.0, 0.0, 23.0, 87.0, 92.0, 13.0, 6.0, 26.0, 83.0, 74.0, 87.0, 49.0, 43.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 22.0, 73.0, 43.0, 56.0, 80.0, 9.0, 88.0, 96.0, 6.0, 46.0, 42.0, 39.0, 51.0, ...]
E   [right]: [59.0, 76.0, 87.0, 69.0, 2.0, 61.0, 51.0, nan, nan, nan, 59.0, 77.0, 15.0, 37.0, 79.0, 97.0, 64.0, 26.0, 97.0, 49.0, 52.0, 91.0, 18.0, 51.0, 56.0, 10.0, nan, nan, nan, 2.0, 6.0, 72.0, 49.0, 76.0, 79.0, 37.0, 1.0, 63.0, 39.0, 10.0, 92.0, 56.0, 95.0, 61.0, 33.0, nan, nan, nan, 18.0, 3.0, 48.0, 80.0, 52.0, 71.0, 58.0, 7.0, 33.0, 41.0, 93.0, 77.0, 58.0, 24.0, 89.0, 42.0, nan, nan, nan, 29.0, 37.0, 79.0, 18.0, 0.0, 23.0, 87.0, 92.0, 13.0, 6.0, 26.0, 83.0, 74.0, 87.0, 49.0, 43.0, nan, nan, nan, 5.0, 22.0, 73.0, 43.0, 56.0, 80.0, 9.0, 88.0, 96.0, 6.0, 46.0, 42.0, 39.0, 51.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-100-n2] ________________

n = 10000, m = 100, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [15.0, 28.0, 53.0, 51.0, 63.0, 40.0, 49.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 49.0, 72.0, 61.0, 32.0, 65.0, 48.0, 86.0, 47.0, 87.0, 12.0, 73.0, 61.0, 68.0, 38.0, 78.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 87.0, 51.0, 44.0, 41.0, 23.0, 3.0, 17.0, 62.0, 4.0, 53.0, 17.0, 31.0, 52.0, 52.0, 43.0, 13.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 59.0, 1.0, 1.0, 4.0, 85.0, 2.0, 12.0, 66.0, 64.0, 2.0, 47.0, 51.0, 18.0, 19.0, 36.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 13.0, 56.0, 14.0, 25.0, 39.0, 26.0, 17.0, 71.0, 58.0, 9.0, 18.0, 8.0, 58.0, 98.0, 90.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 78.0, 6.0, 73.0, 62.0, 88.0, 4.0, 8.0, 71.0, 57.0, 87.0, 87.0, 96.0, 52.0, ...]
E   [right]: [15.0, 28.0, 53.0, 51.0, 63.0, 40.0, 49.0, nan, nan, nan, 22.0, 49.0, 72.0, 61.0, 32.0, 65.0, 48.0, 86.0, 47.0, 87.0, 12.0, 73.0, 61.0, 68.0, 38.0, 78.0, nan, nan, nan, 87.0, 51.0, 44.0, 41.0, 23.0, 3.0, 17.0, 62.0, 4.0, 53.0, 17.0, 31.0, 52.0, 52.0, 43.0, 13.0, nan, nan, nan, 59.0, 1.0, 1.0, 4.0, 85.0, 2.0, 12.0, 66.0, 64.0, 2.0, 47.0, 51.0, 18.0, 19.0, 36.0, 7.0, nan, nan, nan, 13.0, 56.0, 14.0, 25.0, 39.0, 26.0, 17.0, 71.0, 58.0, 9.0, 18.0, 8.0, 58.0, 98.0, 90.0, 20.0, nan, nan, nan, 2.0, 78.0, 6.0, 73.0, 62.0, 88.0, 4.0, 8.0, 71.0, 57.0, 87.0, 87.0, 96.0, 52.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[False-True-100-n3] ________________

n = 100000, m = 100, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [9.0, 82.0, 52.0, 60.0, 77.0, 48.0, 65.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 89.0, 67.0, 61.0, 25.0, 84.0, 58.0, 51.0, 48.0, 89.0, 75.0, 9.0, 65.0, 90.0, 33.0, 24.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 42.0, 38.0, 75.0, 1.0, 30.0, 37.0, 82.0, 50.0, 61.0, 83.0, 5.0, 1.0, 67.0, 51.0, 89.0, 87.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 79.0, 44.0, 49.0, 73.0, 6.0, 6.0, 9.0, 80.0, 22.0, 40.0, 85.0, 59.0, 85.0, 95.0, 13.0, 51.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 48.0, 19.0, 9.0, 43.0, 93.0, 31.0, 18.0, 80.0, 83.0, 19.0, 78.0, 91.0, 69.0, 74.0, 67.0, 47.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 87.0, 79.0, 30.0, 34.0, 93.0, 92.0, 46.0, 90.0, 69.0, 15.0, 61.0, 24.0, 4.0, 33.0, ...]
E   [right]: [9.0, 82.0, 52.0, 60.0, 77.0, 48.0, 65.0, nan, nan, nan, 89.0, 67.0, 61.0, 25.0, 84.0, 58.0, 51.0, 48.0, 89.0, 75.0, 9.0, 65.0, 90.0, 33.0, 24.0, 2.0, nan, nan, nan, 42.0, 38.0, 75.0, 1.0, 30.0, 37.0, 82.0, 50.0, 61.0, 83.0, 5.0, 1.0, 67.0, 51.0, 89.0, 87.0, nan, nan, nan, 79.0, 44.0, 49.0, 73.0, 6.0, 6.0, 9.0, 80.0, 22.0, 40.0, 85.0, 59.0, 85.0, 95.0, 13.0, 51.0, nan, nan, nan, 48.0, 19.0, 9.0, 43.0, 93.0, 31.0, 18.0, 80.0, 83.0, 19.0, 78.0, 91.0, 69.0, 74.0, 67.0, 47.0, nan, nan, nan, 87.0, 79.0, 30.0, 34.0, 93.0, 92.0, 46.0, 90.0, 69.0, 15.0, 61.0, 24.0, 4.0, 33.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-True-1000-n0] ________________

n = 100, m = 1000, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [858.0, 70.0, 559.0, 338.0, 578.0, 672.0, 990.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 523.0, 800.0, 411.0, 99.0, 182.0, 271.0, 951.0, 326.0, 914.0, 428.0, 390.0, 884.0, 304.0, 462.0, 540.0, 606.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 938.0, 101.0, 916.0, 364.0, 434.0, 80.0, 952.0, 301.0, 196.0, 516.0, 741.0, 473.0, 85.0, 368.0, 414.0, 774.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 124.0, 701.0, 275.0, 409.0, 766.0, 846.0, 449.0, 874.0, 692.0, 225.0, 231.0, 961.0, 167.0, 545.0, 788.0, 348.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 885.0, 96.0, 339.0, 625.0, 770.0, 970.0, 875.0, 445.0, 973.0, 605.0, 217.0, 909.0, 122.0, 357.0, 990.0, 488.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 961.0, 996.0, 685.0, 885.0, 579.0, 725.0, 251.0, 118.0, 905.0, 715.0, 731.0, 891.0, 676.0, 161.0]
E   [right]: [858.0, 70.0, 559.0, 338.0, 578.0, 672.0, 990.0, nan, nan, nan, 523.0, 800.0, 411.0, 99.0, 182.0, 271.0, 951.0, 326.0, 914.0, 428.0, 390.0, 884.0, 304.0, 462.0, 540.0, 606.0, nan, nan, nan, 938.0, 101.0, 916.0, 364.0, 434.0, 80.0, 952.0, 301.0, 196.0, 516.0, 741.0, 473.0, 85.0, 368.0, 414.0, 774.0, nan, nan, nan, 124.0, 701.0, 275.0, 409.0, 766.0, 846.0, 449.0, 874.0, 692.0, 225.0, 231.0, 961.0, 167.0, 545.0, 788.0, 348.0, nan, nan, nan, 885.0, 96.0, 339.0, 625.0, 770.0, 970.0, 875.0, 445.0, 973.0, 605.0, 217.0, 909.0, 122.0, 357.0, 990.0, 488.0, nan, nan, nan, 961.0, 996.0, 685.0, 885.0, 579.0, 725.0, 251.0, 118.0, 905.0, 715.0, 731.0, 891.0, 676.0, 161.0]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-True-1000-n1] ________________

n = 1000, m = 1000, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [700.0, 509.0, 837.0, 325.0, 307.0, 64.0, 237.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 946.0, 80.0, 832.0, 870.0, 576.0, 482.0, 452.0, 906.0, 352.0, 306.0, 991.0, 169.0, 113.0, 572.0, 261.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 885.0, 707.0, 43.0, 732.0, 59.0, 285.0, 880.0, 370.0, 987.0, 849.0, 450.0, 452.0, 201.0, 502.0, 495.0, 644.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 301.0, 740.0, 812.0, 486.0, 973.0, 986.0, 780.0, 747.0, 682.0, 350.0, 732.0, 798.0, 22.0, 758.0, 960.0, 936.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 359.0, 467.0, 22.0, 181.0, 648.0, 964.0, 624.0, 258.0, 591.0, 657.0, 453.0, 107.0, 508.0, 292.0, 156.0, 282.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 776.0, 149.0, 580.0, 388.0, 538.0, 934.0, 184.0, 401.0, 509.0, 847.0, 39.0, 79.0, 85.0, 543.0, ...]
E   [right]: [700.0, 509.0, 837.0, 325.0, 307.0, 64.0, 237.0, nan, nan, nan, 946.0, 80.0, 832.0, 870.0, 576.0, 482.0, 452.0, 906.0, 352.0, 306.0, 991.0, 169.0, 113.0, 572.0, 261.0, 0.0, nan, nan, nan, 885.0, 707.0, 43.0, 732.0, 59.0, 285.0, 880.0, 370.0, 987.0, 849.0, 450.0, 452.0, 201.0, 502.0, 495.0, 644.0, nan, nan, nan, 301.0, 740.0, 812.0, 486.0, 973.0, 986.0, 780.0, 747.0, 682.0, 350.0, 732.0, 798.0, 22.0, 758.0, 960.0, 936.0, nan, nan, nan, 359.0, 467.0, 22.0, 181.0, 648.0, 964.0, 624.0, 258.0, 591.0, 657.0, 453.0, 107.0, 508.0, 292.0, 156.0, 282.0, nan, nan, nan, 776.0, 149.0, 580.0, 388.0, 538.0, 934.0, 184.0, 401.0, 509.0, 847.0, 39.0, 79.0, 85.0, 543.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-True-1000-n2] ________________

n = 10000, m = 1000, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [243.0, 668.0, 349.0, 712.0, 351.0, 213.0, 298.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 982.0, 101.0, 492.0, 538.0, 398.0, 982.0, 793.0, 774.0, 193.0, 427.0, 229.0, 857.0, 729.0, 377.0, 781.0, 947.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 248.0, 911.0, 575.0, 839.0, 763.0, 567.0, 671.0, 928.0, 90.0, 377.0, 317.0, 446.0, 341.0, 429.0, 813.0, 705.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 556.0, 2.0, 324.0, 777.0, 259.0, 306.0, 329.0, 271.0, 145.0, 626.0, 214.0, 473.0, 672.0, 897.0, 739.0, 903.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 118.0, 724.0, 631.0, 137.0, 169.0, 589.0, 901.0, 730.0, 910.0, 807.0, 505.0, 746.0, 312.0, 711.0, 505.0, 429.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 682.0, 838.0, 635.0, 151.0, 160.0, 528.0, 411.0, 913.0, 876.0, 439.0, 199.0, 889.0, 285.0, 811.0, ...]
E   [right]: [243.0, 668.0, 349.0, 712.0, 351.0, 213.0, 298.0, nan, nan, nan, 982.0, 101.0, 492.0, 538.0, 398.0, 982.0, 793.0, 774.0, 193.0, 427.0, 229.0, 857.0, 729.0, 377.0, 781.0, 947.0, nan, nan, nan, 248.0, 911.0, 575.0, 839.0, 763.0, 567.0, 671.0, 928.0, 90.0, 377.0, 317.0, 446.0, 341.0, 429.0, 813.0, 705.0, nan, nan, nan, 556.0, 2.0, 324.0, 777.0, 259.0, 306.0, 329.0, 271.0, 145.0, 626.0, 214.0, 473.0, 672.0, 897.0, 739.0, 903.0, nan, nan, nan, 118.0, 724.0, 631.0, 137.0, 169.0, 589.0, 901.0, 730.0, 910.0, 807.0, 505.0, 746.0, 312.0, 711.0, 505.0, 429.0, nan, nan, nan, 682.0, 838.0, 635.0, 151.0, 160.0, 528.0, 411.0, 913.0, 876.0, 439.0, 199.0, 889.0, 285.0, 811.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[False-True-1000-n3] ________________

n = 100000, m = 1000, sort = True, dropna = False

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [138.0, 329.0, 438.0, 76.0, 835.0, 26.0, 183.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 667.0, 446.0, 38.0, 320.0, 721.0, 985.0, 495.0, 288.0, 110.0, 121.0, 292.0, 752.0, 327.0, 679.0, 554.0, 744.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 822.0, 452.0, 686.0, 704.0, 515.0, 691.0, 934.0, 481.0, 263.0, 901.0, 329.0, 118.0, 752.0, 592.0, 800.0, 808.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 388.0, 433.0, 321.0, 29.0, 880.0, 689.0, 311.0, 525.0, 498.0, 697.0, 556.0, 413.0, 169.0, 154.0, 408.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 171.0, 343.0, 667.0, 177.0, 729.0, 589.0, 188.0, 422.0, 619.0, 967.0, 885.0, 221.0, 32.0, 439.0, 362.0, 220.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 626.0, 649.0, 929.0, 429.0, 820.0, 409.0, 537.0, 399.0, 765.0, 824.0, 252.0, 422.0, 702.0, 471.0, ...]
E   [right]: [138.0, 329.0, 438.0, 76.0, 835.0, 26.0, 183.0, nan, nan, nan, 667.0, 446.0, 38.0, 320.0, 721.0, 985.0, 495.0, 288.0, 110.0, 121.0, 292.0, 752.0, 327.0, 679.0, 554.0, 744.0, nan, nan, nan, 822.0, 452.0, 686.0, 704.0, 515.0, 691.0, 934.0, 481.0, 263.0, 901.0, 329.0, 118.0, 752.0, 592.0, 800.0, 808.0, nan, nan, nan, 388.0, 433.0, 321.0, 29.0, 880.0, 689.0, 311.0, 525.0, 498.0, 697.0, 556.0, 413.0, 169.0, 154.0, 408.0, 82.0, nan, nan, nan, 171.0, 343.0, 667.0, 177.0, 729.0, 589.0, 188.0, 422.0, 619.0, 967.0, 885.0, 221.0, 32.0, 439.0, 362.0, 220.0, nan, nan, nan, 626.0, 649.0, 929.0, 429.0, 820.0, 409.0, 537.0, 399.0, 765.0, 824.0, 252.0, 422.0, 702.0, 471.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-10-n0] _________________

n = 100, m = 10, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [6.0, 5.0, 7.0, 4.0, 3.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 4.0, 0.0, 1.0, 7.0, 7.0, 8.0, 4.0, 3.0, 8.0, 9.0, 7.0, 5.0, 7.0, 9.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 2.0, 7.0, 3.0, 0.0, 4.0, 6.0, 0.0, 3.0, 0.0, 3.0, 7.0, 1.0, 8.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 5.0, 8.0, 2.0, 5.0, 1.0, 4.0, 0.0, 1.0, 8.0, 7.0, 7.0, 4.0, 3.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 3.0, 1.0, 6.0, 0.0, 0.0, 1.0, 7.0, 5.0, 6.0, 9.0, 9.0, 0.0, 2.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 5.0, 0.0, 6.0, 0.0, 1.0, 3.0, 7.0, 5.0, 6.0, 5.0, 9.0, 9.0, 4.0]
E   [right]: [6.0, 5.0, 7.0, 4.0, 3.0, 8.0, 5.0, nan, nan, nan, 3.0, 4.0, 0.0, 1.0, 7.0, 7.0, 8.0, 4.0, 3.0, 8.0, 9.0, 7.0, 5.0, 7.0, 9.0, 0.0, nan, nan, nan, 8.0, 2.0, 7.0, 3.0, 0.0, 4.0, 6.0, 0.0, 3.0, 0.0, 3.0, 7.0, 1.0, 8.0, 6.0, 9.0, nan, nan, nan, 7.0, 5.0, 8.0, 2.0, 5.0, 1.0, 4.0, 0.0, 1.0, 8.0, 7.0, 7.0, 4.0, 3.0, 6.0, 6.0, nan, nan, nan, 1.0, 3.0, 1.0, 6.0, 0.0, 0.0, 1.0, 7.0, 5.0, 6.0, 9.0, 9.0, 0.0, 2.0, 6.0, 9.0, nan, nan, nan, 1.0, 5.0, 0.0, 6.0, 0.0, 1.0, 3.0, 7.0, 5.0, 6.0, 5.0, 9.0, 9.0, 4.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-10-n1] _________________

n = 1000, m = 10, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [3.0, 5.0, 4.0, 3.0, 8.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 1.0, 2.0, 2.0, 9.0, 7.0, 4.0, 3.0, 5.0, 5.0, 5.0, 2.0, 5.0, 4.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 1.0, 3.0, 2.0, 2.0, 1.0, 4.0, 1.0, 1.0, 9.0, 8.0, 8.0, 9.0, 8.0, 1.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 4.0, 1.0, 4.0, 6.0, 6.0, 1.0, 8.0, 7.0, 3.0, 4.0, 8.0, 3.0, 0.0, 5.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 0.0, 6.0, 6.0, 1.0, 4.0, 4.0, 5.0, 6.0, 8.0, 5.0, 7.0, 4.0, 0.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 6.0, 5.0, 5.0, 6.0, 9.0, 5.0, 8.0, 7.0, 4.0, 6.0, 8.0, 5.0, 7.0, ...]
E   [right]: [3.0, 5.0, 4.0, 3.0, 8.0, 0.0, 8.0, nan, nan, nan, 6.0, 2.0, 1.0, 2.0, 2.0, 9.0, 7.0, 4.0, 3.0, 5.0, 5.0, 5.0, 2.0, 5.0, 4.0, 8.0, nan, nan, nan, 3.0, 1.0, 3.0, 2.0, 2.0, 1.0, 4.0, 1.0, 1.0, 9.0, 8.0, 8.0, 9.0, 8.0, 1.0, 2.0, nan, nan, nan, 9.0, 4.0, 1.0, 4.0, 6.0, 6.0, 1.0, 8.0, 7.0, 3.0, 4.0, 8.0, 3.0, 0.0, 5.0, 4.0, nan, nan, nan, 8.0, 1.0, 0.0, 6.0, 6.0, 1.0, 4.0, 4.0, 5.0, 6.0, 8.0, 5.0, 7.0, 4.0, 0.0, 1.0, nan, nan, nan, 6.0, 6.0, 5.0, 5.0, 6.0, 9.0, 5.0, 8.0, 7.0, 4.0, 6.0, 8.0, 5.0, 7.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-10-n2] _________________

n = 10000, m = 10, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [5.0, 9.0, 2.0, 9.0, 8.0, 2.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 0.0, 7.0, 7.0, 7.0, 9.0, 6.0, 0.0, 0.0, 9.0, 1.0, 0.0, 8.0, 2.0, 0.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 3.0, 3.0, 0.0, 6.0, 7.0, 3.0, 0.0, 8.0, 3.0, 6.0, 8.0, 7.0, 9.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 2.0, 4.0, 4.0, 0.0, 8.0, 7.0, 5.0, 7.0, 0.0, 2.0, 5.0, 7.0, 8.0, 2.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 0.0, 9.0, 8.0, 7.0, 9.0, 8.0, 5.0, 9.0, 7.0, 2.0, 7.0, 5.0, 0.0, 5.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 8.0, 4.0, 2.0, 4.0, 5.0, 0.0, 6.0, 2.0, 5.0, 6.0, 4.0, 4.0, ...]
E   [right]: [5.0, 9.0, 2.0, 9.0, 8.0, 2.0, 6.0, nan, nan, nan, 1.0, 0.0, 7.0, 7.0, 7.0, 9.0, 6.0, 0.0, 0.0, 9.0, 1.0, 0.0, 8.0, 2.0, 0.0, 7.0, nan, nan, nan, 2.0, 3.0, 3.0, 0.0, 6.0, 7.0, 3.0, 0.0, 8.0, 3.0, 6.0, 8.0, 7.0, 9.0, 5.0, 9.0, nan, nan, nan, 0.0, 2.0, 4.0, 4.0, 0.0, 8.0, 7.0, 5.0, 7.0, 0.0, 2.0, 5.0, 7.0, 8.0, 2.0, 6.0, nan, nan, nan, 5.0, 0.0, 9.0, 8.0, 7.0, 9.0, 8.0, 5.0, 9.0, 7.0, 2.0, 7.0, 5.0, 0.0, 5.0, 2.0, nan, nan, nan, 1.0, 8.0, 8.0, 4.0, 2.0, 4.0, 5.0, 0.0, 6.0, 2.0, 5.0, 6.0, 4.0, 4.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-10-n3] _________________

n = 100000, m = 10, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [2.0, 5.0, 9.0, 3.0, 0.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 7.0, 5.0, 5.0, 0.0, 5.0, 7.0, 5.0, 3.0, 4.0, 4.0, 1.0, 8.0, 5.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 5.0, 8.0, 8.0, 0.0, 1.0, 4.0, 8.0, 1.0, 7.0, 7.0, 6.0, 4.0, 0.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 7.0, 1.0, 3.0, 9.0, 9.0, 8.0, 6.0, 4.0, 3.0, 4.0, 5.0, 5.0, 2.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 4.0, 7.0, 6.0, 7.0, 5.0, 9.0, 4.0, 4.0, 3.0, 0.0, 7.0, 7.0, 1.0, 0.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 4.0, 2.0, 7.0, 3.0, 9.0, 6.0, 3.0, 5.0, 1.0, 5.0, 8.0, 6.0, ...]
E   [right]: [2.0, 5.0, 9.0, 3.0, 0.0, 4.0, 1.0, nan, nan, nan, 3.0, 7.0, 5.0, 5.0, 0.0, 5.0, 7.0, 5.0, 3.0, 4.0, 4.0, 1.0, 8.0, 5.0, 4.0, 4.0, nan, nan, nan, 1.0, 9.0, 5.0, 8.0, 8.0, 0.0, 1.0, 4.0, 8.0, 1.0, 7.0, 7.0, 6.0, 4.0, 0.0, 2.0, nan, nan, nan, 2.0, 7.0, 1.0, 3.0, 9.0, 9.0, 8.0, 6.0, 4.0, 3.0, 4.0, 5.0, 5.0, 2.0, 9.0, 2.0, nan, nan, nan, 2.0, 4.0, 7.0, 6.0, 7.0, 5.0, 9.0, 4.0, 4.0, 3.0, 0.0, 7.0, 7.0, 1.0, 0.0, 7.0, nan, nan, nan, 6.0, 9.0, 4.0, 2.0, 7.0, 3.0, 9.0, 6.0, 3.0, 5.0, 1.0, 5.0, 8.0, 6.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-100-n0] ________________

n = 100, m = 100, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [54.0, 40.0, 5.0, 32.0, 34.0, 25.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 43.0, 42.0, 38.0, 46.0, 74.0, 78.0, 82.0, 62.0, 88.0, 54.0, 13.0, 2.0, 60.0, 82.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 70.0, 98.0, 26.0, 39.0, 71.0, 58.0, 6.0, 5.0, 3.0, 44.0, 13.0, 38.0, 27.0, 74.0, 34.0, 75.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 63.0, 67.0, 83.0, 30.0, 17.0, 35.0, 34.0, 65.0, 11.0, 96.0, 68.0, 82.0, 9.0, 40.0, 98.0, 42.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 49.0, 93.0, 37.0, 99.0, 74.0, 73.0, 35.0, 27.0, 46.0, 45.0, 38.0, 53.0, 96.0, 64.0, 67.0, 86.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 80.0, 31.0, 21.0, 61.0, 6.0, 58.0, 27.0, 85.0, 51.0, 26.0, 12.0, 98.0, 98.0]
E   [right]: [54.0, 40.0, 5.0, 32.0, 34.0, 25.0, 94.0, nan, nan, nan, 52.0, 43.0, 42.0, 38.0, 46.0, 74.0, 78.0, 82.0, 62.0, 88.0, 54.0, 13.0, 2.0, 60.0, 82.0, 82.0, nan, nan, nan, 70.0, 98.0, 26.0, 39.0, 71.0, 58.0, 6.0, 5.0, 3.0, 44.0, 13.0, 38.0, 27.0, 74.0, 34.0, 75.0, nan, nan, nan, 63.0, 67.0, 83.0, 30.0, 17.0, 35.0, 34.0, 65.0, 11.0, 96.0, 68.0, 82.0, 9.0, 40.0, 98.0, 42.0, nan, nan, nan, 49.0, 93.0, 37.0, 99.0, 74.0, 73.0, 35.0, 27.0, 46.0, 45.0, 38.0, 53.0, 96.0, 64.0, 67.0, 86.0, nan, nan, nan, 17.0, 80.0, 31.0, 21.0, 61.0, 6.0, 58.0, 27.0, 85.0, 51.0, 26.0, 12.0, 98.0, 98.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-100-n1] ________________

n = 1000, m = 100, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [81.0, 26.0, 30.0, 14.0, 45.0, 88.0, 14.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 46.0, 93.0, 72.0, 17.0, 19.0, 13.0, 40.0, 46.0, 5.0, 83.0, 71.0, 23.0, 53.0, 68.0, 29.0, 60.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 75.0, 43.0, 79.0, 86.0, 49.0, 28.0, 88.0, 42.0, 91.0, 94.0, 8.0, 68.0, 4.0, 56.0, 83.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 61.0, 84.0, 4.0, 51.0, 22.0, 14.0, 69.0, 28.0, 18.0, 15.0, 60.0, 40.0, 41.0, 7.0, 10.0, 84.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 71.0, 87.0, 18.0, 27.0, 60.0, 55.0, 40.0, 42.0, 34.0, 86.0, 43.0, 22.0, 88.0, 2.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 96.0, 37.0, 90.0, 67.0, 7.0, 90.0, 12.0, 13.0, 82.0, 48.0, 24.0, 60.0, 90.0, 56.0, ...]
E   [right]: [81.0, 26.0, 30.0, 14.0, 45.0, 88.0, 14.0, nan, nan, nan, 46.0, 93.0, 72.0, 17.0, 19.0, 13.0, 40.0, 46.0, 5.0, 83.0, 71.0, 23.0, 53.0, 68.0, 29.0, 60.0, nan, nan, nan, 75.0, 43.0, 79.0, 86.0, 49.0, 28.0, 88.0, 42.0, 91.0, 94.0, 8.0, 68.0, 4.0, 56.0, 83.0, 4.0, nan, nan, nan, 61.0, 84.0, 4.0, 51.0, 22.0, 14.0, 69.0, 28.0, 18.0, 15.0, 60.0, 40.0, 41.0, 7.0, 10.0, 84.0, nan, nan, nan, 12.0, 71.0, 87.0, 18.0, 27.0, 60.0, 55.0, 40.0, 42.0, 34.0, 86.0, 43.0, 22.0, 88.0, 2.0, 82.0, nan, nan, nan, 96.0, 37.0, 90.0, 67.0, 7.0, 90.0, 12.0, 13.0, 82.0, 48.0, 24.0, 60.0, 90.0, 56.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-100-n2] ________________

n = 10000, m = 100, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [79.0, 44.0, 43.0, 24.0, 63.0, 17.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 34.0, 17.0, 52.0, 10.0, 92.0, 37.0, 77.0, 16.0, 2.0, 26.0, 35.0, 49.0, 38.0, 73.0, 92.0, 28.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 38.0, 65.0, 40.0, 61.0, 35.0, 73.0, 35.0, 38.0, 5.0, 80.0, 71.0, 79.0, 24.0, 91.0, 18.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 71.0, 45.0, 98.0, 97.0, 4.0, 74.0, 91.0, 94.0, 57.0, 62.0, 45.0, 41.0, 93.0, 39.0, 25.0, 74.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 41.0, 80.0, 51.0, 5.0, 86.0, 66.0, 66.0, 16.0, 54.0, 3.0, 58.0, 18.0, 29.0, 5.0, 74.0, 43.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 40.0, 53.0, 61.0, 36.0, 74.0, 4.0, 19.0, 2.0, 98.0, 7.0, 17.0, 20.0, 18.0, 69.0, ...]
E   [right]: [79.0, 44.0, 43.0, 24.0, 63.0, 17.0, 3.0, nan, nan, nan, 34.0, 17.0, 52.0, 10.0, 92.0, 37.0, 77.0, 16.0, 2.0, 26.0, 35.0, 49.0, 38.0, 73.0, 92.0, 28.0, nan, nan, nan, 68.0, 38.0, 65.0, 40.0, 61.0, 35.0, 73.0, 35.0, 38.0, 5.0, 80.0, 71.0, 79.0, 24.0, 91.0, 18.0, nan, nan, nan, 71.0, 45.0, 98.0, 97.0, 4.0, 74.0, 91.0, 94.0, 57.0, 62.0, 45.0, 41.0, 93.0, 39.0, 25.0, 74.0, nan, nan, nan, 41.0, 80.0, 51.0, 5.0, 86.0, 66.0, 66.0, 16.0, 54.0, 3.0, 58.0, 18.0, 29.0, 5.0, 74.0, 43.0, nan, nan, nan, 40.0, 53.0, 61.0, 36.0, 74.0, 4.0, 19.0, 2.0, 98.0, 7.0, 17.0, 20.0, 18.0, 69.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-False-100-n3] ________________

n = 100000, m = 100, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [35.0, 86.0, 0.0, 31.0, 89.0, 44.0, 33.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 11.0, 19.0, 80.0, 19.0, 58.0, 31.0, 76.0, 36.0, 21.0, 53.0, 96.0, 40.0, 78.0, 5.0, 25.0, 39.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 56.0, 97.0, 27.0, 92.0, 26.0, 82.0, 41.0, 77.0, 17.0, 64.0, 94.0, 1.0, 63.0, 11.0, 32.0, 17.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 32.0, 11.0, 45.0, 38.0, 52.0, 74.0, 62.0, 25.0, 30.0, 66.0, 58.0, 53.0, 4.0, 81.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 77.0, 48.0, 97.0, 83.0, 50.0, 43.0, 4.0, 70.0, 45.0, 62.0, 65.0, 25.0, 46.0, 87.0, 47.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 85.0, 79.0, 68.0, 80.0, 21.0, 74.0, 73.0, 18.0, 9.0, 5.0, 9.0, 99.0, 5.0, 48.0, ...]
E   [right]: [35.0, 86.0, 0.0, 31.0, 89.0, 44.0, 33.0, nan, nan, nan, 11.0, 19.0, 80.0, 19.0, 58.0, 31.0, 76.0, 36.0, 21.0, 53.0, 96.0, 40.0, 78.0, 5.0, 25.0, 39.0, nan, nan, nan, 56.0, 97.0, 27.0, 92.0, 26.0, 82.0, 41.0, 77.0, 17.0, 64.0, 94.0, 1.0, 63.0, 11.0, 32.0, 17.0, nan, nan, nan, 55.0, 32.0, 11.0, 45.0, 38.0, 52.0, 74.0, 62.0, 25.0, 30.0, 66.0, 58.0, 53.0, 4.0, 81.0, 27.0, nan, nan, nan, 1.0, 77.0, 48.0, 97.0, 83.0, 50.0, 43.0, 4.0, 70.0, 45.0, 62.0, 65.0, 25.0, 46.0, 87.0, 47.0, nan, nan, nan, 85.0, 79.0, 68.0, 80.0, 21.0, 74.0, 73.0, 18.0, 9.0, 5.0, 9.0, 99.0, 5.0, 48.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[True-False-1000-n0] ________________

n = 100, m = 1000, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [102.0, 697.0, 187.0, 600.0, 106.0, 608.0, 920.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 289.0, 445.0, 385.0, 789.0, 718.0, 146.0, 340.0, 379.0, 295.0, 891.0, 110.0, 755.0, 530.0, 302.0, 873.0, 743.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 767.0, 111.0, 853.0, 463.0, 810.0, 460.0, 641.0, 752.0, 524.0, 800.0, 674.0, 838.0, 790.0, 516.0, 642.0, 32.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 523.0, 707.0, 39.0, 296.0, 295.0, 880.0, 812.0, 663.0, 498.0, 317.0, 47.0, 456.0, 225.0, 432.0, 62.0, 492.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 663.0, 777.0, 629.0, 754.0, 382.0, 475.0, 534.0, 647.0, 746.0, 371.0, 521.0, 937.0, 49.0, 672.0, 406.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 513.0, 468.0, 587.0, 720.0, 993.0, 104.0, 350.0, 56.0, 765.0, 603.0, 732.0, 438.0, 435.0, 147.0]
E   [right]: [102.0, 697.0, 187.0, 600.0, 106.0, 608.0, 920.0, nan, nan, nan, 289.0, 445.0, 385.0, 789.0, 718.0, 146.0, 340.0, 379.0, 295.0, 891.0, 110.0, 755.0, 530.0, 302.0, 873.0, 743.0, nan, nan, nan, 767.0, 111.0, 853.0, 463.0, 810.0, 460.0, 641.0, 752.0, 524.0, 800.0, 674.0, 838.0, 790.0, 516.0, 642.0, 32.0, nan, nan, nan, 523.0, 707.0, 39.0, 296.0, 295.0, 880.0, 812.0, 663.0, 498.0, 317.0, 47.0, 456.0, 225.0, 432.0, 62.0, 492.0, nan, nan, nan, 39.0, 663.0, 777.0, 629.0, 754.0, 382.0, 475.0, 534.0, 647.0, 746.0, 371.0, 521.0, 937.0, 49.0, 672.0, 406.0, nan, nan, nan, 513.0, 468.0, 587.0, 720.0, 993.0, 104.0, 350.0, 56.0, 765.0, 603.0, 732.0, 438.0, 435.0, 147.0]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[True-False-1000-n1] ________________

n = 1000, m = 1000, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [661.0, 922.0, 276.0, 957.0, 252.0, 16.0, 878.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 485.0, 298.0, 21.0, 838.0, 991.0, 497.0, 266.0, 878.0, 60.0, 278.0, 114.0, 285.0, 340.0, 565.0, 177.0, 119.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 986.0, 355.0, 979.0, 568.0, 979.0, 561.0, 896.0, 989.0, 41.0, 512.0, 265.0, 823.0, 324.0, 711.0, 13.0, 266.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 246.0, 949.0, 738.0, 140.0, 414.0, 386.0, 873.0, 993.0, 338.0, 169.0, 853.0, 929.0, 273.0, 885.0, 80.0, 950.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 834.0, 424.0, 353.0, 527.0, 68.0, 781.0, 892.0, 190.0, 694.0, 553.0, 292.0, 741.0, 859.0, 890.0, 393.0, 952.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 535.0, 0.0, 865.0, 730.0, 969.0, 50.0, 575.0, 912.0, 532.0, 202.0, 406.0, 593.0, 839.0, 54.0, ...]
E   [right]: [661.0, 922.0, 276.0, 957.0, 252.0, 16.0, 878.0, nan, nan, nan, 485.0, 298.0, 21.0, 838.0, 991.0, 497.0, 266.0, 878.0, 60.0, 278.0, 114.0, 285.0, 340.0, 565.0, 177.0, 119.0, nan, nan, nan, 986.0, 355.0, 979.0, 568.0, 979.0, 561.0, 896.0, 989.0, 41.0, 512.0, 265.0, 823.0, 324.0, 711.0, 13.0, 266.0, nan, nan, nan, 246.0, 949.0, 738.0, 140.0, 414.0, 386.0, 873.0, 993.0, 338.0, 169.0, 853.0, 929.0, 273.0, 885.0, 80.0, 950.0, nan, nan, nan, 834.0, 424.0, 353.0, 527.0, 68.0, 781.0, 892.0, 190.0, 694.0, 553.0, 292.0, 741.0, 859.0, 890.0, 393.0, 952.0, nan, nan, nan, 535.0, 0.0, 865.0, 730.0, 969.0, 50.0, 575.0, 912.0, 532.0, 202.0, 406.0, 593.0, 839.0, 54.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[True-False-1000-n2] ________________

n = 10000, m = 1000, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [219.0, 172.0, 739.0, 788.0, 171.0, 790.0, 709.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 759.0, 777.0, 226.0, 595.0, 791.0, 910.0, 611.0, 367.0, 613.0, 977.0, 459.0, 890.0, 229.0, 845.0, 91.0, 983.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 711.0, 755.0, 105.0, 80.0, 601.0, 855.0, 82.0, 940.0, 422.0, 487.0, 961.0, 892.0, 583.0, 216.0, 60.0, 349.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 858.0, 738.0, 951.0, 185.0, 614.0, 37.0, 897.0, 123.0, 212.0, 415.0, 547.0, 578.0, 701.0, 448.0, 758.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 389.0, 794.0, 778.0, 14.0, 514.0, 313.0, 742.0, 326.0, 796.0, 834.0, 37.0, 239.0, 143.0, 157.0, 287.0, 72.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 32.0, 912.0, 308.0, 342.0, 93.0, 821.0, 184.0, 263.0, 153.0, 379.0, 350.0, 616.0, 684.0, 217.0, ...]
E   [right]: [219.0, 172.0, 739.0, 788.0, 171.0, 790.0, 709.0, nan, nan, nan, 759.0, 777.0, 226.0, 595.0, 791.0, 910.0, 611.0, 367.0, 613.0, 977.0, 459.0, 890.0, 229.0, 845.0, 91.0, 983.0, nan, nan, nan, 711.0, 755.0, 105.0, 80.0, 601.0, 855.0, 82.0, 940.0, 422.0, 487.0, 961.0, 892.0, 583.0, 216.0, 60.0, 349.0, nan, nan, nan, 3.0, 858.0, 738.0, 951.0, 185.0, 614.0, 37.0, 897.0, 123.0, 212.0, 415.0, 547.0, 578.0, 701.0, 448.0, 758.0, nan, nan, nan, 389.0, 794.0, 778.0, 14.0, 514.0, 313.0, 742.0, 326.0, 796.0, 834.0, 37.0, 239.0, 143.0, 157.0, 287.0, 72.0, nan, nan, nan, 32.0, 912.0, 308.0, 342.0, 93.0, 821.0, 184.0, 263.0, 153.0, 379.0, 350.0, 616.0, 684.0, 217.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_______________ test_series_groupby_nunique[True-False-1000-n3] ________________

n = 100000, m = 1000, sort = False, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [44.0, 319.0, 82.0, 488.0, 630.0, 857.0, 773.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 484.0, 7.0, 652.0, 624.0, 789.0, 491.0, 44.0, 909.0, 266.0, 849.0, 22.0, 956.0, 35.0, 795.0, 718.0, 944.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 526.0, 527.0, 909.0, 931.0, 857.0, 352.0, 639.0, 306.0, 707.0, 146.0, 1.0, 795.0, 473.0, 464.0, 20.0, 533.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 581.0, 690.0, 799.0, 811.0, 127.0, 774.0, 433.0, 656.0, 339.0, 970.0, 194.0, 880.0, 723.0, 391.0, 714.0, 136.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 903.0, 335.0, 974.0, 578.0, 393.0, 265.0, 959.0, 459.0, 102.0, 657.0, 938.0, 513.0, 797.0, 253.0, 853.0, 609.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 74.0, 452.0, 176.0, 922.0, 270.0, 539.0, 479.0, 749.0, 977.0, 392.0, 815.0, 634.0, 867.0, 606.0, ...]
E   [right]: [44.0, 319.0, 82.0, 488.0, 630.0, 857.0, 773.0, nan, nan, nan, 484.0, 7.0, 652.0, 624.0, 789.0, 491.0, 44.0, 909.0, 266.0, 849.0, 22.0, 956.0, 35.0, 795.0, 718.0, 944.0, nan, nan, nan, 526.0, 527.0, 909.0, 931.0, 857.0, 352.0, 639.0, 306.0, 707.0, 146.0, 1.0, 795.0, 473.0, 464.0, 20.0, 533.0, nan, nan, nan, 581.0, 690.0, 799.0, 811.0, 127.0, 774.0, 433.0, 656.0, 339.0, 970.0, 194.0, 880.0, 723.0, 391.0, 714.0, 136.0, nan, nan, nan, 903.0, 335.0, 974.0, 578.0, 393.0, 265.0, 959.0, 459.0, 102.0, 657.0, 938.0, 513.0, 797.0, 253.0, 853.0, 609.0, nan, nan, nan, 74.0, 452.0, 176.0, 922.0, 270.0, 539.0, 479.0, 749.0, 977.0, 392.0, 815.0, 634.0, 867.0, 606.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_________________ test_series_groupby_nunique[True-True-10-n0] _________________

n = 100, m = 10, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [8.0, 0.0, 8.0, 4.0, 7.0, 1.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 5.0, 4.0, 6.0, 9.0, 3.0, 4.0, 5.0, 5.0, 0.0, 1.0, 4.0, 5.0, 5.0, 4.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 5.0, 6.0, 9.0, 1.0, 9.0, 7.0, 8.0, 4.0, 4.0, 3.0, 2.0, 5.0, 7.0, 8.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 7.0, 8.0, 0.0, 6.0, 5.0, 8.0, 9.0, 0.0, 1.0, 8.0, 0.0, 9.0, 6.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 9.0, 4.0, 6.0, 8.0, 3.0, 4.0, 2.0, 0.0, 3.0, 0.0, 1.0, 6.0, 5.0, 5.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 0.0, 2.0, 6.0, 7.0, 4.0, 5.0, 2.0, 2.0, 6.0, 9.0, 4.0, 9.0, 6.0]
E   [right]: [8.0, 0.0, 8.0, 4.0, 7.0, 1.0, 7.0, nan, nan, nan, 6.0, 5.0, 4.0, 6.0, 9.0, 3.0, 4.0, 5.0, 5.0, 0.0, 1.0, 4.0, 5.0, 5.0, 4.0, 7.0, nan, nan, nan, 9.0, 5.0, 6.0, 9.0, 1.0, 9.0, 7.0, 8.0, 4.0, 4.0, 3.0, 2.0, 5.0, 7.0, 8.0, 1.0, nan, nan, nan, 2.0, 7.0, 8.0, 0.0, 6.0, 5.0, 8.0, 9.0, 0.0, 1.0, 8.0, 0.0, 9.0, 6.0, 1.0, 8.0, nan, nan, nan, 3.0, 9.0, 4.0, 6.0, 8.0, 3.0, 4.0, 2.0, 0.0, 3.0, 0.0, 1.0, 6.0, 5.0, 5.0, 8.0, nan, nan, nan, 2.0, 0.0, 2.0, 6.0, 7.0, 4.0, 5.0, 2.0, 2.0, 6.0, 9.0, 4.0, 9.0, 6.0]

pandas/_libs/testing.pyx:174: AssertionError
_________________ test_series_groupby_nunique[True-True-10-n1] _________________

n = 1000, m = 10, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [3.0, 0.0, 4.0, 1.0, 1.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 5.0, 5.0, 3.0, 2.0, 9.0, 6.0, 9.0, 8.0, 9.0, 0.0, 9.0, 1.0, 9.0, 4.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 6.0, 2.0, 3.0, 7.0, 8.0, 3.0, 0.0, 7.0, 3.0, 6.0, 3.0, 7.0, 0.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 4.0, 2.0, 1.0, 6.0, 0.0, 0.0, 5.0, 2.0, 7.0, 0.0, 6.0, 6.0, 0.0, 5.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 4.0, 7.0, 5.0, 7.0, 1.0, 8.0, 3.0, 4.0, 5.0, 0.0, 7.0, 3.0, 2.0, 9.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 3.0, 9.0, 2.0, 5.0, 7.0, 9.0, 8.0, 7.0, 2.0, 7.0, 2.0, 2.0, ...]
E   [right]: [3.0, 0.0, 4.0, 1.0, 1.0, 3.0, 1.0, nan, nan, nan, 3.0, 5.0, 5.0, 3.0, 2.0, 9.0, 6.0, 9.0, 8.0, 9.0, 0.0, 9.0, 1.0, 9.0, 4.0, 8.0, nan, nan, nan, 9.0, 7.0, 6.0, 2.0, 3.0, 7.0, 8.0, 3.0, 0.0, 7.0, 3.0, 6.0, 3.0, 7.0, 0.0, 6.0, nan, nan, nan, 4.0, 4.0, 2.0, 1.0, 6.0, 0.0, 0.0, 5.0, 2.0, 7.0, 0.0, 6.0, 6.0, 0.0, 5.0, 8.0, nan, nan, nan, 9.0, 4.0, 7.0, 5.0, 7.0, 1.0, 8.0, 3.0, 4.0, 5.0, 0.0, 7.0, 3.0, 2.0, 9.0, 0.0, nan, nan, nan, 1.0, 9.0, 3.0, 9.0, 2.0, 5.0, 7.0, 9.0, 8.0, 7.0, 2.0, 7.0, 2.0, 2.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_________________ test_series_groupby_nunique[True-True-10-n2] _________________

n = 10000, m = 10, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [8.0, 5.0, 7.0, 0.0, 4.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 9.0, 1.0, 7.0, 4.0, 3.0, 1.0, 4.0, 7.0, 9.0, 7.0, 2.0, 8.0, 9.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 5.0, 5.0, 5.0, 0.0, 1.0, 0.0, 4.0, 4.0, 4.0, 0.0, 7.0, 4.0, 8.0, 5.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 7.0, 6.0, 3.0, 2.0, 7.0, 6.0, 0.0, 4.0, 4.0, 9.0, 5.0, 3.0, 5.0, 5.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 1.0, 1.0, 5.0, 4.0, 4.0, 8.0, 7.0, 5.0, 0.0, 3.0, 2.0, 0.0, 8.0, 4.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 3.0, 7.0, 0.0, 2.0, 3.0, 5.0, 1.0, 8.0, 8.0, 6.0, 8.0, 8.0, 2.0, ...]
E   [right]: [8.0, 5.0, 7.0, 0.0, 4.0, 2.0, 1.0, nan, nan, nan, 5.0, 9.0, 1.0, 7.0, 4.0, 3.0, 1.0, 4.0, 7.0, 9.0, 7.0, 2.0, 8.0, 9.0, 4.0, 6.0, nan, nan, nan, 1.0, 5.0, 5.0, 5.0, 0.0, 1.0, 0.0, 4.0, 4.0, 4.0, 0.0, 7.0, 4.0, 8.0, 5.0, 0.0, nan, nan, nan, 8.0, 7.0, 6.0, 3.0, 2.0, 7.0, 6.0, 0.0, 4.0, 4.0, 9.0, 5.0, 3.0, 5.0, 5.0, 7.0, nan, nan, nan, 7.0, 1.0, 1.0, 5.0, 4.0, 4.0, 8.0, 7.0, 5.0, 0.0, 3.0, 2.0, 0.0, 8.0, 4.0, 9.0, nan, nan, nan, 0.0, 3.0, 7.0, 0.0, 2.0, 3.0, 5.0, 1.0, 8.0, 8.0, 6.0, 8.0, 8.0, 2.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
_________________ test_series_groupby_nunique[True-True-10-n3] _________________

n = 100000, m = 10, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [3.0, 8.0, 8.0, 8.0, 3.0, 3.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 5.0, 6.0, 9.0, 4.0, 0.0, 6.0, 6.0, 5.0, 0.0, 5.0, 7.0, 5.0, 8.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 0.0, 5.0, 6.0, 7.0, 7.0, 3.0, 5.0, 0.0, 3.0, 4.0, 8.0, 2.0, 9.0, 5.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 3.0, 9.0, 7.0, 9.0, 5.0, 2.0, 7.0, 6.0, 8.0, 3.0, 7.0, 8.0, 5.0, 3.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 9.0, 1.0, 7.0, 6.0, 9.0, 2.0, 2.0, 6.0, 5.0, 8.0, 4.0, 7.0, 4.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 8.0, 8.0, 3.0, 9.0, 0.0, 2.0, 8.0, 9.0, 9.0, 9.0, 7.0, 4.0, 8.0, ...]
E   [right]: [3.0, 8.0, 8.0, 8.0, 3.0, 3.0, 5.0, nan, nan, nan, 0.0, 7.0, 5.0, 6.0, 9.0, 4.0, 0.0, 6.0, 6.0, 5.0, 0.0, 5.0, 7.0, 5.0, 8.0, 8.0, nan, nan, nan, 6.0, 0.0, 5.0, 6.0, 7.0, 7.0, 3.0, 5.0, 0.0, 3.0, 4.0, 8.0, 2.0, 9.0, 5.0, 3.0, nan, nan, nan, 5.0, 3.0, 9.0, 7.0, 9.0, 5.0, 2.0, 7.0, 6.0, 8.0, 3.0, 7.0, 8.0, 5.0, 3.0, 2.0, nan, nan, nan, 4.0, 3.0, 9.0, 1.0, 7.0, 6.0, 9.0, 2.0, 2.0, 6.0, 5.0, 8.0, 4.0, 7.0, 4.0, 5.0, nan, nan, nan, 6.0, 8.0, 8.0, 3.0, 9.0, 0.0, 2.0, 8.0, 9.0, 9.0, 9.0, 7.0, 4.0, 8.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-100-n0] _________________

n = 100, m = 100, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [7.0, 50.0, 75.0, 30.0, 52.0, 32.0, 11.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 49.0, 36.0, 47.0, 52.0, 85.0, 50.0, 51.0, 38.0, 49.0, 88.0, 64.0, 64.0, 45.0, 99.0, 37.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 83.0, 11.0, 26.0, 70.0, 13.0, 15.0, 32.0, 90.0, 31.0, 13.0, 87.0, 63.0, 89.0, 25.0, 33.0, 15.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 9.0, 54.0, 14.0, 36.0, 57.0, 5.0, 74.0, 94.0, 67.0, 83.0, 53.0, 70.0, 55.0, 83.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 83.0, 61.0, 40.0, 75.0, 89.0, 64.0, 99.0, 30.0, 71.0, 44.0, 66.0, 88.0, 42.0, 74.0, 63.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 7.0, 60.0, 13.0, 30.0, 43.0, 50.0, 38.0, 38.0, 18.0, 91.0, 31.0, 8.0, 5.0]
E   [right]: [7.0, 50.0, 75.0, 30.0, 52.0, 32.0, 11.0, nan, nan, nan, 17.0, 49.0, 36.0, 47.0, 52.0, 85.0, 50.0, 51.0, 38.0, 49.0, 88.0, 64.0, 64.0, 45.0, 99.0, 37.0, nan, nan, nan, 83.0, 11.0, 26.0, 70.0, 13.0, 15.0, 32.0, 90.0, 31.0, 13.0, 87.0, 63.0, 89.0, 25.0, 33.0, 15.0, nan, nan, nan, 44.0, 9.0, 54.0, 14.0, 36.0, 57.0, 5.0, 74.0, 94.0, 67.0, 83.0, 53.0, 70.0, 55.0, 83.0, 99.0, nan, nan, nan, 83.0, 61.0, 40.0, 75.0, 89.0, 64.0, 99.0, 30.0, 71.0, 44.0, 66.0, 88.0, 42.0, 74.0, 63.0, 38.0, nan, nan, nan, 31.0, 7.0, 60.0, 13.0, 30.0, 43.0, 50.0, 38.0, 38.0, 18.0, 91.0, 31.0, 8.0, 5.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-100-n1] _________________

n = 1000, m = 100, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [33.0, 62.0, 63.0, 40.0, 58.0, 61.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 23.0, 20.0, 96.0, 75.0, 5.0, 55.0, 18.0, 81.0, 21.0, 5.0, 81.0, 49.0, 51.0, 2.0, 23.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 84.0, 28.0, 6.0, 18.0, 86.0, 93.0, 16.0, 31.0, 75.0, 19.0, 46.0, 1.0, 86.0, 98.0, 69.0, 93.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 87.0, 75.0, 34.0, 15.0, 74.0, 87.0, 17.0, 81.0, 78.0, 40.0, 71.0, 72.0, 54.0, 85.0, 90.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 46.0, 65.0, 55.0, 63.0, 59.0, 21.0, 17.0, 88.0, 41.0, 82.0, 24.0, 96.0, 77.0, 16.0, 20.0, 45.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 36.0, 27.0, 89.0, 92.0, 79.0, 50.0, 68.0, 78.0, 44.0, 69.0, 26.0, 50.0, 53.0, 64.0, ...]
E   [right]: [33.0, 62.0, 63.0, 40.0, 58.0, 61.0, 94.0, nan, nan, nan, 39.0, 23.0, 20.0, 96.0, 75.0, 5.0, 55.0, 18.0, 81.0, 21.0, 5.0, 81.0, 49.0, 51.0, 2.0, 23.0, nan, nan, nan, 84.0, 28.0, 6.0, 18.0, 86.0, 93.0, 16.0, 31.0, 75.0, 19.0, 46.0, 1.0, 86.0, 98.0, 69.0, 93.0, nan, nan, nan, 9.0, 87.0, 75.0, 34.0, 15.0, 74.0, 87.0, 17.0, 81.0, 78.0, 40.0, 71.0, 72.0, 54.0, 85.0, 90.0, nan, nan, nan, 46.0, 65.0, 55.0, 63.0, 59.0, 21.0, 17.0, 88.0, 41.0, 82.0, 24.0, 96.0, 77.0, 16.0, 20.0, 45.0, nan, nan, nan, 36.0, 27.0, 89.0, 92.0, 79.0, 50.0, 68.0, 78.0, 44.0, 69.0, 26.0, 50.0, 53.0, 64.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-100-n2] _________________

n = 10000, m = 100, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [48.0, 28.0, 62.0, 2.0, 19.0, 14.0, 10.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 26.0, 35.0, 49.0, 8.0, 17.0, 12.0, 86.0, 62.0, 36.0, 40.0, 76.0, 40.0, 37.0, 81.0, 78.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 23.0, 83.0, 59.0, 52.0, 60.0, 88.0, 91.0, 54.0, 87.0, 35.0, 34.0, 12.0, 23.0, 76.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 50.0, 74.0, 2.0, 49.0, 11.0, 16.0, 30.0, 9.0, 17.0, 69.0, 80.0, 11.0, 37.0, 34.0, 26.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 22.0, 42.0, 62.0, 34.0, 17.0, 13.0, 3.0, 39.0, 53.0, 0.0, 77.0, 91.0, 73.0, 7.0, 14.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 35.0, 37.0, 71.0, 57.0, 75.0, 60.0, 93.0, 90.0, 25.0, 8.0, 18.0, 90.0, 89.0, 90.0, ...]
E   [right]: [48.0, 28.0, 62.0, 2.0, 19.0, 14.0, 10.0, nan, nan, nan, 22.0, 26.0, 35.0, 49.0, 8.0, 17.0, 12.0, 86.0, 62.0, 36.0, 40.0, 76.0, 40.0, 37.0, 81.0, 78.0, nan, nan, nan, 2.0, 23.0, 83.0, 59.0, 52.0, 60.0, 88.0, 91.0, 54.0, 87.0, 35.0, 34.0, 12.0, 23.0, 76.0, 3.0, nan, nan, nan, 17.0, 50.0, 74.0, 2.0, 49.0, 11.0, 16.0, 30.0, 9.0, 17.0, 69.0, 80.0, 11.0, 37.0, 34.0, 26.0, nan, nan, nan, 12.0, 22.0, 42.0, 62.0, 34.0, 17.0, 13.0, 3.0, 39.0, 53.0, 0.0, 77.0, 91.0, 73.0, 7.0, 14.0, nan, nan, nan, 35.0, 37.0, 71.0, 57.0, 75.0, 60.0, 93.0, 90.0, 25.0, 8.0, 18.0, 90.0, 89.0, 90.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-100-n3] _________________

n = 100000, m = 100, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [78.0, 15.0, 65.0, 78.0, 77.0, 96.0, 77.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 37.0, 36.0, 48.0, 85.0, 44.0, 80.0, 7.0, 20.0, 97.0, 63.0, 4.0, 57.0, 2.0, 85.0, 9.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 83.0, 52.0, 88.0, 78.0, 85.0, 97.0, 47.0, 90.0, 87.0, 36.0, 87.0, 21.0, 44.0, 78.0, 18.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 84.0, 24.0, 37.0, 18.0, 62.0, 44.0, 82.0, 45.0, 27.0, 22.0, 16.0, 72.0, 78.0, 32.0, 16.0, 76.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 28.0, 87.0, 66.0, 61.0, 0.0, 34.0, 84.0, 45.0, 55.0, 11.0, 6.0, 96.0, 87.0, 64.0, 84.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 59.0, 97.0, 73.0, 48.0, 19.0, 20.0, 13.0, 53.0, 24.0, 14.0, 18.0, 16.0, 97.0, 27.0, ...]
E   [right]: [78.0, 15.0, 65.0, 78.0, 77.0, 96.0, 77.0, nan, nan, nan, 37.0, 36.0, 48.0, 85.0, 44.0, 80.0, 7.0, 20.0, 97.0, 63.0, 4.0, 57.0, 2.0, 85.0, 9.0, 82.0, nan, nan, nan, 22.0, 83.0, 52.0, 88.0, 78.0, 85.0, 97.0, 47.0, 90.0, 87.0, 36.0, 87.0, 21.0, 44.0, 78.0, 18.0, nan, nan, nan, 84.0, 24.0, 37.0, 18.0, 62.0, 44.0, 82.0, 45.0, 27.0, 22.0, 16.0, 72.0, 78.0, 32.0, 16.0, 76.0, nan, nan, nan, 28.0, 87.0, 66.0, 61.0, 0.0, 34.0, 84.0, 45.0, 55.0, 11.0, 6.0, 96.0, 87.0, 64.0, 84.0, 25.0, nan, nan, nan, 59.0, 97.0, 73.0, 48.0, 19.0, 20.0, 13.0, 53.0, 24.0, 14.0, 18.0, 16.0, 97.0, 27.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-1000-n0] ________________

n = 100, m = 1000, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.0 %)
E   [left]:  [538.0, 675.0, 131.0, 359.0, 545.0, 189.0, 241.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 27.0, 924.0, 334.0, 65.0, 499.0, 142.0, 179.0, 177.0, 885.0, 326.0, 221.0, 576.0, 752.0, 941.0, 287.0, 52.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 896.0, 479.0, 833.0, 482.0, 129.0, 595.0, 27.0, 60.0, 899.0, 208.0, 689.0, 380.0, 424.0, 291.0, 450.0, 493.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 563.0, 948.0, 412.0, 342.0, 230.0, 457.0, 933.0, 789.0, 390.0, 586.0, 735.0, 890.0, 182.0, 866.0, 534.0, 809.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 571.0, 42.0, 457.0, 5.0, 86.0, 469.0, 687.0, 294.0, 634.0, 873.0, 765.0, 567.0, 374.0, 885.0, 790.0, 788.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 648.0, 412.0, 356.0, 938.0, 552.0, 722.0, 422.0, 550.0, 828.0, 573.0, 737.0, 308.0, 506.0, 696.0]
E   [right]: [538.0, 675.0, 131.0, 359.0, 545.0, 189.0, 241.0, nan, nan, nan, 27.0, 924.0, 334.0, 65.0, 499.0, 142.0, 179.0, 177.0, 885.0, 326.0, 221.0, 576.0, 752.0, 941.0, 287.0, 52.0, nan, nan, nan, 896.0, 479.0, 833.0, 482.0, 129.0, 595.0, 27.0, 60.0, 899.0, 208.0, 689.0, 380.0, 424.0, 291.0, 450.0, 493.0, nan, nan, nan, 563.0, 948.0, 412.0, 342.0, 230.0, 457.0, 933.0, 789.0, 390.0, 586.0, 735.0, 890.0, 182.0, 866.0, 534.0, 809.0, nan, nan, nan, 571.0, 42.0, 457.0, 5.0, 86.0, 469.0, 687.0, 294.0, 634.0, 873.0, 765.0, 567.0, 374.0, 885.0, 790.0, 788.0, nan, nan, nan, 648.0, 412.0, 356.0, 938.0, 552.0, 722.0, 422.0, 550.0, 828.0, 573.0, 737.0, 308.0, 506.0, 696.0]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-1000-n1] ________________

n = 1000, m = 1000, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.9 %)
E   [left]:  [249.0, 912.0, 808.0, 970.0, 149.0, 694.0, 428.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 335.0, 176.0, 272.0, 692.0, 333.0, 145.0, 637.0, 60.0, 760.0, 865.0, 607.0, 248.0, 160.0, 579.0, 814.0, 581.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 410.0, 746.0, 527.0, 510.0, 233.0, 570.0, 172.0, 272.0, 258.0, 635.0, 783.0, 887.0, 775.0, 731.0, 38.0, 154.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 382.0, 998.0, 54.0, 855.0, 141.0, 200.0, 681.0, 335.0, 263.0, 747.0, 657.0, 738.0, 684.0, 879.0, 69.0, 688.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 476.0, 550.0, 609.0, 515.0, 424.0, 895.0, 127.0, 439.0, 785.0, 576.0, 963.0, 849.0, 711.0, 711.0, 845.0, 474.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 136.0, 655.0, 349.0, 454.0, 763.0, 967.0, 833.0, 736.0, 24.0, 115.0, 35.0, 298.0, 832.0, 541.0, ...]
E   [right]: [249.0, 912.0, 808.0, 970.0, 149.0, 694.0, 428.0, nan, nan, nan, 335.0, 176.0, 272.0, 692.0, 333.0, 145.0, 637.0, 60.0, 760.0, 865.0, 607.0, 248.0, 160.0, 579.0, 814.0, 581.0, nan, nan, nan, 410.0, 746.0, 527.0, 510.0, 233.0, 570.0, 172.0, 272.0, 258.0, 635.0, 783.0, 887.0, 775.0, 731.0, 38.0, 154.0, nan, nan, nan, 382.0, 998.0, 54.0, 855.0, 141.0, 200.0, 681.0, 335.0, 263.0, 747.0, 657.0, 738.0, 684.0, 879.0, 69.0, 688.0, nan, nan, nan, 476.0, 550.0, 609.0, 515.0, 424.0, 895.0, 127.0, 439.0, 785.0, 576.0, 963.0, 849.0, 711.0, 711.0, 845.0, 474.0, nan, nan, nan, 136.0, 655.0, 349.0, 454.0, 763.0, 967.0, 833.0, 736.0, 24.0, 115.0, 35.0, 298.0, 832.0, 541.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-1000-n2] ________________

n = 10000, m = 1000, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.78 %)
E   [left]:  [793.0, 379.0, 631.0, 4.0, 785.0, 778.0, 350.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 120.0, 538.0, 280.0, 320.0, 569.0, 80.0, 281.0, 105.0, 568.0, 20.0, 534.0, 665.0, 807.0, 924.0, 361.0, 648.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 751.0, 475.0, 92.0, 60.0, 145.0, 961.0, 994.0, 502.0, 951.0, 547.0, 624.0, 901.0, 416.0, 379.0, 945.0, 408.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 119.0, 356.0, 680.0, 255.0, 761.0, 903.0, 309.0, 773.0, 801.0, 875.0, 75.0, 176.0, 602.0, 721.0, 452.0, 407.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 325.0, 905.0, 583.0, 581.0, 986.0, 819.0, 672.0, 108.0, 0.0, 217.0, 958.0, 204.0, 670.0, 202.0, 240.0, 771.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 124.0, 120.0, 762.0, 651.0, 516.0, 204.0, 903.0, 833.0, 729.0, 406.0, 417.0, 697.0, 17.0, 826.0, ...]
E   [right]: [793.0, 379.0, 631.0, 4.0, 785.0, 778.0, 350.0, nan, nan, nan, 120.0, 538.0, 280.0, 320.0, 569.0, 80.0, 281.0, 105.0, 568.0, 20.0, 534.0, 665.0, 807.0, 924.0, 361.0, 648.0, nan, nan, nan, 751.0, 475.0, 92.0, 60.0, 145.0, 961.0, 994.0, 502.0, 951.0, 547.0, 624.0, 901.0, 416.0, 379.0, 945.0, 408.0, nan, nan, nan, 119.0, 356.0, 680.0, 255.0, 761.0, 903.0, 309.0, 773.0, 801.0, 875.0, 75.0, 176.0, 602.0, 721.0, 452.0, 407.0, nan, nan, nan, 325.0, 905.0, 583.0, 581.0, 986.0, 819.0, 672.0, 108.0, 0.0, 217.0, 958.0, 204.0, 670.0, 202.0, 240.0, 771.0, nan, nan, nan, 124.0, 120.0, 762.0, 651.0, 516.0, 204.0, 903.0, 833.0, 729.0, 406.0, 417.0, 697.0, 17.0, 826.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
________________ test_series_groupby_nunique[True-True-1000-n3] ________________

n = 100000, m = 1000, sort = True, dropna = True

    @pytest.mark.parametrize("n", 10 ** np.arange(2, 6))
    @pytest.mark.parametrize("m", [10, 100, 1000])
    @pytest.mark.parametrize("sort", [False, True])
    @pytest.mark.parametrize("dropna", [False, True])
    def test_series_groupby_nunique(n, m, sort, dropna):
        def check_nunique(df, keys, as_index=True):
            original_df = df.copy()
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            left = gr["julie"].nunique(dropna=dropna)
    
            gr = df.groupby(keys, as_index=as_index, sort=sort)
            right = gr["julie"].apply(Series.nunique, dropna=dropna)
            if not as_index:
                right = right.reset_index(drop=True)
    
            tm.assert_series_equal(left, right, check_names=False)
            tm.assert_frame_equal(df, original_df)
    
        days = date_range("2015-08-23", periods=10)
    
        frame = DataFrame(
            {
                "jim": np.random.choice(list(ascii_lowercase), n),
                "joe": np.random.choice(days, n),
                "julie": np.random.randint(0, m, n),
            }
        )
    
        check_nunique(frame, ["jim"])
        check_nunique(frame, ["jim", "joe"])
    
        frame.loc[1::17, "jim"] = None
        frame.loc[3::37, "joe"] = None
        frame.loc[7::19, "julie"] = None
        frame.loc[8::19, "julie"] = None
        frame.loc[9::19, "julie"] = None
    
>       check_nunique(frame, ["jim"])

pandas/tests/groupby/test_function.py:1051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/groupby/test_function.py:1030: in check_nunique
    tm.assert_frame_equal(df, original_df)
pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal
    cpdef assert_almost_equal(a, b,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise_assert_detail(obj, msg, lobj, robj)
E   AssertionError: DataFrame.iloc[:, 2] (column name="julie") are different
E   
E   DataFrame.iloc[:, 2] (column name="julie") values are different (15.789 %)
E   [left]:  [849.0, 258.0, 146.0, 80.0, 16.0, 396.0, 754.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 734.0, 627.0, 502.0, 535.0, 530.0, 232.0, 958.0, 903.0, 592.0, 862.0, 204.0, 892.0, 463.0, 450.0, 123.0, 373.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 232.0, 128.0, 605.0, 674.0, 470.0, 470.0, 288.0, 969.0, 609.0, 425.0, 978.0, 114.0, 784.0, 801.0, 45.0, 861.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 674.0, 337.0, 72.0, 402.0, 424.0, 600.0, 392.0, 104.0, 484.0, 573.0, 102.0, 342.0, 945.0, 740.0, 605.0, 237.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 674.0, 575.0, 128.0, 879.0, 411.0, 522.0, 150.0, 57.0, 958.0, 334.0, 96.0, 434.0, 593.0, 950.0, 491.0, 828.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 497.0, 252.0, 464.0, 38.0, 863.0, 115.0, 18.0, 29.0, 336.0, 685.0, 691.0, 191.0, 814.0, 676.0, ...]
E   [right]: [849.0, 258.0, 146.0, 80.0, 16.0, 396.0, 754.0, nan, nan, nan, 734.0, 627.0, 502.0, 535.0, 530.0, 232.0, 958.0, 903.0, 592.0, 862.0, 204.0, 892.0, 463.0, 450.0, 123.0, 373.0, nan, nan, nan, 232.0, 128.0, 605.0, 674.0, 470.0, 470.0, 288.0, 969.0, 609.0, 425.0, 978.0, 114.0, 784.0, 801.0, 45.0, 861.0, nan, nan, nan, 674.0, 337.0, 72.0, 402.0, 424.0, 600.0, 392.0, 104.0, 484.0, 573.0, 102.0, 342.0, 945.0, 740.0, 605.0, 237.0, nan, nan, nan, 674.0, 575.0, 128.0, 879.0, 411.0, 522.0, 150.0, 57.0, 958.0, 334.0, 96.0, 434.0, 593.0, 950.0, 491.0, 828.0, nan, nan, nan, 497.0, 252.0, 464.0, 38.0, 863.0, 115.0, 18.0, 29.0, 336.0, 685.0, 691.0, 191.0, 814.0, 676.0, ...]

pandas/_libs/testing.pyx:174: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-10-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-10-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-10-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-10-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-100-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-100-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-100-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-100-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-1000-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-1000-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-1000-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-False-1000-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-10-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-10-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-10-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-10-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-100-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-100-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-100-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-100-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-1000-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-1000-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-1000-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[False-True-1000-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-10-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-10-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-10-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-10-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-100-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-100-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-100-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-100-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-1000-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-1000-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-1000-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-False-1000-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-10-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-10-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-10-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-10-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-100-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-100-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-100-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-100-n3]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-1000-n0]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-1000-n1]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-1000-n2]
FAILED pandas/tests/groupby/test_function.py::test_series_groupby_nunique[True-True-1000-n3]
======================== 48 failed in 82.54s (0:01:22) =========================
