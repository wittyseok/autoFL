[
    {
        "name": "test.task_test.TaskTest.test_tasks_doctest#42",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_tasks_doctest(self)",
        "snippet": "    def test_tasks_doctest(self):\n        doctest.testmod(luigi.task)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_task_to_str_to_task#45",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_task_to_str_to_task(self)",
        "snippet": "    def test_task_to_str_to_task(self):\n        params = dict(\n            param='test',\n            bool_param=True,\n            int_param=666,\n            float_param=123.456,\n            date_param=datetime(2014, 9, 13).date(),\n            datehour_param=datetime(2014, 9, 13, 9),\n            timedelta_param=timedelta(44),  # doesn't support seconds\n            list_param=['in', 'flames'],\n            insignificant_param='test')\n\n        original = DummyTask(**params)\n        other = DummyTask.from_str_params(original.to_str_params())\n        self.assertEqual(original, other)",
        "begin_line": 45,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_external_tasks_loadable#61",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_external_tasks_loadable(self)",
        "snippet": "    def test_external_tasks_loadable(self):\n        task = load_task(\"luigi\", \"ExternalTask\", {})\n        assert(isinstance(task, luigi.ExternalTask))",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_id_to_name_and_params#65",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_id_to_name_and_params(self)",
        "snippet": "    def test_id_to_name_and_params(self):\n        task_id = \"InputText(date=2014-12-29)\"\n        (name, params) = luigi.task.id_to_name_and_params(task_id)\n        self.assertEquals(name, \"InputText\")\n        self.assertEquals(params, dict(date=\"2014-12-29\"))",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_id_to_name_and_params_multiple_args#71",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_id_to_name_and_params_multiple_args(self)",
        "snippet": "    def test_id_to_name_and_params_multiple_args(self):\n        task_id = \"InputText(date=2014-12-29,foo=bar)\"\n        (name, params) = luigi.task.id_to_name_and_params(task_id)\n        self.assertEquals(name, \"InputText\")\n        self.assertEquals(params, dict(date=\"2014-12-29\", foo=\"bar\"))",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_id_to_name_and_params_list_args#77",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_id_to_name_and_params_list_args(self)",
        "snippet": "    def test_id_to_name_and_params_list_args(self):\n        task_id = \"InputText(date=2014-12-29,foo=[bar,baz-foo])\"\n        (name, params) = luigi.task.id_to_name_and_params(task_id)\n        self.assertEquals(name, \"InputText\")\n        self.assertEquals(params, dict(date=\"2014-12-29\", foo=[\"bar\", \"baz-foo\"]))",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.task_test.TaskTest.test_flatten#83",
        "src_path": "test/task_test.py",
        "class_name": "test.task_test.TaskTest",
        "signature": "test.task_test.TaskTest.test_flatten(self)",
        "snippet": "    def test_flatten(self):\n        flatten = luigi.task.flatten\n        self.assertEquals(sorted(flatten({'a': 'foo', 'b': 'bar'})), ['bar', 'foo'])\n        self.assertEquals(sorted(flatten(['foo', ['bar', 'troll']])), ['bar', 'foo', 'troll'])\n        self.assertEquals(flatten('foo'), ['foo'])\n        self.assertEquals(flatten(42), [42])\n        self.assertEquals(flatten((len(i) for i in [\"foo\", \"troll\"])), [3, 5])\n        self.assertRaises(TypeError, flatten, (len(i) for i in [\"foo\", \"troll\", None]))",
        "begin_line": 83,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#85",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 85,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 99,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#101",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#123",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#127",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        return run_exit_status",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]