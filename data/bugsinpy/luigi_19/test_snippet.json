[
    {
        "name": "test.helpers.with_config._make_dict#91",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#96",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#105",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 105,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#107",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 107,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#142",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#146",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#150",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 150,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.setUp#33",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(CentralPlannerTest, self).setUp()\n        conf = self.get_scheduler_config()\n        self.sch = CentralPlannerScheduler(**conf)\n        self.time = time.time",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.get_scheduler_config#39",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.get_scheduler_config(self)",
        "snippet": "    def get_scheduler_config(self):\n        return {\n            'retry_delay': 100,\n            'remove_delay': 1000,\n            'worker_disconnect_delay': 10,\n            'disable_persist': 10,\n            'disable_window': 10,\n            'disable_failures': 3,\n            'disable_hard_timeout': 60 * 60,\n        }",
        "begin_line": 39,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.tearDown#50",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(CentralPlannerTest, self).tearDown()\n        if time.time != self.time:\n            time.time = self.time",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.setTime#55",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.setTime(self, t)",
        "snippet": "    def setTime(self, t):\n        time.time = lambda: t",
        "begin_line": 55,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_dep#58",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_dep(self)",
        "snippet": "    def test_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_failed_dep#67",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_failed_dep(self)",
        "snippet": "    def test_failed_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 67,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_broken_dep#80",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_broken_dep(self)",
        "snippet": "    def test_broken_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A', runnable=False)\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 80,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_two_workers#90",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_two_workers(self)",
        "snippet": "    def test_two_workers(self):\n        # Worker X wants to build A -> B\n        # Worker Y wants to build A -> C\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n        self.sch.add_task(task_id='C', deps=('A',), worker='Y')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)  # Worker Y is pending on A to be done\n        self.sch.add_task(worker='X', task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'C')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'B')",
        "begin_line": 90,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_retry#104",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_retry(self)",
        "snippet": "    def test_retry(self):\n        # Try to build A but fails, will retry after 100s\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        for t in range(100):\n            self.setTime(t)\n            self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)\n            self.sch.ping(worker=WORKER)\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.setTime(101)\n        self.sch.prune()\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 104,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disconnect_running#121",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disconnect_running(self)",
        "snippet": "    def test_disconnect_running(self):\n        # X and Y wants to run A.\n        # X starts but does not report back. Y does.\n        # After some timeout, Y will build it instead\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.sch.add_task(task_id='A', worker='Y')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        for t in range(200):\n            self.setTime(t)\n            self.sch.ping(worker='Y')\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'A')",
        "begin_line": 121,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_overwrite_tracking_url_while_running#137",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_overwrite_tracking_url_while_running(self)",
        "snippet": "    def test_do_not_overwrite_tracking_url_while_running(self):\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n        # not wiped out by another working scheduling as pending\n        self.sch.add_task(task_id='A', worker='Y', status='PENDING')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_update_tracking_url_while_running#145",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_update_tracking_url_while_running(self)",
        "snippet": "    def test_do_update_tracking_url_while_running(self):\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='stage_2')\n        self.assertEqual('stage_2', self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 145,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_tracking_url_on_done_and_fail#152",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_tracking_url_on_done_and_fail(self)",
        "snippet": "    def test_keep_tracking_url_on_done_and_fail(self):\n        for status in ('DONE', 'FAILED'):\n            self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n            self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n            self.sch.add_task(task_id='A', worker='X', status=status)\n            self.assertEqual('trackme', self.sch.task_list(status, '')['A']['tracking_url'])",
        "begin_line": 152,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_drop_tracking_url_when_rescheduled_while_not_running#160",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_drop_tracking_url_when_rescheduled_while_not_running(self)",
        "snippet": "    def test_drop_tracking_url_when_rescheduled_while_not_running(self):\n        for status in ('DONE', 'FAILED', 'PENDING'):\n            self.sch.add_task(task_id='A', worker='X', status=status, tracking_url='trackme')\n            self.assertEqual('trackme', self.sch.task_list(status, '')['A']['tracking_url'])\n\n            self.sch.add_task(task_id='A', worker='Y', status='PENDING')\n            self.assertIsNone(self.sch.task_list('PENDING', '')['A']['tracking_url'])",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_reset_tracking_url_on_new_run#168",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_reset_tracking_url_on_new_run(self)",
        "snippet": "    def test_reset_tracking_url_on_new_run(self):\n        self.sch.add_task(task_id='A', worker='X', status='PENDING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('PENDING', '')['A']['tracking_url'])\n\n        self.sch.add_task(task_id='A', worker='Y', status='RUNNING')\n        self.assertIsNone(self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_remove_dep#175",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_remove_dep(self)",
        "snippet": "    def test_remove_dep(self):\n        # X schedules A -> B, A is broken\n        # Y schedules C -> B: this should remove A as a dep of B\n        self.sch.add_task(task_id='A', worker='X', runnable=False)\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n\n        # X can't build anything\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], None)\n\n        self.sch.add_task(task_id='B', deps=('C',), worker='Y')  # should reset dependencies for A\n        self.sch.add_task(task_id='C', worker='Y', status=DONE)\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 175,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_timeout#189",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_timeout(self)",
        "snippet": "    def test_timeout(self):\n        # A bug that was earlier present when restarting the same flow\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.setTime(10000)\n        self.sch.add_task(task_id='A', worker='Y')  # Will timeout X but not schedule A for removal\n        for i in range(2000):\n            self.setTime(10000 + i)\n            self.sch.ping(worker='Y')\n        self.sch.add_task(task_id='A', status=DONE, worker='Y')  # This used to raise an exception since A was removed",
        "begin_line": 189,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disallowed_state_changes#201",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disallowed_state_changes(self)",
        "snippet": "    def test_disallowed_state_changes(self):\n        # Test that we can not schedule an already running task\n        t = 'A'\n        self.sch.add_task(task_id=t, worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], t)\n        self.sch.add_task(task_id=t, worker='Y')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)",
        "begin_line": 201,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_two_worker_info#209",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_two_worker_info(self)",
        "snippet": "    def test_two_worker_info(self):\n        # Make sure the scheduler returns info that some other worker is running task A\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        r = self.sch.get_work(worker='Y')\n        self.assertEqual(r['task_id'], None)  # Worker Y is pending on A to be done\n        s = r['running_tasks'][0]\n        self.assertEqual(s['task_id'], 'A')\n        self.assertEqual(s['worker'], 'X')",
        "begin_line": 209,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work#221",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work(self)",
        "snippet": "    def test_assistant_get_work(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work(worker='Y', assistant=True)['task_id'], 'A')\n\n        # check that the scheduler recognizes tasks as running\n        running_tasks = self.sch.task_list('RUNNING', '')\n        self.assertEqual(len(running_tasks), 1)\n        self.assertEqual(list(running_tasks.keys()), ['A'])\n        self.assertEqual(running_tasks['A']['worker_running'], 'Y')",
        "begin_line": 221,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work_external_task#233",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_get_work_external_task(self)",
        "snippet": "    def test_assistant_get_work_external_task(self):\n        self.sch.add_task(worker='X', task_id='A', runnable=False)\n        self.assertTrue(self.sch.get_work(worker='Y', assistant=True)['task_id'] is None)",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_fails_when_assistant_dies#237",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_fails_when_assistant_dies(self)",
        "snippet": "    def test_task_fails_when_assistant_dies(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work(worker='Y', assistant=True)['task_id'], 'A')\n        self.assertEqual(list(self.sch.task_list('RUNNING', '').keys()), ['A'])\n\n        # Y dies for 50 seconds, X stays alive\n        self.setTime(50)\n        self.sch.ping(worker='X')\n        self.assertEqual(list(self.sch.task_list('FAILED', '').keys()), ['A'])",
        "begin_line": 237,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prune_with_live_assistant#250",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prune_with_live_assistant(self)",
        "snippet": "    def test_prune_with_live_assistant(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.get_work(worker='Y', assistant=True)\n        self.sch.add_task(worker='Y', task_id='A', status=DONE, assistant=True)\n\n        # worker X stops communicating, A should be marked for removal\n        self.setTime(600)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n\n        # A will now be pruned\n        self.setTime(2000)\n        self.sch.prune()\n        self.assertFalse(list(self.sch.task_list('', '')))",
        "begin_line": 250,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_fail_job_from_dead_worker_with_live_assistant#266",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_fail_job_from_dead_worker_with_live_assistant(self)",
        "snippet": "    def test_fail_job_from_dead_worker_with_live_assistant(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.sch.add_worker('Y', [('assistant', True)])\n\n        self.setTime(600)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n\n        self.assertEqual(['A'], list(self.sch.task_list('FAILED', '').keys()))",
        "begin_line": 266,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_request_runnable_task#278",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_request_runnable_task(self)",
        "snippet": "    def test_assistant_request_runnable_task(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A', runnable=True)\n        self.setTime(600)\n        self.sch.prune()\n\n        self.assertEqual('A', self.sch.get_work(worker='Y', assistant=True)['task_id'])",
        "begin_line": 278,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_assistant_request_external_task#286",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_assistant_request_external_task(self)",
        "snippet": "    def test_assistant_request_external_task(self):\n        self.sch.add_task(worker='X', task_id='A', runnable=False)\n        self.assertIsNone(self.sch.get_work(worker='Y', assistant=True)['task_id'])",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_prune_done_tasks#290",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_prune_done_tasks(self, expected=None)",
        "snippet": "    def test_prune_done_tasks(self, expected=None):\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'], status=DONE)\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['B'])\n\n        self.setTime(600)\n        self.sch.ping(worker='ASSISTANT')\n        self.sch.prune()\n        self.setTime(2000)\n        self.sch.ping(worker='ASSISTANT')\n        self.sch.prune()\n\n        self.assertEqual(set(expected or ()), set(self.sch.task_list('', '').keys()))",
        "begin_line": 290,
        "end_line": 303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_tasks_for_assistant#305",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_tasks_for_assistant(self)",
        "snippet": "    def test_keep_tasks_for_assistant(self):\n        self.sch.get_work(worker='ASSISTANT', assistant=True)  # tell the scheduler this is an assistant\n        self.test_prune_done_tasks(['B', 'C'])",
        "begin_line": 305,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_scheduler_disabled_tasks_for_assistant#309",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_scheduler_disabled_tasks_for_assistant(self)",
        "snippet": "    def test_keep_scheduler_disabled_tasks_for_assistant(self):\n        self.sch.get_work(worker='ASSISTANT', assistant=True)  # tell the scheduler this is an assistant\n\n        # create a scheduler disabled task and a worker disabled task\n        for i in range(10):\n            self.sch.add_task(worker=WORKER, task_id='D', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='E', status=DISABLED)\n\n        # scheduler prunes the worker disabled task\n        self.assertEqual(set(['D', 'E']), set(self.sch.task_list(DISABLED, '')))\n        self.test_prune_done_tasks(['B', 'C', 'D'])",
        "begin_line": 309,
        "end_line": 319,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_keep_failed_tasks_for_assistant#321",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_keep_failed_tasks_for_assistant(self)",
        "snippet": "    def test_keep_failed_tasks_for_assistant(self):\n        self.sch.get_work(worker='ASSISTANT', assistant=True)  # tell the scheduler this is an assistant\n        self.sch.add_task(worker=WORKER, task_id='D', status=FAILED, deps='A')\n        self.test_prune_done_tasks(['A', 'B', 'C', 'D'])",
        "begin_line": 321,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_allow_one#326",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_allow_one(self)",
        "snippet": "    def test_scheduler_resources_none_allow_one(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 326,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_disallow_two#330",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_resources_none_disallow_two(self)",
        "snippet": "    def test_scheduler_resources_none_disallow_two(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 330,
        "end_line": 332,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_insufficient_resources#334",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_insufficient_resources(self)",
        "snippet": "    def test_scheduler_with_insufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=2)\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 334,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_sufficient_resources#339",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_sufficient_resources(self)",
        "snippet": "    def test_scheduler_with_sufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=3)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 339,
        "end_line": 342,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_resources_used#344",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_resources_used(self)",
        "snippet": "    def test_scheduler_with_resources_used(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R1': 1})\n        self.sch.update_resources(R1=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 344,
        "end_line": 350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_overprovisioned_on_other_resource#352",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_overprovisioned_on_other_resource(self)",
        "snippet": "    def test_scheduler_overprovisioned_on_other_resource(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.sch.update_resources(R1=2)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R2': 2})\n        self.sch.update_resources(R1=1, R2=2)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 352,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_priority_and_competing_resources#361",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_scheduler_with_priority_and_competing_resources(self)",
        "snippet": "    def test_scheduler_with_priority_and_competing_resources(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n        self.sch.update_resources(R=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='D', priority=0)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'D')",
        "begin_line": 361,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_when_not_ready#373",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_when_not_ready(self)",
        "snippet": "    def test_do_not_lock_resources_when_not_ready(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 373,
        "end_line": 381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_when_one_of_multiple_workers_is_ready#383",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_when_one_of_multiple_workers_is_ready(self)",
        "snippet": "    def test_lock_resources_when_one_of_multiple_workers_is_ready(self):\n        self.sch.get_work(worker='X')  # indicate to the scheduler that X is active\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 2)])\n        self.sch.add_worker('Y', [])\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 383,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_while_running_higher_priority#394",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_do_not_lock_resources_while_running_higher_priority(self)",
        "snippet": "    def test_do_not_lock_resources_while_running_higher_priority(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 394,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_while_running_lower_priority#405",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_while_running_lower_priority(self)",
        "snippet": "    def test_lock_resources_while_running_lower_priority(self):\n        \"\"\" Make sure resources will be made available while working on lower priority tasks \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=4)\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 405,
        "end_line": 414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_lock_resources_for_second_worker#416",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_lock_resources_for_second_worker(self)",
        "snippet": "    def test_lock_resources_for_second_worker(self):\n        self.sch.get_work(worker='Y')  # indicate to the scheduler that Y is active\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1})\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1})\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=10)\n\n        self.sch.add_worker('X', {'workers': 2})\n        self.sch.add_worker('Y', {'workers': 1})\n        self.sch.update_resources(R=2)\n\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 416,
        "end_line": 427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_can_work_on_lower_priority_while_waiting_for_resources#429",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_can_work_on_lower_priority_while_waiting_for_resources(self)",
        "snippet": "    def test_can_work_on_lower_priority_while_waiting_for_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1}, priority=0)\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', priority=0)\n        self.sch.update_resources(R=1)\n\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 429,
        "end_line": 437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_with_pruning#439",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_with_pruning(self)",
        "snippet": "    def test_priority_update_with_pruning(self):\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n\n        self.setTime(50)  # after worker disconnects\n        self.sch.prune()\n        self.sch.add_task(task_id='B', deps=['A'], worker='X')\n\n        self.setTime(2000)  # after remove for task A\n        self.sch.prune()\n\n        # Here task A that B depends on is missing\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['B'], priority=100)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='D', priority=10)\n\n        self.check_task_order('ABCD')",
        "begin_line": 439,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_update_resources#458",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_update_resources(self)",
        "snippet": "    def test_update_resources(self):\n        self.sch.add_task(worker=WORKER, task_id='A', deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 2})\n        self.sch.update_resources(r=1)\n\n        # B requires too many resources, we can't schedule\n        self.check_task_order([])\n\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 1})\n\n        # now we have enough resources\n        self.check_task_order(['B', 'A'])",
        "begin_line": 458,
        "end_line": 469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_hendle_multiple_resources#471",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_hendle_multiple_resources(self)",
        "snippet": "    def test_hendle_multiple_resources(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=2, r2=1)\n\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.check_task_order('C')",
        "begin_line": 471,
        "end_line": 478,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_single_resource_lock#480",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_single_resource_lock(self)",
        "snippet": "    def test_single_resource_lock(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'r': 1})\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 2}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r': 1})\n        self.sch.update_resources(r=2)\n\n        # Should wait for 2 units of r to be available for B before scheduling C\n        self.check_task_order([])",
        "begin_line": 480,
        "end_line": 489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_no_lock_if_too_many_resources_required#491",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_no_lock_if_too_many_resources_required(self)",
        "snippet": "    def test_no_lock_if_too_many_resources_required(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r': 2}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 1})\n        self.sch.update_resources(r=1)\n        self.check_task_order('B')",
        "begin_line": 491,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_lock#497",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_lock(self)",
        "snippet": "    def test_multiple_resources_lock(self):\n        self.sch.get_work(worker='X')  # indicate to the scheduler that X is active\n        self.sch.add_task(worker='X', task_id='A', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=1, r2=1)\n\n        # should preserve both resources for worker 'X'\n        self.check_task_order([])",
        "begin_line": 497,
        "end_line": 505,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_no_lock#507",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_multiple_resources_no_lock(self)",
        "snippet": "    def test_multiple_resources_no_lock(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r2': 1})\n        self.sch.update_resources(r1=1, r2=2)\n\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        # C doesn't block B, so it can go first\n        self.check_task_order('C')",
        "begin_line": 507,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_allow_resource_use_while_scheduling#517",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_allow_resource_use_while_scheduling(self)",
        "snippet": "    def test_allow_resource_use_while_scheduling(self):\n        self.sch.update_resources(r1=1)\n        self.sch.add_task(worker='SCHEDULING', task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1}, priority=1)\n        self.assertEqual('B', self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 517,
        "end_line": 521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_stop_locking_resource_for_uninterested_worker#523",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_stop_locking_resource_for_uninterested_worker(self)",
        "snippet": "    def test_stop_locking_resource_for_uninterested_worker(self):\n        self.setTime(0)\n        self.sch.update_resources(r1=1)\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker='LOW_PRIO', task_id='B', resources={'r1': 1}, priority=1)\n        self.assertIsNone(self.sch.get_work(worker='LOW_PRIO')['task_id'])\n\n        self.setTime(120)\n        self.assertEqual('B', self.sch.get_work(worker='LOW_PRIO')['task_id'])",
        "begin_line": 523,
        "end_line": 532,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.check_task_order#534",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.check_task_order(self, order)",
        "snippet": "    def check_task_order(self, order):\n        for expected_id in order:\n            self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], expected_id)\n            self.sch.add_task(worker=WORKER, task_id=expected_id, status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 534,
        "end_line": 538,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities#540",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities(self)",
        "snippet": "    def test_priorities(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5)\n        self.sch.add_task(worker=WORKER, task_id='C', priority=15)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=9)\n        self.check_task_order(['C', 'A', 'D', 'B'])",
        "begin_line": 540,
        "end_line": 545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities_default_and_negative#547",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities_default_and_negative(self)",
        "snippet": "    def test_priorities_default_and_negative(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C', priority=15)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=-20)\n        self.sch.add_task(worker=WORKER, task_id='E', priority=1)\n        self.check_task_order(['C', 'A', 'E', 'B', 'D'])",
        "begin_line": 547,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priorities_and_dependencies#555",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priorities_and_dependencies(self)",
        "snippet": "    def test_priorities_and_dependencies(self):\n        self.sch.add_task(worker=WORKER, task_id='A', deps=['Z'], priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5)\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['Z'], priority=3)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=2)\n        self.sch.add_task(worker=WORKER, task_id='Z', priority=1)\n        self.check_task_order(['Z', 'A', 'B', 'C', 'D'])",
        "begin_line": 555,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_after_scheduling#563",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_after_scheduling(self)",
        "snippet": "    def test_priority_update_dependency_after_scheduling(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=10, deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['A', 'B', 'C', 'D'])",
        "begin_line": 563,
        "end_line": 568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable#570",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable(self)",
        "snippet": "    def test_disable(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 570,
        "end_line": 580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable#582",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable(self)",
        "snippet": "    def test_disable_and_reenable(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 582,
        "end_line": 598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable_and_disable_again#600",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_reenable_and_disable_again(self)",
        "snippet": "    def test_disable_and_reenable_and_disable_again(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be still enabled\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 600,
        "end_line": 633,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_and_done#635",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_and_done(self)",
        "snippet": "    def test_disable_and_done(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('DONE', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 635,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable#653",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable(self)",
        "snippet": "    def test_automatic_re_enable(self):\n        self.sch = CentralPlannerScheduler(disable_failures=2, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 653,
        "end_line": 664,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable_with_one_failure_allowed#666",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_automatic_re_enable_with_one_failure_allowed(self)",
        "snippet": "    def test_automatic_re_enable_with_one_failure_allowed(self):\n        self.sch = CentralPlannerScheduler(disable_failures=1, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 666,
        "end_line": 676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_disable_by_worker#678",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_disable_by_worker(self)",
        "snippet": "    def test_disable_by_worker(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 678,
        "end_line": 687,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_beyond_limit#689",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_beyond_limit(self)",
        "snippet": "    def test_task_list_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '', False).keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', ''))",
        "begin_line": 689,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_within_limit#696",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_within_limit(self)",
        "snippet": "    def test_task_list_within_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=4)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '').keys()))",
        "begin_line": 696,
        "end_line": 700,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_lists_some_beyond_limit#702",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_lists_some_beyond_limit(self)",
        "snippet": "    def test_task_lists_some_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c, status=DONE)\n        for c in 'EFG':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('EFG'), set(sch.task_list('PENDING', '').keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('DONE', ''))",
        "begin_line": 702,
        "end_line": 709,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_search#711",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_search(self)",
        "snippet": "    def test_task_list_filter_by_search(self):\n        self.sch.add_task(worker=WORKER, task_id='test_match_task')\n        self.sch.add_task(worker=WORKER, task_id='test_filter_task')\n        matches = self.sch.task_list('PENDING', '', search='match')\n        self.assertEqual(['test_match_task'], list(matches.keys()))",
        "begin_line": 711,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_multiple_search_terms#717",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_filter_by_multiple_search_terms(self)",
        "snippet": "    def test_task_list_filter_by_multiple_search_terms(self):\n        self.sch.add_task(worker=WORKER, task_id='abcd')\n        self.sch.add_task(worker=WORKER, task_id='abd')\n        self.sch.add_task(worker=WORKER, task_id='acd')\n        self.sch.add_task(worker=WORKER, task_id='ad')\n        self.sch.add_task(worker=WORKER, task_id='bc')\n        matches = self.sch.task_list('PENDING', '', search='b c')\n        self.assertEqual(set(['abcd', 'bc']), set(matches.keys()))",
        "begin_line": 717,
        "end_line": 724,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_search_results_beyond_limit#726",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_search_results_beyond_limit(self)",
        "snippet": "    def test_search_results_beyond_limit(self):\n        sch = CentralPlannerScheduler(max_shown_tasks=3)\n        sch.add_task(worker=WORKER, task_id='task_a')\n        sch.add_task(worker=WORKER, task_id='task_b')\n        sch.add_task(worker=WORKER, task_id='task_c')\n        sch.add_task(worker=WORKER, task_id='task_d')\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', '', search='a'))\n        self.assertEqual(['task_a'], list(sch.task_list('PENDING', '', search='_a').keys()))",
        "begin_line": 726,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_chain#735",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_update_dependency_chain(self)",
        "snippet": "    def test_priority_update_dependency_chain(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10, deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5, deps=['C'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['C', 'B', 'A', 'D'])",
        "begin_line": 735,
        "end_line": 740,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_priority_no_decrease_with_multiple_updates#742",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_priority_no_decrease_with_multiple_updates(self)",
        "snippet": "    def test_priority_no_decrease_with_multiple_updates(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=10, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=5, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['A', 'B', 'D', 'C'])",
        "begin_line": 742,
        "end_line": 747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_unique_tasks#749",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_unique_tasks(self)",
        "snippet": "    def test_unique_tasks(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C')\n        self.sch.add_task(worker=WORKER + \"_2\", task_id='B')\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertEqual(3, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 749,
        "end_line": 757,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_disable#759",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_disable(self)",
        "snippet": "    def test_pending_downstream_disable(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='C', deps=('B',))\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertTrue(response['task_id'] is None)\n        self.assertEqual(0, response['n_pending_tasks'])\n        self.assertEqual(0, response['n_unique_pending'])",
        "begin_line": 759,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_failure#769",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_pending_downstream_failure(self)",
        "snippet": "    def test_pending_downstream_failure(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='C', deps=('B',))\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertTrue(response['task_id'] is None)\n        self.assertEqual(2, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 769,
        "end_line": 777,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_list_no_deps#779",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_list_no_deps(self)",
        "snippet": "    def test_task_list_no_deps(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n        task_list = self.sch.task_list('PENDING', '')\n        self.assertFalse('deps' in task_list['A'])",
        "begin_line": 779,
        "end_line": 783,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time#785",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time(self)",
        "snippet": "    def test_task_first_failure_time(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        time_before_failure = time.time()\n        test_task.add_failure()\n        time_after_failure = time.time()\n\n        self.assertLessEqual(time_before_failure,\n                             test_task.failures.first_failure_time)\n        self.assertGreaterEqual(time_after_failure,\n                                test_task.failures.first_failure_time)",
        "begin_line": 785,
        "end_line": 797,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time_remains_constant#799",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_first_failure_time_remains_constant(self)",
        "snippet": "    def test_task_first_failure_time_remains_constant(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        test_task.add_failure()\n        first_failure_time = test_task.failures.first_failure_time\n\n        test_task.add_failure()\n        self.assertEqual(first_failure_time, test_task.failures.first_failure_time)",
        "begin_line": 799,
        "end_line": 808,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_task_has_excessive_failures#810",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_task_has_excessive_failures(self)",
        "snippet": "    def test_task_has_excessive_failures(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        self.assertFalse(test_task.has_excessive_failures())\n\n        test_task.add_failure()\n        self.assertFalse(test_task.has_excessive_failures())\n\n        fake_failure_time = (test_task.failures.first_failure_time -\n                             2 * 60 * 60)\n\n        test_task.failures.first_failure_time = fake_failure_time\n        self.assertTrue(test_task.has_excessive_failures())",
        "begin_line": 810,
        "end_line": 824,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_quadratic_behavior#826",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_quadratic_behavior(self)",
        "snippet": "    def test_quadratic_behavior(self):\n        \"\"\" Test that get_work is not taking linear amount of time.\n\n        This is of course impossible to test, however, doing reasonable\n        assumptions about hardware. This time should finish in a timely\n        manner.\n        \"\"\"\n        # For 10000 it takes almost 1 second on my laptop.  Prior to these\n        # changes it was being slow already at NUM_TASKS=300\n        NUM_TASKS = 10000\n        for i in range(NUM_TASKS):\n            self.sch.add_task(worker=str(i), task_id=str(i), resources={})\n\n        for i in range(NUM_TASKS):\n            self.assertEqual(self.sch.get_work(worker=str(i))['task_id'], str(i))\n            self.sch.add_task(worker=str(i), task_id=str(i), status=DONE)",
        "begin_line": 826,
        "end_line": 841,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.central_planner_test.CentralPlannerTest.test_get_work_speed#843",
        "src_path": "test/central_planner_test.py",
        "class_name": "test.central_planner_test.CentralPlannerTest",
        "signature": "test.central_planner_test.CentralPlannerTest.test_get_work_speed(self)",
        "snippet": "    def test_get_work_speed(self):\n        \"\"\" Test that get_work is fast for few workers and many DONEs.\n\n        In #986, @daveFNbuck reported that he got a slowdown.\n        \"\"\"\n        # This took almost 4 minutes without optimization.\n        # Now it takes 10 seconds on my machine.\n        NUM_PENDING = 1000\n        NUM_DONE = 200000\n        assert NUM_DONE >= NUM_PENDING\n        for i in range(NUM_PENDING):\n            self.sch.add_task(worker=WORKER, task_id=str(i), resources={})\n\n        for i in range(NUM_PENDING, NUM_DONE):\n            self.sch.add_task(worker=WORKER, task_id=str(i), status=DONE)\n\n        for i in range(NUM_PENDING):\n            res = int(self.sch.get_work(worker=WORKER)['task_id'])\n            self.assertTrue(0 <= res < NUM_PENDING)\n            self.sch.add_task(worker=WORKER, task_id=str(res), status=DONE)",
        "begin_line": 843,
        "end_line": 862,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]