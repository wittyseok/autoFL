coverage run -m pytest test/central_planner_test.py::CentralPlannerTest::test_no_automatic_re_enable_after_auto_then_manual_disable
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/luigi
plugins: benchmark-3.2.3, requests-mock-1.8.0, sanic-1.6.1, sugar-0.9.3, cov-2.9.0
collected 1 item

test/central_planner_test.py F                                           [100%]

=================================== FAILURES ===================================
_ CentralPlannerTest.test_no_automatic_re_enable_after_auto_then_manual_disable _

self = <central_planner_test.CentralPlannerTest testMethod=test_no_automatic_re_enable_after_auto_then_manual_disable>

    def test_no_automatic_re_enable_after_auto_then_manual_disable(self):
        self.sch = CentralPlannerScheduler(disable_failures=2, disable_persist=100)
        self.setTime(0)
        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)
        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)
    
        # should be disabled now
        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])
    
        # should remain disabled once set
        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)
        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])
    
        # should not re-enable after 100 seconds
        self.setTime(101)
>       self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])
E       AssertionError: 'DISABLED' != 'FAILED'
E       - DISABLED
E       + FAILED

test/central_planner_test.py:705: AssertionError
=============================== warnings summary ===============================
luigi/parameter.py:506
  /home/user/BugsInPy/temp/projects/luigi/luigi/parameter.py:506: DeprecationWarning: invalid escape sequence \d
    return "(?P<%s>\d+)%s" % (key, key[0].upper())

luigi/parameter.py:518
  /home/user/BugsInPy/temp/projects/luigi/luigi/parameter.py:518: DeprecationWarning: invalid escape sequence \d
    regex = "".join(["((?P<%s>\d+) ?%s(%s)?(%s)? ?)?" % (k, k[0], k[1:-1], k[-1]) for k in keys])

/opt/conda/envs/9be8ce91ca9622155a3fd48a749057f7/lib/python3.8/site-packages/nose/importer.py:12
  /opt/conda/envs/9be8ce91ca9622155a3fd48a749057f7/lib/python3.8/site-packages/nose/importer.py:12: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    from imp import find_module, load_module, acquire_lock, release_lock

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test/central_planner_test.py::CentralPlannerTest::test_no_automatic_re_enable_after_auto_then_manual_disable
======================== 1 failed, 3 warnings in 0.24s =========================
