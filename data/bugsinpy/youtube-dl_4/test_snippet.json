[
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_basic#15",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_basic(self)",
        "snippet": "    def test_basic(self):\n        jsi = JSInterpreter('function x(){;}')\n        self.assertEqual(jsi.call_function('x'), None)\n\n        jsi = JSInterpreter('function x3(){return 42;}')\n        self.assertEqual(jsi.call_function('x3'), 42)\n\n        jsi = JSInterpreter('var x5 = function(){return 42;}')\n        self.assertEqual(jsi.call_function('x5'), 42)",
        "begin_line": 15,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_calc#25",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_calc(self)",
        "snippet": "    def test_calc(self):\n        jsi = JSInterpreter('function x4(a){return 2*a+1;}')\n        self.assertEqual(jsi.call_function('x4', 3), 7)",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_empty_return#29",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_empty_return(self)",
        "snippet": "    def test_empty_return(self):\n        jsi = JSInterpreter('function f(){return; y()}')\n        self.assertEqual(jsi.call_function('f'), None)",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_morespace#33",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_morespace(self)",
        "snippet": "    def test_morespace(self):\n        jsi = JSInterpreter('function x (a) { return 2 * a + 1 ; }')\n        self.assertEqual(jsi.call_function('x', 3), 7)\n\n        jsi = JSInterpreter('function f () { x =  2  ; return x; }')\n        self.assertEqual(jsi.call_function('f'), 2)",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_strange_chars#40",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_strange_chars(self)",
        "snippet": "    def test_strange_chars(self):\n        jsi = JSInterpreter('function $_xY1 ($_axY1) { var $_axY2 = $_axY1 + 1; return $_axY2; }')\n        self.assertEqual(jsi.call_function('$_xY1', 20), 21)",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_operators#44",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_operators(self)",
        "snippet": "    def test_operators(self):\n        jsi = JSInterpreter('function f(){return 1 << 5;}')\n        self.assertEqual(jsi.call_function('f'), 32)\n\n        jsi = JSInterpreter('function f(){return 19 & 21;}')\n        self.assertEqual(jsi.call_function('f'), 17)\n\n        jsi = JSInterpreter('function f(){return 11 >> 2;}')\n        self.assertEqual(jsi.call_function('f'), 2)",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_array_access#54",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_array_access(self)",
        "snippet": "    def test_array_access(self):\n        jsi = JSInterpreter('function f(){var x = [1,2,3]; x[0] = 4; x[0] = 5; x[2] = 7; return x;}')\n        self.assertEqual(jsi.call_function('f'), [5, 2, 7])",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_parens#58",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_parens(self)",
        "snippet": "    def test_parens(self):\n        jsi = JSInterpreter('function f(){return (1) + (2) * ((( (( (((((3)))))) )) ));}')\n        self.assertEqual(jsi.call_function('f'), 7)\n\n        jsi = JSInterpreter('function f(){return (1 + 2) * 3;}')\n        self.assertEqual(jsi.call_function('f'), 9)",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_assignments#65",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_assignments(self)",
        "snippet": "    def test_assignments(self):\n        jsi = JSInterpreter('function f(){var x = 20; x = 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), 31)\n\n        jsi = JSInterpreter('function f(){var x = 20; x += 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), 51)\n\n        jsi = JSInterpreter('function f(){var x = 20; x -= 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), -11)",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_comments#75",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_comments(self)",
        "snippet": "    def test_comments(self):\n        'Skipping: Not yet fully implemented'\n        return\n        jsi = JSInterpreter('''\n        function x() {\n            var x = /* 1 + */ 2;\n            var y = /* 30\n            * 40 */ 50;\n            return x + y;\n        }\n        ''')\n        self.assertEqual(jsi.call_function('x'), 52)\n\n        jsi = JSInterpreter('''\n        function f() {\n            var x = \"/*\";\n            var y = 1 /* comment */ + 2;\n            return y;\n        }\n        ''')\n        self.assertEqual(jsi.call_function('f'), 3)",
        "begin_line": 75,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_precedence#97",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_precedence(self)",
        "snippet": "    def test_precedence(self):\n        jsi = JSInterpreter('''\n        function x() {\n            var a = [10, 20, 30, 40, 50];\n            var b = 6;\n            a[0]=a[b%a.length];\n            return a;\n        }''')\n        self.assertEqual(jsi.call_function('x'), [20, 20, 30, 40, 50])",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_jsinterp.TestJSInterpreter.test_call#107",
        "src_path": "test/test_jsinterp.py",
        "class_name": "test.test_jsinterp.TestJSInterpreter",
        "signature": "test.test_jsinterp.TestJSInterpreter.test_call(self)",
        "snippet": "    def test_call(self):\n        jsi = JSInterpreter('''\n        function x() { return 2; }\n        function y(a) { return x() + a; }\n        function z() { return y(3); }\n        ''')\n        self.assertEqual(jsi.call_function('z'), 5)",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    }
]