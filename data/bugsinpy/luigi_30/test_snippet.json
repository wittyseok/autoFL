[
    {
        "name": "test.helpers.with_config.__call__#47",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 47,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#49",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#46",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#50",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        hdfs.load_hadoop_cmd = lambda: [hadoop_bin, '--config', cfg_path]",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.EmptyTask.run#35",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.EmptyTask",
        "signature": "test.test_event_callbacks.EmptyTask.run(self)",
        "snippet": "    def run(self):\n        if self.fail:\n            raise DummyException()",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TaskWithCallback.run#42",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TaskWithCallback",
        "signature": "test.test_event_callbacks.TaskWithCallback.run(self)",
        "snippet": "    def run(self):\n        print(\"Triggering event\")\n        self.trigger_event(\"foo event\")",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.test_start_handler#49",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.test_start_handler(self)",
        "snippet": "    def test_start_handler(self):\n        saved_tasks = []\n\n        @EmptyTask.event_handler(Event.START)\n        def save_task(task):\n            print(\"Saving task...\")\n            saved_tasks.append(task)\n\n        t = EmptyTask(True)\n        build([t], local_scheduler=True)\n        self.assertEqual(saved_tasks, [t])",
        "begin_line": 49,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.save_task#53",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.save_task(task)",
        "snippet": "        def save_task(task):\n            print(\"Saving task...\")\n            saved_tasks.append(task)",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks._run_empty_task#61",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks._run_empty_task(self, fail)",
        "snippet": "    def _run_empty_task(self, fail):\n        successes = []\n        failures = []\n        exceptions = []\n\n        @EmptyTask.event_handler(Event.SUCCESS)\n        def success(task):\n            successes.append(task)\n\n        @EmptyTask.event_handler(Event.FAILURE)\n        def failure(task, exception):\n            failures.append(task)\n            exceptions.append(exception)\n\n        t = EmptyTask(fail)\n        build([t], local_scheduler=True)\n        return t, successes, failures, exceptions",
        "begin_line": 61,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.success#67",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.success(task)",
        "snippet": "        def success(task):\n            successes.append(task)",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.failure#71",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.failure(task, exception)",
        "snippet": "        def failure(task, exception):\n            failures.append(task)\n            exceptions.append(exception)",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.test_success#79",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.test_success(self)",
        "snippet": "    def test_success(self):\n        t, successes, failures, exceptions = self._run_empty_task(False)\n        self.assertEqual(successes, [t])\n        self.assertEqual(failures, [])\n        self.assertEqual(exceptions, [])",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.test_failure#85",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.test_failure(self)",
        "snippet": "    def test_failure(self):\n        t, successes, failures, exceptions = self._run_empty_task(True)\n        self.assertEqual(successes, [])\n        self.assertEqual(failures, [t])\n        self.assertEqual(len(exceptions), 1)\n        self.assertTrue(isinstance(exceptions[0], DummyException))",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.test_custom_handler#92",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.test_custom_handler(self)",
        "snippet": "    def test_custom_handler(self):\n        dummies = []\n\n        @TaskWithCallback.event_handler(\"foo event\")\n        def story_dummy():\n            dummies.append(\"foo\")\n\n        t = TaskWithCallback()\n        build([t], local_scheduler=True)\n        self.assertEqual(dummies[0], \"foo\")",
        "begin_line": 92,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.story_dummy#96",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.story_dummy()",
        "snippet": "        def story_dummy():\n            dummies.append(\"foo\")",
        "begin_line": 96,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks._run_processing_time_handler#103",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks._run_processing_time_handler(self, fail)",
        "snippet": "    def _run_processing_time_handler(self, fail):\n        result = []\n\n        @EmptyTask.event_handler(Event.PROCESSING_TIME)\n        def save_task(task, processing_time):\n            result.append((task, processing_time))\n\n        times = [43.0, 1.0]\n        t = EmptyTask(fail)\n        with patch('luigi.worker.time') as mock:\n            mock.time = times.pop\n            build([t], local_scheduler=True)\n\n        return t, result",
        "begin_line": 103,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.save_task#107",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.save_task(task, processing_time)",
        "snippet": "        def save_task(task, processing_time):\n            result.append((task, processing_time))",
        "begin_line": 107,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.test_processing_time_handler_success#118",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.test_processing_time_handler_success(self)",
        "snippet": "    def test_processing_time_handler_success(self):\n        t, result = self._run_processing_time_handler(False)\n        self.assertEqual(len(result), 1)\n        task, time = result[0]\n        self.assertTrue(task is t)\n        self.assertEqual(time, 42.0)",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestEventCallbacks.test_processing_time_handler_failure#125",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestEventCallbacks",
        "signature": "test.test_event_callbacks.TestEventCallbacks.test_processing_time_handler_failure(self)",
        "snippet": "    def test_processing_time_handler_failure(self):\n        t, result = self._run_processing_time_handler(True)\n        self.assertEqual(result, [])",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.eval_contents#138",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks",
        "signature": "test.test_event_callbacks.eval_contents(f)",
        "snippet": "def eval_contents(f):\n    with f.open('r') as i:\n        return eval(i.read())",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.ConsistentMockOutput.output#150",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.ConsistentMockOutput",
        "signature": "test.test_event_callbacks.ConsistentMockOutput.output(self)",
        "snippet": "    def output(self):\n        return MockTarget('/%s/%u' % (self.__class__.__name__, self.param))",
        "begin_line": 150,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.ConsistentMockOutput.produce_output#153",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.ConsistentMockOutput",
        "signature": "test.test_event_callbacks.ConsistentMockOutput.produce_output(self)",
        "snippet": "    def produce_output(self):\n        with self.output().open('w') as o:\n            o.write(repr([self.task_id] + sorted([eval_contents(i) for i in flatten(self.input())])))",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.HappyTestFriend.run#164",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.HappyTestFriend",
        "signature": "test.test_event_callbacks.HappyTestFriend.run(self)",
        "snippet": "    def run(self):\n        self.produce_output()",
        "begin_line": 164,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.C.requires#174",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.C",
        "signature": "test.test_event_callbacks.C.requires(self)",
        "snippet": "    def requires(self):\n        return [D(self.param), D(self.param + 1)]",
        "begin_line": 174,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.B.requires#180",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.B",
        "signature": "test.test_event_callbacks.B.requires(self)",
        "snippet": "    def requires(self):\n        return C(self.param)",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.A.requires#186",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.A",
        "signature": "test.test_event_callbacks.A.requires(self)",
        "snippet": "    def requires(self):\n        return [B(1), B(2)]",
        "begin_line": 186,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents.tearDown#192",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents.tearDown(self)",
        "snippet": "    def tearDown(self):\n        MockFileSystem().remove('')",
        "begin_line": 192,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents._run_test#195",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents._run_test(self, task, expected_events)",
        "snippet": "    def _run_test(self, task, expected_events):\n        actual_events = {}\n\n        # yucky to create separate callbacks; would be nicer if the callback received an instance of a subclass of Event, so one callback could accumulate all types\n        @luigi.Task.event_handler(Event.DEPENDENCY_DISCOVERED)\n        def callback_dependency_discovered(*args):\n            actual_events.setdefault(Event.DEPENDENCY_DISCOVERED, set()).add(tuple(map(lambda t: t.task_id, args)))\n\n        @luigi.Task.event_handler(Event.DEPENDENCY_MISSING)\n        def callback_dependency_missing(*args):\n            actual_events.setdefault(Event.DEPENDENCY_MISSING, set()).add(tuple(map(lambda t: t.task_id, args)))\n\n        @luigi.Task.event_handler(Event.DEPENDENCY_PRESENT)\n        def callback_dependency_present(*args):\n            actual_events.setdefault(Event.DEPENDENCY_PRESENT, set()).add(tuple(map(lambda t: t.task_id, args)))\n\n        build([task], local_scheduler=True)\n        self.assertEqual(actual_events, expected_events)",
        "begin_line": 195,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents.callback_dependency_discovered#200",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents.callback_dependency_discovered(*args)",
        "snippet": "        def callback_dependency_discovered(*args):\n            actual_events.setdefault(Event.DEPENDENCY_DISCOVERED, set()).add(tuple(map(lambda t: t.task_id, args)))",
        "begin_line": 200,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents.callback_dependency_missing#204",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents.callback_dependency_missing(*args)",
        "snippet": "        def callback_dependency_missing(*args):\n            actual_events.setdefault(Event.DEPENDENCY_MISSING, set()).add(tuple(map(lambda t: t.task_id, args)))",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents.callback_dependency_present#208",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents.callback_dependency_present(*args)",
        "snippet": "        def callback_dependency_present(*args):\n            actual_events.setdefault(Event.DEPENDENCY_PRESENT, set()).add(tuple(map(lambda t: t.task_id, args)))",
        "begin_line": 208,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents.test_incomplete_dag#214",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents.test_incomplete_dag(self)",
        "snippet": "    def test_incomplete_dag(self):\n        for param in range(1, 3):\n            D(param).produce_output()\n        self._run_test(A(), {\n            'event.core.dependency.discovered': set([\n                ('A(param=1)', 'B(param=1)'),\n                ('A(param=1)', 'B(param=2)'),\n                ('B(param=1)', 'C(param=1)'),\n                ('B(param=2)', 'C(param=2)'),\n                ('C(param=1)', 'D(param=1)'),\n                ('C(param=1)', 'D(param=2)'),\n                ('C(param=2)', 'D(param=2)'),\n                ('C(param=2)', 'D(param=3)'),\n            ]),\n            'event.core.dependency.missing': set([\n                ('D(param=3)',),\n            ]),\n            'event.core.dependency.present': set([\n                ('D(param=1)',),\n                ('D(param=2)',),\n            ]),\n        })\n        self.assertFalse(A().output().exists())",
        "begin_line": 214,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_event_callbacks.TestDependencyEvents.test_complete_dag#238",
        "src_path": "test/test_event_callbacks.py",
        "class_name": "test.test_event_callbacks.TestDependencyEvents",
        "signature": "test.test_event_callbacks.TestDependencyEvents.test_complete_dag(self)",
        "snippet": "    def test_complete_dag(self):\n        for param in range(1, 4):\n            D(param).produce_output()\n        self._run_test(A(), {\n            'event.core.dependency.discovered': set([\n                ('A(param=1)', 'B(param=1)'),\n                ('A(param=1)', 'B(param=2)'),\n                ('B(param=1)', 'C(param=1)'),\n                ('B(param=2)', 'C(param=2)'),\n                ('C(param=1)', 'D(param=1)'),\n                ('C(param=1)', 'D(param=2)'),\n                ('C(param=2)', 'D(param=2)'),\n                ('C(param=2)', 'D(param=3)'),\n            ]),\n            'event.core.dependency.present': set([\n                ('D(param=1)',),\n                ('D(param=2)',),\n                ('D(param=3)',),\n            ]),\n        })\n        self.assertEqual(eval_contents(A().output()), ['A(param=1)', ['B(param=1)', ['C(param=1)', ['D(param=1)'], ['D(param=2)']]], ['B(param=2)', ['C(param=2)', ['D(param=2)'], ['D(param=3)']]]])",
        "begin_line": 238,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]