[
    {
        "name": "tests.conftest._handler#19",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._handler(request)",
        "snippet": "async def _handler(request):\n    \"\"\"\n    Dummy placeholder method used for route resolver when creating a new\n    route into the sanic router. This router is not actually called by the\n    sanic app. So do not worry about the arguments to this method.\n\n    If you change the return value of this method, make sure to propagate the\n    change to any test case that leverages RouteStringGenerator.\n    \"\"\"\n    return 1",
        "begin_line": 19,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.generate_random_direct_route#50",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.generate_random_direct_route(self, max_route_depth=4)",
        "snippet": "    def generate_random_direct_route(self, max_route_depth=4):\n        routes = []\n        for depth in range(1, max_route_depth + 1):\n            for _ in range(self.ROUTE_COUNT_PER_DEPTH):\n                route = \"/\".join(\n                    [\n                        TYPE_TO_GENERATOR_MAP.get(\"string\")()\n                        for _ in range(depth)\n                    ]\n                )\n                route = route.replace(\".\", \"\", -1)\n                route_detail = (random.choice(self.HTTP_METHODS), route)\n\n                if route_detail not in routes:\n                    routes.append(route_detail)\n        return routes",
        "begin_line": 50,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.add_typed_parameters#67",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.add_typed_parameters(self, current_routes, max_route_depth=8)",
        "snippet": "    def add_typed_parameters(self, current_routes, max_route_depth=8):\n        routes = []\n        for method, route in current_routes:\n            current_length = len(route.split(\"/\"))\n            new_route_part = \"/\".join(\n                [\n                    \"<{}:{}>\".format(\n                        TYPE_TO_GENERATOR_MAP.get(\"string\")(),\n                        random.choice(self.ROUTE_PARAM_TYPES),\n                    )\n                    for _ in range(max_route_depth - current_length)\n                ]\n            )\n            route = \"/\".join([route, new_route_part])\n            route = route.replace(\".\", \"\", -1)\n            routes.append((method, route))\n        return routes",
        "begin_line": 67,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.RouteStringGenerator.generate_url_for_template#86",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest.RouteStringGenerator",
        "signature": "tests.conftest.RouteStringGenerator.generate_url_for_template(template)",
        "snippet": "    def generate_url_for_template(template):\n        url = template\n        for pattern, param_type in re.findall(\n            re.compile(r\"((?:<\\w+:(string|int|number|alpha|uuid)>)+)\"),\n            template,\n        ):\n            value = TYPE_TO_GENERATOR_MAP.get(param_type)()\n            url = url.replace(pattern, str(value), -1)\n        return url",
        "begin_line": 86,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._setup#100",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._setup(route_details: tuple)",
        "snippet": "    def _setup(route_details: tuple) -> (Router, tuple):\n        router = Router()\n        added_router = []\n        for method, route in route_details:\n            try:\n                router._add(\n                    uri=\"/{}\".format(route),\n                    methods=frozenset({method}),\n                    host=\"localhost\",\n                    handler=_handler,\n                )\n                added_router.append((method, route))\n            except RouteExists:\n                pass\n        return router, added_router",
        "begin_line": 100,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.sanic_router#98",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.sanic_router()",
        "snippet": "def sanic_router():\n    # noinspection PyProtectedMember\n    def _setup(route_details: tuple) -> (Router, tuple):\n        router = Router()\n        added_router = []\n        for method, route in route_details:\n            try:\n                router._add(\n                    uri=\"/{}\".format(route),\n                    methods=frozenset({method}),\n                    host=\"localhost\",\n                    handler=_handler,\n                )\n                added_router.append((method, route))\n            except RouteExists:\n                pass\n        return router, added_router\n\n    return _setup",
        "begin_line": 98,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.route_generator#120",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.route_generator()",
        "snippet": "def route_generator() -> RouteStringGenerator:\n    return RouteStringGenerator()",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.app#130",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.app(request)",
        "snippet": "def app(request):\n    return Sanic(request.node.name)",
        "begin_line": 130,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_url_for.test_routes_with_host#1",
        "src_path": "tests/test_url_for.py",
        "class_name": "tests.test_url_for",
        "signature": "tests.test_url_for.test_routes_with_host(app)",
        "snippet": "def test_routes_with_host(app):\n    @app.route(\"/\")\n    @app.route(\"/\", name=\"hostindex\", host=\"example.com\")\n    @app.route(\"/path\", name=\"hostpath\", host=\"path.example.com\")\n    def index(request):\n        pass\n\n    assert app.url_for(\"index\") == \"/\"\n    assert app.url_for(\"hostindex\") == \"/\"\n    assert app.url_for(\"hostpath\") == \"/path\"\n    assert app.url_for(\"hostindex\", _external=True) == \"http://example.com/\"\n    assert app.url_for(\"hostpath\", _external=True) == \"http://path.example.com/path\"",
        "begin_line": 1,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_url_for.index#5",
        "src_path": "tests/test_url_for.py",
        "class_name": "tests.test_url_for",
        "signature": "tests.test_url_for.index(request)",
        "snippet": "    def index(request):\n        pass",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    }
]