[
    {
        "name": "tests.conftest.clear_session_after_test#6",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"Test wrapper to clean up after TensorFlow and CNTK tests.\n\n    This wrapper runs for all the tests in the keras test suite.\n    \"\"\"\n    yield\n    if K.backend() == 'tensorflow' or K.backend() == 'cntk':\n        K.clear_session()",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test._runner#14",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test._runner(init, shape, target_mean=None, target_std=None, target_max=None, target_min=None)",
        "snippet": "def _runner(init, shape, target_mean=None, target_std=None,\n            target_max=None, target_min=None):\n    variable = K.variable(init(shape))\n    output = K.get_value(variable)\n    lim = 3e-2\n    if target_std is not None:\n        assert abs(output.std() - target_std) < lim\n    if target_mean is not None:\n        assert abs(output.mean() - target_mean) < lim\n    if target_max is not None:\n        assert abs(output.max() - target_max) < lim\n    if target_min is not None:\n        assert abs(output.min() - target_min) < lim",
        "begin_line": 14,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_uniform#30",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_uniform(tensor_shape)",
        "snippet": "def test_uniform(tensor_shape):\n    _runner(initializers.RandomUniform(minval=-1, maxval=1), tensor_shape,\n            target_mean=0., target_max=1, target_min=-1)",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_normal#36",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_normal(tensor_shape)",
        "snippet": "def test_normal(tensor_shape):\n    _runner(initializers.RandomNormal(mean=0, stddev=1), tensor_shape,\n            target_mean=0., target_std=1)",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_truncated_normal#42",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_truncated_normal(tensor_shape)",
        "snippet": "def test_truncated_normal(tensor_shape):\n    _runner(initializers.TruncatedNormal(mean=0, stddev=1), tensor_shape,\n            target_mean=0., target_max=2, target_min=-2)",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_constant#48",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_constant(tensor_shape)",
        "snippet": "def test_constant(tensor_shape):\n    _runner(initializers.Constant(2), tensor_shape,\n            target_mean=2, target_max=2, target_min=2)",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_lecun_uniform#54",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_lecun_uniform(tensor_shape)",
        "snippet": "def test_lecun_uniform(tensor_shape):\n    fan_in, _ = initializers._compute_fans(tensor_shape)\n    std = np.sqrt(1. / fan_in)\n    _runner(initializers.lecun_uniform(), tensor_shape,\n            target_mean=0., target_std=std)",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_glorot_uniform#62",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_glorot_uniform(tensor_shape)",
        "snippet": "def test_glorot_uniform(tensor_shape):\n    fan_in, fan_out = initializers._compute_fans(tensor_shape)\n    std = np.sqrt(2. / (fan_in + fan_out))\n    _runner(initializers.glorot_uniform(), tensor_shape,\n            target_mean=0., target_std=std)",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_he_uniform#70",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_he_uniform(tensor_shape)",
        "snippet": "def test_he_uniform(tensor_shape):\n    fan_in, _ = initializers._compute_fans(tensor_shape)\n    std = np.sqrt(2. / fan_in)\n    _runner(initializers.he_uniform(), tensor_shape,\n            target_mean=0., target_std=std)",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_lecun_normal#78",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_lecun_normal(tensor_shape)",
        "snippet": "def test_lecun_normal(tensor_shape):\n    fan_in, _ = initializers._compute_fans(tensor_shape)\n    std = np.sqrt(1. / fan_in)\n    _runner(initializers.lecun_normal(), tensor_shape,\n            target_mean=0., target_std=std)",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_glorot_normal#86",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_glorot_normal(tensor_shape)",
        "snippet": "def test_glorot_normal(tensor_shape):\n    fan_in, fan_out = initializers._compute_fans(tensor_shape)\n    std = np.sqrt(2. / (fan_in + fan_out))\n    _runner(initializers.glorot_normal(), tensor_shape,\n            target_mean=0., target_std=std)",
        "begin_line": 86,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_he_normal#94",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_he_normal(tensor_shape)",
        "snippet": "def test_he_normal(tensor_shape):\n    fan_in, _ = initializers._compute_fans(tensor_shape)\n    std = np.sqrt(2. / fan_in)\n    _runner(initializers.he_normal(), tensor_shape,\n            target_mean=0., target_std=std)",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_orthogonal#102",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_orthogonal(tensor_shape)",
        "snippet": "def test_orthogonal(tensor_shape):\n    _runner(initializers.orthogonal(), tensor_shape,\n            target_mean=0.)",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_orthogonal_init_does_not_affect_global_rng#107",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_orthogonal_init_does_not_affect_global_rng()",
        "snippet": "def test_orthogonal_init_does_not_affect_global_rng():\n    np.random.seed(1337)\n    before = np.random.randint(0, 100, size=10)\n\n    np.random.seed(1337)\n    init = initializers.orthogonal(seed=9876)\n    init(shape=(10, 5))\n    after = np.random.randint(0, 100, size=10)\n\n    assert np.array_equal(before, after)",
        "begin_line": 107,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_identity#122",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_identity(tensor_shape)",
        "snippet": "def test_identity(tensor_shape):\n    target_mean = (1. * min(tensor_shape)) / (tensor_shape[0] * tensor_shape[1])\n    if len(tensor_shape) > 2:\n        with pytest.raises(ValueError):\n            _runner(initializers.identity(), tensor_shape,\n                    target_mean=target_mean, target_max=1.)\n    else:\n        _runner(initializers.identity(), tensor_shape,\n                target_mean=target_mean, target_max=1.)",
        "begin_line": 122,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_zero#134",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_zero(tensor_shape)",
        "snippet": "def test_zero(tensor_shape):\n    _runner(initializers.zeros(), tensor_shape,\n            target_mean=0., target_max=0.)",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_one#140",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_one(tensor_shape)",
        "snippet": "def test_one(tensor_shape):\n    _runner(initializers.ones(), tensor_shape,\n            target_mean=1., target_max=1.)",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.initializers_test.test_statefulness#156",
        "src_path": "tests/keras/initializers_test.py",
        "class_name": "tests.keras.initializers_test",
        "signature": "tests.keras.initializers_test.test_statefulness(initializer)",
        "snippet": "def test_statefulness(initializer):\n    # Test that calling a same seeded random initializer\n    # in succession results in different values.\n    init = initializer(seed=1337)\n    samples = [init((2, 2)) for _ in range(2)]\n    samples = [K.get_value(K.variable(x)) for x in samples]\n    assert np.mean(np.abs(samples[0] - samples[1])) > 0.",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    }
]