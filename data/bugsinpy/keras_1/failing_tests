coverage run -m pytest tests/keras/initializers_test.py::test_statefulness
============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 -- /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python
cachedir: .pytest_cache
rootdir: /home/user/BugsInPy/temp/projects/keras, inifile: pytest.ini
plugins: forked-1.1.3, flaky-3.6.1, xdist-1.32.0
gw0 I / gw1 I

[gw0] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw1] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw0] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]

[gw1] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]
gw0 [5] / gw1 [5]

scheduling tests via LoadScheduling

tests/keras/initializers_test.py::test_statefulness[orthogonal] 
tests/keras/initializers_test.py::test_statefulness[uniform] 
[gw1] [ 20%] FAILED tests/keras/initializers_test.py::test_statefulness[uniform] 
[gw0] [ 40%] FAILED tests/keras/initializers_test.py::test_statefulness[orthogonal] 
tests/keras/initializers_test.py::test_statefulness[truncated_normal] 
tests/keras/initializers_test.py::test_statefulness[normal] 
[gw1] [ 60%] FAILED tests/keras/initializers_test.py::test_statefulness[truncated_normal] 
[gw0] [ 80%] FAILED tests/keras/initializers_test.py::test_statefulness[normal] 
tests/keras/initializers_test.py::test_statefulness[variance_scaling] 
[gw1] [100%] FAILED tests/keras/initializers_test.py::test_statefulness[variance_scaling] 

=================================== FAILURES ===================================
__________________________ test_statefulness[uniform] __________________________
[gw1] linux -- Python 3.7.3 /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python

initializer = <class 'keras.initializers.RandomUniform'>

    @pytest.mark.parametrize('initializer',
                             [initializers.orthogonal,
                              initializers.uniform,
                              initializers.normal,
                              initializers.truncated_normal,
                              initializers.VarianceScaling],
                             ids=['orthogonal',
                                  'uniform',
                                  'normal',
                                  'truncated_normal',
                                  'variance_scaling'])
    def test_statefulness(initializer):
        # Test that calling a same seeded random initializer
        # in succession results in different values.
        init = initializer(seed=1337)
        samples = [init((2, 2)) for _ in range(2)]
        samples = [K.get_value(K.variable(x)) for x in samples]
>       assert np.mean(np.abs(samples[0] - samples[1])) > 0.
E       AssertionError: assert 0.0 > 0.0
E        +  where 0.0 = <function mean at 0x7f06102bf8c8>(array([[0., 0.],\n       [0., 0.]], dtype=float32))
E        +    where <function mean at 0x7f06102bf8c8> = np.mean
E        +    and   array([[0., 0.],\n       [0., 0.]], dtype=float32) = <ufunc 'absolute'>((array([[-0.02842846,  0.0409245 ],\n       [-0.02760386, -0.03162803]], dtype=float32) - array([[-0.02842846,  0.0409245 ],\n       [-0.02760386, -0.03162803]], dtype=float32)))
E        +      where <ufunc 'absolute'> = np.abs

tests/keras/initializers_test.py:162: AssertionError
----------------------------- Captured stderr call -----------------------------
WARNING:tensorflow:From /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
2023-09-01 17:55:16.459608: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory
2023-09-01 17:55:16.459627: E tensorflow/stream_executor/cuda/cuda_driver.cc:318] failed call to cuInit: UNKNOWN ERROR (303)
2023-09-01 17:55:16.459648: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:163] no NVIDIA GPU device is present: /dev/nvidia0 does not exist
2023-09-01 17:55:16.459810: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2023-09-01 17:55:16.463718: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3399905000 Hz
2023-09-01 17:55:16.464571: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55b2e78fa0f0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2023-09-01 17:55:16.464590: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
------------------------------ Captured log call -------------------------------
WARNING  tensorflow:deprecation.py:506 From /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
________________________ test_statefulness[orthogonal] _________________________
[gw0] linux -- Python 3.7.3 /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python

initializer = <class 'keras.initializers.Orthogonal'>

    @pytest.mark.parametrize('initializer',
                             [initializers.orthogonal,
                              initializers.uniform,
                              initializers.normal,
                              initializers.truncated_normal,
                              initializers.VarianceScaling],
                             ids=['orthogonal',
                                  'uniform',
                                  'normal',
                                  'truncated_normal',
                                  'variance_scaling'])
    def test_statefulness(initializer):
        # Test that calling a same seeded random initializer
        # in succession results in different values.
        init = initializer(seed=1337)
        samples = [init((2, 2)) for _ in range(2)]
        samples = [K.get_value(K.variable(x)) for x in samples]
>       assert np.mean(np.abs(samples[0] - samples[1])) > 0.
E       AssertionError: assert 0.0 > 0.0
E        +  where 0.0 = <function mean at 0x7f577c0fd8c8>(array([[0., 0.],\n       [0., 0.]], dtype=float32))
E        +    where <function mean at 0x7f577c0fd8c8> = np.mean
E        +    and   array([[0., 0.],\n       [0., 0.]], dtype=float32) = <ufunc 'absolute'>((array([[ 0.35502383,  0.93485725],\n       [ 0.93485725, -0.35502383]], dtype=float32) - array([[ 0.35502383,  0.93485725],\n       [ 0.93485725, -0.35502383]], dtype=float32)))
E        +      where <ufunc 'absolute'> = np.abs

tests/keras/initializers_test.py:162: AssertionError
----------------------------- Captured stderr call -----------------------------
WARNING:tensorflow:From /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
2023-09-01 17:55:16.453405: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory
2023-09-01 17:55:16.453425: E tensorflow/stream_executor/cuda/cuda_driver.cc:318] failed call to cuInit: UNKNOWN ERROR (303)
2023-09-01 17:55:16.453448: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:163] no NVIDIA GPU device is present: /dev/nvidia0 does not exist
2023-09-01 17:55:16.453603: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2023-09-01 17:55:16.476883: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3399905000 Hz
2023-09-01 17:55:16.477338: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55ddf3299430 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2023-09-01 17:55:16.477358: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
------------------------------ Captured log call -------------------------------
WARNING  tensorflow:deprecation.py:506 From /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
_____________________ test_statefulness[truncated_normal] ______________________
[gw1] linux -- Python 3.7.3 /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python

initializer = <class 'keras.initializers.TruncatedNormal'>

    @pytest.mark.parametrize('initializer',
                             [initializers.orthogonal,
                              initializers.uniform,
                              initializers.normal,
                              initializers.truncated_normal,
                              initializers.VarianceScaling],
                             ids=['orthogonal',
                                  'uniform',
                                  'normal',
                                  'truncated_normal',
                                  'variance_scaling'])
    def test_statefulness(initializer):
        # Test that calling a same seeded random initializer
        # in succession results in different values.
        init = initializer(seed=1337)
        samples = [init((2, 2)) for _ in range(2)]
        samples = [K.get_value(K.variable(x)) for x in samples]
>       assert np.mean(np.abs(samples[0] - samples[1])) > 0.
E       AssertionError: assert 0.0 > 0.0
E        +  where 0.0 = <function mean at 0x7f06102bf8c8>(array([[0., 0.],\n       [0., 0.]], dtype=float32))
E        +    where <function mean at 0x7f06102bf8c8> = np.mean
E        +    and   array([[0., 0.],\n       [0., 0.]], dtype=float32) = <ufunc 'absolute'>((array([[-0.04727401,  0.07371666],\n       [ 0.07910243,  0.03498879]], dtype=float32) - array([[-0.04727401,  0.07371666],\n       [ 0.07910243,  0.03498879]], dtype=float32)))
E        +      where <ufunc 'absolute'> = np.abs

tests/keras/initializers_test.py:162: AssertionError
__________________________ test_statefulness[normal] ___________________________
[gw0] linux -- Python 3.7.3 /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python

initializer = <class 'keras.initializers.RandomNormal'>

    @pytest.mark.parametrize('initializer',
                             [initializers.orthogonal,
                              initializers.uniform,
                              initializers.normal,
                              initializers.truncated_normal,
                              initializers.VarianceScaling],
                             ids=['orthogonal',
                                  'uniform',
                                  'normal',
                                  'truncated_normal',
                                  'variance_scaling'])
    def test_statefulness(initializer):
        # Test that calling a same seeded random initializer
        # in succession results in different values.
        init = initializer(seed=1337)
        samples = [init((2, 2)) for _ in range(2)]
        samples = [K.get_value(K.variable(x)) for x in samples]
>       assert np.mean(np.abs(samples[0] - samples[1])) > 0.
E       AssertionError: assert 0.0 > 0.0
E        +  where 0.0 = <function mean at 0x7f577c0fd8c8>(array([[0., 0.],\n       [0., 0.]], dtype=float32))
E        +    where <function mean at 0x7f577c0fd8c8> = np.mean
E        +    and   array([[0., 0.],\n       [0., 0.]], dtype=float32) = <ufunc 'absolute'>((array([[-0.04727401,  0.07371666],\n       [ 0.07910243,  0.03498879]], dtype=float32) - array([[-0.04727401,  0.07371666],\n       [ 0.07910243,  0.03498879]], dtype=float32)))
E        +      where <ufunc 'absolute'> = np.abs

tests/keras/initializers_test.py:162: AssertionError
_____________________ test_statefulness[variance_scaling] ______________________
[gw1] linux -- Python 3.7.3 /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python

initializer = <class 'keras.initializers.VarianceScaling'>

    @pytest.mark.parametrize('initializer',
                             [initializers.orthogonal,
                              initializers.uniform,
                              initializers.normal,
                              initializers.truncated_normal,
                              initializers.VarianceScaling],
                             ids=['orthogonal',
                                  'uniform',
                                  'normal',
                                  'truncated_normal',
                                  'variance_scaling'])
    def test_statefulness(initializer):
        # Test that calling a same seeded random initializer
        # in succession results in different values.
        init = initializer(seed=1337)
        samples = [init((2, 2)) for _ in range(2)]
        samples = [K.get_value(K.variable(x)) for x in samples]
>       assert np.mean(np.abs(samples[0] - samples[1])) > 0.
E       AssertionError: assert 0.0 > 0.0
E        +  where 0.0 = <function mean at 0x7f06102bf8c8>(array([[0., 0.],\n       [0., 0.]], dtype=float32))
E        +    where <function mean at 0x7f06102bf8c8> = np.mean
E        +    and   array([[0., 0.],\n       [0., 0.]], dtype=float32) = <ufunc 'absolute'>((array([[-0.7600454,  1.1851757],\n       [ 1.2717651,  0.5625304]], dtype=float32) - array([[-0.7600454,  1.1851757],\n       [ 1.2717651,  0.5625304]], dtype=float32)))
E        +      where <ufunc 'absolute'> = np.abs

tests/keras/initializers_test.py:162: AssertionError
=============================== warnings summary ===============================
/opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521: 10 tests with warnings
  /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:521: DeprecationWarning: tostring() is deprecated. Use tobytes() instead.
    tensor_proto.tensor_content = nparray.tostring()

/opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26
/opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26
  /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    from collections import Container

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================== slowest 20 test durations ===========================
0.05s call     tests/keras/initializers_test.py::test_statefulness[orthogonal]
0.04s call     tests/keras/initializers_test.py::test_statefulness[uniform]
0.03s call     tests/keras/initializers_test.py::test_statefulness[truncated_normal]
0.03s call     tests/keras/initializers_test.py::test_statefulness[normal]
0.03s call     tests/keras/initializers_test.py::test_statefulness[variance_scaling]

(0.00 durations hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/keras/initializers_test.py::test_statefulness[uniform] - Asserti...
FAILED tests/keras/initializers_test.py::test_statefulness[orthogonal] - Asse...
FAILED tests/keras/initializers_test.py::test_statefulness[truncated_normal]
FAILED tests/keras/initializers_test.py::test_statefulness[normal] - Assertio...
FAILED tests/keras/initializers_test.py::test_statefulness[variance_scaling]
======================== 5 failed, 12 warnings in 2.77s ========================
Using TensorFlow backend.
