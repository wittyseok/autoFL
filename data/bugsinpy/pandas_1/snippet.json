[
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#48",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method: Optional[str]=None)",
        "snippet": "    def __call__(\n        self,\n        args,\n        kwargs,\n        fname=None,\n        max_fname_arg_count=None,\n        method: Optional[str] = None,\n    ) -> None:\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 48,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#119",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks: Tuple[Block, ...] = tuple(blocks)\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    f\"Number of Block dimensions ({block.ndim}) must equal \"\n                    f\"number of axes ({self.ndim})\"\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        # Populate known_consolidate, blknos, and blklocs lazily\n        self._known_consolidated = False\n        self._blknos = None\n        self._blklocs = None",
        "begin_line": 119,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blknos#151",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blknos(self)",
        "snippet": "    def blknos(self):\n        \"\"\"\n        Suppose we want to find the array corresponding to our i'th column.\n\n        blknos[i] identifies the block from self.blocks that contains this column.\n\n        blklocs[i] identifies the column of interest within\n        self.blocks[self.blknos[i]]\n        \"\"\"\n        if self._blknos is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blknos",
        "begin_line": 151,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blklocs#167",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blklocs(self)",
        "snippet": "    def blklocs(self):\n        \"\"\"\n        See blknos.__doc__\n        \"\"\"\n        if self._blklocs is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blklocs",
        "begin_line": 167,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#200",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 200,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#204",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.axes)",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._is_single_block#221",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._is_single_block(self)",
        "snippet": "    def _is_single_block(self) -> bool:\n        if self.ndim == 1:\n            return True\n\n        if len(self.blocks) != 1:\n            return False\n\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1\n        )",
        "begin_line": 221,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#233",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self) -> None:\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            # TODO: can we avoid this?  it isn't cheap\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 233,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#255",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self) -> Index:\n        return self.axes[0]",
        "begin_line": 255,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#301",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 301,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#316",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self) -> None:\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                raise construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                f\"block items\\n# manager items: {len(self.items)}, # \"\n                f\"tot_items: {tot_items}\"\n            )",
        "begin_line": 316,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#355",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self: T, f, align_keys=None, **kwargs)",
        "snippet": "    def apply(self: T, f, align_keys=None, **kwargs) -> T:\n        \"\"\"\n        Iterate over the blocks, collect and create a new BlockManager.\n\n        Parameters\n        ----------\n        f : str or callable\n            Name of the Block method to apply.\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        assert \"filter\" not in kwargs\n\n        align_keys = align_keys or []\n        result_blocks: List[Block] = []\n        # fillna: Series/DataFrame is responsible for making sure value is aligned\n\n        self._consolidate_inplace()\n\n        aligned_args = {k: kwargs[k] for k in align_keys}\n\n        for b in self.blocks:\n\n            if aligned_args:\n\n                for k, obj in aligned_args.items():\n                    if isinstance(obj, (ABCSeries, ABCDataFrame)):\n                        # The caller is responsible for ensuring that\n                        #  obj.axes[-1].equals(self.items)\n                        if obj.ndim == 1:\n                            kwargs[k] = obj.iloc[b.mgr_locs.indexer]._values\n                        else:\n                            kwargs[k] = obj.iloc[:, b.mgr_locs.indexer]._values\n                    else:\n                        # otherwise we have an ndarray\n                        kwargs[k] = obj[b.mgr_locs.indexer]\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:\n                applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(self.axes)\n\n        return type(self).from_blocks(result_blocks, self.axes)",
        "begin_line": 355,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.setitem#530",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value) -> \"BlockManager\":\n        return self.apply(\"setitem\", indexer=indexer, value=value)",
        "begin_line": 530,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#650",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 650,
        "end_line": 656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#658",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self) -> None:\n        dtypes = [blk.dtype for blk in self.blocks if blk._can_consolidate]\n        self._is_consolidated = len(dtypes) == len(set(dtypes))\n        self._known_consolidated = True",
        "begin_line": 658,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#664",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self) -> bool:\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 664,
        "end_line": 667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_view#681",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_view(self)",
        "snippet": "    def is_view(self) -> bool:\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n\n        # It is technically possible to figure out which blocks are views\n        # e.g. [ b.values.base is not None for b in self.blocks ]\n        # but then we have the case of possibly some blocks being a view\n        # and some blocks not. setting in theory is possible on the non-view\n        # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n        # complicated\n\n        return False",
        "begin_line": 681,
        "end_line": 693,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#755",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self: T, deep=True)",
        "snippet": "    def copy(self: T, deep=True) -> T:\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : bool or string, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            # hit in e.g. tests.io.json.test_pandas\n\n            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()\n\n            new_axes = [copy_func(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n\n        res = self.apply(\"copy\", deep=deep)\n        res.axes = new_axes\n        return res",
        "begin_line": 755,
        "end_line": 782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy_func#773",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy_func(ax)",
        "snippet": "            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()",
        "begin_line": 773,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#937",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self) -> \"BlockManager\":\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 937,
        "end_line": 951,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#953",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 953,
        "end_line": 958,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#960",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i: int)",
        "snippet": "    def iget(self, i: int) -> \"SingleBlockManager\":\n        \"\"\"\n        Return the data as a SingleBlockManager.\n        \"\"\"\n        block = self.blocks[self.blknos[i]]\n        values = block.iget(self.blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            block.make_block_same_class(\n                values, placement=slice(0, len(values)), ndim=1\n            ),\n            self.axes[1],\n        )",
        "begin_line": 960,
        "end_line": 973,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iset#1019",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iset(self, loc: Union[int, slice, np.ndarray], value)",
        "snippet": "    def iset(self, loc: Union[int, slice, np.ndarray], value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n        if self._blklocs is None and self.ndim > 1:\n            self._rebuild_blknos_and_blklocs()\n\n        value_is_extension_type = is_extension_array_dtype(value)\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        if lib.is_integer(loc):\n            # We have 6 tests where loc is _not_ an int.\n            # In this case, get_blkno_placements will yield only one tuple,\n            #  containing (self._blknos[loc], BlockPlacement(slice(0, 1, 1)))\n            loc = [loc]\n\n        # Accessing public blknos ensures the public versions are initialized\n        blknos = self.blknos[loc]\n        blklocs = self.blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = new_blknos[self._blknos]\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks: List[Block] = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that EA blocks contain only\n                # one item.\n                # TODO(EA2D): special casing unnecessary with 2D EAs\n                new_blocks.extend(\n                    make_block(\n                        values=value,\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 1019,
        "end_line": 1135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1046",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value[placement.indexer]",
        "begin_line": 1046,
        "end_line": 1047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.insert#1137",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.insert(self, loc: int, item: Label, value, allow_duplicates: bool=False)",
        "snippet": "    def insert(self, loc: int, item: Label, value, allow_duplicates: bool = False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            # Should this be a different kind of error??\n            raise ValueError(f\"cannot insert {item}, already exists\")\n\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        # insert to the axis; this could possibly raise a TypeError\n        new_axis = self.items.insert(loc, item)\n\n        if value.ndim == self.ndim - 1 and not is_extension_array_dtype(value.dtype):\n            # TODO(EA2D): special case not needed with 2D EAs\n            value = _safe_reshape(value, (1,) + value.shape)\n\n        block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n        for blkno, count in _fast_count_smallints(self.blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n\n        # Accessing public blklocs ensures the public versions are initialized\n        if loc == self.blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n        self.axes[0] = new_axis\n        self.blocks += (block,)\n\n        self._known_consolidated = False\n\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()",
        "begin_line": 1137,
        "end_line": 1190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_indexer#1213",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_indexer(self: T, new_axis, indexer, axis: int, fill_value=None, allow_dups: bool=False, copy: bool=True)",
        "snippet": "    def reindex_indexer(\n        self: T,\n        new_axis,\n        indexer,\n        axis: int,\n        fill_value=None,\n        allow_dups: bool = False,\n        copy: bool = True,\n    ) -> T:\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object, default None\n        allow_dups : bool, default False\n        copy : bool, default True\n\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n\n        self._consolidate_inplace()\n\n        # some axes don't allow reindexing with dups\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_value=fill_value)\n        else:\n            new_blocks = [\n                blk.take_nd(\n                    indexer,\n                    axis=axis,\n                    fill_value=(\n                        fill_value if fill_value is not None else blk.fill_value\n                    ),\n                )\n                for blk in self.blocks\n            ]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n\n        return type(self).from_blocks(new_blocks, new_axes)",
        "begin_line": 1213,
        "end_line": 1270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0#1272",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0(self, slice_or_indexer, fill_value=lib.no_default, only_slice: bool=False)",
        "snippet": "    def _slice_take_blocks_ax0(\n        self, slice_or_indexer, fill_value=lib.no_default, only_slice: bool = False\n    ):\n        \"\"\"\n        Slice/take blocks along axis=0.\n\n        Overloaded for SingleBlock\n\n        Parameters\n        ----------\n        slice_or_indexer : slice, ndarray[bool], or list-like of ints\n        fill_value : scalar, default lib.no_default\n        only_slice : bool, default False\n            If True, we always return views on existing arrays, never copies.\n            This is used when called from ops.blockwise.operate_blockwise.\n\n        Returns\n        -------\n        new_blocks : list of Block\n        \"\"\"\n        allow_fill = fill_value is not lib.no_default\n\n        sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n            slice_or_indexer, self.shape[0], allow_fill=allow_fill\n        )\n\n        if self._is_single_block:\n            blk = self.blocks[0]\n\n            if sl_type in (\"slice\", \"mask\"):\n                # GH#32959 EABlock would fail since we cant make 0-width\n                # TODO(EA2D): special casing unnecessary with 2D EAs\n                if sllen == 0:\n                    return []\n                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_value is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n\n                if not allow_fill and only_slice:\n                    # GH#33597 slice instead of take, so we get\n                    #  views instead of copies\n                    blocks = [\n                        blk.getitem_block([ml], new_mgr_locs=i)\n                        for i, ml in enumerate(slobj)\n                    ]\n                    return blocks\n                else:\n                    return [\n                        blk.take_nd(\n                            slobj,\n                            axis=0,\n                            new_mgr_locs=slice(0, sllen),\n                            fill_value=fill_value,\n                        )\n                    ]\n\n        if sl_type in (\"slice\", \"mask\"):\n            blknos = self.blknos[slobj]\n            blklocs = self.blklocs[slobj]\n        else:\n            blknos = algos.take_1d(\n                self.blknos, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n            blklocs = algos.take_1d(\n                self.blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n\n        # When filling blknos, make sure blknos is updated before appending to\n        # blocks list, that way new blkno is exactly len(blocks).\n        blocks = []\n        for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n            if blkno == -1:\n                # If we've got here, fill_value was not lib.no_default\n\n                blocks.append(\n                    self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n                )\n            else:\n                blk = self.blocks[blkno]\n\n                # Otherwise, slicing along items axis is necessary.\n                if not blk._can_consolidate:\n                    # A non-consolidatable block, it's easy, because there's\n                    # only one item and each mgr loc is a copy of that single\n                    # item.\n                    for mgr_loc in mgr_locs:\n                        newblk = blk.copy(deep=False)\n                        newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                        blocks.append(newblk)\n\n                else:\n                    # GH#32779 to avoid the performance penalty of copying,\n                    #  we may try to only slice\n                    taker = blklocs[mgr_locs.indexer]\n                    max_len = max(len(mgr_locs), taker.max() + 1)\n                    if only_slice:\n                        taker = lib.maybe_indices_to_slice(taker, max_len)\n\n                    if isinstance(taker, slice):\n                        nb = blk.getitem_block(taker, new_mgr_locs=mgr_locs)\n                        blocks.append(nb)\n                    elif only_slice:\n                        # GH#33597 slice instead of take, so we get\n                        #  views instead of copies\n                        for i, ml in zip(taker, mgr_locs):\n                            nb = blk.getitem_block([i], new_mgr_locs=ml)\n                            blocks.append(nb)\n                    else:\n                        nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)\n                        blocks.append(nb)\n\n        return blocks",
        "begin_line": 1272,
        "end_line": 1384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1492",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Index, do_integrity_check: bool=False, fastpath=lib.no_default)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Index,\n        do_integrity_check: bool = False,\n        fastpath=lib.no_default,\n    ):\n        assert isinstance(block, Block), type(block)\n        assert isinstance(axis, Index), type(axis)\n\n        if fastpath is not lib.no_default:\n            warnings.warn(\n                \"The `fastpath` keyword is deprecated and will be removed \"\n                \"in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        self.axes = [axis]\n        self.blocks = tuple([block])",
        "begin_line": 1492,
        "end_line": 1511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_blocks#1514",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(\n        cls, blocks: List[Block], axes: List[Index]\n    ) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        assert len(blocks) == 1\n        assert len(axes) == 1\n        return cls(blocks[0], axes[0], do_integrity_check=False)",
        "begin_line": 1514,
        "end_line": 1522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_array#1525",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_array(cls, array: ArrayLike, index: Index)",
        "snippet": "    def from_array(cls, array: ArrayLike, index: Index) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for if we have an array that is not yet a Block.\n        \"\"\"\n        block = make_block(array, placement=slice(0, len(index)), ndim=1)\n        return cls(block, index)",
        "begin_line": 1525,
        "end_line": 1530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1536",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self) -> Block:\n        return self.blocks[0]",
        "begin_line": 1536,
        "end_line": 1537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014114326040931546,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1563",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        return self._block.dtype",
        "begin_line": 1563,
        "end_line": 1564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014204545454545454,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1573",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"The array that Series._values returns\"\"\"\n        return self._block.internal_values()",
        "begin_line": 1573,
        "end_line": 1575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1581",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        return True",
        "begin_line": 1581,
        "end_line": 1582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1587",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1587,
        "end_line": 1588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1635",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names: Index, axes: List[Index])",
        "snippet": "def create_block_manager_from_arrays(\n    arrays, names: Index, axes: List[Index]\n) -> BlockManager:\n    assert isinstance(names, Index)\n    assert isinstance(axes, list)\n    assert all(isinstance(x, Index) for x in axes)\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        raise construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1635,
        "end_line": 1648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1675",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names: Index, axes)",
        "snippet": "def form_blocks(arrays, names: Index, axes) -> List[Block]:\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict: DefaultDict[str, List] = defaultdict(list)\n    extra_locs = []\n\n    names_idx = names\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks: List[Block] = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], DT64NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=i)\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=i)\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=i)\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1675,
        "end_line": 1769,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1772",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype) -> List[Block]:\n    \"\"\"\n    return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1772,
        "end_line": 1784,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1787",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1787,
        "end_line": 1800,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1803",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1803,
        "end_line": 1827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1806",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1806,
        "end_line": 1810,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1812",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1812,
        "end_line": 1816,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._fast_count_smallints#1964",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._fast_count_smallints(arr: np.ndarray)",
        "snippet": "def _fast_count_smallints(arr: np.ndarray) -> np.ndarray:\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
        "begin_line": 1964,
        "end_line": 1968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.managers._preprocess_slice_or_indexer#1971",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._preprocess_slice_or_indexer(slice_or_indexer, length: int, allow_fill: bool)",
        "snippet": "def _preprocess_slice_or_indexer(slice_or_indexer, length: int, allow_fill: bool):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
        "begin_line": 1971,
        "end_line": 1986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat.concat#67",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat.concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Label, FrameOrSeriesUnion]], axis=0, join='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True)",
        "snippet": "def concat(\n    objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Label, FrameOrSeriesUnion]],\n    axis=0,\n    join=\"outer\",\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n) -> FrameOrSeriesUnion:\n    \"\"\"\n    Concatenate pandas objects along a particular axis with optional set logic\n    along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a mapping is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default False\n        Sort non-concatenation axis if it is not already aligned when `join`\n        is 'outer'.\n        This has no effect when ``join='inner'``, which already preserves\n        the order of the non-concatenation axis.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n           Changed to not sort by default.\n\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    Series.append : Concatenate Series.\n    DataFrame.append : Concatenate DataFrames.\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n    \"\"\"\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()",
        "begin_line": 67,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.__init__#292",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
        "snippet": "    def __init__(\n        self,\n        objs,\n        axis=0,\n        join: str = \"outer\",\n        keys=None,\n        levels=None,\n        names=None,\n        ignore_index: bool = False,\n        verify_integrity: bool = False,\n        copy: bool = True,\n        sort=False,\n    ):\n        if isinstance(objs, (NDFrame, str)):\n            raise TypeError(\n                \"first argument must be an iterable of pandas \"\n                f'objects, you passed an object of type \"{type(objs).__name__}\"'\n            )\n\n        if join == \"outer\":\n            self.intersect = False\n        elif join == \"inner\":\n            self.intersect = True\n        else:  # pragma: no cover\n            raise ValueError(\n                \"Only can inner (intersect) or outer (union) join the other axis\"\n            )\n\n        if isinstance(objs, abc.Mapping):\n            if keys is None:\n                keys = list(objs.keys())\n            objs = [objs[k] for k in keys]\n        else:\n            objs = list(objs)\n\n        if len(objs) == 0:\n            raise ValueError(\"No objects to concatenate\")\n\n        if keys is None:\n            objs = list(com.not_none(*objs))\n        else:\n            # #1649\n            clean_keys = []\n            clean_objs = []\n            for k, v in zip(keys, objs):\n                if v is None:\n                    continue\n                clean_keys.append(k)\n                clean_objs.append(v)\n            objs = clean_objs\n            name = getattr(keys, \"name\", None)\n            keys = Index(clean_keys, name=name)\n\n        if len(objs) == 0:\n            raise ValueError(\"All objects passed were None\")\n\n        # consolidate data & figure out what our result ndim is going to be\n        ndims = set()\n        for obj in objs:\n            if not isinstance(obj, (Series, DataFrame)):\n                msg = (\n                    f\"cannot concatenate object of type '{type(obj)}'; \"\n                    \"only Series and DataFrame objs are valid\"\n                )\n                raise TypeError(msg)\n\n            # consolidate\n            obj._consolidate(inplace=True)\n            ndims.add(obj.ndim)\n\n        # get the sample\n        # want the highest ndim that we have, and must be non-empty\n        # unless all objs are empty\n        sample = None\n        if len(ndims) > 1:\n            max_ndim = max(ndims)\n            for obj in objs:\n                if obj.ndim == max_ndim and np.sum(obj.shape):\n                    sample = obj\n                    break\n\n        else:\n            # filter out the empties if we have not multi-index possibilities\n            # note to keep empty Series as it affect to result columns / name\n            non_empties = [\n                obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)\n            ]\n\n            if len(non_empties) and (\n                keys is None and names is None and levels is None and not self.intersect\n            ):\n                objs = non_empties\n                sample = objs[0]\n\n        if sample is None:\n            sample = objs[0]\n        self.objs = objs\n\n        # Standardize axis parameter to int\n        if isinstance(sample, Series):\n            axis = DataFrame._get_axis_number(axis)\n        else:\n            axis = sample._get_axis_number(axis)\n\n        # Need to flip BlockManager axis in the DataFrame special case\n        self._is_frame = isinstance(sample, ABCDataFrame)\n        if self._is_frame:\n            axis = DataFrame._get_block_manager_axis(axis)\n\n        self._is_series = isinstance(sample, ABCSeries)\n        if not 0 <= axis <= sample.ndim:\n            raise AssertionError(\n                f\"axis must be between 0 and {sample.ndim}, input was {axis}\"\n            )\n\n        # if we have mixed ndims, then convert to highest ndim\n        # creating column numbers as needed\n        if len(ndims) > 1:\n            current_column = 0\n            max_ndim = sample.ndim\n            self.objs, objs = [], self.objs\n            for obj in objs:\n\n                ndim = obj.ndim\n                if ndim == max_ndim:\n                    pass\n\n                elif ndim != max_ndim - 1:\n                    raise ValueError(\n                        \"cannot concatenate unaligned mixed \"\n                        \"dimensional NDFrame objects\"\n                    )\n\n                else:\n                    name = getattr(obj, \"name\", None)\n                    if ignore_index or name is None:\n                        name = current_column\n                        current_column += 1\n\n                    # doing a row-wise concatenation so need everything\n                    # to line up\n                    if self._is_frame and axis == 1:\n                        name = 0\n                    obj = sample._constructor({name: obj})\n\n                self.objs.append(obj)\n\n        # note: this is the BlockManager axis (since DataFrame is transposed)\n        self.bm_axis = axis\n        self.axis = 1 - self.bm_axis if self._is_frame else 0\n        self.keys = keys\n        self.names = names or getattr(keys, \"names\", None)\n        self.levels = levels\n        self.sort = sort\n\n        self.ignore_index = ignore_index\n        self.verify_integrity = verify_integrity\n        self.copy = copy\n\n        self.new_axes = self._get_new_axes()",
        "begin_line": 292,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.get_result#453",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.get_result(self)",
        "snippet": "    def get_result(self):\n\n        # series only\n        if self._is_series:\n\n            # stack blocks\n            if self.bm_axis == 0:\n                name = com.consensus_name_attr(self.objs)\n                cons = self.objs[0]._constructor\n\n                arrs = [ser._values for ser in self.objs]\n\n                res = concat_compat(arrs, axis=0)\n                result = cons(res, index=self.new_axes[0], name=name, dtype=res.dtype)\n                return result.__finalize__(self, method=\"concat\")\n\n            # combine as columns in a frame\n            else:\n                data = dict(zip(range(len(self.objs)), self.objs))\n\n                # GH28330 Preserves subclassed objects through concat\n                cons = self.objs[0]._constructor_expanddim\n\n                index, columns = self.new_axes\n                df = cons(data, index=index)\n                df.columns = columns\n                return df.__finalize__(self, method=\"concat\")\n\n        # combine block managers\n        else:\n            mgrs_indexers = []\n            for obj in self.objs:\n                indexers = {}\n                for ax, new_labels in enumerate(self.new_axes):\n                    # ::-1 to convert BlockManager ax to DataFrame ax\n                    if ax == self.bm_axis:\n                        # Suppress reindexing on concat axis\n                        continue\n\n                    # 1-ax to convert BlockManager axis to DataFrame axis\n                    obj_labels = obj.axes[1 - ax]\n                    if not new_labels.equals(obj_labels):\n                        indexers[ax] = obj_labels.reindex(new_labels)[1]\n\n                mgrs_indexers.append((obj._mgr, indexers))\n\n            new_data = concatenate_block_managers(\n                mgrs_indexers, self.new_axes, concat_axis=self.bm_axis, copy=self.copy\n            )\n            if not self.copy:\n                new_data._consolidate_inplace()\n\n            cons = self.objs[0]._constructor\n            return cons(new_data).__finalize__(self, method=\"concat\")",
        "begin_line": 453,
        "end_line": 506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_result_dim#508",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_result_dim(self)",
        "snippet": "    def _get_result_dim(self) -> int:\n        if self._is_series and self.bm_axis == 1:\n            return 2\n        else:\n            return self.objs[0].ndim",
        "begin_line": 508,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_new_axes#514",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_new_axes(self)",
        "snippet": "    def _get_new_axes(self) -> List[Index]:\n        ndim = self._get_result_dim()\n        return [\n            self._get_concat_axis() if i == self.bm_axis else self._get_comb_axis(i)\n            for i in range(ndim)\n        ]",
        "begin_line": 514,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_concat_axis#531",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_concat_axis(self)",
        "snippet": "    def _get_concat_axis(self) -> Index:\n        \"\"\"\n        Return index to be used along concatenation axis.\n        \"\"\"\n        if self._is_series:\n            if self.bm_axis == 0:\n                indexes = [x.index for x in self.objs]\n            elif self.ignore_index:\n                idx = ibase.default_index(len(self.objs))\n                return idx\n            elif self.keys is None:\n                names: List[Label] = [None] * len(self.objs)\n                num = 0\n                has_names = False\n                for i, x in enumerate(self.objs):\n                    if not isinstance(x, Series):\n                        raise TypeError(\n                            f\"Cannot concatenate type 'Series' with \"\n                            f\"object of type '{type(x).__name__}'\"\n                        )\n                    if x.name is not None:\n                        names[i] = x.name\n                        has_names = True\n                    else:\n                        names[i] = num\n                        num += 1\n                if has_names:\n                    return Index(names)\n                else:\n                    return ibase.default_index(len(self.objs))\n            else:\n                return ensure_index(self.keys).set_names(self.names)\n        else:\n            indexes = [x.axes[self.axis] for x in self.objs]\n\n        if self.ignore_index:\n            idx = ibase.default_index(sum(len(i) for i in indexes))\n            return idx\n\n        if self.keys is None:\n            concat_axis = _concat_indexes(indexes)\n        else:\n            concat_axis = _make_concat_multiindex(\n                indexes, self.keys, self.levels, self.names\n            )\n\n        self._maybe_check_integrity(concat_axis)\n\n        return concat_axis",
        "begin_line": 531,
        "end_line": 579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity#581",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self, concat_index: Index)",
        "snippet": "    def _maybe_check_integrity(self, concat_index: Index):\n        if self.verify_integrity:\n            if not concat_index.is_unique:\n                overlap = concat_index[concat_index.duplicated()].unique()\n                raise ValueError(f\"Indexes have overlapping values: {overlap}\")",
        "begin_line": 581,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.reshape.concat._concat_indexes#588",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._concat_indexes(indexes)",
        "snippet": "def _concat_indexes(indexes) -> Index:\n    return indexes[0].append(indexes[1:])",
        "begin_line": 588,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#31",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 31,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_file_like#96",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_file_like(obj)",
        "snippet": "def is_file_like(obj) -> bool:\n    \"\"\"\n    Check if the object is a file-like object.\n\n    For objects to be considered file-like, they must\n    be an iterator AND have either a `read` and/or `write`\n    method as an attribute.\n\n    Note: file-like objects must be iterable, but\n    iterable objects need not be file-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_file_like : bool\n        Whether `obj` has file-like properties.\n\n    Examples\n    --------\n    >>> import io\n    >>> buffer = io.StringIO(\"data\")\n    >>> is_file_like(buffer)\n    True\n    >>> is_file_like([1, 2, 3])\n    False\n    \"\"\"\n    if not (hasattr(obj, \"read\") or hasattr(obj, \"write\")):\n        return False\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return True",
        "begin_line": 96,
        "end_line": 131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#185",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 185,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014613473622680112,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#263",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 263,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_named_tuple#295",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_named_tuple(obj)",
        "snippet": "def is_named_tuple(obj) -> bool:\n    \"\"\"\n    Check if the object is a named tuple.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_named_tuple : bool\n        Whether `obj` is a named tuple.\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    >>> p = Point(1, 2)\n    >>>\n    >>> is_named_tuple(p)\n    True\n    >>> is_named_tuple((1, 2))\n    False\n    \"\"\"\n    return isinstance(obj, tuple) and hasattr(obj, \"_fields\")",
        "begin_line": 295,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#322",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> import collections\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 322,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#360",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj) -> bool:\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 360,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dataclass#391",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dataclass(item)",
        "snippet": "def is_dataclass(item):\n    \"\"\"\n    Checks if the object is a data-class instance\n\n    Parameters\n    ----------\n    item : object\n\n    Returns\n    --------\n    is_dataclass : bool\n        True if the item is an instance of a data-class,\n        will return false if you pass the data class itself\n\n    Examples\n    --------\n    >>> from dataclasses import dataclass\n    >>> @dataclass\n    ... class Point:\n    ...     x: int\n    ...     y: int\n\n    >>> is_dataclass(Point)\n    False\n    >>> is_dataclass(Point(0,2))\n    True\n\n    \"\"\"\n    try:\n        from dataclasses import is_dataclass\n\n        return is_dataclass(item) and not isinstance(item, type)\n    except ImportError:\n        return False",
        "begin_line": 391,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.util._decorators.decorator#352",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorator(func: F)",
        "snippet": "    def decorator(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)\n\n        # collecting docstring and docstring templates\n        docstring_components: List[Union[str, Callable]] = []\n        if func.__doc__:\n            docstring_components.append(dedent(func.__doc__))\n\n        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)\n\n        # formatting templates and concatenating docstring\n        wrapper.__doc__ = \"\".join(\n            [\n                arg.format(**kwargs)\n                if isinstance(arg, str)\n                else dedent(arg.__doc__ or \"\")\n                for arg in docstring_components\n            ]\n        )\n\n        wrapper._docstring_components = docstring_components  # type: ignore\n\n        return cast(F, wrapper)",
        "begin_line": 352,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014371945961483184,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#354",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)",
        "begin_line": 354,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014371945961483184,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#112",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                f\"Wrong number of items passed {len(self.values)}, \"\n                f\"placement implies {len(self.mgr_locs)}\"\n            )",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#123",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            raise ValueError(\n                \"Wrong number of dimensions. \"\n                f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n            )\n        return ndim",
        "begin_line": 123,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_view#173",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_view(self)",
        "snippet": "    def is_view(self) -> bool:\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        return self.values.base is not None",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#193",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"\n        The array that Series._values returns (internal values).\n        \"\"\"\n        return self.values",
        "begin_line": 193,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.array_values#199",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        \"\"\"\n        The array that Series.array returns. Always an ExtensionArray.\n        \"\"\"\n        return PandasArray(self.values)",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#226",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 226,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001444043321299639,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#230",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 230,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001444043321299639,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#236",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None) -> \"Block\":\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if self.is_extension:\n            values = _block_shape(values, ndim=self.ndim)\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 236,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#248",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return type(self)(values, placement=placement, ndim=ndim)",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#302",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 302,
        "end_line": 303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#306",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 306,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014114326040931546,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#309",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 309,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.set#312",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        Modify block values in-place with new item value.\n\n        Notes\n        -----\n        `set` never creates a new array or new Block, whereas `setitem` _may_\n        create a new array and always creates a new Block.\n        \"\"\"\n        self.values[locs] = values",
        "begin_line": 312,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.apply#330",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.apply(self, func, **kwargs)",
        "snippet": "    def apply(self, func, **kwargs) -> List[\"Block\"]:\n        \"\"\"\n        apply the function to my values; return a block if we are not\n        one\n        \"\"\"\n        with np.errstate(all=\"ignore\"):\n            result = func(self.values, **kwargs)\n\n        return self._split_op_result(result)",
        "begin_line": 330,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._split_op_result#340",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._split_op_result(self, result)",
        "snippet": "    def _split_op_result(self, result) -> List[\"Block\"]:\n        # See also: split_and_operate\n        if is_extension_array_dtype(result) and result.ndim > 1:\n            # TODO(EA2D): unnecessary with 2D EAs\n            # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n            nbs = []\n            for i, loc in enumerate(self.mgr_locs):\n                vals = result[i]\n                block = self.make_block(values=vals, placement=[loc])\n                nbs.append(block)\n            return nbs\n\n        if not isinstance(result, Block):\n            result = self.make_block(result)\n\n        return [result]",
        "begin_line": 340,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.should_store#628",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.should_store(self, value: ArrayLike)",
        "snippet": "    def should_store(self, value: ArrayLike) -> bool:\n        \"\"\"\n        Should we set self.values[indexer] = value inplace or do we need to cast?\n\n        Parameters\n        ----------\n        value : np.ndarray or ExtensionArray\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return is_dtype_equal(value.dtype, self.dtype)",
        "begin_line": 628,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#661",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep: bool=True)",
        "snippet": "    def copy(self, deep: bool = True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 661,
        "end_line": 666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.setitem#764",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"\n        Attempt self.values[indexer] = value, possibly creating a new array.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n\n        if isinstance(indexer, np.ndarray) and indexer.ndim > self.ndim:\n            raise ValueError(f\"Cannot set values with ndim > {self.ndim}\")\n\n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n\n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar_for_putitemlike(value, values.dtype)\n\n        else:\n            # current dtype cannot store value, coerce to common dtype\n\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n\n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            else:\n                # e.g. we are bool dtype and value is nan\n                # TODO: watch out for case with listlike value and scalar/empty indexer\n                dtype, _ = maybe_promote(np.array(value).dtype)\n                return self.astype(dtype).setitem(indexer, value)\n\n            dtype = find_common_type([values.dtype, dtype])\n            assert not is_dtype_equal(self.dtype, dtype)\n            # otherwise should have _can_hold_element\n\n            return self.astype(dtype).setitem(indexer, value)\n\n        # value must be storable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n\n        if transpose:\n            values = values.T\n\n        # length checking\n        check_setitem_lengths(indexer, value, values)\n        exact_match = (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        )\n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n\n        elif is_scalar_indexer(indexer, self.ndim):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n\n        elif exact_match and is_categorical_dtype(arr_value.dtype):\n            # GH25495 - If the current dtype is not categorical,\n            # we need to create a new categorical block\n            values[indexer] = value\n            return self.make_block(Categorical(self.values, dtype=arr_value.dtype))\n\n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif exact_match:\n            # We are setting _all_ of the array's values, so can cast to new dtype\n            values[indexer] = value\n\n            values = values.astype(arr_value.dtype, copy=False)\n\n        # set\n        else:\n            values[indexer] = value\n\n        if transpose:\n            values = values.T\n        block = self.make_block(values)\n        return block",
        "begin_line": 764,
        "end_line": 871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.take_nd#1219",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_value=lib.no_default)",
        "snippet": "    def take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_value=lib.no_default):\n        \"\"\"\n        Take values according to indexer and return them as a block.bb\n\n        \"\"\"\n        # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n        # so need to preserve types\n        # sparse is treated like an ndarray, but needs .get_values() shaping\n\n        values = self.values\n\n        if fill_value is lib.no_default:\n            fill_value = self.fill_value\n            allow_fill = False\n        else:\n            allow_fill = True\n\n        new_values = algos.take_nd(\n            values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        if not is_dtype_equal(new_values.dtype, self.dtype):\n            return self.make_block(new_values, new_mgr_locs)\n        else:\n            return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1219,
        "end_line": 1249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1523",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"\n        Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        values = self._maybe_coerce_values(values)\n\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)\n\n        if self.ndim == 2 and len(self.mgr_locs) != 1:\n            # TODO(EA2D): check unnecessary with 2D EAs\n            raise AssertionError(\"block.size != values.size\")",
        "begin_line": 1523,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1605",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1605,
        "end_line": 1620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock._can_hold_element#1921",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n                tipo.type, (np.datetime64, np.timedelta64)\n            )\n        return isinstance(\n            element, (float, int, np.floating, np.int_)\n        ) and not isinstance(\n            element,\n            (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n        )",
        "begin_line": 1921,
        "end_line": 1932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder#2003",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2003,
        "end_line": 2004,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values#2019",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values(self)",
        "snippet": "    def internal_values(self):\n        # Override to return DatetimeArray and TimedeltaArray\n        return self.array_values()",
        "begin_line": 2019,
        "end_line": 2021,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.array_values#2023",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.array_values(self)",
        "snippet": "    def array_values(self):\n        return self._holder._simple_new(self.values)",
        "begin_line": 2023,
        "end_line": 2024,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget#2026",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget(self, key)",
        "snippet": "    def iget(self, key):\n        # GH#31649 we need to wrap scalars in Timestamp/Timedelta\n        # TODO(EA2D): this can be removed if we ever have 2D EA\n        return self.array_values().reshape(self.shape)[key]",
        "begin_line": 2026,
        "end_line": 2029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2042",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2042,
        "end_line": 2044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2050",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != DT64NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2050,
        "end_line": 2073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element#2096",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            if self.is_datetimetz:\n                # require exact match, since non-nano does not exist\n                return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                    element, self.dtype\n                )\n\n            # GH#27419 if we get a non-nano datetime64 object\n            return is_datetime64_dtype(tipo)\n        elif element is NaT:\n            return True\n        elif isinstance(element, datetime):\n            if self.is_datetimetz:\n                return tz_compare(element.tzinfo, self.dtype.tz)\n            return element.tzinfo is None\n\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2096,
        "end_line": 2114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.set#2125",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        See Block.set.__doc__\n        \"\"\"\n        values = conversion.ensure_datetime64ns(values, copy=False)\n\n        self.values[locs] = values",
        "begin_line": 2125,
        "end_line": 2131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2149",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2149,
        "end_line": 2150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2152",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2152,
        "end_line": 2172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.__init__#2306",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        if values.dtype != TD64NS_DTYPE:\n            values = conversion.ensure_timedelta64ns(values)\n        if isinstance(values, TimedeltaArray):\n            values = values._data\n        assert isinstance(values, np.ndarray), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2306,
        "end_line": 2312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._holder#2315",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return TimedeltaArray",
        "begin_line": 2315,
        "end_line": 2316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2373",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2373,
        "end_line": 2377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2626",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2626,
        "end_line": 2630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2655",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical_dtype(values.dtype):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values.dtype)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values.dtype):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values.dtype):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2655,
        "end_line": 2698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2701",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            # TODO(EA2D): special case not needed with 2D EAs\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values.dtype):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2701,
        "end_line": 2722,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#2728",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
        "begin_line": 2728,
        "end_line": 2741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#17",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ArrayLike, right: Any)",
        "snippet": "def should_extension_dispatch(left: ArrayLike, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should dispatch to ExtensionArray method.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return isinstance(left, ABCExtensionArray) or isinstance(right, ABCExtensionArray)",
        "begin_line": 17,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.tseries.offsets.OffsetMeta.__instancecheck__#91",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.OffsetMeta",
        "signature": "pandas.tseries.offsets.OffsetMeta.__instancecheck__(cls, obj)",
        "snippet": "    def __instancecheck__(cls, obj) -> bool:\n        return isinstance(obj, BaseOffset)",
        "begin_line": 91,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001316829075585989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.__init__#197",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.__init__(self, n=1, normalize=False, **kwds)",
        "snippet": "    def __init__(self, n=1, normalize=False, **kwds):\n        BaseOffset.__init__(self, n, normalize)\n\n        off, use_rd = liboffsets._determine_offset(kwds)\n        object.__setattr__(self, \"_offset\", off)\n        object.__setattr__(self, \"_use_relativedelta\", use_rd)\n        for key in kwds:\n            val = kwds[key]\n            object.__setattr__(self, key, val)",
        "begin_line": 197,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorMixin._params#322",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorMixin",
        "signature": "pandas.tseries.offsets.SingleConstructorMixin._params(self)",
        "snippet": "    def _params(self):\n        # TODO: see if we can just write cache_readonly(BaseOffset._params.__get__)\n        return BaseOffset._params.__get__(self)",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorMixin.freqstr#327",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorMixin",
        "signature": "pandas.tseries.offsets.SingleConstructorMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        # TODO: see if we can just write cache_readonly(BaseOffset.freqstr.__get__)\n        return BaseOffset.freqstr.__get__(self)",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#225",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=lib.no_default, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=lib.no_default,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        name = maybe_extract_name(name, data, cls)\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name)\n        return subarr",
        "begin_line": 225,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001485222040695084,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#265",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values: DatetimeArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: DatetimeArray, name: Label = None):\n        assert isinstance(values, DatetimeArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result._reset_identity()\n        return result",
        "begin_line": 265,
        "end_line": 276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014539110206455364,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#712",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 712,
        "end_line": 715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#812",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs,\n    )\n    return DatetimeIndex._simple_new(dtarr, name=name)",
        "begin_line": 812,
        "end_line": 972,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#433",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._mgr\n\n        if isinstance(data, BlockManager):\n            if index is None and columns is None and dtype is None and copy is False:\n                # GH#33357 fastpath\n                NDFrame.__init__(self, data)\n                return\n\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, (abc.Sequence, ExtensionArray)):\n                data = list(data)\n            if len(data) > 0:\n                if is_dataclass(data[0]):\n                    data = dataclasses_to_dicts(data)\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as err:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    f\"incompatible data and dtype: {err}\"\n                )\n                raise exc from err\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr)",
        "begin_line": 433,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.axes#543",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]",
        "begin_line": 543,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1072",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1072,
        "end_line": 1076,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ixs#2747",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        # irow\n        if axis == 0:\n            new_values = self._mgr.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_values, np.ndarray) and new_values.base is None\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[i],\n                dtype=new_values.dtype,\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            values = self._mgr.iget(i)\n            result = self._box_col_values(values, i)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n\n            return result",
        "begin_line": 2747,
        "end_line": 2783,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2800",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self._take_with_is_copy(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2800,
        "end_line": 2855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_value#2919",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_value(self, index, col, takeable: bool=False)",
        "snippet": "    def _get_value(self, index, col, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        scalar\n        \"\"\"\n        if takeable:\n            series = self._ixs(col, axis=1)\n            return series._values[index]\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        try:\n            loc = engine.get_loc(index)\n            return series._values[loc]\n        except KeyError:\n            # GH 20629\n            if self.index.nlevels > 1:\n                # partial indexing forbidden\n                raise\n\n        # we cannot handle direct indexing\n        # use positional\n        col = self.columns.get_loc(col)\n        index = self.index.get_loc(index)\n        return self._get_value(index, col, takeable=True)",
        "begin_line": 2919,
        "end_line": 2953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2955",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2955,
        "end_line": 2971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._iset_item#3022",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._iset_item(self, loc: int, value)",
        "snippet": "    def _iset_item(self, loc: int, value):\n        self._ensure_valid_index(value)\n\n        # technically _sanitize_column expects a label, not a position,\n        #  but the behavior is the same as long as we pass broadcast=False\n        value = self._sanitize_column(loc, value, broadcast=False)\n        NDFrame._iset_item(self, loc, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 3022,
        "end_line": 3034,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#3036",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 3036,
        "end_line": 3054,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#3089",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError) as err:\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a Series\"\n                ) from err\n\n            self._mgr = self._mgr.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 3089,
        "end_line": 3106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#3108",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, loc: int)",
        "snippet": "    def _box_col_values(self, values, loc: int) -> Series:\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        # Lookup in columns so that if e.g. a str datetime was passed\n        #  we attach the Timestamp object as the name.\n        name = self.columns[loc]\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=name, fastpath=True)",
        "begin_line": 3108,
        "end_line": 3116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3622",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3622,
        "end_line": 3724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3642",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value",
        "begin_line": 3642,
        "end_line": 3662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.cached#44",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.cached(self)",
        "snippet": "            def cached(self):\n                return getattr(self._data, name)",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.fget#53",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.fget(self)",
        "snippet": "            def fget(self):\n                result = getattr(self._data, name)\n                if wrap:\n                    if isinstance(result, type(self._data)):\n                        return type(self)._simple_new(result, name=self.name)\n                    return Index(result, name=self.name)\n                return result",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.method#75",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.method(self, *args, **kwargs)",
        "snippet": "        def method(self, *args, **kwargs):\n            result = attr(self._data, *args, **kwargs)\n            if wrap:\n                if isinstance(result, type(self._data)):\n                    return type(self)._simple_new(result, name=self.name)\n                return Index(result, name=self.name)\n            return result",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.wrapper#116",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if isinstance(other, ABCSeries):\n            # the arrays defer to Series for comparison ops but the indexes\n            #  don't, so we have to unwrap here.\n            other = other._values\n\n        other = _maybe_unwrap_index(other)\n\n        op = getattr(self._data, opname)\n        return op(other)",
        "begin_line": 116,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension._maybe_unwrap_index#171",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension._maybe_unwrap_index(obj)",
        "snippet": "def _maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying\n    data before deferring to the DatetimeArray/TimedeltaArray/PeriodArray\n    implementation, otherwise we will incorrectly return NotImplemented.\n\n    Parameters\n    ----------\n    obj : object\n\n    Returns\n    -------\n    unwrapped object\n    \"\"\"\n    if isinstance(obj, Index):\n        return obj._data\n    return obj",
        "begin_line": 171,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__getitem__#210",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data[key]\n        if isinstance(result, type(self._data)):\n            if result.ndim == 1:\n                return type(self)(result, name=self.name)\n            # Unpack to ndarray for MPL compat\n            result = result._data\n\n        # Includes cases where we get a 2D ndarray back for MPL compat\n        deprecate_ndim_indexing(result)\n        return result",
        "begin_line": 210,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target#224",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        # NB: _values_for_argsort happens to match the desired engine targets\n        #  for all of our existing EA-backed indexes, but in general\n        #  cannot be relied upon to exist.\n        return self._data._values_for_argsort()",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.astype#266",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype) and copy is False:\n            # Ensure that self.astype(self.dtype) is self\n            return self\n\n        new_values = self._data.astype(dtype, copy=copy)\n\n        # pass copy=False because any copying will be done in the\n        #  _data.astype call above\n        return Index(new_values, dtype=new_values.dtype, name=self.name, copy=False)",
        "begin_line": 266,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#73",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid fill method. Expecting {expecting}. Got {method}\")\n    return method",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#674",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 674,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#119",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=lib.no_default, closed=None, dtype=TD64NS_DTYPE, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=lib.no_default,\n        closed=None,\n        dtype=TD64NS_DTYPE,\n        copy=False,\n        name=None,\n    ):\n        name = maybe_extract_name(name, data, cls)\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            raise ValueError(\n                \"Units 'M' and 'Y' are no longer supported, as they do not \"\n                \"represent unambiguous timedelta values durations.\"\n            )\n\n        if isinstance(data, TimedeltaArray) and freq is lib.no_default:\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name)\n\n        if isinstance(data, TimedeltaIndex) and freq is lib.no_default and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr, name=name)",
        "begin_line": 119,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#162",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values: TimedeltaArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: TimedeltaArray, name: Label = None):\n        assert isinstance(values, TimedeltaArray)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._name = name\n        result._cache = {}\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 162,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.astype#187",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # Have to repeat the check for 'timedelta64' (not ns) dtype\n            #  so that we can return a numeric index, since pandas will return\n            #  a TimedeltaIndex when dtype='timedelta'\n            result = self._data.astype(dtype, copy=copy)\n            if self.hasnans:\n                return Index(result, name=self.name)\n            return Index(result.astype(\"i8\"), name=self.name)\n        return DatetimeIndexOpsMixin.astype(self, dtype, copy=copy)",
        "begin_line": 187,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.pickle.to_pickle#12",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.to_pickle(obj: Any, filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL)",
        "snippet": "def to_pickle(\n    obj: Any,\n    filepath_or_buffer: FilePathOrBuffer,\n    compression: Optional[str] = \"infer\",\n    protocol: int = pickle.HIGHEST_PROTOCOL,\n):\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    obj : any object\n        Any python object.\n    filepath_or_buffer : str, path object or file-like object\n        File path, URL, or buffer where the pickled object will be stored.\n\n        .. versionchanged:: 1.0.0\n           Accept URL. URL has to be of S3 or GCS.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        If 'infer' and 'path_or_url' is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n        compression) If 'infer' and 'path_or_url' is not path-like, then use\n        None (= no decompression).\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n        values for this parameter depend on the version of Python. For Python\n        2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a valid value.\n        For Python >= 3.4, 4 is a valid value. A negative value for the\n        protocol parameter is equivalent to setting its value to\n        HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, compression=compression, mode=\"wb\"\n    )\n    if not isinstance(fp_or_buf, str) and compression == \"infer\":\n        compression = None\n    f, fh = get_handle(fp_or_buf, \"wb\", compression=compression, is_text=False)\n    if protocol < 0:\n        protocol = pickle.HIGHEST_PROTOCOL\n    try:\n        f.write(pickle.dumps(obj, protocol=protocol))\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()\n        if should_close:\n            try:\n                fp_or_buf.close()\n            except ValueError:\n                pass",
        "begin_line": 12,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.pickle.read_pickle#99",
        "src_path": "pandas/io/pickle.py",
        "class_name": "pandas.io.pickle",
        "signature": "pandas.io.pickle.read_pickle(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]='infer')",
        "snippet": "def read_pickle(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str] = \"infer\"\n):\n    \"\"\"\n    Load pickled pandas object (or any object) from file.\n\n    .. warning::\n\n       Loading pickled data received from untrusted sources can be\n       unsafe. See `here <https://docs.python.org/3/library/pickle.html>`__.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str, path object or file-like object\n        File path, URL, or buffer where the pickled object will be loaded from.\n\n        .. versionchanged:: 1.0.0\n           Accept URL. URL is not limited to S3 and GCS.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        If 'infer' and 'path_or_url' is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no\n        compression) If 'infer' and 'path_or_url' is not path-like, then use\n        None (= no decompression).\n\n    Returns\n    -------\n    unpickled : same type as object stored in file\n\n    See Also\n    --------\n    DataFrame.to_pickle : Pickle (serialize) DataFrame object to file.\n    Series.to_pickle : Pickle (serialize) Series object to file.\n    read_hdf : Read HDF5 file into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n    read_parquet : Load a parquet object, returning a DataFrame.\n\n    Notes\n    -----\n    read_pickle is only guaranteed to be backwards compatible to pandas 0.20.3.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> pd.to_pickle(original_df, \"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, compression=compression\n    )\n    if not isinstance(fp_or_buf, str) and compression == \"infer\":\n        compression = None\n    f, fh = get_handle(fp_or_buf, \"rb\", compression=compression, is_text=False)\n\n    # 1) try standard library Pickle\n    # 2) try pickle_compat (older pandas version) to handle subclass changes\n    # 3) try pickle_compat with latin-1 encoding upon a UnicodeDecodeError\n\n    try:\n        excs_to_catch = (AttributeError, ImportError, ModuleNotFoundError, TypeError)\n        # TypeError for Cython complaints about object.__new__ vs Tick.__new__\n        try:\n            with warnings.catch_warnings(record=True):\n                # We want to silence any warnings about, e.g. moved modules.\n                warnings.simplefilter(\"ignore\", Warning)\n                return pickle.load(f)\n        except excs_to_catch:\n            # e.g.\n            #  \"No module named 'pandas.core.sparse.series'\"\n            #  \"Can't get attribute '__nat_unpickle' on <module 'pandas._libs.tslib\"\n            return pc.load(f, encoding=None)\n    except UnicodeDecodeError:\n        # e.g. can occur for files written in py27; see GH#28645 and GH#31988\n        return pc.load(f, encoding=\"latin-1\")\n    finally:\n        f.close()\n        for _f in fh:\n            _f.close()\n        if should_close:\n            try:\n                fp_or_buf.close()\n            except ValueError:\n                pass",
        "begin_line": 99,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype.construct_array_type#76",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"BooleanArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return BooleanArray",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype._is_boolean#90",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        return True",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.boolean.coerce_to_array#120",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean",
        "signature": "pandas.core.arrays.boolean.coerce_to_array(values, mask=None, copy: bool=False)",
        "snippet": "def coerce_to_array(\n    values, mask=None, copy: bool = False\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    if isinstance(values, BooleanArray):\n        if mask is not None:\n            raise ValueError(\"cannot pass mask for BooleanArray input\")\n        values, mask = values._data, values._mask\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    mask_values = None\n    if isinstance(values, np.ndarray) and values.dtype == np.bool_:\n        if copy:\n            values = values.copy()\n    elif isinstance(values, np.ndarray) and is_numeric_dtype(values.dtype):\n        mask_values = isna(values)\n\n        values_bool = np.zeros(len(values), dtype=bool)\n        values_bool[~mask_values] = values[~mask_values].astype(bool)\n\n        if not np.all(\n            values_bool[~mask_values].astype(values.dtype) == values[~mask_values]\n        ):\n            raise TypeError(\"Need to pass bool-like values\")\n\n        values = values_bool\n    else:\n        values_object = np.asarray(values, dtype=object)\n\n        inferred_dtype = lib.infer_dtype(values_object, skipna=True)\n        integer_like = (\"floating\", \"integer\", \"mixed-integer-float\")\n        if inferred_dtype not in (\"boolean\", \"empty\") + integer_like:\n            raise TypeError(\"Need to pass bool-like values\")\n\n        mask_values = isna(values_object)\n        values = np.zeros(len(values), dtype=bool)\n        values[~mask_values] = values_object[~mask_values].astype(bool)\n\n        # if the values were integer-like, validate it were actually 0/1's\n        if inferred_dtype in integer_like:\n            if not np.all(\n                values[~mask_values].astype(float)\n                == values_object[~mask_values].astype(float)\n            ):\n                raise TypeError(\"Need to pass bool-like values\")\n\n    if mask is None and mask_values is None:\n        mask = np.zeros(len(values), dtype=bool)\n    elif mask is None:\n        mask = mask_values\n    else:\n        if isinstance(mask, np.ndarray) and mask.dtype == np.bool_:\n            if mask_values is not None:\n                mask = mask | mask_values\n            else:\n                if copy:\n                    mask = mask.copy()\n        else:\n            mask = np.array(mask, dtype=bool)\n            if mask_values is not None:\n                mask = mask | mask_values\n\n    if not values.ndim == 1:\n        raise ValueError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise ValueError(\"mask must be a 1D list-like\")\n\n    return values, mask",
        "begin_line": 120,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray.__init__#263",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if not (isinstance(values, np.ndarray) and values.dtype == np.bool_):\n            raise TypeError(\n                \"values should be boolean numpy array. Use \"\n                \"the 'pd.array' function instead\"\n            )\n        self._dtype = BooleanDtype()\n        super().__init__(values, mask, copy=copy)",
        "begin_line": 263,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray.dtype#273",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray.dtype(self)",
        "snippet": "    def dtype(self) -> BooleanDtype:\n        return self._dtype",
        "begin_line": 273,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanArray._from_sequence#277",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanArray",
        "signature": "pandas.core.arrays.boolean.BooleanArray._from_sequence(cls, scalars, dtype=None, copy: bool=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> \"BooleanArray\":\n        if dtype:\n            assert dtype == \"boolean\"\n        values, mask = coerce_to_array(scalars, copy=copy)\n        return BooleanArray(values, mask)",
        "begin_line": 277,
        "end_line": 281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas._config.config._get_single_key#86",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat: str, silent: bool)",
        "snippet": "def _get_single_key(pat: str, silent: bool) -> str:\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 86,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005820721769499418,
            "pseudo_tarantula_susp": 0.0005827505827505828,
            "pseudo_op2_susp": 0.0005820721769499418,
            "pseudo_barinel_susp": 0.0005827505827505828
        }
    },
    {
        "name": "pandas._config.config._get_option#104",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat: str, silent: bool=False)",
        "snippet": "def _get_option(pat: str, silent: bool = False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 104,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas._config.config._set_option#112",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs) -> None:\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 112,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006793478260869565,
            "pseudo_dstar_susp": 0.0006793478260869565,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0006793478260869565,
            "pseudo_barinel_susp": 0.000784313725490196
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005820721769499418,
            "pseudo_tarantula_susp": 0.0005827505827505828,
            "pseudo_op2_susp": 0.0005820721769499418,
            "pseudo_barinel_susp": 0.0005827505827505828
        }
    },
    {
        "name": "pandas._config.config.option_context.__init__#394",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__init__(self, *args)",
        "snippet": "    def __init__(self, *args):\n        if not (len(args) % 2 == 0 and len(args) >= 2):\n            raise ValueError(\n                \"Need to invoke as option_context(pat, val, [(pat, val), ...]).\"\n            )\n\n        self.ops = list(zip(args[::2], args[1::2]))",
        "begin_line": 394,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas._config.config.option_context.__enter__#402",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__enter__(self)",
        "snippet": "    def __enter__(self):\n        self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n\n        for pat, val in self.ops:\n            _set_option(pat, val, silent=True)",
        "begin_line": 402,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas._config.config.option_context.__exit__#408",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__exit__(self, *args)",
        "snippet": "    def __exit__(self, *args):\n        if self.undo:\n            for pat, val in self.undo:\n                _set_option(pat, val, silent=True)",
        "begin_line": 408,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas._config.config._select_options#539",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat: str)",
        "snippet": "def _select_options(pat: str) -> List[str]:\n    \"\"\"\n    returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 539,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008968609865470852,
            "pseudo_dstar_susp": 0.0017761989342806395,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0017761989342806395,
            "pseudo_barinel_susp": 0.000784313725490196
        }
    },
    {
        "name": "pandas._config.config._get_root#557",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key: str)",
        "snippet": "def _get_root(key: str) -> Tuple[Dict[str, Any], str]:\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 557,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005820721769499418,
            "pseudo_tarantula_susp": 0.0005827505827505828,
            "pseudo_op2_susp": 0.0005820721769499418,
            "pseudo_barinel_susp": 0.0005827505827505828
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#571",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key: str)",
        "snippet": "def _get_deprecated_option(key: str):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 571,
        "end_line": 584,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005820721769499418,
            "pseudo_tarantula_susp": 0.0005827505827505828,
            "pseudo_op2_susp": 0.0005820721769499418,
            "pseudo_barinel_susp": 0.0005827505827505828
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#587",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key: str)",
        "snippet": "def _get_registered_option(key: str):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 587,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006027727546714888,
            "pseudo_dstar_susp": 0.0006027727546714888,
            "pseudo_tarantula_susp": 0.0006042296072507553,
            "pseudo_op2_susp": 0.0006027727546714888,
            "pseudo_barinel_susp": 0.0006042296072507553
        }
    },
    {
        "name": "pandas._config.config._translate_key#598",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key: str)",
        "snippet": "def _translate_key(key: str) -> str:\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 598,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005820721769499418,
            "pseudo_tarantula_susp": 0.0005827505827505828,
            "pseudo_op2_susp": 0.0005820721769499418,
            "pseudo_barinel_susp": 0.0005827505827505828
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#610",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key: str)",
        "snippet": "def _warn_if_deprecated(key: str) -> bool:\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 610,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005820721769499418,
            "pseudo_dstar_susp": 0.0005820721769499418,
            "pseudo_tarantula_susp": 0.0005827505827505828,
            "pseudo_op2_susp": 0.0005820721769499418,
            "pseudo_barinel_susp": 0.0005827505827505828
        }
    },
    {
        "name": "pandas._config.config.inner#804",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x) -> None:\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 804,
        "end_line": 813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006793478260869565,
            "pseudo_dstar_susp": 0.0006793478260869565,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0006793478260869565,
            "pseudo_barinel_susp": 0.000784313725490196
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#72",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq) -> Optional[DateOffset]:\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset : Standard kind of date increment used for a date range.\n\n    Examples\n    --------\n    >>> to_offset(\"5min\")\n    <5 * Minutes>\n\n    >>> to_offset(\"1D1H\")\n    <25 * Hours>\n\n    >>> to_offset((\"W\", 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, \"B\"))\n    <2 * BusinessDays>\n\n    >>> to_offset(pd.Timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs.base_and_stride(name)\n        delta = _get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            split = re.split(libfreqs.opattern, freq)\n            if split[-1] != \"\" and not split[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(split[0::4], split[1::4], split[2::4]):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution.reso_str_bump_map:\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = _get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError) as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 72,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.tseries.frequencies._get_offset#200",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._get_offset(name: str)",
        "snippet": "def _get_offset(name: str) -> DateOffset:\n    \"\"\"\n    Return DateOffset object associated with rule name.\n\n    Examples\n    --------\n    _get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError) as err:\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name)) from err\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 200,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#50",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, data, cls)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n\n        subarr = np.asarray(subarr)\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#82",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            raise ValueError(\n                f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            )",
        "begin_line": 82,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015062509414068384,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#106",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        if values is not None and not self._can_hold_na and values.dtype.kind == \"f\":\n            name = self.name if name is lib.no_default else name\n            # Ensure we are not returning an Int64Index with float data:\n            return Float64Index._simple_new(values, name=name)\n        return super()._shallow_copy(values=values, name=name)",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting#142",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Subclasses need to override this only if the process of casting data\n        from some accepted dtype to the internal dtype(s) bears the risk of\n        truncation (e.g. float to int).\n        \"\"\"\n        pass",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#151",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 151,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.inferred_type#238",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``Int64Index`` and ``UInt64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 238,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.numeric.UInt64Index._assert_safe_casting#320",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.UInt64Index",
        "signature": "pandas.core.indexes.numeric.UInt64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as uints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.unsignedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 320,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#69",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _ensure_data(\n    values, dtype: Optional[DtypeObj] = None\n) -> Tuple[np.ndarray, DtypeObj]:\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : np.dtype or ExtensionDtype\n    \"\"\"\n\n    if not isinstance(values, ABCMultiIndex):\n        # extract_array would raise\n        values = extract_array(values, extract_numpy=True)\n\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), np.dtype(\"object\")\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), np.dtype(\"object\")\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), np.dtype(\"bool\")\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), np.dtype(\"int64\")\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), np.dtype(\"uint64\")\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), np.dtype(\"float64\")\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, np.dtype(\"float64\")\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompatible this will fall through to here\n        return ensure_object(values), np.dtype(\"object\")\n\n    # datetimelike\n    vals_dtype = getattr(values, \"dtype\", None)\n    if needs_i8_conversion(vals_dtype) or needs_i8_conversion(dtype):\n        if is_period_dtype(vals_dtype) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(vals_dtype) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(vals_dtype):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                # TODO(EA2D): special case not needed with 2D EAs\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(vals_dtype) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = values.codes\n        dtype = pandas_dtype(\"category\")\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), np.dtype(\"object\")",
        "begin_line": 69,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#178",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values: ArrayLike, dtype: DtypeObj, original: AnyArrayLike)",
        "snippet": "def _reconstruct_data(\n    values: ArrayLike, dtype: DtypeObj, original: AnyArrayLike\n) -> ArrayLike:\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : np.ndarray or ExtensionArray\n    dtype : np.ndtype or ExtensionDtype\n    original : AnyArrayLike\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        if is_datetime64_dtype(dtype):\n            dtype = \"datetime64[ns]\"\n        elif is_timedelta64_dtype(dtype):\n            dtype = \"timedelta64[ns]\"\n\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 178,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#213",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 213,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#255",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 255,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014705882352941175,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#263",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014705882352941175,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#272",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 272,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#463",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None, mask=None)",
        "snippet": "def _factorize_array(\n    values, na_sentinel: int = -1, size_hint=None, na_value=None, mask=None,\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Factorize an array-like to codes and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n    mask : ndarray[bool], optional\n        If not None, the mask is used as indicator for missing values\n        (True = missing, False = valid) instead of `na_value` or\n        condition \"val != val\".\n\n    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, codes = table.factorize(\n        values, na_sentinel=na_sentinel, na_value=na_value, mask=mask\n    )\n\n    codes = ensure_platform_int(codes)\n    return codes, uniques",
        "begin_line": 463,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#525",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, na_sentinel: int=-1, size_hint: Optional[int]=None, dropna: bool=True)",
        "snippet": "def factorize(\n    values,\n    sort: bool = False,\n    na_sentinel: int = -1,\n    size_hint: Optional[int] = None,\n    dropna: bool = True,\n) -> Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]:\n    \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n\n    This method is useful for obtaining a numeric representation of an\n    array when all that matters is identifying distinct values. `factorize`\n    is available as both a top-level function :func:`pandas.factorize`,\n    and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\n    Parameters\n    ----------\n    {values}{sort}\n    na_sentinel : int, default -1\n        Value to mark \"not found\".\n    {size_hint}\\\n\n    Returns\n    -------\n    codes : ndarray\n        An integer ndarray that's an indexer into `uniques`.\n        ``uniques.take(codes)`` will have the same values as `values`.\n    uniques : ndarray, Index, or Categorical\n        The unique valid values. When `values` is Categorical, `uniques`\n        is a Categorical. When `values` is some other pandas object, an\n        `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n        .. note ::\n\n           Even if there's a missing value in `values`, `uniques` will\n           *not* contain an entry for it.\n\n    See Also\n    --------\n    cut : Discretize continuous-valued array.\n    unique : Find the unique value in an array.\n\n    Examples\n    --------\n    These examples all show factorize as a top-level method like\n    ``pd.factorize(values)``. The results are identical for methods like\n    :meth:`Series.factorize`.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n    >>> codes\n    array([0, 0, 1, 2, 0]...)\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    With ``sort=True``, the `uniques` will be sorted, and `codes` will be\n    shuffled so that the relationship is the maintained.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n    >>> codes\n    array([1, 1, 0, 2, 1]...)\n    >>> uniques\n    array(['a', 'b', 'c'], dtype=object)\n\n    Missing values are indicated in `codes` with `na_sentinel`\n    (``-1`` by default). Note that missing values are never\n    included in `uniques`.\n\n    >>> codes, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n    >>> codes\n    array([ 0, -1,  1,  2,  0]...)\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    Thus far, we've only factorized lists (which are internally coerced to\n    NumPy arrays). When factorizing pandas objects, the type of `uniques`\n    will differ. For Categoricals, a `Categorical` is returned.\n\n    >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1]...)\n    >>> uniques\n    [a, c]\n    Categories (3, object): [a, b, c]\n\n    Notice that ``'b'`` is in ``uniques.categories``, despite not being\n    present in ``cat.values``.\n\n    For all other pandas objects, an Index of the appropriate type is\n    returned.\n\n    >>> cat = pd.Series(['a', 'a', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1]...)\n    >>> uniques\n    Index(['a', 'c'], dtype='object')\n    \"\"\"\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values.dtype):\n        values = extract_array(values)\n        codes, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        codes, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        uniques, codes = safe_sort(\n            uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    code_is_na = codes == na_sentinel\n    if not dropna and code_is_na.any():\n        # na_value is set based on the dtype of uniques, and compat set to False is\n        # because we do not want na_value to be 0 for integers\n        na_value = na_value_for_dtype(uniques.dtype, compat=False)\n        uniques = np.append(uniques, [na_value])\n        codes = np.where(code_is_na, len(uniques) - 1, codes)\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return codes, uniques",
        "begin_line": 525,
        "end_line": 674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#929",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 929,
        "end_line": 1002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1457",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim: int, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(\n    ndim: int, arr_dtype, out_dtype, axis: int = 0, mask_info=None\n):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1457,
        "end_line": 1490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1586",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis: int=0, out=None, fill_value=np.nan, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr, indexer, axis: int = 0, out=None, fill_value=np.nan, allow_fill: bool = True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n    mask_info = None\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                mask = indexer == -1\n                needs_masking = mask.any()\n                mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._mgr.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1586,
        "end_line": 1687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms.safe_sort#1961",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.safe_sort(values, codes=None, na_sentinel: int=-1, assume_unique: bool=False, verify: bool=True)",
        "snippet": "def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,\n    verify: bool = True,\n) -> Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``codes``.\n\n    ``values`` should be unique if ``codes`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``codes`` is not None.\n    codes : list_like, optional\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``codes`` to mark \"not found\".\n        Ignored when ``codes`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``codes`` is None.\n    verify : bool, default True\n        Check if codes are out of bound for the values and put out of bound\n        codes equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound codes. Ignored when ``codes`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_codes : ndarray\n        Reordered ``codes``; returned when ``codes`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``codes`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``codes`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # codes:\n\n    if codes is None:\n        return ordered\n\n    if not is_list_like(codes):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to \"\n            \"be passed to safe_sort as codes\"\n        )\n    codes = ensure_platform_int(np.asarray(codes))\n\n    if not assume_unique and not len(unique(values)) == len(values):\n        raise ValueError(\"values should be unique if codes is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = _get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_codes = take_1d(order2, codes, fill_value=-1)\n        if verify:\n            mask = (codes < -len(values)) | (codes >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_codes = reverse_indexer.take(codes, mode=\"wrap\")\n\n        mask = codes == na_sentinel\n        if verify:\n            mask = mask | (codes < -len(values)) | (codes >= len(values))\n\n    if mask is not None:\n        np.putmask(new_codes, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_codes)",
        "begin_line": 1961,
        "end_line": 2086,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.algorithms.sort_mixed#2020",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 2020,
        "end_line": 2025,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#50",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype: object)",
        "snippet": "    def __init__(self, dtype: object):\n        self._dtype = np.dtype(dtype)",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#162",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values: Union[np.ndarray, 'PandasArray'], copy: bool=False)",
        "snippet": "    def __init__(self, values: Union[np.ndarray, \"PandasArray\"], copy: bool = False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"'values' must be a NumPy array, not {type(values).__name__}\"\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 162,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.dtype#204",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.dtype(self)",
        "snippet": "    def dtype(self) -> PandasDtype:\n        return self._dtype",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#414",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy: bool=False, na_value=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value=lib.no_default\n    ) -> np.ndarray:\n        result = np.asarray(self._ndarray, dtype=dtype)\n\n        if (copy or na_value is not lib.no_default) and result is self._ndarray:\n            result = result.copy()\n\n        if na_value is not lib.no_default:\n            result[self.isna()] = na_value\n\n        return result",
        "begin_line": 414,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#66",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#76",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__reduce__#88",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__reduce__(self)",
        "snippet": "    def __reduce__(self):\n        return type(self), (list(self),)",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#32",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 32,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#51",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)",
        "begin_line": 51,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#301",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype.ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = com.convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                sanitize_dtype = np.dtype(\"O\") if len(values) == 0 else None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError as err:\n                codes, categories = factorize(values, sort=False)\n                if dtype.ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    ) from err\n            except ValueError as err:\n\n                # TODO(EA2D)\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                ) from err\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype.ordered)\n\n        elif is_categorical_dtype(values.dtype):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 301,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#383",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories : Rename categories.\n        reorder_categories : Reorder categories.\n        add_categories : Add new categories.\n        remove_categories : Remove the specified categories.\n        remove_unused_categories : Remove categories which are not used.\n        set_categories : Set the categories to the specified ones.\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 383,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.ordered#426",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self.dtype.ordered",
        "begin_line": 426,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#433",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 433,
        "end_line": 437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015062509414068384,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._from_sequence#444",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return Categorical(scalars, dtype=dtype)",
        "begin_line": 444,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.astype#451",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.astype(self, dtype: Dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n\n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_extension_array_dtype(dtype):\n            return array(self, dtype=dtype, copy=copy)\n        if is_integer_dtype(dtype) and self.isna().any():\n            raise ValueError(\"Cannot convert float NaN to integer\")\n        return np.array(self, dtype=dtype, copy=copy)",
        "begin_line": 451,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.codes#630",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.codes(self)",
        "snippet": "    def codes(self) -> np.ndarray:\n        \"\"\"\n        The category codes of this categorical.\n\n        Codes are an array of integers which are the positions of the actual\n        values in the categories array.\n\n        There is no setter, use the other categorical methods and the normal item\n        setter to change values in the categorical.\n\n        Returns\n        -------\n        ndarray[int]\n            A non-writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 630,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._ndarray#1816",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._ndarray(self)",
        "snippet": "    def _ndarray(self) -> np.ndarray:\n        return self._codes",
        "begin_line": 1816,
        "end_line": 1817,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._concat_same_type#2307",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._concat_same_type(self, to_concat)",
        "snippet": "    def _concat_same_type(self, to_concat):\n        from pandas.core.dtypes.concat import union_categoricals\n\n        return union_categoricals(to_concat)",
        "begin_line": 2307,
        "end_line": 2310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.categorical._get_codes_for_values#2594",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._get_codes_for_values(values, categories)",
        "snippet": "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = maybe_cast_to_extension_array(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    elif not dtype_equal:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
        "begin_line": 2594,
        "end_line": 2618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY#38",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY(op, x, y)",
        "snippet": "def comp_method_OBJECT_ARRAY(op, x, y):\n    if isinstance(y, list):\n        y = construct_1d_object_array_from_listlike(y)\n\n    if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):\n        # Note: these checks can be for ABCIndex and not ABCIndexClass\n        #  because that is the only object-dtype class.\n        if not is_object_dtype(y.dtype):\n            y = y.astype(np.object_)\n\n        if isinstance(y, (ABCSeries, ABCIndex)):\n            y = y._values\n\n        if x.shape != y.shape:\n            raise ValueError(\"Shapes must match\", x.shape, y.shape)\n        result = libops.vec_compare(x.ravel(), y.ravel(), op)\n    else:\n        result = libops.scalar_compare(x.ravel(), y, op)\n    return result.reshape(x.shape)",
        "begin_line": 38,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#131",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool=False)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coercion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    is_cmp : bool, default False\n        If this a comparison operation.\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        if is_cmp:\n            # numexpr failed on comparison op, e.g. ndarray[float] > datetime\n            #  In this case we do not fall back to the masked op, as that\n            #  will handle complex numbers incorrectly, see GH#32047\n            raise\n        result = masked_arith_op(left, right, op)\n\n    if is_cmp and (is_scalar(result) or result is NotImplemented):\n        # numpy returned a scalar instead of operating element-wise\n        # e.g. numeric array vs str\n        return invalid_comparison(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 131,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#173",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str)",
        "snippet": "def arithmetic_op(left: ArrayLike, right: Any, op, str_rep: str):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    # NB: We assume that extract_array has already been called\n    #  on `left` and `right`.\n    lvalues = maybe_upcast_datetimelike_array(left)\n    rvalues = maybe_upcast_datetimelike_array(right)\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(lvalues, rvalues) or isinstance(rvalues, Timedelta):\n        # Timedelta is included because numexpr will fail on it, see GH#31457\n        res_values = op(lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
        "begin_line": 173,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.array_ops.maybe_upcast_datetimelike_array#400",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.maybe_upcast_datetimelike_array(obj: ArrayLike)",
        "snippet": "def maybe_upcast_datetimelike_array(obj: ArrayLike) -> ArrayLike:\n    \"\"\"\n    If we have an ndarray that is either datetime64 or timedelta64, wrap in EA.\n\n    Parameters\n    ----------\n    obj : ndarray or ExtensionArray\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if isinstance(obj, np.ndarray):\n        if obj.dtype.kind == \"m\":\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray._from_sequence(obj)\n        if obj.dtype.kind == \"M\":\n            from pandas.core.arrays import DatetimeArray\n\n            return DatetimeArray._from_sequence(obj)\n\n    return obj",
        "begin_line": 400,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.array_ops.maybe_upcast_for_op#425",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and obj.dtype.kind == \"m\":\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 425,
        "end_line": 481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#158",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields,\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            argument = list(set(fields) - valid_field_set)[0]\n            raise TypeError(f\"__new__() got an unexpected keyword argument {argument}\")\n\n        name = maybe_extract_name(name, data, cls)\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n            # PeriodArray._generate range does validation that fields is\n            # empty when really using the range-based constructor.\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 158,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#219",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values: PeriodArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: PeriodArray, name: Label = None):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n        \"\"\"\n        assert isinstance(values, PeriodArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 219,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.astype#399",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.astype(self, dtype, copy=True, how='start')",
        "snippet": "    def astype(self, dtype, copy=True, how=\"start\"):\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_any_dtype(dtype):\n            # 'how' is index-specific, isn't part of the EA interface.\n            tz = getattr(dtype, \"tz\", None)\n            return self.to_timestamp(how=how).tz_localize(tz)\n\n        # TODO: should probably raise on `how` here, so we don't ignore it.\n        return super().astype(dtype, copy=copy)",
        "begin_line": 399,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#723",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(\n    start=None, end=None, periods=None, freq=None, name=None\n) -> PeriodIndex:\n    \"\"\"\n    Return a fixed frequency PeriodIndex.\n\n    The day (calendar) is the default frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods.\n    end : str or period-like, default None\n        Right bound for generating periods.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n    name : str, default None\n        Name of the resulting PeriodIndex.\n\n    Returns\n    -------\n    PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06',\n             '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12',\n             '2018-01'],\n            dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 723,
        "end_line": 785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.integer.integer_array#134",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.integer_array(values, dtype=None, copy: bool=False)",
        "snippet": "def integer_array(values, dtype=None, copy: bool = False,) -> \"IntegerArray\":\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : dtype, optional\n        dtype to coerce\n    copy : bool, default False\n\n    Returns\n    -------\n    IntegerArray\n\n    Raises\n    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)",
        "begin_line": 134,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.integer.safe_cast#157",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.safe_cast(values, dtype, copy: bool)",
        "snippet": "def safe_cast(values, dtype, copy: bool):\n    \"\"\"\n    Safely cast the values to the dtype if they\n    are equivalent, meaning floats must be equivalent to the\n    ints.\n\n    \"\"\"\n    try:\n        return values.astype(dtype, casting=\"safe\", copy=copy)\n    except TypeError as err:\n\n        casted = values.astype(dtype, copy=copy)\n        if (casted == values).all():\n            return casted\n\n        raise TypeError(\n            f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n        ) from err",
        "begin_line": 157,
        "end_line": 174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.integer.coerce_to_array#177",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.coerce_to_array(values, dtype, mask=None, copy: bool=False)",
        "snippet": "def coerce_to_array(\n    values, dtype, mask=None, copy: bool = False,\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : integer dtype\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    # if values is integer numpy array, preserve it's dtype\n    if dtype is None and hasattr(values, \"dtype\"):\n        if is_integer_dtype(values.dtype):\n            dtype = values.dtype\n\n    if dtype is not None:\n        if isinstance(dtype, str) and (\n            dtype.startswith(\"Int\") or dtype.startswith(\"UInt\")\n        ):\n            # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\n            # https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n\n        if not issubclass(type(dtype), _IntegerDtype):\n            try:\n                dtype = _dtypes[str(np.dtype(dtype))]\n            except KeyError as err:\n                raise ValueError(f\"invalid dtype specified {dtype}\") from err\n\n    if isinstance(values, IntegerArray):\n        values, mask = values._data, values._mask\n        if dtype is not None:\n            values = values.astype(dtype.numpy_dtype, copy=False)\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    values = np.array(values, copy=copy)\n    if is_object_dtype(values):\n        inferred_type = lib.infer_dtype(values, skipna=True)\n        if inferred_type == \"empty\":\n            values = np.empty(len(values))\n            values.fill(np.nan)\n        elif inferred_type not in [\n            \"floating\",\n            \"integer\",\n            \"mixed-integer\",\n            \"integer-na\",\n            \"mixed-integer-float\",\n        ]:\n            raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n\n    elif not (is_integer_dtype(values) or is_float_dtype(values)):\n        raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    if mask is None:\n        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:\n        raise TypeError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise TypeError(\"mask must be a 1D list-like\")\n\n    # infer dtype if needed\n    if dtype is None:\n        dtype = np.dtype(\"int64\")\n    else:\n        dtype = dtype.type\n\n    # if we are float, let's make sure that we can\n    # safely cast\n\n    # we copy as need to coerce here\n    if mask.any():\n        values = values.copy()\n        values[mask] = 1\n        values = safe_cast(values, dtype, copy=False)\n    else:\n        values = safe_cast(values, dtype, copy=False)\n\n    return values, mask",
        "begin_line": 177,
        "end_line": 272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__init__#352",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if not (isinstance(values, np.ndarray) and values.dtype.kind in [\"i\", \"u\"]):\n            raise TypeError(\n                \"values should be integer numpy array. Use \"\n                \"the 'pd.array' function instead\"\n            )\n        super().__init__(values, mask, copy=copy)",
        "begin_line": 352,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._from_sequence#361",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._from_sequence(cls, scalars, dtype=None, copy: bool=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> \"IntegerArray\":\n        return integer_array(scalars, dtype=dtype, copy=copy)",
        "begin_line": 361,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.config_init.use_inf_as_na_cb#457",
        "src_path": "pandas/core/config_init.py",
        "class_name": "pandas.core.config_init",
        "signature": "pandas.core.config_init.use_inf_as_na_cb(key)",
        "snippet": "def use_inf_as_na_cb(key):\n    from pandas.core.dtypes.missing import _use_inf_as_na\n\n    _use_inf_as_na(key)",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#150",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(\n            f\"Value needs to be a scalar value, was type {type(value).__name__}\"\n        )\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError) as err:\n        raise TypeError(f\"Wrong type {type(value)} for value {value}\") from err\n    return new_value",
        "begin_line": 150,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#178",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013024225058609013,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#183",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014238929232521716,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#194",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 194,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001315962626661403,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#224",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.arrays.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.arrays.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 224,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001374003847210772,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_scipy_sparse#272",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_scipy_sparse(arr)",
        "snippet": "def is_scipy_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a scipy.sparse.spmatrix instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a scipy.sparse.spmatrix instance.\n\n    Notes\n    -----\n    If scipy is not installed, this function will always return False.\n\n    Examples\n    --------\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_scipy_sparse(bsr_matrix([1, 2, 3]))\n    True\n    >>> is_scipy_sparse(pd.arrays.SparseArray([1, 2, 3]))\n    False\n    \"\"\"\n    global _is_scipy_sparse\n\n    if _is_scipy_sparse is None:\n        try:\n            from scipy.sparse import issparse as _is_scipy_sparse\n        except ImportError:\n            _is_scipy_sparse = lambda _: False\n\n    assert _is_scipy_sparse is not None\n    return _is_scipy_sparse(arr)",
        "begin_line": 272,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#310",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    warnings.warn(\n        \"is_categorical is deprecated and will be removed in a future version.  \"\n        \"Use is_categorical_dtype instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 310,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#348",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n    if isinstance(arr_or_dtype, np.dtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 348,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014539110206455364,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#381",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 381,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#422",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n    if isinstance(arr_or_dtype, np.dtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"m\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 422,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013424620754463686,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#456",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.type is Period\n\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 456,
        "end_line": 489,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019157088122605363,
            "pseudo_dstar_susp": 0.0008944543828264759,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0008944543828264759,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#492",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.type is Interval\n\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 492,
        "end_line": 527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019157088122605363,
            "pseudo_dstar_susp": 0.0008944543828264759,
            "pseudo_tarantula_susp": 0.0019157088122605363,
            "pseudo_op2_susp": 0.0008944543828264759,
            "pseudo_barinel_susp": 0.0019157088122605363
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#530",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, ExtensionDtype):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.name == \"category\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 530,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014613473622680112,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#566",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)\n\n    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 566,
        "end_line": 605,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.0009587727708533077,
            "pseudo_dstar_susp": 0.0008726003490401396,
            "pseudo_tarantula_susp": 0.0018115942028985507,
            "pseudo_op2_susp": 0.0008726003490401396,
            "pseudo_barinel_susp": 0.0018115942028985507
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#595",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)",
        "begin_line": 595,
        "end_line": 596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018018018018018018,
            "pseudo_dstar_susp": 0.0021645021645021645,
            "pseudo_tarantula_susp": 0.0018115942028985507,
            "pseudo_op2_susp": 0.0021645021645021645,
            "pseudo_barinel_susp": 0.0018115942028985507
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_excluded_dtype#598",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_excluded_dtype(dtype)",
        "snippet": "    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)",
        "begin_line": 598,
        "end_line": 603,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.0019083969465648854,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0018450184501845018,
            "pseudo_op2_susp": 0.002173913043478261,
            "pseudo_barinel_susp": 0.0018450184501845018
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#608",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(tz=\"UTC\"), \"datetime64\")\n    False\n    \"\"\"\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 608,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#696",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 696,
        "end_line": 747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013304949441192123,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#750",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 750,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013464386697185942,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#806",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 806,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001374003847210772,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#905",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=\"datetime64[ns]\"))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if isinstance(arr_or_dtype, (np.dtype, ExtensionDtype)):\n        # GH#33400 fastpath for dtype object\n        return arr_or_dtype.kind == \"M\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 905,
        "end_line": 944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#947",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64\"))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == DT64NS_DTYPE or getattr(tipo, \"base\", None) == DT64NS_DTYPE",
        "begin_line": 947,
        "end_line": 991,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#994",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == TD64NS_DTYPE)",
        "begin_line": 994,
        "end_line": 1022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1025",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1025,
        "end_line": 1060,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013246787653993907,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_v_string_like#1064",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_v_string_like(a, b)",
        "snippet": "def is_numeric_v_string_like(a, b):\n    \"\"\"\n    Check if we are comparing a string-like object to a numeric ndarray.\n    NumPy doesn't like to compare such objects, especially numeric arrays\n    and scalar string-likes.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a string-like object to a numeric array.\n\n    Examples\n    --------\n    >>> is_numeric_v_string_like(1, 1)\n    False\n    >>> is_numeric_v_string_like(\"foo\", \"foo\")\n    False\n    >>> is_numeric_v_string_like(1, \"foo\")  # non-array numeric\n    False\n    >>> is_numeric_v_string_like(np.array([1]), \"foo\")\n    True\n    >>> is_numeric_v_string_like(\"foo\", np.array([1]))  # symmetric check\n    True\n    >>> is_numeric_v_string_like(np.array([1, 2]), np.array([\"foo\"]))\n    True\n    >>> is_numeric_v_string_like(np.array([\"foo\"]), np.array([1, 2]))\n    True\n    >>> is_numeric_v_string_like(np.array([1]), np.array([2]))\n    False\n    >>> is_numeric_v_string_like(np.array([\"foo\"]), np.array([\"foo\"]))\n    False\n    \"\"\"\n    is_a_array = isinstance(a, np.ndarray)\n    is_b_array = isinstance(b, np.ndarray)\n\n    is_a_numeric_array = is_a_array and is_numeric_dtype(a)\n    is_b_numeric_array = is_b_array and is_numeric_dtype(b)\n    is_a_string_array = is_a_array and is_string_like_dtype(a)\n    is_b_string_array = is_b_array and is_string_like_dtype(b)\n\n    is_a_scalar_string_like = not is_a_array and isinstance(a, str)\n    is_b_scalar_string_like = not is_b_array and isinstance(b, str)\n\n    return (\n        (is_a_numeric_array and is_b_scalar_string_like)\n        or (is_b_numeric_array and is_a_scalar_string_like)\n        or (is_a_numeric_array and is_b_string_array)\n        or (is_b_numeric_array and is_a_string_array)\n    )",
        "begin_line": 1064,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1123",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> dt = np.datetime64(datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1123,
        "end_line": 1177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1169",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1169,
        "end_line": 1173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1180",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1180,
        "end_line": 1220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013381506757660912,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_dtype#1223",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)",
        "snippet": "def is_numeric_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a numeric dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a numeric dtype.\n\n    Examples\n    --------\n    >>> is_numeric_dtype(str)\n    False\n    >>> is_numeric_dtype(int)\n    True\n    >>> is_numeric_dtype(float)\n    True\n    >>> is_numeric_dtype(np.uint64)\n    True\n    >>> is_numeric_dtype(np.datetime64)\n    False\n    >>> is_numeric_dtype(np.timedelta64)\n    False\n    >>> is_numeric_dtype(np.array(['a', 'b']))\n    False\n    >>> is_numeric_dtype(pd.Series([1, 2]))\n    True\n    >>> is_numeric_dtype(pd.Index([1, 2.]))\n    True\n    >>> is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.number, np.bool_)\n    )",
        "begin_line": 1223,
        "end_line": 1262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1265",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1265,
        "end_line": 1293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1296",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1296,
        "end_line": 1327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013083867591259977,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1330",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.arrays.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1330,
        "end_line": 1392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_type#1395",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_type(arr)",
        "snippet": "def is_extension_type(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is of a pandas extension class instance.\n\n    .. deprecated:: 1.0.0\n        Use ``is_extension_array_dtype`` instead.\n\n    Extension classes include categoricals, pandas sparse objects (i.e.\n    classes represented within the pandas library and not ones external\n    to it like scipy sparse matrices), and datetime-like arrays.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a pandas extension class instance.\n\n    Examples\n    --------\n    >>> is_extension_type([1, 2, 3])\n    False\n    >>> is_extension_type(np.array([1, 2, 3]))\n    False\n    >>>\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>>\n    >>> is_extension_type(cat)\n    True\n    >>> is_extension_type(pd.Series(cat))\n    True\n    >>> is_extension_type(pd.arrays.SparseArray([1, 2, 3]))\n    True\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_extension_type(bsr_matrix([1, 2, 3]))\n    False\n    >>> is_extension_type(pd.DatetimeIndex([1, 2, 3]))\n    False\n    >>> is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    >>>\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_extension_type(s)\n    True\n    \"\"\"\n    warnings.warn(\n        \"'is_extension_type' is deprecated and will be removed in a future \"\n        \"version.  Use 'is_extension_array_dtype' instead.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n\n    if is_categorical_dtype(arr):\n        return True\n    elif is_sparse(arr):\n        return True\n    elif is_datetime64tz_dtype(arr):\n        return True\n    return False",
        "begin_line": 1395,
        "end_line": 1457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1460",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1460,
        "end_line": 1506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013114754098360657,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1509",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1509,
        "end_line": 1538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1541",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1541,
        "end_line": 1562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009541984732824427,
            "pseudo_dstar_susp": 0.0008688097306689834,
            "pseudo_tarantula_susp": 0.0017921146953405018,
            "pseudo_op2_susp": 0.0008688097306689834,
            "pseudo_barinel_susp": 0.0017921146953405018
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1565",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype) -> DtypeObj:\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1565,
        "end_line": 1597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016778523489932886,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0018315018315018315,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0018315018315018315
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1600",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1600,
        "end_line": 1641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1733",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype) -> DtypeObj:\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError as err:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(f\"data type '{dtype}' not understood\") from err\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(f\"dtype '{dtype}' not understood\")\n\n    return npdtype",
        "begin_line": 1733,
        "end_line": 1780,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008680555555555555,
            "pseudo_dstar_susp": 0.0008665511265164644,
            "pseudo_tarantula_susp": 0.0016750418760469012,
            "pseudo_op2_susp": 0.0008665511265164644,
            "pseudo_barinel_susp": 0.0016750418760469012
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#47",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(pd.NA)\n    True\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 47,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013246787653993907,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna#130",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna(obj, inf_as_na: bool=False)",
        "snippet": "def _isna(obj, inf_as_na: bool = False):\n    \"\"\"\n    Detect missing values, treating None, NaN or NA as null. Infinite\n    values will also be treated as null if inf_as_na is True.\n\n    Parameters\n    ----------\n    obj: ndarray or object value\n        Input array or scalar value.\n    inf_as_na: bool\n        Whether to treat infinity as null.\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    if is_scalar(obj):\n        if inf_as_na:\n            return libmissing.checknull_old(obj)\n        else:\n            return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass, ABCExtensionArray)):\n        return _isna_ndarraylike(obj, inf_as_na=inf_as_na)\n    elif isinstance(obj, ABCDataFrame):\n        return obj.isna()\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object), inf_as_na=inf_as_na)\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj), inf_as_na=inf_as_na)\n    else:\n        return False",
        "begin_line": 130,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing._use_inf_as_na#168",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._use_inf_as_na(key)",
        "snippet": "def _use_inf_as_na(key):\n    \"\"\"\n    Option change callback for na/inf behaviour.\n\n    Choose which replacement for numpy.isnan / -numpy.isfinite is used.\n\n    Parameters\n    ----------\n    flag: bool\n        True means treat None, NaN, INF, -INF as null (old way),\n        False means None and NaN are null, but INF, -INF are not null\n        (new way).\n\n    Notes\n    -----\n    This approach to setting global module values is discussed and\n    approved here:\n\n    * https://stackoverflow.com/questions/4859217/\n      programmatically-creating-variables-in-python/4859312#4859312\n    \"\"\"\n    inf_as_na = get_option(key)\n    globals()[\"_isna\"] = partial(_isna, inf_as_na=inf_as_na)",
        "begin_line": 168,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#193",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj, inf_as_na: bool=False)",
        "snippet": "def _isna_ndarraylike(obj, inf_as_na: bool = False):\n    \"\"\"\n    Return an array indicating which values of the input array are NaN / NA.\n\n    Parameters\n    ----------\n    obj: array-like\n        The input array whose elements are to be checked.\n    inf_as_na: bool\n        Whether or not to treat infinite values as NA.\n\n    Returns\n    -------\n    array-like\n        Array of boolean values denoting the NA status of each element.\n    \"\"\"\n    values = getattr(obj, \"_values\", obj)\n    dtype = values.dtype\n\n    if is_extension_array_dtype(dtype):\n        if inf_as_na and is_categorical_dtype(dtype):\n            result = libmissing.isnaobj_old(values.to_numpy())\n        else:\n            result = values.isna()\n    elif is_string_dtype(dtype):\n        result = _isna_string_dtype(values, dtype, inf_as_na=inf_as_na)\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        if inf_as_na:\n            result = ~np.isfinite(values)\n        else:\n            result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 193,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_string_dtype#235",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_string_dtype(values: np.ndarray, dtype: np.dtype, inf_as_na: bool)",
        "snippet": "def _isna_string_dtype(\n    values: np.ndarray, dtype: np.dtype, inf_as_na: bool\n) -> np.ndarray:\n    # Working around NumPy ticket 1542\n    shape = values.shape\n\n    if is_string_like_dtype(dtype):\n        result = np.zeros(values.shape, dtype=bool)\n    else:\n        result = np.empty(shape, dtype=bool)\n        if inf_as_na:\n            vec = libmissing.isnaobj_old(values.ravel())\n        else:\n            vec = libmissing.isnaobj(values.ravel())\n\n        result[...] = vec.reshape(shape)\n\n    return result",
        "begin_line": 235,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014114326040931546,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#255",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(pd.NA)\n    False\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 255,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#358",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left.dtype) or is_string_dtype(right.dtype):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif left_value is libmissing.NA and right_value is not libmissing.NA:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    elif \"boolean value of NA is ambiguous\" in str(err):\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left.dtype) or is_complex_dtype(left.dtype):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 358,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#484",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)",
        "snippet": "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if needs_i8_conversion(dtype):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        if compat:\n            return False\n        return np.nan\n    return np.nan",
        "begin_line": 484,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#539",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype: DtypeObj)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype: DtypeObj) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 539,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n\n    # https://github.com/python/mypy/issues/1006\n    # error: 'classmethod' used with a non-method\n    @classmethod  # type: ignore\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001300221037576388,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#11",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001300221037576388,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__new__#207",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__new__(cls, data, closed=None, dtype=None, copy: bool=False, name=None, verify_integrity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        data,\n        closed=None,\n        dtype=None,\n        copy: bool = False,\n        name=None,\n        verify_integrity: bool = True,\n    ):\n\n        name = maybe_extract_name(name, data, cls)\n\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray(\n                data,\n                closed=closed,\n                copy=copy,\n                dtype=dtype,\n                verify_integrity=verify_integrity,\n            )\n\n        return cls._simple_new(array, name)",
        "begin_line": 207,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._simple_new#231",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._simple_new(cls, array: IntervalArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, array: IntervalArray, name: Label = None):\n        \"\"\"\n        Construct from an IntervalArray\n\n        Parameters\n        ----------\n        array : IntervalArray\n        name : Label, default None\n            Attached as result.name\n        \"\"\"\n        assert isinstance(array, IntervalArray), type(array)\n\n        result = IntervalMixin.__new__(cls)\n        result._data = array\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        result._reset_identity()\n        return result",
        "begin_line": 231,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_breaks#268",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_breaks(cls, breaks, closed: str='right', name=None, copy: bool=False, dtype=None)",
        "snippet": "    def from_breaks(\n        cls, breaks, closed: str = \"right\", name=None, copy: bool = False, dtype=None\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_breaks(\n                breaks, closed=closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_tuples#326",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_tuples(cls, data, closed: str='right', name=None, copy: bool=False, dtype=None)",
        "snippet": "    def from_tuples(\n        cls, data, closed: str = \"right\", name=None, copy: bool = False, dtype=None\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            arr = IntervalArray.from_tuples(data, closed=closed, copy=copy, dtype=dtype)\n        return cls._simple_new(arr, name=name)",
        "begin_line": 326,
        "end_line": 331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.inferred_type#418",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"Return a string of the type inferred from the values\"\"\"\n        return \"interval\"",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops.disallow.check#57",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.check(self, obj)",
        "snippet": "    def check(self, obj) -> bool:\n        return hasattr(obj, \"dtype\") and issubclass(obj.dtype.type, self.dtypes)",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops.disallow.__call__#60",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.__call__(self, f: F)",
        "snippet": "    def __call__(self, f: F) -> F:\n        @functools.wraps(f)\n        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e) from e\n                raise\n\n        return cast(F, _f)",
        "begin_line": 60,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops.disallow._f#62",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow._f(*args, **kwargs)",
        "snippet": "        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e) from e\n                raise",
        "begin_line": 62,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops._get_fill_value#168",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_fill_value(dtype: DtypeObj, fill_value: Optional[Scalar]=None, fill_value_typ=None)",
        "snippet": "def _get_fill_value(\n    dtype: DtypeObj, fill_value: Optional[Scalar] = None, fill_value_typ=None\n):\n    \"\"\" return the correct fill value for the dtype of the values \"\"\"\n    if fill_value is not None:\n        return fill_value\n    if _na_ok_dtype(dtype):\n        if fill_value_typ is None:\n            return np.nan\n        else:\n            if fill_value_typ == \"+inf\":\n                return np.inf\n            else:\n                return -np.inf\n    else:\n        if fill_value_typ is None:\n            return iNaT\n        else:\n            if fill_value_typ == \"+inf\":\n                # need the max int here\n                return _int64_max\n            else:\n                return iNaT",
        "begin_line": 168,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops._maybe_get_mask#193",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_get_mask(values: np.ndarray, skipna: bool, mask: Optional[np.ndarray])",
        "snippet": "def _maybe_get_mask(\n    values: np.ndarray, skipna: bool, mask: Optional[np.ndarray]\n) -> Optional[np.ndarray]:\n    \"\"\"\n    Compute a mask if and only if necessary.\n\n    This function will compute a mask iff it is necessary. Otherwise,\n    return the provided mask (potentially None) when a mask does not need to be\n    computed.\n\n    A mask is never necessary if the values array is of boolean or integer\n    dtypes, as these are incapable of storing NaNs. If passing a NaN-capable\n    dtype that is interpretable as either boolean or integer data (eg,\n    timedelta64), a mask must be provided.\n\n    If the skipna parameter is False, a new mask will not be computed.\n\n    The mask is computed using isna() by default. Setting invert=True selects\n    notna() as the masking function.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    mask : Optional[ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    Optional[np.ndarray]\n    \"\"\"\n    if mask is None:\n        if is_bool_dtype(values.dtype) or is_integer_dtype(values.dtype):\n            # Boolean data cannot contain nulls, so signal via mask being None\n            return None\n\n        if skipna:\n            mask = isna(values)\n\n    return mask",
        "begin_line": 193,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops._get_values#237",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_values(values: np.ndarray, skipna: bool, fill_value: Any=None, fill_value_typ: Optional[str]=None, mask: Optional[np.ndarray]=None)",
        "snippet": "def _get_values(\n    values: np.ndarray,\n    skipna: bool,\n    fill_value: Any = None,\n    fill_value_typ: Optional[str] = None,\n    mask: Optional[np.ndarray] = None,\n) -> Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]:\n    \"\"\"\n    Utility to get the values view, mask, dtype, dtype_max, and fill_value.\n\n    If both mask and fill_value/fill_value_typ are not None and skipna is True,\n    the values array will be copied.\n\n    For input arrays of boolean or integer dtypes, copies will only occur if a\n    precomputed mask, a fill_value/fill_value_typ, and skipna=True are\n    provided.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    fill_value : Any\n        value to fill NaNs with\n    fill_value_typ : str\n        Set to '+inf' or '-inf' to handle dtype-specific infinities\n    mask : Optional[np.ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    values : ndarray\n        Potential copy of input value array\n    mask : Optional[ndarray[bool]]\n        Mask for values, if deemed necessary to compute\n    dtype : np.dtype\n        dtype for values\n    dtype_max : np.dtype\n        platform independent dtype\n    fill_value : Any\n        fill value used\n    \"\"\"\n    # In _get_values is only called from within nanops, and in all cases\n    #  with scalar fill_value.  This guarantee is important for the\n    #  maybe_upcast_putmask call below\n    assert is_scalar(fill_value)\n    values = extract_array(values, extract_numpy=True)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    dtype = values.dtype\n\n    if needs_i8_conversion(values.dtype):\n        # changing timedelta64/datetime64 to int64 needs to happen after\n        #  finding `mask` above\n        values = np.asarray(values.view(\"i8\"))\n\n    dtype_ok = _na_ok_dtype(dtype)\n\n    # get our fill value (in case we need to provide an alternative\n    # dtype for it)\n    fill_value = _get_fill_value(\n        dtype, fill_value=fill_value, fill_value_typ=fill_value_typ\n    )\n\n    if skipna and (mask is not None) and (fill_value is not None):\n        values = values.copy()\n        if dtype_ok and mask.any():\n            np.putmask(values, mask, fill_value)\n\n        # promote if needed\n        else:\n            values, _ = maybe_upcast_putmask(values, mask, fill_value)\n\n    # return a platform independent precision dtype\n    dtype_max = dtype\n    if is_integer_dtype(dtype) or is_bool_dtype(dtype):\n        dtype_max = np.dtype(np.int64)\n    elif is_float_dtype(dtype):\n        dtype_max = np.dtype(np.float64)\n\n    return values, mask, dtype, dtype_max, fill_value",
        "begin_line": 237,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops._na_ok_dtype#322",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_ok_dtype(dtype: DtypeObj)",
        "snippet": "def _na_ok_dtype(dtype: DtypeObj) -> bool:\n    if needs_i8_conversion(dtype):\n        return False\n    return not issubclass(dtype.type, np.integer)",
        "begin_line": 322,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops._wrap_results#328",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._wrap_results(result, dtype: DtypeObj, fill_value=None)",
        "snippet": "def _wrap_results(result, dtype: DtypeObj, fill_value=None):\n    \"\"\" wrap our results if needed \"\"\"\n    if is_datetime64_any_dtype(dtype):\n        if fill_value is None:\n            # GH#24293\n            fill_value = iNaT\n        if not isinstance(result, np.ndarray):\n            tz = getattr(dtype, \"tz\", None)\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = Timestamp(result, tz=tz)\n        else:\n            # If we have float dtype, taking a view will give the wrong result\n            result = result.astype(dtype)\n    elif is_timedelta64_dtype(dtype):\n        if not isinstance(result, np.ndarray):\n            if result == fill_value:\n                result = np.nan\n\n            # raise if we have a timedelta64[ns] which is too large\n            if np.fabs(result) > _int64_max:\n                raise ValueError(\"overflow in timedelta operation\")\n\n            result = Timedelta(result, unit=\"ns\")\n        else:\n            result = result.astype(\"m8[ns]\").view(dtype)\n\n    return result",
        "begin_line": 328,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops.nansum#471",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansum(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, min_count: int=0, mask: Optional[np.ndarray]=None)",
        "snippet": "def nansum(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    min_count: int = 0,\n    mask: Optional[np.ndarray] = None,\n) -> float:\n    \"\"\"\n    Sum the elements along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nansum(s)\n    3.0\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    if is_float_dtype(dtype):\n        dtype_sum = dtype\n    elif is_timedelta64_dtype(dtype):\n        dtype_sum = np.float64\n    the_sum = values.sum(axis, dtype=dtype_sum)\n    the_sum = _maybe_null_out(the_sum, axis, mask, values.shape, min_count=min_count)\n\n    return _wrap_results(the_sum, dtype)",
        "begin_line": 471,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops._maybe_null_out#1252",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], shape: Tuple[int, ...], min_count: int=1)",
        "snippet": "def _maybe_null_out(\n    result: np.ndarray,\n    axis: Optional[int],\n    mask: Optional[np.ndarray],\n    shape: Tuple[int, ...],\n    min_count: int = 1,\n) -> float:\n    \"\"\"\n    Returns\n    -------\n    Dtype\n        The product of all elements on a given axis. ( NaNs are treated as 1)\n    \"\"\"\n    if mask is not None and axis is not None and getattr(result, \"ndim\", False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):\n                if np.iscomplexobj(result):\n                    result = result.astype(\"c16\")\n                else:\n                    result = result.astype(\"f8\")\n                result[null_mask] = np.nan\n            else:\n                # GH12941, use None to auto cast null\n                result[null_mask] = None\n    elif result is not NaT:\n        if check_below_min_count(shape, mask, min_count):\n            result = np.nan\n\n    return result",
        "begin_line": 1252,
        "end_line": 1281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.nanops.check_below_min_count#1284",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.check_below_min_count(shape: Tuple[int, ...], mask: Optional[np.ndarray], min_count: int)",
        "snippet": "def check_below_min_count(\n    shape: Tuple[int, ...], mask: Optional[np.ndarray], min_count: int\n) -> bool:\n    \"\"\"\n    Check for the `min_count` keyword. Returns True if below `min_count` (when\n    missing value should be returned from the reduction).\n\n    Parameters\n    ----------\n    shape : tuple\n        The shape of the values (`values.shape`).\n    mask : ndarray or None\n        Boolean numpy array (typically of same shape as `shape`) or None.\n    min_count : int\n        Keyword passed through from sum/prod call.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if min_count > 0:\n        if mask is None:\n            # no missing values, only check size\n            non_nulls = np.prod(shape)\n        else:\n            non_nulls = mask.size - mask.sum()\n        if non_nulls < min_count:\n            return True\n    return False",
        "begin_line": 1284,
        "end_line": 1312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.is_url#48",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_url(url)",
        "snippet": "def is_url(url) -> bool:\n    \"\"\"\n    Check to see if a URL has a valid protocol.\n\n    Parameters\n    ----------\n    url : str or unicode\n\n    Returns\n    -------\n    isurl : bool\n        If `url` has a valid protocol return True otherwise False.\n    \"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in _VALID_URLS",
        "begin_line": 48,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common._expand_user#66",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._expand_user(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Return the argument with an initial component of ~ or ~user\n    replaced by that user's home directory.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted if possible\n\n    Returns\n    -------\n    expanded_filepath_or_buffer : an expanded filepath or the\n                                  input if not expandable\n    \"\"\"\n    if isinstance(filepath_or_buffer, str):\n        return os.path.expanduser(filepath_or_buffer)\n    return filepath_or_buffer",
        "begin_line": 66,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.stringify_path#96",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.stringify_path(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def stringify_path(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"\n    Attempt to convert a path-like object to a string.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted\n\n    Returns\n    -------\n    str_filepath_or_buffer : maybe a string version of the object\n\n    Notes\n    -----\n    Objects supporting the fspath protocol (python 3.6+) are coerced\n    according to its __fspath__ method.\n\n    For backwards compatibility with older pythons, pathlib.Path and\n    py.path objects are specially coerced.\n\n    Any other object is passed through unchanged, which includes bytes,\n    strings, buffers, or anything else that's not even path-like.\n    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):\n        return str(filepath_or_buffer)\n    return _expand_user(filepath_or_buffer)",
        "begin_line": 96,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.is_s3_url#129",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_s3_url(url)",
        "snippet": "def is_s3_url(url) -> bool:\n    \"\"\"Check for an s3, s3n, or s3a url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"s3\", \"s3n\", \"s3a\"]",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.is_gcs_url#136",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_gcs_url(url)",
        "snippet": "def is_gcs_url(url) -> bool:\n    \"\"\"Check for a gcs url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"gcs\", \"gs\"]",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.get_filepath_or_buffer#180",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_filepath_or_buffer(filepath_or_buffer: FilePathOrBuffer, encoding: Optional[str]=None, compression: Optional[str]=None, mode: Optional[str]=None)",
        "snippet": "def get_filepath_or_buffer(\n    filepath_or_buffer: FilePathOrBuffer,\n    encoding: Optional[str] = None,\n    compression: Optional[str] = None,\n    mode: Optional[str] = None,\n):\n    \"\"\"\n    If the filepath_or_buffer is a url, translate and return the buffer.\n    Otherwise passthrough.\n\n    Parameters\n    ----------\n    filepath_or_buffer : a url, filepath (str, py.path.local or pathlib.Path),\n                         or buffer\n    compression : {{'gzip', 'bz2', 'zip', 'xz', None}}, optional\n    encoding : the encoding to use to decode bytes, default is 'utf-8'\n    mode : str, optional\n\n    Returns\n    -------\n    Tuple[FilePathOrBuffer, str, str, bool]\n        Tuple containing the filepath or buffer, the encoding, the compression\n        and should_close.\n    \"\"\"\n    filepath_or_buffer = stringify_path(filepath_or_buffer)\n\n    if isinstance(filepath_or_buffer, str) and is_url(filepath_or_buffer):\n        req = urlopen(filepath_or_buffer)\n        content_encoding = req.headers.get(\"Content-Encoding\", None)\n        if content_encoding == \"gzip\":\n            # Override compression based on Content-Encoding header\n            compression = \"gzip\"\n        reader = BytesIO(req.read())\n        req.close()\n        return reader, encoding, compression, True\n\n    if is_s3_url(filepath_or_buffer):\n        from pandas.io import s3\n\n        return s3.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if is_gcs_url(filepath_or_buffer):\n        from pandas.io import gcs\n\n        return gcs.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if isinstance(filepath_or_buffer, (str, bytes, mmap.mmap)):\n        return _expand_user(filepath_or_buffer), None, compression, False\n\n    if not is_file_like(filepath_or_buffer):\n        msg = f\"Invalid file path or buffer object type: {type(filepath_or_buffer)}\"\n        raise ValueError(msg)\n\n    return filepath_or_buffer, None, compression, False",
        "begin_line": 180,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.get_compression_method#261",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_compression_method(compression: Optional[Union[str, Mapping[str, str]]])",
        "snippet": "def get_compression_method(\n    compression: Optional[Union[str, Mapping[str, str]]]\n) -> Tuple[Optional[str], Dict[str, str]]:\n    \"\"\"\n    Simplifies a compression argument to a compression method string and\n    a mapping containing additional arguments.\n\n    Parameters\n    ----------\n    compression : str or mapping\n        If string, specifies the compression method. If mapping, value at key\n        'method' specifies compression method.\n\n    Returns\n    -------\n    tuple of ({compression method}, Optional[str]\n              {compression arguments}, Dict[str, str])\n\n    Raises\n    ------\n    ValueError on mapping missing 'method' key\n    \"\"\"\n    if isinstance(compression, Mapping):\n        compression_args = dict(compression)\n        try:\n            compression = compression_args.pop(\"method\")\n        except KeyError as err:\n            raise ValueError(\"If mapping, compression must have key 'method'\") from err\n    else:\n        compression_args = {}\n    return compression, compression_args",
        "begin_line": 261,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.infer_compression#294",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.infer_compression(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str])",
        "snippet": "def infer_compression(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]\n) -> Optional[str]:\n    \"\"\"\n    Get the compression method for filepath_or_buffer. If compression='infer',\n    the inferred compression method is returned. Otherwise, the input\n    compression method is returned unchanged, unless it's invalid, in which\n    case an error is raised.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str or file handle\n        File path or object.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n        If 'infer' and `filepath_or_buffer` is path-like, then detect\n        compression from the following extensions: '.gz', '.bz2', '.zip',\n        or '.xz' (otherwise no compression).\n\n    Returns\n    -------\n    string or None\n\n    Raises\n    ------\n    ValueError on invalid compression specified.\n    \"\"\"\n    # No compression has been explicitly specified\n    if compression is None:\n        return None\n\n    # Infer compression\n    if compression == \"infer\":\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = stringify_path(filepath_or_buffer)\n        if not isinstance(filepath_or_buffer, str):\n            # Cannot infer compression of a buffer, assume no compression\n            return None\n\n        # Infer compression from the filename/URL extension\n        for compression, extension in _compression_to_extension.items():\n            if filepath_or_buffer.endswith(extension):\n                return compression\n        return None\n\n    # Compression has been specified. Check that it's valid\n    if compression in _compression_to_extension:\n        return compression\n\n    msg = f\"Unrecognized compression type: {compression}\"\n    valid = [\"infer\", None] + sorted(_compression_to_extension)\n    msg += f\"\\nValid compression types are {valid}\"\n    raise ValueError(msg)",
        "begin_line": 294,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.io.common.get_handle#348",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_handle(path_or_buf, mode: str, encoding=None, compression: Optional[Union[str, Mapping[str, Any]]]=None, memory_map: bool=False, is_text: bool=True)",
        "snippet": "def get_handle(\n    path_or_buf,\n    mode: str,\n    encoding=None,\n    compression: Optional[Union[str, Mapping[str, Any]]] = None,\n    memory_map: bool = False,\n    is_text: bool = True,\n):\n    \"\"\"\n    Get file handle for given path/buffer and mode.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle\n        File path or object.\n    mode : str\n        Mode to open path_or_buf with.\n    encoding : str or None\n        Encoding to use.\n    compression : str or dict, default None\n        If string, specifies compression mode. If dict, value at key 'method'\n        specifies compression mode. Compression mode must be one of {'infer',\n        'gzip', 'bz2', 'zip', 'xz', None}. If compression mode is 'infer'\n        and `filepath_or_buffer` is path-like, then detect compression from\n        the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise\n        no compression). If dict and compression mode is one of\n        {'zip', 'gzip', 'bz2'}, or inferred as one of the above,\n        other entries passed as additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other keys as compression options if compression\n           mode is 'zip'.\n\n        .. versionchanged:: 1.1.0\n\n           Passing compression options as keys in dict is now\n           supported for compression modes 'gzip' and 'bz2' as well as 'zip'.\n\n    memory_map : boolean, default False\n        See parsers._parser_params for more information.\n    is_text : boolean, default True\n        whether file/buffer is in text format (csv, json, etc.), or in binary\n        mode (pickle, etc.).\n\n    Returns\n    -------\n    f : file-like\n        A file-like object.\n    handles : list of file-like objects\n        A list of file-like object that were opened in this function.\n    \"\"\"\n    need_text_wrapping: Tuple[Type[\"IOBase\"], ...]\n    try:\n        from s3fs import S3File\n\n        need_text_wrapping = (BufferedIOBase, RawIOBase, S3File)\n    except ImportError:\n        need_text_wrapping = (BufferedIOBase, RawIOBase)\n\n    handles: List[IO] = list()\n    f = path_or_buf\n\n    # Convert pathlib.Path/py.path.local or string\n    path_or_buf = stringify_path(path_or_buf)\n    is_path = isinstance(path_or_buf, str)\n\n    compression, compression_args = get_compression_method(compression)\n    if is_path:\n        compression = infer_compression(path_or_buf, compression)\n\n    if compression:\n\n        # GH33398 the type ignores here seem related to mypy issue #5382;\n        # it may be possible to remove them once that is resolved.\n\n        # GZ Compression\n        if compression == \"gzip\":\n            if is_path:\n                f = gzip.open(\n                    path_or_buf, mode, **compression_args  # type: ignore\n                )\n            else:\n                f = gzip.GzipFile(\n                    fileobj=path_or_buf, **compression_args  # type: ignore\n                )\n\n        # BZ Compression\n        elif compression == \"bz2\":\n            if is_path:\n                f = bz2.BZ2File(\n                    path_or_buf, mode, **compression_args  # type: ignore\n                )\n            else:\n                f = bz2.BZ2File(path_or_buf, **compression_args)  # type: ignore\n\n        # ZIP Compression\n        elif compression == \"zip\":\n            zf = _BytesZipFile(path_or_buf, mode, **compression_args)\n            # Ensure the container is closed as well.\n            handles.append(zf)\n            if zf.mode == \"w\":\n                f = zf\n            elif zf.mode == \"r\":\n                zip_names = zf.namelist()\n                if len(zip_names) == 1:\n                    f = zf.open(zip_names.pop())\n                elif len(zip_names) == 0:\n                    raise ValueError(f\"Zero files found in ZIP file {path_or_buf}\")\n                else:\n                    raise ValueError(\n                        \"Multiple files found in ZIP file. \"\n                        f\"Only one file per ZIP: {zip_names}\"\n                    )\n\n        # XZ Compression\n        elif compression == \"xz\":\n            f = _get_lzma_file(lzma)(path_or_buf, mode)\n\n        # Unrecognized Compression\n        else:\n            msg = f\"Unrecognized compression type: {compression}\"\n            raise ValueError(msg)\n\n        handles.append(f)\n\n    elif is_path:\n        if encoding:\n            # Encoding\n            f = open(path_or_buf, mode, encoding=encoding, newline=\"\")\n        elif is_text:\n            # No explicit encoding\n            f = open(path_or_buf, mode, errors=\"replace\", newline=\"\")\n        else:\n            # Binary mode\n            f = open(path_or_buf, mode)\n        handles.append(f)\n\n    # Convert BytesIO or file objects passed with an encoding\n    if is_text and (compression or isinstance(f, need_text_wrapping)):\n        from io import TextIOWrapper\n\n        g = TextIOWrapper(f, encoding=encoding, newline=\"\")\n        if not isinstance(f, (BufferedIOBase, RawIOBase)):\n            handles.append(g)\n        f = g\n\n    if memory_map and hasattr(f, \"fileno\"):\n        try:\n            wrapped = _MMapWrapper(f)\n            f.close()\n            f = wrapped\n        except Exception:\n            # we catch any errors that may have occurred\n            # because that is consistent with the lower-level\n            # functionality of the C engine (pd.read_csv), so\n            # leave the file handler as is then\n            pass\n\n    return f, handles",
        "begin_line": 348,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__init__#277",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__init__(self, data, sparse_index=None, index=None, fill_value=None, kind='integer', dtype=None, copy=False)",
        "snippet": "    def __init__(\n        self,\n        data,\n        sparse_index=None,\n        index=None,\n        fill_value=None,\n        kind=\"integer\",\n        dtype=None,\n        copy=False,\n    ):\n\n        if fill_value is None and isinstance(dtype, SparseDtype):\n            fill_value = dtype.fill_value\n\n        if isinstance(data, type(self)):\n            # disable normal inference on dtype, sparse_index, & fill_value\n            if sparse_index is None:\n                sparse_index = data.sp_index\n            if fill_value is None:\n                fill_value = data.fill_value\n            if dtype is None:\n                dtype = data.dtype\n            # TODO: make kind=None, and use data.kind?\n            data = data.sp_values\n\n        # Handle use-provided dtype\n        if isinstance(dtype, str):\n            # Two options: dtype='int', regular numpy dtype\n            # or dtype='Sparse[int]', a sparse dtype\n            try:\n                dtype = SparseDtype.construct_from_string(dtype)\n            except TypeError:\n                dtype = pandas_dtype(dtype)\n\n        if isinstance(dtype, SparseDtype):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        if index is not None and not is_scalar(data):\n            raise Exception(\"must only pass scalars with an index\")\n\n        if is_scalar(data):\n            if index is not None:\n                if data is None:\n                    data = np.nan\n\n            if index is not None:\n                npoints = len(index)\n            elif sparse_index is None:\n                npoints = 1\n            else:\n                npoints = sparse_index.length\n\n            dtype = infer_dtype_from_scalar(data)[0]\n            data = construct_1d_arraylike_from_scalar(data, npoints, dtype)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        # TODO: disentangle the fill_value dtype inference from\n        # dtype inference\n        if data is None:\n            # TODO: What should the empty dtype be? Object or float?\n            data = np.array([], dtype=dtype)\n\n        if not is_array_like(data):\n            try:\n                # probably shared code in sanitize_series\n\n                data = sanitize_array(data, index=None)\n            except ValueError:\n                # NumPy may raise a ValueError on data like [1, []]\n                # we retry with object dtype here.\n                if dtype is None:\n                    dtype = object\n                    data = np.atleast_1d(np.asarray(data, dtype=dtype))\n                else:\n                    raise\n\n        if copy:\n            # TODO: avoid double copy when dtype forces cast.\n            data = data.copy()\n\n        if fill_value is None:\n            fill_value_dtype = data.dtype if dtype is None else dtype\n            if fill_value_dtype is None:\n                fill_value = np.nan\n            else:\n                fill_value = na_value_for_dtype(fill_value_dtype)\n\n        if isinstance(data, type(self)) and sparse_index is None:\n            sparse_index = data._sparse_index\n            sparse_values = np.asarray(data.sp_values, dtype=dtype)\n        elif sparse_index is None:\n            data = extract_array(data, extract_numpy=True)\n            if not isinstance(data, np.ndarray):\n                # EA\n                if is_datetime64tz_dtype(data.dtype):\n                    warnings.warn(\n                        f\"Creating SparseArray from {data.dtype} data \"\n                        \"loses timezone information.  Cast to object before \"\n                        \"sparse to retain timezone information.\",\n                        UserWarning,\n                        stacklevel=2,\n                    )\n                    data = np.asarray(data, dtype=\"datetime64[ns]\")\n                data = np.asarray(data)\n            sparse_values, sparse_index, fill_value = make_sparse(\n                data, kind=kind, fill_value=fill_value, dtype=dtype\n            )\n        else:\n            sparse_values = np.asarray(data, dtype=dtype)\n            if len(sparse_values) != sparse_index.npoints:\n                raise AssertionError(\n                    f\"Non array-like type {type(sparse_values)} must \"\n                    \"have the same length as the index\"\n                )\n        self._sparse_index = sparse_index\n        self._sparse_values = sparse_values\n        self._dtype = SparseDtype(sparse_values.dtype, fill_value)",
        "begin_line": 277,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_index#499",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_index(self)",
        "snippet": "    def sp_index(self):\n        \"\"\"\n        The SparseIndex containing the location of non- ``fill_value`` points.\n        \"\"\"\n        return self._sparse_index",
        "begin_line": 499,
        "end_line": 503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.dtype#519",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 519,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__len__#551",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return self.sp_index.length",
        "begin_line": 551,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.make_sparse#1509",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array.make_sparse(arr: np.ndarray, kind='block', fill_value=None, dtype=None, copy=False)",
        "snippet": "def make_sparse(arr: np.ndarray, kind=\"block\", fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)\n    \"\"\"\n    assert isinstance(arr, np.ndarray)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr.dtype):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value",
        "begin_line": 1509,
        "end_line": 1560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array._make_index#1563",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array._make_index(length, indices, kind)",
        "snippet": "def _make_index(length, indices, kind):\n\n    if kind == \"block\" or isinstance(kind, BlockIndex):\n        locs, lens = splib.get_blocks(indices)\n        index = BlockIndex(length, locs, lens)\n    elif kind == \"integer\" or isinstance(kind, IntIndex):\n        index = IntIndex(length, indices)\n    else:  # pragma: no cover\n        raise ValueError(\"must be block or integer type\")\n    return index",
        "begin_line": 1563,
        "end_line": 1572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#99",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 99,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014204545454545454,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__getstate__#170",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__getstate__(self)",
        "snippet": "    def __getstate__(self) -> Dict[str_type, Any]:\n        # pickle support; we don't want to pickle the cache\n        return {k: getattr(self, k, None) for k in self._metadata}",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.reset_cache#175",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.reset_cache(cls)",
        "snippet": "    def reset_cache(cls) -> None:\n        \"\"\" clear the cache \"\"\"\n        cls._cache = {}",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#251",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Ordered=False)",
        "snippet": "    def __init__(self, categories=None, ordered: Ordered = False):\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 251,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018148820326678765,
            "pseudo_dstar_susp": 0.000881057268722467,
            "pseudo_tarantula_susp": 0.0018552875695732839,
            "pseudo_op2_susp": 0.000881057268722467,
            "pseudo_barinel_susp": 0.0018552875695732839
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype#263",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype(cls, dtype: 'CategoricalDtype', categories=None, ordered: Ordered=None)",
        "snippet": "    def _from_categorical_dtype(\n        cls, dtype: \"CategoricalDtype\", categories=None, ordered: Ordered = None\n    ) -> \"CategoricalDtype\":\n        if categories is ordered is None:\n            return dtype\n        if categories is None:\n            categories = dtype.categories\n        if ordered is None:\n            ordered = dtype.ordered\n        return cls(categories, ordered)",
        "begin_line": 263,
        "end_line": 272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#275",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> pd.CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     categories=['a', 'b'], ordered=True\n        ... )\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = pd.CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = pd.Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     c, ['x', 'y'], ordered=True, dtype=dtype2\n        ... )\n        Traceback (most recent call last):\n            ...\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> pd.CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(categories=['x', 'y'], ordered=False)\n        \"\"\"\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    raise ValueError(f\"Unknown dtype {repr(dtype)}\")\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n            elif not isinstance(dtype, CategoricalDtype):\n                raise ValueError(f\"Cannot not construct CategoricalDtype from {dtype}\")\n        elif cls.is_dtype(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 275,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string#370",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct a CategoricalDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            Must be the string \"category\" in order to be successfully constructed.\n\n        Returns\n        -------\n        CategoricalDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a CategoricalDtype cannot be constructed from the input.\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a 'CategoricalDtype' from '{string}'\")\n\n        # need ordered=None to ensure that operations specifying dtype=\"category\" don't\n        # override the ordered value for existing categoricals\n        return cls(ordered=None)",
        "begin_line": 370,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#400",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001838235294117647,
            "pseudo_dstar_susp": 0.0008865248226950354,
            "pseudo_tarantula_susp": 0.0018796992481203006,
            "pseudo_op2_susp": 0.0008865248226950354,
            "pseudo_barinel_susp": 0.0018796992481203006
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__setstate__#411",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__setstate__(self, state: MutableMapping[str_type, Any])",
        "snippet": "    def __setstate__(self, state: MutableMapping[str_type, Any]) -> None:\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to\n        # pickle -> need to set the settable private ones here (see GH26067)\n        self._categories = state.pop(\"categories\", None)\n        self._ordered = state.pop(\"ordered\", False)",
        "begin_line": 411,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__#418",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # _hash_categories returns a uint64, so use the negative\n        # space for when we have unknown categories to avoid a conflict\n        if self.categories is None:\n            if self.ordered:\n                return -1\n            else:\n                return -2\n        # We *do* want to include the real self.ordered here\n        return int(self._hash_categories(self.categories, self.ordered))",
        "begin_line": 418,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#429",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self.ordered == other.ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 429,
        "end_line": 472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__repr__#474",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_type:\n        if self.categories is None:\n            data = \"None, \"\n        else:\n            data = self.categories._format_data(name=type(self).__name__)\n        return f\"CategoricalDtype(categories={data}ordered={self.ordered})\"",
        "begin_line": 474,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004310344827586207,
            "pseudo_dstar_susp": 0.0012077294685990338,
            "pseudo_tarantula_susp": 0.004366812227074236,
            "pseudo_op2_susp": 0.0012077294685990338,
            "pseudo_barinel_susp": 0.004366812227074236
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories#482",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories(categories, ordered: Ordered=True)",
        "snippet": "    def _hash_categories(categories, ordered: Ordered = True) -> int:\n        from pandas.core.util.hashing import (\n            hash_array,\n            _combine_hash_arrays,\n            hash_tuples,\n        )\n        from pandas.core.dtypes.common import is_datetime64tz_dtype, DT64NS_DTYPE\n\n        if len(categories) and isinstance(categories[0], tuple):\n            # assumes if any individual category is a tuple, then all our. ATM\n            # I don't really want to support just some of the categories being\n            # tuples.\n            categories = list(categories)  # breaks if a np.array of categories\n            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == \"O\":\n                if len({type(x) for x in categories}) != 1:\n                    # TODO: hash_array doesn't handle mixed types. It casts\n                    # everything to a str first, which means we treat\n                    # {'1', '2'} the same as {'1', 2}\n                    # find a better solution\n                    hashed = hash((tuple(categories), ordered))\n                    return hashed\n\n            if is_datetime64tz_dtype(categories.dtype):\n                # Avoid future warning.\n                categories = categories.astype(DT64NS_DTYPE)\n\n            cat_array = hash_array(np.asarray(categories), categorize=False)\n        if ordered:\n            cat_array = np.vstack(\n                [cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)]\n            )\n        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array), num_items=len(cat_array))\n        return np.bitwise_xor.reduce(hashed)",
        "begin_line": 482,
        "end_line": 518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type#521",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"Categorical\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas import Categorical  # noqa: F811\n\n        return Categorical",
        "begin_line": 521,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#534",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 534,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018281535648994515,
            "pseudo_dstar_susp": 0.0008841732979664014,
            "pseudo_tarantula_susp": 0.001869158878504673,
            "pseudo_op2_susp": 0.0008841732979664014,
            "pseudo_barinel_susp": 0.001869158878504673
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#553",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            raise TypeError(\n                f\"Parameter 'categories' must be list-like, was {repr(categories)}\"\n            )\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorical categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 553,
        "end_line": 587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#589",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            raise ValueError(\n                f\"a CategoricalDtype must be passed to perform an update, \"\n                f\"got {repr(dtype)}\"\n            )\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # update categories/ordered unless they've been explicitly passed as None\n        new_categories = (\n            dtype.categories if dtype.categories is not None else self.categories\n        )\n        new_ordered = dtype.ordered if dtype.ordered is not None else self.ordered\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 589,
        "end_line": 622,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014705882352941175,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#625",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 625,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018796992481203006,
            "pseudo_dstar_susp": 0.0008880994671403197,
            "pseudo_tarantula_susp": 0.0018867924528301887,
            "pseudo_op2_susp": 0.0008880994671403197,
            "pseudo_barinel_susp": 0.0018867924528301887
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered#632",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self._ordered",
        "begin_line": 632,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001893939393939394,
            "pseudo_dstar_susp": 0.00089126559714795,
            "pseudo_tarantula_susp": 0.0019011406844106464,
            "pseudo_op2_susp": 0.00089126559714795,
            "pseudo_barinel_susp": 0.0019011406844106464
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#719",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit: Union[str_type, 'DatetimeTZDtype']='ns', tz=None)",
        "snippet": "    def __init__(self, unit: Union[str_type, \"DatetimeTZDtype\"] = \"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz  # type: ignore\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    f\"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is no longer supported. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 719,
        "end_line": 748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#751",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self) -> str_type:\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 751,
        "end_line": 755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001485222040695084,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#758",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 758,
        "end_line": 762,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001464343242055938,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#778",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"DatetimeTZDtype\":\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        msg = f\"Cannot construct a 'DatetimeTZDtype' from '{string}'\"\n        match = cls._match.match(string)\n        if match:\n            d = match.groupdict()\n            try:\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n            except (KeyError, TypeError, ValueError) as err:\n                # KeyError if maybe_get_tz tries and fails to get a\n                #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                # TypeError if we pass a nonsense tz;\n                # ValueError if we pass a unit other than \"ns\"\n                raise TypeError(msg) from err\n        raise TypeError(msg)",
        "begin_line": 778,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#813",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return f\"datetime64[{self.unit}, {self.tz}]\"",
        "begin_line": 813,
        "end_line": 814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#817",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 817,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__#821",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        # TODO: update this.\n        return hash(str(self))",
        "begin_line": 821,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#826",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            if other.startswith(\"M8[\"):\n                other = \"datetime64[\" + other[3:]\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 826,
        "end_line": 836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__setstate__#838",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state) -> None:\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to\n        # pickle -> need to set the settable private ones here (see GH26067)\n        self._tz = state[\"tz\"]\n        self._unit = state[\"unit\"]",
        "begin_line": 838,
        "end_line": 843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#884",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, BaseOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 884,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#911",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 911,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001457725947521866,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype._parse_dtype_strict#918",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype._parse_dtype_strict(cls, freq)",
        "snippet": "    def _parse_dtype_strict(cls, freq):\n        if isinstance(freq, str):\n            if freq.startswith(\"period[\") or freq.startswith(\"Period[\"):\n                m = cls._match.search(freq)\n                if m is not None:\n                    freq = m.group(\"freq\")\n            from pandas.tseries.frequencies import to_offset\n\n            freq = to_offset(freq)\n            if freq is not None:\n                return freq\n\n        raise ValueError(\"could not construct PeriodDtype\")",
        "begin_line": 918,
        "end_line": 930,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#933",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"PeriodDtype\":\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, BaseOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'PeriodDtype' from '{string}'\"\n        else:\n            msg = f\"'construct_from_string' expects a string, got {type(string)}\"\n        raise TypeError(msg)",
        "begin_line": 933,
        "end_line": 953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__str__#955",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return self.name",
        "begin_line": 955,
        "end_line": 956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.name#959",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        return f\"period[{self.freq.freqstr}]\"",
        "begin_line": 959,
        "end_line": 960,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__hash__#966",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        return hash(str(self))",
        "begin_line": 966,
        "end_line": 968,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__#970",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name or other == self.name.title()\n\n        return isinstance(other, PeriodDtype) and self.freq == other.freq",
        "begin_line": 970,
        "end_line": 974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__setstate__#976",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state):\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to\n        # pickle -> need to set the settable private ones here (see GH26067)\n        self._freq = state[\"freq\"]",
        "begin_line": 976,
        "end_line": 980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#983",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 983,
        "end_line": 1001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__new__#1076",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls, subtype=None)",
        "snippet": "    def __new__(cls, subtype=None):\n        from pandas.core.dtypes.common import (\n            is_categorical_dtype,\n            is_string_dtype,\n            pandas_dtype,\n        )\n\n        if isinstance(subtype, IntervalDtype):\n            return subtype\n        elif subtype is None:\n            # we are called as an empty constructor\n            # generally for pickle compat\n            u = object.__new__(cls)\n            u._subtype = None\n            return u\n        elif isinstance(subtype, str) and subtype.lower() == \"interval\":\n            subtype = None\n        else:\n            if isinstance(subtype, str):\n                m = cls._match.search(subtype)\n                if m is not None:\n                    subtype = m.group(\"subtype\")\n\n            try:\n                subtype = pandas_dtype(subtype)\n            except TypeError as err:\n                raise TypeError(\"could not construct IntervalDtype\") from err\n\n        if is_categorical_dtype(subtype) or is_string_dtype(subtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalDtype\"\n            )\n            raise TypeError(msg)\n\n        try:\n            return cls._cache[str(subtype)]\n        except KeyError:\n            u = object.__new__(cls)\n            u._subtype = subtype\n            cls._cache[str(subtype)] = u\n            return u",
        "begin_line": 1076,
        "end_line": 1118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.subtype#1121",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        \"\"\"\n        The dtype of the Interval bounds.\n        \"\"\"\n        return self._subtype",
        "begin_line": 1121,
        "end_line": 1125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1141",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            f\"Cannot construct a 'IntervalDtype' from '{string}'.\\n\\n\"\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1141,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.type#1163",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.type(self)",
        "snippet": "    def type(self):\n        return Interval",
        "begin_line": 1163,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__str__#1166",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        if self.subtype is None:\n            return \"interval\"\n        return f\"interval[{self.subtype}]\"",
        "begin_line": 1166,
        "end_line": 1169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__hash__#1171",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        return hash(str(self))",
        "begin_line": 1171,
        "end_line": 1173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__#1175",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other.lower() in (self.name.lower(), str(self).lower())\n        elif not isinstance(other, IntervalDtype):\n            return False\n        elif self.subtype is None or other.subtype is None:\n            # None should match any subtype\n            return True\n        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n\n            return is_dtype_equal(self.subtype, other.subtype)",
        "begin_line": 1175,
        "end_line": 1186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__setstate__#1188",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__setstate__(self, state)",
        "snippet": "    def __setstate__(self, state):\n        # for pickle compat. __get_state__ is defined in the\n        # PandasExtensionDtype superclass and uses the public properties to\n        # pickle -> need to set the settable private ones here (see GH26067)\n        self._subtype = state[\"subtype\"]",
        "begin_line": 1188,
        "end_line": 1192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1195",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1195,
        "end_line": 1211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#111",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy#611",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        name = self.name if name is lib.no_default else name\n        cache = self._cache.copy() if values is None else {}\n\n        if values is None:\n            values = self._data\n\n        if isinstance(values, np.ndarray):\n            # TODO: We would rather not get here\n            values = type(self._data)(values, dtype=self.dtype)\n\n        result = type(self)._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 611,
        "end_line": 624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._engine_type#171",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._engine_type(self)",
        "snippet": "    def _engine_type(self):\n        # self.codes can have dtype int8, int16, int32 or int64, so we need\n        # to return the corresponding engine type (libindex.Int8Engine, etc.).\n        return {\n            np.int8: libindex.Int8Engine,\n            np.int16: libindex.Int16Engine,\n            np.int32: libindex.Int32Engine,\n            np.int64: libindex.Int64Engine,\n        }[self.codes.dtype.type]",
        "begin_line": 171,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__new__#186",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n\n        name = maybe_extract_name(name, data, cls)\n\n        if not is_categorical_dtype(data):\n            # don't allow scalars\n            # if data is None, then categories must be provided\n            if is_scalar(data):\n                if data is not None or categories is None:\n                    raise cls._scalar_data_error(data)\n                data = []\n\n        assert isinstance(dtype, CategoricalDtype), dtype\n        data = extract_array(data, extract_numpy=True)\n\n        if not isinstance(data, Categorical):\n            data = Categorical(data, dtype=dtype)\n        elif isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n            # we want to silently ignore dtype='category'\n            data = data._set_dtype(dtype)\n\n        data = data.copy() if copy else data\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 186,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._simple_new#239",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._simple_new(cls, values: Categorical, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: Categorical, name: Label = None):\n        assert isinstance(values, Categorical), type(values)\n        result = object.__new__(cls)\n\n        result._data = values\n        result.name = name\n        result._cache = {}\n\n        result._reset_identity()\n        result._no_setting_name = False\n        return result",
        "begin_line": 239,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._isnan#392",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\" return if each value is nan\"\"\"\n        return self._data.codes == -1",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._engine#402",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # we are going to look things up with the codes themselves.\n        # To avoid a reference cycle, bind `codes` to a local variable, so\n        # `self` is not passed into the lambda.\n        codes = self.codes\n        return self._engine_type(lambda: codes, len(self))",
        "begin_line": 402,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.methods.f#94",
        "src_path": "pandas/core/ops/methods.py",
        "class_name": "pandas.core.ops.methods",
        "signature": "pandas.core.ops.methods.f(self, other)",
        "snippet": "        def f(self, other):\n            result = method(self, other)\n            # Delete cacher\n            self._reset_cacher()\n            # this makes sure that we are aligned like the input\n            # we are updating inplace so we want to ignore is_copy\n            self._update_inplace(\n                result.reindex_like(self, copy=False), verify_is_copy=False\n            )\n\n            return self",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.consensus_name_attr#69",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.consensus_name_attr(objs)",
        "snippet": "def consensus_name_attr(objs):\n    name = objs[0].name\n    for obj in objs[1:]:\n        try:\n            if obj.name != name:\n                name = None\n        except ValueError:\n            name = None\n    return name",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#95",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n        Whether `key` is a valid boolean indexer.\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n\n    See Also\n    --------\n    check_array_indexer : Check that `key` is a valid array to index,\n        and convert to an ndarray.\n    \"\"\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(key)\n\n            if not lib.is_bool_array(key):\n                na_msg = \"Cannot mask with non-boolean array containing NA / NaN values\"\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 95,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#147",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val.is_integer():\n        return int(val)\n    return val",
        "begin_line": 147,
        "end_line": 162,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.not_none#165",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.not_none(*args)",
        "snippet": "def not_none(*args):\n    \"\"\"\n    Returns a generator consisting of the arguments that are not None.\n    \"\"\"\n    return (arg for arg in args if arg is not None)",
        "begin_line": 165,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.any_none#172",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 172,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.all_none#179",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 179,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.count_not_none#200",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args) -> int:\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 200,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#207",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values._values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 207,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014204545454545454,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#263",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable[T], T])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014407145944388418,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#272",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj) -> bool:\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 272,
        "end_line": 281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.is_full_slice#292",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_full_slice(obj, l)",
        "snippet": "def is_full_slice(obj, l) -> bool:\n    \"\"\"\n    We have a full length slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice) and obj.start == 0 and obj.stop == l and obj.step is None\n    )",
        "begin_line": 292,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#318",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 318,
        "end_line": 332,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.common.convert_to_list_like#482",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.convert_to_list_like(values: Union[Scalar, Iterable, AnyArrayLike])",
        "snippet": "def convert_to_list_like(\n    values: Union[Scalar, Iterable, AnyArrayLike]\n) -> Union[List, AnyArrayLike]:\n    \"\"\"\n    Convert list-like or scalar input to list-like. List, numpy and pandas array-like\n    inputs are returned unmodified whereas others are converted to list.\n    \"\"\"\n    if isinstance(values, (list, np.ndarray, ABCIndex, ABCSeries, ABCExtensionArray)):\n        return values\n    elif isinstance(values, abc.Iterable) and not isinstance(values, str):\n        return list(values)\n\n    return [values]",
        "begin_line": 482,
        "end_line": 494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001485222040695084,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.util.hashing._combine_hash_arrays#27",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._combine_hash_arrays(arrays, num_items: int)",
        "snippet": "def _combine_hash_arrays(arrays, num_items: int):\n    \"\"\"\n    Parameters\n    ----------\n    arrays : generator\n    num_items : int\n\n    Should be the same as CPython's tupleobject.c\n    \"\"\"\n    try:\n        first = next(arrays)\n    except StopIteration:\n        return np.array([], dtype=np.uint64)\n\n    arrays = itertools.chain([first], arrays)\n\n    mult = np.uint64(1000003)\n    out = np.zeros_like(first) + np.uint64(0x345678)\n    for i, a in enumerate(arrays):\n        inverse_i = num_items - i\n        out ^= a\n        out *= mult\n        mult += np.uint64(82520 + inverse_i + inverse_i)\n    assert i + 1 == num_items, \"Fed in wrong num_items\"\n    out += np.uint64(97531)\n    return out",
        "begin_line": 27,
        "end_line": 52,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_array#223",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_array(vals, encoding: str='utf8', hash_key: str=_default_hash_key, categorize: bool=True)",
        "snippet": "def hash_array(\n    vals,\n    encoding: str = \"utf8\",\n    hash_key: str = _default_hash_key,\n    categorize: bool = True,\n):\n    \"\"\"\n    Given a 1d array, return an array of deterministic integers.\n\n    Parameters\n    ----------\n    vals : ndarray, Categorical\n    encoding : str, default 'utf8'\n        Encoding for data & key when strings.\n    hash_key : str, default _default_hash_key\n        Hash_key for string key to encode.\n    categorize : bool, default True\n        Whether to first categorize object arrays before hashing. This is more\n        efficient when the array contains duplicate values.\n\n    Returns\n    -------\n    1d uint64 numpy array of hash values, same length as the vals\n    \"\"\"\n    if not hasattr(vals, \"dtype\"):\n        raise TypeError(\"must pass a ndarray-like\")\n    dtype = vals.dtype\n\n    # For categoricals, we hash the categories, then remap the codes to the\n    # hash values. (This check is above the complex check so that we don't ask\n    # numpy if categorical is a subdtype of complex, as it will choke).\n    if is_categorical_dtype(dtype):\n        return _hash_categorical(vals, encoding, hash_key)\n    elif is_extension_array_dtype(dtype):\n        vals, _ = vals._values_for_factorize()\n        dtype = vals.dtype\n\n    # we'll be working with everything as 64-bit values, so handle this\n    # 128-bit value early\n    if np.issubdtype(dtype, np.complex128):\n        return hash_array(np.real(vals)) + 23 * hash_array(np.imag(vals))\n\n    # First, turn whatever array this is into unsigned 64-bit ints, if we can\n    # manage it.\n    elif isinstance(dtype, np.bool):\n        vals = vals.astype(\"u8\")\n    elif issubclass(dtype.type, (np.datetime64, np.timedelta64)):\n        vals = vals.view(\"i8\").astype(\"u8\", copy=False)\n    elif issubclass(dtype.type, np.number) and dtype.itemsize <= 8:\n        vals = vals.view(f\"u{vals.dtype.itemsize}\").astype(\"u8\")\n    else:\n        # With repeated values, its MUCH faster to categorize object dtypes,\n        # then hash and rename categories. We allow skipping the categorization\n        # when the values are known/likely to be unique.\n        if categorize:\n            from pandas import factorize, Categorical, Index\n\n            codes, categories = factorize(vals, sort=False)\n            cat = Categorical(codes, Index(categories), ordered=False, fastpath=True)\n            return _hash_categorical(cat, encoding, hash_key)\n\n        try:\n            vals = hashing.hash_object_array(vals, hash_key, encoding)\n        except TypeError:\n            # we have mixed types\n            vals = hashing.hash_object_array(\n                vals.astype(str).astype(object), hash_key, encoding\n            )\n\n    # Then, redistribute these 64-bit ints within the space of 64-bit ints\n    vals ^= vals >> 30\n    vals *= np.uint64(0xBF58476D1CE4E5B9)\n    vals ^= vals >> 27\n    vals *= np.uint64(0x94D049BB133111EB)\n    vals ^= vals >> 31\n    return vals",
        "begin_line": 223,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#88",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, start, cls)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            start = start._range\n            return cls._simple_new(start, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, name=name)",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.from_range#119",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.from_range(cls, data: range, name=None, dtype=None)",
        "snippet": "    def from_range(cls, data: range, name=None, dtype=None) -> \"RangeIndex\":\n        \"\"\"\n        Create RangeIndex from a range object.\n\n        Returns\n        -------\n        RangeIndex\n        \"\"\"\n        if not isinstance(data, range):\n            raise TypeError(\n                f\"{cls.__name__}(...) must be called with object coercible to a \"\n                f\"range, {repr(data)} was passed\"\n            )\n\n        cls._validate_dtype(dtype)\n        return cls._simple_new(data, name=name)",
        "begin_line": 119,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#137",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values: range, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: range, name: Label = None) -> \"RangeIndex\":\n        result = object.__new__(cls)\n\n        assert isinstance(values, range)\n\n        result._range = values\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_unique#321",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\" return if the index has unique values \"\"\"\n        return True",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_loc#346",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None and tolerance is None:\n            if is_integer(key) or (is_float(key) and key.is_integer()):\n                new_key = int(key)\n                try:\n                    return self._range.index(new_key)\n                except ValueError as err:\n                    raise KeyError(key) from err\n            raise KeyError(key)\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 346,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._shallow_copy#390",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        name = self.name if name is no_default else name\n\n        if values is None:\n            result = self._simple_new(self._range, name=name)\n            result._cache = self._cache.copy()\n            return result\n        else:\n            return Int64Index._simple_new(values, name=name)",
        "begin_line": 390,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#448",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._concat#630",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._concat(self, indexes, name)",
        "snippet": "    def _concat(self, indexes, name):\n        \"\"\"\n        Overriding parent method for the case of all RangeIndex instances.\n\n        When all members of \"indexes\" are of type RangeIndex: result will be\n        RangeIndex if possible, Int64Index otherwise. E.g.:\n        indexes = [RangeIndex(3), RangeIndex(3, 6)] -> RangeIndex(6)\n        indexes = [RangeIndex(3), RangeIndex(4, 6)] -> Int64Index([0,1,2,4,5])\n        \"\"\"\n        if not all(isinstance(x, RangeIndex) for x in indexes):\n            return super()._concat(indexes, name)\n\n        start = step = next_ = None\n\n        # Filter the empty indexes\n        non_empty_indexes = [obj for obj in indexes if len(obj)]\n\n        for obj in non_empty_indexes:\n            rng: range = obj._range\n\n            if start is None:\n                # This is set by the first non-empty index\n                start = rng.start\n                if step is None and len(rng) > 1:\n                    step = rng.step\n            elif step is None:\n                # First non-empty index had only one element\n                if rng.start == start:\n                    result = Int64Index(np.concatenate([x._values for x in indexes]))\n                    return result.rename(name)\n\n                step = rng.start - start\n\n            non_consecutive = (step != rng.step and len(rng) > 1) or (\n                next_ is not None and rng.start != next_\n            )\n            if non_consecutive:\n                result = Int64Index(np.concatenate([x._values for x in indexes]))\n                return result.rename(name)\n\n            if step is not None:\n                next_ = rng[-1] + step\n\n        if non_empty_indexes:\n            # Get the stop value from \"next\" or alternatively\n            # from the last non-empty index\n            stop = non_empty_indexes[-1].stop if next_ is None else next_\n            return RangeIndex(start, stop, step).rename(name)\n\n        # Here all \"indexes\" had 0 length, i.e. were empty.\n        # In this case return an empty range index.\n        return RangeIndex(0, 0).rename(name)",
        "begin_line": 630,
        "end_line": 681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#683",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 683,
        "end_line": 687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__getitem__#693",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Conserve RangeIndex type for scalar and slice keys.\n        \"\"\"\n        if isinstance(key, slice):\n            new_range = self._range[key]\n            return self._simple_new(new_range, name=self.name)\n        elif is_integer(key):\n            new_key = int(key)\n            try:\n                return self._range[new_key]\n            except IndexError as err:\n                raise IndexError(\n                    f\"index {key} is out of bounds for axis 0 with size {len(self)}\"\n                ) from err\n        elif is_scalar(key):\n            raise IndexError(\n                \"only integers, slices (`:`), \"\n                \"ellipsis (`...`), numpy.newaxis (`None`) \"\n                \"and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n        # fall back to Int64Index\n        return super().__getitem__(key)",
        "begin_line": 693,
        "end_line": 716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Union[Timestamp, Timedelta], end: Union[Timestamp, Timedelta], periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Union[Timestamp, Timedelta],\n    end: Union[Timestamp, Timedelta],\n    periods: int,\n    freq: DateOffset,\n):\n    \"\"\"\n    Generate a range of dates or timestamps with the spans between dates\n    described by the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timedelta, Timestamp or None\n        First point of produced date range.\n    end : Timedelta, Timestamp or None\n        Last point of produced date range.\n    periods : int\n        Number of periods in produced date range.\n    freq : Tick\n        Describes space between dates in produced date range.\n\n    Returns\n    -------\n    ndarray[np.int64] Representing nanoseconds.\n    \"\"\"\n    start = start.value if start is not None else None\n    end = end.value if end is not None else None\n    stride = freq.nanos\n\n    if periods is None:\n        b = start\n        # cannot just use e = Timestamp(end) + 1 because arange breaks when\n        # stride is too large, see GH10887\n        e = b + (end - b) // stride * stride + stride // 2 + 1\n    elif start is not None:\n        b = start\n        e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n    elif end is not None:\n        e = end + stride\n        b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n    else:\n        raise ValueError(\n            \"at least 'start' or 'end' should be specified if a 'period' is given.\"\n        )\n\n    with np.errstate(over=\"raise\"):\n        # If the range is sufficiently large, np.arange may overflow\n        #  and incorrectly return an empty array if not caught.\n        try:\n            values = np.arange(b, e, stride, dtype=np.int64)\n        except FloatingPointError:\n            xdr = [b]\n            while xdr[-1] != e:\n                xdr.append(xdr[-1] + stride)\n            values = np.array(xdr[:-1], dtype=np.int64)\n    return values",
        "begin_line": 15,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#73",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError as err:\n            raise OutOfBoundsDatetime(msg) from err\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 73,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#140",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n    )",
        "begin_line": 140,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__eq__#96",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Check whether 'other' is equal to self.\n\n        By default, 'other' is considered equal if either\n\n        * it's a string matching 'self.name'.\n        * it's an instance of this type and all of the\n          the attributes in ``self._metadata`` are equal between\n          `self` and `other`.\n\n        Parameters\n        ----------\n        other : Any\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n        if isinstance(other, type(self)):\n            return all(\n                getattr(self, attr) == getattr(other, attr) for attr in self._metadata\n            )\n        return False",
        "begin_line": 96,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__ne__#129",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__ne__(self, other: Any)",
        "snippet": "    def __ne__(self, other: Any) -> bool:\n        return not self.__eq__(other)",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.kind#156",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.kind(self)",
        "snippet": "    def kind(self) -> str:\n        \"\"\"\n        A character code (one of 'biufcmMOSUV'), default 'O'\n\n        This should match the NumPy dtype used when the array is\n        converted to an ndarray, which is probably 'O' for object if\n        the extension type cannot be represented as a built-in NumPy\n        type.\n\n        See Also\n        --------\n        numpy.dtype.kind\n        \"\"\"\n        return \"O\"",
        "begin_line": 156,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#202",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\n        ...             f\"Cannot construct a '{cls.__name__}' from '{string}'\"\n        ...         )\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        # error: Non-overlapping equality check (left operand type: \"str\", right\n        #  operand type: \"Callable[[ExtensionDtype], str]\")  [comparison-overlap]\n        assert isinstance(cls.name, str), (cls, type(cls.name))\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")\n        return cls()",
        "begin_line": 202,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#257",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        if isinstance(dtype, str):\n            try:\n                return cls.construct_from_string(dtype) is not None\n            except TypeError:\n                return False\n        return False",
        "begin_line": 257,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#86",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001359064963305246,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_to_dtype#114",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_to_dtype(result, dtype)",
        "snippet": "def maybe_downcast_to_dtype(result, dtype):\n    \"\"\"\n    try to cast to the specified dtype (e.g. convert back to bool/int\n    or could be an astype of float64->float32\n    \"\"\"\n    do_round = False\n\n    if is_scalar(result):\n        return result\n    elif isinstance(result, ABCDataFrame):\n        # occurs in pivot_table doctest\n        return result\n\n    if isinstance(dtype, str):\n        if dtype == \"infer\":\n            inferred_type = lib.infer_dtype(ensure_object(result), skipna=False)\n            if inferred_type == \"boolean\":\n                dtype = \"bool\"\n            elif inferred_type == \"integer\":\n                dtype = \"int64\"\n            elif inferred_type == \"datetime64\":\n                dtype = \"datetime64[ns]\"\n            elif inferred_type == \"timedelta64\":\n                dtype = \"timedelta64[ns]\"\n\n            # try to upcast here\n            elif inferred_type == \"floating\":\n                dtype = \"int64\"\n                if issubclass(result.dtype.type, np.number):\n                    do_round = True\n\n            else:\n                dtype = \"object\"\n\n        dtype = np.dtype(dtype)\n\n    converted = maybe_downcast_numeric(result, dtype, do_round)\n    if converted is not result:\n        return converted\n\n    # a datetimelike\n    # GH12821, iNaT is casted to float\n    if dtype.kind in [\"M\", \"m\"] and result.dtype.kind in [\"i\", \"f\"]:\n        if hasattr(dtype, \"tz\"):\n            # not a numpy dtype\n            if dtype.tz:\n                # convert to datetime and change timezone\n                from pandas import to_datetime\n\n                result = to_datetime(result).tz_localize(\"utc\")\n                result = result.tz_convert(dtype.tz)\n        else:\n            result = result.astype(dtype)\n\n    elif dtype.type is Period:\n        # TODO(DatetimeArray): merge with previous elif\n        from pandas.core.arrays import PeriodArray\n\n        try:\n            return PeriodArray(result, freq=dtype.freq)\n        except TypeError:\n            # e.g. TypeError: int() argument must be a string, a\n            #  bytes-like object or a number, not 'Period\n            pass\n\n    return result",
        "begin_line": 114,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_numeric#182",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_numeric(result, dtype, do_round: bool=False)",
        "snippet": "def maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes.\n\n    Parameters\n    ----------\n    result : ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    do_round : bool\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        # e.g. SparseDtype has no itemsize attr\n        return result\n\n    if isinstance(result, list):\n        # reached via groupby.agg._ohlc; really this should be handled earlier\n        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()\n        return x\n\n    if dtype.kind == result.dtype.kind:\n        # don't allow upcasts here (except if empty)\n        if result.dtype.itemsize <= dtype.itemsize and result.size:\n            return result\n\n    if is_bool_dtype(dtype) or is_integer_dtype(dtype):\n\n        if not result.size:\n            # if we don't have any elements, just astype it\n            return trans(result).astype(dtype)\n\n        # do a test on the first element, if it fails then we are done\n        r = result.ravel()\n        arr = np.array([r[0]])\n\n        if isna(arr).any():\n            # if we have any nulls, then we are done\n            return result\n\n        elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)):\n            # a comparable, e.g. a Decimal may slip in here\n            return result\n\n        if (\n            issubclass(result.dtype.type, (np.object_, np.number))\n            and notna(result).all()\n        ):\n            new_result = trans(result).astype(dtype)\n            if new_result.dtype.kind == \"O\" or result.dtype.kind == \"O\":\n                # np.allclose may raise TypeError on object-dtype\n                if (new_result == result).all():\n                    return new_result\n            else:\n                if np.allclose(new_result, result, rtol=0):\n                    return new_result\n\n    elif (\n        issubclass(dtype.type, np.floating)\n        and not is_bool_dtype(result.dtype)\n        and not is_string_dtype(result.dtype)\n    ):\n        return result.astype(dtype)\n\n    return result",
        "begin_line": 182,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.trans#204",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.trans(x)",
        "snippet": "    def trans(x):\n        if do_round:\n            return x.round()\n        return x",
        "begin_line": 204,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast_putmask#351",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other)",
        "snippet": "def maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result.\n\n    The result is replaced with the first N elements of other,\n    where N is the number of True values in mask.\n    If the length of other is shorter than N, other will be repeated.\n\n    Parameters\n    ----------\n    result : ndarray\n        The destination array. This will be mutated in-place if no upcasting is\n        necessary.\n    mask : boolean ndarray\n    other : scalar\n        The source value.\n\n    Returns\n    -------\n    result : ndarray\n    changed : bool\n        Set to true if the result array was upcasted.\n\n    Examples\n    --------\n    >>> arr = np.arange(1, 6)\n    >>> mask = np.array([False, True, False, True, True])\n    >>> result, _ = maybe_upcast_putmask(arr, mask, False)\n    >>> result\n    array([1, 0, 3, 0, 0])\n    \"\"\"\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"The result input must be a ndarray.\")\n    if not is_scalar(other):\n        # We _could_ support non-scalar other, but until we have a compelling\n        #  use case, we assume away the possibility.\n        raise ValueError(\"other must be a scalar\")\n\n    if mask.any():\n        # Two conversions for date-like dtypes that can't be done automatically\n        # in np.place:\n        #   NaN -> NaT\n        #   integer or integer array -> date-like array\n        if result.dtype.kind in [\"m\", \"M\"]:\n            if is_scalar(other):\n                if isna(other):\n                    other = result.dtype.type(\"nat\")\n                elif is_integer(other):\n                    other = np.array(other, dtype=result.dtype)\n            elif is_integer_dtype(other):\n                other = np.array(other, dtype=result.dtype)\n\n        def changeit():\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True\n\n        # we want to decide whether place will work\n        # if we have nans in the False portion of our mask then we need to\n        # upcast (possibly), otherwise we DON't want to upcast (e.g. if we\n        # have values, say integers, in the success portion then it's ok to not\n        # upcast)\n        new_dtype, _ = maybe_promote(result.dtype, other)\n        if new_dtype != result.dtype:\n\n            # we have a scalar or len 0 ndarray\n            # and its nan and we are changing some values\n            if isna(other):\n                return changeit()\n\n        try:\n            np.place(result, mask, other)\n        except TypeError:\n            # e.g. int-dtype result and float-dtype other\n            return changeit()\n\n    return result, False",
        "begin_line": 351,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.changeit#403",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.changeit()",
        "snippet": "        def changeit():\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True",
        "begin_line": 403,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#433",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n\n    Parameters\n    ----------\n    dtype : np.dtype or ExtensionDtype\n    fill_value : scalar, default np.nan\n\n    Returns\n    -------\n    dtype\n        Upcasted from dtype argument if necessary.\n    fill_value\n        Upcasted from fill_value argument if necessary.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n        elif not isinstance(fill_value, datetime):\n            dtype = np.dtype(np.object_)\n        elif fill_value.tzinfo is None:\n            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 433,
        "end_line": 586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#589",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 589,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#634",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False) -> Tuple[DtypeObj, Any]:\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.dtype(object)\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.dtype(object)\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.dtype(object), val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.dtype(np.bool_)\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = np.dtype(type(val))\n        else:\n            dtype = np.dtype(np.int64)\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = np.dtype(type(val))\n        else:\n            dtype = np.dtype(np.float64)\n\n    elif is_complex(val):\n        dtype = np.dtype(np.complex_)\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
        "begin_line": 634,
        "end_line": 708,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_dtype_type#766",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_dtype_type(element)",
        "snippet": "def maybe_infer_dtype_type(element):\n    \"\"\"\n    Try to infer an object's dtype, for use in arithmetic ops.\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    dtype('int64')\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
        "begin_line": 766,
        "end_line": 797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast#800",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool=False)",
        "snippet": "def maybe_upcast(values, fill_value=np.nan, dtype=None, copy: bool = False):\n    \"\"\"\n    Provide explicit type promotion and coercion.\n\n    Parameters\n    ----------\n    values : ndarray or ExtensionArray\n        The array that we want to maybe upcast.\n    fill_value : what we want to fill with\n    dtype : if None, then use the dtype of the values, else coerce to this type\n    copy : bool, default True\n        If True always make a copy even if no upcast is required.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(values.dtype):\n        # We allow arbitrary fill values for object dtype\n        raise ValueError(\"fill_value must be a scalar\")\n\n    if is_extension_array_dtype(values):\n        if copy:\n            values = values.copy()\n    else:\n        if dtype is None:\n            dtype = values.dtype\n        new_dtype, fill_value = maybe_promote(dtype, fill_value)\n        if new_dtype != values.dtype:\n            values = values.astype(new_dtype)\n        elif copy:\n            values = values.copy()\n\n    return values, fill_value",
        "begin_line": 800,
        "end_line": 829,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#842",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 842,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014705882352941175,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#1171",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 1171,
        "end_line": 1182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1185",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1185,
        "end_line": 1290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1228",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1228,
        "end_line": 1251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1253",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)",
        "begin_line": 1253,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1293",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\"\n    try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, DT64NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = DT64NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, TD64NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = TD64NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value.dtype)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(\n            getattr(value, \"dtype\", None)\n        ) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != DT64NS_DTYPE:\n                    value = value.astype(DT64NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != DT64NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != TD64NS_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1293,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.find_common_type#1429",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.find_common_type(types: List[DtypeObj])",
        "snippet": "def find_common_type(types: List[DtypeObj]) -> DtypeObj:\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    # get unique types (dict.fromkeys is used as order-preserving set())\n    types = list(dict.fromkeys(types).keys())\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        for t in types:\n            if isinstance(t, ExtensionDtype):\n                res = t._get_common_dtype(types)\n                if res is not None:\n                    return res\n        return np.dtype(\"object\")\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
        "begin_line": 1429,
        "end_line": 1481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1511",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length: int, dtype: DtypeObj)",
        "snippet": "def construct_1d_arraylike_from_scalar(\n    value, length: int, dtype: DtypeObj\n) -> ArrayLike:\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype or np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1511,
        "end_line": 1548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1551",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values) -> np.ndarray:\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1551,
        "end_line": 1573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001318217769575534,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1576",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype: Optional[DtypeObj]=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(\n    values, dtype: Optional[DtypeObj] = None, copy: bool = False\n) -> np.ndarray:\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1576,
        "end_line": 1616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1619",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    ndarray\n        Array of integer or unsigned integer dtype.\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> pd.Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> pd.Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError as err:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            f\"casted to the dtype {dtype}\"\n        ) from err\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1619,
        "end_line": 1686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.convert_scalar_for_putitemlike#1689",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.convert_scalar_for_putitemlike(scalar, dtype: np.dtype)",
        "snippet": "def convert_scalar_for_putitemlike(scalar, dtype: np.dtype):\n    \"\"\"\n    Convert datetimelike scalar if we are setting into a datetime64\n    or timedelta64 ndarray.\n\n    Parameters\n    ----------\n    scalar : scalar\n    dtype : np.dtype\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if dtype.kind == \"m\":\n        if isinstance(scalar, (timedelta, np.timedelta64)):\n            # We have to cast after asm8 in case we have NaT\n            return Timedelta(scalar).asm8.view(\"timedelta64[ns]\")\n        elif scalar is None or scalar is NaT or (is_float(scalar) and np.isnan(scalar)):\n            return np.timedelta64(\"NaT\", \"ns\")\n    if dtype.kind == \"M\":\n        if isinstance(scalar, (date, np.datetime64)):\n            # Note: we include date, not just datetime\n            return Timestamp(scalar).to_datetime64()\n        elif scalar is None or scalar is NaT or (is_float(scalar) and np.isnan(scalar)):\n            return np.datetime64(\"NaT\", \"ns\")\n    else:\n        validate_numeric_casting(dtype, scalar)\n    return scalar",
        "begin_line": 1689,
        "end_line": 1717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.cast.validate_numeric_casting#1720",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.validate_numeric_casting(dtype: np.dtype, value)",
        "snippet": "def validate_numeric_casting(dtype: np.dtype, value):\n    \"\"\"\n    Check that we can losslessly insert the given value into an array\n    with the given dtype.\n\n    Parameters\n    ----------\n    dtype : np.dtype\n    value : scalar\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    if issubclass(dtype.type, (np.integer, np.bool_)):\n        if is_float(value) and np.isnan(value):\n            raise ValueError(\"Cannot assign nan to integer series\")\n\n    if issubclass(dtype.type, (np.integer, np.floating, np.complex)) and not issubclass(\n        dtype.type, np.bool_\n    ):\n        if is_bool(value):\n            raise ValueError(\"Cannot assign bool to float/integer series\")",
        "begin_line": 1720,
        "end_line": 1742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#97",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 97,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#370",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 370,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_SERIES#390",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_SERIES(cls, op, special)",
        "snippet": "def _arith_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return left._construct_result(result, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 390,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#399",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        rvalues = extract_array(right, extract_numpy=True)\n        result = arithmetic_op(lvalues, rvalues, op, str_rep)\n\n        return left._construct_result(result, name=res_name)",
        "begin_line": 399,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#60",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype: Optional[DtypeObj]=None, verify_integrity: bool=True)",
        "snippet": "def arrays_to_mgr(\n    arrays,\n    arr_names,\n    index,\n    columns,\n    dtype: Optional[DtypeObj] = None,\n    verify_integrity: bool = True,\n):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    arr_names = ensure_index(arr_names)\n\n    if verify_integrity:\n        # figure out the index, if necessary\n        if index is None:\n            index = extract_index(arrays)\n        else:\n            index = ensure_index(index)\n\n        # don't force copy because getting jammed in an ndarray anyway\n        arrays = _homogenize(arrays, index, dtype)\n\n        columns = ensure_index(columns)\n    else:\n        columns = ensure_index(columns)\n        index = ensure_index(index)\n\n    # from BlockManager perspective\n    axes = [columns, index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 60,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#237",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data: Dict, index, columns, dtype: Optional[DtypeObj]=None)",
        "snippet": "def init_dict(data: Dict, index, columns, dtype: Optional[DtypeObj] = None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    arrays: Union[Sequence[Any], \"Series\"]\n\n    if columns is not None:\n        from pandas.core.series import Series  # noqa:F811\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or (\n                not is_extension_array_dtype(dtype)\n                and np.issubdtype(dtype, np.flexible)\n            ):\n                # GH#1783\n                nan_dtype = np.dtype(object)\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = list(data.keys())\n        columns = data_names = Index(keys)\n        arrays = [com.maybe_iterable_to_list(data[k]) for k in keys]\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 237,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#329",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype: Optional[DtypeObj])",
        "snippet": "def _homogenize(data, index, dtype: Optional[DtypeObj]):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex._values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 329,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#360",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data) -> Index:\n    \"\"\"\n    Try to infer an Index from the passed data, raise ValueError on failure.\n    \"\"\"\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = union_indexes(indexes)\n        elif have_dicts:\n            index = union_indexes(indexes, sort=False)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                assert index is not None  # for mypy\n                if lengths[0] != len(index):\n                    msg = (\n                        f\"array length {lengths[0]} does not match index \"\n                        f\"length {len(index)}\"\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 360,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction.to_arrays#498",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.to_arrays(data, columns, coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def to_arrays(\n    data, columns, coerce_float: bool = False, dtype: Optional[DtypeObj] = None\n):\n    \"\"\"\n    Return list of arrays, columns.\n    \"\"\"\n    if isinstance(data, ABCDataFrame):\n        if columns is not None:\n            arrays = [\n                data._ixs(i, axis=1).values\n                for i, col in enumerate(data.columns)\n                if col in columns\n            ]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], abc.Mapping):\n        return _list_of_dict_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], ABCSeries):\n        return _list_of_series_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = ibase.default_index(len(data))\n        return data, columns\n    elif (\n        isinstance(data, (np.ndarray, ABCSeries, Index))\n        and data.dtype.names is not None\n    ):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = [tuple(x) for x in data]\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)",
        "begin_line": 498,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction._list_to_arrays#551",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_to_arrays(data: List[Scalar], columns: Union[Index, List], coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _list_to_arrays(\n    data: List[Scalar],\n    columns: Union[Index, List],\n    coerce_float: bool = False,\n    dtype: Optional[DtypeObj] = None,\n) -> Tuple[List[Scalar], Union[Index, List[Axis]]]:\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    # gh-26429 do not raise user-facing AssertionError\n    try:\n        columns = _validate_or_indexify_columns(content, columns)\n        result = _convert_object_array(content, dtype=dtype, coerce_float=coerce_float)\n    except AssertionError as e:\n        raise ValueError(e) from e\n    return result, columns",
        "begin_line": 551,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction._validate_or_indexify_columns#651",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._validate_or_indexify_columns(content: List, columns: Optional[Union[Index, List]])",
        "snippet": "def _validate_or_indexify_columns(\n    content: List, columns: Optional[Union[Index, List]]\n) -> Union[Index, List[Axis]]:\n    \"\"\"\n    If columns is None, make numbers as column names; Otherwise, validate that\n    columns have valid length.\n\n    Parameters\n    ----------\n    content: list of data\n    columns: Iterable or None\n\n    Returns\n    -------\n    columns: If columns is Iterable, return as is; If columns is None, assign\n    positional column index value as columns.\n\n    Raises\n    ------\n    1. AssertionError when content is not composed of list of lists, and if\n        length of columns is not equal to length of content.\n    2. ValueError when content is list of lists, but length of each sub-list\n        is not equal\n    3. ValueError when content is list of lists, but length of sub-list is\n        not equal to length of content\n    \"\"\"\n    if columns is None:\n        columns = ibase.default_index(len(content))\n    else:\n\n        # Add mask for data which is composed of list of lists\n        is_mi_list = isinstance(columns, list) and all(\n            isinstance(col, list) for col in columns\n        )\n\n        if not is_mi_list and len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError(\n                f\"{len(columns)} columns passed, passed data had \"\n                f\"{len(content)} columns\"\n            )\n        elif is_mi_list:\n\n            # check if nested list column, length of each sub-list should be equal\n            if len({len(col) for col in columns}) > 1:\n                raise ValueError(\n                    \"Length of columns passed for MultiIndex columns is different\"\n                )\n\n            # if columns is not empty and length of sublist is not equal to content\n            elif columns and len(columns[0]) != len(content):\n                raise ValueError(\n                    f\"{len(columns[0])} columns passed, passed data had \"\n                    f\"{len(content)} columns\"\n                )\n    return columns",
        "begin_line": 651,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction._convert_object_array#709",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._convert_object_array(content: List[Scalar], coerce_float: bool=False, dtype: Optional[DtypeObj]=None)",
        "snippet": "def _convert_object_array(\n    content: List[Scalar], coerce_float: bool = False, dtype: Optional[DtypeObj] = None\n) -> List[Scalar]:\n    \"\"\"\n    Internal function ot convert object array.\n\n    Parameters\n    ----------\n    content: list of processed data records\n    coerce_float: bool, to coerce floats or not, default is False\n    dtype: np.dtype, default is None\n\n    Returns\n    -------\n    arrays: casted content if not object dtype, otherwise return as is in list.\n    \"\"\"\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != np.dtype(\"O\"):\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays",
        "begin_line": 709,
        "end_line": 734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#726",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(arr)",
        "snippet": "    def convert(arr):\n        if dtype != np.dtype(\"O\"):\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr",
        "begin_line": 726,
        "end_line": 730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#52",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 52,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.is_scalar_indexer#68",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_scalar_indexer(indexer, ndim: int)",
        "snippet": "def is_scalar_indexer(indexer, ndim: int) -> bool:\n    \"\"\"\n    Return True if we are all scalar indexers.\n\n    Parameters\n    ----------\n    indexer : object\n    ndim : int\n        Number of dimensions in the object being indexed.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if isinstance(indexer, tuple):\n        if len(indexer) == ndim:\n            return all(\n                is_integer(x) or (isinstance(x, np.ndarray) and x.ndim == len(x) == 1)\n                for x in indexer\n            )\n    return False",
        "begin_line": 68,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.is_empty_indexer#91",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_empty_indexer(indexer, arr_value: np.ndarray)",
        "snippet": "def is_empty_indexer(indexer, arr_value: np.ndarray) -> bool:\n    \"\"\"\n    Check if we have an empty indexer.\n\n    Parameters\n    ----------\n    indexer : object\n    arr_value : np.ndarray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if is_list_like(indexer) and not len(indexer):\n        return True\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n        return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 91,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.check_setitem_lengths#117",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_setitem_lengths(indexer, value, values)",
        "snippet": "def check_setitem_lengths(indexer, value, values) -> None:\n    \"\"\"\n    Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        Key for the setitem.\n    value : array-like\n        Value for the setitem.\n    values : array-like\n        Values being set into.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't match.\n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (\n                isinstance(indexer, np.ndarray)\n                and indexer.dtype == np.bool_\n                and len(indexer[indexer]) == len(value)\n            ):\n                raise ValueError(\n                    \"cannot set using a list-like indexer \"\n                    \"with a different length than the value\"\n                )\n\n    elif isinstance(indexer, slice):\n        # slice\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\n                    \"cannot set using a slice indexer with a \"\n                    \"different length than the value\"\n                )",
        "begin_line": 117,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.length_of_indexer#258",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.length_of_indexer(indexer, target=None)",
        "snippet": "def length_of_indexer(indexer, target=None) -> int:\n    \"\"\"\n    Return the expected length of target[indexer]\n\n    Returns\n    -------\n    int\n    \"\"\"\n    if target is not None and isinstance(indexer, slice):\n        target_len = len(target)\n        start = indexer.start\n        stop = indexer.stop\n        step = indexer.step\n        if start is None:\n            start = 0\n        elif start < 0:\n            start += target_len\n        if stop is None or stop > target_len:\n            stop = target_len\n        elif stop < 0:\n            stop += target_len\n        if step is None:\n            step = 1\n        elif step < 0:\n            start, stop = stop + 1, start + 1\n            step = -step\n        return (stop - start + step - 1) // step\n    elif isinstance(indexer, (ABCSeries, ABCIndexClass, np.ndarray, list)):\n        if isinstance(indexer, list):\n            indexer = np.array(indexer)\n\n        if indexer.dtype == bool:\n            # GH#25774\n            return indexer.sum()\n        return len(indexer)\n    elif not is_list_like_indexer(indexer):\n        return 1\n    raise AssertionError(\"cannot find the length of the indexer\")",
        "begin_line": 258,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.deprecate_ndim_indexing#298",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.deprecate_ndim_indexing(result)",
        "snippet": "def deprecate_ndim_indexing(result):\n    \"\"\"\n    Helper function to raise the deprecation warning for multi-dimensional\n    indexing on 1D Series/Index.\n\n    GH#27125 indexer like idx[:, None] expands dim, but we cannot do that\n    and keep an index, so we currently return ndarray, which is deprecated\n    (Deprecation GH#30588).\n    \"\"\"\n    if np.ndim(result) > 1:\n        warnings.warn(\n            \"Support for multi-dimensional indexing (e.g. `index[:, None]`) \"\n            \"on an Index is deprecated and will be removed in a future \"\n            \"version.  Convert to a numpy array before indexing instead.\",\n            DeprecationWarning,\n            stacklevel=3,\n        )",
        "begin_line": 298,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexers.check_array_indexer#348",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_array_indexer(array: AnyArrayLike, indexer: Any)",
        "snippet": "def check_array_indexer(array: AnyArrayLike, indexer: Any) -> Any:\n    \"\"\"\n    Check if `indexer` is a valid array indexer for `array`.\n\n    For a boolean mask, `array` and `indexer` are checked to have the same\n    length. The dtype is validated, and if it is an integer or boolean\n    ExtensionArray, it is checked if there are missing values present, and\n    it is converted to the appropriate numpy array. Other dtypes will raise\n    an error.\n\n    Non-array indexers (integer, slice, Ellipsis, tuples, ..) are passed\n    through as is.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    array : array-like\n        The array that is being indexed (only used for the length).\n    indexer : array-like or list-like\n        The array-like that's used to index. List-like input that is not yet\n        a numpy array or an ExtensionArray is converted to one. Other input\n        types are passed through as is.\n\n    Returns\n    -------\n    numpy.ndarray\n        The validated indexer as a numpy array that can be used to index.\n\n    Raises\n    ------\n    IndexError\n        When the lengths don't match.\n    ValueError\n        When `indexer` cannot be converted to a numpy ndarray to index\n        (e.g. presence of missing values).\n\n    See Also\n    --------\n    api.types.is_bool_dtype : Check if `key` is of boolean dtype.\n\n    Examples\n    --------\n    When checking a boolean mask, a boolean ndarray is returned when the\n    arguments are all valid.\n\n    >>> mask = pd.array([True, False])\n    >>> arr = pd.array([1, 2])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    An IndexError is raised when the lengths don't match.\n\n    >>> mask = pd.array([True, False, True])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    IndexError: Boolean index has wrong length: 3 instead of 2.\n\n    NA values in a boolean array are treated as False.\n\n    >>> mask = pd.array([True, pd.NA])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    A numpy boolean mask will get passed through (if the length is correct):\n\n    >>> mask = np.array([True, False])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    Similarly for integer indexers, an integer ndarray is returned when it is\n    a valid indexer, otherwise an error is  (for integer indexers, a matching\n    length is not required):\n\n    >>> indexer = pd.array([0, 2], dtype=\"Int64\")\n    >>> arr = pd.array([1, 2, 3])\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    array([0, 2])\n\n    >>> indexer = pd.array([0, pd.NA], dtype=\"Int64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot index with an integer indexer containing NA values\n\n    For non-integer/boolean dtypes, an appropriate error is raised:\n\n    >>> indexer = np.array([0., 2.], dtype=\"float64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    IndexError: arrays used as indices must be of integer or boolean type\n    \"\"\"\n    from pandas.core.construction import array as pd_array\n\n    # whatever is not an array-like is returned as-is (possible valid array\n    # indexers that are not array-like: integer, slice, Ellipsis, None)\n    # In this context, tuples are not considered as array-like, as they have\n    # a specific meaning in indexing (multi-dimensional indexing)\n    if is_list_like(indexer):\n        if isinstance(indexer, tuple):\n            return indexer\n    else:\n        return indexer\n\n    # convert list-likes to array\n    if not is_array_like(indexer):\n        indexer = pd_array(indexer)\n        if len(indexer) == 0:\n            # empty list is converted to float array by pd.array\n            indexer = np.array([], dtype=np.intp)\n\n    dtype = indexer.dtype\n    if is_bool_dtype(dtype):\n        if is_extension_array_dtype(dtype):\n            indexer = indexer.to_numpy(dtype=bool, na_value=False)\n        else:\n            indexer = np.asarray(indexer, dtype=bool)\n\n        # GH26658\n        if len(indexer) != len(array):\n            raise IndexError(\n                f\"Boolean index has wrong length: \"\n                f\"{len(indexer)} instead of {len(array)}\"\n            )\n    elif is_integer_dtype(dtype):\n        try:\n            indexer = np.asarray(indexer, dtype=np.intp)\n        except ValueError as err:\n            raise ValueError(\n                \"Cannot index with an integer indexer containing NA values\"\n            ) from err\n    else:\n        raise IndexError(\"arrays used as indices must be of integer or boolean type\")\n\n    return indexer",
        "begin_line": 348,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.api.union_indexes#161",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.union_indexes(indexes, sort=True)",
        "snippet": "def union_indexes(indexes, sort=True) -> Index:\n    \"\"\"\n    Return the union of indexes.\n\n    The behavior of sort and names is not consistent.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if len(indexes) == 0:\n        raise AssertionError(\"Must have at least 1 Index to union\")\n    if len(indexes) == 1:\n        result = indexes[0]\n        if isinstance(result, list):\n            result = Index(sorted(result))\n        return result\n\n    indexes, kind = _sanitize_and_check(indexes)\n\n    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))\n\n    if kind == \"special\":\n        result = indexes[0]\n\n        if hasattr(result, \"union_many\"):\n            # DatetimeIndex\n            return result.union_many(indexes[1:])\n        else:\n            for other in indexes[1:]:\n                result = result.union(other)\n            return result\n    elif kind == \"array\":\n        index = indexes[0]\n        for other in indexes[1:]:\n            if not index.equals(other):\n                return _unique_indices(indexes)\n\n        name = get_consensus_names(indexes)[0]\n        if name != index.name:\n            index = index._shallow_copy(name=name)\n        return index\n    else:  # kind='list'\n        return _unique_indices(indexes)",
        "begin_line": 161,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.api._unique_indices#187",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._unique_indices(inds)",
        "snippet": "    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))",
        "begin_line": 187,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.api.conv#202",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.conv(i)",
        "snippet": "        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.api._sanitize_and_check#233",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._sanitize_and_check(indexes)",
        "snippet": "def _sanitize_and_check(indexes):\n    \"\"\"\n    Verify the type of indexes and convert lists to Index.\n\n    Cases:\n\n    - [list, list, ...]: Return ([list, list, ...], 'list')\n    - [list, Index, ...]: Return _sanitize_and_check([Index, Index, ...])\n        Lists are sorted and converted to Index.\n    - [Index, Index, ...]: Return ([Index, Index, ...], TYPE)\n        TYPE = 'special' if at least one special type, 'array' otherwise.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n\n    Returns\n    -------\n    sanitized_indexes : list of Index or list objects\n    type : {'list', 'array', 'special'}\n    \"\"\"\n    kinds = list({type(index) for index in indexes})\n\n    if list in kinds:\n        if len(kinds) > 1:\n            indexes = [\n                Index(list(x)) if not isinstance(x, Index) else x for x in indexes\n            ]\n            kinds.remove(list)\n        else:\n            return indexes, \"list\"\n\n    if len(kinds) > 1 or Index not in kinds:\n        return indexes, \"special\"\n    else:\n        return indexes, \"array\"",
        "begin_line": 233,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#197",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        if (\n            isinstance(data, SingleBlockManager)\n            and index is None\n            and dtype is None\n            and copy is False\n        ):\n            # GH#33357 called with just the SingleBlockManager\n            NDFrame.__init__(self, data)\n            self.name = name\n            return\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager.from_array(data, index)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            name = ibase.maybe_extract_name(name, data, type(self))\n\n            if is_empty_data(data) and dtype is None:\n                # gh-17261\n                warnings.warn(\n                    \"The default dtype for empty Series will be 'object' instead \"\n                    \"of 'float64' in a future version. Specify a dtype explicitly \"\n                    \"to silence this warning.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                # uncomment the line below when removing the DeprecationWarning\n                # dtype = np.dtype(object)\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # GH#24096 we need to ensure the index remains immutable\n                    data = data._values.copy()\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                if len(data.dtype):\n                    # GH#13296 we are dealing with a compound dtype, which\n                    #  should be treated as 2D\n                    raise ValueError(\n                        \"Cannot construct a Series from an ndarray with \"\n                        \"compound dtype.  Use DataFrame instead.\"\n                    )\n            elif isinstance(data, Series):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                    copy = False\n                data = data._mgr\n            elif is_dict_like(data):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument. `copy` must be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            f\"Length of passed values is {len(data)}, \"\n                            f\"index implies {len(index)}.\"\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager.from_array(data, index)\n\n        generic.NDFrame.__init__(self, data)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 197,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#331",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_mgr\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n\n        # TODO: passing np.float64 to not break anything yet. See GH-17261\n        s = create_series_with_explicit_dtype(\n            values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n        )\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._mgr, s.index",
        "begin_line": 331,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#378",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Series\"]:\n        return Series",
        "begin_line": 378,
        "end_line": 379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#394",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis: int, labels, fastpath: bool=False)",
        "snippet": "    def _set_axis(self, axis: int, labels, fastpath: bool = False) -> None:\n        \"\"\"\n        Override generic, we want to set the _typ here.\n\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._mgr.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            # The ensure_index call above ensures we have an Index object\n            self._mgr.set_axis(axis, labels)",
        "begin_line": 394,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#424",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._mgr.dtype",
        "begin_line": 424,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014204545454545454,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.name#439",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Label:\n        \"\"\"\n        Return the name of the Series.\n\n        The name of a Series becomes its index or column name if it is used\n        to form a DataFrame. It is also used whenever displaying the Series\n        using the interpreter.\n\n        Returns\n        -------\n        label (hashable object)\n            The name of the Series, also the column name if part of a DataFrame.\n\n        See Also\n        --------\n        Series.rename : Sets the Series name when given a scalar input.\n        Index.name : Corresponding Index property.\n\n        Examples\n        --------\n        The Series name can be set initially when calling the constructor.\n\n        >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Numbers, dtype: int64\n        >>> s.name = \"Integers\"\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Integers, dtype: int64\n\n        The name of a Series within a DataFrame is its column name.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n        ...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n        >>> df\n           Odd Numbers  Even Numbers\n        0            1             2\n        1            3             4\n        2            5             6\n        >>> df[\"Even Numbers\"].name\n        'Even Numbers'\n        \"\"\"\n        return self._name",
        "begin_line": 439,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.name#489",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Label)",
        "snippet": "    def name(self, value: Label) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        object.__setattr__(self, \"_name\", value)",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._values#537",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data (defined by Block.interval_values).\n        This are the values as stored in the Block (ndarray or ExtensionArray\n        depending on the Block class), with datetime64[ns] and timedelta64[ns]\n        wrapped in ExtensionArrays to match Index._values behavior.\n\n        Differs from the public ``.values`` for certain data types, because of\n        historical backwards compatibility of the public attribute (e.g. period\n        returns object ndarray and datetimetz a datetime64[ns] ndarray for\n        ``.values`` while it returns an ExtensionArray for ``._values`` in those\n        cases).\n\n        Differs from ``.array`` in that this still returns the numpy array if\n        the Block is backed by a numpy array (except for datetime64 and\n        timedelta64 dtypes), while ``.array`` ensures to always return an\n        ExtensionArray.\n\n        Overview:\n\n        dtype       | values        | _values       | array         |\n        ----------- | ------------- | ------------- | ------------- |\n        Numeric     | ndarray       | ndarray       | PandasArray   |\n        Category    | Categorical   | Categorical   | Categorical   |\n        dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray |\n        td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] |\n        Period      | ndarray[obj]  | PeriodArray   | PeriodArray   |\n        Nullable    | EA            | EA            | EA            |\n\n        \"\"\"\n        return self._mgr.internal_values()",
        "begin_line": 537,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.array#572",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        return self._mgr._block.array_values()",
        "begin_line": 572,
        "end_line": 573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#591",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._mgr)",
        "begin_line": 591,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.axes#807",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list of the row axis labels.\n        \"\"\"\n        return [self.index]",
        "begin_line": 807,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._ixs#845",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n        return self._values[i]",
        "begin_line": 845,
        "end_line": 857,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#864",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n\n        if key is Ellipsis:\n            return self\n\n        key_is_scalar = is_scalar(key)\n        if isinstance(key, (list, tuple)):\n            key = unpack_1tuple(key)\n\n        if is_integer(key) and self.index._should_fallback_to_positional():\n            return self._values[key]\n\n        elif key_is_scalar:\n            return self._get_value(key)\n\n        if (\n            isinstance(key, tuple)\n            and is_hashable(key)\n            and isinstance(self.index, MultiIndex)\n        ):\n            # Otherwise index.get_value will raise InvalidIndexError\n            try:\n                result = self._get_value(key)\n\n                return result\n\n            except KeyError:\n                # We still have the corner case where this tuple is a key\n                #  in the first level of our MultiIndex\n                return self._get_values_tuple(key)\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n            key = np.asarray(key, dtype=bool)\n            return self._get_values(key)\n\n        return self._get_with(key)",
        "begin_line": 864,
        "end_line": 904,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._get_value#974",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_value(self, label, takeable: bool=False)",
        "snippet": "    def _get_value(self, label, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed index label.\n\n        Parameters\n        ----------\n        label : object\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        scalar value\n        \"\"\"\n        if takeable:\n            return self._values[label]\n\n        # Similar to Index.get_value, but we do not fall back to positional\n        loc = self.index.get_loc(label)\n        return self.index._get_values_for_loc(self, loc, label)",
        "begin_line": 974,
        "end_line": 992,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.__setitem__#994",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n        if key is Ellipsis:\n            key = slice(None)\n\n        try:\n            self._set_with_engine(key, value)\n        except (KeyError, ValueError):\n            values = self._values\n            if is_integer(key) and not self.index.inferred_type == \"integer\":\n                # positional setter\n                values[key] = value\n            else:\n                # GH#12862 adding an new key to the Series\n                self.loc[key] = value\n\n        except TypeError as e:\n            if isinstance(key, tuple) and not isinstance(self.index, MultiIndex):\n                raise ValueError(\"Can only tuple-index with a MultiIndex\") from e\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                key = np.asarray(key, dtype=bool)\n                try:\n                    self._where(~key, value, inplace=True)\n                except InvalidIndexError:\n                    self.iloc[key] = value\n                return\n\n            else:\n                self._set_with(key, value)\n\n        if cacher_needs_updating:\n            self._maybe_update_cacher()",
        "begin_line": 994,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._set_with_engine#1031",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with_engine(self, key, value)",
        "snippet": "    def _set_with_engine(self, key, value):\n        # fails with AttributeError for IntervalIndex\n        loc = self.index._engine.get_loc(key)\n        validate_numeric_casting(self.dtype, value)\n        self._values[loc] = value",
        "begin_line": 1031,
        "end_line": 1035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._set_with#1037",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with(self, key, value)",
        "snippet": "    def _set_with(self, key, value):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            # extract_array so that if we set e.g. ser[-5:] = ser[:5]\n            #  we get the first five values, and not 5 NaNs\n            indexer = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            self.iloc[indexer] = extract_array(value, extract_numpy=True)\n\n        else:\n            assert not isinstance(key, tuple)\n\n            if is_scalar(key):\n                key = [key]\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n                key = key._values\n            else:\n                key_type = lib.infer_dtype(key, skipna=False)\n\n            # Note: key_type == \"boolean\" should not occur because that\n            #  should be caught by the is_bool_indexer check in __setitem__\n            if key_type == \"integer\":\n                if not self.index._should_fallback_to_positional():\n                    self.loc[key] = value\n                else:\n                    self.iloc[key] = value\n            else:\n                self.loc[key] = value",
        "begin_line": 1037,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._is_mixed_type#1098",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        return False",
        "begin_line": 1098,
        "end_line": 1099,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._construct_result#2629",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._construct_result(self, result: Union[ArrayLike, Tuple[ArrayLike, ArrayLike]], name: Label)",
        "snippet": "    def _construct_result(\n        self, result: Union[ArrayLike, Tuple[ArrayLike, ArrayLike]], name: Label\n    ) -> Union[\"Series\", Tuple[\"Series\", \"Series\"]]:\n        \"\"\"\n        Construct an appropriately-labelled Series from the result of an op.\n\n        Parameters\n        ----------\n        result : ndarray or ExtensionArray\n        name : Label\n\n        Returns\n        -------\n        Series\n            In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n        \"\"\"\n        if isinstance(result, tuple):\n            # produced by divmod or rdivmod\n\n            res1 = self._construct_result(result[0], name=name)\n            res2 = self._construct_result(result[1], name=name)\n\n            # GH#33427 assertions to keep mypy happy\n            assert isinstance(res1, Series)\n            assert isinstance(res2, Series)\n            return (res1, res2)\n\n        # We do not pass dtype to ensure that the Series constructor\n        #  does inference in the case where `result` has object-dtype.\n        out = self._constructor(result, index=self.index)\n        out = out.__finalize__(self)\n\n        # Set the result's name after __finalize__ is called because __finalize__\n        #  would set it back to self.name\n        out.name = name\n        return out",
        "begin_line": 2629,
        "end_line": 2664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._reduce#4012",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n        delegate = self._values\n\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(delegate, ExtensionArray):\n            # dispatch to ExtensionArray interface\n            return delegate._reduce(name, skipna=skipna, **kwds)\n\n        else:\n            # dispatch to numpy arrays\n            if numeric_only:\n                raise NotImplementedError(\n                    f\"Series.{name} does not implement numeric_only.\"\n                )\n            with np.errstate(all=\"ignore\"):\n                return op(delegate, skipna=skipna, **kwds)",
        "begin_line": 4012,
        "end_line": 4037,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series._needs_reindex_multi#4050",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"\n        Check if we do need a multi reindex; this is for compat with\n        higher dims.\n        \"\"\"\n        return False",
        "begin_line": 4050,
        "end_line": 4055,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.series.Series.reindex#4190",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reindex(self, index=None, **kwargs)",
        "snippet": "    def reindex(self, index=None, **kwargs):\n        return super().reindex(index=index, **kwargs)",
        "begin_line": 4190,
        "end_line": 4191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__new__#151",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__new__(cls, data, closed=None, dtype=None, copy: bool=False, verify_integrity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        data,\n        closed=None,\n        dtype=None,\n        copy: bool = False,\n        verify_integrity: bool = True,\n    ):\n\n        if isinstance(data, ABCSeries) and is_interval_dtype(data.dtype):\n            data = data._values\n\n        if isinstance(data, (cls, ABCIntervalIndex)):\n            left = data.left\n            right = data.right\n            closed = closed or data.closed\n        else:\n\n            # don't allow scalars\n            if is_scalar(data):\n                msg = (\n                    f\"{cls.__name__}(...) must be called with a collection \"\n                    f\"of some kind, {data} was passed\"\n                )\n                raise TypeError(msg)\n\n            # might need to convert empty or purely na data\n            data = maybe_convert_platform_interval(data)\n            left, right, infer_closed = intervals_to_interval_bounds(\n                data, validate_closed=closed is None\n            )\n            closed = closed or infer_closed\n\n        return cls._simple_new(\n            left,\n            right,\n            closed,\n            copy=copy,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n        )",
        "begin_line": 151,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._simple_new#194",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
        "snippet": "    def _simple_new(\n        cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True\n    ):\n        result = IntervalMixin.__new__(cls)\n\n        closed = closed or \"right\"\n        left = ensure_index(left, copy=copy)\n        right = ensure_index(right, copy=copy)\n\n        if dtype is not None:\n            # GH 19262: dtype must be an IntervalDtype to override inferred\n            dtype = pandas_dtype(dtype)\n            if not is_interval_dtype(dtype):\n                msg = f\"dtype must be an IntervalDtype, got {dtype}\"\n                raise TypeError(msg)\n            elif dtype.subtype is not None:\n                left = left.astype(dtype.subtype)\n                right = right.astype(dtype.subtype)\n\n        # coerce dtypes to match if needed\n        if is_float_dtype(left) and is_integer_dtype(right):\n            right = right.astype(left.dtype)\n        elif is_float_dtype(right) and is_integer_dtype(left):\n            left = left.astype(right.dtype)\n\n        if type(left) != type(right):\n            msg = (\n                f\"must not have differing left [{type(left).__name__}] and \"\n                f\"right [{type(right).__name__}] types\"\n            )\n            raise ValueError(msg)\n        elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalArray\"\n            )\n            raise TypeError(msg)\n        elif isinstance(left, ABCPeriodIndex):\n            msg = \"Period dtypes are not supported, use a PeriodIndex instead\"\n            raise ValueError(msg)\n        elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n            msg = (\n                \"left and right must have the same time zone, got \"\n                f\"'{left.tz}' and '{right.tz}'\"\n            )\n            raise ValueError(msg)\n\n        result._left = left\n        result._right = right\n        result._closed = closed\n        if verify_integrity:\n            result._validate()\n        return result",
        "begin_line": 194,
        "end_line": 247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_breaks#311",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_breaks(cls, breaks, closed=\"right\", copy=False, dtype=None):\n        breaks = maybe_convert_platform_interval(breaks)\n\n        return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_arrays#382",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_arrays(cls, left, right, closed=\"right\", copy=False, dtype=None):\n        left = maybe_convert_platform_interval(left)\n        right = maybe_convert_platform_interval(right)\n\n        return cls._simple_new(\n            left, right, closed, copy=copy, dtype=dtype, verify_integrity=True\n        )",
        "begin_line": 382,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_tuples#441",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_tuples(cls, data, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_tuples(cls, data, closed=\"right\", copy=False, dtype=None):\n        if len(data):\n            left, right = [], []\n        else:\n            # ensure that empty data keeps input dtype\n            left = right = data\n\n        for d in data:\n            if isna(d):\n                lhs = rhs = np.nan\n            else:\n                name = cls.__name__\n                try:\n                    # need list of length 2 tuples, e.g. [(0, 1), (1, 2), ...]\n                    lhs, rhs = d\n                except ValueError as err:\n                    msg = f\"{name}.from_tuples requires tuples of length 2, got {d}\"\n                    raise ValueError(msg) from err\n                except TypeError as err:\n                    msg = f\"{name}.from_tuples received an invalid item, {d}\"\n                    raise TypeError(msg) from err\n            left.append(lhs)\n            right.append(rhs)\n\n        return cls.from_arrays(left, right, closed, copy=False, dtype=dtype)",
        "begin_line": 441,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._validate#467",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"\n        Verify that the IntervalArray is valid.\n\n        Checks that\n\n        * closed is valid\n        * left and right match lengths\n        * left and right have the same missing values\n        * left is always below right\n        \"\"\"\n        if self.closed not in _VALID_CLOSED:\n            msg = f\"invalid option for 'closed': {self.closed}\"\n            raise ValueError(msg)\n        if len(self.left) != len(self.right):\n            msg = \"left and right must have the same length\"\n            raise ValueError(msg)\n        left_mask = notna(self.left)\n        right_mask = notna(self.right)\n        if not (left_mask == right_mask).all():\n            msg = (\n                \"missing values must be missing in the same \"\n                \"location both left and right sides\"\n            )\n            raise ValueError(msg)\n        if not (self.left[left_mask] <= self.right[left_mask]).all():\n            msg = \"left side of interval must be <= right side\"\n            raise ValueError(msg)",
        "begin_line": 467,
        "end_line": 494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__len__#502",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.left)",
        "begin_line": 502,
        "end_line": 503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.dtype#661",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return IntervalDtype(self.left.dtype)",
        "begin_line": 661,
        "end_line": 662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.copy#743",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.copy(self)",
        "snippet": "    def copy(self):\n        \"\"\"\n        Return a copy of the array.\n\n        Returns\n        -------\n        IntervalArray\n        \"\"\"\n        left = self.left.copy(deep=True)\n        right = self.right.copy(deep=True)\n        closed = self.closed\n        # TODO: Could skip verify_integrity here.\n        return type(self).from_arrays(left, right, closed=closed)",
        "begin_line": 743,
        "end_line": 755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.left#943",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.left(self)",
        "snippet": "    def left(self):\n        \"\"\"\n        Return the left endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._left",
        "begin_line": 943,
        "end_line": 948,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.right#951",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.right(self)",
        "snippet": "    def right(self):\n        \"\"\"\n        Return the right endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._right",
        "begin_line": 951,
        "end_line": 956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.closed#959",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.closed(self)",
        "snippet": "    def closed(self):\n        \"\"\"\n        Whether the intervals are closed on the left-side, right-side, both or\n        neither.\n        \"\"\"\n        return self._closed",
        "begin_line": 959,
        "end_line": 964,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.interval.maybe_convert_platform_interval#1314",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval",
        "signature": "pandas.core.arrays.interval.maybe_convert_platform_interval(values)",
        "snippet": "def maybe_convert_platform_interval(values):\n    \"\"\"\n    Try to do platform conversion, with special casing for IntervalArray.\n    Wrapper around maybe_convert_platform that alters the default return\n    dtype in certain cases to be compatible with IntervalArray.  For example,\n    empty lists return with integer dtype instead of object dtype, which is\n    prohibited for IntervalArray.\n\n    Parameters\n    ----------\n    values : array-like\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(values, (list, tuple)) and len(values) == 0:\n        # GH 19016\n        # empty lists/tuples get object dtype by default, but this is\n        # prohibited for IntervalArray, so coerce to integer instead\n        return np.array([], dtype=np.int64)\n    elif is_categorical_dtype(values):\n        values = np.asarray(values)\n\n    return maybe_convert_platform(values)",
        "begin_line": 1314,
        "end_line": 1338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.iloc#97",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.iloc(self)",
        "snippet": "    def iloc(self) -> \"_iLocIndexer\":\n        \"\"\"\n        Purely integer-location based indexing for selection by position.\n\n        ``.iloc[]`` is primarily integer position based (from ``0`` to\n        ``length-1`` of the axis), but may also be used with a boolean\n        array.\n\n        Allowed inputs are:\n\n        - An integer, e.g. ``5``.\n        - A list or array of integers, e.g. ``[4, 3, 0]``.\n        - A slice object with ints, e.g. ``1:7``.\n        - A boolean array.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above).\n          This is useful in method chains, when you don't have a reference to the\n          calling object, but would like to base your selection on some value.\n\n        ``.iloc`` will raise ``IndexError`` if a requested indexer is\n        out-of-bounds, except *slice* indexers which allow out-of-bounds\n        indexing (this conforms with python/numpy *slice* semantics).\n\n        See more at :ref:`Selection by Position <indexing.integer>`.\n\n        See Also\n        --------\n        DataFrame.iat : Fast integer location scalar accessor.\n        DataFrame.loc : Purely label-location based indexer for selection by label.\n        Series.iloc : Purely integer-location based indexing for\n                       selection by position.\n\n        Examples\n        --------\n        >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n        ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n        >>> df = pd.DataFrame(mydict)\n        >>> df\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        **Indexing just the rows**\n\n        With a scalar integer.\n\n        >>> type(df.iloc[0])\n        <class 'pandas.core.series.Series'>\n        >>> df.iloc[0]\n        a    1\n        b    2\n        c    3\n        d    4\n        Name: 0, dtype: int64\n\n        With a list of integers.\n\n        >>> df.iloc[[0]]\n           a  b  c  d\n        0  1  2  3  4\n        >>> type(df.iloc[[0]])\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> df.iloc[[0, 1]]\n             a    b    c    d\n        0    1    2    3    4\n        1  100  200  300  400\n\n        With a `slice` object.\n\n        >>> df.iloc[:3]\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        With a boolean mask the same length as the index.\n\n        >>> df.iloc[[True, False, True]]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        With a callable, useful in method chains. The `x` passed\n        to the ``lambda`` is the DataFrame being sliced. This selects\n        the rows whose index label even.\n\n        >>> df.iloc[lambda x: x.index % 2 == 0]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        **Indexing both axes**\n\n        You can mix the indexer types for the index and columns. Use ``:`` to\n        select the entire axis.\n\n        With scalar integers.\n\n        >>> df.iloc[0, 1]\n        2\n\n        With lists of integers.\n\n        >>> df.iloc[[0, 2], [1, 3]]\n              b     d\n        0     2     4\n        2  2000  4000\n\n        With `slice` objects.\n\n        >>> df.iloc[1:3, 0:3]\n              a     b     c\n        1   100   200   300\n        2  1000  2000  3000\n\n        With a boolean array whose length matches the columns.\n\n        >>> df.iloc[:, [True, False, True, False]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n\n        With a callable function that expects the Series or DataFrame.\n\n        >>> df.iloc[:, lambda df: [0, 2]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n        \"\"\"\n        return _iLocIndexer(\"iloc\", self)",
        "begin_line": 97,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.loc#234",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.loc(self)",
        "snippet": "    def loc(self) -> \"_LocIndexer\":\n        \"\"\"\n        Access a group of rows and columns by label(s) or a boolean array.\n\n        ``.loc[]`` is primarily label based, but may also be used with a\n        boolean array.\n\n        Allowed inputs are:\n\n        - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n          interpreted as a *label* of the index, and **never** as an\n          integer position along the index).\n        - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n        - A slice object with labels, e.g. ``'a':'f'``.\n\n          .. warning:: Note that contrary to usual python slices, **both** the\n              start and the stop are included\n\n        - A boolean array of the same length as the axis being sliced,\n          e.g. ``[True, False, True]``.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above)\n\n        See more at :ref:`Selection by Label <indexing.label>`\n\n        Raises\n        ------\n        KeyError\n            If any items are not found.\n\n        See Also\n        --------\n        DataFrame.at : Access a single value for a row/column label pair.\n        DataFrame.iloc : Access group of rows and columns by integer position(s).\n        DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n            Series/DataFrame.\n        Series.loc : Access group of values using labels.\n\n        Examples\n        --------\n        **Getting values**\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=['cobra', 'viper', 'sidewinder'],\n        ...      columns=['max_speed', 'shield'])\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4       5\n        sidewinder          7       8\n\n        Single label. Note this returns the row as a Series.\n\n        >>> df.loc['viper']\n        max_speed    4\n        shield       5\n        Name: viper, dtype: int64\n\n        List of labels. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[['viper', 'sidewinder']]\n                    max_speed  shield\n        viper               4       5\n        sidewinder          7       8\n\n        Single label for row and column\n\n        >>> df.loc['cobra', 'shield']\n        2\n\n        Slice with labels for row and single label for column. As mentioned\n        above, note that both the start and stop of the slice are included.\n\n        >>> df.loc['cobra':'viper', 'max_speed']\n        cobra    1\n        viper    4\n        Name: max_speed, dtype: int64\n\n        Boolean list with the same length as the row axis\n\n        >>> df.loc[[False, False, True]]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series\n\n        >>> df.loc[df['shield'] > 6]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series with column labels specified\n\n        >>> df.loc[df['shield'] > 6, ['max_speed']]\n                    max_speed\n        sidewinder          7\n\n        Callable that returns a boolean Series\n\n        >>> df.loc[lambda df: df['shield'] == 8]\n                    max_speed  shield\n        sidewinder          7       8\n\n        **Setting values**\n\n        Set value for all items matching the list of labels\n\n        >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire row\n\n        >>> df.loc['cobra'] = 10\n        >>> df\n                    max_speed  shield\n        cobra              10      10\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire column\n\n        >>> df.loc[:, 'max_speed'] = 30\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper              30      50\n        sidewinder         30      50\n\n        Set value for rows matching callable condition\n\n        >>> df.loc[df['shield'] > 35] = 0\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper               0       0\n        sidewinder          0       0\n\n        **Getting values on a DataFrame with an index that has integer labels**\n\n        Another example using integers for the index\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n        >>> df\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        Slice with integer labels for rows. As mentioned above, note that both\n        the start and stop of the slice are included.\n\n        >>> df.loc[7:9]\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        **Getting values with a MultiIndex**\n\n        A number of examples using a DataFrame with a MultiIndex\n\n        >>> tuples = [\n        ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n        ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n        ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n        ... ]\n        >>> index = pd.MultiIndex.from_tuples(tuples)\n        >>> values = [[12, 2], [0, 4], [10, 20],\n        ...         [1, 4], [7, 1], [16, 36]]\n        >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n        >>> df\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Single label. Note this returns a DataFrame with a single index.\n\n        >>> df.loc['cobra']\n                 max_speed  shield\n        mark i          12       2\n        mark ii          0       4\n\n        Single index tuple. Note this returns a Series.\n\n        >>> df.loc[('cobra', 'mark ii')]\n        max_speed    0\n        shield       4\n        Name: (cobra, mark ii), dtype: int64\n\n        Single label for row and column. Similar to passing in a tuple, this\n        returns a Series.\n\n        >>> df.loc['cobra', 'mark i']\n        max_speed    12\n        shield        2\n        Name: (cobra, mark i), dtype: int64\n\n        Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[[('cobra', 'mark ii')]]\n                       max_speed  shield\n        cobra mark ii          0       4\n\n        Single tuple for the index with a single label for the column\n\n        >>> df.loc[('cobra', 'mark i'), 'shield']\n        2\n\n        Slice from index tuple to single label\n\n        >>> df.loc[('cobra', 'mark i'):'viper']\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Slice from index tuple to index tuple\n\n        >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                            max_speed  shield\n        cobra      mark i          12       2\n                   mark ii          0       4\n        sidewinder mark i          10      20\n                   mark ii          1       4\n        viper      mark ii          7       1\n        \"\"\"\n        return _LocIndexer(\"loc\", self)",
        "begin_line": 234,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__setitem__#657",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._has_valid_setitem_indexer(key)\n\n        iloc = self if self.name == \"iloc\" else self.obj.iloc\n        iloc._setitem_with_indexer(indexer, value)",
        "begin_line": 657,
        "end_line": 666,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#856",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self.obj._get_value(*key, takeable=self._takeable)\n                except (KeyError, IndexError, AttributeError):\n                    # AttributeError for IntervalTree get_value\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 856,
        "end_line": 871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._is_scalar_access#917",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_scalar(k):\n                return False\n\n            ax = self.obj.axes[i]\n            if isinstance(ax, ABCMultiIndex):\n                return False\n\n            if isinstance(k, str) and ax._supports_partial_string_indexing:\n                # partial string indexing, df.loc['2000', 'A']\n                # should not be considered scalar\n                return False\n\n            if not ax.is_unique:\n                return False\n\n        return True",
        "begin_line": 917,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer#1354",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer) -> bool:\n        \"\"\"\n        Validate that a positional indexer cannot enlarge its target\n        will raise if needed, does not modify the indexer externally.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(indexer, dict):\n            raise IndexError(\"iloc cannot enlarge its target object\")\n        else:\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n            for ax, i in zip(self.obj.axes, indexer):\n                if isinstance(i, slice):\n                    # should check the stop slice?\n                    pass\n                elif is_list_like_indexer(i):\n                    # should check the elements?\n                    pass\n                elif is_integer(i):\n                    if i >= len(ax):\n                        raise IndexError(\"iloc cannot enlarge its target object\")\n                elif isinstance(i, dict):\n                    raise IndexError(\"iloc cannot enlarge its target object\")\n\n        return True",
        "begin_line": 1354,
        "end_line": 1381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#1402",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int) -> None:\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position.\n        axis : int\n            Desired axis.\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'.\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 1402,
        "end_line": 1420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#1457",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self.obj._ixs(key, axis=axis)",
        "begin_line": 1457,
        "end_line": 1481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._get_setitem_indexer#1500",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._get_setitem_indexer(self, key)",
        "snippet": "    def _get_setitem_indexer(self, key):\n        # GH#32257 Fall through to let numpy do validation\n        return key",
        "begin_line": 1500,
        "end_line": 1502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._setitem_with_indexer#1506",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._setitem_with_indexer(self, indexer, value)",
        "snippet": "    def _setitem_with_indexer(self, indexer, value):\n        \"\"\"\n        _setitem_with_indexer is for setting values on a Series/DataFrame\n        using positional indexers.\n\n        If the relevant keys are not present, the Series/DataFrame may be\n        expanded.\n\n        This method is currently broken when dealing with non-unique Indexes,\n        since it goes from positional indexers back to labels when calling\n        BlockManager methods, see GH#12991, GH#22046, GH#15686.\n        \"\"\"\n\n        # also has the side effect of consolidating in-place\n        from pandas import Series\n\n        info_axis = self.obj._info_axis_number\n\n        # maybe partial set\n        take_split_path = self.obj._is_mixed_type\n\n        # if there is only one block/type, still have to take split path\n        # unless the block is one-dimensional or it can hold the value\n        if not take_split_path and self.obj._mgr.blocks:\n            (blk,) = self.obj._mgr.blocks\n            if 1 < blk.ndim:  # in case of dict, keys are indices\n                val = list(value.values()) if isinstance(value, dict) else value\n                take_split_path = not blk._can_hold_element(val)\n\n        # if we have any multi-indexes that have non-trivial slices\n        # (not null slices) then we must take the split path, xref\n        # GH 10360, GH 27841\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, ABCMultiIndex) and not (\n                    is_integer(i) or com.is_null_slice(i)\n                ):\n                    take_split_path = True\n                    break\n\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n\n                    # reindex the axis to the new value\n                    # and set inplace\n                    key, _ = convert_missing_indexer(idx)\n\n                    # if this is the items axes, then take the main missing\n                    # path first\n                    # this correctly sets the dtype and avoids cache issues\n                    # essentially this separates out the block that is needed\n                    # to possibly be modified\n                    if self.ndim > 1 and i == info_axis:\n\n                        # add the new item, and set the value\n                        # must have all defined axes if we have a scalar\n                        # or a list-like on the non-info axes if we have a\n                        # list-like\n                        len_non_info_axes = (\n                            len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                        )\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    \"cannot set a frame with no \"\n                                    \"defined index and a scalar\"\n                                )\n                            self.obj[key] = value\n                            return\n\n                        # add a new item with the dtype setup\n                        self.obj[key] = _infer_fill_value(value)\n\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes\n                        )\n                        self._setitem_with_indexer(new_indexer, value)\n\n                        return\n\n                    # reindex the axis\n                    # make sure to clear the cache because we are\n                    # just replacing the block manager here\n                    # so the object is the same\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._mgr = self.obj.reindex(labels, axis=i)._mgr\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n\n                    nindexer.append(labels.get_loc(key))\n\n                else:\n                    nindexer.append(idx)\n\n            indexer = tuple(nindexer)\n        else:\n\n            indexer, missing = convert_missing_indexer(indexer)\n\n            if missing:\n                self._setitem_with_indexer_missing(indexer, value)\n                return\n\n        # set\n        item_labels = self.obj._get_axis(info_axis)\n\n        # align and set the values\n        if take_split_path:\n            # Above we only set take_split_path to True for 2D cases\n            assert self.ndim == 2\n            assert info_axis == 1\n\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n\n            # Ensure we have something we can iterate over\n            ilocs = info_idx\n            if isinstance(info_idx, slice):\n                ri = Index(range(len(self.obj.columns)))\n                ilocs = ri[info_idx]\n\n            plane_indexer = indexer[:1]\n            lplane_indexer = length_of_indexer(plane_indexer[0], self.obj.index)\n            # lplane_indexer gives the expected length of obj[indexer[0]]\n\n            if len(labels) == 1:\n                # We can operate on a single column\n\n                # require that we are setting the right number of values that\n                # we are indexing\n                if is_list_like_indexer(value) and 0 != lplane_indexer != len(value):\n                    # Exclude zero-len for e.g. boolean masking that is all-false\n                    raise ValueError(\n                        \"cannot set using a multi-index \"\n                        \"selection indexer with a different \"\n                        \"length than the value\"\n                    )\n\n            pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n            def isetter(loc, v):\n                # positional setting on column loc\n                ser = self.obj._ixs(loc, axis=1)\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    ser = v\n                else:\n                    # set the item, possibly having a dtype change\n                    ser._consolidate_inplace()\n                    ser = ser.copy()\n                    ser._mgr = ser._mgr.setitem(indexer=pi, value=v)\n                    ser._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj._iset_item(loc, ser)\n\n            # we need an iterable, with a ndim of at least 1\n            # eg. don't pass through np.array(0)\n            if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n                # we have an equal len Frame\n                if isinstance(value, ABCDataFrame):\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, ABCMultiIndex)\n                    # TODO: we are implicitly assuming value.columns is unique\n\n                    for loc in ilocs:\n                        item = item_labels[loc]\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(\n                                tuple(sub_indexer), value[item], multiindex_indexer\n                            )\n                        else:\n                            v = np.nan\n\n                        isetter(loc, v)\n\n                # we have an equal len ndarray/convertible to our labels\n                # hasattr first, to avoid coercing to ndarray without reason.\n                # But we may be relying on the ndarray coercion to check ndim.\n                # Why not just convert to an ndarray earlier on if needed?\n                elif np.ndim(value) == 2:\n\n                    # note that this coerces the dtype if we are mixed\n                    # GH 7551\n                    value = np.array(value, dtype=object)\n                    if len(ilocs) != value.shape[1]:\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an ndarray\"\n                        )\n\n                    for i, loc in enumerate(ilocs):\n                        # setting with a list, re-coerces\n                        isetter(loc, value[:, i].tolist())\n\n                elif (\n                    len(labels) == 1\n                    and lplane_indexer == len(value)\n                    and not is_scalar(plane_indexer[0])\n                ):\n                    # we have an equal len list/ndarray\n                    # We only get here with len(labels) == len(ilocs) == 1\n                    isetter(ilocs[0], value)\n\n                elif lplane_indexer == 0 and len(value) == len(self.obj.index):\n                    # We get here in one case via .loc with a all-False mask\n                    pass\n\n                else:\n                    # per-label values\n                    if len(ilocs) != len(value):\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an iterable\"\n                        )\n\n                    for loc, v in zip(ilocs, value):\n                        isetter(loc, v)\n            else:\n\n                # scalar value\n                for loc in ilocs:\n                    isetter(loc, value)\n\n        else:\n            if isinstance(indexer, tuple):\n\n                # if we are setting on the info axis ONLY\n                # set using those methods to avoid block-splitting\n                # logic here\n                if (\n                    len(indexer) > info_axis\n                    and is_integer(indexer[info_axis])\n                    and all(\n                        com.is_null_slice(idx)\n                        for i, idx in enumerate(indexer)\n                        if i != info_axis\n                    )\n                    and item_labels.is_unique\n                ):\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n\n                indexer = maybe_convert_ix(*indexer)\n\n            if isinstance(value, (ABCSeries, dict)):\n                # TODO(EA): ExtensionBlock.setitem this causes issues with\n                # setting for extensionarrays that store dicts. Need to decide\n                # if it's worth supporting that.\n                value = self._align_series(indexer, Series(value))\n\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n\n            # check for chained assignment\n            self.obj._check_is_chained_assignment_possible()\n\n            # actually do the set\n            self.obj._consolidate_inplace()\n            self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)\n            self.obj._maybe_update_cacher(clear=True)",
        "begin_line": 1506,
        "end_line": 1787,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer.isetter#1657",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer.isetter(loc, v)",
        "snippet": "            def isetter(loc, v):\n                # positional setting on column loc\n                ser = self.obj._ixs(loc, axis=1)\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    ser = v\n                else:\n                    # set the item, possibly having a dtype change\n                    ser._consolidate_inplace()\n                    ser = ser.copy()\n                    ser._mgr = ser._mgr.setitem(indexer=pi, value=v)\n                    ser._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj._iset_item(loc, ser)",
        "begin_line": 1657,
        "end_line": 1679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing._tuplify#2083",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing._tuplify(ndim: int, loc: Hashable)",
        "snippet": "def _tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]:\n    \"\"\"\n    Given an indexer for the first dimension, create an equivalent tuple\n    for indexing over all dimensions.\n\n    Parameters\n    ----------\n    ndim : int\n    loc : object\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    _tup: List[Union[Hashable, slice]]\n    _tup = [slice(None, None) for _ in range(ndim)]\n    _tup[0] = loc\n    return tuple(_tup)",
        "begin_line": 2083,
        "end_line": 2100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2103",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj: 'DataFrame', key)",
        "snippet": "def convert_to_index_sliceable(obj: \"DataFrame\", key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj.columns:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2103,
        "end_line": 2125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexing.convert_missing_indexer#2175",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_missing_indexer(indexer)",
        "snippet": "def convert_missing_indexer(indexer):\n    \"\"\"\n    Reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
        "begin_line": 2175,
        "end_line": 2189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#60",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\"\n    Standard evaluation.\n    \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#150",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#159",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                f\"evaluating in Python space because the {repr(op_str)} \"\n                \"operator is not supported by numexpr for \"\n                f\"the bool dtype, use {repr(unsupported[op_str])} instead\"\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                f\"operator {repr(op_str)} not implemented for bool dtypes\"\n            )\n    return True",
        "begin_line": 159,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#181",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 181,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#201",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, copy: bool=False, attrs: Optional[Mapping[Optional[Hashable], Any]]=None)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        copy: bool = False,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    ):\n        # copy kwarg is retained for mypy compat, is not used\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_mgr\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 201,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013844662882458813,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#239",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 239,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#256",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(cls, dtype)",
        "snippet": "    def _validate_dtype(cls, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype",
        "begin_line": 256,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict#334",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict(self, axes=None, **kwargs)",
        "snippet": "    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d",
        "begin_line": 334,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#341",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(cls, args, kwargs, require_all: bool=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        cls, args, kwargs, require_all: bool = False, sentinel=None\n    ):\n        \"\"\"\n        Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n        # construct the args\n        args = list(args)\n        for a in cls._AXIS_ORDERS:\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError as err:\n                    if require_all:\n                        raise TypeError(\n                            \"not enough/duplicate arguments specified!\"\n                        ) from err\n\n        axes = {a: kwargs.pop(a, sentinel) for a in cls._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 341,
        "end_line": 369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#372",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis: Axis)",
        "snippet": "    def _get_axis_number(cls, axis: Axis) -> int:\n        try:\n            return cls._AXIS_TO_AXIS_NUMBER[axis]\n        except KeyError:\n            raise ValueError(f\"No axis named {axis} for object type {cls.__name__}\")",
        "begin_line": 372,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#383",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis: Axis)",
        "snippet": "    def _get_axis(self, axis: Axis) -> Index:\n        axis_number = self._get_axis_number(axis)\n        assert axis_number in {0, 1}\n        return self.index if axis_number == 0 else self.columns",
        "begin_line": 383,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_block_manager_axis#389",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_block_manager_axis(cls, axis: Axis)",
        "snippet": "    def _get_block_manager_axis(cls, axis: Axis) -> int:\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        if cls._AXIS_REVERSED:\n            m = cls._AXIS_LEN - 1\n            return m - axis\n        return axis",
        "begin_line": 389,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#454",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self) -> Index:\n        return getattr(self, self._info_axis_name)",
        "begin_line": 454,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ndim#478",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._mgr.ndim",
        "begin_line": 478,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__invert__#1362",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__invert__(self)",
        "snippet": "    def __invert__(self):\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        new_data = self._mgr.apply(operator.invert)\n        result = self._constructor(new_data).__finalize__(self, method=\"__invert__\")\n        return result",
        "begin_line": 1362,
        "end_line": 1369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3208",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher) -> None:\n        \"\"\"\n        Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3208,
        "end_line": 3213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reset_cacher#3215",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reset_cacher(self)",
        "snippet": "    def _reset_cacher(self) -> None:\n        \"\"\"\n        Reset the cacher.\n        \"\"\"\n        if hasattr(self, \"_cacher\"):\n            del self._cacher",
        "begin_line": 3215,
        "end_line": 3220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_update_cacher#3241",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True)",
        "snippet": "    def _maybe_update_cacher(\n        self, clear: bool_t = False, verify_is_copy: bool_t = True\n    ) -> None:\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                if len(self) == len(ref):\n                    # otherwise, either self or ref has swapped in new arrays\n                    ref._maybe_cache_changed(cacher[0], self)\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n        if clear:\n            self._clear_item_cache()",
        "begin_line": 3241,
        "end_line": 3272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3274",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()",
        "begin_line": 3274,
        "end_line": 3275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_item_cache#3558",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_item_cache(self, item)",
        "snippet": "    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            # All places that call _get_item_cache have unique columns,\n            #  pending resolution of GH#33047\n\n            loc = self.columns.get_loc(item)\n            values = self._mgr.iget(loc)\n            res = self._box_col_values(values, loc)\n\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res",
        "begin_line": 3558,
        "end_line": 3575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._iset_item#3594",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._iset_item(self, loc: int, value)",
        "snippet": "    def _iset_item(self, loc: int, value) -> None:\n        self._mgr.iset(loc, value)\n        self._clear_item_cache()",
        "begin_line": 3594,
        "end_line": 3596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3598",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value) -> None:\n        try:\n            loc = self._info_axis.get_loc(key)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self._mgr.insert(len(self._info_axis), key, value)\n            return\n\n        NDFrame._iset_item(self, loc, value)",
        "begin_line": 3598,
        "end_line": 3606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible#3615",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)",
        "snippet": "    def _check_is_chained_assignment_possible(self) -> bool_t:\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\")\n        return False",
        "begin_line": 3615,
        "end_line": 3633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3635",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3635,
        "end_line": 3709,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_view#3769",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_view(self)",
        "snippet": "    def _is_view(self) -> bool_t:\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._mgr.is_view",
        "begin_line": 3769,
        "end_line": 3771,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex_like#3773",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
        "snippet": "    def reindex_like(\n        self: FrameOrSeries,\n        other,\n        method: Optional[str] = None,\n        copy: bool_t = True,\n        limit=None,\n        tolerance=None,\n    ) -> FrameOrSeries:\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n        ...                     [31, 87.8, 'high'],\n        ...                     [22, 71.6, 'medium'],\n        ...                     [35, 95, 'medium']],\n        ...                    columns=['temp_celsius', 'temp_fahrenheit',\n        ...                             'windspeed'],\n        ...                    index=pd.date_range(start='2014-02-12',\n        ...                                        end='2014-02-15', freq='D'))\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame([[28, 'low'],\n        ...                     [30, 'low'],\n        ...                     [35.1, 'medium']],\n        ...                    columns=['temp_celsius', 'windspeed'],\n        ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n        ...                                            '2014-02-15']))\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            copy=copy,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)",
        "begin_line": 3773,
        "end_line": 3882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._update_inplace#3975",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._update_inplace(self, result, verify_is_copy: bool_t=True)",
        "snippet": "    def _update_inplace(self, result, verify_is_copy: bool_t = True) -> None:\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        result : same type as self\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n        self._reset_cache()\n        self._clear_item_cache()\n        self._mgr = result._mgr\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
        "begin_line": 3975,
        "end_line": 3990,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4240",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self: FrameOrSeries, *args, **kwargs)",
        "snippet": "    def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n        ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...                   index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...              'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self, method=\"reindex\")",
        "begin_line": 4240,
        "end_line": 4483,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_axes#4485",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(\n        self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy\n    ) -> FrameOrSeries:\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                copy=copy,\n                allow_dups=False,\n            )\n\n        return obj",
        "begin_line": 4485,
        "end_line": 4508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_with_indexers#4522",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
        "snippet": "    def _reindex_with_indexers(\n        self: FrameOrSeries,\n        reindexers,\n        fill_value=None,\n        copy: bool_t = False,\n        allow_dups: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._mgr\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n            # If we've made a copy once, no need to make another one\n            copy = False\n\n        if copy and new_data is self._mgr:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4522,
        "end_line": 4558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5183",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self: FrameOrSeries, other, method: Optional[str]=None, **kwargs)",
        "snippet": "    def __finalize__(\n        self: FrameOrSeries, other, method: Optional[str] = None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : str, optional\n            A passed method name providing context on where ``__finalize__``\n            was called.\n\n            .. warning:\n\n               The value passed as `method` are not currently considered\n               stable across pandas releases.\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5183,
        "end_line": 5209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5211",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name: str)",
        "snippet": "    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5211,
        "end_line": 5227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5229",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name: str, value)",
        "snippet": "    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5229,
        "end_line": 5268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5285",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"\n        Consolidate _mgr -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._mgr.blocks)\n        result = f()\n        if len(self._mgr.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5285,
        "end_line": 5294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5296",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._mgr = self._mgr.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5296,
        "end_line": 5302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5299",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._mgr = self._mgr.consolidate()",
        "begin_line": 5299,
        "end_line": 5300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate#5304",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate(self, inplace: bool_t=False)",
        "snippet": "    def _consolidate(self, inplace: bool_t = False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : bool, default False\n            If False return new object, otherwise modify existing object.\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._mgr.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)",
        "begin_line": 5304,
        "end_line": 5324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_mixed_type#5327",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self) -> bool_t:\n        f = lambda: self._mgr.is_mixed_type\n        return self._protect_consolidate(f)",
        "begin_line": 5327,
        "end_line": 5329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5648",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self: FrameOrSeries, deep: bool_t=True)",
        "snippet": "    def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._mgr.copy(deep=deep)\n        self._clear_item_cache()\n        return self._constructor(data).__finalize__(self, method=\"copy\")",
        "begin_line": 5648,
        "end_line": 5755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic._make_min_count_stat_function#11201",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_min_count_stat_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable, see_also: str='', examples: str='')",
        "snippet": "def _make_min_count_stat_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str = \"\",\n    examples: str = \"\",\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11201,
        "end_line": 11254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11222",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
        "snippet": "    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )",
        "begin_line": 11222,
        "end_line": 11252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#62",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006793478260869565,
            "pseudo_dstar_susp": 0.0006793478260869565,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0006793478260869565,
            "pseudo_barinel_susp": 0.000784313725490196
        }
    },
    {
        "name": "pandas.conftest.configure_tests#131",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    \"\"\"\n    Configure settings for all tests and test modules.\n    \"\"\"\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006793478260869565,
            "pseudo_dstar_susp": 0.0006793478260869565,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0006793478260869565,
            "pseudo_barinel_susp": 0.000784313725490196
        }
    },
    {
        "name": "pandas.conftest.add_imports#139",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    \"\"\"\n    Make `np` and `pd` names available for doctests.\n    \"\"\"\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 139,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006793478260869565,
            "pseudo_dstar_susp": 0.0006793478260869565,
            "pseudo_tarantula_susp": 0.0008944543828264759,
            "pseudo_op2_susp": 0.0006793478260869565,
            "pseudo_barinel_susp": 0.000784313725490196
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._validate_comparison_value#72",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._validate_comparison_value(self, other)",
        "snippet": "    def _validate_comparison_value(self, other):\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as Timestamp/Timedelta/Period\n                raise InvalidComparison(other)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n        elif not is_list_like(other):\n            raise InvalidComparison(other)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            try:\n                other = self._validate_listlike(other, opname, allow_object=True)\n            except TypeError as err:\n                raise InvalidComparison(other) from err\n\n        return other",
        "begin_line": 72,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._datetimelike_array_cmp#61",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._datetimelike_array_cmp(cls, op)",
        "snippet": "def _datetimelike_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Timestamp/Timedelta/Period-like to\n    boxed scalars/arrays.\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    class InvalidComparison(Exception):\n        pass\n\n    def _validate_comparison_value(self, other):\n        if isinstance(other, str):\n            try:\n                # GH#18435 strings get a pass from tzawareness compat\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # failed to parse as Timestamp/Timedelta/Period\n                raise InvalidComparison(other)\n\n        if isinstance(other, self._recognized_scalars) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n\n        elif not is_list_like(other):\n            raise InvalidComparison(other)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            try:\n                other = self._validate_listlike(other, opname, allow_object=True)\n            except TypeError as err:\n                raise InvalidComparison(other) from err\n\n        return other\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        if self.ndim > 1 and getattr(other, \"shape\", None) == self.shape:\n            # TODO: handle 2D-like listlikes\n            return op(self.ravel(), other.ravel()).reshape(self.shape)\n\n        try:\n            other = _validate_comparison_value(self, other)\n        except InvalidComparison:\n            return invalid_comparison(self, other, op)\n\n        dtype = getattr(other, \"dtype\", None)\n        if is_object_dtype(dtype):\n            # We have to use comp_method_OBJECT_ARRAY instead of numpy\n            #  comparison otherwise it would fail to raise when\n            #  comparing tz-aware and tz-naive\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n            return result\n\n        other_i8 = self._unbox(other)\n        result = op(self.asi8, other_i8)\n\n        o_mask = isna(other)\n        if self._hasnans | np.any(o_mask):\n            result[self._isnan | o_mask] = nat_result\n\n        return result\n\n    return set_function_name(wrapper, opname, cls)",
        "begin_line": 61,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.wrapper#100",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if self.ndim > 1 and getattr(other, \"shape\", None) == self.shape:\n            # TODO: handle 2D-like listlikes\n            return op(self.ravel(), other.ravel()).reshape(self.shape)\n\n        try:\n            other = _validate_comparison_value(self, other)\n        except InvalidComparison:\n            return invalid_comparison(self, other, op)\n\n        dtype = getattr(other, \"dtype\", None)\n        if is_object_dtype(dtype):\n            # We have to use comp_method_OBJECT_ARRAY instead of numpy\n            #  comparison otherwise it would fail to raise when\n            #  comparing tz-aware and tz-naive\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n            return result\n\n        other_i8 = self._unbox(other)\n        result = op(self.asi8, other_i8)\n\n        o_mask = isna(other)\n        if self._hasnans | np.any(o_mask):\n            result[self._isnan | o_mask] = nat_result\n\n        return result",
        "begin_line": 100,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray#455",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray(self)",
        "snippet": "    def _ndarray(self) -> np.ndarray:\n        # NB: A bunch of Interval tests fail if we use ._data\n        return self.asi8",
        "begin_line": 455,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001485222040695084,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_backing_data#459",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_backing_data(self: _T, arr: np.ndarray)",
        "snippet": "    def _from_backing_data(self: _T, arr: np.ndarray) -> _T:\n        # Note: we do not retain `freq`\n        return type(self)(arr, dtype=self.dtype)  # type: ignore",
        "begin_line": 459,
        "end_line": 461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#472",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 472,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#482",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 482,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001464343242055938,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#514",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 514,
        "end_line": 518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#520",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        if lib.is_integer(key):\n            # fast-path\n            result = self._data[key]\n            if self.ndim == 1:\n                return self._box_func(result)\n            return self._simple_new(result, dtype=self.dtype)\n\n        if com.is_bool_indexer(key):\n            # first convert to boolean, because check_array_indexer doesn't\n            # allow object dtype\n            if is_object_dtype(key):\n                key = np.asarray(key, dtype=bool)\n\n            key = check_array_indexer(self, key)\n            key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n        elif isinstance(key, list) and len(key) == 1 and isinstance(key[0], slice):\n            # see https://github.com/pandas-dev/pandas/issues/31299, need to allow\n            # this for now (would otherwise raise in check_array_indexer)\n            pass\n        else:\n            key = check_array_indexer(self, key)\n\n        freq = self._get_getitem_freq(key)\n        result = self._data[key]\n        if lib.is_scalar(result):\n            return self._box_func(result)\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 520,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._get_getitem_freq#554",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._get_getitem_freq(self, key)",
        "snippet": "    def _get_getitem_freq(self, key):\n        \"\"\"\n        Find the `freq` attribute to assign to the result of a __getitem__ lookup.\n        \"\"\"\n        is_period = is_period_dtype(self.dtype)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n        return freq",
        "begin_line": 554,
        "end_line": 572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__#574",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__(self, key: Union[int, Sequence[int], Sequence[bool], slice], value: Union[NaTType, Any, Sequence[Any]])",
        "snippet": "    def __setitem__(\n        self,\n        key: Union[int, Sequence[int], Sequence[bool], slice],\n        value: Union[NaTType, Any, Sequence[Any]],\n    ) -> None:\n        # I'm fudging the types a bit here. \"Any\" above really depends\n        # on type(self). For PeriodArray, it's Period (or stuff coercible\n        # to a period in from_sequence). For DatetimeArray, it's Timestamp...\n        # I don't know if mypy can do that, possibly with Generics.\n        # https://mypy.readthedocs.io/en/latest/generics.html\n        if is_list_like(value):\n            is_slice = isinstance(key, slice)\n\n            if lib.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n\n            if not is_slice:\n                key = cast(Sequence, key)\n                if len(key) != len(value) and not com.is_bool_indexer(key):\n                    msg = (\n                        f\"shape mismatch: value array of length '{len(key)}' \"\n                        \"does not match indexing result of length \"\n                        f\"'{len(value)}'.\"\n                    )\n                    raise ValueError(msg)\n                elif not len(key):\n                    return\n\n        value = self._validate_setitem_value(value)\n        key = check_array_indexer(self, key)\n        self._data[key] = value\n        self._maybe_clear_freq()",
        "begin_line": 574,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#612",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8.ravel()).reshape(self.shape)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)\n        elif is_categorical_dtype(dtype):\n            arr_cls = dtype.construct_array_type()\n            return arr_cls(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 612,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#649",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 649,
        "end_line": 652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#686",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self: DatetimeLikeArrayT)",
        "snippet": "    def copy(self: DatetimeLikeArrayT) -> DatetimeLikeArrayT:\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 686,
        "end_line": 688,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort#697",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._data",
        "begin_line": 697,
        "end_line": 698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_scalar#766",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_scalar(self, value, msg: str, cast_str: bool=False)",
        "snippet": "    def _validate_scalar(self, value, msg: str, cast_str: bool = False):\n        \"\"\"\n        Validate that the input value can be cast to our scalar_type.\n\n        Parameters\n        ----------\n        value : object\n        msg : str\n            Message to raise in TypeError on invalid input.\n        cast_str : bool, default False\n            Whether to try to parse string input to scalar_type.\n\n        Returns\n        -------\n        self._scalar_type or NaT\n        \"\"\"\n        if cast_str and isinstance(value, str):\n            # NB: Careful about tzawareness\n            try:\n                value = self._scalar_from_string(value)\n            except ValueError as err:\n                raise TypeError(msg) from err\n\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            # GH#18295\n            value = NaT\n\n        elif isinstance(value, self._recognized_scalars):\n            value = self._scalar_type(value)  # type: ignore\n\n        else:\n            raise TypeError(msg)\n\n        return value",
        "begin_line": 766,
        "end_line": 799,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_listlike#801",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_listlike(self, value, opname: str, cast_str: bool=False, allow_object: bool=False)",
        "snippet": "    def _validate_listlike(\n        self, value, opname: str, cast_str: bool = False, allow_object: bool = False,\n    ):\n        if isinstance(value, type(self)):\n            return value\n\n        # Do type inference if necessary up front\n        # e.g. we passed PeriodIndex.values and got an ndarray of Periods\n        value = array(value)\n        value = extract_array(value, extract_numpy=True)\n\n        if cast_str and is_dtype_equal(value.dtype, \"string\"):\n            # We got a StringArray\n            try:\n                # TODO: Could use from_sequence_of_strings if implemented\n                # Note: passing dtype is necessary for PeriodArray tests\n                value = type(self)._from_sequence(value, dtype=self.dtype)\n            except ValueError:\n                pass\n\n        if is_categorical_dtype(value.dtype):\n            # e.g. we have a Categorical holding self.dtype\n            if is_dtype_equal(value.categories.dtype, self.dtype):\n                # TODO: do we need equal dtype or just comparable?\n                value = value._internal_get_values()\n\n        if allow_object and is_object_dtype(value.dtype):\n            pass\n\n        elif not type(self)._is_recognized_dtype(value.dtype):\n            raise TypeError(\n                f\"{opname} requires compatible dtype or scalar, \"\n                f\"not {type(value).__name__}\"\n            )\n\n        return value",
        "begin_line": 801,
        "end_line": 836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_setitem_value#848",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_setitem_value(self, value)",
        "snippet": "    def _validate_setitem_value(self, value):\n        msg = (\n            f\"'value' should be a '{self._scalar_type.__name__}', 'NaT', \"\n            f\"or array of those. Got '{type(value).__name__}' instead.\"\n        )\n        if is_list_like(value):\n            value = self._validate_listlike(value, \"setitem\", cast_str=True)\n        else:\n            # TODO: cast_str for consistency?\n            value = self._validate_scalar(value, msg, cast_str=False)\n\n        self._check_compatible_with(value, setitem=True)\n        return self._unbox(value)",
        "begin_line": 848,
        "end_line": 860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._unbox#882",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._unbox(self, other)",
        "snippet": "    def _unbox(self, other) -> Union[np.int64, np.ndarray]:\n        \"\"\"\n        Unbox either a scalar with _unbox_scalar or an instance of our own type.\n        \"\"\"\n        if lib.is_scalar(other):\n            other = self._unbox_scalar(other)\n        else:\n            # same type as self\n            self._check_compatible_with(other)\n            other = other.view(\"i8\")\n        return other",
        "begin_line": 882,
        "end_line": 892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna#970",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)",
        "snippet": "    def isna(self):\n        return self._isnan",
        "begin_line": 970,
        "end_line": 971,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#974",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 974,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#981",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 981,
        "end_line": 985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#1063",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 1063,
        "end_line": 1067,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1426",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n\n        other_dtype = getattr(other, \"dtype\", None)\n\n        # scalar others\n        if other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_timedeltalike_scalar(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self.dtype):\n                raise integer_op_not_supported(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other_dtype):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_timedelta_arraylike(-other)\n        elif is_object_dtype(other_dtype):\n            # e.g. Array/Index of DateOffset objects\n            result = self._addsub_object_array(other, operator.sub)\n        elif is_datetime64_dtype(other_dtype) or is_datetime64tz_dtype(other_dtype):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other_dtype):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other_dtype):\n            if not is_period_dtype(self.dtype):\n                raise integer_op_not_supported(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if isinstance(result, np.ndarray) and is_timedelta64_dtype(result.dtype):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1426,
        "end_line": 1475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1647",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(f\"periods must be a number, got {periods}\")\n    return periods",
        "begin_line": 1647,
        "end_line": 1670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1673",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1673,
        "end_line": 1703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1706",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                f\"Inferred frequency {inferred_freq} from passed \"\n                \"values does not conform to passed frequency \"\n                f\"{freq.freqstr}\"\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1706,
        "end_line": 1738,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1741",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n        Whether we should inherit the freq of passed data.\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1741,
        "end_line": 1766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014613473622680112,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#67",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key: Optional[str]=None)",
        "snippet": "    def _reset_cache(self, key: Optional[str] = None) -> None:\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#622",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 622,
        "end_line": 626,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#633",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 633,
        "end_line": 637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#672",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 672,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.tolist#1010",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self):\n        \"\"\"\n        Return a list of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        list\n\n        See Also\n        --------\n        numpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n            nested list of Python scalars.\n        \"\"\"\n        if not isinstance(self._values, np.ndarray):\n            # check for ndarray instead of dtype to catch DTA/TDA\n            return list(self._values)\n        return self._values.tolist()",
        "begin_line": 1010,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1034",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if not isinstance(self._values, np.ndarray):\n            # Check type instead of dtype to catch DTA/TDA\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1034,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#119",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return TD64NS_DTYPE",
        "begin_line": 119,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#138",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=TD64NS_DTYPE, freq=lib.no_default, copy=False)",
        "snippet": "    def __init__(self, values, dtype=TD64NS_DTYPE, freq=lib.no_default, copy=False):\n        values = extract_array(values)\n\n        inferred_freq = getattr(values, \"_freq\", None)\n        explicit_none = freq is None\n        freq = freq if freq is not lib.no_default else None\n\n        if isinstance(values, type(self)):\n            if explicit_none:\n                # dont inherit from values\n                pass\n            elif freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be a \"\n                \"TimedeltaArray ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg)\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(TD64NS_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 138,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#194",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=TD64NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=TD64NS_DTYPE):\n        assert dtype == TD64NS_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n        if values.dtype != TD64NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(TD64NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = to_offset(freq)\n        result._dtype = TD64NS_DTYPE\n        return result",
        "begin_line": 194,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#208",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=TD64NS_DTYPE, copy=False, freq=lib.no_default, unit=None)",
        "snippet": "    def _from_sequence(\n        cls, data, dtype=TD64NS_DTYPE, copy=False, freq=lib.no_default, unit=None\n    ):\n        if dtype:\n            _validate_td64_dtype(dtype)\n\n        explicit_none = freq is None\n        freq = freq if freq is not lib.no_default else None\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n        if explicit_none:\n            freq = None\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 208,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.astype#296",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> timedelta64[ns]\n        #   --> timedelta64\n        # DatetimeLikeArrayMixin super call handles other cases\n        dtype = pandas_dtype(dtype)\n\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # by pandas convention, converting to non-nano timedelta64\n            #  returns an int64-dtyped array with ints representing multiples\n            #  of the desired timedelta unit.  This is essentially division\n            if self._hasnans:\n                # avoid double-copying\n                result = self._data.astype(dtype, copy=False)\n                values = self._maybe_mask_results(\n                    result, fill_value=None, convert=\"float64\"\n                )\n                return values\n            result = self._data.astype(dtype, copy=copy)\n            return result.astype(\"i8\")\n        elif is_timedelta64_ns_dtype(dtype):\n            if copy:\n                return self.copy()\n            return self\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy=copy)",
        "begin_line": 296,
        "end_line": 320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#880",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frac separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != TD64NS_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(TD64NS_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to timedelta64[ns]\")\n\n    data = np.array(data, copy=copy)\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 880,
        "end_line": 963,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.objects_to_td64ns#1006",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.objects_to_td64ns(data, unit='ns', errors='raise')",
        "snippet": "def objects_to_td64ns(data, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert a object-dtyped or string-dtyped array into an\n    timedelta64[ns]-dtyped array.\n\n    Parameters\n    ----------\n    data : ndarray or Index\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    # coerce Index to np.ndarray, converting string-dtype if necessary\n    values = np.array(data, dtype=np.object_, copy=False)\n\n    result = array_to_timedelta64(values, unit=unit, errors=errors)\n    return result.view(\"timedelta64[ns]\")",
        "begin_line": 1006,
        "end_line": 1038,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1041",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        # no precision disallowed GH#24806\n        msg = (\n            \"Passing in 'timedelta' dtype with no precision is not allowed. \"\n            \"Please pass in 'timedelta64[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if not is_dtype_equal(dtype, TD64NS_DTYPE):\n        raise ValueError(f\"dtype {dtype} cannot be converted to timedelta64[ns]\")\n\n    return dtype",
        "begin_line": 1041,
        "end_line": 1054,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#56",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return DT64NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 56,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#212",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=DT64NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=DT64NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        f\"'{dtz}' != '{values.tz}'\"\n                    )\n                    raise TypeError(msg)\n            elif values.tz:\n                dtype = values.dtype\n\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"Unexpected type '{type(values).__name__}'. 'values' must be \"\n                \"a DatetimeArray ndarray, or Series or Index containing one of those.\"\n            )\n        if values.ndim not in [1, 2]:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(DT64NS_DTYPE)\n\n        if values.dtype != DT64NS_DTYPE:\n            raise ValueError(\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'. \"\n                f\"Got {values.dtype} instead.\"\n            )\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            raise ValueError(\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 212,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#285",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=DT64NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype != DT64NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(DT64NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#298",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=lib.no_default, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=lib.no_default,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n    ):\n        explicit_none = freq is None\n        freq = freq if freq is not lib.no_default else None\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n        if explicit_none:\n            freq = None\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 298,
        "end_line": 340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001485222040695084,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#343",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start_tz = None if start is None else start.tz\n            end_tz = None if end is None else end.tz\n            start = _maybe_localize_point(\n                start, start_tz, start, freq, tz, ambiguous, nonexistent\n            )\n            end = _maybe_localize_point(\n                end, end_tz, end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n\n            if isinstance(freq, Tick):\n                values = generate_regular_range(start, end, periods, freq)\n            else:\n                xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n                values = np.array([x.value for x in xdr], dtype=np.int64)\n\n            _tz = start.tz if start is not None else end.tz\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 343,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar#447",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._unbox_scalar(self, value)",
        "snippet": "    def _unbox_scalar(self, value):\n        if not isinstance(value, self._scalar_type) and value is not NaT:\n            raise ValueError(\"'value' should be a Timestamp.\")\n        if not isna(value):\n            self._check_compatible_with(value)\n        return value.value",
        "begin_line": 447,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with#457",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._check_compatible_with(self, other, setitem: bool=False)",
        "snippet": "    def _check_compatible_with(self, other, setitem: bool = False):\n        if other is NaT:\n            return\n        self._assert_tzawareness_compat(other)\n        if setitem:\n            # Stricter check for setitem vs comparison methods\n            if not timezones.tz_compare(self.tz, other.tz):\n                raise ValueError(f\"Timezones don't match. '{self.tz} != {other.tz}'\")",
        "begin_line": 457,
        "end_line": 464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq#466",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        self._freq = None",
        "begin_line": 466,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#473",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 473,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#477",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 477,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014539110206455364,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#499",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 499,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015062509414068384,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#520",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 520,
        "end_line": 524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._timezone#527",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._timezone(self)",
        "snippet": "    def _timezone(self):\n        \"\"\"\n        Comparable timezone both for pytz / dateutil\n        \"\"\"\n        return timezones.get_timezone(self.tzinfo)",
        "begin_line": 527,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#547",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 547,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#554",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 554,
        "end_line": 575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz#621",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self, other)",
        "snippet": "    def _has_same_tz(self, other):\n        zzone = self._timezone\n\n        # vzone shouldn't be None if value is non-datetime like\n        if isinstance(other, np.datetime64):\n            # convert to Timestamp as np.datetime64 doesn't have tz attr\n            other = Timestamp(other)\n        vzone = timezones.get_timezone(getattr(other, \"tzinfo\", \"__no_tz__\"))\n        return zzone == vzone",
        "begin_line": 621,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#631",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        other_dtype = getattr(other, \"dtype\", None)\n\n        if is_datetime64tz_dtype(other_dtype):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike#655",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike(self, other)",
        "snippet": "    def _sub_datetime_arraylike(self, other):\n        \"\"\"subtract DatetimeArray/Index or ndarray[datetime64]\"\"\"\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            assert is_datetime64_dtype(other)\n            other = type(self)(other)\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                f\"{type(self).__name__} subtraction must have the same \"\n                \"timezones or no timezones\"\n            )\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        arr_mask = self._isnan | other._isnan\n        new_values = checked_add_with_arr(self_i8, -other_i8, arr_mask=arr_mask)\n        if self._hasnans or other._hasnans:\n            new_values[arr_mask] = iNaT\n        return new_values.view(\"timedelta64[ns]\")",
        "begin_line": 655,
        "end_line": 677,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#810",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise')",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq=None)\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq=None)\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2018-10-28 01:20:00+02:00\n        1   2018-10-28 02:36:00+02:00\n        2   2018-10-28 03:46:00+01:00\n        dtype: datetime64[ns, CET]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n        \"\"\"\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(DT64NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n\n        freq = None\n        if timezones.is_utc(tz) or (len(self) == 1 and not isna(new_dates[0])):\n            # we can preserve freq\n            # TODO: Also for fixed-offsets\n            freq = self.freq\n        elif tz is None and self.tz is None:\n            # no-op\n            freq = self.freq\n        return self._simple_new(new_dates, dtype=dtype, freq=freq)",
        "begin_line": 810,
        "end_line": 985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_period#1049",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_period(self, freq=None)",
        "snippet": "    def to_period(self, freq=None):\n        \"\"\"\n        Cast to PeriodArray/Index at a particular frequency.\n\n        Converts DatetimeArray/Index to PeriodArray/Index.\n\n        Parameters\n        ----------\n        freq : str or Offset, optional\n            One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n            or an Offset object. Will be inferred by default.\n\n        Returns\n        -------\n        PeriodArray/Index\n\n        Raises\n        ------\n        ValueError\n            When converting a DatetimeArray/Index with non-regular values,\n            so that a frequency cannot be inferred.\n\n        See Also\n        --------\n        PeriodIndex: Immutable ndarray holding ordinal values.\n        DatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n        ...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n        ...                                         \"2000-05-31 00:00:00\",\n        ...                                         \"2000-08-31 00:00:00\"]))\n        >>> df.index.to_period(\"M\")\n        PeriodIndex(['2000-03', '2000-05', '2000-08'],\n                    dtype='period[M]', freq='M')\n\n        Infer the daily frequency\n\n        >>> idx = pd.date_range(\"2017-01-01\", periods=2)\n        >>> idx.to_period()\n        PeriodIndex(['2017-01-01', '2017-01-02'],\n                    dtype='period[D]', freq='D')\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        if self.tz is not None:\n            warnings.warn(\n                \"Converting to PeriodArray/Index representation \"\n                \"will drop timezone information.\",\n                UserWarning,\n            )\n\n        if freq is None:\n            freq = self.freqstr or self.inferred_freq\n\n            if freq is None:\n                raise ValueError(\n                    \"You must pass a freq argument as current index has none.\"\n                )\n\n            res = get_period_alias(freq)\n\n            #  https://github.com/pandas-dev/pandas/issues/33358\n            if res is None:\n                base, stride = libfrequencies.base_and_stride(freq)\n                res = f\"{stride}{base}\"\n\n            freq = res\n\n        return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)",
        "begin_line": 1049,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1855",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n    data_dtype = getattr(data, \"dtype\", None)\n\n    if is_object_dtype(data_dtype) or is_string_dtype(data_dtype):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n        data_dtype = data.dtype\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data_dtype):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data_dtype):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != DT64NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(DT64NS_DTYPE)\n\n        assert data.dtype == DT64NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        result = data.view(DT64NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1855,
        "end_line": 1982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#1985",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 1985,
        "end_line": 2065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2068",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        # e.g. collections.deque\n        return data, copy\n\n    if is_float_dtype(data.dtype):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(DT64NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data.dtype) or is_bool_dtype(data.dtype):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data.dtype):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid. Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data.dtype):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data.dtype) and not is_datetime64tz_dtype(data.dtype):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2068,
        "end_line": 2122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2129",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            f\"data is already tz-aware {inferred_tz}, unable to \"\n            f\"set specified tz: {tz}\"\n        )\n    return tz",
        "begin_line": 2129,
        "end_line": 2156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2159",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, disallowed GH#24806\n            msg = (\n                \"Passing in 'datetime64' dtype with no precision is not allowed. \"\n                \"Please pass in 'datetime64[ns]' instead.\"\n            )\n            raise ValueError(msg)\n\n        if (isinstance(dtype, np.dtype) and dtype != DT64NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                f\"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\"\n            )\n    return dtype",
        "begin_line": 2159,
        "end_line": 2198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015167602002123465,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2201",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2201,
        "end_line": 2245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2248",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError as err:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        ) from err\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2248,
        "end_line": 2286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2289",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start: Optional[Timestamp], end: Optional[Timestamp], normalize: bool)",
        "snippet": "def _maybe_normalize_endpoints(\n    start: Optional[Timestamp], end: Optional[Timestamp], normalize: bool\n):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = start.normalize()\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = end.normalize()\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2289,
        "end_line": 2308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2311",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2311,
        "end_line": 2341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#148",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                raise raise_on_incompatible(values, freq)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 148,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#174",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values: np.ndarray, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values: np.ndarray, freq=None, **kwargs) -> \"PeriodArray\":\n        # alias for PeriodArray.__init__\n        assertion_msg = \"Should be numpy array of type i8\"\n        assert isinstance(values, np.ndarray) and values.dtype == \"i8\", assertion_msg\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 174,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_sequence#181",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_sequence(cls: Type['PeriodArray'], scalars: Union[Sequence[Optional[Period]], AnyArrayLike], dtype: Optional[PeriodDtype]=None, copy: bool=False)",
        "snippet": "    def _from_sequence(\n        cls: Type[\"PeriodArray\"],\n        scalars: Union[Sequence[Optional[Period]], AnyArrayLike],\n        dtype: Optional[PeriodDtype] = None,\n        copy: bool = False,\n    ) -> \"PeriodArray\":\n        if dtype:\n            freq = dtype.freq\n        else:\n            freq = None\n\n        if isinstance(scalars, cls):\n            validate_dtype_freq(scalars.dtype, freq)\n            if copy:\n                scalars = scalars.copy()\n            return scalars\n\n        periods = np.asarray(scalars, dtype=object)\n        if copy:\n            periods = periods.copy()\n\n        freq = freq or libperiod.extract_freq(periods)\n        ordinals = libperiod.extract_ordinals(periods, freq)\n        return cls(ordinals, freq=freq)",
        "begin_line": 181,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_datetime64#213",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_datetime64(cls, data, freq, tz=None)",
        "snippet": "    def _from_datetime64(cls, data, freq, tz=None) -> \"PeriodArray\":\n        \"\"\"\n        Construct a PeriodArray from a datetime64 array\n\n        Parameters\n        ----------\n        data : ndarray[datetime64[ns], datetime64[ns, tz]]\n        freq : str or Tick\n        tz : tzinfo, optional\n\n        Returns\n        -------\n        PeriodArray[freq]\n        \"\"\"\n        data, freq = dt64arr_to_periodarr(data, freq, tz)\n        return cls(data, freq=freq)",
        "begin_line": 213,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#231",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 231,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#276",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self) -> PeriodDtype:\n        return self._dtype",
        "begin_line": 276,
        "end_line": 277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#281",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self) -> DateOffset:\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 281,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._box_func#492",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Period._from_ordinal(ordinal=x, freq=self.freq)",
        "begin_line": 492,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.astype#584",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.astype(self, dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype, copy: bool = True):\n        # We handle Period[T] -> Period[U]\n        # Our parent handles everything else.\n        dtype = pandas_dtype(dtype)\n\n        if is_period_dtype(dtype):\n            return self.asfreq(dtype.freq)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 584,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#811",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Union[Sequence[Optional[Period]], AnyArrayLike], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Union[Sequence[Optional[Period]], AnyArrayLike],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    <PeriodArray>\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    data_dtype = getattr(data, \"dtype\", None)\n\n    if is_datetime64_dtype(data_dtype):\n        return PeriodArray._from_datetime64(data, freq)\n    if is_period_dtype(data_dtype):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple, ABCSeries)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    dtype: Optional[PeriodDtype]\n    if freq:\n        dtype = PeriodDtype(freq)\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 811,
        "end_line": 893,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#896",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 896,
        "end_line": 926,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period.dt64arr_to_periodarr#929",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.dt64arr_to_periodarr(data, freq, tz=None)",
        "snippet": "def dt64arr_to_periodarr(data, freq, tz=None):\n    \"\"\"\n    Convert an datetime-like array to values Period ordinals.\n\n    Parameters\n    ----------\n    data : Union[Series[datetime64[ns]], DatetimeIndex, ndarray[datetime64ns]]\n    freq : Optional[Union[str, Tick]]\n        Must match the `freq` on the `data` if `data` is a DatetimeIndex\n        or Series.\n    tz : Optional[tzinfo]\n\n    Returns\n    -------\n    ordinals : ndarray[int]\n    freq : Tick\n        The frequency extracted from the Series or DatetimeIndex if that's\n        used.\n\n    \"\"\"\n    if data.dtype != np.dtype(\"M8[ns]\"):\n        raise ValueError(f\"Wrong dtype: {data.dtype}\")\n\n    if freq is None:\n        if isinstance(data, ABCIndexClass):\n            data, freq = data._values, data.freq\n        elif isinstance(data, ABCSeries):\n            data, freq = data._values, data.dt.freq\n\n    freq = Period._maybe_convert_freq(freq)\n\n    if isinstance(data, (ABCIndexClass, ABCSeries)):\n        data = data._values\n\n    base, mult = libfrequencies.get_freq_code(freq)\n    return libperiod.dt64arr_to_periodarr(data.view(\"i8\"), base, tz), freq",
        "begin_line": 929,
        "end_line": 964,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#967",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 967,
        "end_line": 1011,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.tools.timedeltas.to_timedelta#16",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas.to_timedelta(arg, unit='ns', errors='raise')",
        "snippet": "def to_timedelta(arg, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert argument to timedelta.\n\n    Timedeltas are absolute differences in times, expressed in difference\n    units (e.g. days, hours, minutes, seconds). This method converts\n    an argument from a recognized timedelta format / value into\n    a Timedelta type.\n\n    Parameters\n    ----------\n    arg : str, timedelta, list-like or Series\n        The data to be converted to timedelta.\n    unit : str, default 'ns'\n        Denotes the unit of the arg. Possible values:\n        ('W', 'D', 'days', 'day', 'hours', hour', 'hr', 'h',\n        'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n        'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n        'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n        'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n        'nanosecond', 'N').\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n\n    Returns\n    -------\n    timedelta64 or numpy.array of timedelta64\n        Output type returned if parsing succeeded.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n    convert_dtypes : Convert dtypes.\n\n    Examples\n    --------\n    Parsing a single string to a Timedelta:\n\n    >>> pd.to_timedelta('1 days 06:05:01.00003')\n    Timedelta('1 days 06:05:01.000030')\n    >>> pd.to_timedelta('15.5us')\n    Timedelta('0 days 00:00:00.000015500')\n\n    Parsing a list or array of strings:\n\n    >>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\n    TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015500', NaT],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Converting numbers by specifying the `unit` keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), unit='s')\n    TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02',\n                    '0 days 00:00:03', '0 days 00:00:04'],\n                   dtype='timedelta64[ns]', freq=None)\n    >>> pd.to_timedelta(np.arange(5), unit='d')\n    TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    unit = parse_timedelta_unit(unit)\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"errors must be one of 'ignore', 'raise', or 'coerce'}\")\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if arg is None:\n        return arg\n    elif isinstance(arg, ABCSeries):\n        values = _convert_listlike(arg._values, unit=unit, errors=errors)\n        return arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, ABCIndexClass):\n        return _convert_listlike(arg, unit=unit, errors=errors, name=arg.name)\n    elif isinstance(arg, np.ndarray) and arg.ndim == 0:\n        # extract array scalar and process below\n        arg = arg.item()\n    elif is_list_like(arg) and getattr(arg, \"ndim\", 1) == 1:\n        return _convert_listlike(arg, unit=unit, errors=errors)\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, timedelta, list, tuple, 1-d array, or Series\"\n        )\n\n    # ...so it must be a scalar value. Return scalar.\n    return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)",
        "begin_line": 16,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._convert_listlike#127",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._convert_listlike(arg, unit='ns', errors='raise', name=None)",
        "snippet": "def _convert_listlike(arg, unit=\"ns\", errors=\"raise\", name=None):\n    \"\"\"Convert a list of objects to a timedelta index object.\"\"\"\n    if isinstance(arg, (list, tuple)) or not hasattr(arg, \"dtype\"):\n        # This is needed only to ensure that in the case where we end up\n        #  returning arg (errors == \"ignore\"), and where the input is a\n        #  generator, we return a useful list-like instead of a\n        #  used-up generator\n        arg = np.array(list(arg), dtype=object)\n\n    try:\n        value = sequence_to_td64ns(arg, unit=unit, errors=errors, copy=False)[0]\n    except ValueError:\n        if errors == \"ignore\":\n            return arg\n        else:\n            # This else-block accounts for the cases when errors='raise'\n            # and errors='coerce'. If errors == 'raise', these errors\n            # should be raised. If errors == 'coerce', we shouldn't\n            # expect any errors to be raised, since all parsing errors\n            # cause coercion to pd.NaT. However, if an error / bug is\n            # introduced that causes an Exception to be raised, we would\n            # like to surface it.\n            raise\n\n    from pandas import TimedeltaIndex\n\n    value = TimedeltaIndex(value, unit=\"ns\", name=name)\n    return value",
        "begin_line": 127,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.construction.array#56",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.array(data: Union[Sequence[object], AnyArrayLike], dtype: Optional[Dtype]=None, copy: bool=True)",
        "snippet": "def array(\n    data: Union[Sequence[object], AnyArrayLike],\n    dtype: Optional[Dtype] = None,\n    copy: bool = True,\n) -> \"ExtensionArray\":\n    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    data : Sequence of objects\n        The scalars inside `data` should be instances of the\n        scalar type for `dtype`. It's expected that `data`\n        represents a 1-dimensional array of data.\n\n        When `data` is an Index or Series, the underlying array\n        will be extracted from `data`.\n\n    dtype : str, np.dtype, or ExtensionDtype, optional\n        The dtype to use for the array. This may be a NumPy\n        dtype or an extension type registered with pandas using\n        :meth:`pandas.api.extensions.register_extension_dtype`.\n\n        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be\n        held in extension arrays.\n\n        Currently, pandas will infer an extension dtype for sequences of\n\n        ============================== =====================================\n        Scalar Type                    Array Type\n        ============================== =====================================\n        :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n        :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n        :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n        :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n        :class:`int`                   :class:`pandas.arrays.IntegerArray`\n        :class:`str`                   :class:`pandas.arrays.StringArray`\n        :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n        ============================== =====================================\n\n        For all other cases, NumPy's usual inference rules will be used.\n\n        .. versionchanged:: 1.0.0\n\n           Pandas infers nullable-integer dtype for integer data,\n           string dtype for string data, and nullable-boolean dtype\n           for boolean data.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. Depending\n        on the type of `data`, creating the new array may require\n        copying data, even if ``copy=False``.\n\n    Returns\n    -------\n    ExtensionArray\n        The newly created array.\n\n    Raises\n    ------\n    ValueError\n        When `data` is not 1-dimensional.\n\n    See Also\n    --------\n    numpy.array : Construct a NumPy array.\n    Series : Construct a pandas Series.\n    Index : Construct a pandas Index.\n    arrays.PandasArray : ExtensionArray wrapping a NumPy array.\n    Series.array : Extract the array stored within a Series.\n\n    Notes\n    -----\n    Omitting the `dtype` argument means pandas will attempt to infer the\n    best array type from the values in the data. As new array types are\n    added by pandas and 3rd party libraries, the \"best\" array type may\n    change. We recommend specifying `dtype` to ensure that\n\n    1. the correct array type for the data is returned\n    2. the returned array type doesn't change as new extension types\n       are added by pandas and third-party libraries\n\n    Additionally, if the underlying memory representation of the returned\n    array matters, we recommend specifying the `dtype` as a concrete object\n    rather than a string alias or allowing it to be inferred. For example,\n    a future version of pandas or a 3rd-party library may include a\n    dedicated ExtensionArray for string data. In this event, the following\n    would no longer return a :class:`arrays.PandasArray` backed by a NumPy\n    array.\n\n    >>> pd.array(['a', 'b'], dtype=str)\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    This would instead return the new ExtensionArray dedicated for string\n    data. If you really need the new array to be backed by a  NumPy array,\n    specify that in the dtype.\n\n    >>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`\n      * :class:`arrays.TimedeltaArray`\n\n    When data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\n    passed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\n    rather than a ``PandasArray``. This is for symmetry with the case of\n    timezone-aware data, which NumPy does not natively support.\n\n    >>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n    <DatetimeArray>\n    ['2015-01-01 00:00:00', '2016-01-01 00:00:00']\n    Length: 2, dtype: datetime64[ns]\n\n    >>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n    <TimedeltaArray>\n    ['0 days 01:00:00', '0 days 02:00:00']\n    Length: 2, dtype: timedelta64[ns]\n\n    Examples\n    --------\n    If a dtype is not specified, pandas will infer the best dtype from the values.\n    See the description of `dtype` for the types pandas infers for.\n\n    >>> pd.array([1, 2])\n    <IntegerArray>\n    [1, 2]\n    Length: 2, dtype: Int64\n\n    >>> pd.array([1, 2, np.nan])\n    <IntegerArray>\n    [1, 2, <NA>]\n    Length: 3, dtype: Int64\n\n    >>> pd.array([\"a\", None, \"c\"])\n    <StringArray>\n    ['a', <NA>, 'c']\n    Length: 3, dtype: string\n\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]\n\n    You can use the string alias for `dtype`\n\n    >>> pd.array(['a', 'b', 'a'], dtype='category')\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    Or specify the actual dtype\n\n    >>> pd.array(['a', 'b', 'a'],\n    ...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    If pandas does not infer a dedicated extension type a\n    :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1.1, 2.2])\n    <PandasArray>\n    [1.1, 2.2]\n    Length: 2, dtype: float64\n\n    As mentioned in the \"Notes\" section, new extension types may be added\n    in the future (by pandas or 3rd party libraries), causing the return\n    value to no longer be a :class:`arrays.PandasArray`. Specify the `dtype`\n    as a NumPy dtype if you need to ensure there's no future change in\n    behavior.\n\n    >>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int32\n\n    `data` must be 1-dimensional. A ValueError is raised when the input\n    has the wrong dimensionality.\n\n    >>> pd.array(1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot pass scalar '1' to 'pandas.array'.\n    \"\"\"\n    from pandas.core.arrays import (\n        period_array,\n        BooleanArray,\n        IntegerArray,\n        IntervalArray,\n        PandasArray,\n        DatetimeArray,\n        TimedeltaArray,\n        StringArray,\n    )\n\n    if lib.is_scalar(data):\n        msg = f\"Cannot pass scalar '{data}' to 'pandas.array'.\"\n        raise ValueError(msg)\n\n    if dtype is None and isinstance(\n        data, (ABCSeries, ABCIndexClass, ABCExtensionArray)\n    ):\n        dtype = data.dtype\n\n    data = extract_array(data, extract_numpy=True)\n\n    # this returns None for not-found dtypes.\n    if isinstance(dtype, str):\n        dtype = registry.find(dtype) or dtype\n\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=True)\n        if inferred_dtype == \"period\":\n            try:\n                return period_array(data, copy=copy)\n            except IncompatibleFrequency:\n                # We may have a mixture of frequencies.\n                # We choose to return an ndarray, rather than raising.\n                pass\n        elif inferred_dtype == \"interval\":\n            try:\n                return IntervalArray(data, copy=copy)\n            except ValueError:\n                # We may have a mixture of `closed` here.\n                # We choose to return an ndarray, rather than raising.\n                pass\n\n        elif inferred_dtype.startswith(\"datetime\"):\n            # datetime, datetime64\n            try:\n                return DatetimeArray._from_sequence(data, copy=copy)\n            except ValueError:\n                # Mixture of timezones, fall back to PandasArray\n                pass\n\n        elif inferred_dtype.startswith(\"timedelta\"):\n            # timedelta, timedelta64\n            return TimedeltaArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"string\":\n            return StringArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"integer\":\n            return IntegerArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"boolean\":\n            return BooleanArray._from_sequence(data, copy=copy)\n\n    # Pandas overrides NumPy for\n    #   1. datetime64[ns]\n    #   2. timedelta64[ns]\n    # so that a DatetimeArray is returned.\n    if is_datetime64_ns_dtype(dtype):\n        return DatetimeArray._from_sequence(data, dtype=dtype, copy=copy)\n    elif is_timedelta64_ns_dtype(dtype):\n        return TimedeltaArray._from_sequence(data, dtype=dtype, copy=copy)\n\n    result = PandasArray._from_sequence(data, dtype=dtype, copy=copy)\n    return result",
        "begin_line": 56,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.construction.extract_array#338",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy: bool=False)",
        "snippet": "def extract_array(obj, extract_numpy: bool = False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 338,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#389",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index: Optional['Index'], dtype: Optional[DtypeObj]=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data,\n    index: Optional[\"Index\"],\n    dtype: Optional[DtypeObj] = None,\n    copy: bool = False,\n    raise_cast_failure: bool = False,\n) -> ArrayLike:\n    \"\"\"\n    Sanitize input data to an ndarray or ExtensionArray, copy if specified,\n    coerce to the dtype if specified.\n    \"\"\"\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    elif isinstance(data, abc.Set):\n        raise TypeError(\"Set type is unordered\")\n    elif lib.is_scalar(data) and index is not None and dtype is not None:\n        data = maybe_cast_to_datetime(data, dtype)\n        if not lib.is_scalar(data):\n            data = data[0]\n        subarr = construct_1d_arraylike_from_scalar(data, len(index), dtype)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr",
        "begin_line": 389,
        "end_line": 513,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.construction._try_cast#516",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[DtypeObj], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr, dtype: Optional[DtypeObj], copy: bool, raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, scalar, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    if isinstance(dtype, ExtensionDtype) and dtype.kind != \"M\":\n        # create an extension array from its dtype\n        # DatetimeTZ case needs to go through maybe_cast_to_datetime\n        array_type = dtype.construct_array_type()._from_sequence\n        subarr = array_type(arr, dtype=dtype, copy=copy)\n        return subarr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dtype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            # this will raise if we have e.g. floats\n            maybe_cast_to_integer_array(arr, dtype)\n            subarr = arr\n        else:\n            subarr = maybe_cast_to_datetime(arr, dtype)\n\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 516,
        "end_line": 572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.construction.is_empty_data#575",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.is_empty_data(data: Any)",
        "snippet": "def is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    is_none = data is None\n    is_list_like_without_dtype = is_list_like(data) and not hasattr(data, \"dtype\")\n    is_simple_empty = is_list_like_without_dtype and not data\n    return is_none or is_simple_empty",
        "begin_line": 575,
        "end_line": 592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.construction.create_series_with_explicit_dtype#595",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.create_series_with_explicit_dtype(data: Any=None, index: Optional[Union[ArrayLike, 'Index']]=None, dtype: Optional[Dtype]=None, name: Optional[str]=None, copy: bool=False, fastpath: bool=False, dtype_if_empty: Dtype=object)",
        "snippet": "def create_series_with_explicit_dtype(\n    data: Any = None,\n    index: Optional[Union[ArrayLike, \"Index\"]] = None,\n    dtype: Optional[Dtype] = None,\n    name: Optional[str] = None,\n    copy: bool = False,\n    fastpath: bool = False,\n    dtype_if_empty: Dtype = object,\n) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261.\n\n    Parameters\n    ----------\n    data : Mirrored from Series.__init__\n    index : Mirrored from Series.__init__\n    dtype : Mirrored from Series.__init__\n    name : Mirrored from Series.__init__\n    copy : Mirrored from Series.__init__\n    fastpath : Mirrored from Series.__init__\n    dtype_if_empty : str, numpy.dtype, or ExtensionDtype\n        This dtype will be passed explicitly if an empty Series will\n        be instantiated.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    if is_empty_data(data) and dtype is None:\n        dtype = dtype_if_empty\n    return Series(\n        data=data, index=index, dtype=dtype, name=name, copy=copy, fastpath=fastpath\n    )",
        "begin_line": 595,
        "end_line": 631,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.cmp_method#110",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.cmp_method(self, other)",
        "snippet": "    def cmp_method(self, other):\n        if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)):\n            if other.ndim > 0 and len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n\n        if is_object_dtype(self.dtype) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self.dtype) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, other)\n\n        elif is_object_dtype(self.dtype) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)",
        "begin_line": 110,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#283",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n    ) -> \"Index\":\n\n        from pandas.core.indexes.range import RangeIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n        if \"tz\" in kwargs:\n            tz = kwargs.pop(\"tz\")\n            validate_tz_from_dtype(dtype, tz)\n            dtype = tz_to_dtype(tz)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        data_dtype = getattr(data, \"dtype\", None)\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data_dtype) or is_categorical_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n\n        # interval\n        elif is_interval_dtype(data_dtype) or is_interval_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.interval import IntervalIndex\n\n            return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n        elif is_datetime64_any_dtype(data_dtype) or is_datetime64_any_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import DatetimeIndex\n\n            return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n        elif is_timedelta64_dtype(data_dtype) or is_timedelta64_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import TimedeltaIndex\n\n            return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n        elif is_period_dtype(data_dtype) or is_period_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import PeriodIndex\n\n            return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data_dtype) or is_extension_array_dtype(dtype):\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n            else:\n                data = np.asarray(data, dtype=object)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.numeric import (\n                Float64Index,\n                Int64Index,\n                UInt64Index,\n            )\n\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype  # TODO: maybe not for object?\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n                if new_dtype is not None:\n                    return cls(\n                        new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                    )\n\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n            if subarr.ndim > 1:\n                # GH#13601, GH#20285, GH#27125\n                raise ValueError(\"Index data must be 1-dimensional\")\n            return cls._simple_new(subarr, name)\n\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 283,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#454",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name: Label=None)",
        "snippet": "    def _simple_new(cls, values, name: Label = None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides.\n        result._index_data = values\n        result._name = name\n        result._cache = {}\n\n        return result._reset_identity()",
        "begin_line": 454,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013531799729364006,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#482",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 482,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#488",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        \"\"\"\n        Create a new Index with the same class as the caller, don't copy the\n        data, use the same object attributes with passed in attributes taking\n        precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        name : Label, defaults to self.name\n        \"\"\"\n        name = self.name if name is no_default else name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self._values\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 488,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#510",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 510,
        "end_line": 527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015062509414068384,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#529",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 529,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001312852829197847,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#540",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `target_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        target_values = self._get_engine_target()\n        return self._engine_type(lambda: target_values, len(self))",
        "begin_line": 540,
        "end_line": 546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014371945961483184,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#552",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 552,
        "end_line": 556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#558",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 558,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014705882352941175,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#576",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 576,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#598",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 598,
        "end_line": 608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#777",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, names=None)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, names=None):\n        \"\"\"\n        Make a copy of this object.\n\n        Name and dtype sets those attributes on the new object.\n\n        Parameters\n        ----------\n        name : Label, optional\n            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used.\n\n        Returns\n        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        \"\"\"\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 777,
        "end_line": 813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1122",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self)",
        "snippet": "    def name(self):\n        \"\"\"\n        Return Index or MultiIndex name.\n        \"\"\"\n        return self._name",
        "begin_line": 1122,
        "end_line": 1126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001457725947521866,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1129",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self, value)",
        "snippet": "    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value",
        "begin_line": 1129,
        "end_line": 1137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001319609395618897,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1139",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep: bool=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep: bool = False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1139,
        "end_line": 1157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1159",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1159,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015062509414068384,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1162",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n        self._name = values[0]",
        "begin_line": 1162,
        "end_line": 1188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1192",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace: bool=False)",
        "snippet": "    def set_names(self, names, level=None, inplace: bool = False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1192,
        "end_line": 1268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.rename#1270",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.rename(self, name, inplace=False)",
        "snippet": "    def rename(self, name, inplace=False):\n        \"\"\"\n        Alter Index or MultiIndex name.\n\n        Able to set new names without level. Defaults to returning new index.\n        Length of names must match number of levels in MultiIndex.\n\n        Parameters\n        ----------\n        name : label or list of labels\n            Name(s) to set.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.set_names : Able to set new names partially and by level.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n        >>> idx.rename('grade')\n        Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]],\n        ...                                   names=['kind', 'year'])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.rename(['species', 'year'])\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        >>> idx.rename('species')\n        Traceback (most recent call last):\n        TypeError: Must pass list-like as `names`.\n        \"\"\"\n        return self.set_names([name], inplace=inplace)",
        "begin_line": 1270,
        "end_line": 1319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1325",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1325,
        "end_line": 1329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015062509414068384,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1593",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1593,
        "end_line": 1597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014371945961483184,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_boolean#1631",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_boolean(self)",
        "snippet": "    def is_boolean(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of booleans.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of booleans.\n\n        See Also\n        --------\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([True, False, True])\n        >>> idx.is_boolean()\n        True\n\n        >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n        >>> idx.is_boolean()\n        False\n\n        >>> idx = pd.Index([True, False, \"True\"])\n        >>> idx.is_boolean()\n        False\n        \"\"\"\n        return self.inferred_type in [\"boolean\"]",
        "begin_line": 1631,
        "end_line": 1664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1666",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of integers.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of integers.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_integer()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_integer()\n        False\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_integer()\n        False\n        \"\"\"\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1666,
        "end_line": 1699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_floating#1701",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_floating(self)",
        "snippet": "    def is_floating(self) -> bool:\n        \"\"\"\n        Check if the Index is a floating type.\n\n        The Index may consist of only floats, NaNs, or a mix of floats,\n        integers, or NaNs.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of only consists of floats, NaNs, or\n            a mix of floats, integers, or NaNs.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_floating()\n        False\n        \"\"\"\n        return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
        "begin_line": 1701,
        "end_line": 1742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_object#1787",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_object(self)",
        "snippet": "    def is_object(self) -> bool:\n        \"\"\"\n        Check if the Index is of the object dtype.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index is of the object dtype.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_object()\n        True\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n        >>> idx.is_object()\n        True\n\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_object()\n        False\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_object()\n        False\n        \"\"\"\n        return is_object_dtype(self.dtype)",
        "begin_line": 1787,
        "end_line": 1825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_categorical#1827",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_categorical(self)",
        "snippet": "    def is_categorical(self) -> bool:\n        \"\"\"\n        Check if the Index holds categorical data.\n\n        Returns\n        -------\n        bool\n            True if the Index is categorical.\n\n        See Also\n        --------\n        CategoricalIndex : Index for categorical data.\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_categorical()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_categorical()\n        False\n\n        >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n        >>> s\n        0        Peter\n        1       Victor\n        2    Elisabeth\n        3          Mar\n        dtype: object\n        >>> s.index.is_categorical()\n        False\n        \"\"\"\n        return self.inferred_type in [\"categorical\"]",
        "begin_line": 1827,
        "end_line": 1868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.holds_integer#1940",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.holds_integer(self)",
        "snippet": "    def holds_integer(self) -> bool:\n        \"\"\"\n        Whether the type is an integer type.\n        \"\"\"\n        return self.inferred_type in [\"integer\", \"mixed-integer\"]",
        "begin_line": 1940,
        "end_line": 1944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1947",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str_t:\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self._values, skipna=False)",
        "begin_line": 1947,
        "end_line": 1951,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015360983102918587,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1954",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        return is_datetime_array(ensure_object(self._values))",
        "begin_line": 1954,
        "end_line": 1958,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1975",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1975,
        "end_line": 1985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001485222040695084,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#1995",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self) -> bool:\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 1995,
        "end_line": 2002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2797",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        tolerance : int or float, optional\n            Maximum distance from index value for inexact matches. The value of\n            the index at the matching location most satisfy the equation\n            ``abs(index[loc] - key) <= tolerance``.\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> unique_index = pd.Index(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.Index(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.Index(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True])\n        \"\"\"\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            casted_key = self._maybe_cast_indexer(key)\n            try:\n                return self._engine.get_loc(casted_key)\n            except KeyError as err:\n                raise KeyError(key) from err\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2797,
        "end_line": 2854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer#2904",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(\n        self, target, method=None, limit=None, tolerance=None\n    ) -> np.ndarray:\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        # Treat boolean labels passed to a numeric index as not found. Without\n        # this fix False and True would be treated as 0 and 1 respectively.\n        # (GH #16877)\n        if target.is_boolean() and self.is_numeric():\n            return ensure_platform_int(np.repeat(-1, target.size))\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            this = self.astype(object)\n            target = target.astype(object)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not self.is_unique:\n            raise InvalidIndexError(\n                \"Reindexing only valid with uniquely valued Index objects\"\n            )\n\n        if method == \"pad\" or method == \"backfill\":\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._get_engine_target())\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2904,
        "end_line": 2954,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#3070",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind: str_t)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind: str_t):\n        \"\"\"\n        Convert a slice indexer.\n\n        By definition, these are labels unless 'iloc' is passed in.\n        Floats are not allowed as the start, step, or stop of the slice.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'loc', 'getitem'}\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\"], kind\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_index_slice = is_int(start) and is_int(stop) and is_int(step)\n        is_positional = is_index_slice and not (\n            self.is_integer() or self.is_categorical()\n        )\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                self._validate_indexer(\"slice\", key.start, \"getitem\")\n                self._validate_indexer(\"slice\", key.stop, \"getitem\")\n                self._validate_indexer(\"slice\", key.step, \"getitem\")\n                return key\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        if is_positional:\n            try:\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n            except KeyError:\n                pass\n\n        if com.is_null_slice(key):\n            # It doesn't matter if we are positional or label based\n            indexer = key\n        elif is_positional:\n            if kind == \"loc\":\n                # GH#16121, GH#24612, GH#31810\n                warnings.warn(\n                    \"Slicing a positional slice with .loc is not supported, \"\n                    \"and will raise TypeError in a future version.  \"\n                    \"Use .loc with labels or .iloc with positions instead.\",\n                    FutureWarning,\n                    stacklevel=6,\n                )\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 3070,
        "end_line": 3138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#3088",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 3088,
        "end_line": 3089,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_reindex#3221",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_reindex(self, indexer)",
        "snippet": "    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")",
        "begin_line": 3221,
        "end_line": 3235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.reindex#3237",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values\n        as necessary).\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            if isinstance(self, ABCRangeIndex):\n                values = range(0)\n            else:\n                values = self._data[:0]  # appropriately-dtyped empty array\n            target = self._simple_new(values, name=self.name)\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                # check is_overlapping for IntervalIndex compat\n                if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, missing = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer",
        "begin_line": 3237,
        "end_line": 3296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3783",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3783,
        "end_line": 3802,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001704448610874382,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.array#3806",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        array = self._data\n        if isinstance(array, np.ndarray):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            array = PandasArray(array)\n        return array",
        "begin_line": 3806,
        "end_line": 3812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3815",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, np.ndarray]:\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray or ExtensionArray.\n\n        ``_values`` are consistent between``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       |\n        ----------------- | --------------- | ------------- |\n        Index             | ndarray         | ndarray       |\n        CategoricalIndex  | Categorical     | Categorical   |\n        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n        PeriodIndex       | ndarray[object] | PeriodArray   |\n        IntervalIndex     | IntervalArray   | IntervalArray |\n\n        See Also\n        --------\n        values\n        \"\"\"\n        return self._data",
        "begin_line": 3815,
        "end_line": 3838,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00013464386697185942,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_engine_target#3840",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        \"\"\"\n        Get the ndarray that we can pass to the IndexEngine constructor.\n        \"\"\"\n        return self._values",
        "begin_line": 3840,
        "end_line": 3844,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014407145944388418,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_scalar_to_index#3924",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_scalar_to_index(self, item)",
        "snippet": "    def _coerce_scalar_to_index(self, item):\n        \"\"\"\n        We need to coerce a scalar to a compat for our index type.\n\n        Parameters\n        ----------\n        item : scalar item to coerce\n        \"\"\"\n        dtype = self.dtype\n\n        if self._is_numeric_dtype and isna(item):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return Index([item], dtype=dtype, **self._get_attributes_dict())",
        "begin_line": 3924,
        "end_line": 3939,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#3980",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        \"\"\"\n        Return a boolean indicating whether the provided key is in the index.\n\n        Parameters\n        ----------\n        key : label\n            The key to check if it is present in the index.\n\n        Returns\n        -------\n        bool\n            Whether the key search is in the index.\n\n        Raises\n        ------\n        TypeError\n            If the key is not hashable.\n\n        See Also\n        --------\n        Index.isin : Returns an ndarray of boolean dtype indicating whether the\n            list-like key is in the index.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n\n        >>> 2 in idx\n        True\n        >>> 6 in idx\n        False\n        \"\"\"\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 3980,
        "end_line": 4019,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#4027",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        result = getitem(key)\n        if not is_scalar(result):\n            if np.ndim(result) > 1:\n                deprecate_ndim_indexing(result)\n                return result\n            return promote(result)\n        else:\n            return result",
        "begin_line": 4027,
        "end_line": 4062,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name#4064",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name(self, name)",
        "snippet": "    def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n        \"\"\"\n        Faster check for ``name in self`` when we know `name` is a Python\n        identifier (e.g. in NDFrame.__getattr__, which hits this to support\n        . key lookup). For indexes that can't hold identifiers (everything\n        but object & categorical) we just return False.\n\n        https://github.com/pandas-dev/pandas/issues/19764\n        \"\"\"\n        if self.is_object() or self.is_categorical():\n            return name in self\n        return False",
        "begin_line": 4064,
        "end_line": 4075,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.append#4077",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together.\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        to_concat = [self]\n\n        if isinstance(other, (list, tuple)):\n            to_concat = to_concat + list(other)\n        else:\n            to_concat.append(other)\n\n        for obj in to_concat:\n            if not isinstance(obj, Index):\n                raise TypeError(\"all inputs must be Index\")\n\n        names = {obj.name for obj in to_concat}\n        name = None if len(names) > 1 else self.name\n\n        return self._concat(to_concat, name)",
        "begin_line": 4077,
        "end_line": 4103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4140",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other: Any)",
        "snippet": "    def equals(self, other: Any) -> bool:\n        \"\"\"\n        Determine if two Index object are equal.\n\n        The things that are being compared are:\n\n        * The elements inside the Index object.\n        * The order of the elements inside the Index object.\n\n        Parameters\n        ----------\n        other : Any\n            The other object to compare against.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements and order\n            as the calling index; False otherwise.\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([1, 2, 3])\n        >>> idx1\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> idx1.equals(pd.Index([1, 2, 3]))\n        True\n\n        The elements inside are compared\n\n        >>> idx2 = pd.Index([\"1\", \"2\", \"3\"])\n        >>> idx2\n        Index(['1', '2', '3'], dtype='object')\n\n        >>> idx1.equals(idx2)\n        False\n\n        The order is compared\n\n        >>> ascending_idx = pd.Index([1, 2, 3])\n        >>> ascending_idx\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> descending_idx = pd.Index([3, 2, 1])\n        >>> descending_idx\n        Int64Index([3, 2, 1], dtype='int64')\n        >>> ascending_idx.equals(descending_idx)\n        False\n\n        The dtype is *not* compared\n\n        >>> int64_idx = pd.Int64Index([1, 2, 3])\n        >>> int64_idx\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> uint64_idx = pd.UInt64Index([1, 2, 3])\n        >>> uint64_idx\n        UInt64Index([1, 2, 3], dtype='uint64')\n        >>> int64_idx.equals(uint64_idx)\n        True\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        if isinstance(other, ABCMultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            return other.equals(self)\n\n        if is_extension_array_dtype(other.dtype):\n            # All EA-backed Index subclasses override equals\n            return other.equals(self)\n\n        return array_equivalent(self._values, other._values)",
        "begin_line": 4140,
        "end_line": 4217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4219",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4219,
        "end_line": 4239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._should_fallback_to_positional#4560",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._should_fallback_to_positional(self)",
        "snippet": "    def _should_fallback_to_positional(self) -> bool:\n        \"\"\"\n        Should an integer key be treated as positional?\n        \"\"\"\n        if self.holds_integer() or self.is_boolean():\n            return False\n        return True",
        "begin_line": 4560,
        "end_line": 4566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_values_for_loc#4568",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_values_for_loc(self, series: 'Series', loc, key)",
        "snippet": "    def _get_values_for_loc(self, series: \"Series\", loc, key):\n        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series.\n\n        Assumes that `series.index is self`\n\n        key is included for MultiIndex compat.\n        \"\"\"\n        if is_integer(loc):\n            return series._values[loc]\n\n        return series.iloc[loc]",
        "begin_line": 4568,
        "end_line": 4580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_promote#4662",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_promote(self, other: 'Index')",
        "snippet": "    def _maybe_promote(self, other: \"Index\"):\n        \"\"\"\n        When dealing with an object-dtype Index and a non-object Index, see\n        if we can upcast the object-dtype one to improve performance.\n        \"\"\"\n\n        if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            return type(other)(self), other\n        elif self.inferred_type == \"timedelta\" and isinstance(other, ABCTimedeltaIndex):\n            # TODO: we dont have tests that get here\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n\n        if not is_object_dtype(self.dtype) and is_object_dtype(other.dtype):\n            # Reverse op so we dont need to re-implement on the subclasses\n            other, self = other._maybe_promote(self)\n\n        return self, other",
        "begin_line": 4662,
        "end_line": 4681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4917",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n        if not self.is_floating():\n            return com.cast_scalar_indexer(key)\n        return key",
        "begin_line": 4917,
        "end_line": 4924,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_indexer#4926",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_indexer(self, form: str_t, key, kind: str_t)",
        "snippet": "    def _validate_indexer(self, form: str_t, key, kind: str_t):\n        \"\"\"\n        If we are positional indexer, validate that we have appropriate\n        typed bounds must be an integer.\n        \"\"\"\n        assert kind in [\"getitem\", \"iloc\"]\n\n        if key is None:\n            pass\n        elif is_integer(key):\n            pass\n        else:\n            self._invalid_indexer(form, key)",
        "begin_line": 4926,
        "end_line": 4938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.insert#5176",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.insert(self, loc: int, item)",
        "snippet": "    def insert(self, loc: int, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # Note: this method is overridden by all ExtensionIndex subclasses,\n        #  so self is never backed by an EA.\n        arr = np.asarray(self)\n        item = self._coerce_scalar_to_index(item)._values\n        idx = np.concatenate((arr[:loc], item, arr[loc:]))\n        return Index(idx, name=self.name)",
        "begin_line": 5176,
        "end_line": 5196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5498",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy: bool=False)",
        "snippet": "def ensure_index(index_like, copy: bool = False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index_like : sequence\n        An Index or other sequence\n    copy : bool, default False\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    See Also\n    --------\n    ensure_index_from_sequences\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n            ('a', 'c')],\n           )\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            index_like = copy_func(index_like)\n\n    return Index(index_like)",
        "begin_line": 5498,
        "end_line": 5559,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_has_len#5562",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_has_len(seq)",
        "snippet": "def ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
        "begin_line": 5562,
        "end_line": 5571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5589",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5589,
        "end_line": 5592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001399972000559989,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base.maybe_extract_name#5595",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.maybe_extract_name(name, obj, cls)",
        "snippet": "def maybe_extract_name(name, obj, cls) -> Label:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
        "begin_line": 5595,
        "end_line": 5608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_with_dtype#5611",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool)",
        "snippet": "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
        "begin_line": 5611,
        "end_line": 5662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00019364833462432224,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_data_without_dtype#5665",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)",
        "snippet": "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
        "begin_line": 5665,
        "end_line": 5733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base._try_convert_to_int_array#5736",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype)",
        "snippet": "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
        "begin_line": 5736,
        "end_line": 5776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00015810276679841898,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_asobject#5779",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
        "snippet": "def _maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs):\n    \"\"\"\n    If an object dtype was specified, create the non-object Index\n    and then convert it to object.\n\n    Parameters\n    ----------\n    dtype : np.dtype, ExtensionDtype, str\n    klass : Index subclass\n    data : list-like\n    copy : bool\n    name : hashable\n    **kwargs\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    We assume that calling .astype(object) on this klass will make a copy.\n    \"\"\"\n\n    # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n    #  will raise in the where `data` is already tz-aware.  So\n    #  we leave it out of this step and cast to object-dtype after\n    #  the DatetimeIndex construction.\n\n    if is_dtype_equal(_o_dtype, dtype):\n        # Note we can pass copy=False because the .astype below\n        #  will always make a copy\n        index = klass(data, copy=False, name=name, **kwargs)\n        return index.astype(object)\n\n    return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 5779,
        "end_line": 5813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__init__#54",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        # values is supposed to already be validated in the subclass\n        if not (isinstance(mask, np.ndarray) and mask.dtype == np.bool_):\n            raise TypeError(\n                \"mask should be boolean numpy array. Use \"\n                \"the 'pd.array' function instead\"\n            )\n        if not values.ndim == 1:\n            raise ValueError(\"values must be a 1D array\")\n        if not mask.ndim == 1:\n            raise ValueError(\"mask must be a 1D array\")\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n\n        self._data = values\n        self._mask = mask",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.concat.get_dtype_kinds#27",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.get_dtype_kinds(l)",
        "snippet": "def get_dtype_kinds(l):\n    \"\"\"\n    Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays\n    \"\"\"\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = \"category\"\n        elif is_sparse(dtype):\n            typ = \"sparse\"\n        elif isinstance(arr, ABCRangeIndex):\n            typ = \"range\"\n        elif is_datetime64tz_dtype(dtype):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            typ = \"timedelta\"\n        elif is_object_dtype(dtype):\n            typ = \"object\"\n        elif is_bool_dtype(dtype):\n            typ = \"bool\"\n        elif is_extension_array_dtype(dtype):\n            typ = str(dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs",
        "begin_line": 27,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_compat#101",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_compat(to_concat, axis: int=0)",
        "snippet": "def concat_compat(to_concat, axis: int = 0):\n    \"\"\"\n    provide concatenation of an array of arrays each of which is a single\n    'normalized' dtypes (in that for example, if it's object, then it is a\n    non-datetimelike and provide a combined dtype for the resulting array that\n    preserves the overall dtype if possible)\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n    # filter empty arrays\n    # 1-d dtypes always are included here\n    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0\n\n    # If all arrays are empty, there's nothing to convert, just short-cut to\n    # the concatenation, #3121.\n    #\n    # Creating an empty array directly is tempting, but the winnings would be\n    # marginal given that it would still require shape & dtype calculation and\n    # np.concatenate which has them both implemented is compiled.\n    non_empties = [x for x in to_concat if is_nonempty(x)]\n    if non_empties and axis == 0:\n        to_concat = non_empties\n\n    typs = get_dtype_kinds(to_concat)\n    _contains_datetime = any(typ.startswith(\"datetime\") for typ in typs)\n\n    all_empty = not len(non_empties)\n    single_dtype = len({x.dtype for x in to_concat}) == 1\n    any_ea = any(is_extension_array_dtype(x.dtype) for x in to_concat)\n\n    if any_ea and axis == 0:\n        if not single_dtype:\n            target_dtype = find_common_type([x.dtype for x in to_concat])\n            to_concat = [_cast_to_common_type(arr, target_dtype) for arr in to_concat]\n\n        if isinstance(to_concat[0], ExtensionArray):\n            cls = type(to_concat[0])\n            return cls._concat_same_type(to_concat)\n        else:\n            return np.concatenate(to_concat)\n\n    elif _contains_datetime or \"timedelta\" in typs:\n        return concat_datetime(to_concat, axis=axis, typs=typs)\n\n    elif any_ea and axis == 1:\n        to_concat = [np.atleast_2d(x.astype(\"object\")) for x in to_concat]\n        return np.concatenate(to_concat, axis=axis)\n\n    elif all_empty:\n        # we have all empties, but may need to coerce the result dtype to\n        # object if we have non-numeric type operands (numpy would otherwise\n        # cast this to float)\n        typs = get_dtype_kinds(to_concat)\n        if len(typs) != 1:\n\n            if not len(typs - {\"i\", \"u\", \"f\"}) or not len(typs - {\"bool\", \"i\", \"u\"}):\n                # let numpy coerce\n                pass\n            else:\n                # coerce to object\n                to_concat = [x.astype(\"object\") for x in to_concat]\n\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 101,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.concat.is_nonempty#119",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.is_nonempty(x)",
        "snippet": "    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.concat.union_categoricals#176",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.union_categoricals(to_union, sort_categories: bool=False, ignore_order: bool=False)",
        "snippet": "def union_categoricals(\n    to_union, sort_categories: bool = False, ignore_order: bool = False\n):\n    \"\"\"\n    Combine list-like of Categorical-like, unioning categories.\n\n    All categories must have the same dtype.\n\n    Parameters\n    ----------\n    to_union : list-like\n        Categorical, CategoricalIndex, or Series with dtype='category'.\n    sort_categories : bool, default False\n        If true, resulting categories will be lexsorted, otherwise\n        they will be ordered as they appear in the data.\n    ignore_order : bool, default False\n        If true, the ordered attribute of the Categoricals will be ignored.\n        Results in an unordered categorical.\n\n    Returns\n    -------\n    Categorical\n\n    Raises\n    ------\n    TypeError\n        - all inputs do not have the same dtype\n        - all inputs do not have the same ordered property\n        - all inputs are ordered and their categories are not identical\n        - sort_categories=True and Categoricals are ordered\n    ValueError\n        Empty list of categoricals passed\n\n    Notes\n    -----\n    To learn more about categories, see `link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning>`__\n\n    Examples\n    --------\n    >>> from pandas.api.types import union_categoricals\n\n    If you want to combine categoricals that do not necessarily have\n    the same categories, `union_categoricals` will combine a list-like\n    of categoricals. The new categories will be the union of the\n    categories being combined.\n\n    >>> a = pd.Categorical([\"b\", \"c\"])\n    >>> b = pd.Categorical([\"a\", \"b\"])\n    >>> union_categoricals([a, b])\n    [b, c, a, b]\n    Categories (3, object): [b, c, a]\n\n    By default, the resulting categories will be ordered as they appear\n    in the `categories` of the data. If you want the categories to be\n    lexsorted, use `sort_categories=True` argument.\n\n    >>> union_categoricals([a, b], sort_categories=True)\n    [b, c, a, b]\n    Categories (3, object): [a, b, c]\n\n    `union_categoricals` also works with the case of combining two\n    categoricals of the same categories and order information (e.g. what\n    you could also `append` for).\n\n    >>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n    >>> b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n    >>> union_categoricals([a, b])\n    [a, b, a, b, a]\n    Categories (2, object): [a < b]\n\n    Raises `TypeError` because the categories are ordered and not identical.\n\n    >>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n    >>> b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n    >>> union_categoricals([a, b])\n    Traceback (most recent call last):\n        ...\n    TypeError: to union ordered Categoricals, all categories must be the same\n\n    New in version 0.20.0\n\n    Ordered categoricals with different categories or orderings can be\n    combined by using the `ignore_ordered=True` argument.\n\n    >>> a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n    >>> b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n    >>> union_categoricals([a, b], ignore_order=True)\n    [a, b, c, c, b, a]\n    Categories (3, object): [a, b, c]\n\n    `union_categoricals` also works with a `CategoricalIndex`, or `Series`\n    containing categorical data, but note that the resulting array will\n    always be a plain `Categorical`\n\n    >>> a = pd.Series([\"b\", \"c\"], dtype='category')\n    >>> b = pd.Series([\"a\", \"b\"], dtype='category')\n    >>> union_categoricals([a, b])\n    [b, c, a, b]\n    Categories (3, object): [b, c, a]\n    \"\"\"\n    from pandas import Categorical\n    from pandas.core.arrays.categorical import recode_for_categories\n\n    if len(to_union) == 0:\n        raise ValueError(\"No Categoricals to union\")\n\n    def _maybe_unwrap(x):\n        if isinstance(x, (ABCCategoricalIndex, ABCSeries)):\n            return x._values\n        elif isinstance(x, Categorical):\n            return x\n        else:\n            raise TypeError(\"all components to combine must be Categorical\")\n\n    to_union = [_maybe_unwrap(x) for x in to_union]\n    first = to_union[0]\n\n    if not all(\n        is_dtype_equal(other.categories.dtype, first.categories.dtype)\n        for other in to_union[1:]\n    ):\n        raise TypeError(\"dtype of categories must be the same\")\n\n    ordered = False\n    if all(first.is_dtype_equal(other) for other in to_union[1:]):\n        # identical categories - fastpath\n        categories = first.categories\n        ordered = first.ordered\n\n        if all(first.categories.equals(other.categories) for other in to_union[1:]):\n            new_codes = np.concatenate([c.codes for c in to_union])\n        else:\n            codes = [first.codes] + [\n                recode_for_categories(other.codes, other.categories, first.categories)\n                for other in to_union[1:]\n            ]\n            new_codes = np.concatenate(codes)\n\n        if sort_categories and not ignore_order and ordered:\n            raise TypeError(\"Cannot use sort_categories=True with ordered Categoricals\")\n\n        if sort_categories and not categories.is_monotonic_increasing:\n            categories = categories.sort_values()\n            indexer = categories.get_indexer(first.categories)\n\n            from pandas.core.algorithms import take_1d\n\n            new_codes = take_1d(indexer, new_codes, fill_value=-1)\n    elif ignore_order or all(not c.ordered for c in to_union):\n        # different categories - union and recode\n        cats = first.categories.append([c.categories for c in to_union[1:]])\n        categories = cats.unique()\n        if sort_categories:\n            categories = categories.sort_values()\n\n        new_codes = [\n            recode_for_categories(c.codes, c.categories, categories) for c in to_union\n        ]\n        new_codes = np.concatenate(new_codes)\n    else:\n        # ordered - to show a proper error message\n        if all(c.ordered for c in to_union):\n            msg = \"to union ordered Categoricals, all categories must be the same\"\n            raise TypeError(msg)\n        else:\n            raise TypeError(\"Categorical.ordered must be the same\")\n\n    if ignore_order:\n        ordered = False\n\n    return Categorical(new_codes, categories=categories, ordered=ordered, fastpath=True)",
        "begin_line": 176,
        "end_line": 347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.dtypes.concat._maybe_unwrap#283",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._maybe_unwrap(x)",
        "snippet": "    def _maybe_unwrap(x):\n        if isinstance(x, (ABCCategoricalIndex, ABCSeries)):\n            return x._values\n        elif isinstance(x, Categorical):\n            return x\n        else:\n            raise TypeError(\"all components to combine must be Categorical\")",
        "begin_line": 283,
        "end_line": 289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.util._exceptions.rewrite_exception#6",
        "src_path": "pandas/util/_exceptions.py",
        "class_name": "pandas.util._exceptions",
        "signature": "pandas.util._exceptions.rewrite_exception(old_name: str, new_name: str)",
        "snippet": "def rewrite_exception(old_name: str, new_name: str):\n    \"\"\"\n    Rewrite the message of an exception.\n    \"\"\"\n    try:\n        yield\n    except Exception as err:\n        msg = err.args[0]\n        msg = msg.replace(old_name, new_name)\n        args: Tuple[str, ...] = (msg,)\n        if len(err.args) > 1:\n            args = args + err.args[1:]\n        err.args = args\n        raise",
        "begin_line": 6,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00017988846914912754,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#208",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            f'For argument \"{arg_name}\" expected type bool, received '\n            f\"type {type(value).__name__}.\"\n        )\n    return value",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.type#61",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.type(self)",
        "snippet": "    def type(self) -> Type[str]:\n        return str",
        "begin_line": 61,
        "end_line": 62,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.construct_array_type#65",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"StringArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return StringArray",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray.__init__#174",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray.__init__(self, values, copy=False)",
        "snippet": "    def __init__(self, values, copy=False):\n        values = extract_array(values)\n        skip_validation = isinstance(values, type(self))\n\n        super().__init__(values, copy=copy)\n        self._dtype = StringDtype()\n        if not skip_validation:\n            self._validate()",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray._validate#183",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"Validate that we only store NA or strings.\"\"\"\n        if len(self._ndarray) and not lib.is_string_array(self._ndarray, skipna=True):\n            raise ValueError(\"StringArray requires a sequence of strings or pandas.NA\")\n        if self._ndarray.dtype != \"object\":\n            raise ValueError(\n                \"StringArray requires a sequence of strings or pandas.NA. Got \"\n                f\"'{self._ndarray.dtype}' dtype instead.\"\n            )",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringArray._from_sequence#194",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringArray",
        "signature": "pandas.core.arrays.string_.StringArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        if dtype:\n            assert dtype == \"string\"\n\n        result = np.asarray(scalars, dtype=\"object\")\n        if copy and result is scalars:\n            result = result.copy()\n\n        # Standardize all missing-like values to NA\n        # TODO: it would be nice to do this in _validate / lib.is_string_array\n        # We are already doing a scan over the values there.\n        na_values = isna(result)\n        if na_values.any():\n            if result is scalars:\n                # force a copy now, if we haven't already\n                result = result.copy()\n            result[na_values] = StringDtype.na_value\n\n        return cls(result)",
        "begin_line": 194,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__#72",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__(self, dtype: Dtype=np.float64, fill_value: Any=None)",
        "snippet": "    def __init__(self, dtype: Dtype = np.float64, fill_value: Any = None):\n\n        if isinstance(dtype, type(self)):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        dtype = pandas_dtype(dtype)\n        if is_string_dtype(dtype):\n            dtype = np.dtype(\"object\")\n\n        if fill_value is None:\n            fill_value = na_value_for_dtype(dtype)\n\n        if not is_scalar(fill_value):\n            raise ValueError(f\"fill_value must be a scalar. Got {fill_value} instead\")\n        self._dtype = dtype\n        self._fill_value = fill_value",
        "begin_line": 72,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00021381227282446012,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._is_boolean#149",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        return is_bool_dtype(self.subtype)",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.type#160",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.type(self)",
        "snippet": "    def type(self):\n        return self.subtype.type",
        "begin_line": 160,
        "end_line": 161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype#164",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        return self._dtype",
        "begin_line": 164,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#188",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> \"SparseDtype\":\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        msg = f\"Cannot construct a 'SparseDtype' from '{string}'\"\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError as err:\n                raise TypeError(msg) from err\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    f\"Cannot construct a 'SparseDtype' from '{string}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg)\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 188,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001417233560090703,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.shape#71",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return self._ndarray.shape",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0001448855404230658,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.__len__#74",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return self.shape[0]",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00014539110206455364,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.ndim#78",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.shape)",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.00016404199475065617,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    },
    {
        "name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.reshape#89",
        "src_path": "pandas/core/arrays/_mixins.py",
        "class_name": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray",
        "signature": "pandas.core.arrays._mixins.NDArrayBackedExtensionArray.reshape(self: _T, *args, **kwargs)",
        "snippet": "    def reshape(self: _T, *args, **kwargs) -> _T:\n        new_data = self._ndarray.reshape(*args, **kwargs)\n        return self._from_backing_data(new_data)",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000211954217888936,
            "pseudo_dstar_susp": 0.000211954217888936,
            "pseudo_tarantula_susp": 0.000211954217888936,
            "pseudo_op2_susp": 0.0003259452411994785,
            "pseudo_barinel_susp": 0.000211954217888936
        }
    }
]