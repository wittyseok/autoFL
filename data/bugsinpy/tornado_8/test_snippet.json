[
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.initialize#41",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.initialize(self, close_future, compression_options=None)",
        "snippet": "    def initialize(self, close_future, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.get_compression_options#45",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.get_compression_options(self)",
        "snippet": "    def get_compression_options(self):\n        return self.compression_options",
        "begin_line": 45,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.on_close#48",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.on_close(self)",
        "snippet": "    def on_close(self):\n        self.close_future.set_result((self.close_code, self.close_reason))",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.EchoHandler.on_message#53",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.EchoHandler",
        "signature": "tornado.test.websocket_test.EchoHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        try:\n            self.write_message(message, isinstance(message, bytes))\n        except StreamClosedError:\n            pass",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ErrorInOnMessageHandler.on_message#61",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ErrorInOnMessageHandler",
        "signature": "tornado.test.websocket_test.ErrorInOnMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        1 / 0",
        "begin_line": 61,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderHandler.open#66",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderHandler",
        "signature": "tornado.test.websocket_test.HeaderHandler.open(self)",
        "snippet": "    def open(self):\n        methods_to_test = [\n            functools.partial(self.write, 'This should not work'),\n            functools.partial(self.redirect, 'http://localhost/elsewhere'),\n            functools.partial(self.set_header, 'X-Test', ''),\n            functools.partial(self.set_cookie, 'Chocolate', 'Chip'),\n            functools.partial(self.set_status, 503),\n            self.flush,\n            self.finish,\n        ]\n        for method in methods_to_test:\n            try:\n                # In a websocket context, many RequestHandler methods\n                # raise RuntimeErrors.\n                method()\n                raise Exception(\"did not get expected exception\")\n            except RuntimeError:\n                pass\n        self.write_message(self.request.headers.get('X-Test', ''))",
        "begin_line": 66,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderEchoHandler.set_default_headers#88",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderEchoHandler",
        "signature": "tornado.test.websocket_test.HeaderEchoHandler.set_default_headers(self)",
        "snippet": "    def set_default_headers(self):\n        self.set_header(\"X-Extra-Response-Header\", \"Extra-Response-Value\")",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderEchoHandler.prepare#91",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderEchoHandler",
        "signature": "tornado.test.websocket_test.HeaderEchoHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        for k, v in self.request.headers.get_all():\n            if k.lower().startswith('x-test'):\n                self.set_header(k, v)",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.NonWebSocketHandler.get#98",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.NonWebSocketHandler",
        "signature": "tornado.test.websocket_test.NonWebSocketHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('ok')",
        "begin_line": 98,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CloseReasonHandler.open#103",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CloseReasonHandler",
        "signature": "tornado.test.websocket_test.CloseReasonHandler.open(self)",
        "snippet": "    def open(self):\n        self.on_close_called = False\n        self.close(1001, \"goodbye\")",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.AsyncPrepareHandler.prepare#110",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.AsyncPrepareHandler",
        "signature": "tornado.test.websocket_test.AsyncPrepareHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        yield gen.moment",
        "begin_line": 110,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.AsyncPrepareHandler.on_message#113",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.AsyncPrepareHandler",
        "signature": "tornado.test.websocket_test.AsyncPrepareHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(message)",
        "begin_line": 113,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PathArgsHandler.open#118",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PathArgsHandler",
        "signature": "tornado.test.websocket_test.PathArgsHandler.open(self, arg)",
        "snippet": "    def open(self, arg):\n        self.write_message(arg)",
        "begin_line": 118,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CoroutineOnMessageHandler.initialize#123",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.CoroutineOnMessageHandler.initialize(self, close_future, compression_options=None)",
        "snippet": "    def initialize(self, close_future, compression_options=None):\n        super(CoroutineOnMessageHandler, self).initialize(close_future,\n                                                          compression_options)\n        self.sleeping = 0",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CoroutineOnMessageHandler.on_message#129",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.CoroutineOnMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        if self.sleeping > 0:\n            self.write_message('another coroutine is already sleeping')\n        self.sleeping += 1\n        yield gen.sleep(0.01)\n        self.sleeping -= 1\n        self.write_message(message)",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.RenderMessageHandler.on_message#139",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.RenderMessageHandler",
        "signature": "tornado.test.websocket_test.RenderMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(self.render_string('message.html', message=message))",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect#145",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketBaseTestCase",
        "signature": "tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect(self, path, **kwargs)",
        "snippet": "    def ws_connect(self, path, **kwargs):\n        ws = yield websocket_connect(\n            'ws://127.0.0.1:%d%s' % (self.get_http_port(), path),\n            **kwargs)\n        raise gen.Return(ws)",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketBaseTestCase.close#152",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketBaseTestCase",
        "signature": "tornado.test.websocket_test.WebSocketBaseTestCase.close(self, ws)",
        "snippet": "    def close(self, ws):\n        \"\"\"Close a websocket connection and wait for the server side.\n\n        If we don't wait here, there are sometimes leak warnings in the\n        tests.\n        \"\"\"\n        ws.close()\n        yield self.close_future",
        "begin_line": 152,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.get_app#163",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/echo', EchoHandler, dict(close_future=self.close_future)),\n            ('/non_ws', NonWebSocketHandler),\n            ('/header', HeaderHandler, dict(close_future=self.close_future)),\n            ('/header_echo', HeaderEchoHandler,\n             dict(close_future=self.close_future)),\n            ('/close_reason', CloseReasonHandler,\n             dict(close_future=self.close_future)),\n            ('/error_in_on_message', ErrorInOnMessageHandler,\n             dict(close_future=self.close_future)),\n            ('/async_prepare', AsyncPrepareHandler,\n             dict(close_future=self.close_future)),\n            ('/path_args/(.*)', PathArgsHandler,\n             dict(close_future=self.close_future)),\n            ('/coroutine', CoroutineOnMessageHandler,\n             dict(close_future=self.close_future)),\n            ('/render', RenderMessageHandler,\n             dict(close_future=self.close_future)),\n        ], template_loader=DictLoader({\n            'message.html': '<b>{{ message }}</b>',\n        }))",
        "begin_line": 163,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.tearDown#187",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(WebSocketTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_http_request#191",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_http_request(self)",
        "snippet": "    def test_http_request(self):\n        # WS server, HTTP client.\n        response = self.fetch('/echo')\n        self.assertEqual(response.code, 400)",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_missing_websocket_key#196",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_missing_websocket_key(self)",
        "snippet": "    def test_missing_websocket_key(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '13'})\n        self.assertEqual(response.code, 400)",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version#203",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version(self)",
        "snippet": "    def test_bad_websocket_version(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '12'})\n        self.assertEqual(response.code, 426)",
        "begin_line": 203,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_gen#211",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_gen(self)",
        "snippet": "    def test_websocket_gen(self):\n        ws = yield self.ws_connect('/echo')\n        yield ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks#218",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks(self)",
        "snippet": "    def test_websocket_callbacks(self):\n        websocket_connect(\n            'ws://127.0.0.1:%d/echo' % self.get_http_port(),\n            callback=self.stop)\n        ws = self.wait().result()\n        ws.write_message('hello')\n        ws.read_message(self.stop)\n        response = self.wait().result()\n        self.assertEqual(response, 'hello')\n        self.close_future.add_done_callback(lambda f: self.stop())\n        ws.close()\n        self.wait()",
        "begin_line": 218,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_binary_message#232",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_binary_message(self)",
        "snippet": "    def test_binary_message(self):\n        ws = yield self.ws_connect('/echo')\n        ws.write_message(b'hello \\xe9', binary=True)\n        response = yield ws.read_message()\n        self.assertEqual(response, b'hello \\xe9')\n        yield self.close(ws)",
        "begin_line": 232,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_unicode_message#240",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_unicode_message(self)",
        "snippet": "    def test_unicode_message(self):\n        ws = yield self.ws_connect('/echo')\n        ws.write_message(u'hello \\u00e9')\n        response = yield ws.read_message()\n        self.assertEqual(response, u'hello \\u00e9')\n        yield self.close(ws)",
        "begin_line": 240,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_render_message#248",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_render_message(self)",
        "snippet": "    def test_render_message(self):\n        ws = yield self.ws_connect('/render')\n        ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, '<b>hello</b>')\n        yield self.close(ws)",
        "begin_line": 248,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_error_in_on_message#256",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_error_in_on_message(self)",
        "snippet": "    def test_error_in_on_message(self):\n        ws = yield self.ws_connect('/error_in_on_message')\n        ws.write_message('hello')\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = yield ws.read_message()\n        self.assertIs(response, None)\n        yield self.close(ws)",
        "begin_line": 256,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail#265",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail(self)",
        "snippet": "    def test_websocket_http_fail(self):\n        with self.assertRaises(HTTPError) as cm:\n            yield self.ws_connect('/notfound')\n        self.assertEqual(cm.exception.code, 404)",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_success#271",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_success(self)",
        "snippet": "    def test_websocket_http_success(self):\n        with self.assertRaises(WebSocketError):\n            yield self.ws_connect('/non_ws')",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail#276",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail(self)",
        "snippet": "    def test_websocket_network_fail(self):\n        sock, port = bind_unused_port()\n        sock.close()\n        with self.assertRaises(IOError):\n            with ExpectLog(gen_log, \".*\"):\n                yield websocket_connect(\n                    'ws://127.0.0.1:%d/' % port,\n                    connect_timeout=3600)",
        "begin_line": 276,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data#286",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data(self)",
        "snippet": "    def test_websocket_close_buffered_data(self):\n        ws = yield websocket_connect(\n            'ws://127.0.0.1:%d/echo' % self.get_http_port())\n        ws.write_message('hello')\n        ws.write_message('world')\n        # Close the underlying stream.\n        ws.stream.close()\n        yield self.close_future",
        "begin_line": 286,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_headers#296",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_headers(self)",
        "snippet": "    def test_websocket_headers(self):\n        # Ensure that arbitrary headers can be passed through websocket_connect.\n        ws = yield websocket_connect(\n            HTTPRequest('ws://127.0.0.1:%d/header' % self.get_http_port(),\n                        headers={'X-Test': 'hello'}))\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 296,
        "end_line": 303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo#306",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo(self)",
        "snippet": "    def test_websocket_header_echo(self):\n        # Ensure that headers can be returned in the response.\n        # Specifically, that arbitrary headers passed through websocket_connect\n        # can be returned.\n        ws = yield websocket_connect(\n            HTTPRequest('ws://127.0.0.1:%d/header_echo' % self.get_http_port(),\n                        headers={'X-Test-Hello': 'hello'}))\n        self.assertEqual(ws.headers.get('X-Test-Hello'), 'hello')\n        self.assertEqual(ws.headers.get('X-Extra-Response-Header'), 'Extra-Response-Value')\n        yield self.close(ws)",
        "begin_line": 306,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_server_close_reason#318",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_server_close_reason(self)",
        "snippet": "    def test_server_close_reason(self):\n        ws = yield self.ws_connect('/close_reason')\n        msg = yield ws.read_message()\n        # A message of None means the other side closed the connection.\n        self.assertIs(msg, None)\n        self.assertEqual(ws.close_code, 1001)\n        self.assertEqual(ws.close_reason, \"goodbye\")\n        # The on_close callback is called no matter which side closed.\n        code, reason = yield self.close_future\n        # The client echoed the close code it received to the server,\n        # so the server's close code (returned via close_future) is\n        # the same.\n        self.assertEqual(code, 1001)",
        "begin_line": 318,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_client_close_reason#333",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_client_close_reason(self)",
        "snippet": "    def test_client_close_reason(self):\n        ws = yield self.ws_connect('/echo')\n        ws.close(1001, 'goodbye')\n        code, reason = yield self.close_future\n        self.assertEqual(code, 1001)\n        self.assertEqual(reason, 'goodbye')",
        "begin_line": 333,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_write_after_close#341",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_write_after_close(self)",
        "snippet": "    def test_write_after_close(self):\n        ws = yield self.ws_connect('/close_reason')\n        msg = yield ws.read_message()\n        self.assertIs(msg, None)\n        with self.assertRaises(StreamClosedError):\n            ws.write_message('hello')",
        "begin_line": 341,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_async_prepare#349",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_async_prepare(self)",
        "snippet": "    def test_async_prepare(self):\n        # Previously, an async prepare method triggered a bug that would\n        # result in a timeout on test shutdown (and a memory leak).\n        ws = yield self.ws_connect('/async_prepare')\n        ws.write_message('hello')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello')",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_path_args#358",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_path_args(self)",
        "snippet": "    def test_path_args(self):\n        ws = yield self.ws_connect('/path_args/hello')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello')",
        "begin_line": 358,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_coroutine#364",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_coroutine(self)",
        "snippet": "    def test_coroutine(self):\n        ws = yield self.ws_connect('/coroutine')\n        # Send both messages immediately, coroutine must process one at a time.\n        yield ws.write_message('hello1')\n        yield ws.write_message('hello2')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello1')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello2')",
        "begin_line": 364,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path#375",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path(self)",
        "snippet": "    def test_check_origin_valid_no_path(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        headers = {'Origin': 'http://127.0.0.1:%d' % port}\n\n        ws = yield websocket_connect(HTTPRequest(url, headers=headers))\n        ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 375,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path#388",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path(self)",
        "snippet": "    def test_check_origin_valid_with_path(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        headers = {'Origin': 'http://127.0.0.1:%d/something' % port}\n\n        ws = yield websocket_connect(HTTPRequest(url, headers=headers))\n        ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 388,
        "end_line": 398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url#401",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url(self)",
        "snippet": "    def test_check_origin_invalid_partial_url(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        headers = {'Origin': '127.0.0.1:%d' % port}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers))\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 401,
        "end_line": 409,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid#412",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid(self)",
        "snippet": "    def test_check_origin_invalid(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        # Host is 127.0.0.1, which should not be accessible from some other\n        # domain\n        headers = {'Origin': 'http://somewhereelse.com'}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers))\n\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 412,
        "end_line": 423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains#426",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains(self)",
        "snippet": "    def test_check_origin_invalid_subdomains(self):\n        port = self.get_http_port()\n\n        url = 'ws://localhost:%d/echo' % port\n        # Subdomains should be disallowed by default.  If we could pass a\n        # resolver to websocket_connect we could test sibling domains as well.\n        headers = {'Origin': 'http://subtenant.localhost'}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers))\n\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 426,
        "end_line": 437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app#457",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest",
        "signature": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/native', NativeCoroutineOnMessageHandler,\n             dict(close_future=self.close_future))])",
        "begin_line": 457,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine#465",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest",
        "signature": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine(self)",
        "snippet": "    def test_native_coroutine(self):\n        ws = yield self.ws_connect('/native')\n        # Send both messages immediately, coroutine must process one at a time.\n        yield ws.write_message('hello1')\n        yield ws.write_message('hello2')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello1')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello2')",
        "begin_line": 465,
        "end_line": 473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_app#479",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/echo', EchoHandler, dict(\n                close_future=self.close_future,\n                compression_options=self.get_server_compression_options())),\n        ])",
        "begin_line": 479,
        "end_line": 485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options#487",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return None",
        "begin_line": 487,
        "end_line": 488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options#490",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return None",
        "begin_line": 490,
        "end_line": 491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.test_message_sizes#494",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.test_message_sizes(self)",
        "snippet": "    def test_message_sizes(self):\n        ws = yield self.ws_connect(\n            '/echo',\n            compression_options=self.get_client_compression_options())\n        # Send the same message three times so we can measure the\n        # effect of the context_takeover options.\n        for i in range(3):\n            ws.write_message(self.MESSAGE)\n            response = yield ws.read_message()\n            self.assertEqual(response, self.MESSAGE)\n        self.assertEqual(ws.protocol._message_bytes_out, len(self.MESSAGE) * 3)\n        self.assertEqual(ws.protocol._message_bytes_in, len(self.MESSAGE) * 3)\n        self.verify_wire_bytes(ws.protocol._wire_bytes_in,\n                               ws.protocol._wire_bytes_out)\n        yield self.close(ws)",
        "begin_line": 494,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes#513",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.UncompressedTestMixin",
        "signature": "tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes(self, bytes_in, bytes_out)",
        "snippet": "    def verify_wire_bytes(self, bytes_in, bytes_out):\n        # Bytes out includes the 4-byte mask key per message.\n        self.assertEqual(bytes_out, 3 * (len(self.MESSAGE) + 6))\n        self.assertEqual(bytes_in, 3 * (len(self.MESSAGE) + 2))",
        "begin_line": 513,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options#525",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerOnlyCompressionTest",
        "signature": "tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return {}",
        "begin_line": 525,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options#530",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientOnlyCompressionTest",
        "signature": "tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return {}",
        "begin_line": 530,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options#535",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return {}",
        "begin_line": 535,
        "end_line": 536,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options#538",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return {}",
        "begin_line": 538,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes#541",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes(self, bytes_in, bytes_out)",
        "snippet": "    def verify_wire_bytes(self, bytes_in, bytes_out):\n        self.assertLess(bytes_out, 3 * (len(self.MESSAGE) + 6))\n        self.assertLess(bytes_in, 3 * (len(self.MESSAGE) + 2))\n        # Bytes out includes the 4 bytes mask key per message.\n        self.assertEqual(bytes_out, bytes_in + 12)",
        "begin_line": 541,
        "end_line": 545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaskFunctionMixin.test_mask#550",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaskFunctionMixin",
        "signature": "tornado.test.websocket_test.MaskFunctionMixin.test_mask(self)",
        "snippet": "    def test_mask(self):\n        self.assertEqual(self.mask(b'abcd', b''), b'')\n        self.assertEqual(self.mask(b'abcd', b'b'), b'\\x03')\n        self.assertEqual(self.mask(b'abcd', b'54321'), b'TVPVP')\n        self.assertEqual(self.mask(b'ZXCV', b'98765432'), b'c`t`olpd')\n        # Include test cases with \\x00 bytes (to ensure that the C\n        # extension isn't depending on null-terminated strings) and\n        # bytes with the high bit set (to smoke out signedness issues).\n        self.assertEqual(self.mask(b'\\x00\\x01\\x02\\x03',\n                                   b'\\xff\\xfb\\xfd\\xfc\\xfe\\xfa'),\n                         b'\\xff\\xfa\\xff\\xff\\xfe\\xfb')\n        self.assertEqual(self.mask(b'\\xff\\xfb\\xfd\\xfc',\n                                   b'\\x00\\x01\\x02\\x03\\x04\\x05'),\n                         b'\\xff\\xfa\\xff\\xff\\xfb\\xfe')",
        "begin_line": 550,
        "end_line": 563,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PythonMaskFunctionTest.mask#567",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PythonMaskFunctionTest",
        "signature": "tornado.test.websocket_test.PythonMaskFunctionTest.mask(self, mask, data)",
        "snippet": "    def mask(self, mask, data):\n        return _websocket_mask_python(mask, data)",
        "begin_line": 567,
        "end_line": 568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CythonMaskFunctionTest.mask#573",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CythonMaskFunctionTest",
        "signature": "tornado.test.websocket_test.CythonMaskFunctionTest.mask(self, mask, data)",
        "snippet": "    def mask(self, mask, data):\n        return speedups.websocket_mask(mask, data)",
        "begin_line": 573,
        "end_line": 574,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerPeriodicPingTest.get_app#578",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ServerPeriodicPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_pong(self, data):\n                self.write_message(\"got pong\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ], websocket_ping_interval=0.01)",
        "begin_line": 578,
        "end_line": 586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#578",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_pong(self, data):\n                self.write_message(\"got pong\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ], websocket_ping_interval=0.01)",
        "begin_line": 578,
        "end_line": 586,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_pong#580",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_pong(self, data)",
        "snippet": "            def on_pong(self, data):\n                self.write_message(\"got pong\")",
        "begin_line": 580,
        "end_line": 581,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping#589",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping(self)",
        "snippet": "    def test_server_ping(self):\n        ws = yield self.ws_connect('/')\n        for i in range(3):\n            response = yield ws.read_message()\n            self.assertEqual(response, \"got pong\")\n        yield self.close(ws)",
        "begin_line": 589,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientPeriodicPingTest.get_app#599",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ClientPeriodicPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(\"got ping\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ])",
        "begin_line": 599,
        "end_line": 607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#599",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(\"got ping\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ])",
        "begin_line": 599,
        "end_line": 607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_ping#601",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_ping(self, data)",
        "snippet": "            def on_ping(self, data):\n                self.write_message(\"got ping\")",
        "begin_line": 601,
        "end_line": 602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping#610",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping(self)",
        "snippet": "    def test_client_ping(self):\n        ws = yield self.ws_connect('/', ping_interval=0.01)\n        for i in range(3):\n            response = yield ws.read_message()\n            self.assertEqual(response, \"got ping\")\n        yield self.close(ws)",
        "begin_line": 610,
        "end_line": 615,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaxMessageSizeTest.get_app#620",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaxMessageSizeTest",
        "signature": "tornado.test.websocket_test.MaxMessageSizeTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/', EchoHandler, dict(close_future=self.close_future)),\n        ], websocket_max_message_size=1024)",
        "begin_line": 620,
        "end_line": 624,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaxMessageSizeTest.test_large_message#627",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaxMessageSizeTest",
        "signature": "tornado.test.websocket_test.MaxMessageSizeTest.test_large_message(self)",
        "snippet": "    def test_large_message(self):\n        ws = yield self.ws_connect('/')\n\n        # Write a message that is allowed.\n        msg = 'a' * 1024\n        ws.write_message(msg)\n        resp = yield ws.read_message()\n        self.assertEqual(resp, msg)\n\n        # Write a message that is too large.\n        ws.write_message(msg + 'b')\n        resp = yield ws.read_message()\n        # A message of None means the other side closed the connection.\n        self.assertIs(resp, None)\n        self.assertEqual(ws.close_code, 1009)\n        self.assertEqual(ws.close_reason, \"message too big\")",
        "begin_line": 627,
        "end_line": 642,
        "comment": "",
        "is_bug": false
    }
]