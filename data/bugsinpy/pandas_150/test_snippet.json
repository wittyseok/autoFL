[
    {
        "name": "pandas.tests.dtypes.test_missing.test_notna_notnull#30",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing",
        "signature": "pandas.tests.dtypes.test_missing.test_notna_notnull(notna_f)",
        "snippet": "def test_notna_notnull(notna_f):\n    assert notna_f(1.0)\n    assert not notna_f(None)\n    assert not notna_f(np.NaN)\n\n    with cf.option_context(\"mode.use_inf_as_na\", False):\n        assert notna_f(np.inf)\n        assert notna_f(-np.inf)\n\n        arr = np.array([1.5, np.inf, 3.5, -np.inf])\n        result = notna_f(arr)\n        assert result.all()\n\n    with cf.option_context(\"mode.use_inf_as_na\", True):\n        assert not notna_f(np.inf)\n        assert not notna_f(-np.inf)\n\n        arr = np.array([1.5, np.inf, 3.5, -np.inf])\n        result = notna_f(arr)\n        assert result.sum() == 2\n\n    with cf.option_context(\"mode.use_inf_as_na\", False):\n        for s in [\n            tm.makeFloatSeries(),\n            tm.makeStringSeries(),\n            tm.makeObjectSeries(),\n            tm.makeTimeSeries(),\n            tm.makePeriodSeries(),\n        ]:\n            assert isinstance(notna_f(s), Series)",
        "begin_line": 30,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_0d_array#63",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_0d_array(self)",
        "snippet": "    def test_0d_array(self):\n        assert isna(np.array(np.nan))\n        assert not isna(np.array(0.0))\n        assert not isna(np.array(0))\n        # test object dtype\n        assert isna(np.array(np.nan, dtype=object))\n        assert not isna(np.array(0.0, dtype=object))\n        assert not isna(np.array(0, dtype=object))",
        "begin_line": 63,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_empty_object#72",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_empty_object(self)",
        "snippet": "    def test_empty_object(self):\n\n        for shape in [(4, 0), (4,)]:\n            arr = np.empty(shape=shape, dtype=object)\n            result = isna(arr)\n            expected = np.ones(shape=shape, dtype=bool)\n            tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_isnull#81",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_isnull(self, isna_f)",
        "snippet": "    def test_isna_isnull(self, isna_f):\n        assert not isna_f(1.0)\n        assert isna_f(None)\n        assert isna_f(np.NaN)\n        assert float(\"nan\")\n        assert not isna_f(np.inf)\n        assert not isna_f(-np.inf)\n\n        # type\n        assert not isna_f(type(pd.Series()))\n        assert not isna_f(type(pd.DataFrame()))\n\n        # series\n        for s in [\n            tm.makeFloatSeries(),\n            tm.makeStringSeries(),\n            tm.makeObjectSeries(),\n            tm.makeTimeSeries(),\n            tm.makePeriodSeries(),\n        ]:\n            assert isinstance(isna_f(s), Series)\n\n        # frame\n        for df in [\n            tm.makeTimeDataFrame(),\n            tm.makePeriodFrame(),\n            tm.makeMixedDataFrame(),\n        ]:\n            result = isna_f(df)\n            expected = df.apply(isna_f)\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 81,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_lists#113",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_lists(self)",
        "snippet": "    def test_isna_lists(self):\n        result = isna([[False]])\n        exp = np.array([[False]])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = isna([[1], [2]])\n        exp = np.array([[False], [False]])\n        tm.assert_numpy_array_equal(result, exp)\n\n        # list of strings / unicode\n        result = isna([\"foo\", \"bar\"])\n        exp = np.array([False, False])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = isna([\"foo\", \"bar\"])\n        exp = np.array([False, False])\n        tm.assert_numpy_array_equal(result, exp)\n\n        # GH20675\n        result = isna([np.NaN, \"world\"])\n        exp = np.array([True, False])\n        tm.assert_numpy_array_equal(result, exp)",
        "begin_line": 113,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_nat#136",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_nat(self)",
        "snippet": "    def test_isna_nat(self):\n        result = isna([NaT])\n        exp = np.array([True])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = isna(np.array([NaT], dtype=object))\n        exp = np.array([True])\n        tm.assert_numpy_array_equal(result, exp)",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_numpy_nat#145",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_numpy_nat(self)",
        "snippet": "    def test_isna_numpy_nat(self):\n        arr = np.array(\n            [\n                NaT,\n                np.datetime64(\"NaT\"),\n                np.timedelta64(\"NaT\"),\n                np.datetime64(\"NaT\", \"s\"),\n            ]\n        )\n        result = isna(arr)\n        expected = np.array([True] * 4)\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 145,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_datetime#158",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_isna_datetime(self)",
        "snippet": "    def test_isna_datetime(self):\n        assert not isna(datetime.now())\n        assert notna(datetime.now())\n\n        idx = date_range(\"1/1/1990\", periods=20)\n        exp = np.ones(len(idx), dtype=bool)\n        tm.assert_numpy_array_equal(notna(idx), exp)\n\n        idx = np.asarray(idx)\n        idx[0] = iNaT\n        idx = DatetimeIndex(idx)\n        mask = isna(idx)\n        assert mask[0]\n        exp = np.array([True] + [False] * (len(idx) - 1), dtype=bool)\n        tm.assert_numpy_array_equal(mask, exp)\n\n        # GH 9129\n        pidx = idx.to_period(freq=\"M\")\n        mask = isna(pidx)\n        assert mask[0]\n        exp = np.array([True] + [False] * (len(idx) - 1), dtype=bool)\n        tm.assert_numpy_array_equal(mask, exp)\n\n        mask = isna(pidx[1:])\n        exp = np.zeros(len(mask), dtype=bool)\n        tm.assert_numpy_array_equal(mask, exp)",
        "begin_line": 158,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_complex#201",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_complex(self, value, expected)",
        "snippet": "    def test_complex(self, value, expected):\n        result = isna(value)\n        if is_scalar(result):\n            assert result is expected\n        else:\n            tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 201,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_datetime_other_units#208",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_datetime_other_units(self)",
        "snippet": "    def test_datetime_other_units(self):\n        idx = pd.DatetimeIndex([\"2011-01-01\", \"NaT\", \"2011-01-02\"])\n        exp = np.array([False, True, False])\n        tm.assert_numpy_array_equal(isna(idx), exp)\n        tm.assert_numpy_array_equal(notna(idx), ~exp)\n        tm.assert_numpy_array_equal(isna(idx.values), exp)\n        tm.assert_numpy_array_equal(notna(idx.values), ~exp)\n\n        for dtype in [\n            \"datetime64[D]\",\n            \"datetime64[h]\",\n            \"datetime64[m]\",\n            \"datetime64[s]\",\n            \"datetime64[ms]\",\n            \"datetime64[us]\",\n            \"datetime64[ns]\",\n        ]:\n            values = idx.values.astype(dtype)\n\n            exp = np.array([False, True, False])\n            tm.assert_numpy_array_equal(isna(values), exp)\n            tm.assert_numpy_array_equal(notna(values), ~exp)\n\n            exp = pd.Series([False, True, False])\n            s = pd.Series(values)\n            tm.assert_series_equal(isna(s), exp)\n            tm.assert_series_equal(notna(s), ~exp)\n            s = pd.Series(values, dtype=object)\n            tm.assert_series_equal(isna(s), exp)\n            tm.assert_series_equal(notna(s), ~exp)",
        "begin_line": 208,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_timedelta_other_units#239",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_timedelta_other_units(self)",
        "snippet": "    def test_timedelta_other_units(self):\n        idx = pd.TimedeltaIndex([\"1 days\", \"NaT\", \"2 days\"])\n        exp = np.array([False, True, False])\n        tm.assert_numpy_array_equal(isna(idx), exp)\n        tm.assert_numpy_array_equal(notna(idx), ~exp)\n        tm.assert_numpy_array_equal(isna(idx.values), exp)\n        tm.assert_numpy_array_equal(notna(idx.values), ~exp)\n\n        for dtype in [\n            \"timedelta64[D]\",\n            \"timedelta64[h]\",\n            \"timedelta64[m]\",\n            \"timedelta64[s]\",\n            \"timedelta64[ms]\",\n            \"timedelta64[us]\",\n            \"timedelta64[ns]\",\n        ]:\n            values = idx.values.astype(dtype)\n\n            exp = np.array([False, True, False])\n            tm.assert_numpy_array_equal(isna(values), exp)\n            tm.assert_numpy_array_equal(notna(values), ~exp)\n\n            exp = pd.Series([False, True, False])\n            s = pd.Series(values)\n            tm.assert_series_equal(isna(s), exp)\n            tm.assert_series_equal(notna(s), ~exp)\n            s = pd.Series(values, dtype=object)\n            tm.assert_series_equal(isna(s), exp)\n            tm.assert_series_equal(notna(s), ~exp)",
        "begin_line": 239,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestIsNA.test_period#270",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestIsNA",
        "signature": "pandas.tests.dtypes.test_missing.TestIsNA.test_period(self)",
        "snippet": "    def test_period(self):\n        idx = pd.PeriodIndex([\"2011-01\", \"NaT\", \"2012-01\"], freq=\"M\")\n        exp = np.array([False, True, False])\n        tm.assert_numpy_array_equal(isna(idx), exp)\n        tm.assert_numpy_array_equal(notna(idx), ~exp)\n\n        exp = pd.Series([False, True, False])\n        s = pd.Series(idx)\n        tm.assert_series_equal(isna(s), exp)\n        tm.assert_series_equal(notna(s), ~exp)\n        s = pd.Series(idx, dtype=object)\n        tm.assert_series_equal(isna(s), exp)\n        tm.assert_series_equal(notna(s), ~exp)",
        "begin_line": 270,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.test_array_equivalent#285",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing",
        "signature": "pandas.tests.dtypes.test_missing.test_array_equivalent()",
        "snippet": "def test_array_equivalent():\n    assert array_equivalent(np.array([np.nan, np.nan]), np.array([np.nan, np.nan]))\n    assert array_equivalent(\n        np.array([np.nan, 1, np.nan]), np.array([np.nan, 1, np.nan])\n    )\n    assert array_equivalent(\n        np.array([np.nan, None], dtype=\"object\"),\n        np.array([np.nan, None], dtype=\"object\"),\n    )\n    assert array_equivalent(\n        np.array([np.nan, 1 + 1j], dtype=\"complex\"),\n        np.array([np.nan, 1 + 1j], dtype=\"complex\"),\n    )\n    assert not array_equivalent(\n        np.array([np.nan, 1 + 1j], dtype=\"complex\"),\n        np.array([np.nan, 1 + 2j], dtype=\"complex\"),\n    )\n    assert not array_equivalent(\n        np.array([np.nan, 1, np.nan]), np.array([np.nan, 2, np.nan])\n    )\n    assert not array_equivalent(np.array([\"a\", \"b\", \"c\", \"d\"]), np.array([\"e\", \"e\"]))\n    assert array_equivalent(Float64Index([0, np.nan]), Float64Index([0, np.nan]))\n    assert not array_equivalent(Float64Index([0, np.nan]), Float64Index([1, np.nan]))\n    assert array_equivalent(DatetimeIndex([0, np.nan]), DatetimeIndex([0, np.nan]))\n    assert not array_equivalent(DatetimeIndex([0, np.nan]), DatetimeIndex([1, np.nan]))\n    assert array_equivalent(TimedeltaIndex([0, np.nan]), TimedeltaIndex([0, np.nan]))\n    assert not array_equivalent(\n        TimedeltaIndex([0, np.nan]), TimedeltaIndex([1, np.nan])\n    )\n    with catch_warnings():\n        filterwarnings(\"ignore\", \"Converting timezone\", FutureWarning)\n        assert array_equivalent(\n            DatetimeIndex([0, np.nan], tz=\"US/Eastern\"),\n            DatetimeIndex([0, np.nan], tz=\"US/Eastern\"),\n        )\n        assert not array_equivalent(\n            DatetimeIndex([0, np.nan], tz=\"US/Eastern\"),\n            DatetimeIndex([1, np.nan], tz=\"US/Eastern\"),\n        )\n        assert not array_equivalent(\n            DatetimeIndex([0, np.nan]), DatetimeIndex([0, np.nan], tz=\"US/Eastern\")\n        )\n        assert not array_equivalent(\n            DatetimeIndex([0, np.nan], tz=\"CET\"),\n            DatetimeIndex([0, np.nan], tz=\"US/Eastern\"),\n        )\n\n    assert not array_equivalent(DatetimeIndex([0, np.nan]), TimedeltaIndex([0, np.nan]))",
        "begin_line": 285,
        "end_line": 332,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.test_array_equivalent_compat#335",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing",
        "signature": "pandas.tests.dtypes.test_missing.test_array_equivalent_compat()",
        "snippet": "def test_array_equivalent_compat():\n    # see gh-13388\n    m = np.array([(1, 2), (3, 4)], dtype=[(\"a\", int), (\"b\", float)])\n    n = np.array([(1, 2), (3, 4)], dtype=[(\"a\", int), (\"b\", float)])\n    assert array_equivalent(m, n, strict_nan=True)\n    assert array_equivalent(m, n, strict_nan=False)\n\n    m = np.array([(1, 2), (3, 4)], dtype=[(\"a\", int), (\"b\", float)])\n    n = np.array([(1, 2), (4, 3)], dtype=[(\"a\", int), (\"b\", float)])\n    assert not array_equivalent(m, n, strict_nan=True)\n    assert not array_equivalent(m, n, strict_nan=False)\n\n    m = np.array([(1, 2), (3, 4)], dtype=[(\"a\", int), (\"b\", float)])\n    n = np.array([(1, 2), (3, 4)], dtype=[(\"b\", int), (\"a\", float)])\n    assert not array_equivalent(m, n, strict_nan=True)\n    assert not array_equivalent(m, n, strict_nan=False)",
        "begin_line": 335,
        "end_line": 350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.test_array_equivalent_str#353",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing",
        "signature": "pandas.tests.dtypes.test_missing.test_array_equivalent_str()",
        "snippet": "def test_array_equivalent_str():\n    for dtype in [\"O\", \"S\", \"U\"]:\n        assert array_equivalent(\n            np.array([\"A\", \"B\"], dtype=dtype), np.array([\"A\", \"B\"], dtype=dtype)\n        )\n        assert not array_equivalent(\n            np.array([\"A\", \"B\"], dtype=dtype), np.array([\"A\", \"X\"], dtype=dtype)\n        )",
        "begin_line": 353,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.test_array_equivalent_nested#363",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing",
        "signature": "pandas.tests.dtypes.test_missing.test_array_equivalent_nested()",
        "snippet": "def test_array_equivalent_nested():\n    # reached in groupby aggregations, make sure we use np.any when checking\n    #  if the comparison is truthy\n    left = np.array([np.array([50, 70, 90]), np.array([20, 30, 40])], dtype=object)\n    right = np.array([np.array([50, 70, 90]), np.array([20, 30, 40])], dtype=object)\n\n    assert array_equivalent(left, right, strict_nan=True)\n    assert not array_equivalent(left, right[::-1], strict_nan=True)\n\n    left = np.array([np.array([50, 50, 50]), np.array([40, 40, 40])], dtype=object)\n    right = np.array([50, 40])\n    assert not array_equivalent(left, right, strict_nan=True)",
        "begin_line": 363,
        "end_line": 374,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.test_na_value_for_dtype#406",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing",
        "signature": "pandas.tests.dtypes.test_missing.test_na_value_for_dtype(dtype, na_value)",
        "snippet": "def test_na_value_for_dtype(dtype, na_value):\n    result = na_value_for_dtype(dtype)\n    assert result is na_value",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestNAObj._check_behavior#416",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestNAObj",
        "signature": "pandas.tests.dtypes.test_missing.TestNAObj._check_behavior(self, arr, expected)",
        "snippet": "    def _check_behavior(self, arr, expected):\n        for method in TestNAObj._1d_methods:\n            result = getattr(libmissing, method)(arr)\n            tm.assert_numpy_array_equal(result, expected)\n\n        arr = np.atleast_2d(arr)\n        expected = np.atleast_2d(expected)\n\n        for method in TestNAObj._2d_methods:\n            result = getattr(libmissing, method)(arr)\n            tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 416,
        "end_line": 426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestNAObj.test_basic#428",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestNAObj",
        "signature": "pandas.tests.dtypes.test_missing.TestNAObj.test_basic(self)",
        "snippet": "    def test_basic(self):\n        arr = np.array([1, None, \"foo\", -5.1, pd.NaT, np.nan])\n        expected = np.array([False, True, False, False, True, True])\n\n        self._check_behavior(arr, expected)",
        "begin_line": 428,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestNAObj.test_non_obj_dtype#434",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestNAObj",
        "signature": "pandas.tests.dtypes.test_missing.TestNAObj.test_non_obj_dtype(self)",
        "snippet": "    def test_non_obj_dtype(self):\n        arr = np.array([1, 3, np.nan, 5], dtype=float)\n        expected = np.array([False, False, True, False])\n\n        self._check_behavior(arr, expected)",
        "begin_line": 434,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestNAObj.test_empty_arr#440",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestNAObj",
        "signature": "pandas.tests.dtypes.test_missing.TestNAObj.test_empty_arr(self)",
        "snippet": "    def test_empty_arr(self):\n        arr = np.array([])\n        expected = np.array([], dtype=bool)\n\n        self._check_behavior(arr, expected)",
        "begin_line": 440,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestNAObj.test_empty_str_inp#446",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestNAObj",
        "signature": "pandas.tests.dtypes.test_missing.TestNAObj.test_empty_str_inp(self)",
        "snippet": "    def test_empty_str_inp(self):\n        arr = np.array([\"\"])  # empty but not na\n        expected = np.array([False])\n\n        self._check_behavior(arr, expected)",
        "begin_line": 446,
        "end_line": 450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestNAObj.test_empty_like#452",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestNAObj",
        "signature": "pandas.tests.dtypes.test_missing.TestNAObj.test_empty_like(self)",
        "snippet": "    def test_empty_like(self):\n        # see gh-13717: no segfaults!\n        arr = np.empty_like([None])\n        expected = np.array([True])\n\n        self._check_behavior(arr, expected)",
        "begin_line": 452,
        "end_line": 457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestLibMissing.test_checknull#507",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestLibMissing",
        "signature": "pandas.tests.dtypes.test_missing.TestLibMissing.test_checknull(self)",
        "snippet": "    def test_checknull(self):\n        for value in na_vals:\n            assert libmissing.checknull(value)\n\n        for value in inf_vals:\n            assert not libmissing.checknull(value)\n\n        for value in int_na_vals:\n            assert not libmissing.checknull(value)\n\n        for value in sometimes_na_vals:\n            assert not libmissing.checknull(value)\n\n        for value in never_na_vals:\n            assert not libmissing.checknull(value)",
        "begin_line": 507,
        "end_line": 521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestLibMissing.checknull_old#523",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestLibMissing",
        "signature": "pandas.tests.dtypes.test_missing.TestLibMissing.checknull_old(self)",
        "snippet": "    def checknull_old(self):\n        for value in na_vals:\n            assert libmissing.checknull_old(value)\n\n        for value in inf_vals:\n            assert libmissing.checknull_old(value)\n\n        for value in int_na_vals:\n            assert not libmissing.checknull_old(value)\n\n        for value in sometimes_na_vals:\n            assert not libmissing.checknull_old(value)\n\n        for value in never_na_vals:\n            assert not libmissing.checknull_old(value)",
        "begin_line": 523,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_missing.TestLibMissing.test_is_null_datetimelike#539",
        "src_path": "pandas/tests/dtypes/test_missing.py",
        "class_name": "pandas.tests.dtypes.test_missing.TestLibMissing",
        "signature": "pandas.tests.dtypes.test_missing.TestLibMissing.test_is_null_datetimelike(self)",
        "snippet": "    def test_is_null_datetimelike(self):\n        for value in na_vals:\n            assert is_null_datetimelike(value)\n            assert is_null_datetimelike(value, False)\n\n        for value in inf_vals:\n            assert not is_null_datetimelike(value)\n            assert not is_null_datetimelike(value, False)\n\n        for value in int_na_vals:\n            assert is_null_datetimelike(value)\n            assert not is_null_datetimelike(value, False)\n\n        for value in sometimes_na_vals:\n            assert not is_null_datetimelike(value)\n            assert not is_null_datetimelike(value, False)\n\n        for value in never_na_vals:\n            assert not is_null_datetimelike(value)",
        "begin_line": 539,
        "end_line": 557,
        "comment": "",
        "is_bug": false
    }
]