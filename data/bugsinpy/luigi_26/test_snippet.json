[
    {
        "name": "test.helpers.with_config._make_dict#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 90,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#95",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#104",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 104,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#106",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 106,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.TestHadoopJarJob.jar#28",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.TestHadoopJarJob",
        "signature": "test.contrib.hadoop_jar_test.TestHadoopJarJob.jar(self)",
        "snippet": "    def jar(self):\n        return self.path",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.TestRemoteHadoopJarJob.ssh#37",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.TestRemoteHadoopJarJob",
        "signature": "test.contrib.hadoop_jar_test.TestRemoteHadoopJarJob.ssh(self)",
        "snippet": "    def ssh(self):\n        return {\"host\": \"myhost\", \"key_file\": \"file\", \"username\": \"user\"}",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.TestRemoteMissingJarJob.ssh#42",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.TestRemoteMissingJarJob",
        "signature": "test.contrib.hadoop_jar_test.TestRemoteMissingJarJob.ssh(self)",
        "snippet": "    def ssh(self):\n        return {\"host\": \"myhost\", \"key_file\": \"file\"}",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_good#48",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest",
        "signature": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_good(self, mock_job)",
        "snippet": "    def test_good(self, mock_job):\n        mock_job.return_value = None\n        with tempfile.NamedTemporaryFile() as temp_file:\n            task = TestHadoopJarJob(temp_file.name)\n            task.run()",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_missing_jar#55",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest",
        "signature": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_missing_jar(self, mock_job)",
        "snippet": "    def test_missing_jar(self, mock_job):\n        mock_job.return_value = None\n        task = TestMissingJarJob()\n        self.assertRaises(HadoopJarJobError, task.run)",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_remote_job#61",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest",
        "signature": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_remote_job(self, mock_job)",
        "snippet": "    def test_remote_job(self, mock_job):\n        mock_job.return_value = None\n        with tempfile.NamedTemporaryFile() as temp_file:\n            task = TestRemoteHadoopJarJob(temp_file.name)\n            task.run()",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_remote_job_missing_config#68",
        "src_path": "test/contrib/hadoop_jar_test.py",
        "class_name": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest",
        "signature": "test.contrib.hadoop_jar_test.HadoopJarJobTaskTest.test_remote_job_missing_config(self, mock_job)",
        "snippet": "    def test_remote_job_missing_config(self, mock_job):\n        mock_job.return_value = None\n        with tempfile.NamedTemporaryFile() as temp_file:\n            task = TestRemoteMissingJarJob(temp_file.name)\n            self.assertRaises(HadoopJarJobError, task.run)",
        "begin_line": 68,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#47",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#51",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = luigi.contrib.hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        cmd = \"{} --config {}\".format(hadoop_bin, cfg_path)\n        self.stashed_hdfs_client = luigi.configuration.get_config().get('hadoop', 'command', None)\n        luigi.configuration.get_config().set('hadoop', 'command', cmd)",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    }
]