[
    {
        "name": "tqdm._utils._is_utf#13",
        "src_path": "tqdm/_utils.py",
        "class_name": "tqdm._utils",
        "signature": "tqdm._utils._is_utf(encoding)",
        "snippet": "def _is_utf(encoding):\n    return ('U8' == encoding) or ('utf' in encoding) or ('UTF' in encoding)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.0070921985815602835,
            "pseudo_tarantula_susp": 0.0070921985815602835,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0070921985815602835
        }
    },
    {
        "name": "tqdm._utils._supports_unicode#17",
        "src_path": "tqdm/_utils.py",
        "class_name": "tqdm._utils",
        "signature": "tqdm._utils._supports_unicode(file)",
        "snippet": "def _supports_unicode(file):\n    if not getattr(file, 'encoding', None):\n        return False\n    return _is_utf(file.encoding)",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.017543859649122806,
            "pseudo_dstar_susp": 0.017543859649122806,
            "pseudo_tarantula_susp": 0.017857142857142856,
            "pseudo_op2_susp": 0.017543859649122806,
            "pseudo_barinel_susp": 0.017857142857142856
        }
    },
    {
        "name": "tqdm._utils._environ_cols#23",
        "src_path": "tqdm/_utils.py",
        "class_name": "tqdm._utils",
        "signature": "tqdm._utils._environ_cols(file)",
        "snippet": "def _environ_cols(file):  # pragma: no cover\n    try:\n        from termios import TIOCGWINSZ\n        from fcntl import ioctl\n        from array import array\n    except ImportError:\n        return None\n    else:\n        try:\n            return array('h', ioctl(file, TIOCGWINSZ, '\\0' * 8))[1]\n        except:\n            try:\n                from os.environ import get\n            except ImportError:\n                return None\n            else:\n                return int(get('COLUMNS', 1)) - 1",
        "begin_line": 23,
        "end_line": 39,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.0070921985815602835,
            "pseudo_tarantula_susp": 0.0070921985815602835,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0070921985815602835
        }
    },
    {
        "name": "tqdm._tqdm.format_sizeof#24",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm",
        "signature": "tqdm._tqdm.format_sizeof(num, suffix='')",
        "snippet": "def format_sizeof(num, suffix=''):\n    \"\"\"\n    Formats a number (greater than unity) with SI Order of Magnitude prefixes.\n\n    Parameters\n    ----------\n    num  : float\n        Number ( >= 1) to format.\n    suffix  : str, optional\n        Post-postfix [default: ''].\n\n    Returns\n    -------\n    out  : str\n        Number with Order of Magnitude SI unit postfix.\n    \"\"\"\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(num) < 1000.0:\n            if abs(num) < 100.0:\n                if abs(num) < 10.0:\n                    return '{0:1.2f}'.format(num) + unit + suffix\n                return '{0:2.1f}'.format(num) + unit + suffix\n            return '{0:3.0f}'.format(num) + unit + suffix\n        num /= 1000.0\n    return '{0:3.1f}Y'.format(num) + suffix",
        "begin_line": 24,
        "end_line": 48,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 0.034482758620689655,
            "pseudo_tarantula_susp": 1.0,
            "pseudo_op2_susp": 0.034482758620689655,
            "pseudo_barinel_susp": 1.0
        }
    },
    {
        "name": "tqdm._tqdm.format_interval#51",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm",
        "signature": "tqdm._tqdm.format_interval(t)",
        "snippet": "def format_interval(t):\n    \"\"\"\n    Formats a number of seconds as a clock time, [H:]MM:SS\n\n    Parameters\n    ----------\n    t  : int\n        Number of seconds.\n    Returns\n    -------\n    out  : str\n        [H:]MM:SS\n    \"\"\"\n    mins, s = divmod(int(t), 60)\n    h, m = divmod(mins, 60)\n    if h:\n        return '{0:d}:{1:02d}:{2:02d}'.format(h, m, s)\n    else:\n        return '{0:02d}:{1:02d}'.format(m, s)",
        "begin_line": 51,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.04,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.04,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "tqdm._tqdm.format_meter#72",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm",
        "signature": "tqdm._tqdm.format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False)",
        "snippet": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    n  : int\n        Number of finished iterations.\n    total  : int\n        The expected total number of iterations. If meaningless (), only basic\n        progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically\n        resizes the progress meter to stay within this bound\n        [default: None]. The fallback meter width is 10 for the progress bar\n        + no limit for the iterations counter and statistics. If 0, will not\n        print any meter (only stats).\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n    ascii  : bool, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters (1-9 #).\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will printed with an appropriate\n        SI metric prefix (K = 10^3, M = 10^6, etc.) [default: False].\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    # in case the total is wrong (n is above the total), then\n    # we switch to the mode without showing the total prediction\n    # (since ETA would be wrong anyway)\n    if total and n > total:\n        total = None\n\n    elapsed_str = format_interval(elapsed)\n\n    rate_fmt = ((format_sizeof(n / elapsed) if unit_scale else\n                 '{0:5.2f}'.format(n / elapsed)) if elapsed else\n                '?') \\\n        + unit + '/s'\n\n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n\n    if total:\n        frac = n / total\n        percentage = frac * 100\n\n        remaining_str = format_interval(elapsed * (total-n) / n) if n else '?'\n\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n                n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols \\\n            else 10\n\n        if ascii:\n            bar_length, frac_bar_length = divmod(\n                int(frac * N_BARS * 10), 10)\n\n            bar = '#'*bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length \\\n                else ' '\n\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n\n            bar = _unich(0x2588)*bar_length\n            frac_bar = _unich(0x2590 - frac_bar_length) \\\n                if frac_bar_length else ' '\n\n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + \\\n                ' ' * max(N_BARS - bar_length - 1, 0)  # bar end padding\n        else:\n            full_bar = bar + \\\n                ' ' * max(N_BARS - bar_length, 0)  # bar end padding\n\n        return l_bar + full_bar + r_bar\n\n    else:  # no progressbar nor ETA, just progress statistics\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n            n_fmt, unit, elapsed_str, rate_fmt)",
        "begin_line": 72,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.14285714285714285,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.14285714285714285,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "tqdm._tqdm.StatusPrinter#173",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm",
        "signature": "tqdm._tqdm.StatusPrinter(file)",
        "snippet": "def StatusPrinter(file):\n    \"\"\"\n    Manage the printing and in-place updating of a line of characters.\n    Note that if the string is longer than a line, then in-place updating\n    may not work (it will print a new line at each refresh).\n    \"\"\"\n    fp = file\n    last_printed_len = [0]  # closure over mutable variable (fast)\n\n    def print_status(s):\n        len_s = len(s)\n        fp.write('\\r' + s + ' '*max(last_printed_len[0] - len_s, 0))\n        fp.flush()\n        last_printed_len[0] = len_s\n    return print_status",
        "begin_line": 173,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.012658227848101266,
            "pseudo_dstar_susp": 0.012658227848101266,
            "pseudo_tarantula_susp": 0.012658227848101266,
            "pseudo_op2_susp": 0.012658227848101266,
            "pseudo_barinel_susp": 0.012658227848101266
        }
    },
    {
        "name": "tqdm._tqdm.print_status#182",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm",
        "signature": "tqdm._tqdm.print_status(s)",
        "snippet": "    def print_status(s):\n        len_s = len(s)\n        fp.write('\\r' + s + ' '*max(last_printed_len[0] - len_s, 0))\n        fp.flush()\n        last_printed_len[0] = len_s",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.020833333333333332,
            "pseudo_dstar_susp": 0.03571428571428571,
            "pseudo_tarantula_susp": 0.017857142857142856,
            "pseudo_op2_susp": 0.03571428571428571,
            "pseudo_barinel_susp": 0.017857142857142856
        }
    },
    {
        "name": "tqdm._tqdm.tqdm.__init__#197",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm.tqdm",
        "signature": "tqdm._tqdm.tqdm.__init__(self, iterable=None, desc=None, total=None, leave=False, file=sys.stderr, ncols=None, mininterval=0.1, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, gui=False)",
        "snippet": "    def __init__(self, iterable=None, desc=None, total=None, leave=False,\n                 file=sys.stderr, ncols=None, mininterval=0.1,\n                 miniters=None, ascii=None, disable=False,\n                 unit='it', unit_scale=False, gui=False):\n        \"\"\"\n        Parameters\n        ----------\n        iterable  : iterable, optional\n            Iterable to decorate with a progressbar.\n            Leave blank [default: None] to manually manage the updates.\n        desc  : str, optional\n            Prefix for the progressbar [default: None].\n        total  : int, optional\n            The number of expected iterations. If not given, len(iterable) is\n            used if possible. As a last resort, only basic progress\n            statistics are displayed (no ETA, no progressbar). If `gui` is\n            True and this parameter needs subsequent updating, specify an\n            initial arbitrary large positive integer, e.g. int(9e9).\n        leave  : bool, optional\n            If [default: False], removes all traces of the progressbar\n            upon termination of iteration.\n        file  : `io.TextIOWrapper` or `io.StringIO`, optional\n            Specifies where to output the progress messages\n            [default: sys.stderr]. Uses `file.write(str)` and `file.flush()`\n            methods.\n        ncols  : int, optional\n            The width of the entire output message. If specified, dynamically\n            resizes the progressbar to stay within this bound\n            [default: None]. The fallback is a meter width of 10 and no\n            limit for the counter and statistics. If 0, will not print any\n            meter (only stats).\n        mininterval  : float, optional\n            Minimum progress update interval, in seconds [default: 0.1].\n        miniters  : int, optional\n            Minimum progress update interval, in iterations [default: None].\n            If specified, will set `mininterval` to 0.\n        ascii  : bool, optional\n            If [default: None] or false, use unicode (smooth blocks) to fill\n            the meter. The fallback is to use ASCII characters `1-9 #`.\n        disable : bool\n            Whether to disable the entire progressbar wrapper [default: False].\n        unit  : str, optional\n            String that will be used to define the unit of each iteration\n            [default: 'it'].\n        unit_scale  : bool, optional\n            If set, the number of iterations will be reduced/scaled\n            automatically and a metric prefix following the\n            International System of Units standard will be added\n            (kilo, mega, etc.) [default: False].\n        gui  : bool, optional\n            If set, will attempt to use matplotlib animations for a\n            graphical output [default: false].\n\n        Returns\n        -------\n        out  : decorated iterator.\n        \"\"\"\n        # Preprocess the arguments\n        if total is None and iterable is not None:\n            try:\n                total = len(iterable)\n            except (TypeError, AttributeError):\n                total = None\n\n        if (ncols is None) and (file in (sys.stderr, sys.stdout)):\n            ncols = _environ_cols(file)\n\n        if miniters is None:\n            miniters = 0\n            dynamic_miniters = True\n        else:\n            dynamic_miniters = False\n            mininterval = 0\n\n        if ascii is None:\n            ascii = not _supports_unicode(file)\n\n        if gui: # pragma: no cover\n            try:\n                import matplotlib as mpl\n                import matplotlib.pyplot as plt\n                from collections import deque\n            except ImportError:\n                gui = False\n            else:\n                self.mpl = mpl\n                self.plt = plt\n\n        # Store the arguments\n        self.iterable = iterable\n        self.desc = desc+': ' if desc else ''\n        self.total = total\n        self.leave = leave\n        self.file = file\n        self.ncols = ncols\n        self.mininterval = mininterval\n        self.miniters = miniters\n        self.dynamic_miniters = dynamic_miniters\n        self.ascii = ascii\n        self.disable = disable\n        self.unit = unit\n        self.unit_scale = unit_scale\n        self.gui = gui\n\n        if gui: # pragma: no cover\n            # Initialize the GUI display\n            if not disable:\n                file.write('Warning: GUI is experimental/alpha\\n')\n\n                # Remember if external environment uses toolbars\n                self.toolbar = self.mpl.rcParams['toolbar']\n                self.mpl.rcParams['toolbar'] = 'None'\n\n                self.mininterval = max(mininterval, 0.5)\n                self.fig, ax = plt.subplots(figsize=(9, 2.2))\n                # self.fig.subplots_adjust(bottom=0.2)\n                if total:\n                    self.xdata = []\n                    self.ydata = []\n                    self.zdata = []\n                else:\n                    self.xdata = deque([])\n                    self.ydata = deque([])\n                    self.zdata = deque([])\n                self.line1, = ax.plot(self.xdata, self.ydata, color='b')\n                self.line2, = ax.plot(self.xdata, self.zdata, color='k')\n                ax.set_ylim(0, 0.001)\n                if total:\n                    ax.set_xlim(0, 100)\n                    ax.set_xlabel('percent')\n                    self.fig.legend((self.line1, self.line2), ('cur', 'est'),\n                                    loc='center right')\n                    # progressbar\n                    self.hspan = plt.axhspan(0, 0.001,\n                                             xmin=0, xmax=0, color='g')\n                else:\n                    # ax.set_xlim(-60, 0)\n                    ax.set_xlim(0, 60)\n                    ax.invert_xaxis()\n                    ax.set_xlabel('seconds')\n                    ax.legend(('cur', 'est'), loc='lower left')\n                ax.grid()\n                # ax.set_xlabel('seconds')\n                ax.set_ylabel((unit if unit else 'it') + '/s')\n                if unit_scale:\n                    plt.ticklabel_format(style='sci', axis='y',\n                                         scilimits=(0, 0))\n                    ax.yaxis.get_offset_text().set_x(-0.15)\n\n                # Remember if external environment is interactive\n                self.wasion = plt.isinteractive()\n                plt.ion()\n                self.ax = ax\n        else:\n            # Initialize the screen printer\n            self.sp = StatusPrinter(self.file)\n            if not disable:\n                self.sp(format_meter(\n                    0, total, 0, ncols, self.desc, ascii, unit, unit_scale))\n\n        # Init the time/iterations counters\n        self.start_t = self.last_print_t = time()\n        self.last_print_n = 0\n        self.n = 0",
        "begin_line": 197,
        "end_line": 360,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.021739130434782608,
            "pseudo_dstar_susp": 0.02127659574468085,
            "pseudo_tarantula_susp": 0.05263157894736842,
            "pseudo_op2_susp": 0.02127659574468085,
            "pseudo_barinel_susp": 0.05263157894736842
        }
    },
    {
        "name": "tqdm._tqdm.tqdm.__len__#362",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm.tqdm",
        "signature": "tqdm._tqdm.tqdm.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self.iterable)",
        "begin_line": 362,
        "end_line": 363,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.027777777777777776,
            "pseudo_tarantula_susp": 0.125,
            "pseudo_op2_susp": 0.027777777777777776,
            "pseudo_barinel_susp": 0.125
        }
    },
    {
        "name": "tqdm._tqdm.tqdm.__iter__#365",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm.tqdm",
        "signature": "tqdm._tqdm.tqdm.__iter__(self)",
        "snippet": "    def __iter__(self):\n        ''' Backward-compatibility to use: for x in tqdm(iterable) '''\n\n        # Inlining instance variables as locals (speed optimisation)\n        iterable = self.iterable\n\n        # If the bar is disabled, then just walk the iterable\n        # (note: keep this check outside the loop for performance)\n        if self.disable:\n            for obj in iterable:\n                yield obj\n        else:\n            ncols = self.ncols\n            mininterval = self.mininterval\n            miniters = self.miniters\n            dynamic_miniters = self.dynamic_miniters\n            unit = self.unit\n            unit_scale = self.unit_scale\n            ascii = self.ascii\n            start_t = self.start_t\n            last_print_t = self.last_print_t\n            last_print_n = self.last_print_n\n            n = self.n\n            gui = self.gui\n            if gui: # pragma: no cover\n                plt = self.plt\n                ax = self.ax\n                xdata = self.xdata\n                ydata = self.ydata\n                zdata = self.zdata\n                line1 = self.line1\n                line2 = self.line2\n            else:\n                sp = self.sp\n\n            for obj in iterable:\n                yield obj\n                # Update and print the progressbar.\n                # Note: does not call self.update(1) for speed optimisation.\n                n += 1\n                delta_it = n - last_print_n\n                # check the counter first (avoid calls to time())\n                if delta_it >= miniters:\n                    cur_t = time()\n                    delta_t = cur_t - last_print_t\n                    if delta_t >= mininterval:\n                        elapsed = cur_t - start_t\n                        if gui: # pragma: no cover\n                            # Inline due to multiple calls\n                            total = self.total\n                            # instantaneous rate\n                            y = delta_it / delta_t\n                            # smoothed rate\n                            z = n / elapsed\n                            # update line data\n                            xdata.append(n * 100.0 / total if total else cur_t)\n                            ydata.append(y)\n                            zdata.append(z)\n\n                            # Discard old values\n                            # xmin, xmax = ax.get_xlim()\n                            # if (not total) and elapsed > xmin * 1.1:\n                            if (not total) and elapsed > 66:\n                                xdata.popleft()\n                                ydata.popleft()\n                                zdata.popleft()\n\n                            ymin, ymax = ax.get_ylim()\n                            if y > ymax or z > ymax:\n                                ymax = 1.1 * y\n                                ax.set_ylim(ymin, ymax)\n                                ax.figure.canvas.draw()\n\n                            if total:\n                                line1.set_data(xdata, ydata)\n                                line2.set_data(xdata, zdata)\n                                try:\n                                    poly_lims = self.hspan.get_xy()\n                                except AttributeError:\n                                    self.hspan = plt.axhspan(0, 0.001, xmin=0,\n                                                             xmax=0, color='g')\n                                    poly_lims = self.hspan.get_xy()\n                                poly_lims[0, 1] = ymin\n                                poly_lims[1, 1] = ymax\n                                poly_lims[2] = [n / total, ymax]\n                                poly_lims[3] = [poly_lims[2, 0], ymin]\n                                if len(poly_lims) > 4:\n                                    poly_lims[4, 1] = ymin\n                                self.hspan.set_xy(poly_lims)\n                            else:\n                                t_ago = [cur_t - i for i in xdata]\n                                line1.set_data(t_ago, ydata)\n                                line2.set_data(t_ago, zdata)\n\n                            ax.set_title(format_meter(\n                                n, total, elapsed, 0,\n                                self.desc, ascii, unit, unit_scale),\n                                fontname=\"DejaVu Sans Mono\",\n                                fontsize=11)\n                            plt.pause(1e-9)\n                        else:\n                            sp(format_meter(\n                                n, self.total, elapsed, ncols,\n                                self.desc, ascii, unit, unit_scale))\n\n                        if dynamic_miniters:\n                            miniters = max(miniters, delta_it)\n                        last_print_n = n\n                        last_print_t = cur_t\n            # Closing the progress bar.\n            # Update some internal variables for close().\n            self.last_print_n = last_print_n\n            self.n = n\n            self.close()",
        "begin_line": 365,
        "end_line": 478,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.0070921985815602835,
            "pseudo_tarantula_susp": 0.0070921985815602835,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0070921985815602835
        }
    },
    {
        "name": "tqdm._tqdm.tqdm.update#480",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm.tqdm",
        "signature": "tqdm._tqdm.tqdm.update(self, n=1)",
        "snippet": "    def update(self, n=1):\n        \"\"\"\n        Manually update the progress bar, useful for streams\n        such as reading files.\n        E.g.:\n        >>> t = tqdm(total=filesize) # Initialise\n        >>> for current_buffer in stream:\n        ...    ...\n        ...    t.update(len(current_buffer))\n        >>> t.close()\n        The last line is highly recommended, but possibly not necessary if\n        `t.update()` will be called in such a way that `filesize` will be\n        exactly reached and printed.\n\n        Parameters\n        ----------\n        n  : int\n            Increment to add to the internal counter of iterations\n            [default: 1].\n        \"\"\"\n        if self.disable:\n            return\n\n        if n < 1:\n            n = 1\n        self.n += n\n\n        delta_it = self.n - self.last_print_n  # should be n?\n        if delta_it >= self.miniters:\n            # We check the counter first, to reduce the overhead of time()\n            cur_t = time()\n            delta_t = cur_t - self.last_print_t\n            if delta_t >= self.mininterval:\n                elapsed = cur_t - self.start_t\n                if self.gui:  # pragma: no cover\n                    # Inline due to multiple calls\n                    total = self.total\n                    ax = self.ax\n\n                    # instantaneous rate\n                    y = delta_it / delta_t\n                    # smoothed rate\n                    z = self.n / elapsed\n                    # update line data\n                    self.xdata.append(self.n * 100.0 / total\n                                      if total else cur_t)\n                    self.ydata.append(y)\n                    self.zdata.append(z)\n\n                    # Discard old values\n                    if (not total) and elapsed > 66:\n                        self.xdata.popleft()\n                        self.ydata.popleft()\n                        self.zdata.popleft()\n\n                    ymin, ymax = ax.get_ylim()\n                    if y > ymax or z > ymax:\n                        ymax = 1.1 * y\n                        ax.set_ylim(ymin, ymax)\n                        ax.figure.canvas.draw()\n\n                    if total:\n                        self.line1.set_data(self.xdata, self.ydata)\n                        self.line2.set_data(self.xdata, self.zdata)\n                        try:\n                            poly_lims = self.hspan.get_xy()\n                        except AttributeError:\n                            self.hspan = self.plt.axhspan(0, 0.001, xmin=0,\n                                                          xmax=0, color='g')\n                            poly_lims = self.hspan.get_xy()\n                        poly_lims[0, 1] = ymin\n                        poly_lims[1, 1] = ymax\n                        poly_lims[2] = [self.n / total, ymax]\n                        poly_lims[3] = [poly_lims[2, 0], ymin]\n                        if len(poly_lims) > 4:\n                            poly_lims[4, 1] = ymin\n                        self.hspan.set_xy(poly_lims)\n                    else:\n                        t_ago = [cur_t - i for i in self.xdata]\n                        self.line1.set_data(t_ago, self.ydata)\n                        self.line2.set_data(t_ago, self.zdata)\n\n                    ax.set_title(format_meter(\n                        self.n, total, elapsed, 0,\n                        self.desc, self.ascii, self.unit, self.unit_scale),\n                        fontname=\"DejaVu Sans Mono\",\n                        fontsize=11)\n                    self.plt.pause(1e-9)\n                else:\n                    self.sp(format_meter(\n                        self.n, self.total, elapsed, self.ncols,\n                        self.desc, self.ascii, self.unit, self.unit_scale))\n                if self.dynamic_miniters:\n                    self.miniters = max(self.miniters, delta_it)\n                self.last_print_n = self.n\n                self.last_print_t = cur_t",
        "begin_line": 480,
        "end_line": 575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.0070921985815602835,
            "pseudo_tarantula_susp": 0.0070921985815602835,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0070921985815602835
        }
    },
    {
        "name": "tqdm._tqdm.tqdm.close#577",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm.tqdm",
        "signature": "tqdm._tqdm.tqdm.close(self)",
        "snippet": "    def close(self):\n        \"\"\"\n        Cleanup and (if leave=False) close the progressbar.\n        \"\"\"\n        if self.disable:\n            return\n\n        if self.gui:  # pragma: no cover\n            # Restore toolbars\n            self.mpl.rcParams['toolbar'] = self.toolbar\n            # Return to non-interactive mode\n            if not self.wasion:\n                self.plt.ioff()\n            if not self.leave:\n                self.plt.close(self.fig)\n        else:\n            if self.leave:\n                if self.last_print_n < self.n:\n                    cur_t = time()\n                    self.sp(format_meter(\n                        self.n, self.total, cur_t-self.start_t, self.ncols,\n                        self.desc, self.ascii, self.unit, self.unit_scale))\n                self.file.write('\\n')\n            else:\n                self.sp('')\n                self.file.write('\\r')",
        "begin_line": 577,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.0070921985815602835,
            "pseudo_tarantula_susp": 0.0070921985815602835,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0070921985815602835
        }
    },
    {
        "name": "tqdm._tqdm.trange#605",
        "src_path": "tqdm/_tqdm.py",
        "class_name": "tqdm._tqdm",
        "signature": "tqdm._tqdm.trange(*args, **kwargs)",
        "snippet": "def trange(*args, **kwargs):\n    \"\"\"\n    A shortcut for tqdm(xrange(*args), **kwargs).\n    On Python3+ range is used instead of xrange.\n    \"\"\"\n    return tqdm(_range(*args), **kwargs)",
        "begin_line": 605,
        "end_line": 610,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0070921985815602835,
            "pseudo_dstar_susp": 0.0070921985815602835,
            "pseudo_tarantula_susp": 0.0070921985815602835,
            "pseudo_op2_susp": 0.008928571428571428,
            "pseudo_barinel_susp": 0.0070921985815602835
        }
    }
]