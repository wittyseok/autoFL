[
    {
        "name": "tqdm.tests.tests_tqdm.test_format_interval#16",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_format_interval()",
        "snippet": "def test_format_interval():\n    assert format_interval(60) == '01:00'\n    assert format_interval(6160) == '1:42:40'\n    assert format_interval(238113) == '66:08:33'",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_format_meter#22",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_format_meter()",
        "snippet": "def test_format_meter():\n    try:\n        unich = unichr\n    except NameError:\n        unich = chr\n\n    assert format_meter(0, 1000, 13) == \\\n        \"  0%|          | 0/1000 [00:13<?,  0.00it/s]\"\n    assert format_meter(0, 1000, 13, ncols=68, prefix='desc: ') == \\\n        \"desc:   0%|                            | 0/1000 [00:13<?,  0.00it/s]\"\n    assert format_meter(231, 1000, 392) == \\\n        \" 23%|\" + unich(0x2588)*2 + unich(0x258e) + \\\n        \"       | 231/1000 [06:32<21:44,  0.59it/s]\"\n    assert format_meter(10000, 1000, 13) == \\\n        \"10000it [00:13, 769.23it/s]\"\n    assert format_meter(231, 1000, 392, ncols=56, ascii=True) == \\\n        \" 23%|\" + '#'*3 + '6' + \\\n        \"            | 231/1000 [06:32<21:44,  0.59it/s]\"\n    assert format_meter(100000, 1000, 13, unit_scale=True, unit='iB') == \\\n        \"100KiB [00:13, 7.69KiB/s]\"\n    assert format_meter(100, 1000, 12, ncols=0) == \\\n        \" 10% 100/1000 [00:12<01:48,  8.33it/s]\"",
        "begin_line": 22,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_si_format#46",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_si_format()",
        "snippet": "def test_si_format():\n    \"\"\" Test SI unit prefixes \"\"\"\n    assert '9.00 ' in format_meter(1, 9, 1, unit_scale=True, unit='B')\n    assert '99.0 ' in format_meter(1, 99, 1, unit_scale=True)\n    assert '999 ' in format_meter(1, 999, 1, unit_scale=True)\n    assert '9.99K ' in format_meter(1, 9994, 1, unit_scale=True)\n    assert '10.0K ' in format_meter(1, 9999, 1, unit_scale=True)\n    assert '99.5K ' in format_meter(1, 99499, 1, unit_scale=True)\n    assert '100K ' in format_meter(1, 99999, 1, unit_scale=True)\n    assert '1.00M ' in format_meter(1, 999999, 1, unit_scale=True)\n    assert '1.00G ' in format_meter(1, 999999999, 1, unit_scale=True)\n    assert '1.00T ' in format_meter(1, 999999999999, 1, unit_scale=True)\n    assert '1.00P ' in format_meter(1, 999999999999999, 1, unit_scale=True)\n    assert '1.00E ' in format_meter(1, 999999999999999999, 1, unit_scale=True)\n    assert '1.00Z ' in format_meter(1, 999999999999999999999, 1,\n                                    unit_scale=True)\n    assert '1.0Y ' in format_meter(1, 999999999999999999999999, 1,\n                                   unit_scale=True)\n    assert '10.0Y ' in format_meter(1, 9999999999999999999999999, 1,\n                                    unit_scale=True)\n    assert '100.0Y ' in format_meter(1, 99999999999999999999999999, 1,\n                                     unit_scale=True)\n    assert '1000.0Y ' in format_meter(1, 999999999999999999999999999, 1,\n                                      unit_scale=True)",
        "begin_line": 46,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_all_defaults#72",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_all_defaults()",
        "snippet": "def test_all_defaults():\n    progressbar = tqdm(range(10))\n    assert len(progressbar) == 10\n    for i in progressbar:\n        pass\n    import sys\n    sys.stderr.write('tests_tqdm.test_all_defaults ... ')",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_iterate_over_csv_rows#81",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_iterate_over_csv_rows()",
        "snippet": "def test_iterate_over_csv_rows():\n    # Create a test csv pseudo file\n    test_csv_file = StringIO()\n    writer = csv.writer(test_csv_file)\n    for i in range(3):\n        writer.writerow(['test'] * 3)\n    test_csv_file.seek(0)\n\n    # Test that nothing fails if we iterate over rows\n    reader = csv.DictReader(test_csv_file, fieldnames=('row1', 'row2', 'row3'))\n    our_file = StringIO()\n    for row in tqdm(reader, file=our_file):\n        pass\n    our_file.close()",
        "begin_line": 81,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_file_output#97",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_file_output()",
        "snippet": "def test_file_output():\n    \"\"\" Test output to arbitrary file-like objects \"\"\"\n    our_file = StringIO()\n    for i in tqdm(range(3), file=our_file):\n        if i == 1:\n            our_file.seek(0)\n            assert '0/3' in our_file.read()",
        "begin_line": 97,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_leave_option#106",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_leave_option()",
        "snippet": "def test_leave_option():\n    \"\"\" Test `leave=True` always prints info about the last iteration. \"\"\"\n    our_file = StringIO()\n    for i in tqdm(range(3), file=our_file, leave=True):\n        pass\n    our_file.seek(0)\n    assert '| 3/3 ' in our_file.read()\n    our_file.seek(0)\n    assert '\\n' == our_file.read()[-1]  # not '\\r'\n    our_file.close()\n\n    our_file2 = StringIO()\n    for i in tqdm(range(3), file=our_file2, leave=False):\n        pass\n    our_file2.seek(0)\n    assert '| 3/3 ' not in our_file2.read()\n    our_file2.close()",
        "begin_line": 106,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_trange#125",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_trange()",
        "snippet": "def test_trange():\n    our_file = StringIO()\n    for i in trange(3, file=our_file, leave=True):\n        pass\n    our_file.seek(0)\n    assert '| 3/3 ' in our_file.read()\n    our_file.close()\n\n    our_file2 = StringIO()\n    for i in trange(3, file=our_file2, leave=False):\n        pass\n    our_file2.seek(0)\n    assert '| 3/3 ' not in our_file2.read()\n    our_file2.close()",
        "begin_line": 125,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_min_interval#141",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_min_interval()",
        "snippet": "def test_min_interval():\n    our_file = StringIO()\n    for i in tqdm(range(3), file=our_file, mininterval=1e-10):\n        pass\n    our_file.seek(0)\n    assert \"  0%|          | 0/3 [00:00<\" in our_file.read()\n    our_file.close()",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_min_iters#150",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_min_iters()",
        "snippet": "def test_min_iters():\n    our_file = StringIO()\n    for i in tqdm(range(3), file=our_file, leave=True, miniters=4):\n        our_file.write('blank\\n')\n    our_file.seek(0)\n    assert '\\nblank\\nblank\\n' in our_file.read()\n    our_file.close()\n\n    our_file2 = StringIO()\n    for i in tqdm(range(3), file=our_file2, leave=True, miniters=1):\n        our_file2.write('blank\\n')\n    our_file2.seek(0)\n    # assume automatic mininterval = 0 means intermediate output\n    assert '| 3/3 ' in our_file2.read()\n    our_file2.close()",
        "begin_line": 150,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_disable#167",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_disable()",
        "snippet": "def test_disable():\n    our_file = StringIO()\n    for i in tqdm(range(3), file=our_file, disable=True):\n        pass\n    our_file.seek(0)\n    assert our_file.read() == \"\"\n\n    our_file2 = StringIO()\n    progressbar = tqdm(total=3, file=our_file2, miniters=1, disable=True)\n    progressbar.update(3)\n    progressbar.close()\n    our_file2.seek(0)\n    assert our_file2.read() == \"\"",
        "begin_line": 167,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_unit#182",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_unit()",
        "snippet": "def test_unit():\n    our_file = StringIO()\n    for i in tqdm(range(3), file=our_file, miniters=1, unit=\"bytes\"):\n        pass\n    our_file.seek(0)\n    assert \"bytes/s\" in our_file.read()\n    our_file.close()",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_update#191",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_update()",
        "snippet": "def test_update():\n    \"\"\" Test manual creation and updates \"\"\"\n    our_file = StringIO()\n    progressbar = tqdm(total=2, file=our_file, miniters=1)\n    assert len(progressbar) == 2\n    progressbar.update(2)\n    our_file.seek(0)\n    assert '| 2/2' in our_file.read()\n    progressbar.desc = 'dynamically notify of 4 increments in total'\n    progressbar.total = 4\n    progressbar.update(-10)  # should default to +1\n    our_file.seek(0)\n    assert '| 3/4 ' in our_file.read()\n    our_file.seek(0)\n    assert 'dynamically notify of 4 increments in total' in our_file.read()\n    our_file.close()",
        "begin_line": 191,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_tqdm.test_close#209",
        "src_path": "tqdm/tests/tests_tqdm.py",
        "class_name": "tqdm.tests.tests_tqdm",
        "signature": "tqdm.tests.tests_tqdm.test_close()",
        "snippet": "def test_close():\n    \"\"\" Test manual creation and closure \"\"\"\n    # With `leave` option\n    our_file = StringIO()\n    progressbar = tqdm(total=3, file=our_file, miniters=10, leave=True)\n    progressbar.update(3)\n    our_file.seek(0)\n    assert '| 3/3 ' not in our_file.read()  # Should be blank\n    progressbar.close()\n    our_file.seek(0)\n    assert '| 3/3 ' in our_file.read()\n    our_file.close()\n\n    # Without `leave` option\n    our_file2 = StringIO()\n    progressbar2 = tqdm(total=3, file=our_file2, miniters=10)\n    progressbar2.update(3)\n    progressbar2.close()\n    our_file2.seek(0)\n    assert '| 3/3 ' not in our_file2.read()  # Should be blank\n    our_file2.close()",
        "begin_line": 209,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    }
]