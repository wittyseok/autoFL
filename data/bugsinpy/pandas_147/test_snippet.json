[
    {
        "name": "pandas.tests.dtypes.test_dtypes.Base.setup_method#38",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.Base",
        "signature": "pandas.tests.dtypes.test_dtypes.Base.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.dtype = self.create()",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.Base.test_hash#41",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.Base",
        "signature": "pandas.tests.dtypes.test_dtypes.Base.test_hash(self)",
        "snippet": "    def test_hash(self):\n        hash(self.dtype)",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.Base.test_equality_invalid#44",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.Base",
        "signature": "pandas.tests.dtypes.test_dtypes.Base.test_equality_invalid(self)",
        "snippet": "    def test_equality_invalid(self):\n        assert not self.dtype == \"foo\"\n        assert not is_dtype_equal(self.dtype, np.int64)",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.Base.test_numpy_informed#48",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.Base",
        "signature": "pandas.tests.dtypes.test_dtypes.Base.test_numpy_informed(self)",
        "snippet": "    def test_numpy_informed(self):\n        with pytest.raises(TypeError, match=\"data type not understood\"):\n            np.dtype(self.dtype)\n\n        assert not self.dtype == np.str_\n        assert not np.str_ == self.dtype",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.Base.test_pickle#55",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.Base",
        "signature": "pandas.tests.dtypes.test_dtypes.Base.test_pickle(self)",
        "snippet": "    def test_pickle(self):\n        # make sure our cache is NOT pickled\n\n        # clear the cache\n        type(self.dtype).reset_cache()\n        assert not len(self.dtype._cache)\n\n        # force back to the cache\n        result = tm.round_trip_pickle(self.dtype)\n        assert not len(self.dtype._cache)\n        assert result == self.dtype",
        "begin_line": 55,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.create#69",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.create(self)",
        "snippet": "    def create(self):\n        # TODO(GH 26403): Remove when default ordered becomes False\n        return CategoricalDtype(ordered=None)",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_pickle#73",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_pickle(self)",
        "snippet": "    def test_pickle(self):\n        # make sure our cache is NOT pickled\n\n        # clear the cache\n        type(self.dtype).reset_cache()\n        assert not len(self.dtype._cache)\n\n        # force back to the cache\n        result = tm.round_trip_pickle(self.dtype)\n        assert result == self.dtype",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_hash_vs_equality#84",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_hash_vs_equality(self)",
        "snippet": "    def test_hash_vs_equality(self):\n        dtype = self.dtype\n        dtype2 = CategoricalDtype()\n        assert dtype == dtype2\n        assert dtype2 == dtype\n        assert hash(dtype) == hash(dtype2)",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_equality#91",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_equality(self)",
        "snippet": "    def test_equality(self):\n        assert is_dtype_equal(self.dtype, \"category\")\n        assert is_dtype_equal(self.dtype, CategoricalDtype())\n        assert not is_dtype_equal(self.dtype, \"foo\")",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_construction_from_string#96",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_construction_from_string(self)",
        "snippet": "    def test_construction_from_string(self):\n        result = CategoricalDtype.construct_from_string(\"category\")\n        assert is_dtype_equal(self.dtype, result)\n        msg = \"Cannot construct a 'CategoricalDtype' from 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            CategoricalDtype.construct_from_string(\"foo\")",
        "begin_line": 96,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_constructor_invalid#103",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_constructor_invalid(self)",
        "snippet": "    def test_constructor_invalid(self):\n        msg = \"Parameter 'categories' must be list-like\"\n        with pytest.raises(TypeError, match=msg):\n            CategoricalDtype(\"category\")",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_from_values_or_dtype#121",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_from_values_or_dtype(self, values, categories, ordered, dtype, expected)",
        "snippet": "    def test_from_values_or_dtype(self, values, categories, ordered, dtype, expected):\n        result = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        assert result == expected",
        "begin_line": 121,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_from_values_or_dtype_raises#135",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_from_values_or_dtype_raises(self, values, categories, ordered, dtype)",
        "snippet": "    def test_from_values_or_dtype_raises(self, values, categories, ordered, dtype):\n        msg = \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n        with pytest.raises(ValueError, match=msg):\n            CategoricalDtype._from_values_or_dtype(values, categories, ordered, dtype)",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_dtype#140",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_dtype(self)",
        "snippet": "    def test_is_dtype(self):\n        assert CategoricalDtype.is_dtype(self.dtype)\n        assert CategoricalDtype.is_dtype(\"category\")\n        assert CategoricalDtype.is_dtype(CategoricalDtype())\n        assert not CategoricalDtype.is_dtype(\"foo\")\n        assert not CategoricalDtype.is_dtype(np.float64)",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_basic#147",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_basic(self)",
        "snippet": "    def test_basic(self):\n\n        assert is_categorical_dtype(self.dtype)\n\n        factor = Categorical([\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"])\n\n        s = Series(factor, name=\"A\")\n\n        # dtypes\n        assert is_categorical_dtype(s.dtype)\n        assert is_categorical_dtype(s)\n        assert not is_categorical_dtype(np.dtype(\"float64\"))\n\n        assert is_categorical(s.dtype)\n        assert is_categorical(s)\n        assert not is_categorical(np.dtype(\"float64\"))\n        assert not is_categorical(1.0)",
        "begin_line": 147,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_tuple_categories#165",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_tuple_categories(self)",
        "snippet": "    def test_tuple_categories(self):\n        categories = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n        result = CategoricalDtype(categories)\n        assert all(result.categories == categories)",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_boolean#179",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_boolean(self, categories, expected)",
        "snippet": "    def test_is_boolean(self, categories, expected):\n        cat = Categorical(categories)\n        assert cat.dtype._is_boolean is expected\n        assert is_bool_dtype(cat) is expected\n        assert is_bool_dtype(cat.dtype) is expected",
        "begin_line": 179,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.create#187",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.create(self)",
        "snippet": "    def create(self):\n        return DatetimeTZDtype(\"ns\", \"US/Eastern\")",
        "begin_line": 187,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_alias_to_unit_raises#190",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_alias_to_unit_raises(self)",
        "snippet": "    def test_alias_to_unit_raises(self):\n        # 23990\n        with tm.assert_produces_warning(FutureWarning):\n            DatetimeTZDtype(\"datetime64[ns, US/Central]\")",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_alias_to_unit_bad_alias_raises#195",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_alias_to_unit_bad_alias_raises(self)",
        "snippet": "    def test_alias_to_unit_bad_alias_raises(self):\n        # 23990\n        with pytest.raises(TypeError, match=\"\"):\n            DatetimeTZDtype(\"this is a bad string\")\n\n        with pytest.raises(TypeError, match=\"\"):\n            DatetimeTZDtype(\"datetime64[ns, US/NotATZ]\")",
        "begin_line": 195,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_hash_vs_equality#203",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_hash_vs_equality(self)",
        "snippet": "    def test_hash_vs_equality(self):\n        # make sure that we satisfy is semantics\n        dtype = self.dtype\n        dtype2 = DatetimeTZDtype(\"ns\", \"US/Eastern\")\n        dtype3 = DatetimeTZDtype(dtype2)\n        assert dtype == dtype2\n        assert dtype2 == dtype\n        assert dtype3 == dtype\n        assert hash(dtype) == hash(dtype2)\n        assert hash(dtype) == hash(dtype3)\n\n        dtype4 = DatetimeTZDtype(\"ns\", \"US/Central\")\n        assert dtype2 != dtype4\n        assert hash(dtype2) != hash(dtype4)",
        "begin_line": 203,
        "end_line": 216,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction#218",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction(self)",
        "snippet": "    def test_construction(self):\n        msg = \"DatetimeTZDtype only supports ns units\"\n        with pytest.raises(ValueError, match=msg):\n            DatetimeTZDtype(\"ms\", \"US/Eastern\")",
        "begin_line": 218,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_subclass#223",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_subclass(self)",
        "snippet": "    def test_subclass(self):\n        a = DatetimeTZDtype.construct_from_string(\"datetime64[ns, US/Eastern]\")\n        b = DatetimeTZDtype.construct_from_string(\"datetime64[ns, CET]\")\n\n        assert issubclass(type(a), type(a))\n        assert issubclass(type(a), type(b))",
        "begin_line": 223,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_compat#230",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_compat(self)",
        "snippet": "    def test_compat(self):\n        assert is_datetime64tz_dtype(self.dtype)\n        assert is_datetime64tz_dtype(\"datetime64[ns, US/Eastern]\")\n        assert is_datetime64_any_dtype(self.dtype)\n        assert is_datetime64_any_dtype(\"datetime64[ns, US/Eastern]\")\n        assert is_datetime64_ns_dtype(self.dtype)\n        assert is_datetime64_ns_dtype(\"datetime64[ns, US/Eastern]\")\n        assert not is_datetime64_dtype(self.dtype)\n        assert not is_datetime64_dtype(\"datetime64[ns, US/Eastern]\")",
        "begin_line": 230,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction_from_string#240",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction_from_string(self)",
        "snippet": "    def test_construction_from_string(self):\n        result = DatetimeTZDtype.construct_from_string(\"datetime64[ns, US/Eastern]\")\n        assert is_dtype_equal(self.dtype, result)\n        msg = \"Could not construct DatetimeTZDtype from 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            DatetimeTZDtype.construct_from_string(\"foo\")",
        "begin_line": 240,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construct_from_string_raises#247",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construct_from_string_raises(self)",
        "snippet": "    def test_construct_from_string_raises(self):\n        with pytest.raises(TypeError, match=\"notatz\"):\n            DatetimeTZDtype.construct_from_string(\"datetime64[ns, notatz]\")\n\n        msg = \"^Could not construct DatetimeTZDtype\"\n        with pytest.raises(TypeError, match=msg):\n            # list instead of string\n            DatetimeTZDtype.construct_from_string([\"datetime64[ns, notatz]\"])\n\n        with pytest.raises(TypeError, match=msg):\n            # non-nano unit\n            DatetimeTZDtype.construct_from_string(\"datetime64[ps, UTC]\")\n\n        with pytest.raises(TypeError, match=msg):\n            # dateutil str that returns None from gettz\n            DatetimeTZDtype.construct_from_string(\"datetime64[ns, dateutil/invalid]\")",
        "begin_line": 247,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_is_dtype#264",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_is_dtype(self)",
        "snippet": "    def test_is_dtype(self):\n        assert not DatetimeTZDtype.is_dtype(None)\n        assert DatetimeTZDtype.is_dtype(self.dtype)\n        assert DatetimeTZDtype.is_dtype(\"datetime64[ns, US/Eastern]\")\n        assert not DatetimeTZDtype.is_dtype(\"foo\")\n        assert DatetimeTZDtype.is_dtype(DatetimeTZDtype(\"ns\", \"US/Pacific\"))\n        assert not DatetimeTZDtype.is_dtype(np.float64)",
        "begin_line": 264,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_equality#272",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_equality(self)",
        "snippet": "    def test_equality(self):\n        assert is_dtype_equal(self.dtype, \"datetime64[ns, US/Eastern]\")\n        assert is_dtype_equal(self.dtype, DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n        assert not is_dtype_equal(self.dtype, \"foo\")\n        assert not is_dtype_equal(self.dtype, DatetimeTZDtype(\"ns\", \"CET\"))\n        assert not is_dtype_equal(\n            DatetimeTZDtype(\"ns\", \"US/Eastern\"), DatetimeTZDtype(\"ns\", \"US/Pacific\")\n        )\n\n        # numpy compat\n        assert is_dtype_equal(np.dtype(\"M8[ns]\"), \"datetime64[ns]\")",
        "begin_line": 272,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_basic#284",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_basic(self)",
        "snippet": "    def test_basic(self):\n\n        assert is_datetime64tz_dtype(self.dtype)\n\n        dr = date_range(\"20130101\", periods=3, tz=\"US/Eastern\")\n        s = Series(dr, name=\"A\")\n\n        # dtypes\n        assert is_datetime64tz_dtype(s.dtype)\n        assert is_datetime64tz_dtype(s)\n        assert not is_datetime64tz_dtype(np.dtype(\"float64\"))\n        assert not is_datetime64tz_dtype(1.0)\n\n        with tm.assert_produces_warning(FutureWarning):\n            assert is_datetimetz(s)\n            assert is_datetimetz(s.dtype)\n            assert not is_datetimetz(np.dtype(\"float64\"))\n            assert not is_datetimetz(1.0)",
        "begin_line": 284,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_dst#303",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_dst(self)",
        "snippet": "    def test_dst(self):\n\n        dr1 = date_range(\"2013-01-01\", periods=3, tz=\"US/Eastern\")\n        s1 = Series(dr1, name=\"A\")\n        assert is_datetime64tz_dtype(s1)\n        with tm.assert_produces_warning(FutureWarning):\n            assert is_datetimetz(s1)\n\n        dr2 = date_range(\"2013-08-01\", periods=3, tz=\"US/Eastern\")\n        s2 = Series(dr2, name=\"A\")\n        assert is_datetime64tz_dtype(s2)\n        with tm.assert_produces_warning(FutureWarning):\n            assert is_datetimetz(s2)\n        assert s1.dtype == s2.dtype",
        "begin_line": 303,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_parser#320",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_parser(self, tz, constructor)",
        "snippet": "    def test_parser(self, tz, constructor):\n        # pr #11245\n        dtz_str = \"{con}[ns, {tz}]\".format(con=constructor, tz=tz)\n        result = DatetimeTZDtype.construct_from_string(dtz_str)\n        expected = DatetimeTZDtype(\"ns\", tz)\n        assert result == expected",
        "begin_line": 320,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_empty#327",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_empty(self)",
        "snippet": "    def test_empty(self):\n        with pytest.raises(TypeError, match=\"A 'tz' is required.\"):\n            DatetimeTZDtype()",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_tz_standardize#331",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_tz_standardize(self)",
        "snippet": "    def test_tz_standardize(self):\n        # GH 24713\n        tz = pytz.timezone(\"US/Eastern\")\n        dr = date_range(\"2013-01-01\", periods=3, tz=\"US/Eastern\")\n        dtype = DatetimeTZDtype(\"ns\", dr.tz)\n        assert dtype.tz == tz\n        dtype = DatetimeTZDtype(\"ns\", dr[0].tz)\n        assert dtype.tz == tz",
        "begin_line": 331,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.create#342",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.create(self)",
        "snippet": "    def create(self):\n        return PeriodDtype(\"D\")",
        "begin_line": 342,
        "end_line": 343,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_hash_vs_equality#345",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_hash_vs_equality(self)",
        "snippet": "    def test_hash_vs_equality(self):\n        # make sure that we satisfy is semantics\n        dtype = self.dtype\n        dtype2 = PeriodDtype(\"D\")\n        dtype3 = PeriodDtype(dtype2)\n        assert dtype == dtype2\n        assert dtype2 == dtype\n        assert dtype3 == dtype\n        assert dtype is dtype2\n        assert dtype2 is dtype\n        assert dtype3 is dtype\n        assert hash(dtype) == hash(dtype2)\n        assert hash(dtype) == hash(dtype3)",
        "begin_line": 345,
        "end_line": 357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction#359",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction(self)",
        "snippet": "    def test_construction(self):\n        with pytest.raises(ValueError):\n            PeriodDtype(\"xx\")\n\n        for s in [\"period[D]\", \"Period[D]\", \"D\"]:\n            dt = PeriodDtype(s)\n            assert dt.freq == pd.tseries.offsets.Day()\n            assert is_period_dtype(dt)\n\n        for s in [\"period[3D]\", \"Period[3D]\", \"3D\"]:\n            dt = PeriodDtype(s)\n            assert dt.freq == pd.tseries.offsets.Day(3)\n            assert is_period_dtype(dt)\n\n        for s in [\n            \"period[26H]\",\n            \"Period[26H]\",\n            \"26H\",\n            \"period[1D2H]\",\n            \"Period[1D2H]\",\n            \"1D2H\",\n        ]:\n            dt = PeriodDtype(s)\n            assert dt.freq == pd.tseries.offsets.Hour(26)\n            assert is_period_dtype(dt)",
        "begin_line": 359,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_subclass#385",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_subclass(self)",
        "snippet": "    def test_subclass(self):\n        a = PeriodDtype(\"period[D]\")\n        b = PeriodDtype(\"period[3D]\")\n\n        assert issubclass(type(a), type(a))\n        assert issubclass(type(a), type(b))",
        "begin_line": 385,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_identity#392",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_identity(self)",
        "snippet": "    def test_identity(self):\n        assert PeriodDtype(\"period[D]\") == PeriodDtype(\"period[D]\")\n        assert PeriodDtype(\"period[D]\") is PeriodDtype(\"period[D]\")\n\n        assert PeriodDtype(\"period[3D]\") == PeriodDtype(\"period[3D]\")\n        assert PeriodDtype(\"period[3D]\") is PeriodDtype(\"period[3D]\")\n\n        assert PeriodDtype(\"period[1S1U]\") == PeriodDtype(\"period[1000001U]\")\n        assert PeriodDtype(\"period[1S1U]\") is PeriodDtype(\"period[1000001U]\")",
        "begin_line": 392,
        "end_line": 400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_compat#402",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_compat(self)",
        "snippet": "    def test_compat(self):\n        assert not is_datetime64_ns_dtype(self.dtype)\n        assert not is_datetime64_ns_dtype(\"period[D]\")\n        assert not is_datetime64_dtype(self.dtype)\n        assert not is_datetime64_dtype(\"period[D]\")",
        "begin_line": 402,
        "end_line": 406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction_from_string#408",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction_from_string(self)",
        "snippet": "    def test_construction_from_string(self):\n        result = PeriodDtype(\"period[D]\")\n        assert is_dtype_equal(self.dtype, result)\n        result = PeriodDtype.construct_from_string(\"period[D]\")\n        assert is_dtype_equal(self.dtype, result)\n        with pytest.raises(TypeError):\n            PeriodDtype.construct_from_string(\"foo\")\n        with pytest.raises(TypeError):\n            PeriodDtype.construct_from_string(\"period[foo]\")\n        with pytest.raises(TypeError):\n            PeriodDtype.construct_from_string(\"foo[D]\")\n\n        with pytest.raises(TypeError):\n            PeriodDtype.construct_from_string(\"datetime64[ns]\")\n        with pytest.raises(TypeError):\n            PeriodDtype.construct_from_string(\"datetime64[ns, US/Eastern]\")",
        "begin_line": 408,
        "end_line": 423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_is_dtype#425",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_is_dtype(self)",
        "snippet": "    def test_is_dtype(self):\n        assert PeriodDtype.is_dtype(self.dtype)\n        assert PeriodDtype.is_dtype(\"period[D]\")\n        assert PeriodDtype.is_dtype(\"period[3D]\")\n        assert PeriodDtype.is_dtype(PeriodDtype(\"3D\"))\n        assert PeriodDtype.is_dtype(\"period[U]\")\n        assert PeriodDtype.is_dtype(\"period[S]\")\n        assert PeriodDtype.is_dtype(PeriodDtype(\"U\"))\n        assert PeriodDtype.is_dtype(PeriodDtype(\"S\"))\n\n        assert not PeriodDtype.is_dtype(\"D\")\n        assert not PeriodDtype.is_dtype(\"3D\")\n        assert not PeriodDtype.is_dtype(\"U\")\n        assert not PeriodDtype.is_dtype(\"S\")\n        assert not PeriodDtype.is_dtype(\"foo\")\n        assert not PeriodDtype.is_dtype(np.object_)\n        assert not PeriodDtype.is_dtype(np.int64)\n        assert not PeriodDtype.is_dtype(np.float64)",
        "begin_line": 425,
        "end_line": 442,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_equality#444",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_equality(self)",
        "snippet": "    def test_equality(self):\n        assert is_dtype_equal(self.dtype, \"period[D]\")\n        assert is_dtype_equal(self.dtype, PeriodDtype(\"D\"))\n        assert is_dtype_equal(self.dtype, PeriodDtype(\"D\"))\n        assert is_dtype_equal(PeriodDtype(\"D\"), PeriodDtype(\"D\"))\n\n        assert not is_dtype_equal(self.dtype, \"D\")\n        assert not is_dtype_equal(PeriodDtype(\"D\"), PeriodDtype(\"2D\"))",
        "begin_line": 444,
        "end_line": 451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_basic#453",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_basic(self)",
        "snippet": "    def test_basic(self):\n        assert is_period_dtype(self.dtype)\n\n        pidx = pd.period_range(\"2013-01-01 09:00\", periods=5, freq=\"H\")\n\n        assert is_period_dtype(pidx.dtype)\n        assert is_period_dtype(pidx)\n        with tm.assert_produces_warning(FutureWarning):\n            assert is_period(pidx)\n\n        s = Series(pidx, name=\"A\")\n\n        assert is_period_dtype(s.dtype)\n        assert is_period_dtype(s)\n        with tm.assert_produces_warning(FutureWarning):\n            assert is_period(s)\n\n        assert not is_period_dtype(np.dtype(\"float64\"))\n        assert not is_period_dtype(1.0)\n        with tm.assert_produces_warning(FutureWarning):\n            assert not is_period(np.dtype(\"float64\"))\n        with tm.assert_produces_warning(FutureWarning):\n            assert not is_period(1.0)",
        "begin_line": 453,
        "end_line": 475,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_empty#477",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_empty(self)",
        "snippet": "    def test_empty(self):\n        dt = PeriodDtype()\n        with pytest.raises(AttributeError):\n            str(dt)",
        "begin_line": 477,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_not_string#482",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_not_string(self)",
        "snippet": "    def test_not_string(self):\n        # though PeriodDtype has object kind, it cannot be string\n        assert not is_string_dtype(PeriodDtype(\"D\"))",
        "begin_line": 482,
        "end_line": 484,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.create#488",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.create(self)",
        "snippet": "    def create(self):\n        return IntervalDtype(\"int64\")",
        "begin_line": 488,
        "end_line": 489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_hash_vs_equality#491",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_hash_vs_equality(self)",
        "snippet": "    def test_hash_vs_equality(self):\n        # make sure that we satisfy is semantics\n        dtype = self.dtype\n        dtype2 = IntervalDtype(\"int64\")\n        dtype3 = IntervalDtype(dtype2)\n        assert dtype == dtype2\n        assert dtype2 == dtype\n        assert dtype3 == dtype\n        assert dtype is dtype2\n        assert dtype2 is dtype3\n        assert dtype3 is dtype\n        assert hash(dtype) == hash(dtype2)\n        assert hash(dtype) == hash(dtype3)\n\n        dtype1 = IntervalDtype(\"interval\")\n        dtype2 = IntervalDtype(dtype1)\n        dtype3 = IntervalDtype(\"interval\")\n        assert dtype2 == dtype1\n        assert dtype2 == dtype2\n        assert dtype2 == dtype3\n        assert dtype2 is dtype1\n        assert dtype2 is dtype2\n        assert dtype2 is dtype3\n        assert hash(dtype2) == hash(dtype1)\n        assert hash(dtype2) == hash(dtype2)\n        assert hash(dtype2) == hash(dtype3)",
        "begin_line": 491,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction#521",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction(self, subtype)",
        "snippet": "    def test_construction(self, subtype):\n        i = IntervalDtype(subtype)\n        assert i.subtype == np.dtype(\"int64\")\n        assert is_interval_dtype(i)",
        "begin_line": 521,
        "end_line": 524,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_generic#527",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_generic(self, subtype)",
        "snippet": "    def test_construction_generic(self, subtype):\n        # generic\n        i = IntervalDtype(subtype)\n        assert i.subtype is None\n        assert is_interval_dtype(i)",
        "begin_line": 527,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_not_supported#545",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_not_supported(self, subtype)",
        "snippet": "    def test_construction_not_supported(self, subtype):\n        # GH 19016\n        msg = (\n            \"category, object, and string subtypes are not supported \"\n            \"for IntervalDtype\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            IntervalDtype(subtype)",
        "begin_line": 545,
        "end_line": 552,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_errors#555",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_errors(self, subtype)",
        "snippet": "    def test_construction_errors(self, subtype):\n        msg = \"could not construct IntervalDtype\"\n        with pytest.raises(TypeError, match=msg):\n            IntervalDtype(subtype)",
        "begin_line": 555,
        "end_line": 558,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string#560",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string(self)",
        "snippet": "    def test_construction_from_string(self):\n        result = IntervalDtype(\"interval[int64]\")\n        assert is_dtype_equal(self.dtype, result)\n        result = IntervalDtype.construct_from_string(\"interval[int64]\")\n        assert is_dtype_equal(self.dtype, result)",
        "begin_line": 560,
        "end_line": 564,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string_errors#567",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string_errors(self, string)",
        "snippet": "    def test_construction_from_string_errors(self, string):\n        # these are invalid entirely\n        msg = \"a string needs to be passed, got type\"\n\n        with pytest.raises(TypeError, match=msg):\n            IntervalDtype.construct_from_string(string)",
        "begin_line": 567,
        "end_line": 572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string_error_subtype#575",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string_error_subtype(self, string)",
        "snippet": "    def test_construction_from_string_error_subtype(self, string):\n        # this is an invalid subtype\n        msg = (\n            \"Incorrectly formatted string passed to constructor. \"\n            r\"Valid formats include Interval or Interval\\[dtype\\] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n\n        with pytest.raises(TypeError, match=msg):\n            IntervalDtype.construct_from_string(string)",
        "begin_line": 575,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_subclass#586",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_subclass(self)",
        "snippet": "    def test_subclass(self):\n        a = IntervalDtype(\"interval[int64]\")\n        b = IntervalDtype(\"interval[int64]\")\n\n        assert issubclass(type(a), type(a))\n        assert issubclass(type(a), type(b))",
        "begin_line": 586,
        "end_line": 591,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_is_dtype#593",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_is_dtype(self)",
        "snippet": "    def test_is_dtype(self):\n        assert IntervalDtype.is_dtype(self.dtype)\n        assert IntervalDtype.is_dtype(\"interval\")\n        assert IntervalDtype.is_dtype(IntervalDtype(\"float64\"))\n        assert IntervalDtype.is_dtype(IntervalDtype(\"int64\"))\n        assert IntervalDtype.is_dtype(IntervalDtype(np.int64))\n\n        assert not IntervalDtype.is_dtype(\"D\")\n        assert not IntervalDtype.is_dtype(\"3D\")\n        assert not IntervalDtype.is_dtype(\"U\")\n        assert not IntervalDtype.is_dtype(\"S\")\n        assert not IntervalDtype.is_dtype(\"foo\")\n        assert not IntervalDtype.is_dtype(\"IntervalA\")\n        assert not IntervalDtype.is_dtype(np.object_)\n        assert not IntervalDtype.is_dtype(np.int64)\n        assert not IntervalDtype.is_dtype(np.float64)",
        "begin_line": 593,
        "end_line": 608,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality#610",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality(self)",
        "snippet": "    def test_equality(self):\n        assert is_dtype_equal(self.dtype, \"interval[int64]\")\n        assert is_dtype_equal(self.dtype, IntervalDtype(\"int64\"))\n        assert is_dtype_equal(IntervalDtype(\"int64\"), IntervalDtype(\"int64\"))\n\n        assert not is_dtype_equal(self.dtype, \"int64\")\n        assert not is_dtype_equal(IntervalDtype(\"int64\"), IntervalDtype(\"float64\"))\n\n        # invalid subtype comparisons do not raise when directly compared\n        dtype1 = IntervalDtype(\"float64\")\n        dtype2 = IntervalDtype(\"datetime64[ns, US/Eastern]\")\n        assert dtype1 != dtype2\n        assert dtype2 != dtype1",
        "begin_line": 610,
        "end_line": 622,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality_generic#639",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality_generic(self, subtype)",
        "snippet": "    def test_equality_generic(self, subtype):\n        # GH 18980\n        dtype = IntervalDtype(subtype)\n        assert is_dtype_equal(dtype, \"interval\")\n        assert is_dtype_equal(dtype, IntervalDtype())",
        "begin_line": 639,
        "end_line": 643,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_name_repr#657",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_name_repr(self, subtype)",
        "snippet": "    def test_name_repr(self, subtype):\n        # GH 18980\n        dtype = IntervalDtype(subtype)\n        expected = \"interval[{subtype}]\".format(subtype=subtype)\n        assert str(dtype) == expected\n        assert dtype.name == \"interval\"",
        "begin_line": 657,
        "end_line": 662,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_name_repr_generic#665",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_name_repr_generic(self, subtype)",
        "snippet": "    def test_name_repr_generic(self, subtype):\n        # GH 18980\n        dtype = IntervalDtype(subtype)\n        assert str(dtype) == \"interval\"\n        assert dtype.name == \"interval\"",
        "begin_line": 665,
        "end_line": 669,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic#671",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic(self)",
        "snippet": "    def test_basic(self):\n        assert is_interval_dtype(self.dtype)\n\n        ii = IntervalIndex.from_breaks(range(3))\n\n        assert is_interval_dtype(ii.dtype)\n        assert is_interval_dtype(ii)\n\n        s = Series(ii, name=\"A\")\n\n        assert is_interval_dtype(s.dtype)\n        assert is_interval_dtype(s)",
        "begin_line": 671,
        "end_line": 682,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic_dtype#684",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic_dtype(self)",
        "snippet": "    def test_basic_dtype(self):\n        assert is_interval_dtype(\"interval[int64]\")\n        assert is_interval_dtype(IntervalIndex.from_tuples([(0, 1)]))\n        assert is_interval_dtype(IntervalIndex.from_breaks(np.arange(4)))\n        assert is_interval_dtype(\n            IntervalIndex.from_breaks(date_range(\"20130101\", periods=3))\n        )\n        assert not is_interval_dtype(\"U\")\n        assert not is_interval_dtype(\"S\")\n        assert not is_interval_dtype(\"foo\")\n        assert not is_interval_dtype(np.object_)\n        assert not is_interval_dtype(np.int64)\n        assert not is_interval_dtype(np.float64)",
        "begin_line": 684,
        "end_line": 696,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_caching#698",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype",
        "signature": "pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_caching(self)",
        "snippet": "    def test_caching(self):\n        IntervalDtype.reset_cache()\n        dtype = IntervalDtype(\"int64\")\n        assert len(IntervalDtype._cache) == 1\n\n        IntervalDtype(\"interval\")\n        assert len(IntervalDtype._cache) == 2\n\n        IntervalDtype.reset_cache()\n        tm.round_trip_pickle(dtype)\n        assert len(IntervalDtype._cache) == 0",
        "begin_line": 698,
        "end_line": 708,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_basic#722",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_basic(self, categories, ordered_fixture)",
        "snippet": "    def test_basic(self, categories, ordered_fixture):\n        c1 = CategoricalDtype(categories, ordered=ordered_fixture)\n        tm.assert_index_equal(c1.categories, pd.Index(categories))\n        assert c1.ordered is ordered_fixture",
        "begin_line": 722,
        "end_line": 725,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_order_matters#727",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_order_matters(self)",
        "snippet": "    def test_order_matters(self):\n        categories = [\"a\", \"b\"]\n        c1 = CategoricalDtype(categories, ordered=True)\n        c2 = CategoricalDtype(categories, ordered=False)\n        c3 = CategoricalDtype(categories, ordered=None)\n        assert c1 is not c2\n        assert c1 is not c3",
        "begin_line": 727,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_unordered_same#736",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_unordered_same(self, ordered)",
        "snippet": "    def test_unordered_same(self, ordered):\n        c1 = CategoricalDtype([\"a\", \"b\"], ordered=ordered)\n        c2 = CategoricalDtype([\"b\", \"a\"], ordered=ordered)\n        assert hash(c1) == hash(c2)",
        "begin_line": 736,
        "end_line": 739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categories#741",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categories(self)",
        "snippet": "    def test_categories(self):\n        result = CategoricalDtype([\"a\", \"b\", \"c\"])\n        tm.assert_index_equal(result.categories, pd.Index([\"a\", \"b\", \"c\"]))\n        with tm.assert_produces_warning(FutureWarning):\n            assert result.ordered is None",
        "begin_line": 741,
        "end_line": 745,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_equal_but_different#747",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_equal_but_different(self, ordered_fixture)",
        "snippet": "    def test_equal_but_different(self, ordered_fixture):\n        c1 = CategoricalDtype([1, 2, 3])\n        c2 = CategoricalDtype([1.0, 2.0, 3.0])\n        assert c1 is not c2\n        assert c1 != c2",
        "begin_line": 747,
        "end_line": 751,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_order_hashes_different#754",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_order_hashes_different(self, v1, v2)",
        "snippet": "    def test_order_hashes_different(self, v1, v2):\n        c1 = CategoricalDtype(v1, ordered=False)\n        c2 = CategoricalDtype(v2, ordered=True)\n        c3 = CategoricalDtype(v1, ordered=None)\n        assert c1 is not c2\n        assert c1 is not c3",
        "begin_line": 754,
        "end_line": 759,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_nan_invalid#761",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_nan_invalid(self)",
        "snippet": "    def test_nan_invalid(self):\n        with pytest.raises(ValueError):\n            CategoricalDtype([1, 2, np.nan])",
        "begin_line": 761,
        "end_line": 763,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_non_unique_invalid#765",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_non_unique_invalid(self)",
        "snippet": "    def test_non_unique_invalid(self):\n        with pytest.raises(ValueError):\n            CategoricalDtype([1, 2, 1])",
        "begin_line": 765,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_same_categories_different_order#769",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_same_categories_different_order(self)",
        "snippet": "    def test_same_categories_different_order(self):\n        c1 = CategoricalDtype([\"a\", \"b\"], ordered=True)\n        c2 = CategoricalDtype([\"b\", \"a\"], ordered=True)\n        assert c1 is not c2",
        "begin_line": 769,
        "end_line": 772,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_equality#776",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_equality(self, ordered1, ordered2)",
        "snippet": "    def test_categorical_equality(self, ordered1, ordered2):\n        # same categories, same order\n        # any combination of None/False are equal\n        # True/True is the only combination with True that are equal\n        c1 = CategoricalDtype(list(\"abc\"), ordered1)\n        c2 = CategoricalDtype(list(\"abc\"), ordered2)\n        result = c1 == c2\n        expected = bool(ordered1) is bool(ordered2)\n        assert result is expected\n\n        # same categories, different order\n        # any combination of None/False are equal (order doesn't matter)\n        # any combination with True are not equal (different order of cats)\n        c1 = CategoricalDtype(list(\"abc\"), ordered1)\n        c2 = CategoricalDtype(list(\"cab\"), ordered2)\n        result = c1 == c2\n        expected = (bool(ordered1) is False) and (bool(ordered2) is False)\n        assert result is expected\n\n        # different categories\n        c2 = CategoricalDtype([1, 2, 3], ordered2)\n        assert c1 != c2\n\n        # none categories\n        c1 = CategoricalDtype(list(\"abc\"), ordered1)\n        c2 = CategoricalDtype(None, ordered2)\n        c3 = CategoricalDtype(None, ordered1)\n        assert c1 == c2\n        assert c2 == c1\n        assert c2 == c3",
        "begin_line": 776,
        "end_line": 805,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_equality_strings#809",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_equality_strings(self, categories, ordered_fixture, other)",
        "snippet": "    def test_categorical_equality_strings(self, categories, ordered_fixture, other):\n        c1 = CategoricalDtype(categories, ordered_fixture)\n        result = c1 == other\n        expected = other == \"category\"\n        assert result is expected",
        "begin_line": 809,
        "end_line": 813,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_invalid_raises#815",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_invalid_raises(self)",
        "snippet": "    def test_invalid_raises(self):\n        with pytest.raises(TypeError, match=\"ordered\"):\n            CategoricalDtype([\"a\", \"b\"], ordered=\"foo\")\n\n        with pytest.raises(TypeError, match=\"'categories' must be list-like\"):\n            CategoricalDtype(\"category\")",
        "begin_line": 815,
        "end_line": 820,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_mixed#822",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_mixed(self)",
        "snippet": "    def test_mixed(self):\n        a = CategoricalDtype([\"a\", \"b\", 1, 2])\n        b = CategoricalDtype([\"a\", \"b\", \"1\", \"2\"])\n        assert hash(a) != hash(b)",
        "begin_line": 822,
        "end_line": 825,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_identity#827",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_identity(self)",
        "snippet": "    def test_from_categorical_dtype_identity(self):\n        c1 = Categorical([1, 2], categories=[1, 2, 3], ordered=True)\n        # Identity test for no changes\n        c2 = CategoricalDtype._from_categorical_dtype(c1)\n        assert c2 is c1",
        "begin_line": 827,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_categories#833",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_categories(self)",
        "snippet": "    def test_from_categorical_dtype_categories(self):\n        c1 = Categorical([1, 2], categories=[1, 2, 3], ordered=True)\n        # override categories\n        result = CategoricalDtype._from_categorical_dtype(c1, categories=[2, 3])\n        assert result == CategoricalDtype([2, 3], ordered=True)",
        "begin_line": 833,
        "end_line": 837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_ordered#839",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_ordered(self)",
        "snippet": "    def test_from_categorical_dtype_ordered(self):\n        c1 = Categorical([1, 2], categories=[1, 2, 3], ordered=True)\n        # override ordered\n        result = CategoricalDtype._from_categorical_dtype(c1, ordered=False)\n        assert result == CategoricalDtype([1, 2, 3], ordered=False)",
        "begin_line": 839,
        "end_line": 843,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_both#845",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_from_categorical_dtype_both(self)",
        "snippet": "    def test_from_categorical_dtype_both(self):\n        c1 = Categorical([1, 2], categories=[1, 2, 3], ordered=True)\n        # override ordered\n        result = CategoricalDtype._from_categorical_dtype(\n            c1, categories=[1, 2], ordered=False\n        )\n        assert result == CategoricalDtype([1, 2], ordered=False)",
        "begin_line": 845,
        "end_line": 851,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_str_vs_repr#853",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_str_vs_repr(self, ordered_fixture)",
        "snippet": "    def test_str_vs_repr(self, ordered_fixture):\n        c1 = CategoricalDtype([\"a\", \"b\"], ordered=ordered_fixture)\n        assert str(c1) == \"category\"\n        # Py2 will have unicode prefixes\n        pat = r\"CategoricalDtype\\(categories=\\[.*\\], ordered={ordered}\\)\"\n        assert re.match(pat.format(ordered=ordered_fixture), repr(c1))",
        "begin_line": 853,
        "end_line": 858,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_categories#860",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_categorical_categories(self)",
        "snippet": "    def test_categorical_categories(self):\n        # GH17884\n        c1 = CategoricalDtype(Categorical([\"a\", \"b\"]))\n        tm.assert_index_equal(c1.categories, pd.Index([\"a\", \"b\"]))\n        c1 = CategoricalDtype(CategoricalIndex([\"a\", \"b\"]))\n        tm.assert_index_equal(c1.categories, pd.Index([\"a\", \"b\"]))",
        "begin_line": 860,
        "end_line": 865,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype#871",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype(self, ordered_fixture, new_categories, new_ordered)",
        "snippet": "    def test_update_dtype(self, ordered_fixture, new_categories, new_ordered):\n        dtype = CategoricalDtype(list(\"abc\"), ordered_fixture)\n        new_dtype = CategoricalDtype(new_categories, new_ordered)\n\n        expected_categories = new_dtype.categories\n        if expected_categories is None:\n            expected_categories = dtype.categories\n\n        expected_ordered = new_ordered\n        if new_ordered is ordered_sentinel or new_ordered is None:\n            expected_ordered = dtype.ordered\n\n        # GH 26336\n        if new_ordered is ordered_sentinel and ordered_fixture is True:\n            with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n                result = dtype.update_dtype(new_dtype)\n        else:\n            result = dtype.update_dtype(new_dtype)\n\n        tm.assert_index_equal(result.categories, expected_categories)\n        assert result.ordered is expected_ordered",
        "begin_line": 871,
        "end_line": 891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype_string#893",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype_string(self, ordered_fixture)",
        "snippet": "    def test_update_dtype_string(self, ordered_fixture):\n        dtype = CategoricalDtype(list(\"abc\"), ordered_fixture)\n        expected_categories = dtype.categories\n        expected_ordered = dtype.ordered\n        result = dtype.update_dtype(\"category\")\n        tm.assert_index_equal(result.categories, expected_categories)\n        assert result.ordered is expected_ordered",
        "begin_line": 893,
        "end_line": 899,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype_errors#902",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_update_dtype_errors(self, bad_dtype)",
        "snippet": "    def test_update_dtype_errors(self, bad_dtype):\n        dtype = CategoricalDtype(list(\"abc\"), False)\n        msg = \"a CategoricalDtype must be passed to perform an update, \"\n        with pytest.raises(ValueError, match=msg):\n            dtype.update_dtype(bad_dtype)",
        "begin_line": 902,
        "end_line": 906,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_ordered_none_default_deprecated#909",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_ordered_none_default_deprecated(self, ordered)",
        "snippet": "    def test_ordered_none_default_deprecated(self, ordered):\n        # GH 26403: CDT.ordered only warns if ordered is not explicitly passed\n        dtype = CategoricalDtype(list(\"abc\"), ordered=ordered)\n        warning = FutureWarning if ordered is ordered_sentinel else None\n        with tm.assert_produces_warning(warning):\n            dtype.ordered",
        "begin_line": 909,
        "end_line": 914,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_pickle_ordered_from_sentinel#917",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized",
        "signature": "pandas.tests.dtypes.test_dtypes.TestCategoricalDtypeParametrized.test_pickle_ordered_from_sentinel(self, ordered)",
        "snippet": "    def test_pickle_ordered_from_sentinel(self, ordered):\n        # GH 27295: can remove test when _ordered_from_sentinel is removed (GH 26403)\n        dtype = CategoricalDtype(categories=list(\"abc\"), ordered=ordered)\n\n        warning = FutureWarning if ordered is ordered_sentinel else None\n        with tm.assert_produces_warning(warning, check_stacklevel=False):\n            dtype_from_pickle = tm.round_trip_pickle(dtype)\n\n        result = dtype_from_pickle._ordered_from_sentinel\n        expected = ordered is ordered_sentinel\n        assert result is expected",
        "begin_line": 917,
        "end_line": 927,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.test_registry#933",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes",
        "signature": "pandas.tests.dtypes.test_dtypes.test_registry(dtype)",
        "snippet": "def test_registry(dtype):\n    assert dtype in registry.dtypes",
        "begin_line": 933,
        "end_line": 934,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.test_registry_find#949",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes",
        "signature": "pandas.tests.dtypes.test_dtypes.test_registry_find(dtype, expected)",
        "snippet": "def test_registry_find(dtype, expected):\n    assert registry.find(dtype) == expected",
        "begin_line": 949,
        "end_line": 950,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.test_is_bool_dtype#968",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes",
        "signature": "pandas.tests.dtypes.test_dtypes.test_is_bool_dtype(dtype, expected)",
        "snippet": "def test_is_bool_dtype(dtype, expected):\n    result = is_bool_dtype(dtype)\n    assert result is expected",
        "begin_line": 968,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.test_is_bool_dtype_sparse#973",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes",
        "signature": "pandas.tests.dtypes.test_dtypes.test_is_bool_dtype_sparse()",
        "snippet": "def test_is_bool_dtype_sparse():\n    result = is_bool_dtype(pd.Series(pd.SparseArray([True, False])))\n    assert result is True",
        "begin_line": 973,
        "end_line": 975,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_dtypes.test_is_dtype_no_warning#992",
        "src_path": "pandas/tests/dtypes/test_dtypes.py",
        "class_name": "pandas.tests.dtypes.test_dtypes",
        "signature": "pandas.tests.dtypes.test_dtypes.test_is_dtype_no_warning(check)",
        "snippet": "def test_is_dtype_no_warning(check):\n    data = pd.DataFrame({\"A\": [1, 2]})\n    with tm.assert_produces_warning(None):\n        check(data)\n\n    with tm.assert_produces_warning(None):\n        check(data[\"A\"])",
        "begin_line": 992,
        "end_line": 998,
        "comment": "",
        "is_bug": false
    }
]