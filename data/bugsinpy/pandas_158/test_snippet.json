[
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_setindex#11",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_setindex(self, string_series)",
        "snippet": "    def test_setindex(self, string_series):\n        # wrong type\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some\"\n            r\" kind, None was passed\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            string_series.index = None\n\n        # wrong length\n        msg = (\n            \"Length mismatch: Expected axis has 30 elements, new\"\n            \" values have 29 elements\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            string_series.index = np.arange(len(string_series) - 1)\n\n        # works\n        string_series.index = np.arange(len(string_series))\n        assert isinstance(string_series.index, Index)",
        "begin_line": 11,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename#34",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename(self, datetime_series)",
        "snippet": "    def test_rename(self, datetime_series):\n        ts = datetime_series\n        renamer = lambda x: x.strftime(\"%Y%m%d\")\n        renamed = ts.rename(renamer)\n        assert renamed.index[0] == renamer(ts.index[0])\n\n        # dict\n        rename_dict = dict(zip(ts.index, renamed.index))\n        renamed2 = ts.rename(rename_dict)\n        tm.assert_series_equal(renamed, renamed2)\n\n        # partial dict\n        s = Series(np.arange(4), index=[\"a\", \"b\", \"c\", \"d\"], dtype=\"int64\")\n        renamed = s.rename({\"b\": \"foo\", \"d\": \"bar\"})\n        tm.assert_index_equal(renamed.index, Index([\"a\", \"foo\", \"c\", \"bar\"]))\n\n        # index with name\n        renamer = Series(\n            np.arange(4), index=Index([\"a\", \"b\", \"c\", \"d\"], name=\"name\"), dtype=\"int64\"\n        )\n        renamed = renamer.rename({})\n        assert renamed.index.name == renamer.index.name",
        "begin_line": 34,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_by_series#57",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_by_series(self)",
        "snippet": "    def test_rename_by_series(self):\n        s = Series(range(5), name=\"foo\")\n        renamer = Series({1: 10, 2: 20})\n        result = s.rename(renamer)\n        expected = Series(range(5), index=[0, 10, 20, 3, 4], name=\"foo\")\n        tm.assert_series_equal(result, expected)",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name#64",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name(self)",
        "snippet": "    def test_rename_set_name(self):\n        s = Series(range(4), index=list(\"abcd\"))\n        for name in [\"foo\", 123, 123.0, datetime(2001, 11, 11), (\"foo\",)]:\n            result = s.rename(name)\n            assert result.name == name\n            tm.assert_numpy_array_equal(result.index.values, s.index.values)\n            assert s.name is None",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name_inplace#72",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name_inplace(self)",
        "snippet": "    def test_rename_set_name_inplace(self):\n        s = Series(range(3), index=list(\"abc\"))\n        for name in [\"foo\", 123, 123.0, datetime(2001, 11, 11), (\"foo\",)]:\n            s.rename(name, inplace=True)\n            assert s.name == name\n\n            exp = np.array([\"a\", \"b\", \"c\"], dtype=np.object_)\n            tm.assert_numpy_array_equal(s.index.values, exp)",
        "begin_line": 72,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_supported#81",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_supported(self)",
        "snippet": "    def test_rename_axis_supported(self):\n        # Supporting axis for compatibility, detailed in GH-18589\n        s = Series(range(5))\n        s.rename({}, axis=0)\n        s.rename({}, axis=\"index\")\n        with pytest.raises(ValueError, match=\"No axis named 5\"):\n            s.rename({}, axis=5)",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name_attribute#89",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name_attribute(self)",
        "snippet": "    def test_set_name_attribute(self):\n        s = Series([1, 2, 3])\n        s2 = Series([1, 2, 3], name=\"bar\")\n        for name in [7, 7.0, \"name\", datetime(2001, 1, 1), (1,), \"\\u05D0\"]:\n            s.name = name\n            assert s.name == name\n            s2.name = name\n            assert s2.name == name",
        "begin_line": 89,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name#98",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name(self)",
        "snippet": "    def test_set_name(self):\n        s = Series([1, 2, 3])\n        s2 = s._set_name(\"foo\")\n        assert s2.name == \"foo\"\n        assert s.name is None\n        assert s is not s2",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_inplace#105",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_inplace(self, datetime_series)",
        "snippet": "    def test_rename_inplace(self, datetime_series):\n        renamer = lambda x: x.strftime(\"%Y%m%d\")\n        expected = renamer(datetime_series.index[0])\n\n        datetime_series.rename(renamer, inplace=True)\n        assert datetime_series.index[0] == expected",
        "begin_line": 105,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_index_makes_timeseries#112",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_index_makes_timeseries(self)",
        "snippet": "    def test_set_index_makes_timeseries(self):\n        idx = tm.makeDateIndex(10)\n\n        s = Series(range(10))\n        s.index = idx\n        assert s.index.is_all_dates",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index#119",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index(self)",
        "snippet": "    def test_reset_index(self):\n        df = tm.makeDataFrame()[:5]\n        ser = df.stack()\n        ser.index.names = [\"hash\", \"category\"]\n\n        ser.name = \"value\"\n        df = ser.reset_index()\n        assert \"value\" in df\n\n        df = ser.reset_index(name=\"value2\")\n        assert \"value2\" in df\n\n        # check inplace\n        s = ser.reset_index(drop=True)\n        s2 = ser\n        s2.reset_index(drop=True, inplace=True)\n        tm.assert_series_equal(s, s2)\n\n        # level\n        index = MultiIndex(\n            levels=[[\"bar\"], [\"one\", \"two\", \"three\"], [0, 1]],\n            codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],\n        )\n        s = Series(np.random.randn(6), index=index)\n        rs = s.reset_index(level=1)\n        assert len(rs.columns) == 2\n\n        rs = s.reset_index(level=[0, 2], drop=True)\n        tm.assert_index_equal(rs.index, Index(index.get_level_values(1)))\n        assert isinstance(rs, Series)",
        "begin_line": 119,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_name#150",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_name(self)",
        "snippet": "    def test_reset_index_name(self):\n        s = Series([1, 2, 3], index=Index(range(3), name=\"x\"))\n        assert s.reset_index().index.name is None\n        assert s.reset_index(drop=True).index.name is None",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_level#155",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_level(self)",
        "snippet": "    def test_reset_index_level(self):\n        df = DataFrame([[1, 2, 3], [4, 5, 6]], columns=[\"A\", \"B\", \"C\"])\n\n        for levels in [\"A\", \"B\"], [0, 1]:\n            # With MultiIndex\n            s = df.set_index([\"A\", \"B\"])[\"C\"]\n\n            result = s.reset_index(level=levels[0])\n            tm.assert_frame_equal(result, df.set_index(\"B\"))\n\n            result = s.reset_index(level=levels[:1])\n            tm.assert_frame_equal(result, df.set_index(\"B\"))\n\n            result = s.reset_index(level=levels)\n            tm.assert_frame_equal(result, df)\n\n            result = df.set_index([\"A\", \"B\"]).reset_index(level=levels, drop=True)\n            tm.assert_frame_equal(result, df[[\"C\"]])\n\n            with pytest.raises(KeyError, match=\"Level E \"):\n                s.reset_index(level=[\"A\", \"E\"])\n\n            # With single-level Index\n            s = df.set_index(\"A\")[\"B\"]\n\n            result = s.reset_index(level=levels[0])\n            tm.assert_frame_equal(result, df[[\"A\", \"B\"]])\n\n            result = s.reset_index(level=levels[:1])\n            tm.assert_frame_equal(result, df[[\"A\", \"B\"]])\n\n            result = s.reset_index(level=levels[0], drop=True)\n            tm.assert_series_equal(result, df[\"B\"])\n\n            with pytest.raises(IndexError, match=\"Too many levels\"):\n                s.reset_index(level=[0, 1, 2])\n\n        # Check that .reset_index([],drop=True) doesn't fail\n        result = Series(range(4)).reset_index([], drop=True)\n        expected = Series(range(4))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 155,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_range#197",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_range(self)",
        "snippet": "    def test_reset_index_range(self):\n        # GH 12071\n        s = Series(range(2), name=\"A\", dtype=\"int64\")\n        series_result = s.reset_index()\n        assert isinstance(series_result.index, RangeIndex)\n        series_expected = DataFrame(\n            [[0, 0], [1, 1]], columns=[\"index\", \"A\"], index=RangeIndex(stop=2)\n        )\n        tm.assert_frame_equal(series_result, series_expected)",
        "begin_line": 197,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reorder_levels#207",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reorder_levels(self)",
        "snippet": "    def test_reorder_levels(self):\n        index = MultiIndex(\n            levels=[[\"bar\"], [\"one\", \"two\", \"three\"], [0, 1]],\n            codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],\n            names=[\"L0\", \"L1\", \"L2\"],\n        )\n        s = Series(np.arange(6), index=index)\n\n        # no change, position\n        result = s.reorder_levels([0, 1, 2])\n        tm.assert_series_equal(s, result)\n\n        # no change, labels\n        result = s.reorder_levels([\"L0\", \"L1\", \"L2\"])\n        tm.assert_series_equal(s, result)\n\n        # rotate, position\n        result = s.reorder_levels([1, 2, 0])\n        e_idx = MultiIndex(\n            levels=[[\"one\", \"two\", \"three\"], [0, 1], [\"bar\"]],\n            codes=[[0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0]],\n            names=[\"L1\", \"L2\", \"L0\"],\n        )\n        expected = Series(np.arange(6), index=e_idx)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 207,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_mapper#233",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_mapper(self)",
        "snippet": "    def test_rename_axis_mapper(self):\n        # GH 19978\n        mi = MultiIndex.from_product([[\"a\", \"b\", \"c\"], [1, 2]], names=[\"ll\", \"nn\"])\n        s = Series([i for i in range(len(mi))], index=mi)\n\n        result = s.rename_axis(index={\"ll\": \"foo\"})\n        assert result.index.names == [\"foo\", \"nn\"]\n\n        result = s.rename_axis(index=str.upper, axis=0)\n        assert result.index.names == [\"LL\", \"NN\"]\n\n        result = s.rename_axis(index=[\"foo\", \"goo\"])\n        assert result.index.names == [\"foo\", \"goo\"]\n\n        with pytest.raises(TypeError, match=\"unexpected\"):\n            s.rename_axis(columns=\"wrong\")",
        "begin_line": 233,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_inplace#250",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_inplace(self, datetime_series)",
        "snippet": "    def test_rename_axis_inplace(self, datetime_series):\n        # GH 15704\n        expected = datetime_series.rename_axis(\"foo\")\n        result = datetime_series\n        no_return = result.rename_axis(\"foo\", inplace=True)\n\n        assert no_return is None\n        tm.assert_series_equal(result, expected)",
        "begin_line": 250,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_none#260",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_axis_none(self, kwargs)",
        "snippet": "    def test_rename_axis_none(self, kwargs):\n        # GH 25034\n        index = Index(list(\"abc\"), name=\"foo\")\n        df = Series([1, 2, 3], index=index)\n\n        result = df.rename_axis(**kwargs)\n        expected_index = index.rename(None) if kwargs else index\n        expected = Series([1, 2, 3], index=expected_index)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 260,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer#270",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer(self)",
        "snippet": "    def test_rename_with_custom_indexer(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n\n        ix = MyIndexer()\n        s = Series([1, 2, 3]).rename(ix)\n        assert s.name is ix",
        "begin_line": 270,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.MyIndexer.test_rename_with_custom_indexer#270",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.MyIndexer",
        "signature": "pandas.tests.series.test_alter_axes.MyIndexer.test_rename_with_custom_indexer(self)",
        "snippet": "    def test_rename_with_custom_indexer(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n\n        ix = MyIndexer()\n        s = Series([1, 2, 3]).rename(ix)\n        assert s.name is ix",
        "begin_line": 270,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace#279",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace(self)",
        "snippet": "    def test_rename_with_custom_indexer_inplace(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n\n        ix = MyIndexer()\n        s = Series([1, 2, 3])\n        s.rename(ix, inplace=True)\n        assert s.name is ix",
        "begin_line": 279,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.MyIndexer.test_rename_with_custom_indexer_inplace#279",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.MyIndexer",
        "signature": "pandas.tests.series.test_alter_axes.MyIndexer.test_rename_with_custom_indexer_inplace(self)",
        "snippet": "    def test_rename_with_custom_indexer_inplace(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n\n        ix = MyIndexer()\n        s = Series([1, 2, 3])\n        s.rename(ix, inplace=True)\n        assert s.name is ix",
        "begin_line": 279,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_inplace_axes#289",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_inplace_axes(self, axis_series)",
        "snippet": "    def test_set_axis_inplace_axes(self, axis_series):\n        # GH14636\n        ser = Series(np.arange(4), index=[1, 3, 5, 7], dtype=\"int64\")\n\n        expected = ser.copy()\n        expected.index = list(\"abcd\")\n\n        # inplace=True\n        # The FutureWarning comes from the fact that we would like to have\n        # inplace default to False some day\n        result = ser.copy()\n        result.set_axis(list(\"abcd\"), axis=axis_series, inplace=True)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 289,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_inplace#303",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_inplace(self)",
        "snippet": "    def test_set_axis_inplace(self):\n        # GH14636\n\n        s = Series(np.arange(4), index=[1, 3, 5, 7], dtype=\"int64\")\n\n        expected = s.copy()\n        expected.index = list(\"abcd\")\n\n        # inplace=False\n        result = s.set_axis(list(\"abcd\"), axis=0, inplace=False)\n        tm.assert_series_equal(expected, result)\n\n        # omitting the \"axis\" parameter\n        with tm.assert_produces_warning(None):\n            result = s.set_axis(list(\"abcd\"), inplace=False)\n        tm.assert_series_equal(result, expected)\n\n        # wrong values for the \"axis\" parameter\n        for axis in [2, \"foo\"]:\n            with pytest.raises(ValueError, match=\"No axis named\"):\n                s.set_axis(list(\"abcd\"), axis=axis, inplace=False)",
        "begin_line": 303,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_prior_to_deprecation_signature#325",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_axis_prior_to_deprecation_signature(self)",
        "snippet": "    def test_set_axis_prior_to_deprecation_signature(self):\n        s = Series(np.arange(4), index=[1, 3, 5, 7], dtype=\"int64\")\n\n        expected = s.copy()\n        expected.index = list(\"abcd\")\n\n        for axis in [0, \"index\"]:\n            with tm.assert_produces_warning(FutureWarning):\n                result = s.set_axis(0, list(\"abcd\"), inplace=False)\n            tm.assert_series_equal(result, expected)",
        "begin_line": 325,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_drop_errors#336",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_drop_errors(self)",
        "snippet": "    def test_reset_index_drop_errors(self):\n        #  GH 20925\n\n        # KeyError raised for series index when passed level name is missing\n        s = Series(range(4))\n        with pytest.raises(KeyError, match=\"does not match index name\"):\n            s.reset_index(\"wrong\", drop=True)\n        with pytest.raises(KeyError, match=\"does not match index name\"):\n            s.reset_index(\"wrong\")\n\n        # KeyError raised for series when level to be dropped is missing\n        s = Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2))\n        with pytest.raises(KeyError, match=\"not found\"):\n            s.reset_index(\"wrong\", drop=True)",
        "begin_line": 336,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_droplevel#351",
        "src_path": "pandas/tests/series/test_alter_axes.py",
        "class_name": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes",
        "signature": "pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_droplevel(self)",
        "snippet": "    def test_droplevel(self):\n        # GH20342\n        ser = Series([1, 2, 3, 4])\n        ser.index = MultiIndex.from_arrays(\n            [(1, 2, 3, 4), (5, 6, 7, 8)], names=[\"a\", \"b\"]\n        )\n        expected = ser.reset_index(\"b\", drop=True)\n        result = ser.droplevel(\"b\", axis=\"index\")\n        tm.assert_series_equal(result, expected)\n        # test that droplevel raises ValueError on axis != 0\n        with pytest.raises(ValueError):\n            ser.droplevel(1, axis=\"columns\")",
        "begin_line": 351,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.conftest.test_data#7",
        "src_path": "pandas/tests/series/indexing/conftest.py",
        "class_name": "pandas.tests.series.indexing.conftest",
        "signature": "pandas.tests.series.indexing.conftest.test_data()",
        "snippet": "def test_data():\n    return TestData()",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.common.TestData.ts#11",
        "src_path": "pandas/tests/series/common.py",
        "class_name": "pandas.tests.series.common.TestData",
        "signature": "pandas.tests.series.common.TestData.ts(self)",
        "snippet": "    def ts(self):\n        ts = _ts.copy()\n        ts.name = \"ts\"\n        return ts",
        "begin_line": 11,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.common.TestData.series#17",
        "src_path": "pandas/tests/series/common.py",
        "class_name": "pandas.tests.series.common.TestData",
        "signature": "pandas.tests.series.common.TestData.series(self)",
        "snippet": "    def series(self):\n        series = tm.makeStringSeries()\n        series.name = \"series\"\n        return series",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.common.TestData.objSeries#23",
        "src_path": "pandas/tests/series/common.py",
        "class_name": "pandas.tests.series.common.TestData",
        "signature": "pandas.tests.series.common.TestData.objSeries(self)",
        "snippet": "    def objSeries(self):\n        objSeries = tm.makeObjectSeries()\n        objSeries.name = \"objects\"\n        return objSeries",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.common.TestData.empty#29",
        "src_path": "pandas/tests/series/common.py",
        "class_name": "pandas.tests.series.common.TestData",
        "signature": "pandas.tests.series.common.TestData.empty(self)",
        "snippet": "    def empty(self):\n        return pd.Series([], index=[])",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.datetime_series#7",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.datetime_series()",
        "snippet": "def datetime_series():\n    \"\"\"\n    Fixture for Series of floats with DatetimeIndex\n    \"\"\"\n    s = tm.makeTimeSeries()\n    s.name = \"ts\"\n    return s",
        "begin_line": 7,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.string_series#17",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.string_series()",
        "snippet": "def string_series():\n    \"\"\"\n    Fixture for Series of floats with Index of unique strings\n    \"\"\"\n    s = tm.makeStringSeries()\n    s.name = \"series\"\n    return s",
        "begin_line": 17,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.object_series#27",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.object_series()",
        "snippet": "def object_series():\n    \"\"\"\n    Fixture for Series of dtype datetime64[ns] with Index of unique strings\n    \"\"\"\n    s = tm.makeObjectSeries()\n    s.name = \"objects\"\n    return s",
        "begin_line": 27,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    }
]