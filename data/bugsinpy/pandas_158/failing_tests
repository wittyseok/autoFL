coverage run -m pytest pandas/tests/series/test_alter_axes.py::TestSeriesAlterAxes::test_rename_with_custom_indexer
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/series/test_alter_axes.py F                                 [100%]

=================================== FAILURES ===================================
_____________ TestSeriesAlterAxes.test_rename_with_custom_indexer ______________

self = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes object at 0x7ff0b92cccd0>

    def test_rename_with_custom_indexer(self):
        # GH 27814
        class MyIndexer:
            pass
    
        ix = MyIndexer()
>       s = Series([1, 2, 3]).rename(ix)

pandas/tests/series/test_alter_axes.py:276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4173: in rename
    return super().rename(index=index, **kwargs)
pandas/core/generic.py:1136: in rename
    indexer = self.axes[axis].get_indexer_for(v)
pandas/core/indexes/base.py:4771: in get_indexer_for
    return self.get_indexer(target, **kwargs)
pandas/core/indexes/range.py:384: in get_indexer
    return super().get_indexer(target, method=method, tolerance=tolerance)
pandas/core/indexes/base.py:2912: in get_indexer
    target = ensure_index(target)
pandas/core/indexes/base.py:5629: in ensure_index
    return Index(index_like)
pandas/core/indexes/base.py:499: in __new__
    subarr = com.asarray_tuplesafe(data, dtype=object)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer.<locals>.MyIndexer object at 0x7ff0b92ccf70>
dtype = <class 'object'>

    def asarray_tuplesafe(values, dtype=None):
    
        if not (isinstance(values, (list, tuple)) or hasattr(values, "__array__")):
>           values = list(values)
E           TypeError: 'MyIndexer' object is not iterable

pandas/core/common.py:231: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/series/test_alter_axes.py::TestSeriesAlterAxes::test_rename_with_custom_indexer
============================== 1 failed in 0.78s ===============================

coverage run -m pytest pandas/tests/series/test_alter_axes.py::TestSeriesAlterAxes::test_rename_with_custom_indexer_inplace
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/series/test_alter_axes.py F                                 [100%]

=================================== FAILURES ===================================
_________ TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace __________

self = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes object at 0x7f5fefc4fd00>

    def test_rename_with_custom_indexer_inplace(self):
        # GH 27814
        class MyIndexer:
            pass
    
        ix = MyIndexer()
        s = Series([1, 2, 3])
>       s.rename(ix, inplace=True)

pandas/tests/series/test_alter_axes.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4173: in rename
    return super().rename(index=index, **kwargs)
pandas/core/generic.py:1136: in rename
    indexer = self.axes[axis].get_indexer_for(v)
pandas/core/indexes/base.py:4771: in get_indexer_for
    return self.get_indexer(target, **kwargs)
pandas/core/indexes/range.py:384: in get_indexer
    return super().get_indexer(target, method=method, tolerance=tolerance)
pandas/core/indexes/base.py:2912: in get_indexer
    target = ensure_index(target)
pandas/core/indexes/base.py:5629: in ensure_index
    return Index(index_like)
pandas/core/indexes/base.py:499: in __new__
    subarr = com.asarray_tuplesafe(data, dtype=object)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace.<locals>.MyIndexer object at 0x7f5fefc4ffa0>
dtype = <class 'object'>

    def asarray_tuplesafe(values, dtype=None):
    
        if not (isinstance(values, (list, tuple)) or hasattr(values, "__array__")):
>           values = list(values)
E           TypeError: 'MyIndexer' object is not iterable

pandas/core/common.py:231: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/series/test_alter_axes.py::TestSeriesAlterAxes::test_rename_with_custom_indexer_inplace
============================== 1 failed in 0.98s ===============================
