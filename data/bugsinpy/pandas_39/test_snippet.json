[
    {
        "name": "pandas.tests.frame.conftest.close_open_fixture#11",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.close_open_fixture(request)",
        "snippet": "def close_open_fixture(request):\n    return request.param",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#16",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.iloc[5:10] = np.nan\n    df.iloc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 16,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#49",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.iloc[5:10] = np.nan\n    df.iloc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 49,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.int_frame#83",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.int_frame()",
        "snippet": "def int_frame():\n    \"\"\"\n    Fixture for DataFrame of ints with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                A  B  C  D\n    vpBeWjM651  1  0  1  0\n    5JyxmrP1En -1  0  0  0\n    qEDaoD49U2 -1  1  0  0\n    m66TkTfsFe  0  0  0  0\n    EHPaNzEUFm -1  0 -1  0\n    fpRJCevQhi  2  0  0  0\n    OlQvnmfi3Q  0  0 -2  0\n    ...        .. .. .. ..\n    uB1FPlz4uP  0  0  0  1\n    EcSe6yNzCU  0  0 -1  0\n    L50VudaiI8 -1  1 -2  0\n    y3bpw4nwIp  0 -1  0  0\n    H0RdLLwrCT  1  1  0  0\n    rY82K0vMwm  0  0  0  0\n    1OPIUjnkjk  2  0  0  0\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    # force these all to int64 to avoid platform testing issues\n    return DataFrame({c: s for c, s in df.items()}, dtype=np.int64)",
        "begin_line": 83,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.datetime_frame#114",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.datetime_frame()",
        "snippet": "def datetime_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                       A         B         C         D\n    2000-01-03 -1.122153  0.468535  0.122226  1.693711\n    2000-01-04  0.189378  0.486100  0.007864 -1.216052\n    2000-01-05  0.041401 -0.835752 -0.035279 -0.414357\n    2000-01-06  0.430050  0.894352  0.090719  0.036939\n    2000-01-07 -0.620982 -0.668211 -0.706153  1.466335\n    2000-01-10 -0.752633  0.328434 -0.815325  0.699674\n    2000-01-11 -2.236969  0.615737 -0.829076 -1.196106\n    ...              ...       ...       ...       ...\n    2000-02-03  1.642618 -0.579288  0.046005  1.385249\n    2000-02-04 -0.544873 -1.160962 -0.284071 -1.418351\n    2000-02-07 -2.656149 -0.601387  1.410148  0.444150\n    2000-02-08 -1.201881 -1.289040  0.772992 -1.445300\n    2000-02-09  1.377373  0.398619  1.008453 -0.928207\n    2000-02-10  0.473194 -0.636677  0.984058  0.511519\n    2000-02-11 -0.965556  0.408313 -1.312844 -0.381948\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getTimeSeriesData())",
        "begin_line": 114,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#143",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 143,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#174",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 174,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#208",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 208,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#242",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 242,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#260",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 260,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#284",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 284,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#296",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 296,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#313",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 313,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#1",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 1,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#18",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 18,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_delitem_col_still_multiindex#15",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_delitem_col_still_multiindex(self)",
        "snippet": "    def test_delitem_col_still_multiindex(self):\n        arrays = [[\"a\", \"b\", \"c\", \"top\"], [\"\", \"\", \"\", \"OD\"], [\"\", \"\", \"\", \"wx\"]]\n\n        tuples = sorted(zip(*arrays))\n        index = MultiIndex.from_tuples(tuples)\n\n        df = DataFrame(np.random.randn(3, 4), columns=index)\n        del df[(\"a\", \"\", \"\")]\n        assert isinstance(df.columns, MultiIndex)",
        "begin_line": 15,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_merge_join_different_levels#25",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_merge_join_different_levels(self)",
        "snippet": "    def test_merge_join_different_levels(self):\n        # GH 9455\n\n        # first dataframe\n        df1 = DataFrame(columns=[\"a\", \"b\"], data=[[1, 11], [0, 22]])\n\n        # second dataframe\n        columns = MultiIndex.from_tuples([(\"a\", \"\"), (\"c\", \"c1\")])\n        df2 = DataFrame(columns=columns, data=[[1, 33], [0, 44]])\n\n        # merge\n        columns = [\"a\", \"b\", (\"c\", \"c1\")]\n        expected = DataFrame(columns=columns, data=[[1, 11, 33], [0, 22, 44]])\n        with tm.assert_produces_warning(UserWarning):\n            result = pd.merge(df1, df2, on=\"a\")\n        tm.assert_frame_equal(result, expected)\n\n        # join, see discussion in GH 12219\n        columns = [\"a\", \"b\", (\"a\", \"\"), (\"c\", \"c1\")]\n        expected = DataFrame(columns=columns, data=[[1, 11, 0, 44], [0, 22, 1, 33]])\n        with tm.assert_produces_warning(UserWarning):\n            result = df1.join(df2, on=\"a\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 25,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex#49",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex(self, float_frame)",
        "snippet": "    def test_reindex(self, float_frame):\n        datetime_series = tm.makeTimeSeries(nper=30)\n\n        newFrame = float_frame.reindex(datetime_series.index)\n\n        for col in newFrame.columns:\n            for idx, val in newFrame[col].items():\n                if idx in float_frame.index:\n                    if np.isnan(val):\n                        assert np.isnan(float_frame[col][idx])\n                    else:\n                        assert val == float_frame[col][idx]\n                else:\n                    assert np.isnan(val)\n\n        for col, series in newFrame.items():\n            assert tm.equalContents(series.index, newFrame.index)\n        emptyFrame = float_frame.reindex(Index([]))\n        assert len(emptyFrame.index) == 0\n\n        # Cython code should be unit-tested directly\n        nonContigFrame = float_frame.reindex(datetime_series.index[::2])\n\n        for col in nonContigFrame.columns:\n            for idx, val in nonContigFrame[col].items():\n                if idx in float_frame.index:\n                    if np.isnan(val):\n                        assert np.isnan(float_frame[col][idx])\n                    else:\n                        assert val == float_frame[col][idx]\n                else:\n                    assert np.isnan(val)\n\n        for col, series in nonContigFrame.items():\n            assert tm.equalContents(series.index, nonContigFrame.index)\n\n        # corner cases\n\n        # Same index, copies values but not index if copy=False\n        newFrame = float_frame.reindex(float_frame.index, copy=False)\n        assert newFrame.index is float_frame.index\n\n        # length zero\n        newFrame = float_frame.reindex([])\n        assert newFrame.empty\n        assert len(newFrame.columns) == len(float_frame.columns)\n\n        # length zero with columns reindexed with non-empty index\n        newFrame = float_frame.reindex([])\n        newFrame = newFrame.reindex(float_frame.index)\n        assert len(newFrame.index) == len(float_frame.index)\n        assert len(newFrame.columns) == len(float_frame.columns)\n\n        # pass non-Index\n        newFrame = float_frame.reindex(list(datetime_series.index))\n        tm.assert_index_equal(newFrame.index, datetime_series.index)\n\n        # copy with no axes\n        result = float_frame.reindex()\n        tm.assert_frame_equal(result, float_frame)\n        assert result is not float_frame",
        "begin_line": 49,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_nan#111",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_nan(self)",
        "snippet": "    def test_reindex_nan(self):\n        df = pd.DataFrame(\n            [[1, 2], [3, 5], [7, 11], [9, 23]],\n            index=[2, np.nan, 1, 5],\n            columns=[\"joe\", \"jim\"],\n        )\n\n        i, j = [np.nan, 5, 5, np.nan, 1, 2, np.nan], [1, 3, 3, 1, 2, 0, 1]\n        tm.assert_frame_equal(df.reindex(i), df.iloc[j])\n\n        df.index = df.index.astype(\"object\")\n        tm.assert_frame_equal(df.reindex(i), df.iloc[j], check_index_type=False)\n\n        # GH10388\n        df = pd.DataFrame(\n            {\n                \"other\": [\"a\", \"b\", np.nan, \"c\"],\n                \"date\": [\"2015-03-22\", np.nan, \"2012-01-08\", np.nan],\n                \"amount\": [2, 3, 4, 5],\n            }\n        )\n\n        df[\"date\"] = pd.to_datetime(df.date)\n        df[\"delta\"] = (pd.to_datetime(\"2015-06-18\") - df[\"date\"]).shift(1)\n\n        left = df.set_index([\"delta\", \"other\", \"date\"]).reset_index()\n        right = df.reindex(columns=[\"delta\", \"other\", \"date\", \"amount\"])\n        tm.assert_frame_equal(left, right)",
        "begin_line": 111,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_name_remains#140",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_name_remains(self)",
        "snippet": "    def test_reindex_name_remains(self):\n        s = Series(np.random.rand(10))\n        df = DataFrame(s, index=np.arange(len(s)))\n        i = Series(np.arange(10), name=\"iname\")\n\n        df = df.reindex(i)\n        assert df.index.name == \"iname\"\n\n        df = df.reindex(Index(np.arange(10), name=\"tmpname\"))\n        assert df.index.name == \"tmpname\"\n\n        s = Series(np.random.rand(10))\n        df = DataFrame(s.T, index=np.arange(len(s)))\n        i = Series(np.arange(10), name=\"iname\")\n        df = df.reindex(columns=i)\n        assert df.columns.name == \"iname\"",
        "begin_line": 140,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_int#157",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_int(self, int_frame)",
        "snippet": "    def test_reindex_int(self, int_frame):\n        smaller = int_frame.reindex(int_frame.index[::2])\n\n        assert smaller[\"A\"].dtype == np.int64\n\n        bigger = smaller.reindex(int_frame.index)\n        assert bigger[\"A\"].dtype == np.float64\n\n        smaller = int_frame.reindex(columns=[\"A\", \"B\"])\n        assert smaller[\"A\"].dtype == np.int64",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_like#168",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_like(self, float_frame)",
        "snippet": "    def test_reindex_like(self, float_frame):\n        other = float_frame.reindex(index=float_frame.index[:10], columns=[\"C\", \"B\"])\n\n        tm.assert_frame_equal(other, float_frame.reindex_like(other))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns#173",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns(self, float_frame)",
        "snippet": "    def test_reindex_columns(self, float_frame):\n        new_frame = float_frame.reindex(columns=[\"A\", \"B\", \"E\"])\n\n        tm.assert_series_equal(new_frame[\"B\"], float_frame[\"B\"])\n        assert np.isnan(new_frame[\"E\"]).all()\n        assert \"C\" not in new_frame\n\n        # Length zero\n        new_frame = float_frame.reindex(columns=[])\n        assert new_frame.empty",
        "begin_line": 173,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns_method#184",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns_method(self)",
        "snippet": "    def test_reindex_columns_method(self):\n\n        # GH 14992, reindexing over columns ignored method\n        df = DataFrame(\n            data=[[11, 12, 13], [21, 22, 23], [31, 32, 33]],\n            index=[1, 2, 4],\n            columns=[1, 2, 4],\n            dtype=float,\n        )\n\n        # default method\n        result = df.reindex(columns=range(6))\n        expected = DataFrame(\n            data=[\n                [np.nan, 11, 12, np.nan, 13, np.nan],\n                [np.nan, 21, 22, np.nan, 23, np.nan],\n                [np.nan, 31, 32, np.nan, 33, np.nan],\n            ],\n            index=[1, 2, 4],\n            columns=range(6),\n            dtype=float,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # method='ffill'\n        result = df.reindex(columns=range(6), method=\"ffill\")\n        expected = DataFrame(\n            data=[\n                [np.nan, 11, 12, 12, 13, 13],\n                [np.nan, 21, 22, 22, 23, 23],\n                [np.nan, 31, 32, 32, 33, 33],\n            ],\n            index=[1, 2, 4],\n            columns=range(6),\n            dtype=float,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # method='bfill'\n        result = df.reindex(columns=range(6), method=\"bfill\")\n        expected = DataFrame(\n            data=[\n                [11, 11, 12, 13, 13, np.nan],\n                [21, 21, 22, 23, 23, np.nan],\n                [31, 31, 32, 33, 33, np.nan],\n            ],\n            index=[1, 2, 4],\n            columns=range(6),\n            dtype=float,\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 184,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axes#236",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axes(self)",
        "snippet": "    def test_reindex_axes(self):\n        # GH 3317, reindexing by both axes loses freq of the index\n        df = DataFrame(\n            np.ones((3, 3)),\n            index=[datetime(2012, 1, 1), datetime(2012, 1, 2), datetime(2012, 1, 3)],\n            columns=[\"a\", \"b\", \"c\"],\n        )\n        time_freq = date_range(\"2012-01-01\", \"2012-01-03\", freq=\"d\")\n        some_cols = [\"a\", \"b\"]\n\n        index_freq = df.reindex(index=time_freq).index.freq\n        both_freq = df.reindex(index=time_freq, columns=some_cols).index.freq\n        seq_freq = df.reindex(index=time_freq).reindex(columns=some_cols).index.freq\n        assert index_freq == both_freq\n        assert index_freq == seq_freq",
        "begin_line": 236,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_fill_value#252",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_fill_value(self)",
        "snippet": "    def test_reindex_fill_value(self):\n        df = DataFrame(np.random.randn(10, 4))\n\n        # axis=0\n        result = df.reindex(list(range(15)))\n        assert np.isnan(result.values[-5:]).all()\n\n        result = df.reindex(range(15), fill_value=0)\n        expected = df.reindex(range(15)).fillna(0)\n        tm.assert_frame_equal(result, expected)\n\n        # axis=1\n        result = df.reindex(columns=range(5), fill_value=0.0)\n        expected = df.copy()\n        expected[4] = 0.0\n        tm.assert_frame_equal(result, expected)\n\n        result = df.reindex(columns=range(5), fill_value=0)\n        expected = df.copy()\n        expected[4] = 0\n        tm.assert_frame_equal(result, expected)\n\n        result = df.reindex(columns=range(5), fill_value=\"foo\")\n        expected = df.copy()\n        expected[4] = \"foo\"\n        tm.assert_frame_equal(result, expected)\n\n        # other dtypes\n        df[\"foo\"] = \"foo\"\n        result = df.reindex(range(15), fill_value=0)\n        expected = df.reindex(range(15)).fillna(0)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 252,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_dups#285",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_dups(self)",
        "snippet": "    def test_reindex_dups(self):\n\n        # GH4746, reindex on duplicate index error messages\n        arr = np.random.randn(10)\n        df = DataFrame(arr, index=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n\n        # set index is ok\n        result = df.copy()\n        result.index = list(range(len(df)))\n        expected = DataFrame(arr, index=list(range(len(df))))\n        tm.assert_frame_equal(result, expected)\n\n        # reindex fails\n        msg = \"cannot reindex from a duplicate axis\"\n        with pytest.raises(ValueError, match=msg):\n            df.reindex(index=list(range(len(df))))",
        "begin_line": 285,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis_style#302",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis_style(self)",
        "snippet": "    def test_reindex_axis_style(self):\n        # https://github.com/pandas-dev/pandas/issues/12392\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        expected = pd.DataFrame(\n            {\"A\": [1, 2, np.nan], \"B\": [4, 5, np.nan]}, index=[0, 1, 3]\n        )\n        result = df.reindex([0, 1, 3])\n        tm.assert_frame_equal(result, expected)\n\n        result = df.reindex([0, 1, 3], axis=0)\n        tm.assert_frame_equal(result, expected)\n\n        result = df.reindex([0, 1, 3], axis=\"index\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 302,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_positional_warns#317",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_positional_warns(self)",
        "snippet": "    def test_reindex_positional_warns(self):\n        # https://github.com/pandas-dev/pandas/issues/12392\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        expected = pd.DataFrame({\"A\": [1.0, 2], \"B\": [4.0, 5], \"C\": [np.nan, np.nan]})\n        with tm.assert_produces_warning(FutureWarning):\n            result = df.reindex([0, 1], [\"A\", \"B\", \"C\"])\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 317,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis_style_raises#326",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis_style_raises(self)",
        "snippet": "    def test_reindex_axis_style_raises(self):\n        # https://github.com/pandas-dev/pandas/issues/12392\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex([0, 1], [\"A\"], axis=1)\n\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex([0, 1], [\"A\"], axis=\"index\")\n\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex(index=[0, 1], axis=\"index\")\n\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex(index=[0, 1], axis=\"columns\")\n\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex(columns=[0, 1], axis=\"columns\")\n\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex(index=[0, 1], columns=[0, 1], axis=\"columns\")\n\n        with pytest.raises(TypeError, match=\"Cannot specify all\"):\n            df.reindex([0, 1], [0], [\"A\"])\n\n        # Mixing styles\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex(index=[0, 1], axis=\"index\")\n\n        with pytest.raises(TypeError, match=\"Cannot specify both 'axis'\"):\n            df.reindex(index=[0, 1], axis=\"columns\")\n\n        # Duplicates\n        with pytest.raises(TypeError, match=\"multiple values\"):\n            df.reindex([0, 1], labels=[0, 1])",
        "begin_line": 326,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_single_named_indexer#361",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_single_named_indexer(self)",
        "snippet": "    def test_reindex_single_named_indexer(self):\n        # https://github.com/pandas-dev/pandas/issues/12392\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [1, 2, 3]})\n        result = df.reindex([0, 1], columns=[\"A\"])\n        expected = pd.DataFrame({\"A\": [1, 2]})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 361,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_api_equivalence#368",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_api_equivalence(self)",
        "snippet": "    def test_reindex_api_equivalence(self):\n        # https://github.com/pandas-dev/pandas/issues/12392\n        # equivalence of the labels/axis and index/columns API's\n        df = DataFrame(\n            [[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n            index=[\"a\", \"b\", \"c\"],\n            columns=[\"d\", \"e\", \"f\"],\n        )\n\n        res1 = df.reindex([\"b\", \"a\"])\n        res2 = df.reindex(index=[\"b\", \"a\"])\n        res3 = df.reindex(labels=[\"b\", \"a\"])\n        res4 = df.reindex(labels=[\"b\", \"a\"], axis=0)\n        res5 = df.reindex([\"b\", \"a\"], axis=0)\n        for res in [res2, res3, res4, res5]:\n            tm.assert_frame_equal(res1, res)\n\n        res1 = df.reindex(columns=[\"e\", \"d\"])\n        res2 = df.reindex([\"e\", \"d\"], axis=1)\n        res3 = df.reindex(labels=[\"e\", \"d\"], axis=1)\n        for res in [res2, res3]:\n            tm.assert_frame_equal(res1, res)\n\n        with tm.assert_produces_warning(FutureWarning) as m:\n            res1 = df.reindex([\"b\", \"a\"], [\"e\", \"d\"])\n        assert \"reindex\" in str(m[0].message)\n        res2 = df.reindex(columns=[\"e\", \"d\"], index=[\"b\", \"a\"])\n        res3 = df.reindex(labels=[\"b\", \"a\"], axis=0).reindex(labels=[\"e\", \"d\"], axis=1)\n        for res in [res2, res3]:\n            tm.assert_frame_equal(res1, res)",
        "begin_line": 368,
        "end_line": 397,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_align_int_fill_bug#399",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_align_int_fill_bug(self)",
        "snippet": "    def test_align_int_fill_bug(self):\n        # GH #910\n        X = np.arange(10 * 10, dtype=\"float64\").reshape(10, 10)\n        Y = np.ones((10, 1), dtype=int)\n\n        df1 = DataFrame(X)\n        df1[\"0.X\"] = Y.squeeze()\n\n        df2 = df1.astype(float)\n\n        result = df1 - df1.mean()\n        expected = df2 - df2.mean()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 399,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter#413",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter(self, float_frame, float_string_frame)",
        "snippet": "    def test_filter(self, float_frame, float_string_frame):\n        # Items\n        filtered = float_frame.filter([\"A\", \"B\", \"E\"])\n        assert len(filtered.columns) == 2\n        assert \"E\" not in filtered\n\n        filtered = float_frame.filter([\"A\", \"B\", \"E\"], axis=\"columns\")\n        assert len(filtered.columns) == 2\n        assert \"E\" not in filtered\n\n        # Other axis\n        idx = float_frame.index[0:4]\n        filtered = float_frame.filter(idx, axis=\"index\")\n        expected = float_frame.reindex(index=idx)\n        tm.assert_frame_equal(filtered, expected)\n\n        # like\n        fcopy = float_frame.copy()\n        fcopy[\"AA\"] = 1\n\n        filtered = fcopy.filter(like=\"A\")\n        assert len(filtered.columns) == 2\n        assert \"AA\" in filtered\n\n        # like with ints in column names\n        df = DataFrame(0.0, index=[0, 1, 2], columns=[0, 1, \"_A\", \"_B\"])\n        filtered = df.filter(like=\"_\")\n        assert len(filtered.columns) == 2\n\n        # regex with ints in column names\n        # from PR #10384\n        df = DataFrame(0.0, index=[0, 1, 2], columns=[\"A1\", 1, \"B\", 2, \"C\"])\n        expected = DataFrame(\n            0.0, index=[0, 1, 2], columns=pd.Index([1, 2], dtype=object)\n        )\n        filtered = df.filter(regex=\"^[0-9]+$\")\n        tm.assert_frame_equal(filtered, expected)\n\n        expected = DataFrame(0.0, index=[0, 1, 2], columns=[0, \"0\", 1, \"1\"])\n        # shouldn't remove anything\n        filtered = expected.filter(regex=\"^[0-9]+$\")\n        tm.assert_frame_equal(filtered, expected)\n\n        # pass in None\n        with pytest.raises(TypeError, match=\"Must pass\"):\n            float_frame.filter()\n        with pytest.raises(TypeError, match=\"Must pass\"):\n            float_frame.filter(items=None)\n        with pytest.raises(TypeError, match=\"Must pass\"):\n            float_frame.filter(axis=1)\n\n        # test mutually exclusive arguments\n        with pytest.raises(TypeError, match=\"mutually exclusive\"):\n            float_frame.filter(items=[\"one\", \"three\"], regex=\"e$\", like=\"bbi\")\n        with pytest.raises(TypeError, match=\"mutually exclusive\"):\n            float_frame.filter(items=[\"one\", \"three\"], regex=\"e$\", axis=1)\n        with pytest.raises(TypeError, match=\"mutually exclusive\"):\n            float_frame.filter(items=[\"one\", \"three\"], regex=\"e$\")\n        with pytest.raises(TypeError, match=\"mutually exclusive\"):\n            float_frame.filter(items=[\"one\", \"three\"], like=\"bbi\", axis=0)\n        with pytest.raises(TypeError, match=\"mutually exclusive\"):\n            float_frame.filter(items=[\"one\", \"three\"], like=\"bbi\")\n\n        # objects\n        filtered = float_string_frame.filter(like=\"foo\")\n        assert \"foo\" in filtered\n\n        # unicode columns, won't ascii-encode\n        df = float_frame.rename(columns={\"B\": \"\\u2202\"})\n        filtered = df.filter(like=\"C\")\n        assert \"C\" in filtered",
        "begin_line": 413,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_search#485",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_search(self, float_frame)",
        "snippet": "    def test_filter_regex_search(self, float_frame):\n        fcopy = float_frame.copy()\n        fcopy[\"AA\"] = 1\n\n        # regex\n        filtered = fcopy.filter(regex=\"[A]+\")\n        assert len(filtered.columns) == 2\n        assert \"AA\" in filtered\n\n        # doesn't have to be at beginning\n        df = DataFrame(\n            {\"aBBa\": [1, 2], \"BBaBB\": [1, 2], \"aCCa\": [1, 2], \"aCCaBB\": [1, 2]}\n        )\n\n        result = df.filter(regex=\"BB\")\n        exp = df[[x for x in df.columns if \"BB\" in x]]\n        tm.assert_frame_equal(result, exp)",
        "begin_line": 485,
        "end_line": 501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_unicode#511",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_unicode(self, name, expected)",
        "snippet": "    def test_filter_unicode(self, name, expected):\n        # GH13101\n        df = DataFrame({\"a\": [1, 2], \"\u3042\": [3, 4]})\n\n        tm.assert_frame_equal(df.filter(like=name), expected)\n        tm.assert_frame_equal(df.filter(regex=name), expected)",
        "begin_line": 511,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_bytestring#519",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_bytestring(self, name)",
        "snippet": "    def test_filter_bytestring(self, name):\n        # GH13101\n        df = DataFrame({b\"a\": [1, 2], b\"b\": [3, 4]})\n        expected = DataFrame({b\"a\": [1, 2]})\n\n        tm.assert_frame_equal(df.filter(like=name), expected)\n        tm.assert_frame_equal(df.filter(regex=name), expected)",
        "begin_line": 519,
        "end_line": 525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_corner#527",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_corner(self)",
        "snippet": "    def test_filter_corner(self):\n        empty = DataFrame()\n\n        result = empty.filter([])\n        tm.assert_frame_equal(result, empty)\n\n        result = empty.filter(like=\"foo\")\n        tm.assert_frame_equal(result, empty)",
        "begin_line": 527,
        "end_line": 534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_non_string#536",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_non_string(self)",
        "snippet": "    def test_filter_regex_non_string(self):\n        # GH#5798 trying to filter on non-string columns should drop,\n        #  not raise\n        df = pd.DataFrame(np.random.random((3, 2)), columns=[\"STRING\", 123])\n        result = df.filter(regex=\"STRING\")\n        expected = df[[\"STRING\"]]\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 536,
        "end_line": 542,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_take#544",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_take(self, float_frame)",
        "snippet": "    def test_take(self, float_frame):\n        # homogeneous\n        order = [3, 1, 2, 0]\n        for df in [float_frame]:\n\n            result = df.take(order, axis=0)\n            expected = df.reindex(df.index.take(order))\n            tm.assert_frame_equal(result, expected)\n\n            # axis = 1\n            result = df.take(order, axis=1)\n            expected = df.loc[:, [\"D\", \"B\", \"C\", \"A\"]]\n            tm.assert_frame_equal(result, expected, check_names=False)\n\n        # negative indices\n        order = [2, 1, -1]\n        for df in [float_frame]:\n\n            result = df.take(order, axis=0)\n            expected = df.reindex(df.index.take(order))\n            tm.assert_frame_equal(result, expected)\n\n            result = df.take(order, axis=0)\n            tm.assert_frame_equal(result, expected)\n\n            # axis = 1\n            result = df.take(order, axis=1)\n            expected = df.loc[:, [\"C\", \"B\", \"D\"]]\n            tm.assert_frame_equal(result, expected, check_names=False)\n\n        # illegal indices\n        msg = \"indices are out-of-bounds\"\n        with pytest.raises(IndexError, match=msg):\n            df.take([3, 1, 2, 30], axis=0)\n        with pytest.raises(IndexError, match=msg):\n            df.take([3, 1, 2, -31], axis=0)\n        with pytest.raises(IndexError, match=msg):\n            df.take([3, 1, 2, 5], axis=1)\n        with pytest.raises(IndexError, match=msg):\n            df.take([3, 1, 2, -5], axis=1)",
        "begin_line": 544,
        "end_line": 583,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_take_mixed_type#585",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_take_mixed_type(self, float_string_frame)",
        "snippet": "    def test_take_mixed_type(self, float_string_frame):\n\n        # mixed-dtype\n        order = [4, 1, 2, 0, 3]\n        for df in [float_string_frame]:\n\n            result = df.take(order, axis=0)\n            expected = df.reindex(df.index.take(order))\n            tm.assert_frame_equal(result, expected)\n\n            # axis = 1\n            result = df.take(order, axis=1)\n            expected = df.loc[:, [\"foo\", \"B\", \"C\", \"A\", \"D\"]]\n            tm.assert_frame_equal(result, expected)\n\n        # negative indices\n        order = [4, 1, -2]\n        for df in [float_string_frame]:\n\n            result = df.take(order, axis=0)\n            expected = df.reindex(df.index.take(order))\n            tm.assert_frame_equal(result, expected)\n\n            # axis = 1\n            result = df.take(order, axis=1)\n            expected = df.loc[:, [\"foo\", \"B\", \"D\"]]\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 585,
        "end_line": 611,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_take_mixed_numeric#613",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_take_mixed_numeric(self, mixed_float_frame, mixed_int_frame)",
        "snippet": "    def test_take_mixed_numeric(self, mixed_float_frame, mixed_int_frame):\n        # by dtype\n        order = [1, 2, 0, 3]\n        for df in [mixed_float_frame, mixed_int_frame]:\n\n            result = df.take(order, axis=0)\n            expected = df.reindex(df.index.take(order))\n            tm.assert_frame_equal(result, expected)\n\n            # axis = 1\n            result = df.take(order, axis=1)\n            expected = df.loc[:, [\"B\", \"C\", \"A\", \"D\"]]\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 613,
        "end_line": 625,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_boolean#627",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_boolean(self)",
        "snippet": "    def test_reindex_boolean(self):\n        frame = DataFrame(\n            np.ones((10, 2), dtype=bool), index=np.arange(0, 20, 2), columns=[0, 2]\n        )\n\n        reindexed = frame.reindex(np.arange(10))\n        assert reindexed.values.dtype == np.object_\n        assert isna(reindexed[0][1])\n\n        reindexed = frame.reindex(columns=range(3))\n        assert reindexed.values.dtype == np.object_\n        assert isna(reindexed[1]).all()",
        "begin_line": 627,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_objects#640",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_objects(self, float_string_frame)",
        "snippet": "    def test_reindex_objects(self, float_string_frame):\n        reindexed = float_string_frame.reindex(columns=[\"foo\", \"A\", \"B\"])\n        assert \"foo\" in reindexed\n\n        reindexed = float_string_frame.reindex(columns=[\"A\", \"B\"])\n        assert \"foo\" not in reindexed",
        "begin_line": 640,
        "end_line": 645,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_corner#647",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_corner(self, int_frame)",
        "snippet": "    def test_reindex_corner(self, int_frame):\n        index = Index([\"a\", \"b\", \"c\"])\n        dm = DataFrame({}).reindex(index=[1, 2, 3])\n        reindexed = dm.reindex(columns=index)\n        tm.assert_index_equal(reindexed.columns, index)\n\n        # ints are weird\n        smaller = int_frame.reindex(columns=[\"A\", \"B\", \"E\"])\n        assert smaller[\"E\"].dtype == np.float64",
        "begin_line": 647,
        "end_line": 655,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_with_nans#657",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_with_nans(self)",
        "snippet": "    def test_reindex_with_nans(self):\n        df = DataFrame(\n            [[1, 2], [3, 4], [np.nan, np.nan], [7, 8], [9, 10]],\n            columns=[\"a\", \"b\"],\n            index=[100.0, 101.0, np.nan, 102.0, 103.0],\n        )\n\n        result = df.reindex(index=[101.0, 102.0, 103.0])\n        expected = df.iloc[[1, 3, 4]]\n        tm.assert_frame_equal(result, expected)\n\n        result = df.reindex(index=[103.0])\n        expected = df.iloc[[4]]\n        tm.assert_frame_equal(result, expected)\n\n        result = df.reindex(index=[101.0])\n        expected = df.iloc[[1]]\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 657,
        "end_line": 674,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi#676",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi(self)",
        "snippet": "    def test_reindex_multi(self):\n        df = DataFrame(np.random.randn(3, 3))\n\n        result = df.reindex(index=range(4), columns=range(4))\n        expected = df.reindex(list(range(4))).reindex(columns=range(4))\n\n        tm.assert_frame_equal(result, expected)\n\n        df = DataFrame(np.random.randint(0, 10, (3, 3)))\n\n        result = df.reindex(index=range(4), columns=range(4))\n        expected = df.reindex(list(range(4))).reindex(columns=range(4))\n\n        tm.assert_frame_equal(result, expected)\n\n        df = DataFrame(np.random.randint(0, 10, (3, 3)))\n\n        result = df.reindex(index=range(2), columns=range(2))\n        expected = df.reindex(range(2)).reindex(columns=range(2))\n\n        tm.assert_frame_equal(result, expected)\n\n        df = DataFrame(np.random.randn(5, 3) + 1j, columns=[\"a\", \"b\", \"c\"])\n\n        result = df.reindex(index=[0, 1], columns=[\"a\", \"b\"])\n        expected = df.reindex([0, 1]).reindex(columns=[\"a\", \"b\"])\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 676,
        "end_line": 703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi_categorical_time#705",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi_categorical_time(self)",
        "snippet": "    def test_reindex_multi_categorical_time(self):\n        # https://github.com/pandas-dev/pandas/issues/21390\n        midx = pd.MultiIndex.from_product(\n            [\n                Categorical([\"a\", \"b\", \"c\"]),\n                Categorical(date_range(\"2012-01-01\", periods=3, freq=\"H\")),\n            ]\n        )\n        df = pd.DataFrame({\"a\": range(len(midx))}, index=midx)\n        df2 = df.iloc[[0, 1, 2, 3, 4, 5, 6, 8]]\n\n        result = df2.reindex(midx)\n        expected = pd.DataFrame({\"a\": [0, 1, 2, 3, 4, 5, 6, np.nan, 8]}, index=midx)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 705,
        "end_line": 718,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_inplace_drop_and_operation#724",
        "src_path": "pandas/tests/frame//test_axis_select_reindex.py",
        "class_name": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex",
        "signature": "pandas.tests.frame..test_axis_select_reindex.TestDataFrameSelectReindex.test_inplace_drop_and_operation(self, operation, inplace)",
        "snippet": "    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n\n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n\n            # Perform operation and check result\n            getattr(y, operation)(1)\n            tm.assert_frame_equal(df, expected)",
        "begin_line": 724,
        "end_line": 739,
        "comment": "",
        "is_bug": false
    }
]