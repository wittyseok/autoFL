[
    {
        "name": "tests.conftest.backup_dir#17",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.backup_dir(original_dir, backup_dir)",
        "snippet": "def backup_dir(original_dir, backup_dir):\n    \"\"\"Generate backup directory based on original directory.\"\"\"\n    # If the default original_dir is pre-existing, move it to a temp location\n    if not os.path.isdir(original_dir):\n        return False\n\n    # Remove existing backups before backing up. If they exist, they're stale.\n    if os.path.isdir(backup_dir):\n        utils.rmtree(backup_dir)\n\n    shutil.copytree(original_dir, backup_dir)\n    return True",
        "begin_line": 17,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.restore_backup_dir#31",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.restore_backup_dir(original_dir, backup_dir, original_dir_found)",
        "snippet": "def restore_backup_dir(original_dir, backup_dir, original_dir_found):\n    \"\"\"Restore default contents.\"\"\"\n    # Carefully delete the created original_dir only in certain\n    # conditions.\n    original_dir_is_dir = os.path.isdir(original_dir)\n    if original_dir_found:\n        # Delete the created original_dir as long as a backup\n        # exists\n        if original_dir_is_dir and os.path.isdir(backup_dir):\n            utils.rmtree(original_dir)\n    else:\n        # Delete the created original_dir.\n        # There's no backup because it never existed\n        if original_dir_is_dir:\n            utils.rmtree(original_dir)\n\n    # Restore the user's default original_dir contents\n    if os.path.isdir(backup_dir):\n        shutil.copytree(backup_dir, original_dir)\n    if os.path.isdir(original_dir):\n        utils.rmtree(backup_dir)",
        "begin_line": 31,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.clean_system#55",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.clean_system(request)",
        "snippet": "def clean_system(request):\n    \"\"\"Fixture. Simulates a clean system with no configured or cloned cookiecutters.\n\n    It runs code which can be regarded as setup code as known from a unittest\n    TestCase. Additionally it defines a local function referring to values\n    which have been stored to local variables in the setup such as the location\n    of the cookiecutters on disk. This function is registered as a teardown\n    hook with `request.addfinalizer` at the very end of the fixture. Pytest\n    runs the named hook as soon as the fixture is out of scope, when the test\n    finished to put it another way.\n\n    During setup:\n\n    * Back up the `~/.cookiecutterrc` config file to `~/.cookiecutterrc.backup`\n    * Back up the `~/.cookiecutters/` dir to `~/.cookiecutters.backup/`\n    * Back up the `~/.cookiecutter_replay/` dir to\n      `~/.cookiecutter_replay.backup/`\n    * Starts off a test case with no pre-existing `~/.cookiecutterrc` or\n      `~/.cookiecutters/` or `~/.cookiecutter_replay/`\n\n    During teardown:\n\n    * Delete `~/.cookiecutters/` only if a backup is present at\n      `~/.cookiecutters.backup/`\n    * Delete `~/.cookiecutter_replay/` only if a backup is present at\n      `~/.cookiecutter_replay.backup/`\n    * Restore the `~/.cookiecutterrc` config file from\n      `~/.cookiecutterrc.backup`\n    * Restore the `~/.cookiecutters/` dir from `~/.cookiecutters.backup/`\n    * Restore the `~/.cookiecutter_replay/` dir from\n      `~/.cookiecutter_replay.backup/`\n\n    \"\"\"\n    # If ~/.cookiecutterrc is pre-existing, move it to a temp location\n    user_config_path = os.path.expanduser('~/.cookiecutterrc')\n    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')\n    if os.path.exists(user_config_path):\n        user_config_found = True\n        shutil.copy(user_config_path, user_config_path_backup)\n        os.remove(user_config_path)\n    else:\n        user_config_found = False\n\n    # If the default cookiecutters_dir is pre-existing, move it to a\n    # temp location\n    cookiecutters_dir = os.path.expanduser('~/.cookiecutters')\n    cookiecutters_dir_backup = os.path.expanduser('~/.cookiecutters.backup')\n    cookiecutters_dir_found = backup_dir(cookiecutters_dir, cookiecutters_dir_backup)\n\n    # If the default cookiecutter_replay_dir is pre-existing, move it to a\n    # temp location\n    cookiecutter_replay_dir = os.path.expanduser('~/.cookiecutter_replay')\n    cookiecutter_replay_dir_backup = os.path.expanduser('~/.cookiecutter_replay.backup')\n    cookiecutter_replay_dir_found = backup_dir(\n        cookiecutter_replay_dir, cookiecutter_replay_dir_backup\n    )\n\n    def restore_backup():\n        # If it existed, restore ~/.cookiecutterrc\n        # We never write to ~/.cookiecutterrc, so this logic is simpler.\n        if user_config_found and os.path.exists(user_config_path_backup):\n            shutil.copy(user_config_path_backup, user_config_path)\n            os.remove(user_config_path_backup)\n\n        # Carefully delete the created ~/.cookiecutters dir only in certain\n        # conditions.\n        restore_backup_dir(\n            cookiecutters_dir, cookiecutters_dir_backup, cookiecutters_dir_found\n        )\n\n        # Carefully delete the created ~/.cookiecutter_replay dir only in\n        # certain conditions.\n        restore_backup_dir(\n            cookiecutter_replay_dir,\n            cookiecutter_replay_dir_backup,\n            cookiecutter_replay_dir_found,\n        )\n\n    request.addfinalizer(restore_backup)",
        "begin_line": 55,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.restore_backup#112",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.restore_backup()",
        "snippet": "    def restore_backup():\n        # If it existed, restore ~/.cookiecutterrc\n        # We never write to ~/.cookiecutterrc, so this logic is simpler.\n        if user_config_found and os.path.exists(user_config_path_backup):\n            shutil.copy(user_config_path_backup, user_config_path)\n            os.remove(user_config_path_backup)\n\n        # Carefully delete the created ~/.cookiecutters dir only in certain\n        # conditions.\n        restore_backup_dir(\n            cookiecutters_dir, cookiecutters_dir_backup, cookiecutters_dir_found\n        )\n\n        # Carefully delete the created ~/.cookiecutter_replay dir only in\n        # certain conditions.\n        restore_backup_dir(\n            cookiecutter_replay_dir,\n            cookiecutter_replay_dir_backup,\n            cookiecutter_replay_dir_found,\n        )",
        "begin_line": 112,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.disable_poyo_logging#181",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.disable_poyo_logging()",
        "snippet": "def disable_poyo_logging():\n    \"\"\"Fixture that disables poyo logging.\"\"\"\n    logging.getLogger('poyo').setLevel(logging.WARNING)",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.__init__#11",
        "src_path": "tests/test-extensions/hello_extension/hello_extension.py",
        "class_name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension",
        "signature": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.__init__(self, environment)",
        "snippet": "    def __init__(self, environment):\n        \"\"\"Hello Extension Constructor.\"\"\"\n        super(HelloExtension, self).__init__(environment)",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension._hello#15",
        "src_path": "tests/test-extensions/hello_extension/hello_extension.py",
        "class_name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension",
        "signature": "tests.test-extensions.hello_extension.hello_extension.HelloExtension._hello(self, name)",
        "snippet": "    def _hello(self, name):\n        \"\"\"Do actual tag replace when invoked by parser.\"\"\"\n        return 'Hello {name}!'.format(name=name)",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.parse#19",
        "src_path": "tests/test-extensions/hello_extension/hello_extension.py",
        "class_name": "tests.test-extensions.hello_extension.hello_extension.HelloExtension",
        "signature": "tests.test-extensions.hello_extension.hello_extension.HelloExtension.parse(self, parser)",
        "snippet": "    def parse(self, parser):\n        \"\"\"Work when something match `tags` variable.\"\"\"\n        lineno = next(parser.stream).lineno\n        node = parser.parse_expression()\n        call_method = self.call_method('_hello', [node], lineno=lineno)\n        return nodes.Output([call_method], lineno=lineno)",
        "begin_line": 19,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.context_data#12",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.context_data()",
        "snippet": "def context_data():\n    \"\"\"Generate pytest parametrization variables for test.\n\n    Return ('input_params, expected_context') tuples.\n    \"\"\"\n    context = (\n        {'context_file': 'tests/test-generate-context/test.json'},\n        {'test': {'1': 2, 'some_key': 'some_val'}},\n    )\n\n    context_with_default = (\n        {\n            'context_file': 'tests/test-generate-context/test.json',\n            'default_context': {'1': 3},\n        },\n        {'test': {'1': 3, 'some_key': 'some_val'}},\n    )\n\n    context_with_extra = (\n        {\n            'context_file': 'tests/test-generate-context/test.json',\n            'extra_context': {'1': 4},\n        },\n        {'test': {'1': 4, 'some_key': 'some_val'}},\n    )\n\n    context_with_default_and_extra = (\n        {\n            'context_file': 'tests/test-generate-context/test.json',\n            'default_context': {'1': 3},\n            'extra_context': {'1': 5},\n        },\n        {'test': {'1': 5, 'some_key': 'some_val'}},\n    )\n\n    yield context\n    yield context_with_default\n    yield context_with_extra\n    yield context_with_default_and_extra",
        "begin_line": 12,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_generate_context#55",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_generate_context(input_params, expected_context)",
        "snippet": "def test_generate_context(input_params, expected_context):\n    \"\"\"Verify input contexts combinations result in expected content on output.\"\"\"\n    assert generate.generate_context(**input_params) == expected_context",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_generate_context_with_json_decoding_error#61",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_generate_context_with_json_decoding_error()",
        "snippet": "def test_generate_context_with_json_decoding_error():\n    \"\"\"Verify malformed JSON file generates expected error output.\"\"\"\n    with pytest.raises(ContextDecodingException) as excinfo:\n        generate.generate_context('tests/test-generate-context/invalid-syntax.json')\n    # original message from json module should be included\n    pattern = 'Expecting \\'{0,1}:\\'{0,1} delimiter: line 1 column (19|20) \\\\(char 19\\\\)'\n    assert re.search(pattern, str(excinfo.value))\n    # File name should be included too...for testing purposes, just test the\n    # last part of the file. If we wanted to test the absolute path, we'd have\n    # to do some additional work in the test which doesn't seem that needed at\n    # this point.\n    path = os.path.sep.join(['tests', 'test-generate-context', 'invalid-syntax.json'])\n    assert path in str(excinfo.value)",
        "begin_line": 61,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_default_context_replacement_in_generate_context#76",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_default_context_replacement_in_generate_context()",
        "snippet": "def test_default_context_replacement_in_generate_context():\n    \"\"\"Verify default content settings are correctly replaced by template settings.\n\n    Make sure that the default for list variables of `orientation` is based on\n    the user config (`choices_template.json`) and not changed to a single value\n    from `default_context`.\n    \"\"\"\n    expected_context = {\n        'choices_template': OrderedDict(\n            [\n                ('full_name', 'Raphael Pierzina'),\n                ('github_username', 'hackebrot'),\n                ('project_name', 'Kivy Project'),\n                ('repo_name', '{{cookiecutter.project_name|lower}}'),\n                ('orientation', ['landscape', 'all', 'portrait']),\n            ]\n        )\n    }\n\n    generated_context = generate.generate_context(\n        context_file='tests/test-generate-context/choices_template.json',\n        default_context={\n            'not_in_template': 'foobar',\n            'project_name': 'Kivy Project',\n            'orientation': 'landscape',\n        },\n        extra_context={\n            'also_not_in_template': 'foobar2',\n            'github_username': 'hackebrot',\n        },\n    )\n\n    assert generated_context == expected_context",
        "begin_line": 76,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_generate_context_decodes_non_ascii_chars#111",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_generate_context_decodes_non_ascii_chars()",
        "snippet": "def test_generate_context_decodes_non_ascii_chars():\n    \"\"\"Verify `generate_context` correctly decodes non-ascii chars.\"\"\"\n    expected_context = {'non_ascii': OrderedDict([('full_name', '\u00e9\u00e8\u00e0'),])}\n\n    generated_context = generate.generate_context(\n        context_file='tests/test-generate-context/non_ascii.json'\n    )\n\n    assert generated_context == expected_context",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.template_context#123",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.template_context()",
        "snippet": "def template_context():\n    \"\"\"Fixture. Populates template content for future tests.\"\"\"\n    return OrderedDict(\n        [\n            ('full_name', 'Raphael Pierzina'),\n            ('github_username', 'hackebrot'),\n            ('project_name', 'Kivy Project'),\n            ('repo_name', '{{cookiecutter.project_name|lower}}'),\n            ('orientation', ['all', 'landscape', 'portrait']),\n        ]\n    )",
        "begin_line": 123,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_apply_overwrites_does_include_unused_variables#136",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_apply_overwrites_does_include_unused_variables(template_context)",
        "snippet": "def test_apply_overwrites_does_include_unused_variables(template_context):\n    \"\"\"Verify `apply_overwrites_to_context` skips variables that are not in context.\"\"\"\n    generate.apply_overwrites_to_context(\n        context=template_context, overwrite_context={'not in template': 'foobar'}\n    )\n\n    assert 'not in template' not in template_context",
        "begin_line": 136,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_apply_overwrites_sets_non_list_value#145",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_apply_overwrites_sets_non_list_value(template_context)",
        "snippet": "def test_apply_overwrites_sets_non_list_value(template_context):\n    \"\"\"Verify `apply_overwrites_to_context` work with string variables.\"\"\"\n    generate.apply_overwrites_to_context(\n        context=template_context, overwrite_context={'repo_name': 'foobar'}\n    )\n\n    assert template_context['repo_name'] == 'foobar'",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_apply_overwrites_does_not_modify_choices_for_invalid_overwrite#154",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_apply_overwrites_does_not_modify_choices_for_invalid_overwrite(template_context)",
        "snippet": "def test_apply_overwrites_does_not_modify_choices_for_invalid_overwrite(\n    template_context,\n):\n    \"\"\"Verify variables overwrite for list if variable not in list ignored.\"\"\"\n    generate.apply_overwrites_to_context(\n        context=template_context, overwrite_context={'orientation': 'foobar'}\n    )\n\n    assert template_context['orientation'] == ['all', 'landscape', 'portrait']",
        "begin_line": 154,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_generate_context.test_apply_overwrites_sets_default_for_choice_variable#165",
        "src_path": "tests/test_generate_context.py",
        "class_name": "tests.test_generate_context",
        "signature": "tests.test_generate_context.test_apply_overwrites_sets_default_for_choice_variable(template_context)",
        "snippet": "def test_apply_overwrites_sets_default_for_choice_variable(template_context):\n    \"\"\"Verify overwritten list member became a default value.\"\"\"\n    generate.apply_overwrites_to_context(\n        context=template_context, overwrite_context={'orientation': 'landscape'}\n    )\n\n    assert template_context['orientation'] == ['landscape', 'all', 'portrait']",
        "begin_line": 165,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.replay.conftest.context#6",
        "src_path": "tests/replay/conftest.py",
        "class_name": "tests.replay.conftest",
        "signature": "tests.replay.conftest.context()",
        "snippet": "def context():\n    \"\"\"Fixture to return a valid context as known from a cookiecutter.json.\"\"\"\n    return {\n        'cookiecutter': {\n            'email': 'raphael@hackebrot.de',\n            'full_name': 'Raphael Pierzina',\n            'github_username': 'hackebrot',\n            'version': '0.1.0',\n        }\n    }",
        "begin_line": 6,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.replay.conftest.replay_test_dir#19",
        "src_path": "tests/replay/conftest.py",
        "class_name": "tests.replay.conftest",
        "signature": "tests.replay.conftest.replay_test_dir()",
        "snippet": "def replay_test_dir():\n    \"\"\"Fixture to test directory.\"\"\"\n    return 'tests/test-replay/'",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    }
]