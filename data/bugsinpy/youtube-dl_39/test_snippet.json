[
    {
        "name": "test.helper.get_params#18",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.get_params(override=None)",
        "snippet": "def get_params(override=None):\n    PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   \"parameters.json\")\n    with io.open(PARAMETERS_FILE, encoding='utf-8') as pf:\n        parameters = json.load(pf)\n    if override:\n        parameters.update(override)\n    return parameters",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.try_rm#28",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.try_rm(filename)",
        "snippet": "def try_rm(filename):\n    \"\"\" Remove a file if it exists \"\"\"\n    try:\n        os.remove(filename)\n    except OSError as ose:\n        if ose.errno != errno.ENOENT:\n            raise",
        "begin_line": 28,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.report_warning#37",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.report_warning(message)",
        "snippet": "def report_warning(message):\n    '''\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    '''\n    if sys.stderr.isatty() and os.name != 'nt':\n        _msg_header = u'\\033[0;33mWARNING:\\033[0m'\n    else:\n        _msg_header = u'WARNING:'\n    output = u'%s %s\\n' % (_msg_header, message)\n    if 'b' in getattr(sys.stderr, 'mode', '') or sys.version_info[0] < 3:\n        output = output.encode(preferredencoding())\n    sys.stderr.write(output)",
        "begin_line": 37,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.__init__#53",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.__init__(self, override=None)",
        "snippet": "    def __init__(self, override=None):\n        # Different instances of the downloader can't share the same dictionary\n        # some test set the \"sublang\" parameter, which would break the md5 checks.\n        params = get_params(override=override)\n        super(FakeYDL, self).__init__(params)\n        self.result = []",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.to_screen#60",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.to_screen(self, s, skip_eol=None)",
        "snippet": "    def to_screen(self, s, skip_eol=None):\n        print(s)",
        "begin_line": 60,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.expect_warning#69",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.expect_warning(self, regex)",
        "snippet": "    def expect_warning(self, regex):\n        # Silence an expected warning matching a regex\n        old_report_warning = self.report_warning\n        def report_warning(self, message):\n            if re.match(regex, message): return\n            old_report_warning(message)\n        self.report_warning = types.MethodType(report_warning, self)",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.report_warning#72",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.report_warning(self, message)",
        "snippet": "        def report_warning(self, message):\n            if re.match(regex, message): return\n            old_report_warning(message)",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.gettestcases#78",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.gettestcases(include_onlymatching=False)",
        "snippet": "def gettestcases(include_onlymatching=False):\n    for ie in youtube_dl.extractor.gen_extractors():\n        t = getattr(ie, '_TEST', None)\n        if t:\n            assert not hasattr(ie, '_TESTS'), \\\n                '%s has _TEST and _TESTS' % type(ie).__name__\n            tests = [t]\n        else:\n            tests = getattr(ie, '_TESTS', [])\n        for t in tests:\n            if not include_onlymatching and t.get('only_matching', False):\n                continue\n            t['name'] = type(ie).__name__[:-len('IE')]\n            yield t",
        "begin_line": 78,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.expect_info_dict#97",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.expect_info_dict(self, expected_dict, got_dict)",
        "snippet": "def expect_info_dict(self, expected_dict, got_dict):\n    for info_field, expected in expected_dict.items():\n        if isinstance(expected, compat_str) and expected.startswith('re:'):\n            got = got_dict.get(info_field)\n            match_str = expected[len('re:'):]\n            match_rex = re.compile(match_str)\n\n            self.assertTrue(\n                isinstance(got, compat_str),\n                u'Expected a %s object, but got %s for field %s' % (\n                    compat_str.__name__, type(got).__name__, info_field))\n            self.assertTrue(\n                match_rex.match(got),\n                u'field %s (value: %r) should match %r' % (info_field, got, match_str))\n        elif isinstance(expected, type):\n            got = got_dict.get(info_field)\n            self.assertTrue(isinstance(got, expected),\n                u'Expected type %r for field %s, but got value %r of type %r' % (expected, info_field, got, type(got)))\n        else:\n            if isinstance(expected, compat_str) and expected.startswith('md5:'):\n                got = 'md5:' + md5(got_dict.get(info_field))\n            else:\n                got = got_dict.get(info_field)\n            self.assertEqual(expected, got,\n                u'invalid value for field %s, expected %r, got %r' % (info_field, expected, got))\n\n    # Check for the presence of mandatory fields\n    if got_dict.get('_type') != 'playlist':\n        for key in ('id', 'url', 'title', 'ext'):\n            self.assertTrue(got_dict.get(key), 'Missing mandatory field %s' % key)\n    # Check for mandatory fields that are automatically set by YoutubeDL\n    for key in ['webpage_url', 'extractor', 'extractor_key']:\n        self.assertTrue(got_dict.get(key), u'Missing field: %s' % key)\n\n    # Are checkable fields missing from the test case definition?\n    test_info_dict = dict((key, value if not isinstance(value, compat_str) or len(value) < 250 else 'md5:' + md5(value))\n        for key, value in got_dict.items()\n        if value and key in ('title', 'description', 'uploader', 'upload_date', 'timestamp', 'uploader_id', 'location'))\n    missing_keys = set(test_info_dict.keys()) - set(expected_dict.keys())\n    if missing_keys:\n        sys.stderr.write(u'\\n\"info_dict\": ' + json.dumps(test_info_dict, ensure_ascii=False, indent=4) + u'\\n')\n        self.assertFalse(\n            missing_keys,\n            'Missing keys in test definition: %s' % (\n                ', '.join(sorted(missing_keys))))",
        "begin_line": 97,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.assertRegexpMatches#144",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.assertRegexpMatches(self, text, regexp, msg=None)",
        "snippet": "def assertRegexpMatches(self, text, regexp, msg=None):\n    if hasattr(self, 'assertRegexp'):\n        return self.assertRegexp(text, regexp, msg)\n    else:\n        m = re.match(regexp, text)\n        if not m:\n            note = 'Regexp didn\\'t match: %r not found in %r' % (regexp, text)\n            if msg is None:\n                msg = note\n            else:\n                msg = note + ', ' + msg\n            self.assertTrue(m, msg)",
        "begin_line": 144,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.assertGreaterEqual#158",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.assertGreaterEqual(self, got, expected, msg=None)",
        "snippet": "def assertGreaterEqual(self, got, expected, msg=None):\n    if not (got >= expected):\n        if msg is None:\n            msg = '%r not greater than or equal to %r' % (got, expected)\n        self.assertTrue(got >= expected, msg)",
        "begin_line": 158,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_timeconvert#48",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_timeconvert(self)",
        "snippet": "    def test_timeconvert(self):\n        self.assertTrue(timeconvert('') is None)\n        self.assertTrue(timeconvert('bougrg') is None)",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename#52",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename(self)",
        "snippet": "    def test_sanitize_filename(self):\n        self.assertEqual(sanitize_filename('abc'), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e'), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123'), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de'))\n        self.assertFalse('/' in sanitize_filename('abc/de///'))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de'))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|'))\n        self.assertEqual('yes no', sanitize_filename('yes? no'))\n        self.assertEqual('this - that', sanitize_filename('this: that'))\n\n        self.assertEqual(sanitize_filename('AT&T'), 'AT&T')\n        aumlaut = '\u00e4'\n        self.assertEqual(sanitize_filename(aumlaut), aumlaut)\n        tests = '\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0446\\u0430'\n        self.assertEqual(sanitize_filename(tests), tests)\n\n        forbidden = '\"\\0\\\\/'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc))",
        "begin_line": 52,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename_restricted#77",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename_restricted(self)",
        "snippet": "    def test_sanitize_filename_restricted(self):\n        self.assertEqual(sanitize_filename('abc', restricted=True), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e', restricted=True), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123', restricted=True), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de', restricted=True))\n        self.assertFalse('/' in sanitize_filename('abc/de///', restricted=True))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de', restricted=True))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|', restricted=True))\n        self.assertEqual('yes_no', sanitize_filename('yes? no', restricted=True))\n        self.assertEqual('this_-_that', sanitize_filename('this: that', restricted=True))\n\n        tests = 'a\\xe4b\\u4e2d\\u56fd\\u7684c'\n        self.assertEqual(sanitize_filename(tests, restricted=True), 'a_b_c')\n        self.assertTrue(sanitize_filename('\\xf6', restricted=True) != '')  # No empty filename\n\n        forbidden = '\"\\0\\\\/&!: \\'\\t\\n()[]{}$;`^,#'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc, restricted=True))\n\n        # Handle a common case more neatly\n        self.assertEqual(sanitize_filename('\\u5927\\u58f0\\u5e26 - Song', restricted=True), 'Song')\n        self.assertEqual(sanitize_filename('\\u603b\\u7edf: Speech', restricted=True), 'Speech')\n        # .. but make sure the file name is never empty\n        self.assertTrue(sanitize_filename('-', restricted=True) != '')\n        self.assertTrue(sanitize_filename(':', restricted=True) != '')",
        "begin_line": 77,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_ids#107",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_ids(self)",
        "snippet": "    def test_sanitize_ids(self):\n        self.assertEqual(sanitize_filename('_n_cd26wFpw', is_id=True), '_n_cd26wFpw')\n        self.assertEqual(sanitize_filename('_BD_eEpuzXw', is_id=True), '_BD_eEpuzXw')\n        self.assertEqual(sanitize_filename('N0Y__7-UOdI', is_id=True), 'N0Y__7-UOdI')",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_ordered_set#112",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_ordered_set(self)",
        "snippet": "    def test_ordered_set(self):\n        self.assertEqual(orderedSet([1, 1, 2, 3, 4, 4, 5, 6, 7, 3, 5]), [1, 2, 3, 4, 5, 6, 7])\n        self.assertEqual(orderedSet([]), [])\n        self.assertEqual(orderedSet([1]), [1])\n        #keep the list ordered\n        self.assertEqual(orderedSet([135, 1, 1, 1]), [135, 1])",
        "begin_line": 112,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unescape_html#119",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unescape_html(self)",
        "snippet": "    def test_unescape_html(self):\n        self.assertEqual(unescapeHTML('%20;'), '%20;')\n        self.assertEqual(\n            unescapeHTML('&eacute;'), '\u00e9')",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_daterange#124",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_daterange(self)",
        "snippet": "    def test_daterange(self):\n        _20century = DateRange(\"19000101\",\"20000101\")\n        self.assertFalse(\"17890714\" in _20century)\n        _ac = DateRange(\"00010101\")\n        self.assertTrue(\"19690721\" in _ac)\n        _firstmilenium = DateRange(end=\"10000101\")\n        self.assertTrue(\"07110427\" in _firstmilenium)",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unified_dates#132",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unified_dates(self)",
        "snippet": "    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n        self.assertEqual(unified_strdate('1968-12-10'), '19681210')",
        "begin_line": 132,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_find_xpath_attr#139",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_find_xpath_attr(self)",
        "snippet": "    def test_find_xpath_attr(self):\n        testxml = '''<root>\n            <node/>\n            <node x=\"a\"/>\n            <node x=\"a\" y=\"c\" />\n            <node x=\"b\" y=\"d\" />\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'a'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'c'), doc[2])",
        "begin_line": 139,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_meta_parser#152",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_meta_parser(self)",
        "snippet": "    def test_meta_parser(self):\n        testhtml = '''\n        <head>\n            <meta name=\"description\" content=\"foo &amp; bar\">\n            <meta content='Plato' name='author'/>\n        </head>\n        '''\n        get_meta = lambda name: get_meta_content(name, testhtml)\n        self.assertEqual(get_meta('description'), 'foo & bar')\n        self.assertEqual(get_meta('author'), 'Plato')",
        "begin_line": 152,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_with_ns#163",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_with_ns(self)",
        "snippet": "    def test_xpath_with_ns(self):\n        testxml = '''<root xmlns:media=\"http://example.com/\">\n            <media:song>\n                <media:author>The Author</media:author>\n                <url>http://server.com/download.mp3</url>\n            </media:song>\n        </root>'''\n        doc = xml.etree.ElementTree.fromstring(testxml)\n        find = lambda p: doc.find(xpath_with_ns(p, {'media': 'http://example.com/'}))\n        self.assertTrue(find('media:song') is not None)\n        self.assertEqual(find('media:song/media:author').text, 'The Author')\n        self.assertEqual(find('media:song/url').text, 'http://server.com/download.mp3')",
        "begin_line": 163,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_smuggle_url#176",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_smuggle_url(self)",
        "snippet": "    def test_smuggle_url(self):\n        data = {u\"\u00f6\": u\"\u00f6\", u\"abc\": [3]}\n        url = 'https://foo.bar/baz?x=y#a'\n        smug_url = smuggle_url(url, data)\n        unsmug_url, unsmug_data = unsmuggle_url(smug_url)\n        self.assertEqual(url, unsmug_url)\n        self.assertEqual(data, unsmug_data)\n\n        res_url, res_data = unsmuggle_url(url)\n        self.assertEqual(res_url, url)\n        self.assertEqual(res_data, None)",
        "begin_line": 176,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_shell_quote#188",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_shell_quote(self)",
        "snippet": "    def test_shell_quote(self):\n        args = ['ffmpeg', '-i', encodeFilename('\u00f1\u20ac\u00df\\'.mp4')]\n        self.assertEqual(shell_quote(args), \"\"\"ffmpeg -i '\u00f1\u20ac\u00df'\"'\"'.mp4'\"\"\")",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_str_to_int#192",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_str_to_int(self)",
        "snippet": "    def test_str_to_int(self):\n        self.assertEqual(str_to_int('123,456'), 123456)\n        self.assertEqual(str_to_int('123.456'), 123456)",
        "begin_line": 192,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_url_basename#196",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_url_basename(self)",
        "snippet": "    def test_url_basename(self):\n        self.assertEqual(url_basename('http://foo.de/'), '')\n        self.assertEqual(url_basename('http://foo.de/bar/baz'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz?x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz#x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz/'), 'baz')\n        self.assertEqual(\n            url_basename('http://media.w3.org/2010/05/sintel/trailer.mp4'),\n            'trailer.mp4')",
        "begin_line": 196,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_duration#206",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_duration(self)",
        "snippet": "    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('3h 11m 53s'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)\n        self.assertEqual(parse_duration('01:02:03.05'), 3723.05)",
        "begin_line": 206,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_fix_xml_ampersands#226",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_fix_xml_ampersands(self)",
        "snippet": "    def test_fix_xml_ampersands(self):\n        self.assertEqual(\n            fix_xml_ampersands('\"&x=y&z=a'), '\"&amp;x=y&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('\"&amp;x=y&wrong;&z=a'),\n            '\"&amp;x=y&amp;wrong;&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('&amp;&apos;&gt;&lt;&quot;'),\n            '&amp;&apos;&gt;&lt;&quot;')\n        self.assertEqual(\n            fix_xml_ampersands('&#1234;&#x1abC;'), '&#1234;&#x1abC;')\n        self.assertEqual(fix_xml_ampersands('&#&#'), '&amp;#&amp;#')",
        "begin_line": 226,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_paged_list#239",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_paged_list(self)",
        "snippet": "    def test_paged_list(self):\n        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = PagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n        testPL(5, 2, (), [0, 1, 2, 3, 4])\n        testPL(5, 2, (1,), [1, 2, 3, 4])\n        testPL(5, 2, (2,), [2, 3, 4])\n        testPL(5, 2, (4,), [4])\n        testPL(5, 2, (0, 3), [0, 1, 2])\n        testPL(5, 2, (1, 4), [1, 2, 3])\n        testPL(5, 2, (2, 99), [2, 3, 4])\n        testPL(5, 2, (20, 99), [])",
        "begin_line": 239,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.testPL#240",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.testPL(size, pagesize, sliceargs, expected)",
        "snippet": "        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = PagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)",
        "begin_line": 240,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.get_page#241",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.get_page(pagenum)",
        "snippet": "            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_struct_unpack#260",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_struct_unpack(self)",
        "snippet": "    def test_struct_unpack(self):\n        self.assertEqual(struct_unpack('!B', b'\\x00'), (0,))",
        "begin_line": 260,
        "end_line": 261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_read_batch_urls#263",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_read_batch_urls(self)",
        "snippet": "    def test_read_batch_urls(self):\n        f = io.StringIO('''\\xef\\xbb\\xbf foo\n            bar\\r\n            baz\n            # More after this line\\r\n            ; or after this\n            bam''')\n        self.assertEqual(read_batch_urls(f), ['foo', 'bar', 'baz', 'bam'])",
        "begin_line": 263,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urlencode_postdata#272",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urlencode_postdata(self)",
        "snippet": "    def test_urlencode_postdata(self):\n        data = urlencode_postdata({'username': 'foo@bar.com', 'password': '1234'})\n        self.assertTrue(isinstance(data, bytes))",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_iso8601#276",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_iso8601(self)",
        "snippet": "    def test_parse_iso8601(self):\n        self.assertEqual(parse_iso8601('2014-03-23T23:04:26+0100'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26+0000'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26Z'), 1395612266)",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_strip_jsonp#281",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_strip_jsonp(self)",
        "snippet": "    def test_strip_jsonp(self):\n        stripped = strip_jsonp('cb ([ {\"id\":\"532cb\",\\n\\n\\n\"x\":\\n3}\\n]\\n);')\n        d = json.loads(stripped)\n        self.assertEqual(d, [{\"id\": \"532cb\", \"x\": 3}])",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_uppercase_escape#286",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_uppercase_escape(self)",
        "snippet": "    def test_uppercase_escape(self):\n        self.assertEqual(uppercase_escape('a\u00e4'), 'a\u00e4')\n        self.assertEqual(uppercase_escape('\\\\U0001d550'), '\ud835\udd50')",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_limit_length#290",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_limit_length(self)",
        "snippet": "    def test_limit_length(self):\n        self.assertEqual(limit_length(None, 12), None)\n        self.assertEqual(limit_length('foo', 12), 'foo')\n        self.assertTrue(\n            limit_length('foo bar baz asd', 12).startswith('foo bar'))\n        self.assertTrue('...' in limit_length('foo bar baz asd', 12))",
        "begin_line": 290,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    }
]