coverage run -m pytest pandas/tests/arithmetic/test_datetime64.py::TestDatetime64DateOffsetArithmetic::test_dt64arr_add_sub_offset_array
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1008 items

pandas/tests/arithmetic/test_datetime64.py ............................. [  2%]
..........FFF........................................................... [ 10%]
........................................................................ [ 17%]
........................................................................ [ 24%]
........................................................................ [ 31%]
........................................................................ [ 38%]
........................................................................ [ 45%]
........................................................................ [ 52%]
........................................................................ [ 60%]
........................................................................ [ 67%]
........................................................................ [ 74%]
........................................................................ [ 81%]
........................................................................ [ 88%]
........................................................................ [ 95%]
...........................................                              [100%]

=================================== FAILURES ===================================
_ TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_offset_array[None-DataFrame-True-radd-other0] _

left = array([[<MonthEnd>, <2 * Days>]], dtype=object)
right = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
op = <built-in function add>, str_rep = '+', is_cmp = False

    def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):
        """
        Return the result of evaluating op on the passed in values.
    
        If native types are not compatible, try coersion to object dtype.
    
        Parameters
        ----------
        left : np.ndarray
        right : np.ndarray or scalar
        str_rep : str or None
        is_cmp : bool, default False
            If this a comparison operation.
    
        Returns
        -------
        array-like
    
        Raises
        ------
        TypeError : invalid operation
        """
        import pandas.core.computation.expressions as expressions
    
        try:
>           result = expressions.evaluate(op, str_rep, left, right)

pandas/core/ops/array_ops.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = array([[<MonthEnd>, <2 * Days>]], dtype=object)
b = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
use_numexpr = True

    def evaluate(op, op_str, a, b, use_numexpr=True):
        """
        Evaluate and return the expression of the op on a and b.
    
        Parameters
        ----------
        op : the actual operand
        op_str : str
            The string version of the op.
        a : left operand
        b : right operand
        use_numexpr : bool, default True
            Whether to try to use numexpr.
        """
        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)
        if use_numexpr:
>           return _evaluate(op, op_str, a, b)

pandas/core/computation/expressions.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = array([[<MonthEnd>, <2 * Days>]], dtype=object)
b = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')

    def _evaluate_standard(op, op_str, a, b):
        """
        Standard evaluation.
        """
        if _TEST_MODE:
            _store_test_result(False)
        with np.errstate(all="ignore"):
>           return op(a, b)
E           numpy.core._exceptions.UFuncTypeError: ufunc 'add' cannot use operands with types dtype('O') and dtype('<M8[ns]')

pandas/core/computation/expressions.py:67: UFuncTypeError

During handling of the above exception, another exception occurred:

self = <pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic object at 0x7f83f5bcb070>
tz_naive_fixture = None, box_with_array = <class 'pandas.core.frame.DataFrame'>
box_other = True, op = <function radd at 0x7f83f75da820>
other =             0           1
0  <MonthEnd>  <2 * Days>

    @pytest.mark.parametrize(
        "other",
        [
            np.array([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)]),
            np.array([pd.offsets.DateOffset(years=1), pd.offsets.MonthEnd()]),
            np.array(  # matching offsets
                [pd.offsets.DateOffset(years=1), pd.offsets.DateOffset(years=1)]
            ),
        ],
    )
    @pytest.mark.parametrize("op", [operator.add, roperator.radd, operator.sub])
    @pytest.mark.parametrize("box_other", [True, False])
    def test_dt64arr_add_sub_offset_array(
        self, tz_naive_fixture, box_with_array, box_other, op, other
    ):
        # GH#18849
        # GH#10699 array of offsets
    
        tz = tz_naive_fixture
        dti = pd.date_range("2017-01-01", periods=2, tz=tz)
        dtarr = tm.box_expected(dti, box_with_array)
    
        other = np.array([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])
        expected = DatetimeIndex([op(dti[n], other[n]) for n in range(len(dti))])
        expected = tm.box_expected(expected, box_with_array)
    
        if box_other:
            other = tm.box_expected(other, box_with_array)
    
        warn = PerformanceWarning
        if box_with_array is pd.DataFrame and not (tz is None and not box_other):
            warn = None
        with tm.assert_produces_warning(warn):
>           res = op(dtarr, other)

pandas/tests/arithmetic/test_datetime64.py:1474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/roperator.py:9: in radd
    return right + left
pandas/core/ops/__init__.py:715: in f
    new_data = self._combine_frame(other, pass_op, fill_value)
pandas/core/frame.py:5677: in _combine_frame
    res_values = _arith_op(self.values, other.values)
pandas/core/ops/array_ops.py:125: in na_op
    return na_arithmetic_op(x, y, op, str_rep)
pandas/core/ops/array_ops.py:162: in na_arithmetic_op
    result = masked_arith_op(left, right, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[<MonthEnd>, <2 * Days>]], dtype=object)
y = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
op = <built-in function add>

    def masked_arith_op(x: np.ndarray, y, op):
        """
        If the given arithmetic operation fails, attempt it again on
        only the non-null elements of the input array(s).
    
        Parameters
        ----------
        x : np.ndarray
        y : np.ndarray, Series, Index
        op : binary operator
        """
        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes
        # the logic valid for both Series and DataFrame ops.
        xrav = x.ravel()
        assert isinstance(x, np.ndarray), type(x)
        if isinstance(y, np.ndarray):
            dtype = find_common_type([x.dtype, y.dtype])
            result = np.empty(x.size, dtype=dtype)
    
            if len(x) != len(y):
                raise ValueError(x.shape, y.shape)
            else:
                ymask = notna(y)
    
            # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex
            #  we would get int64 dtype, see GH#19956
            yrav = y.ravel()
            mask = notna(xrav) & ymask.ravel()
    
            if yrav.shape != mask.shape:
                # FIXME: GH#5284, GH#5035, GH#19448
                # Without specifically raising here we get mismatched
                # errors in Py3 (TypeError) vs Py2 (ValueError)
                # Note: Only = an issue in DataFrame case
                raise ValueError("Cannot broadcast operands together.")
    
            if mask.any():
                with np.errstate(all="ignore"):
>                   result[mask] = op(xrav[mask], yrav[mask])
E                   numpy.core._exceptions.UFuncTypeError: ufunc 'add' cannot use operands with types dtype('O') and dtype('<M8[ns]')

pandas/core/ops/array_ops.py:96: UFuncTypeError
_ TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_offset_array[None-DataFrame-True-radd-other1] _

left = array([[<MonthEnd>, <2 * Days>]], dtype=object)
right = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
op = <built-in function add>, str_rep = '+', is_cmp = False

    def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):
        """
        Return the result of evaluating op on the passed in values.
    
        If native types are not compatible, try coersion to object dtype.
    
        Parameters
        ----------
        left : np.ndarray
        right : np.ndarray or scalar
        str_rep : str or None
        is_cmp : bool, default False
            If this a comparison operation.
    
        Returns
        -------
        array-like
    
        Raises
        ------
        TypeError : invalid operation
        """
        import pandas.core.computation.expressions as expressions
    
        try:
>           result = expressions.evaluate(op, str_rep, left, right)

pandas/core/ops/array_ops.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = array([[<MonthEnd>, <2 * Days>]], dtype=object)
b = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
use_numexpr = True

    def evaluate(op, op_str, a, b, use_numexpr=True):
        """
        Evaluate and return the expression of the op on a and b.
    
        Parameters
        ----------
        op : the actual operand
        op_str : str
            The string version of the op.
        a : left operand
        b : right operand
        use_numexpr : bool, default True
            Whether to try to use numexpr.
        """
        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)
        if use_numexpr:
>           return _evaluate(op, op_str, a, b)

pandas/core/computation/expressions.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = array([[<MonthEnd>, <2 * Days>]], dtype=object)
b = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')

    def _evaluate_standard(op, op_str, a, b):
        """
        Standard evaluation.
        """
        if _TEST_MODE:
            _store_test_result(False)
        with np.errstate(all="ignore"):
>           return op(a, b)
E           numpy.core._exceptions.UFuncTypeError: ufunc 'add' cannot use operands with types dtype('O') and dtype('<M8[ns]')

pandas/core/computation/expressions.py:67: UFuncTypeError

During handling of the above exception, another exception occurred:

self = <pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic object at 0x7f83f570df40>
tz_naive_fixture = None, box_with_array = <class 'pandas.core.frame.DataFrame'>
box_other = True, op = <function radd at 0x7f83f75da820>
other =             0           1
0  <MonthEnd>  <2 * Days>

    @pytest.mark.parametrize(
        "other",
        [
            np.array([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)]),
            np.array([pd.offsets.DateOffset(years=1), pd.offsets.MonthEnd()]),
            np.array(  # matching offsets
                [pd.offsets.DateOffset(years=1), pd.offsets.DateOffset(years=1)]
            ),
        ],
    )
    @pytest.mark.parametrize("op", [operator.add, roperator.radd, operator.sub])
    @pytest.mark.parametrize("box_other", [True, False])
    def test_dt64arr_add_sub_offset_array(
        self, tz_naive_fixture, box_with_array, box_other, op, other
    ):
        # GH#18849
        # GH#10699 array of offsets
    
        tz = tz_naive_fixture
        dti = pd.date_range("2017-01-01", periods=2, tz=tz)
        dtarr = tm.box_expected(dti, box_with_array)
    
        other = np.array([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])
        expected = DatetimeIndex([op(dti[n], other[n]) for n in range(len(dti))])
        expected = tm.box_expected(expected, box_with_array)
    
        if box_other:
            other = tm.box_expected(other, box_with_array)
    
        warn = PerformanceWarning
        if box_with_array is pd.DataFrame and not (tz is None and not box_other):
            warn = None
        with tm.assert_produces_warning(warn):
>           res = op(dtarr, other)

pandas/tests/arithmetic/test_datetime64.py:1474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/roperator.py:9: in radd
    return right + left
pandas/core/ops/__init__.py:715: in f
    new_data = self._combine_frame(other, pass_op, fill_value)
pandas/core/frame.py:5677: in _combine_frame
    res_values = _arith_op(self.values, other.values)
pandas/core/ops/array_ops.py:125: in na_op
    return na_arithmetic_op(x, y, op, str_rep)
pandas/core/ops/array_ops.py:162: in na_arithmetic_op
    result = masked_arith_op(left, right, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[<MonthEnd>, <2 * Days>]], dtype=object)
y = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
op = <built-in function add>

    def masked_arith_op(x: np.ndarray, y, op):
        """
        If the given arithmetic operation fails, attempt it again on
        only the non-null elements of the input array(s).
    
        Parameters
        ----------
        x : np.ndarray
        y : np.ndarray, Series, Index
        op : binary operator
        """
        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes
        # the logic valid for both Series and DataFrame ops.
        xrav = x.ravel()
        assert isinstance(x, np.ndarray), type(x)
        if isinstance(y, np.ndarray):
            dtype = find_common_type([x.dtype, y.dtype])
            result = np.empty(x.size, dtype=dtype)
    
            if len(x) != len(y):
                raise ValueError(x.shape, y.shape)
            else:
                ymask = notna(y)
    
            # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex
            #  we would get int64 dtype, see GH#19956
            yrav = y.ravel()
            mask = notna(xrav) & ymask.ravel()
    
            if yrav.shape != mask.shape:
                # FIXME: GH#5284, GH#5035, GH#19448
                # Without specifically raising here we get mismatched
                # errors in Py3 (TypeError) vs Py2 (ValueError)
                # Note: Only = an issue in DataFrame case
                raise ValueError("Cannot broadcast operands together.")
    
            if mask.any():
                with np.errstate(all="ignore"):
>                   result[mask] = op(xrav[mask], yrav[mask])
E                   numpy.core._exceptions.UFuncTypeError: ufunc 'add' cannot use operands with types dtype('O') and dtype('<M8[ns]')

pandas/core/ops/array_ops.py:96: UFuncTypeError
_ TestDatetime64DateOffsetArithmetic.test_dt64arr_add_sub_offset_array[None-DataFrame-True-radd-other2] _

left = array([[<MonthEnd>, <2 * Days>]], dtype=object)
right = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
op = <built-in function add>, str_rep = '+', is_cmp = False

    def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):
        """
        Return the result of evaluating op on the passed in values.
    
        If native types are not compatible, try coersion to object dtype.
    
        Parameters
        ----------
        left : np.ndarray
        right : np.ndarray or scalar
        str_rep : str or None
        is_cmp : bool, default False
            If this a comparison operation.
    
        Returns
        -------
        array-like
    
        Raises
        ------
        TypeError : invalid operation
        """
        import pandas.core.computation.expressions as expressions
    
        try:
>           result = expressions.evaluate(op, str_rep, left, right)

pandas/core/ops/array_ops.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = array([[<MonthEnd>, <2 * Days>]], dtype=object)
b = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
use_numexpr = True

    def evaluate(op, op_str, a, b, use_numexpr=True):
        """
        Evaluate and return the expression of the op on a and b.
    
        Parameters
        ----------
        op : the actual operand
        op_str : str
            The string version of the op.
        a : left operand
        b : right operand
        use_numexpr : bool, default True
            Whether to try to use numexpr.
        """
        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)
        if use_numexpr:
>           return _evaluate(op, op_str, a, b)

pandas/core/computation/expressions.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = array([[<MonthEnd>, <2 * Days>]], dtype=object)
b = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')

    def _evaluate_standard(op, op_str, a, b):
        """
        Standard evaluation.
        """
        if _TEST_MODE:
            _store_test_result(False)
        with np.errstate(all="ignore"):
>           return op(a, b)
E           numpy.core._exceptions.UFuncTypeError: ufunc 'add' cannot use operands with types dtype('O') and dtype('<M8[ns]')

pandas/core/computation/expressions.py:67: UFuncTypeError

During handling of the above exception, another exception occurred:

self = <pandas.tests.arithmetic.test_datetime64.TestDatetime64DateOffsetArithmetic object at 0x7f83f529d520>
tz_naive_fixture = None, box_with_array = <class 'pandas.core.frame.DataFrame'>
box_other = True, op = <function radd at 0x7f83f75da820>
other =             0           1
0  <MonthEnd>  <2 * Days>

    @pytest.mark.parametrize(
        "other",
        [
            np.array([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)]),
            np.array([pd.offsets.DateOffset(years=1), pd.offsets.MonthEnd()]),
            np.array(  # matching offsets
                [pd.offsets.DateOffset(years=1), pd.offsets.DateOffset(years=1)]
            ),
        ],
    )
    @pytest.mark.parametrize("op", [operator.add, roperator.radd, operator.sub])
    @pytest.mark.parametrize("box_other", [True, False])
    def test_dt64arr_add_sub_offset_array(
        self, tz_naive_fixture, box_with_array, box_other, op, other
    ):
        # GH#18849
        # GH#10699 array of offsets
    
        tz = tz_naive_fixture
        dti = pd.date_range("2017-01-01", periods=2, tz=tz)
        dtarr = tm.box_expected(dti, box_with_array)
    
        other = np.array([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])
        expected = DatetimeIndex([op(dti[n], other[n]) for n in range(len(dti))])
        expected = tm.box_expected(expected, box_with_array)
    
        if box_other:
            other = tm.box_expected(other, box_with_array)
    
        warn = PerformanceWarning
        if box_with_array is pd.DataFrame and not (tz is None and not box_other):
            warn = None
        with tm.assert_produces_warning(warn):
>           res = op(dtarr, other)

pandas/tests/arithmetic/test_datetime64.py:1474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/roperator.py:9: in radd
    return right + left
pandas/core/ops/__init__.py:715: in f
    new_data = self._combine_frame(other, pass_op, fill_value)
pandas/core/frame.py:5677: in _combine_frame
    res_values = _arith_op(self.values, other.values)
pandas/core/ops/array_ops.py:125: in na_op
    return na_arithmetic_op(x, y, op, str_rep)
pandas/core/ops/array_ops.py:162: in na_arithmetic_op
    result = masked_arith_op(left, right, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[<MonthEnd>, <2 * Days>]], dtype=object)
y = array([['2017-01-01T00:00:00.000000000', '2017-01-02T00:00:00.000000000']],
      dtype='datetime64[ns]')
op = <built-in function add>

    def masked_arith_op(x: np.ndarray, y, op):
        """
        If the given arithmetic operation fails, attempt it again on
        only the non-null elements of the input array(s).
    
        Parameters
        ----------
        x : np.ndarray
        y : np.ndarray, Series, Index
        op : binary operator
        """
        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes
        # the logic valid for both Series and DataFrame ops.
        xrav = x.ravel()
        assert isinstance(x, np.ndarray), type(x)
        if isinstance(y, np.ndarray):
            dtype = find_common_type([x.dtype, y.dtype])
            result = np.empty(x.size, dtype=dtype)
    
            if len(x) != len(y):
                raise ValueError(x.shape, y.shape)
            else:
                ymask = notna(y)
    
            # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex
            #  we would get int64 dtype, see GH#19956
            yrav = y.ravel()
            mask = notna(xrav) & ymask.ravel()
    
            if yrav.shape != mask.shape:
                # FIXME: GH#5284, GH#5035, GH#19448
                # Without specifically raising here we get mismatched
                # errors in Py3 (TypeError) vs Py2 (ValueError)
                # Note: Only = an issue in DataFrame case
                raise ValueError("Cannot broadcast operands together.")
    
            if mask.any():
                with np.errstate(all="ignore"):
>                   result[mask] = op(xrav[mask], yrav[mask])
E                   numpy.core._exceptions.UFuncTypeError: ufunc 'add' cannot use operands with types dtype('O') and dtype('<M8[ns]')

pandas/core/ops/array_ops.py:96: UFuncTypeError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetime64DateOffsetArithmetic::test_dt64arr_add_sub_offset_array[None-DataFrame-True-radd-other0]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetime64DateOffsetArithmetic::test_dt64arr_add_sub_offset_array[None-DataFrame-True-radd-other1]
FAILED pandas/tests/arithmetic/test_datetime64.py::TestDatetime64DateOffsetArithmetic::test_dt64arr_add_sub_offset_array[None-DataFrame-True-radd-other2]
======================== 3 failed, 1005 passed in 9.18s ========================

coverage run -m pytest pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_offset_index
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 3 items

pandas/tests/arithmetic/test_timedelta64.py EEE                          [100%]

==================================== ERRORS ====================================
_ ERROR at setup of TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_index[Index] _
file /home/user/BugsInPy/temp/projects/pandas/pandas/tests/arithmetic/test_timedelta64.py, line 1302
      def test_td64arr_add_offset_index(self, names, box):
E       fixture 'names' not found
>       available fixtures: add_imports, all_arithmetic_functions, all_arithmetic_operators, all_boolean_reductions, all_compare_operators, all_logical_operators, all_numeric_reductions, any_int_dtype, any_nullable_int_dtype, any_numpy_dtype, any_real_dtype, any_skipna_inferred_dtype, axis, axis_frame, axis_series, box, box_df_fail, box_with_array, box_with_array2, bytes_dtype, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, closed, compare_operators_no_eq_ne, complex_dtype, compression, compression_only, configure_tests, cython_table_items, datapath, datetime64_dtype, datetime_frame, datetime_series, datetime_tz_utc, dict_subclass, doctest_namespace, empty_frame, empty_series, float_dtype, float_frame, index_fixture2, index_or_series, index_or_series_obj, indices, int_frame, ip, iris, join_type, keep, mismatched_freq, monkeypatch, multiindex_year_month_day_dataframe_random_data, narrow_series, non_dict_mapping_subclass, not_daily, not_hourly, nselect_method, nulls_fixture, nulls_fixture2, numeric_idx, object_dtype, object_series, observed, one, ordered, other_closed, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, scalar_td, series_with_simple_index, sint_dtype, sort_by_key, spmatrix, strict_data_files, string_dtype, string_series, three_days, tick_classes, timedelta64_dtype, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, two_hours, tz_aware_fixture, tz_aware_fixture2, tz_naive_fixture, uint_dtype, unique_nulls_fixture, unique_nulls_fixture2, utc_fixture, writable, zero
>       use 'pytest --fixtures [testpath]' for help on them.

/home/user/BugsInPy/temp/projects/pandas/pandas/tests/arithmetic/test_timedelta64.py:1302
_ ERROR at setup of TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_index[Series] _
file /home/user/BugsInPy/temp/projects/pandas/pandas/tests/arithmetic/test_timedelta64.py, line 1302
      def test_td64arr_add_offset_index(self, names, box):
E       fixture 'names' not found
>       available fixtures: add_imports, all_arithmetic_functions, all_arithmetic_operators, all_boolean_reductions, all_compare_operators, all_logical_operators, all_numeric_reductions, any_int_dtype, any_nullable_int_dtype, any_numpy_dtype, any_real_dtype, any_skipna_inferred_dtype, axis, axis_frame, axis_series, box, box_df_fail, box_with_array, box_with_array2, bytes_dtype, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, closed, compare_operators_no_eq_ne, complex_dtype, compression, compression_only, configure_tests, cython_table_items, datapath, datetime64_dtype, datetime_frame, datetime_series, datetime_tz_utc, dict_subclass, doctest_namespace, empty_frame, empty_series, float_dtype, float_frame, index_fixture2, index_or_series, index_or_series_obj, indices, int_frame, ip, iris, join_type, keep, mismatched_freq, monkeypatch, multiindex_year_month_day_dataframe_random_data, narrow_series, non_dict_mapping_subclass, not_daily, not_hourly, nselect_method, nulls_fixture, nulls_fixture2, numeric_idx, object_dtype, object_series, observed, one, ordered, other_closed, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, scalar_td, series_with_simple_index, sint_dtype, sort_by_key, spmatrix, strict_data_files, string_dtype, string_series, three_days, tick_classes, timedelta64_dtype, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, two_hours, tz_aware_fixture, tz_aware_fixture2, tz_naive_fixture, uint_dtype, unique_nulls_fixture, unique_nulls_fixture2, utc_fixture, writable, zero
>       use 'pytest --fixtures [testpath]' for help on them.

/home/user/BugsInPy/temp/projects/pandas/pandas/tests/arithmetic/test_timedelta64.py:1302
_ ERROR at setup of TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_index[DataFrame] _
file /home/user/BugsInPy/temp/projects/pandas/pandas/tests/arithmetic/test_timedelta64.py, line 1302
      def test_td64arr_add_offset_index(self, names, box):
E       fixture 'names' not found
>       available fixtures: add_imports, all_arithmetic_functions, all_arithmetic_operators, all_boolean_reductions, all_compare_operators, all_logical_operators, all_numeric_reductions, any_int_dtype, any_nullable_int_dtype, any_numpy_dtype, any_real_dtype, any_skipna_inferred_dtype, axis, axis_frame, axis_series, box, box_df_fail, box_with_array, box_with_array2, bytes_dtype, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, closed, compare_operators_no_eq_ne, complex_dtype, compression, compression_only, configure_tests, cython_table_items, datapath, datetime64_dtype, datetime_frame, datetime_series, datetime_tz_utc, dict_subclass, doctest_namespace, empty_frame, empty_series, float_dtype, float_frame, index_fixture2, index_or_series, index_or_series_obj, indices, int_frame, ip, iris, join_type, keep, mismatched_freq, monkeypatch, multiindex_year_month_day_dataframe_random_data, narrow_series, non_dict_mapping_subclass, not_daily, not_hourly, nselect_method, nulls_fixture, nulls_fixture2, numeric_idx, object_dtype, object_series, observed, one, ordered, other_closed, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, scalar_td, series_with_simple_index, sint_dtype, sort_by_key, spmatrix, strict_data_files, string_dtype, string_series, three_days, tick_classes, timedelta64_dtype, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, two_hours, tz_aware_fixture, tz_aware_fixture2, tz_naive_fixture, uint_dtype, unique_nulls_fixture, unique_nulls_fixture2, utc_fixture, writable, zero
>       use 'pytest --fixtures [testpath]' for help on them.

/home/user/BugsInPy/temp/projects/pandas/pandas/tests/arithmetic/test_timedelta64.py:1302
=========================== short test summary info ============================
ERROR pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_offset_index[Index]
ERROR pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_offset_index[Series]
ERROR pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_offset_index[DataFrame]
============================== 3 errors in 0.14s ===============================
