[
    {
        "name": "pandas.tests.internals.test_internals.mgr#29",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.mgr()",
        "snippet": "def mgr():\n    return create_mgr(\n        \"a: f8; b: object; c: f8; d: object; e: f8;\"\n        \"f: bool; g: i8; h: complex; i: datetime-1; j: datetime-2;\"\n        \"k: M8[ns, US/Eastern]; l: M8[ns, CET];\"\n    )",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.assert_block_equal#37",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.assert_block_equal(left, right)",
        "snippet": "def assert_block_equal(left, right):\n    tm.assert_numpy_array_equal(left.values, right.values)\n    assert left.dtype == right.dtype\n    assert isinstance(left.mgr_locs, BlockPlacement)\n    assert isinstance(right.mgr_locs, BlockPlacement)\n    tm.assert_numpy_array_equal(left.mgr_locs.as_array, right.mgr_locs.as_array)",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.get_numeric_mat#45",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.get_numeric_mat(shape)",
        "snippet": "def get_numeric_mat(shape):\n    arr = np.arange(shape[0])\n    return np.lib.stride_tricks.as_strided(\n        x=arr, shape=shape, strides=(arr.itemsize,) + (0,) * (len(shape) - 1)\n    ).copy()",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.create_block#55",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.create_block(typestr, placement, item_shape=None, num_offset=0)",
        "snippet": "def create_block(typestr, placement, item_shape=None, num_offset=0):\n    \"\"\"\n    Supported typestr:\n\n        * float, f8, f4, f2\n        * int, i8, i4, i2, i1\n        * uint, u8, u4, u2, u1\n        * complex, c16, c8\n        * bool\n        * object, string, O\n        * datetime, dt, M8[ns], M8[ns, tz]\n        * timedelta, td, m8[ns]\n        * sparse (SparseArray with fill_value=0.0)\n        * sparse_na (SparseArray with fill_value=np.nan)\n        * category, category2\n\n    \"\"\"\n    placement = BlockPlacement(placement)\n    num_items = len(placement)\n\n    if item_shape is None:\n        item_shape = (N,)\n\n    shape = (num_items,) + item_shape\n\n    mat = get_numeric_mat(shape)\n\n    if typestr in (\n        \"float\",\n        \"f8\",\n        \"f4\",\n        \"f2\",\n        \"int\",\n        \"i8\",\n        \"i4\",\n        \"i2\",\n        \"i1\",\n        \"uint\",\n        \"u8\",\n        \"u4\",\n        \"u2\",\n        \"u1\",\n    ):\n        values = mat.astype(typestr) + num_offset\n    elif typestr in (\"complex\", \"c16\", \"c8\"):\n        values = 1.0j * (mat.astype(typestr) + num_offset)\n    elif typestr in (\"object\", \"string\", \"O\"):\n        values = np.reshape(\n            [\"A{i:d}\".format(i=i) for i in mat.ravel() + num_offset], shape\n        )\n    elif typestr in (\"b\", \"bool\"):\n        values = np.ones(shape, dtype=np.bool_)\n    elif typestr in (\"datetime\", \"dt\", \"M8[ns]\"):\n        values = (mat * 1e9).astype(\"M8[ns]\")\n    elif typestr.startswith(\"M8[ns\"):\n        # datetime with tz\n        m = re.search(r\"M8\\[ns,\\s*(\\w+\\/?\\w*)\\]\", typestr)\n        assert m is not None, \"incompatible typestr -> {0}\".format(typestr)\n        tz = m.groups()[0]\n        assert num_items == 1, \"must have only 1 num items for a tz-aware\"\n        values = DatetimeIndex(np.arange(N) * 1e9, tz=tz)\n    elif typestr in (\"timedelta\", \"td\", \"m8[ns]\"):\n        values = (mat * 1).astype(\"m8[ns]\")\n    elif typestr in (\"category\",):\n        values = Categorical([1, 1, 2, 2, 3, 3, 3, 3, 4, 4])\n    elif typestr in (\"category2\",):\n        values = Categorical([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\"])\n    elif typestr in (\"sparse\", \"sparse_na\"):\n        # FIXME: doesn't support num_rows != 10\n        assert shape[-1] == 10\n        assert all(s == 1 for s in shape[:-1])\n        if typestr.endswith(\"_na\"):\n            fill_value = np.nan\n        else:\n            fill_value = 0.0\n        values = SparseArray(\n            [fill_value, fill_value, 1, 2, 3, fill_value, 4, 5, fill_value, 6],\n            fill_value=fill_value,\n        )\n        arr = values.sp_values.view()\n        arr += num_offset - 1\n    else:\n        raise ValueError(f'Unsupported typestr: \"{typestr}\"')\n\n    return make_block(values, placement=placement, ndim=len(shape))",
        "begin_line": 55,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.create_single_mgr#142",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.create_single_mgr(typestr, num_rows=None)",
        "snippet": "def create_single_mgr(typestr, num_rows=None):\n    if num_rows is None:\n        num_rows = N\n\n    return SingleBlockManager(\n        create_block(typestr, placement=slice(0, num_rows), item_shape=()),\n        np.arange(num_rows),\n    )",
        "begin_line": 142,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.create_mgr#152",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.create_mgr(descr, item_shape=None)",
        "snippet": "def create_mgr(descr, item_shape=None):\n    \"\"\"\n    Construct BlockManager from string description.\n\n    String description syntax looks similar to np.matrix initializer.  It looks\n    like this::\n\n        a,b,c: f8; d,e,f: i8\n\n    Rules are rather simple:\n\n    * see list of supported datatypes in `create_block` method\n    * components are semicolon-separated\n    * each component is `NAME,NAME,NAME: DTYPE_ID`\n    * whitespace around colons & semicolons are removed\n    * components with same DTYPE_ID are combined into single block\n    * to force multiple blocks with same dtype, use '-SUFFIX'::\n\n        'a:f8-1; b:f8-2; c:f8-foobar'\n\n    \"\"\"\n    if item_shape is None:\n        item_shape = (N,)\n\n    offset = 0\n    mgr_items = []\n    block_placements = OrderedDict()\n    for d in descr.split(\";\"):\n        d = d.strip()\n        if not len(d):\n            continue\n        names, blockstr = d.partition(\":\")[::2]\n        blockstr = blockstr.strip()\n        names = names.strip().split(\",\")\n\n        mgr_items.extend(names)\n        placement = list(np.arange(len(names)) + offset)\n        try:\n            block_placements[blockstr].extend(placement)\n        except KeyError:\n            block_placements[blockstr] = placement\n        offset += len(names)\n\n    mgr_items = Index(mgr_items)\n\n    blocks = []\n    num_offset = 0\n    for blockstr, placement in block_placements.items():\n        typestr = blockstr.split(\"-\")[0]\n        blocks.append(\n            create_block(\n                typestr, placement, item_shape=item_shape, num_offset=num_offset\n            )\n        )\n        num_offset += len(placement)\n\n    return BlockManager(\n        sorted(blocks, key=lambda b: b.mgr_locs[0]),\n        [mgr_items] + [np.arange(n) for n in item_shape],\n    )",
        "begin_line": 152,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.setup_method#215",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        # self.fblock = get_float_ex()  # a,c,e\n        # self.cblock = get_complex_ex() #\n        # self.oblock = get_obj_ex()\n        # self.bool_block = get_bool_ex()\n        # self.int_block = get_int_ex()\n\n        self.fblock = create_block(\"float\", [0, 2, 4])\n        self.cblock = create_block(\"complex\", [7])\n        self.oblock = create_block(\"object\", [1, 3])\n        self.bool_block = create_block(\"bool\", [5])\n        self.int_block = create_block(\"int\", [6])",
        "begin_line": 215,
        "end_line": 226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_constructor#228",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_constructor(self)",
        "snippet": "    def test_constructor(self):\n        int32block = create_block(\"i4\", [0])\n        assert int32block.dtype == np.int32",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_pickle#232",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_pickle(self)",
        "snippet": "    def test_pickle(self):\n        def _check(blk):\n            assert_block_equal(tm.round_trip_pickle(blk), blk)\n\n        _check(self.fblock)\n        _check(self.cblock)\n        _check(self.oblock)\n        _check(self.bool_block)",
        "begin_line": 232,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock._check#233",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock._check(blk)",
        "snippet": "        def _check(blk):\n            assert_block_equal(tm.round_trip_pickle(blk), blk)",
        "begin_line": 233,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_mgr_locs#241",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_mgr_locs(self)",
        "snippet": "    def test_mgr_locs(self):\n        assert isinstance(self.fblock.mgr_locs, BlockPlacement)\n        tm.assert_numpy_array_equal(\n            self.fblock.mgr_locs.as_array, np.array([0, 2, 4], dtype=np.int64)\n        )",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_attrs#247",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_attrs(self)",
        "snippet": "    def test_attrs(self):\n        assert self.fblock.shape == self.fblock.values.shape\n        assert self.fblock.dtype == self.fblock.values.dtype\n        assert len(self.fblock) == len(self.fblock.values)",
        "begin_line": 247,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_merge#252",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_merge(self)",
        "snippet": "    def test_merge(self):\n        avals = tm.randn(2, 10)\n        bvals = tm.randn(2, 10)\n\n        ref_cols = Index([\"e\", \"a\", \"b\", \"d\", \"f\"])\n\n        ablock = make_block(avals, ref_cols.get_indexer([\"e\", \"b\"]))\n        bblock = make_block(bvals, ref_cols.get_indexer([\"a\", \"d\"]))\n        merged = ablock.merge(bblock)\n        tm.assert_numpy_array_equal(\n            merged.mgr_locs.as_array, np.array([0, 1, 2, 3], dtype=np.int64)\n        )\n        tm.assert_numpy_array_equal(merged.values[[0, 2]], np.array(avals))\n        tm.assert_numpy_array_equal(merged.values[[1, 3]], np.array(bvals))",
        "begin_line": 252,
        "end_line": 265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_copy#269",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_copy(self)",
        "snippet": "    def test_copy(self):\n        cop = self.fblock.copy()\n        assert cop is not self.fblock\n        assert_block_equal(self.fblock, cop)",
        "begin_line": 269,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_reindex_index#274",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_reindex_index(self)",
        "snippet": "    def test_reindex_index(self):\n        pass",
        "begin_line": 274,
        "end_line": 275,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_reindex_cast#277",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_reindex_cast(self)",
        "snippet": "    def test_reindex_cast(self):\n        pass",
        "begin_line": 277,
        "end_line": 278,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_insert#280",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_insert(self)",
        "snippet": "    def test_insert(self):\n        pass",
        "begin_line": 280,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_delete#283",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_delete(self)",
        "snippet": "    def test_delete(self):\n        newb = self.fblock.copy()\n        newb.delete(0)\n        assert isinstance(newb.mgr_locs, BlockPlacement)\n        tm.assert_numpy_array_equal(\n            newb.mgr_locs.as_array, np.array([2, 4], dtype=np.int64)\n        )\n        assert (newb.values[0] == 1).all()\n\n        newb = self.fblock.copy()\n        newb.delete(1)\n        assert isinstance(newb.mgr_locs, BlockPlacement)\n        tm.assert_numpy_array_equal(\n            newb.mgr_locs.as_array, np.array([0, 4], dtype=np.int64)\n        )\n        assert (newb.values[1] == 2).all()\n\n        newb = self.fblock.copy()\n        newb.delete(2)\n        tm.assert_numpy_array_equal(\n            newb.mgr_locs.as_array, np.array([0, 2], dtype=np.int64)\n        )\n        assert (newb.values[1] == 1).all()\n\n        newb = self.fblock.copy()\n        with pytest.raises(Exception):\n            newb.delete(3)",
        "begin_line": 283,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlock.test_make_block_same_class#311",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlock",
        "signature": "pandas.tests.internals.test_internals.TestBlock.test_make_block_same_class(self)",
        "snippet": "    def test_make_block_same_class(self):\n        # issue 19431\n        block = create_block(\"M8[ns, US/Eastern]\", [3])\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            block.make_block_same_class(block.values, dtype=block.values.dtype)",
        "begin_line": 311,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestDatetimeBlock.test_can_hold_element#319",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestDatetimeBlock",
        "signature": "pandas.tests.internals.test_internals.TestDatetimeBlock.test_can_hold_element(self)",
        "snippet": "    def test_can_hold_element(self):\n        block = create_block(\"datetime\", [0])\n\n        # We will check that block._can_hold_element iff arr.__setitem__ works\n        arr = pd.array(block.values.ravel())\n\n        # coerce None\n        assert block._can_hold_element(None)\n        arr[0] = None\n        assert arr[0] is pd.NaT\n\n        # coerce different types of datetime objects\n        vals = [np.datetime64(\"2010-10-10\"), datetime(2010, 10, 10)]\n        for val in vals:\n            assert block._can_hold_element(val)\n            arr[0] = val\n\n        val = date(2010, 10, 10)\n        assert not block._can_hold_element(val)\n        with pytest.raises(TypeError):\n            arr[0] = val",
        "begin_line": 319,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_constructor_corner#343",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_constructor_corner(self)",
        "snippet": "    def test_constructor_corner(self):\n        pass",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_attrs#346",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_attrs(self)",
        "snippet": "    def test_attrs(self):\n        mgr = create_mgr(\"a,b,c: f8-1; d,e,f: f8-2\")\n        assert mgr.nblocks == 2\n        assert len(mgr) == 6",
        "begin_line": 346,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_is_mixed_dtype#351",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_is_mixed_dtype(self)",
        "snippet": "    def test_is_mixed_dtype(self):\n        assert not create_mgr(\"a,b:f8\").is_mixed_type\n        assert not create_mgr(\"a:f8-1; b:f8-2\").is_mixed_type\n\n        assert create_mgr(\"a,b:f8; c,d: f4\").is_mixed_type\n        assert create_mgr(\"a,b:f8; c,d: object\").is_mixed_type",
        "begin_line": 351,
        "end_line": 356,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_duplicate_ref_loc_failure#358",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_duplicate_ref_loc_failure(self)",
        "snippet": "    def test_duplicate_ref_loc_failure(self):\n        tmp_mgr = create_mgr(\"a:bool; a: f8\")\n\n        axes, blocks = tmp_mgr.axes, tmp_mgr.blocks\n\n        blocks[0].mgr_locs = np.array([0])\n        blocks[1].mgr_locs = np.array([0])\n\n        # test trying to create block manager with overlapping ref locs\n        with pytest.raises(AssertionError):\n            BlockManager(blocks, axes)\n\n        blocks[0].mgr_locs = np.array([0])\n        blocks[1].mgr_locs = np.array([1])\n        mgr = BlockManager(blocks, axes)\n        mgr.iget(1)",
        "begin_line": 358,
        "end_line": 373,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_contains#375",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_contains(self, mgr)",
        "snippet": "    def test_contains(self, mgr):\n        assert \"a\" in mgr\n        assert \"baz\" not in mgr",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_pickle#379",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_pickle(self, mgr)",
        "snippet": "    def test_pickle(self, mgr):\n\n        mgr2 = tm.round_trip_pickle(mgr)\n        tm.assert_frame_equal(DataFrame(mgr), DataFrame(mgr2))\n\n        # share ref_items\n        # assert mgr2.blocks[0].ref_items is mgr2.blocks[1].ref_items\n\n        # GH2431\n        assert hasattr(mgr2, \"_is_consolidated\")\n        assert hasattr(mgr2, \"_known_consolidated\")\n\n        # reset to False on load\n        assert not mgr2._is_consolidated\n        assert not mgr2._known_consolidated",
        "begin_line": 379,
        "end_line": 393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_non_unique_pickle#395",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_non_unique_pickle(self)",
        "snippet": "    def test_non_unique_pickle(self):\n\n        mgr = create_mgr(\"a,a,a:f8\")\n        mgr2 = tm.round_trip_pickle(mgr)\n        tm.assert_frame_equal(DataFrame(mgr), DataFrame(mgr2))\n\n        mgr = create_mgr(\"a: f8; a: i8\")\n        mgr2 = tm.round_trip_pickle(mgr)\n        tm.assert_frame_equal(DataFrame(mgr), DataFrame(mgr2))",
        "begin_line": 395,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_categorical_block_pickle#405",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_categorical_block_pickle(self)",
        "snippet": "    def test_categorical_block_pickle(self):\n        mgr = create_mgr(\"a: category\")\n        mgr2 = tm.round_trip_pickle(mgr)\n        tm.assert_frame_equal(DataFrame(mgr), DataFrame(mgr2))\n\n        smgr = create_single_mgr(\"category\")\n        smgr2 = tm.round_trip_pickle(smgr)\n        tm.assert_series_equal(Series(smgr), Series(smgr2))",
        "begin_line": 405,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_get#414",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_get(self)",
        "snippet": "    def test_get(self):\n        cols = Index(list(\"abc\"))\n        values = np.random.rand(3, 3)\n        block = make_block(values=values.copy(), placement=np.arange(3))\n        mgr = BlockManager(blocks=[block], axes=[cols, np.arange(3)])\n\n        tm.assert_almost_equal(mgr.get(\"a\").internal_values(), values[0])\n        tm.assert_almost_equal(mgr.get(\"b\").internal_values(), values[1])\n        tm.assert_almost_equal(mgr.get(\"c\").internal_values(), values[2])",
        "begin_line": 414,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_set#424",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_set(self)",
        "snippet": "    def test_set(self):\n        mgr = create_mgr(\"a,b,c: int\", item_shape=(3,))\n\n        mgr.set(\"d\", np.array([\"foo\"] * 3))\n        mgr.set(\"b\", np.array([\"bar\"] * 3))\n        tm.assert_numpy_array_equal(mgr.get(\"a\").internal_values(), np.array([0] * 3))\n        tm.assert_numpy_array_equal(\n            mgr.get(\"b\").internal_values(), np.array([\"bar\"] * 3, dtype=np.object_)\n        )\n        tm.assert_numpy_array_equal(mgr.get(\"c\").internal_values(), np.array([2] * 3))\n        tm.assert_numpy_array_equal(\n            mgr.get(\"d\").internal_values(), np.array([\"foo\"] * 3, dtype=np.object_)\n        )",
        "begin_line": 424,
        "end_line": 436,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_set_change_dtype#438",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_set_change_dtype(self, mgr)",
        "snippet": "    def test_set_change_dtype(self, mgr):\n        mgr.set(\"baz\", np.zeros(N, dtype=bool))\n\n        mgr.set(\"baz\", np.repeat(\"foo\", N))\n        assert mgr.get(\"baz\").dtype == np.object_\n\n        mgr2 = mgr.consolidate()\n        mgr2.set(\"baz\", np.repeat(\"foo\", N))\n        assert mgr2.get(\"baz\").dtype == np.object_\n\n        mgr2.set(\"quux\", tm.randn(N).astype(int))\n        assert mgr2.get(\"quux\").dtype == np.int_\n\n        mgr2.set(\"quux\", tm.randn(N))\n        assert mgr2.get(\"quux\").dtype == np.float_",
        "begin_line": 438,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_set_change_dtype_slice#454",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_set_change_dtype_slice(self)",
        "snippet": "    def test_set_change_dtype_slice(self):  # GH8850\n        cols = MultiIndex.from_tuples([(\"1st\", \"a\"), (\"2nd\", \"b\"), (\"3rd\", \"c\")])\n        df = DataFrame([[1.0, 2, 3], [4.0, 5, 6]], columns=cols)\n        df[\"2nd\"] = df[\"2nd\"] * 2.0\n\n        blocks = df._to_dict_of_blocks()\n        assert sorted(blocks.keys()) == [\"float64\", \"int64\"]\n        tm.assert_frame_equal(\n            blocks[\"float64\"], DataFrame([[1.0, 4.0], [4.0, 10.0]], columns=cols[:2])\n        )\n        tm.assert_frame_equal(blocks[\"int64\"], DataFrame([[3], [6]], columns=cols[2:]))",
        "begin_line": 454,
        "end_line": 464,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_copy#466",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_copy(self, mgr)",
        "snippet": "    def test_copy(self, mgr):\n        cp = mgr.copy(deep=False)\n        for blk, cp_blk in zip(mgr.blocks, cp.blocks):\n\n            # view assertion\n            assert cp_blk.equals(blk)\n            if isinstance(blk.values, np.ndarray):\n                assert cp_blk.values.base is blk.values.base\n            else:\n                # DatetimeTZBlock has DatetimeIndex values\n                assert cp_blk.values._data.base is blk.values._data.base\n\n        cp = mgr.copy(deep=True)\n        for blk, cp_blk in zip(mgr.blocks, cp.blocks):\n\n            # copy assertion we either have a None for a base or in case of\n            # some blocks it is an array (e.g. datetimetz), but was copied\n            assert cp_blk.equals(blk)\n            if not isinstance(cp_blk.values, np.ndarray):\n                assert cp_blk.values._data.base is not blk.values._data.base\n            else:\n                assert cp_blk.values.base is None and blk.values.base is None",
        "begin_line": 466,
        "end_line": 487,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_sparse#489",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_sparse(self)",
        "snippet": "    def test_sparse(self):\n        mgr = create_mgr(\"a: sparse-1; b: sparse-2\")\n        # what to test here?\n        assert mgr.as_array().dtype == np.float64",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_sparse_mixed#494",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_sparse_mixed(self)",
        "snippet": "    def test_sparse_mixed(self):\n        mgr = create_mgr(\"a: sparse-1; b: sparse-2; c: f8\")\n        assert len(mgr.blocks) == 3\n        assert isinstance(mgr, BlockManager)",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_float#501",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_float(self)",
        "snippet": "    def test_as_array_float(self):\n        mgr = create_mgr(\"c: f4; d: f2; e: f8\")\n        assert mgr.as_array().dtype == np.float64\n\n        mgr = create_mgr(\"c: f4; d: f2\")\n        assert mgr.as_array().dtype == np.float32",
        "begin_line": 501,
        "end_line": 506,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_int_bool#508",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_int_bool(self)",
        "snippet": "    def test_as_array_int_bool(self):\n        mgr = create_mgr(\"a: bool-1; b: bool-2\")\n        assert mgr.as_array().dtype == np.bool_\n\n        mgr = create_mgr(\"a: i8-1; b: i8-2; c: i4; d: i2; e: u1\")\n        assert mgr.as_array().dtype == np.int64\n\n        mgr = create_mgr(\"c: i4; d: i2; e: u1\")\n        assert mgr.as_array().dtype == np.int32",
        "begin_line": 508,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_datetime#518",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_datetime(self)",
        "snippet": "    def test_as_array_datetime(self):\n        mgr = create_mgr(\"h: datetime-1; g: datetime-2\")\n        assert mgr.as_array().dtype == \"M8[ns]\"",
        "begin_line": 518,
        "end_line": 520,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_datetime_tz#522",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_as_array_datetime_tz(self)",
        "snippet": "    def test_as_array_datetime_tz(self):\n        mgr = create_mgr(\"h: M8[ns, US/Eastern]; g: M8[ns, CET]\")\n        assert mgr.get(\"h\").dtype == \"datetime64[ns, US/Eastern]\"\n        assert mgr.get(\"g\").dtype == \"datetime64[ns, CET]\"\n        assert mgr.as_array().dtype == \"object\"",
        "begin_line": 522,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_astype#529",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_astype(self, t)",
        "snippet": "    def test_astype(self, t):\n        # coerce all\n        mgr = create_mgr(\"c: f4; d: f2; e: f8\")\n\n        t = np.dtype(t)\n        tmgr = mgr.astype(t)\n        assert tmgr.get(\"c\").dtype.type == t\n        assert tmgr.get(\"d\").dtype.type == t\n        assert tmgr.get(\"e\").dtype.type == t\n\n        # mixed\n        mgr = create_mgr(\"a,b: object; c: bool; d: datetime; e: f4; f: f2; g: f8\")\n\n        t = np.dtype(t)\n        tmgr = mgr.astype(t, errors=\"ignore\")\n        assert tmgr.get(\"c\").dtype.type == t\n        assert tmgr.get(\"e\").dtype.type == t\n        assert tmgr.get(\"f\").dtype.type == t\n        assert tmgr.get(\"g\").dtype.type == t\n\n        assert tmgr.get(\"a\").dtype.type == np.object_\n        assert tmgr.get(\"b\").dtype.type == np.object_\n        if t != np.int64:\n            assert tmgr.get(\"d\").dtype.type == np.datetime64\n        else:\n            assert tmgr.get(\"d\").dtype.type == t",
        "begin_line": 529,
        "end_line": 554,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_convert#556",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_convert(self)",
        "snippet": "    def test_convert(self):\n        def _compare(old_mgr, new_mgr):\n            \"\"\" compare the blocks, numeric compare ==, object don't \"\"\"\n            old_blocks = set(old_mgr.blocks)\n            new_blocks = set(new_mgr.blocks)\n            assert len(old_blocks) == len(new_blocks)\n\n            # compare non-numeric\n            for b in old_blocks:\n                found = False\n                for nb in new_blocks:\n                    if (b.values == nb.values).all():\n                        found = True\n                        break\n                assert found\n\n            for b in new_blocks:\n                found = False\n                for ob in old_blocks:\n                    if (b.values == ob.values).all():\n                        found = True\n                        break\n                assert found\n\n        # noops\n        mgr = create_mgr(\"f: i8; g: f8\")\n        new_mgr = mgr.convert()\n        _compare(mgr, new_mgr)\n\n        # convert\n        mgr = create_mgr(\"a,b,foo: object; f: i8; g: f8\")\n        mgr.set(\"a\", np.array([\"1\"] * N, dtype=np.object_))\n        mgr.set(\"b\", np.array([\"2.\"] * N, dtype=np.object_))\n        mgr.set(\"foo\", np.array([\"foo.\"] * N, dtype=np.object_))\n        new_mgr = mgr.convert(numeric=True)\n        assert new_mgr.get(\"a\").dtype == np.int64\n        assert new_mgr.get(\"b\").dtype == np.float64\n        assert new_mgr.get(\"foo\").dtype == np.object_\n        assert new_mgr.get(\"f\").dtype == np.int64\n        assert new_mgr.get(\"g\").dtype == np.float64\n\n        mgr = create_mgr(\n            \"a,b,foo: object; f: i4; bool: bool; dt: datetime; i: i8; g: f8; h: f2\"\n        )\n        mgr.set(\"a\", np.array([\"1\"] * N, dtype=np.object_))\n        mgr.set(\"b\", np.array([\"2.\"] * N, dtype=np.object_))\n        mgr.set(\"foo\", np.array([\"foo.\"] * N, dtype=np.object_))\n        new_mgr = mgr.convert(numeric=True)\n        assert new_mgr.get(\"a\").dtype == np.int64\n        assert new_mgr.get(\"b\").dtype == np.float64\n        assert new_mgr.get(\"foo\").dtype == np.object_\n        assert new_mgr.get(\"f\").dtype == np.int32\n        assert new_mgr.get(\"bool\").dtype == np.bool_\n        assert new_mgr.get(\"dt\").dtype.type, np.datetime64\n        assert new_mgr.get(\"i\").dtype == np.int64\n        assert new_mgr.get(\"g\").dtype == np.float64\n        assert new_mgr.get(\"h\").dtype == np.float16",
        "begin_line": 556,
        "end_line": 612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager._compare#557",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager._compare(old_mgr, new_mgr)",
        "snippet": "        def _compare(old_mgr, new_mgr):\n            \"\"\" compare the blocks, numeric compare ==, object don't \"\"\"\n            old_blocks = set(old_mgr.blocks)\n            new_blocks = set(new_mgr.blocks)\n            assert len(old_blocks) == len(new_blocks)\n\n            # compare non-numeric\n            for b in old_blocks:\n                found = False\n                for nb in new_blocks:\n                    if (b.values == nb.values).all():\n                        found = True\n                        break\n                assert found\n\n            for b in new_blocks:\n                found = False\n                for ob in old_blocks:\n                    if (b.values == ob.values).all():\n                        found = True\n                        break\n                assert found",
        "begin_line": 557,
        "end_line": 578,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_interleave#614",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_interleave(self)",
        "snippet": "    def test_interleave(self):\n\n        # self\n        for dtype in [\"f8\", \"i8\", \"object\", \"bool\", \"complex\", \"M8[ns]\", \"m8[ns]\"]:\n            mgr = create_mgr(\"a: {0}\".format(dtype))\n            assert mgr.as_array().dtype == dtype\n            mgr = create_mgr(\"a: {0}; b: {0}\".format(dtype))\n            assert mgr.as_array().dtype == dtype\n\n        # will be converted according the actual dtype of the underlying\n        mgr = create_mgr(\"a: category\")\n        assert mgr.as_array().dtype == \"i8\"\n        mgr = create_mgr(\"a: category; b: category\")\n        assert mgr.as_array().dtype == \"i8\"\n        mgr = create_mgr(\"a: category; b: category2\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: category2\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: category2; b: category2\")\n        assert mgr.as_array().dtype == \"object\"\n\n        # combinations\n        mgr = create_mgr(\"a: f8\")\n        assert mgr.as_array().dtype == \"f8\"\n        mgr = create_mgr(\"a: f8; b: i8\")\n        assert mgr.as_array().dtype == \"f8\"\n        mgr = create_mgr(\"a: f4; b: i8\")\n        assert mgr.as_array().dtype == \"f8\"\n        mgr = create_mgr(\"a: f4; b: i8; d: object\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: bool; b: i8\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: complex\")\n        assert mgr.as_array().dtype == \"complex\"\n        mgr = create_mgr(\"a: f8; b: category\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: M8[ns]; b: category\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: M8[ns]; b: bool\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: M8[ns]; b: i8\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: m8[ns]; b: bool\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: m8[ns]; b: i8\")\n        assert mgr.as_array().dtype == \"object\"\n        mgr = create_mgr(\"a: M8[ns]; b: m8[ns]\")\n        assert mgr.as_array().dtype == \"object\"",
        "begin_line": 614,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_interleave_non_unique_cols#663",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_interleave_non_unique_cols(self)",
        "snippet": "    def test_interleave_non_unique_cols(self):\n        df = DataFrame(\n            [[pd.Timestamp(\"20130101\"), 3.5], [pd.Timestamp(\"20130102\"), 4.5]],\n            columns=[\"x\", \"x\"],\n            index=[1, 2],\n        )\n\n        df_unique = df.copy()\n        df_unique.columns = [\"x\", \"y\"]\n        assert df_unique.values.shape == df.values.shape\n        tm.assert_numpy_array_equal(df_unique.values[0], df.values[0])\n        tm.assert_numpy_array_equal(df_unique.values[1], df.values[1])",
        "begin_line": 663,
        "end_line": 674,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_consolidate#676",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_consolidate(self)",
        "snippet": "    def test_consolidate(self):\n        pass",
        "begin_line": 676,
        "end_line": 677,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_consolidate_ordering_issues#679",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_consolidate_ordering_issues(self, mgr)",
        "snippet": "    def test_consolidate_ordering_issues(self, mgr):\n        mgr.set(\"f\", tm.randn(N))\n        mgr.set(\"d\", tm.randn(N))\n        mgr.set(\"b\", tm.randn(N))\n        mgr.set(\"g\", tm.randn(N))\n        mgr.set(\"h\", tm.randn(N))\n\n        # we have datetime/tz blocks in mgr\n        cons = mgr.consolidate()\n        assert cons.nblocks == 4\n        cons = mgr.consolidate().get_numeric_data()\n        assert cons.nblocks == 1\n        assert isinstance(cons.blocks[0].mgr_locs, BlockPlacement)\n        tm.assert_numpy_array_equal(\n            cons.blocks[0].mgr_locs.as_array, np.arange(len(cons.items), dtype=np.int64)\n        )",
        "begin_line": 679,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_reindex_index#696",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_reindex_index(self)",
        "snippet": "    def test_reindex_index(self):\n        # TODO: should this be pytest.skip?\n        pass",
        "begin_line": 696,
        "end_line": 698,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_reindex_items#700",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_reindex_items(self)",
        "snippet": "    def test_reindex_items(self):\n        # mgr is not consolidated, f8 & f8-2 blocks\n        mgr = create_mgr(\"a: f8; b: i8; c: f8; d: i8; e: f8; f: bool; g: f8-2\")\n\n        reindexed = mgr.reindex_axis([\"g\", \"c\", \"a\", \"d\"], axis=0)\n        assert reindexed.nblocks == 2\n        tm.assert_index_equal(reindexed.items, pd.Index([\"g\", \"c\", \"a\", \"d\"]))\n        tm.assert_almost_equal(\n            mgr.get(\"g\").internal_values(), reindexed.get(\"g\").internal_values()\n        )\n        tm.assert_almost_equal(\n            mgr.get(\"c\").internal_values(), reindexed.get(\"c\").internal_values()\n        )\n        tm.assert_almost_equal(\n            mgr.get(\"a\").internal_values(), reindexed.get(\"a\").internal_values()\n        )\n        tm.assert_almost_equal(\n            mgr.get(\"d\").internal_values(), reindexed.get(\"d\").internal_values()\n        )",
        "begin_line": 700,
        "end_line": 718,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_get_numeric_data#720",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_get_numeric_data(self)",
        "snippet": "    def test_get_numeric_data(self):\n        mgr = create_mgr(\n            \"int: int; float: float; complex: complex;\"\n            \"str: object; bool: bool; obj: object; dt: datetime\",\n            item_shape=(3,),\n        )\n        mgr.set(\"obj\", np.array([1, 2, 3], dtype=np.object_))\n\n        numeric = mgr.get_numeric_data()\n        tm.assert_index_equal(\n            numeric.items, pd.Index([\"int\", \"float\", \"complex\", \"bool\"])\n        )\n        tm.assert_almost_equal(\n            mgr.get(\"float\").internal_values(), numeric.get(\"float\").internal_values()\n        )\n\n        # Check sharing\n        numeric.set(\"float\", np.array([100.0, 200.0, 300.0]))\n        tm.assert_almost_equal(\n            mgr.get(\"float\").internal_values(), np.array([100.0, 200.0, 300.0])\n        )\n\n        numeric2 = mgr.get_numeric_data(copy=True)\n        tm.assert_index_equal(\n            numeric.items, pd.Index([\"int\", \"float\", \"complex\", \"bool\"])\n        )\n        numeric2.set(\"float\", np.array([1000.0, 2000.0, 3000.0]))\n        tm.assert_almost_equal(\n            mgr.get(\"float\").internal_values(), np.array([100.0, 200.0, 300.0])\n        )",
        "begin_line": 720,
        "end_line": 749,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_get_bool_data#751",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_get_bool_data(self)",
        "snippet": "    def test_get_bool_data(self):\n        mgr = create_mgr(\n            \"int: int; float: float; complex: complex;\"\n            \"str: object; bool: bool; obj: object; dt: datetime\",\n            item_shape=(3,),\n        )\n        mgr.set(\"obj\", np.array([True, False, True], dtype=np.object_))\n\n        bools = mgr.get_bool_data()\n        tm.assert_index_equal(bools.items, pd.Index([\"bool\"]))\n        tm.assert_almost_equal(\n            mgr.get(\"bool\").internal_values(), bools.get(\"bool\").internal_values()\n        )\n\n        bools.set(\"bool\", np.array([True, False, True]))\n        tm.assert_numpy_array_equal(\n            mgr.get(\"bool\").internal_values(), np.array([True, False, True])\n        )\n\n        # Check sharing\n        bools2 = mgr.get_bool_data(copy=True)\n        bools2.set(\"bool\", np.array([False, True, False]))\n        tm.assert_numpy_array_equal(\n            mgr.get(\"bool\").internal_values(), np.array([True, False, True])\n        )",
        "begin_line": 751,
        "end_line": 775,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_unicode_repr_doesnt_raise#777",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_unicode_repr_doesnt_raise(self)",
        "snippet": "    def test_unicode_repr_doesnt_raise(self):\n        repr(create_mgr(\"b,\\u05d0: object\"))",
        "begin_line": 777,
        "end_line": 778,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_missing_unicode_key#780",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_missing_unicode_key(self)",
        "snippet": "    def test_missing_unicode_key(self):\n        df = DataFrame({\"a\": [1]})\n        try:\n            df.loc[:, \"\\u05d0\"]  # should not raise UnicodeEncodeError\n        except KeyError:\n            pass  # this is the expected exception",
        "begin_line": 780,
        "end_line": 785,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_equals#787",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_equals(self)",
        "snippet": "    def test_equals(self):\n        # unique items\n        bm1 = create_mgr(\"a,b,c: i8-1; d,e,f: i8-2\")\n        bm2 = BlockManager(bm1.blocks[::-1], bm1.axes)\n        assert bm1.equals(bm2)\n\n        bm1 = create_mgr(\"a,a,a: i8-1; b,b,b: i8-2\")\n        bm2 = BlockManager(bm1.blocks[::-1], bm1.axes)\n        assert bm1.equals(bm2)",
        "begin_line": 787,
        "end_line": 795,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_equals_block_order_different_dtypes#797",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_equals_block_order_different_dtypes(self)",
        "snippet": "    def test_equals_block_order_different_dtypes(self):\n        # GH 9330\n\n        mgr_strings = [\n            \"a:i8;b:f8\",  # basic case\n            \"a:i8;b:f8;c:c8;d:b\",  # many types\n            \"a:i8;e:dt;f:td;g:string\",  # more types\n            \"a:i8;b:category;c:category2;d:category2\",  # categories\n            \"c:sparse;d:sparse_na;b:f8\",  # sparse\n        ]\n\n        for mgr_string in mgr_strings:\n            bm = create_mgr(mgr_string)\n            block_perms = itertools.permutations(bm.blocks)\n            for bm_perm in block_perms:\n                bm_this = BlockManager(bm_perm, bm.axes)\n                assert bm.equals(bm_this)\n                assert bm_this.equals(bm)",
        "begin_line": 797,
        "end_line": 814,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_single_mgr_ctor#816",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_single_mgr_ctor(self)",
        "snippet": "    def test_single_mgr_ctor(self):\n        mgr = create_single_mgr(\"f8\", num_rows=5)\n        assert mgr.as_array().tolist() == [0.0, 1.0, 2.0, 3.0, 4.0]",
        "begin_line": 816,
        "end_line": 818,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockManager.test_validate_bool_args#820",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockManager",
        "signature": "pandas.tests.internals.test_internals.TestBlockManager.test_validate_bool_args(self)",
        "snippet": "    def test_validate_bool_args(self):\n        invalid_values = [1, \"True\", [1, 2, 3], 5.0]\n        bm1 = create_mgr(\"a,b,c: i8-1; d,e,f: i8-2\")\n\n        for value in invalid_values:\n            with pytest.raises(ValueError):\n                bm1.replace_list([1], [2], inplace=value)",
        "begin_line": 820,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.test_get_slice#855",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.test_get_slice(self)",
        "snippet": "    def test_get_slice(self):\n        def assert_slice_ok(mgr, axis, slobj):\n            mat = mgr.as_array()\n\n            # we maybe using an ndarray to test slicing and\n            # might not be the full length of the axis\n            if isinstance(slobj, np.ndarray):\n                ax = mgr.axes[axis]\n                if len(ax) and len(slobj) and len(slobj) != len(ax):\n                    slobj = np.concatenate(\n                        [slobj, np.zeros(len(ax) - len(slobj), dtype=bool)]\n                    )\n            sliced = mgr.get_slice(slobj, axis=axis)\n            mat_slobj = (slice(None),) * axis + (slobj,)\n            tm.assert_numpy_array_equal(\n                mat[mat_slobj], sliced.as_array(), check_dtype=False\n            )\n            tm.assert_index_equal(mgr.axes[axis][slobj], sliced.axes[axis])\n\n        for mgr in self.MANAGERS:\n            for ax in range(mgr.ndim):\n                # slice\n                assert_slice_ok(mgr, ax, slice(None))\n                assert_slice_ok(mgr, ax, slice(3))\n                assert_slice_ok(mgr, ax, slice(100))\n                assert_slice_ok(mgr, ax, slice(1, 4))\n                assert_slice_ok(mgr, ax, slice(3, 0, -2))\n\n                # boolean mask\n                assert_slice_ok(mgr, ax, np.array([], dtype=np.bool_))\n                assert_slice_ok(mgr, ax, np.ones(mgr.shape[ax], dtype=np.bool_))\n                assert_slice_ok(mgr, ax, np.zeros(mgr.shape[ax], dtype=np.bool_))\n\n                if mgr.shape[ax] >= 3:\n                    assert_slice_ok(mgr, ax, np.arange(mgr.shape[ax]) % 3 == 0)\n                    assert_slice_ok(\n                        mgr, ax, np.array([True, True, False], dtype=np.bool_)\n                    )\n\n                # fancy indexer\n                assert_slice_ok(mgr, ax, [])\n                assert_slice_ok(mgr, ax, list(range(mgr.shape[ax])))\n\n                if mgr.shape[ax] >= 3:\n                    assert_slice_ok(mgr, ax, [0, 1, 2])\n                    assert_slice_ok(mgr, ax, [-1, -2, -3])",
        "begin_line": 855,
        "end_line": 900,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.assert_slice_ok#856",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.assert_slice_ok(mgr, axis, slobj)",
        "snippet": "        def assert_slice_ok(mgr, axis, slobj):\n            mat = mgr.as_array()\n\n            # we maybe using an ndarray to test slicing and\n            # might not be the full length of the axis\n            if isinstance(slobj, np.ndarray):\n                ax = mgr.axes[axis]\n                if len(ax) and len(slobj) and len(slobj) != len(ax):\n                    slobj = np.concatenate(\n                        [slobj, np.zeros(len(ax) - len(slobj), dtype=bool)]\n                    )\n            sliced = mgr.get_slice(slobj, axis=axis)\n            mat_slobj = (slice(None),) * axis + (slobj,)\n            tm.assert_numpy_array_equal(\n                mat[mat_slobj], sliced.as_array(), check_dtype=False\n            )\n            tm.assert_index_equal(mgr.axes[axis][slobj], sliced.axes[axis])",
        "begin_line": 856,
        "end_line": 872,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.test_take#902",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.test_take(self)",
        "snippet": "    def test_take(self):\n        def assert_take_ok(mgr, axis, indexer):\n            mat = mgr.as_array()\n            taken = mgr.take(indexer, axis)\n            tm.assert_numpy_array_equal(\n                np.take(mat, indexer, axis), taken.as_array(), check_dtype=False\n            )\n            tm.assert_index_equal(mgr.axes[axis].take(indexer), taken.axes[axis])\n\n        for mgr in self.MANAGERS:\n            for ax in range(mgr.ndim):\n                # take/fancy indexer\n                assert_take_ok(mgr, ax, indexer=[])\n                assert_take_ok(mgr, ax, indexer=[0, 0, 0])\n                assert_take_ok(mgr, ax, indexer=list(range(mgr.shape[ax])))\n\n                if mgr.shape[ax] >= 3:\n                    assert_take_ok(mgr, ax, indexer=[0, 1, 2])\n                    assert_take_ok(mgr, ax, indexer=[-1, -2, -3])",
        "begin_line": 902,
        "end_line": 920,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.assert_take_ok#903",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.assert_take_ok(mgr, axis, indexer)",
        "snippet": "        def assert_take_ok(mgr, axis, indexer):\n            mat = mgr.as_array()\n            taken = mgr.take(indexer, axis)\n            tm.assert_numpy_array_equal(\n                np.take(mat, indexer, axis), taken.as_array(), check_dtype=False\n            )\n            tm.assert_index_equal(mgr.axes[axis].take(indexer), taken.axes[axis])",
        "begin_line": 903,
        "end_line": 909,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.test_reindex_axis#922",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.test_reindex_axis(self)",
        "snippet": "    def test_reindex_axis(self):\n        def assert_reindex_axis_is_ok(mgr, axis, new_labels, fill_value):\n            mat = mgr.as_array()\n            indexer = mgr.axes[axis].get_indexer_for(new_labels)\n\n            reindexed = mgr.reindex_axis(new_labels, axis, fill_value=fill_value)\n            tm.assert_numpy_array_equal(\n                algos.take_nd(mat, indexer, axis, fill_value=fill_value),\n                reindexed.as_array(),\n                check_dtype=False,\n            )\n            tm.assert_index_equal(reindexed.axes[axis], new_labels)\n\n        for mgr in self.MANAGERS:\n            for ax in range(mgr.ndim):\n                for fill_value in (None, np.nan, 100.0):\n                    assert_reindex_axis_is_ok(mgr, ax, pd.Index([]), fill_value)\n                    assert_reindex_axis_is_ok(mgr, ax, mgr.axes[ax], fill_value)\n                    assert_reindex_axis_is_ok(\n                        mgr, ax, mgr.axes[ax][[0, 0, 0]], fill_value\n                    )\n                    assert_reindex_axis_is_ok(\n                        mgr, ax, pd.Index([\"foo\", \"bar\", \"baz\"]), fill_value\n                    )\n                    assert_reindex_axis_is_ok(\n                        mgr, ax, pd.Index([\"foo\", mgr.axes[ax][0], \"baz\"]), fill_value\n                    )\n\n                    if mgr.shape[ax] >= 3:\n                        assert_reindex_axis_is_ok(\n                            mgr, ax, mgr.axes[ax][:-3], fill_value\n                        )\n                        assert_reindex_axis_is_ok(\n                            mgr, ax, mgr.axes[ax][-3::-1], fill_value\n                        )\n                        assert_reindex_axis_is_ok(\n                            mgr, ax, mgr.axes[ax][[0, 1, 2, 0, 1, 2]], fill_value\n                        )",
        "begin_line": 922,
        "end_line": 959,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.assert_reindex_axis_is_ok#923",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.assert_reindex_axis_is_ok(mgr, axis, new_labels, fill_value)",
        "snippet": "        def assert_reindex_axis_is_ok(mgr, axis, new_labels, fill_value):\n            mat = mgr.as_array()\n            indexer = mgr.axes[axis].get_indexer_for(new_labels)\n\n            reindexed = mgr.reindex_axis(new_labels, axis, fill_value=fill_value)\n            tm.assert_numpy_array_equal(\n                algos.take_nd(mat, indexer, axis, fill_value=fill_value),\n                reindexed.as_array(),\n                check_dtype=False,\n            )\n            tm.assert_index_equal(reindexed.axes[axis], new_labels)",
        "begin_line": 923,
        "end_line": 933,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.test_reindex_indexer#961",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.test_reindex_indexer(self)",
        "snippet": "    def test_reindex_indexer(self):\n        def assert_reindex_indexer_is_ok(mgr, axis, new_labels, indexer, fill_value):\n            mat = mgr.as_array()\n            reindexed_mat = algos.take_nd(mat, indexer, axis, fill_value=fill_value)\n            reindexed = mgr.reindex_indexer(\n                new_labels, indexer, axis, fill_value=fill_value\n            )\n            tm.assert_numpy_array_equal(\n                reindexed_mat, reindexed.as_array(), check_dtype=False\n            )\n            tm.assert_index_equal(reindexed.axes[axis], new_labels)\n\n        for mgr in self.MANAGERS:\n            for ax in range(mgr.ndim):\n                for fill_value in (None, np.nan, 100.0):\n                    assert_reindex_indexer_is_ok(mgr, ax, pd.Index([]), [], fill_value)\n                    assert_reindex_indexer_is_ok(\n                        mgr, ax, mgr.axes[ax], np.arange(mgr.shape[ax]), fill_value\n                    )\n                    assert_reindex_indexer_is_ok(\n                        mgr,\n                        ax,\n                        pd.Index([\"foo\"] * mgr.shape[ax]),\n                        np.arange(mgr.shape[ax]),\n                        fill_value,\n                    )\n                    assert_reindex_indexer_is_ok(\n                        mgr,\n                        ax,\n                        mgr.axes[ax][::-1],\n                        np.arange(mgr.shape[ax]),\n                        fill_value,\n                    )\n                    assert_reindex_indexer_is_ok(\n                        mgr,\n                        ax,\n                        mgr.axes[ax],\n                        np.arange(mgr.shape[ax])[::-1],\n                        fill_value,\n                    )\n                    assert_reindex_indexer_is_ok(\n                        mgr, ax, pd.Index([\"foo\", \"bar\", \"baz\"]), [0, 0, 0], fill_value\n                    )\n                    assert_reindex_indexer_is_ok(\n                        mgr,\n                        ax,\n                        pd.Index([\"foo\", \"bar\", \"baz\"]),\n                        [-1, 0, -1],\n                        fill_value,\n                    )\n                    assert_reindex_indexer_is_ok(\n                        mgr,\n                        ax,\n                        pd.Index([\"foo\", mgr.axes[ax][0], \"baz\"]),\n                        [-1, -1, -1],\n                        fill_value,\n                    )\n\n                    if mgr.shape[ax] >= 3:\n                        assert_reindex_indexer_is_ok(\n                            mgr,\n                            ax,\n                            pd.Index([\"foo\", \"bar\", \"baz\"]),\n                            [0, 1, 2],\n                            fill_value,\n                        )",
        "begin_line": 961,
        "end_line": 1026,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestIndexing.assert_reindex_indexer_is_ok#962",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestIndexing",
        "signature": "pandas.tests.internals.test_internals.TestIndexing.assert_reindex_indexer_is_ok(mgr, axis, new_labels, indexer, fill_value)",
        "snippet": "        def assert_reindex_indexer_is_ok(mgr, axis, new_labels, indexer, fill_value):\n            mat = mgr.as_array()\n            reindexed_mat = algos.take_nd(mat, indexer, axis, fill_value=fill_value)\n            reindexed = mgr.reindex_indexer(\n                new_labels, indexer, axis, fill_value=fill_value\n            )\n            tm.assert_numpy_array_equal(\n                reindexed_mat, reindexed.as_array(), check_dtype=False\n            )\n            tm.assert_index_equal(reindexed.axes[axis], new_labels)",
        "begin_line": 962,
        "end_line": 971,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_len#1035",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_len(self)",
        "snippet": "    def test_slice_len(self):\n        assert len(BlockPlacement(slice(0, 4))) == 4\n        assert len(BlockPlacement(slice(0, 4, 2))) == 2\n        assert len(BlockPlacement(slice(0, 3, 2))) == 2\n\n        assert len(BlockPlacement(slice(0, 1, 2))) == 1\n        assert len(BlockPlacement(slice(1, 0, -1))) == 1",
        "begin_line": 1035,
        "end_line": 1041,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_zero_step_raises#1043",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_zero_step_raises(self)",
        "snippet": "    def test_zero_step_raises(self):\n        with pytest.raises(ValueError):\n            BlockPlacement(slice(1, 1, 0))\n        with pytest.raises(ValueError):\n            BlockPlacement(slice(1, 2, 0))",
        "begin_line": 1043,
        "end_line": 1047,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_unbounded_slice_raises#1049",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_unbounded_slice_raises(self)",
        "snippet": "    def test_unbounded_slice_raises(self):\n        def assert_unbounded_slice_error(slc):\n            with pytest.raises(ValueError, match=\"unbounded slice\"):\n                BlockPlacement(slc)\n\n        assert_unbounded_slice_error(slice(None, None))\n        assert_unbounded_slice_error(slice(10, None))\n        assert_unbounded_slice_error(slice(None, None, -1))\n        assert_unbounded_slice_error(slice(None, 10, -1))\n\n        # These are \"unbounded\" because negative index will change depending on\n        # container shape.\n        assert_unbounded_slice_error(slice(-1, None))\n        assert_unbounded_slice_error(slice(None, -1))\n        assert_unbounded_slice_error(slice(-1, -1))\n        assert_unbounded_slice_error(slice(-1, None, -1))\n        assert_unbounded_slice_error(slice(None, -1, -1))\n        assert_unbounded_slice_error(slice(-1, -1, -1))",
        "begin_line": 1049,
        "end_line": 1066,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_unbounded_slice_error#1050",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_unbounded_slice_error(slc)",
        "snippet": "        def assert_unbounded_slice_error(slc):\n            with pytest.raises(ValueError, match=\"unbounded slice\"):\n                BlockPlacement(slc)",
        "begin_line": 1050,
        "end_line": 1052,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_not_slice_like_slices#1068",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_not_slice_like_slices(self)",
        "snippet": "    def test_not_slice_like_slices(self):\n        def assert_not_slice_like(slc):\n            assert not BlockPlacement(slc).is_slice_like\n\n        assert_not_slice_like(slice(0, 0))\n        assert_not_slice_like(slice(100, 0))\n\n        assert_not_slice_like(slice(100, 100, -1))\n        assert_not_slice_like(slice(0, 100, -1))\n\n        assert not BlockPlacement(slice(0, 0)).is_slice_like\n        assert not BlockPlacement(slice(100, 100)).is_slice_like",
        "begin_line": 1068,
        "end_line": 1079,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_not_slice_like#1069",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_not_slice_like(slc)",
        "snippet": "        def assert_not_slice_like(slc):\n            assert not BlockPlacement(slc).is_slice_like",
        "begin_line": 1069,
        "end_line": 1070,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_array_to_slice_conversion#1081",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_array_to_slice_conversion(self)",
        "snippet": "    def test_array_to_slice_conversion(self):\n        def assert_as_slice_equals(arr, slc):\n            assert BlockPlacement(arr).as_slice == slc\n\n        assert_as_slice_equals([0], slice(0, 1, 1))\n        assert_as_slice_equals([100], slice(100, 101, 1))\n\n        assert_as_slice_equals([0, 1, 2], slice(0, 3, 1))\n        assert_as_slice_equals([0, 5, 10], slice(0, 15, 5))\n        assert_as_slice_equals([0, 100], slice(0, 200, 100))\n\n        assert_as_slice_equals([2, 1], slice(2, 0, -1))",
        "begin_line": 1081,
        "end_line": 1092,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_as_slice_equals#1082",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_as_slice_equals(arr, slc)",
        "snippet": "        def assert_as_slice_equals(arr, slc):\n            assert BlockPlacement(arr).as_slice == slc",
        "begin_line": 1082,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_not_slice_like_arrays#1094",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_not_slice_like_arrays(self)",
        "snippet": "    def test_not_slice_like_arrays(self):\n        def assert_not_slice_like(arr):\n            assert not BlockPlacement(arr).is_slice_like\n\n        assert_not_slice_like([])\n        assert_not_slice_like([-1])\n        assert_not_slice_like([-1, -2, -3])\n        assert_not_slice_like([-10])\n        assert_not_slice_like([-1])\n        assert_not_slice_like([-1, 0, 1, 2])\n        assert_not_slice_like([-2, 0, 2, 4])\n        assert_not_slice_like([1, 0, -1])\n        assert_not_slice_like([1, 1, 1])",
        "begin_line": 1094,
        "end_line": 1106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_not_slice_like#1095",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_not_slice_like(arr)",
        "snippet": "        def assert_not_slice_like(arr):\n            assert not BlockPlacement(arr).is_slice_like",
        "begin_line": 1095,
        "end_line": 1096,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_iter#1108",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_iter(self)",
        "snippet": "    def test_slice_iter(self):\n        assert list(BlockPlacement(slice(0, 3))) == [0, 1, 2]\n        assert list(BlockPlacement(slice(0, 0))) == []\n        assert list(BlockPlacement(slice(3, 0))) == []",
        "begin_line": 1108,
        "end_line": 1111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_to_array_conversion#1113",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_slice_to_array_conversion(self)",
        "snippet": "    def test_slice_to_array_conversion(self):\n        def assert_as_array_equals(slc, asarray):\n            tm.assert_numpy_array_equal(\n                BlockPlacement(slc).as_array, np.asarray(asarray, dtype=np.int64)\n            )\n\n        assert_as_array_equals(slice(0, 3), [0, 1, 2])\n        assert_as_array_equals(slice(0, 0), [])\n        assert_as_array_equals(slice(3, 0), [])\n\n        assert_as_array_equals(slice(3, 0, -1), [3, 2, 1])",
        "begin_line": 1113,
        "end_line": 1123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_as_array_equals#1114",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_as_array_equals(slc, asarray)",
        "snippet": "        def assert_as_array_equals(slc, asarray):\n            tm.assert_numpy_array_equal(\n                BlockPlacement(slc).as_array, np.asarray(asarray, dtype=np.int64)\n            )",
        "begin_line": 1114,
        "end_line": 1117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_blockplacement_add#1125",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_blockplacement_add(self)",
        "snippet": "    def test_blockplacement_add(self):\n        bpl = BlockPlacement(slice(0, 5))\n        assert bpl.add(1).as_slice == slice(1, 6, 1)\n        assert bpl.add(np.arange(5)).as_slice == slice(0, 10, 2)\n        assert list(bpl.add(np.arange(5, 0, -1))) == [5, 5, 5, 5, 5]",
        "begin_line": 1125,
        "end_line": 1129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.test_blockplacement_add_int#1131",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.test_blockplacement_add_int(self)",
        "snippet": "    def test_blockplacement_add_int(self):\n        def assert_add_equals(val, inc, result):\n            assert list(BlockPlacement(val).add(inc)) == result\n\n        assert_add_equals(slice(0, 0), 0, [])\n        assert_add_equals(slice(1, 4), 0, [1, 2, 3])\n        assert_add_equals(slice(3, 0, -1), 0, [3, 2, 1])\n        assert_add_equals([1, 2, 4], 0, [1, 2, 4])\n\n        assert_add_equals(slice(0, 0), 10, [])\n        assert_add_equals(slice(1, 4), 10, [11, 12, 13])\n        assert_add_equals(slice(3, 0, -1), 10, [13, 12, 11])\n        assert_add_equals([1, 2, 4], 10, [11, 12, 14])\n\n        assert_add_equals(slice(0, 0), -1, [])\n        assert_add_equals(slice(1, 4), -1, [0, 1, 2])\n        assert_add_equals([1, 2, 4], -1, [0, 1, 3])\n\n        with pytest.raises(ValueError):\n            BlockPlacement(slice(1, 4)).add(-10)\n        with pytest.raises(ValueError):\n            BlockPlacement([1, 2, 4]).add(-10)",
        "begin_line": 1131,
        "end_line": 1152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_add_equals#1132",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestBlockPlacement",
        "signature": "pandas.tests.internals.test_internals.TestBlockPlacement.assert_add_equals(val, inc, result)",
        "snippet": "        def assert_add_equals(val, inc, result):\n            assert list(BlockPlacement(val).add(inc)) == result",
        "begin_line": 1132,
        "end_line": 1133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.__init__#1156",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.__init__(self, value, dtype)",
        "snippet": "    def __init__(self, value, dtype):\n        self.value = value\n        self.dtype = np.dtype(dtype)",
        "begin_line": 1156,
        "end_line": 1158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.__array__#1160",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.__array__(self)",
        "snippet": "    def __array__(self):\n        return np.array(self.value, dtype=self.dtype)",
        "begin_line": 1160,
        "end_line": 1161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.__str__#1163",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        return \"DummyElement({}, {})\".format(self.value, self.dtype)",
        "begin_line": 1163,
        "end_line": 1164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.__repr__#1166",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        return str(self)",
        "begin_line": 1166,
        "end_line": 1167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.astype#1169",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.astype(self, dtype, copy=False)",
        "snippet": "    def astype(self, dtype, copy=False):\n        self.dtype = dtype\n        return self",
        "begin_line": 1169,
        "end_line": 1171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.view#1173",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.view(self, dtype)",
        "snippet": "    def view(self, dtype):\n        return type(self)(self.value.view(dtype), dtype)",
        "begin_line": 1173,
        "end_line": 1174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.DummyElement.any#1176",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.DummyElement",
        "signature": "pandas.tests.internals.test_internals.DummyElement.any(self, axis=None)",
        "snippet": "    def any(self, axis=None):\n        return bool(self.value)",
        "begin_line": 1176,
        "end_line": 1177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.TestCanHoldElement.test_binop_other#1206",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals.TestCanHoldElement",
        "signature": "pandas.tests.internals.test_internals.TestCanHoldElement.test_binop_other(self, op, value, dtype)",
        "snippet": "    def test_binop_other(self, op, value, dtype):\n        skip = {\n            (operator.add, \"bool\"),\n            (operator.sub, \"bool\"),\n            (operator.mul, \"bool\"),\n            (operator.truediv, \"bool\"),\n            (operator.mod, \"i8\"),\n            (operator.mod, \"complex128\"),\n            (operator.pow, \"bool\"),\n        }\n        if (op, dtype) in skip:\n            pytest.skip(\"Invalid combination {},{}\".format(op, dtype))\n\n        e = DummyElement(value, dtype)\n        s = pd.DataFrame({\"A\": [e.value, e.value]}, dtype=e.dtype)\n\n        invalid = {\n            (operator.pow, \"<M8[ns]\"),\n            (operator.mod, \"<M8[ns]\"),\n            (operator.truediv, \"<M8[ns]\"),\n            (operator.mul, \"<M8[ns]\"),\n            (operator.add, \"<M8[ns]\"),\n            (operator.pow, \"<m8[ns]\"),\n            (operator.mul, \"<m8[ns]\"),\n        }\n\n        if (op, dtype) in invalid:\n            with pytest.raises(TypeError):\n                op(s, e.value)\n        else:\n            # FIXME: Since dispatching to Series, this test no longer\n            # asserts anything meaningful\n            result = op(s, e.value).dtypes\n            expected = op(s, value).dtypes\n            tm.assert_series_equal(result, expected)",
        "begin_line": 1206,
        "end_line": 1240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.test_holder#1253",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.test_holder(typestr, holder)",
        "snippet": "def test_holder(typestr, holder):\n    blk = create_block(typestr, [1])\n    assert blk._holder is holder",
        "begin_line": 1253,
        "end_line": 1255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.test_deprecated_fastpath#1258",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.test_deprecated_fastpath()",
        "snippet": "def test_deprecated_fastpath():\n    # GH#19265\n    values = np.random.rand(3, 3)\n    with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n        make_block(values, placement=np.arange(3), fastpath=True)",
        "begin_line": 1258,
        "end_line": 1262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.test_validate_ndim#1265",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.test_validate_ndim()",
        "snippet": "def test_validate_ndim():\n    values = np.array([1.0, 2.0])\n    placement = slice(2)\n    msg = r\"Wrong number of dimensions. values.ndim != ndim \\[1 != 2\\]\"\n\n    with pytest.raises(ValueError, match=msg):\n        make_block(values, placement, ndim=2)",
        "begin_line": 1265,
        "end_line": 1271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.test_block_shape#1274",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.test_block_shape()",
        "snippet": "def test_block_shape():\n    idx = pd.Index([0, 1, 2, 3, 4])\n    a = pd.Series([1, 2, 3]).reindex(idx)\n    b = pd.Series(pd.Categorical([1, 2, 3])).reindex(idx)\n\n    assert a._data.blocks[0].mgr_locs.indexer == b._data.blocks[0].mgr_locs.indexer",
        "begin_line": 1274,
        "end_line": 1279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.test_make_block_no_pandas_array#1282",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.test_make_block_no_pandas_array()",
        "snippet": "def test_make_block_no_pandas_array():\n    # https://github.com/pandas-dev/pandas/pull/24866\n    arr = pd.array([1, 2])\n\n    # PandasArray, no dtype\n    result = make_block(arr, slice(len(arr)))\n    assert result.is_integer is True\n    assert result.is_extension is False\n\n    # PandasArray, PandasDtype\n    result = make_block(arr, slice(len(arr)), dtype=arr.dtype)\n    assert result.is_integer is True\n    assert result.is_extension is False\n\n    # ndarray, PandasDtype\n    result = make_block(arr.to_numpy(), slice(len(arr)), dtype=arr.dtype)\n    assert result.is_integer is True\n    assert result.is_extension is False",
        "begin_line": 1282,
        "end_line": 1299,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.internals.test_internals.test_dataframe_not_equal#1302",
        "src_path": "pandas/tests/internals/test_internals.py",
        "class_name": "pandas.tests.internals.test_internals",
        "signature": "pandas.tests.internals.test_internals.test_dataframe_not_equal()",
        "snippet": "def test_dataframe_not_equal():\n    # see GH28839\n    df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [\"s\", \"d\"]})\n    df2 = pd.DataFrame({\"a\": [\"s\", \"d\"], \"b\": [1, 2]})\n    assert df1.equals(df2) is False",
        "begin_line": 1302,
        "end_line": 1306,
        "comment": "",
        "is_bug": false
    }
]