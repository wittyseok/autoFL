[
    {
        "name": "tornado.test.web_test.wsgi_safe#36",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test",
        "signature": "tornado.test.web_test.wsgi_safe(cls)",
        "snippet": "def wsgi_safe(cls):\n    wsgi_safe_tests.append(cls)\n    return cls",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WebTestCase.get_app#47",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WebTestCase",
        "signature": "tornado.test.web_test.WebTestCase.get_app(self)",
        "snippet": "    def get_app(self):\n        self.app = Application(self.get_handlers(), **self.get_app_kwargs())\n        return self.app",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WebTestCase.get_handlers#51",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WebTestCase",
        "signature": "tornado.test.web_test.WebTestCase.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        raise NotImplementedError()",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WebTestCase.get_app_kwargs#54",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WebTestCase",
        "signature": "tornado.test.web_test.WebTestCase.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return {}",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SimpleHandlerTestCase.get_handlers#63",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SimpleHandlerTestCase",
        "signature": "tornado.test.web_test.SimpleHandlerTestCase.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [('/', self.Handler)]",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HelloHandler.get#68",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HelloHandler",
        "signature": "tornado.test.web_test.HelloHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('hello')",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTestRequestHandler.__init__#74",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTestRequestHandler",
        "signature": "tornado.test.web_test.CookieTestRequestHandler.__init__(self, cookie_secret='0123456789', key_version=None)",
        "snippet": "    def __init__(self, cookie_secret='0123456789', key_version=None):\n        # don't call super.__init__\n        self._cookies = {}\n        if key_version is None:\n            self.application = ObjectDict(settings=dict(cookie_secret=cookie_secret))\n        else:\n            self.application = ObjectDict(settings=dict(cookie_secret=cookie_secret,\n                                                        key_version=key_version))",
        "begin_line": 74,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTestRequestHandler.get_cookie#83",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTestRequestHandler",
        "signature": "tornado.test.web_test.CookieTestRequestHandler.get_cookie(self, name)",
        "snippet": "    def get_cookie(self, name):\n        return self._cookies.get(name)",
        "begin_line": 83,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTestRequestHandler.set_cookie#86",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTestRequestHandler",
        "signature": "tornado.test.web_test.CookieTestRequestHandler.set_cookie(self, name, value, expires_days=None)",
        "snippet": "    def set_cookie(self, name, value, expires_days=None):\n        self._cookies[name] = value",
        "begin_line": 86,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV1Test.test_round_trip#92",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV1Test",
        "signature": "tornado.test.web_test.SecureCookieV1Test.test_round_trip(self)",
        "snippet": "    def test_round_trip(self):\n        handler = CookieTestRequestHandler()\n        handler.set_secure_cookie('foo', b'bar', version=1)\n        self.assertEqual(handler.get_secure_cookie('foo', min_version=1),\n                         b'bar')",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV1Test.test_cookie_tampering_future_timestamp#98",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV1Test",
        "signature": "tornado.test.web_test.SecureCookieV1Test.test_cookie_tampering_future_timestamp(self)",
        "snippet": "    def test_cookie_tampering_future_timestamp(self):\n        handler = CookieTestRequestHandler()\n        # this string base64-encodes to '12345678'\n        handler.set_secure_cookie('foo', binascii.a2b_hex(b'd76df8e7aefc'),\n                                  version=1)\n        cookie = handler._cookies['foo']\n        match = re.match(br'12345678\\|([0-9]+)\\|([0-9a-f]+)', cookie)\n        self.assertTrue(match)\n        timestamp = match.group(1)\n        sig = match.group(2)\n        self.assertEqual(\n            _create_signature_v1(handler.application.settings[\"cookie_secret\"],\n                                 'foo', '12345678', timestamp),\n            sig)\n        # shifting digits from payload to timestamp doesn't alter signature\n        # (this is not desirable behavior, just confirming that that's how it\n        # works)\n        self.assertEqual(\n            _create_signature_v1(handler.application.settings[\"cookie_secret\"],\n                                 'foo', '1234', b'5678' + timestamp),\n            sig)\n        # tamper with the cookie\n        handler._cookies['foo'] = utf8('1234|5678%s|%s' % (\n            to_basestring(timestamp), to_basestring(sig)))\n        # it gets rejected\n        with ExpectLog(gen_log, \"Cookie timestamp in future\"):\n            self.assertTrue(\n                handler.get_secure_cookie('foo', min_version=1) is None)",
        "begin_line": 98,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV1Test.test_arbitrary_bytes#127",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV1Test",
        "signature": "tornado.test.web_test.SecureCookieV1Test.test_arbitrary_bytes(self)",
        "snippet": "    def test_arbitrary_bytes(self):\n        # Secure cookies accept arbitrary data (which is base64 encoded).\n        # Note that normal cookies accept only a subset of ascii.\n        handler = CookieTestRequestHandler()\n        handler.set_secure_cookie('foo', b'\\xe9', version=1)\n        self.assertEqual(handler.get_secure_cookie('foo', min_version=1), b'\\xe9')",
        "begin_line": 127,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_round_trip#142",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_round_trip(self)",
        "snippet": "    def test_round_trip(self):\n        handler = CookieTestRequestHandler()\n        handler.set_secure_cookie('foo', b'bar', version=2)\n        self.assertEqual(handler.get_secure_cookie('foo', min_version=2), b'bar')",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip#147",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip(self)",
        "snippet": "    def test_key_version_roundtrip(self):\n        handler = CookieTestRequestHandler(cookie_secret=self.KEY_VERSIONS,\n                                           key_version=0)\n        handler.set_secure_cookie('foo', b'bar')\n        self.assertEqual(handler.get_secure_cookie('foo'), b'bar')",
        "begin_line": 147,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip_differing_version#153",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_roundtrip_differing_version(self)",
        "snippet": "    def test_key_version_roundtrip_differing_version(self):\n        handler = CookieTestRequestHandler(cookie_secret=self.KEY_VERSIONS,\n                                           key_version=1)\n        handler.set_secure_cookie('foo', b'bar')\n        self.assertEqual(handler.get_secure_cookie('foo'), b'bar')",
        "begin_line": 153,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_increment_version#159",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_increment_version(self)",
        "snippet": "    def test_key_version_increment_version(self):\n        handler = CookieTestRequestHandler(cookie_secret=self.KEY_VERSIONS,\n                                           key_version=0)\n        handler.set_secure_cookie('foo', b'bar')\n        new_handler = CookieTestRequestHandler(cookie_secret=self.KEY_VERSIONS,\n                                               key_version=1)\n        new_handler._cookies = handler._cookies\n        self.assertEqual(new_handler.get_secure_cookie('foo'), b'bar')",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SecureCookieV2Test.test_key_version_invalidate_version#168",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SecureCookieV2Test",
        "signature": "tornado.test.web_test.SecureCookieV2Test.test_key_version_invalidate_version(self)",
        "snippet": "    def test_key_version_invalidate_version(self):\n        handler = CookieTestRequestHandler(cookie_secret=self.KEY_VERSIONS,\n                                           key_version=0)\n        handler.set_secure_cookie('foo', b'bar')\n        new_key_versions = self.KEY_VERSIONS.copy()\n        new_key_versions.pop(0)\n        new_handler = CookieTestRequestHandler(cookie_secret=new_key_versions,\n                                               key_version=1)\n        new_handler._cookies = handler._cookies\n        self.assertEqual(new_handler.get_secure_cookie('foo'), None)",
        "begin_line": 168,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieHandler",
        "signature": "tornado.test.web_test.SetCookieHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieHandler.get#183",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieHandler",
        "signature": "tornado.test.web_test.SetCookieHandler.get(self)",
        "snippet": "            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")",
        "begin_line": 183,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCookieHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCookieHandler",
        "signature": "tornado.test.web_test.GetCookieHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCookieHandler.get#191",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCookieHandler",
        "signature": "tornado.test.web_test.GetCookieHandler.get(self)",
        "snippet": "            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))",
        "begin_line": 191,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieDomainHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieDomainHandler",
        "signature": "tornado.test.web_test.SetCookieDomainHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieDomainHandler.get#195",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieDomainHandler",
        "signature": "tornado.test.web_test.SetCookieDomainHandler.get(self)",
        "snippet": "            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))",
        "begin_line": 195,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieSpecialCharHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieSpecialCharHandler",
        "signature": "tornado.test.web_test.SetCookieSpecialCharHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieSpecialCharHandler.get#202",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieSpecialCharHandler",
        "signature": "tornado.test.web_test.SetCookieSpecialCharHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieOverwriteHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieOverwriteHandler",
        "signature": "tornado.test.web_test.SetCookieOverwriteHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieOverwriteHandler.get#208",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieOverwriteHandler",
        "signature": "tornado.test.web_test.SetCookieOverwriteHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")",
        "begin_line": 208,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieMaxAgeHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieMaxAgeHandler",
        "signature": "tornado.test.web_test.SetCookieMaxAgeHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieMaxAgeHandler.get#216",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieMaxAgeHandler",
        "signature": "tornado.test.web_test.SetCookieMaxAgeHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)",
        "begin_line": 216,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieExpiresDaysHandler.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieExpiresDaysHandler",
        "signature": "tornado.test.web_test.SetCookieExpiresDaysHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieExpiresDaysHandler.get#220",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieExpiresDaysHandler",
        "signature": "tornado.test.web_test.SetCookieExpiresDaysHandler.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)",
        "begin_line": 220,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieFalsyFlags.get_handlers#181",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieFalsyFlags",
        "signature": "tornado.test.web_test.SetCookieFalsyFlags.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class SetCookieHandler(RequestHandler):\n            def get(self):\n                # Try setting cookies with different argument types\n                # to ensure that everything gets encoded correctly\n                self.set_cookie(\"str\", \"asdf\")\n                self.set_cookie(\"unicode\", u(\"qwer\"))\n                self.set_cookie(\"bytes\", b\"zxcv\")\n\n        class GetCookieHandler(RequestHandler):\n            def get(self):\n                self.write(self.get_cookie(\"foo\", \"default\"))\n\n        class SetCookieDomainHandler(RequestHandler):\n            def get(self):\n                # unicode domain and path arguments shouldn't break things\n                # either (see bug #285)\n                self.set_cookie(\"unicode_args\", \"blah\", domain=u(\"foo.com\"),\n                                path=u(\"/foo\"))\n\n        class SetCookieSpecialCharHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"equals\", \"a=b\")\n                self.set_cookie(\"semicolon\", \"a;b\")\n                self.set_cookie(\"quote\", 'a\"b')\n\n        class SetCookieOverwriteHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"b\", domain=\"example.com\")\n                self.set_cookie(\"c\", \"d\", domain=\"example.com\")\n                # A second call with the same name clobbers the first.\n                # Attributes from the first call are not carried over.\n                self.set_cookie(\"a\", \"e\")\n\n        class SetCookieMaxAgeHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", max_age=10)\n\n        class SetCookieExpiresDaysHandler(RequestHandler):\n            def get(self):\n                self.set_cookie(\"foo\", \"bar\", expires_days=10)\n\n        class SetCookieFalsyFlags(RequestHandler):\n            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)\n\n        return [(\"/set\", SetCookieHandler),\n                (\"/get\", GetCookieHandler),\n                (\"/set_domain\", SetCookieDomainHandler),\n                (\"/special_char\", SetCookieSpecialCharHandler),\n                (\"/set_overwrite\", SetCookieOverwriteHandler),\n                (\"/set_max_age\", SetCookieMaxAgeHandler),\n                (\"/set_expires_days\", SetCookieExpiresDaysHandler),\n                (\"/set_falsy_flags\", SetCookieFalsyFlags)\n                ]",
        "begin_line": 181,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetCookieFalsyFlags.get#224",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetCookieFalsyFlags",
        "signature": "tornado.test.web_test.SetCookieFalsyFlags.get(self)",
        "snippet": "            def get(self):\n                self.set_cookie(\"a\", \"1\", secure=True)\n                self.set_cookie(\"b\", \"1\", secure=False)\n                self.set_cookie(\"c\", \"1\", httponly=True)\n                self.set_cookie(\"d\", \"1\", httponly=False)",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie#240",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie(self)",
        "snippet": "    def test_set_cookie(self):\n        response = self.fetch(\"/set\")\n        self.assertEqual(sorted(response.headers.get_list(\"Set-Cookie\")),\n                         [\"bytes=zxcv; Path=/\",\n                          \"str=asdf; Path=/\",\n                          \"unicode=qwer; Path=/\",\n                          ])",
        "begin_line": 240,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_get_cookie#248",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_get_cookie(self)",
        "snippet": "    def test_get_cookie(self):\n        response = self.fetch(\"/get\", headers={\"Cookie\": \"foo=bar\"})\n        self.assertEqual(response.body, b\"bar\")\n\n        response = self.fetch(\"/get\", headers={\"Cookie\": 'foo=\"bar\"'})\n        self.assertEqual(response.body, b\"bar\")\n\n        response = self.fetch(\"/get\", headers={\"Cookie\": \"/=exception;\"})\n        self.assertEqual(response.body, b\"default\")",
        "begin_line": 248,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_domain#258",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_domain(self)",
        "snippet": "    def test_set_cookie_domain(self):\n        response = self.fetch(\"/set_domain\")\n        self.assertEqual(response.headers.get_list(\"Set-Cookie\"),\n                         [\"unicode_args=blah; Domain=foo.com; Path=/foo\"])",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_cookie_special_char#263",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_cookie_special_char(self)",
        "snippet": "    def test_cookie_special_char(self):\n        response = self.fetch(\"/special_char\")\n        headers = sorted(response.headers.get_list(\"Set-Cookie\"))\n        self.assertEqual(len(headers), 3)\n        self.assertEqual(headers[0], 'equals=\"a=b\"; Path=/')\n        self.assertEqual(headers[1], 'quote=\"a\\\\\"b\"; Path=/')\n        # python 2.7 octal-escapes the semicolon; older versions leave it alone\n        self.assertTrue(headers[2] in ('semicolon=\"a;b\"; Path=/',\n                                       'semicolon=\"a\\\\073b\"; Path=/'),\n                        headers[2])\n\n        data = [('foo=a=b', 'a=b'),\n                ('foo=\"a=b\"', 'a=b'),\n                ('foo=\"a;b\"', 'a;b'),\n                # ('foo=a\\\\073b', 'a;b'),  # even encoded, \";\" is a delimiter\n                ('foo=\"a\\\\073b\"', 'a;b'),\n                ('foo=\"a\\\\\"b\"', 'a\"b'),\n                ]\n        for header, expected in data:\n            logging.debug(\"trying %r\", header)\n            response = self.fetch(\"/get\", headers={\"Cookie\": header})\n            self.assertEqual(response.body, utf8(expected))",
        "begin_line": 263,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_overwrite#286",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_overwrite(self)",
        "snippet": "    def test_set_cookie_overwrite(self):\n        response = self.fetch(\"/set_overwrite\")\n        headers = response.headers.get_list(\"Set-Cookie\")\n        self.assertEqual(sorted(headers),\n                         [\"a=e; Path=/\", \"c=d; Domain=example.com; Path=/\"])",
        "begin_line": 286,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_max_age#292",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_max_age(self)",
        "snippet": "    def test_set_cookie_max_age(self):\n        response = self.fetch(\"/set_max_age\")\n        headers = response.headers.get_list(\"Set-Cookie\")\n        self.assertEqual(sorted(headers),\n                         [\"foo=bar; Max-Age=10; Path=/\"])",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_expires_days#298",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_expires_days(self)",
        "snippet": "    def test_set_cookie_expires_days(self):\n        response = self.fetch(\"/set_expires_days\")\n        header = response.headers.get(\"Set-Cookie\")\n        match = re.match(\"foo=bar; expires=(?P<expires>.+); Path=/\", header)\n        self.assertIsNotNone(match)\n\n        expires = datetime.datetime.utcnow() + datetime.timedelta(days=10)\n        header_expires = datetime.datetime(\n            *email.utils.parsedate(match.groupdict()[\"expires\"])[:6])\n        self.assertTrue(abs(timedelta_to_seconds(expires - header_expires)) < 10)",
        "begin_line": 298,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CookieTest.test_set_cookie_false_flags#309",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CookieTest",
        "signature": "tornado.test.web_test.CookieTest.test_set_cookie_false_flags(self)",
        "snippet": "    def test_set_cookie_false_flags(self):\n        response = self.fetch(\"/set_falsy_flags\")\n        headers = sorted(response.headers.get_list(\"Set-Cookie\"))\n        # The secure and httponly headers are capitalized in py35 and\n        # lowercase in older versions.\n        self.assertEqual(headers[0].lower(), 'a=1; path=/; secure')\n        self.assertEqual(headers[1].lower(), 'b=1; path=/')\n        self.assertEqual(headers[2].lower(), 'c=1; httponly; path=/')\n        self.assertEqual(headers[3].lower(), 'd=1; path=/')",
        "begin_line": 309,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectRequestHandler.initialize#321",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectRequestHandler",
        "signature": "tornado.test.web_test.AuthRedirectRequestHandler.initialize(self, login_url)",
        "snippet": "    def initialize(self, login_url):\n        self.login_url = login_url",
        "begin_line": 321,
        "end_line": 322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectRequestHandler.get_login_url#324",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectRequestHandler",
        "signature": "tornado.test.web_test.AuthRedirectRequestHandler.get_login_url(self)",
        "snippet": "    def get_login_url(self):\n        return self.login_url",
        "begin_line": 324,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectRequestHandler.get#328",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectRequestHandler",
        "signature": "tornado.test.web_test.AuthRedirectRequestHandler.get(self)",
        "snippet": "    def get(self):\n        # we'll never actually get here because the test doesn't follow redirects\n        self.send_error(500)",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectTest.get_handlers#334",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectTest",
        "signature": "tornado.test.web_test.AuthRedirectTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [('/relative', AuthRedirectRequestHandler,\n                 dict(login_url='/login')),\n                ('/absolute', AuthRedirectRequestHandler,\n                 dict(login_url='http://example.com/login'))]",
        "begin_line": 334,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect#340",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectTest",
        "signature": "tornado.test.web_test.AuthRedirectTest.test_relative_auth_redirect(self)",
        "snippet": "    def test_relative_auth_redirect(self):\n        self.http_client.fetch(self.get_url('/relative'), self.stop,\n                               follow_redirects=False)\n        response = self.wait()\n        self.assertEqual(response.code, 302)\n        self.assertEqual(response.headers['Location'], '/login?next=%2Frelative')",
        "begin_line": 340,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect#347",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AuthRedirectTest",
        "signature": "tornado.test.web_test.AuthRedirectTest.test_absolute_auth_redirect(self)",
        "snippet": "    def test_absolute_auth_redirect(self):\n        self.http_client.fetch(self.get_url('/absolute'), self.stop,\n                               follow_redirects=False)\n        response = self.wait()\n        self.assertEqual(response.code, 302)\n        self.assertTrue(re.match(\n            'http://example.com/login\\?next=http%3A%2F%2Flocalhost%3A[0-9]+%2Fabsolute',\n            response.headers['Location']), response.headers['Location'])",
        "begin_line": 347,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseHandler.initialize#358",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseHandler",
        "signature": "tornado.test.web_test.ConnectionCloseHandler.initialize(self, test)",
        "snippet": "    def initialize(self, test):\n        self.test = test",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseHandler.get#362",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseHandler",
        "signature": "tornado.test.web_test.ConnectionCloseHandler.get(self)",
        "snippet": "    def get(self):\n        self.test.on_handler_waiting()",
        "begin_line": 362,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseHandler.on_connection_close#365",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseHandler",
        "signature": "tornado.test.web_test.ConnectionCloseHandler.on_connection_close(self)",
        "snippet": "    def on_connection_close(self):\n        self.test.on_connection_close()",
        "begin_line": 365,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.get_handlers#370",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [('/', ConnectionCloseHandler, dict(test=self))]",
        "begin_line": 370,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.test_connection_close#373",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.test_connection_close(self)",
        "snippet": "    def test_connection_close(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        s.connect((\"127.0.0.1\", self.get_http_port()))\n        self.stream = IOStream(s, io_loop=self.io_loop)\n        self.stream.write(b\"GET / HTTP/1.0\\r\\n\\r\\n\")\n        self.wait()",
        "begin_line": 373,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.on_handler_waiting#380",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.on_handler_waiting(self)",
        "snippet": "    def on_handler_waiting(self):\n        logging.debug('handler waiting')\n        self.stream.close()",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ConnectionCloseTest.on_connection_close#384",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ConnectionCloseTest",
        "signature": "tornado.test.web_test.ConnectionCloseTest.on_connection_close(self)",
        "snippet": "    def on_connection_close(self):\n        logging.debug('connection closed')\n        self.stop()",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EchoHandler.get#390",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EchoHandler",
        "signature": "tornado.test.web_test.EchoHandler.get(self, *path_args)",
        "snippet": "    def get(self, *path_args):\n        # Type checks: web.py interfaces convert argument values to\n        # unicode strings (by default, but see also decode_argument).\n        # In httpserver.py (i.e. self.request.arguments), they're left\n        # as bytes.  Keys are always native strings.\n        for key in self.request.arguments:\n            if type(key) != str:\n                raise Exception(\"incorrect type for key: %r\" % type(key))\n            for value in self.request.arguments[key]:\n                if type(value) != bytes:\n                    raise Exception(\"incorrect type for value: %r\" %\n                                    type(value))\n            for value in self.get_arguments(key):\n                if type(value) != unicode_type:\n                    raise Exception(\"incorrect type for value: %r\" %\n                                    type(value))\n        for arg in path_args:\n            if type(arg) != unicode_type:\n                raise Exception(\"incorrect type for path arg: %r\" % type(arg))\n        self.write(dict(path=self.request.path,\n                        path_args=path_args,\n                        args=recursive_unicode(self.request.arguments)))",
        "begin_line": 390,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.get_handlers#415",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/group/(.*)\", EchoHandler),\n                (\"/slashes/([^/]*)/([^/]*)\", EchoHandler),\n                ]",
        "begin_line": 415,
        "end_line": 418,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.fetch_json#420",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.fetch_json(self, path)",
        "snippet": "    def fetch_json(self, path):\n        return json_decode(self.fetch(path).body)",
        "begin_line": 420,
        "end_line": 421,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_group_question_mark#423",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_group_question_mark(self)",
        "snippet": "    def test_group_question_mark(self):\n        # Ensure that url-encoded question marks are handled properly\n        self.assertEqual(self.fetch_json('/group/%3F'),\n                         dict(path='/group/%3F', path_args=['?'], args={}))\n        self.assertEqual(self.fetch_json('/group/%3F?%3F=%3F'),\n                         dict(path='/group/%3F', path_args=['?'], args={'?': ['?']}))",
        "begin_line": 423,
        "end_line": 428,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_group_encoding#430",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_group_encoding(self)",
        "snippet": "    def test_group_encoding(self):\n        # Path components and query arguments should be decoded the same way\n        self.assertEqual(self.fetch_json('/group/%C3%A9?arg=%C3%A9'),\n                         {u(\"path\"): u(\"/group/%C3%A9\"),\n                          u(\"path_args\"): [u(\"\\u00e9\")],\n                          u(\"args\"): {u(\"arg\"): [u(\"\\u00e9\")]}})",
        "begin_line": 430,
        "end_line": 435,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_slashes#437",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_slashes(self)",
        "snippet": "    def test_slashes(self):\n        # Slashes may be escaped to appear as a single \"directory\" in the path,\n        # but they are then unescaped when passed to the get() method.\n        self.assertEqual(self.fetch_json('/slashes/foo/bar'),\n                         dict(path=\"/slashes/foo/bar\",\n                              path_args=[\"foo\", \"bar\"],\n                              args={}))\n        self.assertEqual(self.fetch_json('/slashes/a%2Fb/c%2Fd'),\n                         dict(path=\"/slashes/a%2Fb/c%2Fd\",\n                              path_args=[\"a/b\", \"c/d\"],\n                              args={}))",
        "begin_line": 437,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestEncodingTest.test_error#449",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestEncodingTest",
        "signature": "tornado.test.web_test.RequestEncodingTest.test_error(self)",
        "snippet": "    def test_error(self):\n        # Percent signs (encoded as %25) should not mess up printf-style\n        # messages in logs\n        with ExpectLog(gen_log, \".*Invalid unicode\"):\n            self.fetch(\"/group/?arg=%25%e9\")",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.prepare#457",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.errors = {}\n\n        self.check_type('status', self.get_status(), int)\n\n        # get_argument is an exception from the general rule of using\n        # type str for non-body data mainly for historical reasons.\n        self.check_type('argument', self.get_argument('foo'), unicode_type)\n        self.check_type('cookie_key', list(self.cookies.keys())[0], str)\n        self.check_type('cookie_value', list(self.cookies.values())[0].value, str)\n\n        # Secure cookies return bytes because they can contain arbitrary\n        # data, but regular cookies are native strings.\n        if list(self.cookies.keys()) != ['asdf']:\n            raise Exception(\"unexpected values for cookie keys: %r\" %\n                            self.cookies.keys())\n        self.check_type('get_secure_cookie', self.get_secure_cookie('asdf'), bytes)\n        self.check_type('get_cookie', self.get_cookie('asdf'), str)\n\n        self.check_type('xsrf_token', self.xsrf_token, bytes)\n        self.check_type('xsrf_form_html', self.xsrf_form_html(), str)\n\n        self.check_type('reverse_url', self.reverse_url('typecheck', 'foo'), str)\n\n        self.check_type('request_summary', self._request_summary(), str)",
        "begin_line": 457,
        "end_line": 481,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.get#483",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.get(self, path_component)",
        "snippet": "    def get(self, path_component):\n        # path_component uses type unicode instead of str for consistency\n        # with get_argument()\n        self.check_type('path_component', path_component, unicode_type)\n        self.write(self.errors)",
        "begin_line": 483,
        "end_line": 487,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.post#489",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.post(self, path_component)",
        "snippet": "    def post(self, path_component):\n        self.check_type('path_component', path_component, unicode_type)\n        self.write(self.errors)",
        "begin_line": 489,
        "end_line": 491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TypeCheckHandler.check_type#493",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TypeCheckHandler",
        "signature": "tornado.test.web_test.TypeCheckHandler.check_type(self, name, obj, expected_type)",
        "snippet": "    def check_type(self, name, obj, expected_type):\n        actual_type = type(obj)\n        if expected_type != actual_type:\n            self.errors[name] = \"expected %s, got %s\" % (expected_type,\n                                                         actual_type)",
        "begin_line": 493,
        "end_line": 497,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecodeArgHandler.decode_argument#501",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecodeArgHandler",
        "signature": "tornado.test.web_test.DecodeArgHandler.decode_argument(self, value, name=None)",
        "snippet": "    def decode_argument(self, value, name=None):\n        if type(value) != bytes:\n            raise Exception(\"unexpected type for value: %r\" % type(value))\n        # use self.request.arguments directly to avoid recursion\n        if 'encoding' in self.request.arguments:\n            return value.decode(to_unicode(self.request.arguments['encoding'][0]))\n        else:\n            return value",
        "begin_line": 501,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecodeArgHandler.get#510",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecodeArgHandler",
        "signature": "tornado.test.web_test.DecodeArgHandler.get(self, arg)",
        "snippet": "    def get(self, arg):\n        def describe(s):\n            if type(s) == bytes:\n                return [\"bytes\", native_str(binascii.b2a_hex(s))]\n            elif type(s) == unicode_type:\n                return [\"unicode\", s]\n            raise Exception(\"unknown type\")\n        self.write({'path': describe(arg),\n                    'query': describe(self.get_argument(\"foo\")),\n                    })",
        "begin_line": 510,
        "end_line": 519,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecodeArgHandler.describe#511",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecodeArgHandler",
        "signature": "tornado.test.web_test.DecodeArgHandler.describe(s)",
        "snippet": "        def describe(s):\n            if type(s) == bytes:\n                return [\"bytes\", native_str(binascii.b2a_hex(s))]\n            elif type(s) == unicode_type:\n                return [\"unicode\", s]\n            raise Exception(\"unknown type\")",
        "begin_line": 511,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.LinkifyHandler.get#523",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.LinkifyHandler",
        "signature": "tornado.test.web_test.LinkifyHandler.get(self)",
        "snippet": "    def get(self):\n        self.render(\"linkify.html\", message=\"http://example.com\")",
        "begin_line": 523,
        "end_line": 524,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIModuleResourceHandler.get#528",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIModuleResourceHandler",
        "signature": "tornado.test.web_test.UIModuleResourceHandler.get(self)",
        "snippet": "    def get(self):\n        self.render(\"page.html\", entries=[1, 2])",
        "begin_line": 528,
        "end_line": 529,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.OptionalPathHandler.get#533",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.OptionalPathHandler",
        "signature": "tornado.test.web_test.OptionalPathHandler.get(self, path)",
        "snippet": "    def get(self, path):\n        self.write({\"path\": path})",
        "begin_line": 533,
        "end_line": 534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.get#541",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(\"1\")\n        self.flush(callback=self.step2)",
        "begin_line": 541,
        "end_line": 543,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.step2#545",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.step2(self)",
        "snippet": "    def step2(self):\n        self.write(\"2\")\n        self.flush(callback=self.step3)",
        "begin_line": 545,
        "end_line": 547,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.step3#549",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.step3(self)",
        "snippet": "    def step3(self):\n        self.write(\"3\")\n        self.finish()",
        "begin_line": 549,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MultiHeaderHandler.get#555",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MultiHeaderHandler",
        "signature": "tornado.test.web_test.MultiHeaderHandler.get(self)",
        "snippet": "    def get(self):\n        self.set_header(\"x-overwrite\", \"1\")\n        self.set_header(\"X-Overwrite\", 2)\n        self.add_header(\"x-multi\", 3)\n        self.add_header(\"X-Multi\", \"4\")",
        "begin_line": 555,
        "end_line": 559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RedirectHandler.get#563",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RedirectHandler",
        "signature": "tornado.test.web_test.RedirectHandler.get(self)",
        "snippet": "    def get(self):\n        if self.get_argument('permanent', None) is not None:\n            self.redirect('/', permanent=int(self.get_argument('permanent')))\n        elif self.get_argument('status', None) is not None:\n            self.redirect('/', status=int(self.get_argument('status')))\n        else:\n            raise Exception(\"didn't get permanent or status arguments\")",
        "begin_line": 563,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EmptyFlushCallbackHandler.get#575",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EmptyFlushCallbackHandler",
        "signature": "tornado.test.web_test.EmptyFlushCallbackHandler.get(self)",
        "snippet": "    def get(self):\n        # Ensure that the flush callback is run whether or not there\n        # was any output.  The gen.Task and direct yield forms are\n        # equivalent.\n        yield gen.Task(self.flush)  # \"empty\" flush, but writes headers\n        yield gen.Task(self.flush)  # empty flush\n        self.write(\"o\")\n        yield self.flush()  # flushes the \"o\"\n        yield self.flush()  # empty flush\n        self.finish(\"k\")",
        "begin_line": 575,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HeaderInjectionHandler.get#588",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HeaderInjectionHandler",
        "signature": "tornado.test.web_test.HeaderInjectionHandler.get(self)",
        "snippet": "    def get(self):\n        try:\n            self.set_header(\"X-Foo\", \"foo\\r\\nX-Bar: baz\")\n            raise Exception(\"Didn't get expected exception\")\n        except ValueError as e:\n            if \"Unsafe header value\" in str(e):\n                self.finish(b\"ok\")\n            else:\n                raise",
        "begin_line": 588,
        "end_line": 596,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetArgumentHandler.prepare#600",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetArgumentHandler",
        "signature": "tornado.test.web_test.GetArgumentHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        if self.get_argument('source', None) == 'query':\n            method = self.get_query_argument\n        elif self.get_argument('source', None) == 'body':\n            method = self.get_body_argument\n        else:\n            method = self.get_argument\n        self.finish(method(\"foo\", \"default\"))",
        "begin_line": 600,
        "end_line": 607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetArgumentsHandler.prepare#611",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetArgumentsHandler",
        "signature": "tornado.test.web_test.GetArgumentsHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.finish(dict(default=self.get_arguments(\"foo\"),\n                         query=self.get_query_arguments(\"foo\"),\n                         body=self.get_body_arguments(\"foo\")))",
        "begin_line": 611,
        "end_line": 614,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.get_app_kwargs#622",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        loader = DictLoader({\n            \"linkify.html\": \"{% module linkify(message) %}\",\n            \"page.html\": \"\"\"\\\n<html><head></head><body>\n{% for e in entries %}\n{% module Template(\"entry.html\", entry=e) %}\n{% end %}\n</body></html>\"\"\",\n            \"entry.html\": \"\"\"\\\n{{ set_resources(embedded_css=\".entry { margin-bottom: 1em; }\", embedded_javascript=\"js_embed()\", css_files=[\"/base.css\", \"/foo.css\"], javascript_files=\"/common.js\", html_head=\"<meta>\", html_body='<script src=\"/analytics.js\"/>') }}\n<div class=\"entry\">...</div>\"\"\",\n        })\n        return dict(template_loader=loader,\n                    autoescape=\"xhtml_escape\",\n                    cookie_secret=self.COOKIE_SECRET)",
        "begin_line": 622,
        "end_line": 637,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.tearDown#639",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(WSGISafeWebTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 639,
        "end_line": 641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.get_handlers#643",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        urls = [\n            url(\"/typecheck/(.*)\", TypeCheckHandler, name='typecheck'),\n            url(\"/decode_arg/(.*)\", DecodeArgHandler, name='decode_arg'),\n            url(\"/decode_arg_kw/(?P<arg>.*)\", DecodeArgHandler),\n            url(\"/linkify\", LinkifyHandler),\n            url(\"/uimodule_resources\", UIModuleResourceHandler),\n            url(\"/optional_path/(.+)?\", OptionalPathHandler),\n            url(\"/multi_header\", MultiHeaderHandler),\n            url(\"/redirect\", RedirectHandler),\n            url(\"/web_redirect_permanent\", WebRedirectHandler, {\"url\": \"/web_redirect_newpath\"}),\n            url(\"/web_redirect\", WebRedirectHandler, {\"url\": \"/web_redirect_newpath\", \"permanent\": False}),\n            url(\"//web_redirect_double_slash\", WebRedirectHandler, {\"url\": '/web_redirect_newpath'}),\n            url(\"/header_injection\", HeaderInjectionHandler),\n            url(\"/get_argument\", GetArgumentHandler),\n            url(\"/get_arguments\", GetArgumentsHandler),\n        ]\n        return urls",
        "begin_line": 643,
        "end_line": 660,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.fetch_json#662",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.fetch_json(self, *args, **kwargs)",
        "snippet": "    def fetch_json(self, *args, **kwargs):\n        response = self.fetch(*args, **kwargs)\n        response.rethrow()\n        return json_decode(response.body)",
        "begin_line": 662,
        "end_line": 665,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_types#667",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_types(self)",
        "snippet": "    def test_types(self):\n        cookie_value = to_unicode(create_signed_value(self.COOKIE_SECRET,\n                                                      \"asdf\", \"qwer\"))\n        response = self.fetch(\"/typecheck/asdf?foo=bar\",\n                              headers={\"Cookie\": \"asdf=\" + cookie_value})\n        data = json_decode(response.body)\n        self.assertEqual(data, {})\n\n        response = self.fetch(\"/typecheck/asdf?foo=bar\", method=\"POST\",\n                              headers={\"Cookie\": \"asdf=\" + cookie_value},\n                              body=\"foo=bar\")",
        "begin_line": 667,
        "end_line": 677,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument#679",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument(self)",
        "snippet": "    def test_decode_argument(self):\n        # These urls all decode to the same thing\n        urls = [\"/decode_arg/%C3%A9?foo=%C3%A9&encoding=utf-8\",\n                \"/decode_arg/%E9?foo=%E9&encoding=latin1\",\n                \"/decode_arg_kw/%E9?foo=%E9&encoding=latin1\",\n                ]\n        for req_url in urls:\n            response = self.fetch(req_url)\n            response.rethrow()\n            data = json_decode(response.body)\n            self.assertEqual(data, {u('path'): [u('unicode'), u('\\u00e9')],\n                                    u('query'): [u('unicode'), u('\\u00e9')],\n                                    })\n\n        response = self.fetch(\"/decode_arg/%C3%A9?foo=%C3%A9\")\n        response.rethrow()\n        data = json_decode(response.body)\n        self.assertEqual(data, {u('path'): [u('bytes'), u('c3a9')],\n                                u('query'): [u('bytes'), u('c3a9')],\n                                })",
        "begin_line": 679,
        "end_line": 698,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_invalid_unicode#700",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_invalid_unicode(self)",
        "snippet": "    def test_decode_argument_invalid_unicode(self):\n        # test that invalid unicode in URLs causes 400, not 500\n        with ExpectLog(gen_log, \".*Invalid unicode.*\"):\n            response = self.fetch(\"/typecheck/invalid%FF\")\n            self.assertEqual(response.code, 400)\n            response = self.fetch(\"/typecheck/invalid?foo=%FF\")\n            self.assertEqual(response.code, 400)",
        "begin_line": 700,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_plus#708",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_decode_argument_plus(self)",
        "snippet": "    def test_decode_argument_plus(self):\n        # These urls are all equivalent.\n        urls = [\"/decode_arg/1%20%2B%201?foo=1%20%2B%201&encoding=utf-8\",\n                \"/decode_arg/1%20+%201?foo=1+%2B+1&encoding=utf-8\"]\n        for req_url in urls:\n            response = self.fetch(req_url)\n            response.rethrow()\n            data = json_decode(response.body)\n            self.assertEqual(data, {u('path'): [u('unicode'), u('1 + 1')],\n                                    u('query'): [u('unicode'), u('1 + 1')],\n                                    })",
        "begin_line": 708,
        "end_line": 718,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_reverse_url#720",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_reverse_url(self)",
        "snippet": "    def test_reverse_url(self):\n        self.assertEqual(self.app.reverse_url('decode_arg', 'foo'),\n                         '/decode_arg/foo')\n        self.assertEqual(self.app.reverse_url('decode_arg', 42),\n                         '/decode_arg/42')\n        self.assertEqual(self.app.reverse_url('decode_arg', b'\\xe9'),\n                         '/decode_arg/%E9')\n        self.assertEqual(self.app.reverse_url('decode_arg', u('\\u00e9')),\n                         '/decode_arg/%C3%A9')\n        self.assertEqual(self.app.reverse_url('decode_arg', '1 + 1'),\n                         '/decode_arg/1%20%2B%201')",
        "begin_line": 720,
        "end_line": 730,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_unescaped#732",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_unescaped(self)",
        "snippet": "    def test_uimodule_unescaped(self):\n        response = self.fetch(\"/linkify\")\n        self.assertEqual(response.body,\n                         b\"<a href=\\\"http://example.com\\\">http://example.com</a>\")",
        "begin_line": 732,
        "end_line": 735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_resources#737",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_uimodule_resources(self)",
        "snippet": "    def test_uimodule_resources(self):\n        response = self.fetch(\"/uimodule_resources\")\n        self.assertEqual(response.body, b\"\"\"\\\n<html><head><link href=\"/base.css\" type=\"text/css\" rel=\"stylesheet\"/><link href=\"/foo.css\" type=\"text/css\" rel=\"stylesheet\"/>\n<style type=\"text/css\">\n.entry { margin-bottom: 1em; }\n</style>\n<meta>\n</head><body>\n\n\n<div class=\"entry\">...</div>\n\n\n<div class=\"entry\">...</div>\n\n<script src=\"/common.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\njs_embed()\n//]]>\n</script>\n<script src=\"/analytics.js\"/>\n</body></html>\"\"\")",
        "begin_line": 737,
        "end_line": 760,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_optional_path#762",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_optional_path(self)",
        "snippet": "    def test_optional_path(self):\n        self.assertEqual(self.fetch_json(\"/optional_path/foo\"),\n                         {u(\"path\"): u(\"foo\")})\n        self.assertEqual(self.fetch_json(\"/optional_path/\"),\n                         {u(\"path\"): None})",
        "begin_line": 762,
        "end_line": 766,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_multi_header#768",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_multi_header(self)",
        "snippet": "    def test_multi_header(self):\n        response = self.fetch(\"/multi_header\")\n        self.assertEqual(response.headers[\"x-overwrite\"], \"2\")\n        self.assertEqual(response.headers.get_list(\"x-multi\"), [\"3\", \"4\"])",
        "begin_line": 768,
        "end_line": 771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_redirect#773",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_redirect(self)",
        "snippet": "    def test_redirect(self):\n        response = self.fetch(\"/redirect?permanent=1\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        response = self.fetch(\"/redirect?permanent=0\", follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        response = self.fetch(\"/redirect?status=307\", follow_redirects=False)\n        self.assertEqual(response.code, 307)",
        "begin_line": 773,
        "end_line": 779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect#781",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect(self)",
        "snippet": "    def test_web_redirect(self):\n        response = self.fetch(\"/web_redirect_permanent\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers['Location'], '/web_redirect_newpath')\n        response = self.fetch(\"/web_redirect\", follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertEqual(response.headers['Location'], '/web_redirect_newpath')",
        "begin_line": 781,
        "end_line": 787,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect_double_slash#789",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_web_redirect_double_slash(self)",
        "snippet": "    def test_web_redirect_double_slash(self):\n        response = self.fetch(\"//web_redirect_double_slash\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers['Location'], '/web_redirect_newpath')",
        "begin_line": 789,
        "end_line": 792,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_header_injection#794",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_header_injection(self)",
        "snippet": "    def test_header_injection(self):\n        response = self.fetch(\"/header_injection\")\n        self.assertEqual(response.body, b\"ok\")",
        "begin_line": 794,
        "end_line": 796,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_get_argument#798",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_get_argument(self)",
        "snippet": "    def test_get_argument(self):\n        response = self.fetch(\"/get_argument?foo=bar\")\n        self.assertEqual(response.body, b\"bar\")\n        response = self.fetch(\"/get_argument?foo=\")\n        self.assertEqual(response.body, b\"\")\n        response = self.fetch(\"/get_argument\")\n        self.assertEqual(response.body, b\"default\")\n\n        # Test merging of query and body arguments.\n        # In singular form, body arguments take precedence over query arguments.\n        body = urllib_parse.urlencode(dict(foo=\"hello\"))\n        response = self.fetch(\"/get_argument?foo=bar\", method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"hello\")\n        # In plural methods they are merged.\n        response = self.fetch(\"/get_arguments?foo=bar\",\n                              method=\"POST\", body=body)\n        self.assertEqual(json_decode(response.body),\n                         dict(default=['bar', 'hello'],\n                              query=['bar'],\n                              body=['hello']))",
        "begin_line": 798,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_get_query_arguments#819",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_get_query_arguments(self)",
        "snippet": "    def test_get_query_arguments(self):\n        # send as a post so we can ensure the separation between query\n        # string and body arguments.\n        body = urllib_parse.urlencode(dict(foo=\"hello\"))\n        response = self.fetch(\"/get_argument?source=query&foo=bar\",\n                              method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"bar\")\n        response = self.fetch(\"/get_argument?source=query&foo=\",\n                              method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"\")\n        response = self.fetch(\"/get_argument?source=query\",\n                              method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"default\")",
        "begin_line": 819,
        "end_line": 831,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_get_body_arguments#833",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_get_body_arguments(self)",
        "snippet": "    def test_get_body_arguments(self):\n        body = urllib_parse.urlencode(dict(foo=\"bar\"))\n        response = self.fetch(\"/get_argument?source=body&foo=hello\",\n                              method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"bar\")\n\n        body = urllib_parse.urlencode(dict(foo=\"\"))\n        response = self.fetch(\"/get_argument?source=body&foo=hello\",\n                              method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"\")\n\n        body = urllib_parse.urlencode(dict())\n        response = self.fetch(\"/get_argument?source=body&foo=hello\",\n                              method=\"POST\", body=body)\n        self.assertEqual(response.body, b\"default\")",
        "begin_line": 833,
        "end_line": 847,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WSGISafeWebTest.test_no_gzip#849",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WSGISafeWebTest",
        "signature": "tornado.test.web_test.WSGISafeWebTest.test_no_gzip(self)",
        "snippet": "    def test_no_gzip(self):\n        response = self.fetch('/get_argument')\n        self.assertNotIn('Accept-Encoding', response.headers.get('Vary', ''))\n        self.assertNotIn('gzip', response.headers.get('Content-Encoding', ''))",
        "begin_line": 849,
        "end_line": 852,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NonWSGIWebTests.get_handlers#856",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NonWSGIWebTests",
        "signature": "tornado.test.web_test.NonWSGIWebTests.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/flow_control\", FlowControlHandler),\n                (\"/empty_flush\", EmptyFlushCallbackHandler),\n                ]",
        "begin_line": 856,
        "end_line": 859,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NonWSGIWebTests.test_flow_control#861",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NonWSGIWebTests",
        "signature": "tornado.test.web_test.NonWSGIWebTests.test_flow_control(self)",
        "snippet": "    def test_flow_control(self):\n        self.assertEqual(self.fetch(\"/flow_control\").body, b\"123\")",
        "begin_line": 861,
        "end_line": 862,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NonWSGIWebTests.test_empty_flush#864",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NonWSGIWebTests",
        "signature": "tornado.test.web_test.NonWSGIWebTests.test_empty_flush(self)",
        "snippet": "    def test_empty_flush(self):\n        response = self.fetch(\"/empty_flush\")\n        self.assertEqual(response.body, b\"ok\")",
        "begin_line": 864,
        "end_line": 866,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.get_handlers#871",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [url(\"/default\", DefaultHandler),\n                url(\"/write_error\", WriteErrorHandler),\n                url(\"/failed_write_error\", FailedWriteErrorHandler),\n                ]",
        "begin_line": 871,
        "end_line": 902,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandler.get_handlers#871",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandler",
        "signature": "tornado.test.web_test.DefaultHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [url(\"/default\", DefaultHandler),\n                url(\"/write_error\", WriteErrorHandler),\n                url(\"/failed_write_error\", FailedWriteErrorHandler),\n                ]",
        "begin_line": 871,
        "end_line": 902,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandler.get#873",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandler",
        "signature": "tornado.test.web_test.DefaultHandler.get(self)",
        "snippet": "            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0",
        "begin_line": 873,
        "end_line": 876,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WriteErrorHandler.get_handlers#871",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WriteErrorHandler",
        "signature": "tornado.test.web_test.WriteErrorHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [url(\"/default\", DefaultHandler),\n                url(\"/write_error\", WriteErrorHandler),\n                url(\"/failed_write_error\", FailedWriteErrorHandler),\n                ]",
        "begin_line": 871,
        "end_line": 902,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WriteErrorHandler.get#879",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WriteErrorHandler",
        "signature": "tornado.test.web_test.WriteErrorHandler.get(self)",
        "snippet": "            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0",
        "begin_line": 879,
        "end_line": 883,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WriteErrorHandler.write_error#885",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WriteErrorHandler",
        "signature": "tornado.test.web_test.WriteErrorHandler.write_error(self, status_code, **kwargs)",
        "snippet": "            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)",
        "begin_line": 885,
        "end_line": 890,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FailedWriteErrorHandler.get_handlers#871",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FailedWriteErrorHandler",
        "signature": "tornado.test.web_test.FailedWriteErrorHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class DefaultHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    raise HTTPError(int(self.get_argument(\"status\")))\n                1 / 0\n\n        class WriteErrorHandler(RequestHandler):\n            def get(self):\n                if self.get_argument(\"status\", None):\n                    self.send_error(int(self.get_argument(\"status\")))\n                else:\n                    1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                self.set_header(\"Content-Type\", \"text/plain\")\n                if \"exc_info\" in kwargs:\n                    self.write(\"Exception: %s\" % kwargs[\"exc_info\"][0].__name__)\n                else:\n                    self.write(\"Status: %d\" % status_code)\n\n        class FailedWriteErrorHandler(RequestHandler):\n            def get(self):\n                1 / 0\n\n            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")\n\n        return [url(\"/default\", DefaultHandler),\n                url(\"/write_error\", WriteErrorHandler),\n                url(\"/failed_write_error\", FailedWriteErrorHandler),\n                ]",
        "begin_line": 871,
        "end_line": 902,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FailedWriteErrorHandler.get#893",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FailedWriteErrorHandler",
        "signature": "tornado.test.web_test.FailedWriteErrorHandler.get(self)",
        "snippet": "            def get(self):\n                1 / 0",
        "begin_line": 893,
        "end_line": 894,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FailedWriteErrorHandler.write_error#896",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FailedWriteErrorHandler",
        "signature": "tornado.test.web_test.FailedWriteErrorHandler.write_error(self, status_code, **kwargs)",
        "snippet": "            def write_error(self, status_code, **kwargs):\n                raise Exception(\"exception in write_error\")",
        "begin_line": 896,
        "end_line": 897,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.test_default#904",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.test_default(self)",
        "snippet": "    def test_default(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/default\")\n            self.assertEqual(response.code, 500)\n            self.assertTrue(b\"500: Internal Server Error\" in response.body)\n\n            response = self.fetch(\"/default?status=503\")\n            self.assertEqual(response.code, 503)\n            self.assertTrue(b\"503: Service Unavailable\" in response.body)",
        "begin_line": 904,
        "end_line": 912,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.test_write_error#914",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.test_write_error(self)",
        "snippet": "    def test_write_error(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/write_error\")\n            self.assertEqual(response.code, 500)\n            self.assertEqual(b\"Exception: ZeroDivisionError\", response.body)\n\n            response = self.fetch(\"/write_error?status=503\")\n            self.assertEqual(response.code, 503)\n            self.assertEqual(b\"Status: 503\", response.body)",
        "begin_line": 914,
        "end_line": 922,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorResponseTest.test_failed_write_error#924",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorResponseTest",
        "signature": "tornado.test.web_test.ErrorResponseTest.test_failed_write_error(self)",
        "snippet": "    def test_failed_write_error(self):\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = self.fetch(\"/failed_write_error\")\n            self.assertEqual(response.code, 500)\n            self.assertEqual(b\"\", response.body)",
        "begin_line": 924,
        "end_line": 928,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.get_handlers#938",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument('include_version', 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = (check_override == 0 and check_regular == -1)\n                else:\n                    result = (check_override == -1 and check_regular == 0)\n                self.write(str(result))\n\n        return [('/static_url/(.*)', StaticUrlHandler),\n                ('/abs_static_url/(.*)', AbsoluteStaticUrlHandler),\n                ('/override_static_url/(.*)', OverrideStaticUrlHandler)]",
        "begin_line": 938,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get_handlers#938",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument('include_version', 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = (check_override == 0 and check_regular == -1)\n                else:\n                    result = (check_override == -1 and check_regular == 0)\n                self.write(str(result))\n\n        return [('/static_url/(.*)', StaticUrlHandler),\n                ('/abs_static_url/(.*)', AbsoluteStaticUrlHandler),\n                ('/override_static_url/(.*)', OverrideStaticUrlHandler)]",
        "begin_line": 938,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get#940",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                with_v = int(self.get_argument('include_version', 1))\n                self.write(self.static_url(path, include_version=with_v))",
        "begin_line": 940,
        "end_line": 942,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AbsoluteStaticUrlHandler.get_handlers#938",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AbsoluteStaticUrlHandler",
        "signature": "tornado.test.web_test.AbsoluteStaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument('include_version', 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = (check_override == 0 and check_regular == -1)\n                else:\n                    result = (check_override == -1 and check_regular == 0)\n                self.write(str(result))\n\n        return [('/static_url/(.*)', StaticUrlHandler),\n                ('/abs_static_url/(.*)', AbsoluteStaticUrlHandler),\n                ('/override_static_url/(.*)', OverrideStaticUrlHandler)]",
        "begin_line": 938,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.OverrideStaticUrlHandler.get_handlers#938",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.OverrideStaticUrlHandler",
        "signature": "tornado.test.web_test.OverrideStaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                with_v = int(self.get_argument('include_version', 1))\n                self.write(self.static_url(path, include_version=with_v))\n\n        class AbsoluteStaticUrlHandler(StaticUrlHandler):\n            include_host = True\n\n        class OverrideStaticUrlHandler(RequestHandler):\n            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = (check_override == 0 and check_regular == -1)\n                else:\n                    result = (check_override == -1 and check_regular == 0)\n                self.write(str(result))\n\n        return [('/static_url/(.*)', StaticUrlHandler),\n                ('/abs_static_url/(.*)', AbsoluteStaticUrlHandler),\n                ('/override_static_url/(.*)', OverrideStaticUrlHandler)]",
        "begin_line": 938,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.OverrideStaticUrlHandler.get#948",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.OverrideStaticUrlHandler",
        "signature": "tornado.test.web_test.OverrideStaticUrlHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                do_include = bool(self.get_argument(\"include_host\"))\n                self.include_host = not do_include\n\n                regular_url = self.static_url(path)\n                override_url = self.static_url(path, include_host=do_include)\n                if override_url == regular_url:\n                    return self.write(str(False))\n\n                protocol = self.request.protocol + \"://\"\n                protocol_length = len(protocol)\n                check_regular = regular_url.find(protocol, 0, protocol_length)\n                check_override = override_url.find(protocol, 0, protocol_length)\n\n                if do_include:\n                    result = (check_override == 0 and check_regular == -1)\n                else:\n                    result = (check_override == -1 and check_regular == 0)\n                self.write(str(result))",
        "begin_line": 948,
        "end_line": 966,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.get_app_kwargs#972",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(static_path=relpath('static'))",
        "begin_line": 972,
        "end_line": 973,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_files#975",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_files(self)",
        "snippet": "    def test_static_files(self):\n        response = self.fetch('/robots.txt')\n        self.assertTrue(b\"Disallow: /\" in response.body)\n\n        response = self.fetch('/static/robots.txt')\n        self.assertTrue(b\"Disallow: /\" in response.body)",
        "begin_line": 975,
        "end_line": 980,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_url#982",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_url(self)",
        "snippet": "    def test_static_url(self):\n        response = self.fetch(\"/static_url/robots.txt\")\n        self.assertEqual(response.body,\n                         b\"/static/robots.txt?v=\" + self.robots_txt_hash)",
        "begin_line": 982,
        "end_line": 985,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_absolute_static_url#987",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_absolute_static_url(self)",
        "snippet": "    def test_absolute_static_url(self):\n        response = self.fetch(\"/abs_static_url/robots.txt\")\n        self.assertEqual(response.body, (\n            utf8(self.get_url(\"/\")) +\n            b\"static/robots.txt?v=\" +\n            self.robots_txt_hash\n        ))",
        "begin_line": 987,
        "end_line": 993,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_relative_version_exclusion#995",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_relative_version_exclusion(self)",
        "snippet": "    def test_relative_version_exclusion(self):\n        response = self.fetch(\"/static_url/robots.txt?include_version=0\")\n        self.assertEqual(response.body, b\"/static/robots.txt\")",
        "begin_line": 995,
        "end_line": 997,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_absolute_version_exclusion#999",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_absolute_version_exclusion(self)",
        "snippet": "    def test_absolute_version_exclusion(self):\n        response = self.fetch(\"/abs_static_url/robots.txt?include_version=0\")\n        self.assertEqual(response.body,\n                         utf8(self.get_url(\"/\") + \"static/robots.txt\"))",
        "begin_line": 999,
        "end_line": 1002,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_include_host_override#1004",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_include_host_override(self)",
        "snippet": "    def test_include_host_override(self):\n        self._trigger_include_host_check(False)\n        self._trigger_include_host_check(True)",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest._trigger_include_host_check#1008",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest._trigger_include_host_check(self, include_host)",
        "snippet": "    def _trigger_include_host_check(self, include_host):\n        path = \"/override_static_url/robots.txt?include_host=%s\"\n        response = self.fetch(path % int(include_host))\n        self.assertEqual(response.body, utf8(str(True)))",
        "begin_line": 1008,
        "end_line": 1011,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.get_and_head#1013",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.get_and_head(self, *args, **kwargs)",
        "snippet": "    def get_and_head(self, *args, **kwargs):\n        \"\"\"Performs a GET and HEAD request and returns the GET response.\n\n        Fails if any ``Content-*`` headers returned by the two requests\n        differ.\n        \"\"\"\n        head_response = self.fetch(*args, method=\"HEAD\", **kwargs)\n        get_response = self.fetch(*args, method=\"GET\", **kwargs)\n        content_headers = set()\n        for h in itertools.chain(head_response.headers, get_response.headers):\n            if h.startswith('Content-'):\n                content_headers.add(h)\n        for h in content_headers:\n            self.assertEqual(head_response.headers.get(h),\n                             get_response.headers.get(h),\n                             \"%s differs between GET (%s) and HEAD (%s)\" %\n                             (h, head_response.headers.get(h),\n                              get_response.headers.get(h)))\n        return get_response",
        "begin_line": 1013,
        "end_line": 1031,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_304_if_modified_since#1033",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_304_if_modified_since(self)",
        "snippet": "    def test_static_304_if_modified_since(self):\n        response1 = self.get_and_head(\"/static/robots.txt\")\n        response2 = self.get_and_head(\"/static/robots.txt\", headers={\n            'If-Modified-Since': response1.headers['Last-Modified']})\n        self.assertEqual(response2.code, 304)\n        self.assertTrue('Content-Length' not in response2.headers)\n        self.assertTrue('Last-Modified' not in response2.headers)",
        "begin_line": 1033,
        "end_line": 1039,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_304_if_none_match#1041",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_304_if_none_match(self)",
        "snippet": "    def test_static_304_if_none_match(self):\n        response1 = self.get_and_head(\"/static/robots.txt\")\n        response2 = self.get_and_head(\"/static/robots.txt\", headers={\n            'If-None-Match': response1.headers['Etag']})\n        self.assertEqual(response2.code, 304)",
        "begin_line": 1041,
        "end_line": 1045,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_pre_epoch#1047",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_pre_epoch(self)",
        "snippet": "    def test_static_if_modified_since_pre_epoch(self):\n        # On windows, the functions that work with time_t do not accept\n        # negative values, and at least one client (processing.js) seems\n        # to use if-modified-since 1/1/1960 as a cache-busting technique.\n        response = self.get_and_head(\"/static/robots.txt\", headers={\n            'If-Modified-Since': 'Fri, 01 Jan 1960 00:00:00 GMT'})\n        self.assertEqual(response.code, 200)",
        "begin_line": 1047,
        "end_line": 1053,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_time_zone#1055",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_if_modified_since_time_zone(self)",
        "snippet": "    def test_static_if_modified_since_time_zone(self):\n        # Instead of the value from Last-Modified, make requests with times\n        # chosen just before and after the known modification time\n        # of the file to ensure that the right time zone is being used\n        # when parsing If-Modified-Since.\n        stat = os.stat(relpath('static/robots.txt'))\n\n        response = self.get_and_head('/static/robots.txt', headers={\n            'If-Modified-Since': format_timestamp(stat.st_mtime - 1)})\n        self.assertEqual(response.code, 200)\n        response = self.get_and_head('/static/robots.txt', headers={\n            'If-Modified-Since': format_timestamp(stat.st_mtime + 1)})\n        self.assertEqual(response.code, 304)",
        "begin_line": 1055,
        "end_line": 1067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_etag#1069",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_etag(self)",
        "snippet": "    def test_static_etag(self):\n        response = self.get_and_head('/static/robots.txt')\n        self.assertEqual(utf8(response.headers.get(\"Etag\")),\n                         b'\"' + self.robots_txt_hash + b'\"')",
        "begin_line": 1069,
        "end_line": 1072,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range#1074",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range(self)",
        "snippet": "    def test_static_with_range(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=0-9'})\n        self.assertEqual(response.code, 206)\n        self.assertEqual(response.body, b\"User-agent\")\n        self.assertEqual(utf8(response.headers.get(\"Etag\")),\n                         b'\"' + self.robots_txt_hash + b'\"')\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"10\")\n        self.assertEqual(response.headers.get(\"Content-Range\"),\n                         \"bytes 0-9/26\")",
        "begin_line": 1074,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_file#1085",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_file(self)",
        "snippet": "    def test_static_with_range_full_file(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=0-'})\n        # Note: Chrome refuses to play audio if it gets an HTTP 206 in response\n        # to ``Range: bytes=0-`` :(\n        self.assertEqual(response.code, 200)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"26\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), None)",
        "begin_line": 1085,
        "end_line": 1095,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_past_end#1097",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_full_past_end(self)",
        "snippet": "    def test_static_with_range_full_past_end(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=0-10000000'})\n        self.assertEqual(response.code, 200)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"26\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), None)",
        "begin_line": 1097,
        "end_line": 1105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_partial_past_end#1107",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_partial_past_end(self)",
        "snippet": "    def test_static_with_range_partial_past_end(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=1-10000000'})\n        self.assertEqual(response.code, 206)\n        robots_file_path = os.path.join(self.static_dir, \"robots.txt\")\n        with open(robots_file_path) as f:\n            self.assertEqual(response.body, utf8(f.read()[1:]))\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"25\")\n        self.assertEqual(response.headers.get(\"Content-Range\"), \"bytes 1-25/26\")",
        "begin_line": 1107,
        "end_line": 1115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_end_edge#1117",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_end_edge(self)",
        "snippet": "    def test_static_with_range_end_edge(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=22-'})\n        self.assertEqual(response.body, b\": /\\n\")\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"4\")\n        self.assertEqual(response.headers.get(\"Content-Range\"),\n                         \"bytes 22-25/26\")",
        "begin_line": 1117,
        "end_line": 1123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_with_range_neg_end#1125",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_with_range_neg_end(self)",
        "snippet": "    def test_static_with_range_neg_end(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=-4'})\n        self.assertEqual(response.body, b\": /\\n\")\n        self.assertEqual(response.headers.get(\"Content-Length\"), \"4\")\n        self.assertEqual(response.headers.get(\"Content-Range\"),\n                         \"bytes 22-25/26\")",
        "begin_line": 1125,
        "end_line": 1131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_invalid_range#1133",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_invalid_range(self)",
        "snippet": "    def test_static_invalid_range(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'asdf'})\n        self.assertEqual(response.code, 200)",
        "begin_line": 1133,
        "end_line": 1136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_zero_suffix#1138",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_zero_suffix(self)",
        "snippet": "    def test_static_unsatisfiable_range_zero_suffix(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=-0'})\n        self.assertEqual(response.headers.get(\"Content-Range\"),\n                         \"bytes */26\")\n        self.assertEqual(response.code, 416)",
        "begin_line": 1138,
        "end_line": 1143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_invalid_start#1145",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_unsatisfiable_range_invalid_start(self)",
        "snippet": "    def test_static_unsatisfiable_range_invalid_start(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=26'})\n        self.assertEqual(response.code, 416)\n        self.assertEqual(response.headers.get(\"Content-Range\"),\n                         \"bytes */26\")",
        "begin_line": 1145,
        "end_line": 1150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_head#1152",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_head(self)",
        "snippet": "    def test_static_head(self):\n        response = self.fetch('/static/robots.txt', method='HEAD')\n        self.assertEqual(response.code, 200)\n        # No body was returned, but we did get the right content length.\n        self.assertEqual(response.body, b'')\n        self.assertEqual(response.headers['Content-Length'], '26')\n        self.assertEqual(utf8(response.headers['Etag']),\n                         b'\"' + self.robots_txt_hash + b'\"')",
        "begin_line": 1152,
        "end_line": 1159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_head_range#1161",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_head_range(self)",
        "snippet": "    def test_static_head_range(self):\n        response = self.fetch('/static/robots.txt', method='HEAD',\n                              headers={'Range': 'bytes=1-4'})\n        self.assertEqual(response.code, 206)\n        self.assertEqual(response.body, b'')\n        self.assertEqual(response.headers['Content-Length'], '4')\n        self.assertEqual(utf8(response.headers['Etag']),\n                         b'\"' + self.robots_txt_hash + b'\"')",
        "begin_line": 1161,
        "end_line": 1168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_range_if_none_match#1170",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_range_if_none_match(self)",
        "snippet": "    def test_static_range_if_none_match(self):\n        response = self.get_and_head('/static/robots.txt', headers={\n            'Range': 'bytes=1-4',\n            'If-None-Match': b'\"' + self.robots_txt_hash + b'\"'})\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.body, b'')\n        self.assertTrue('Content-Length' not in response.headers)\n        self.assertEqual(utf8(response.headers['Etag']),\n                         b'\"' + self.robots_txt_hash + b'\"')",
        "begin_line": 1170,
        "end_line": 1178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_static_404#1180",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_static_404(self)",
        "snippet": "    def test_static_404(self):\n        response = self.get_and_head('/static/blarg')\n        self.assertEqual(response.code, 404)",
        "begin_line": 1180,
        "end_line": 1182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileTest.test_path_traversal_protection#1184",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileTest",
        "signature": "tornado.test.web_test.StaticFileTest.test_path_traversal_protection(self)",
        "snippet": "    def test_path_traversal_protection(self):\n        with ExpectLog(gen_log, \".*not in root static directory\"):\n            response = self.get_and_head('/static/../static_foo.txt')\n        # Attempted path traversal should result in 403, not 200\n        # (which means the check failed and the file was served)\n        # or 404 (which means that the file didn't exist and\n        # is probably a packaging error).\n        self.assertEqual(response.code, 403)",
        "begin_line": 1184,
        "end_line": 1191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.get_app_kwargs#1196",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(static_path=relpath('static'),\n                    static_handler_args=dict(default_filename='index.html'))",
        "begin_line": 1196,
        "end_line": 1198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.get_handlers#1200",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return []",
        "begin_line": 1200,
        "end_line": 1201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_filename#1203",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_filename(self)",
        "snippet": "    def test_static_default_filename(self):\n        response = self.fetch('/static/dir/', follow_redirects=False)\n        self.assertEqual(response.code, 200)\n        self.assertEqual(b'this is the index\\n', response.body)",
        "begin_line": 1203,
        "end_line": 1206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_redirect#1208",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticDefaultFilenameTest",
        "signature": "tornado.test.web_test.StaticDefaultFilenameTest.test_static_default_redirect(self)",
        "snippet": "    def test_static_default_redirect(self):\n        response = self.fetch('/static/dir', follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertTrue(response.headers['Location'].endswith('/static/dir/'))",
        "begin_line": 1208,
        "end_line": 1211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileWithPathTest.get_app_kwargs#1216",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileWithPathTest",
        "signature": "tornado.test.web_test.StaticFileWithPathTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(static_path=relpath('static'),\n                    static_handler_args=dict(default_filename='index.html'))",
        "begin_line": 1216,
        "end_line": 1218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileWithPathTest.get_handlers#1220",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileWithPathTest",
        "signature": "tornado.test.web_test.StaticFileWithPathTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/foo/(.*)\", StaticFileHandler, {\n            \"path\": relpath(\"templates/\"),\n        })]",
        "begin_line": 1220,
        "end_line": 1223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticFileWithPathTest.test_serve#1225",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticFileWithPathTest",
        "signature": "tornado.test.web_test.StaticFileWithPathTest.test_serve(self)",
        "snippet": "    def test_serve(self):\n        response = self.fetch(\"/foo/utf8.html\")\n        self.assertEqual(response.body, b\"H\\xc3\\xa9llo\\n\")",
        "begin_line": 1225,
        "end_line": 1227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.get_handlers#1232",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class MyStaticFileHandler(StaticFileHandler):\n            @classmethod\n            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex('.')\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1):]\n                return '/static/%s.%s.%s' % (before_version, version_hash,\n                                             after_version)\n\n            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex('.')\n                version_index = url_path.rindex('.', 0, extension_index)\n                return '%s%s' % (url_path[:version_index],\n                                 url_path[extension_index:])\n\n            @classmethod\n            def get_absolute_path(cls, settings, path):\n                return 'CustomStaticFileTest:' + path\n\n            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path\n\n            @classmethod\n            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == 'CustomStaticFileTest:foo.txt':\n                    return b'bar'\n                raise Exception(\"unexpected path %r\" % path)\n\n            def get_content_size(self):\n                if self.absolute_path == 'CustomStaticFileTest:foo.txt':\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)\n\n            def get_modified_time(self):\n                return None\n\n            @classmethod\n            def get_version(cls, settings, path):\n                return \"42\"\n\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                self.write(self.static_url(path))\n\n        self.static_handler_class = MyStaticFileHandler\n\n        return [(\"/static_url/(.*)\", StaticUrlHandler)]",
        "begin_line": 1232,
        "end_line": 1281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_handlers#1232",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class MyStaticFileHandler(StaticFileHandler):\n            @classmethod\n            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex('.')\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1):]\n                return '/static/%s.%s.%s' % (before_version, version_hash,\n                                             after_version)\n\n            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex('.')\n                version_index = url_path.rindex('.', 0, extension_index)\n                return '%s%s' % (url_path[:version_index],\n                                 url_path[extension_index:])\n\n            @classmethod\n            def get_absolute_path(cls, settings, path):\n                return 'CustomStaticFileTest:' + path\n\n            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path\n\n            @classmethod\n            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == 'CustomStaticFileTest:foo.txt':\n                    return b'bar'\n                raise Exception(\"unexpected path %r\" % path)\n\n            def get_content_size(self):\n                if self.absolute_path == 'CustomStaticFileTest:foo.txt':\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)\n\n            def get_modified_time(self):\n                return None\n\n            @classmethod\n            def get_version(cls, settings, path):\n                return \"42\"\n\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                self.write(self.static_url(path))\n\n        self.static_handler_class = MyStaticFileHandler\n\n        return [(\"/static_url/(.*)\", StaticUrlHandler)]",
        "begin_line": 1232,
        "end_line": 1281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.make_static_url#1235",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.make_static_url(cls, settings, path)",
        "snippet": "            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex('.')\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1):]\n                return '/static/%s.%s.%s' % (before_version, version_hash,\n                                             after_version)",
        "begin_line": 1235,
        "end_line": 1241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.parse_url_path#1243",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.parse_url_path(self, url_path)",
        "snippet": "            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex('.')\n                version_index = url_path.rindex('.', 0, extension_index)\n                return '%s%s' % (url_path[:version_index],\n                                 url_path[extension_index:])",
        "begin_line": 1243,
        "end_line": 1247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_absolute_path#1250",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_absolute_path(cls, settings, path)",
        "snippet": "            def get_absolute_path(cls, settings, path):\n                return 'CustomStaticFileTest:' + path",
        "begin_line": 1250,
        "end_line": 1251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.validate_absolute_path#1253",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.validate_absolute_path(self, root, absolute_path)",
        "snippet": "            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path",
        "begin_line": 1253,
        "end_line": 1254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_content#1257",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_content(self, path, start=None, end=None)",
        "snippet": "            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == 'CustomStaticFileTest:foo.txt':\n                    return b'bar'\n                raise Exception(\"unexpected path %r\" % path)",
        "begin_line": 1257,
        "end_line": 1261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_content_size#1263",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_content_size(self)",
        "snippet": "            def get_content_size(self):\n                if self.absolute_path == 'CustomStaticFileTest:foo.txt':\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)",
        "begin_line": 1263,
        "end_line": 1266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_modified_time#1268",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_modified_time(self)",
        "snippet": "            def get_modified_time(self):\n                return None",
        "begin_line": 1268,
        "end_line": 1269,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyStaticFileHandler.get_version#1272",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyStaticFileHandler",
        "signature": "tornado.test.web_test.MyStaticFileHandler.get_version(cls, settings, path)",
        "snippet": "            def get_version(cls, settings, path):\n                return \"42\"",
        "begin_line": 1272,
        "end_line": 1273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get_handlers#1232",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class MyStaticFileHandler(StaticFileHandler):\n            @classmethod\n            def make_static_url(cls, settings, path):\n                version_hash = cls.get_version(settings, path)\n                extension_index = path.rindex('.')\n                before_version = path[:extension_index]\n                after_version = path[(extension_index + 1):]\n                return '/static/%s.%s.%s' % (before_version, version_hash,\n                                             after_version)\n\n            def parse_url_path(self, url_path):\n                extension_index = url_path.rindex('.')\n                version_index = url_path.rindex('.', 0, extension_index)\n                return '%s%s' % (url_path[:version_index],\n                                 url_path[extension_index:])\n\n            @classmethod\n            def get_absolute_path(cls, settings, path):\n                return 'CustomStaticFileTest:' + path\n\n            def validate_absolute_path(self, root, absolute_path):\n                return absolute_path\n\n            @classmethod\n            def get_content(self, path, start=None, end=None):\n                assert start is None and end is None\n                if path == 'CustomStaticFileTest:foo.txt':\n                    return b'bar'\n                raise Exception(\"unexpected path %r\" % path)\n\n            def get_content_size(self):\n                if self.absolute_path == 'CustomStaticFileTest:foo.txt':\n                    return 3\n                raise Exception(\"unexpected path %r\" % self.absolute_path)\n\n            def get_modified_time(self):\n                return None\n\n            @classmethod\n            def get_version(cls, settings, path):\n                return \"42\"\n\n        class StaticUrlHandler(RequestHandler):\n            def get(self, path):\n                self.write(self.static_url(path))\n\n        self.static_handler_class = MyStaticFileHandler\n\n        return [(\"/static_url/(.*)\", StaticUrlHandler)]",
        "begin_line": 1232,
        "end_line": 1281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StaticUrlHandler.get#1276",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StaticUrlHandler",
        "signature": "tornado.test.web_test.StaticUrlHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                self.write(self.static_url(path))",
        "begin_line": 1276,
        "end_line": 1277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.get_app_kwargs#1283",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(static_path=\"dummy\",\n                    static_handler_class=self.static_handler_class)",
        "begin_line": 1283,
        "end_line": 1285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.test_serve#1287",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.test_serve(self)",
        "snippet": "    def test_serve(self):\n        response = self.fetch(\"/static/foo.42.txt\")\n        self.assertEqual(response.body, b\"bar\")",
        "begin_line": 1287,
        "end_line": 1289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CustomStaticFileTest.test_static_url#1291",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CustomStaticFileTest",
        "signature": "tornado.test.web_test.CustomStaticFileTest.test_static_url(self)",
        "snippet": "    def test_static_url(self):\n        with ExpectLog(gen_log, \"Could not open static file\", required=False):\n            response = self.fetch(\"/static_url/foo.txt\")\n            self.assertEqual(response.body, b\"/static/foo.42.txt\")",
        "begin_line": 1291,
        "end_line": 1294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.initialize#1300",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.initialize(self, reply)",
        "snippet": "        def initialize(self, reply):\n            self.reply = reply",
        "begin_line": 1300,
        "end_line": 1301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1303",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(self.reply)",
        "begin_line": 1303,
        "end_line": 1304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HostMatchingTest.get_handlers#1306",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HostMatchingTest",
        "signature": "tornado.test.web_test.HostMatchingTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/foo\", HostMatchingTest.Handler, {\"reply\": \"wildcard\"})]",
        "begin_line": 1306,
        "end_line": 1307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HostMatchingTest.test_host_matching#1309",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HostMatchingTest",
        "signature": "tornado.test.web_test.HostMatchingTest.test_host_matching(self)",
        "snippet": "    def test_host_matching(self):\n        self.app.add_handlers(\"www.example.com\",\n                              [(\"/foo\", HostMatchingTest.Handler, {\"reply\": \"[0]\"})])\n        self.app.add_handlers(r\"www\\.example\\.com\",\n                              [(\"/bar\", HostMatchingTest.Handler, {\"reply\": \"[1]\"})])\n        self.app.add_handlers(\"www.example.com\",\n                              [(\"/baz\", HostMatchingTest.Handler, {\"reply\": \"[2]\"})])\n\n        response = self.fetch(\"/foo\")\n        self.assertEqual(response.body, b\"wildcard\")\n        response = self.fetch(\"/bar\")\n        self.assertEqual(response.code, 404)\n        response = self.fetch(\"/baz\")\n        self.assertEqual(response.code, 404)\n\n        response = self.fetch(\"/foo\", headers={'Host': 'www.example.com'})\n        self.assertEqual(response.body, b\"[0]\")\n        response = self.fetch(\"/bar\", headers={'Host': 'www.example.com'})\n        self.assertEqual(response.body, b\"[1]\")\n        response = self.fetch(\"/baz\", headers={'Host': 'www.example.com'})\n        self.assertEqual(response.body, b\"[2]\")",
        "begin_line": 1309,
        "end_line": 1329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers#1334",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NamedURLSpecGroupsTest",
        "signature": "tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EchoHandler(RequestHandler):\n            def get(self, path):\n                self.write(path)\n\n        return [(\"/str/(?P<path>.*)\", EchoHandler),\n                (u(\"/unicode/(?P<path>.*)\"), EchoHandler)]",
        "begin_line": 1334,
        "end_line": 1340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EchoHandler.get_handlers#1334",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EchoHandler",
        "signature": "tornado.test.web_test.EchoHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EchoHandler(RequestHandler):\n            def get(self, path):\n                self.write(path)\n\n        return [(\"/str/(?P<path>.*)\", EchoHandler),\n                (u(\"/unicode/(?P<path>.*)\"), EchoHandler)]",
        "begin_line": 1334,
        "end_line": 1340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EchoHandler.get#1336",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EchoHandler",
        "signature": "tornado.test.web_test.EchoHandler.get(self, path)",
        "snippet": "            def get(self, path):\n                self.write(path)",
        "begin_line": 1336,
        "end_line": 1337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.NamedURLSpecGroupsTest.test_named_urlspec_groups#1342",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.NamedURLSpecGroupsTest",
        "signature": "tornado.test.web_test.NamedURLSpecGroupsTest.test_named_urlspec_groups(self)",
        "snippet": "    def test_named_urlspec_groups(self):\n        response = self.fetch(\"/str/foo\")\n        self.assertEqual(response.body, b\"foo\")\n\n        response = self.fetch(\"/unicode/bar\")\n        self.assertEqual(response.body, b\"bar\")",
        "begin_line": 1342,
        "end_line": 1347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1353",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_header(\"h1\", \"foo\")\n            self.set_header(\"h2\", \"bar\")\n            self.clear_header(\"h1\")\n            self.clear_header(\"nonexistent\")",
        "begin_line": 1353,
        "end_line": 1357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ClearHeaderTest.test_clear_header#1359",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ClearHeaderTest",
        "signature": "tornado.test.web_test.ClearHeaderTest.test_clear_header(self)",
        "snippet": "    def test_clear_header(self):\n        response = self.fetch(\"/\")\n        self.assertTrue(\"h1\" not in response.headers)\n        self.assertEqual(response.headers[\"h2\"], \"bar\")",
        "begin_line": 1359,
        "end_line": 1362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1368",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_header(\"Content-Language\", \"en_US\")\n            self.write(\"hello\")",
        "begin_line": 1368,
        "end_line": 1370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Header304Test.test_304_headers#1372",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Header304Test",
        "signature": "tornado.test.web_test.Header304Test.test_304_headers(self)",
        "snippet": "    def test_304_headers(self):\n        response1 = self.fetch('/')\n        self.assertEqual(response1.headers[\"Content-Length\"], \"5\")\n        self.assertEqual(response1.headers[\"Content-Language\"], \"en_US\")\n\n        response2 = self.fetch('/', headers={\n            'If-None-Match': response1.headers[\"Etag\"]})\n        self.assertEqual(response2.code, 304)\n        self.assertTrue(\"Content-Length\" not in response2.headers)\n        self.assertTrue(\"Content-Language\" not in response2.headers)\n        # Not an entity header, but should not be added to 304s by chunking\n        self.assertTrue(\"Transfer-Encoding\" not in response2.headers)",
        "begin_line": 1372,
        "end_line": 1383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1389",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            reason = self.request.arguments.get('reason', [])\n            self.set_status(int(self.get_argument('code')),\n                            reason=reason[0] if reason else None)",
        "begin_line": 1389,
        "end_line": 1392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StatusReasonTest.get_http_client#1394",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StatusReasonTest",
        "signature": "tornado.test.web_test.StatusReasonTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # simple_httpclient only: curl doesn't expose the reason string\n        return SimpleAsyncHTTPClient(io_loop=self.io_loop)",
        "begin_line": 1394,
        "end_line": 1396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StatusReasonTest.test_status#1398",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StatusReasonTest",
        "signature": "tornado.test.web_test.StatusReasonTest.test_status(self)",
        "snippet": "    def test_status(self):\n        response = self.fetch(\"/?code=304\")\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.reason, \"Not Modified\")\n        response = self.fetch(\"/?code=304&reason=Foo\")\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.reason, \"Foo\")\n        response = self.fetch(\"/?code=682&reason=Bar\")\n        self.assertEqual(response.code, 682)\n        self.assertEqual(response.reason, \"Bar\")\n        with ExpectLog(app_log, 'Uncaught exception'):\n            response = self.fetch(\"/?code=682\")\n        self.assertEqual(response.code, 500)",
        "begin_line": 1398,
        "end_line": 1410,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1416",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(\"hello\")",
        "begin_line": 1416,
        "end_line": 1417,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DateHeaderTest.test_date_header#1419",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DateHeaderTest",
        "signature": "tornado.test.web_test.DateHeaderTest.test_date_header(self)",
        "snippet": "    def test_date_header(self):\n        response = self.fetch('/')\n        header_date = datetime.datetime(\n            *email.utils.parsedate(response.headers['Date'])[:6])\n        self.assertTrue(header_date - datetime.datetime.utcnow() <\n                        datetime.timedelta(seconds=2))",
        "begin_line": 1419,
        "end_line": 1424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1430",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            raise HTTPError(682, reason=\"Foo\")",
        "begin_line": 1430,
        "end_line": 1431,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.get_http_client#1433",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # simple_httpclient only: curl doesn't expose the reason string\n        return SimpleAsyncHTTPClient(io_loop=self.io_loop)",
        "begin_line": 1433,
        "end_line": 1435,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.test_raise_with_reason#1437",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.test_raise_with_reason(self)",
        "snippet": "    def test_raise_with_reason(self):\n        response = self.fetch(\"/\")\n        self.assertEqual(response.code, 682)\n        self.assertEqual(response.reason, \"Foo\")\n        self.assertIn(b'682: Foo', response.body)",
        "begin_line": 1437,
        "end_line": 1441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RaiseWithReasonTest.test_httperror_str#1443",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RaiseWithReasonTest",
        "signature": "tornado.test.web_test.RaiseWithReasonTest.test_httperror_str(self)",
        "snippet": "    def test_httperror_str(self):\n        self.assertEqual(str(HTTPError(682, reason=\"Foo\")), \"HTTP 682: Foo\")",
        "begin_line": 1443,
        "end_line": 1444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.get_handlers#1449",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        # note that if the handlers list is empty we get the default_host\n        # redirect fallback instead of a 404, so test with both an\n        # explicitly defined error handler and an implicit 404.\n        return [('/error', ErrorHandler, dict(status_code=417))]",
        "begin_line": 1449,
        "end_line": 1453,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.get_app_kwargs#1455",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(xsrf_cookies=True)",
        "begin_line": 1455,
        "end_line": 1456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.test_error_xsrf#1458",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.test_error_xsrf(self)",
        "snippet": "    def test_error_xsrf(self):\n        response = self.fetch('/error', method='POST', body='')\n        self.assertEqual(response.code, 417)",
        "begin_line": 1458,
        "end_line": 1460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ErrorHandlerXSRFTest.test_404_xsrf#1462",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ErrorHandlerXSRFTest",
        "signature": "tornado.test.web_test.ErrorHandlerXSRFTest.test_404_xsrf(self)",
        "snippet": "    def test_404_xsrf(self):\n        response = self.fetch('/404', method='POST', body='')\n        self.assertEqual(response.code, 404)",
        "begin_line": 1462,
        "end_line": 1464,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1470",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            if self.get_argument('vary', None):\n                self.set_header('Vary', self.get_argument('vary'))\n            self.write('hello world')",
        "begin_line": 1470,
        "end_line": 1473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.get_app_kwargs#1475",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(\n            gzip=True,\n            static_path=os.path.join(os.path.dirname(__file__), 'static'))",
        "begin_line": 1475,
        "end_line": 1478,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_gzip#1480",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_gzip(self)",
        "snippet": "    def test_gzip(self):\n        response = self.fetch('/')\n        # simple_httpclient renames the content-encoding header;\n        # curl_httpclient doesn't.\n        self.assertEqual(\n            response.headers.get(\n                'Content-Encoding',\n                response.headers.get('X-Consumed-Content-Encoding')),\n            'gzip')\n        self.assertEqual(response.headers['Vary'], 'Accept-Encoding')",
        "begin_line": 1480,
        "end_line": 1489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_gzip_static#1491",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_gzip_static(self)",
        "snippet": "    def test_gzip_static(self):\n        # The streaming responses in StaticFileHandler have subtle\n        # interactions with the gzip output so test this case separately.\n        response = self.fetch('/robots.txt')\n        self.assertEqual(\n            response.headers.get(\n                'Content-Encoding',\n                response.headers.get('X-Consumed-Content-Encoding')),\n            'gzip')\n        self.assertEqual(response.headers['Vary'], 'Accept-Encoding')",
        "begin_line": 1491,
        "end_line": 1500,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_gzip_not_requested#1502",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_gzip_not_requested(self)",
        "snippet": "    def test_gzip_not_requested(self):\n        response = self.fetch('/', use_gzip=False)\n        self.assertNotIn('Content-Encoding', response.headers)\n        self.assertEqual(response.headers['Vary'], 'Accept-Encoding')",
        "begin_line": 1502,
        "end_line": 1505,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GzipTestCase.test_vary_already_present#1507",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GzipTestCase",
        "signature": "tornado.test.web_test.GzipTestCase.test_vary_already_present(self)",
        "snippet": "    def test_vary_already_present(self):\n        response = self.fetch('/?vary=Accept-Language')\n        self.assertEqual(response.headers['Vary'],\n                         'Accept-Language, Accept-Encoding')",
        "begin_line": 1507,
        "end_line": 1510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.prepare#1516",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.prepare(self)",
        "snippet": "        def prepare(self):\n            self.write(dict(args=self.path_args, kwargs=self.path_kwargs))",
        "begin_line": 1516,
        "end_line": 1517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1519",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self, path)",
        "snippet": "        def get(self, path):\n            assert path == 'foo'\n            self.finish()",
        "begin_line": 1519,
        "end_line": 1521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PathArgsInPrepareTest.get_handlers#1523",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PathArgsInPrepareTest",
        "signature": "tornado.test.web_test.PathArgsInPrepareTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [('/pos/(.*)', self.Handler),\n                ('/kw/(?P<path>.*)', self.Handler)]",
        "begin_line": 1523,
        "end_line": 1525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PathArgsInPrepareTest.test_pos#1527",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PathArgsInPrepareTest",
        "signature": "tornado.test.web_test.PathArgsInPrepareTest.test_pos(self)",
        "snippet": "    def test_pos(self):\n        response = self.fetch('/pos/foo')\n        response.rethrow()\n        data = json_decode(response.body)\n        self.assertEqual(data, {'args': ['foo'], 'kwargs': {}})",
        "begin_line": 1527,
        "end_line": 1531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PathArgsInPrepareTest.test_kw#1533",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PathArgsInPrepareTest",
        "signature": "tornado.test.web_test.PathArgsInPrepareTest.test_kw(self)",
        "snippet": "    def test_kw(self):\n        response = self.fetch('/kw/foo')\n        response.rethrow()\n        data = json_decode(response.body)\n        self.assertEqual(data, {'args': [], 'kwargs': {'path': 'foo'}})",
        "begin_line": 1533,
        "end_line": 1537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1543",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.clear_all_cookies()\n            self.write('ok')",
        "begin_line": 1543,
        "end_line": 1545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ClearAllCookiesTest.test_clear_all_cookies#1547",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ClearAllCookiesTest",
        "signature": "tornado.test.web_test.ClearAllCookiesTest.test_clear_all_cookies(self)",
        "snippet": "    def test_clear_all_cookies(self):\n        response = self.fetch('/', headers={'Cookie': 'foo=bar; baz=xyzzy'})\n        set_cookies = sorted(response.headers.get_list('Set-Cookie'))\n        self.assertTrue(set_cookies[0].startswith('baz=;'))\n        self.assertTrue(set_cookies[1].startswith('foo=;'))",
        "begin_line": 1547,
        "end_line": 1551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1561",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            exc = self.get_argument('exc')\n            if exc == 'http':\n                raise HTTPError(410, \"no longer here\")\n            elif exc == 'zero':\n                1 / 0\n            elif exc == 'permission':\n                raise PermissionError('not allowed')",
        "begin_line": 1561,
        "end_line": 1568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.write_error#1570",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.write_error(self, status_code, **kwargs)",
        "snippet": "        def write_error(self, status_code, **kwargs):\n            if 'exc_info' in kwargs:\n                typ, value, tb = kwargs['exc_info']\n                if isinstance(value, PermissionError):\n                    self.set_status(403)\n                    self.write('PermissionError')\n                    return\n            RequestHandler.write_error(self, status_code, **kwargs)",
        "begin_line": 1570,
        "end_line": 1577,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.log_exception#1579",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.log_exception(self, typ, value, tb)",
        "snippet": "        def log_exception(self, typ, value, tb):\n            if isinstance(value, PermissionError):\n                app_log.warning('custom logging for PermissionError: %s',\n                                value.args[0])\n            else:\n                RequestHandler.log_exception(self, typ, value, tb)",
        "begin_line": 1579,
        "end_line": 1584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ExceptionHandlerTest.test_http_error#1586",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ExceptionHandlerTest",
        "signature": "tornado.test.web_test.ExceptionHandlerTest.test_http_error(self)",
        "snippet": "    def test_http_error(self):\n        # HTTPErrors are logged as warnings with no stack trace.\n        # TODO: extend ExpectLog to test this more precisely\n        with ExpectLog(gen_log, '.*no longer here'):\n            response = self.fetch('/?exc=http')\n            self.assertEqual(response.code, 410)",
        "begin_line": 1586,
        "end_line": 1591,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ExceptionHandlerTest.test_unknown_error#1593",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ExceptionHandlerTest",
        "signature": "tornado.test.web_test.ExceptionHandlerTest.test_unknown_error(self)",
        "snippet": "    def test_unknown_error(self):\n        # Unknown errors are logged as errors with a stack trace.\n        with ExpectLog(app_log, 'Uncaught exception'):\n            response = self.fetch('/?exc=zero')\n            self.assertEqual(response.code, 500)",
        "begin_line": 1593,
        "end_line": 1597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ExceptionHandlerTest.test_known_error#1599",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ExceptionHandlerTest",
        "signature": "tornado.test.web_test.ExceptionHandlerTest.test_known_error(self)",
        "snippet": "    def test_known_error(self):\n        # log_exception can override logging behavior, and write_error\n        # can override the response.\n        with ExpectLog(app_log,\n                       'custom logging for PermissionError: not allowed'):\n            response = self.fetch('/?exc=permission')\n            self.assertEqual(response.code, 403)",
        "begin_line": 1599,
        "end_line": 1605,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1611",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            1/0",
        "begin_line": 1611,
        "end_line": 1612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.log_exception#1614",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.log_exception(self, typ, value, tb)",
        "snippet": "        def log_exception(self, typ, value, tb):\n            1/0",
        "begin_line": 1614,
        "end_line": 1615,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.BuggyLoggingTest.test_buggy_log_exception#1617",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.BuggyLoggingTest",
        "signature": "tornado.test.web_test.BuggyLoggingTest.test_buggy_log_exception(self)",
        "snippet": "    def test_buggy_log_exception(self):\n        # Something gets logged even though the application's\n        # logger is broken.\n        with ExpectLog(app_log, '.*'):\n            self.fetch('/')",
        "begin_line": 1617,
        "end_line": 1621,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1630",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.render('foo.html')",
        "begin_line": 1630,
        "end_line": 1631,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.value#1633",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.value(self)",
        "snippet": "        def value(self):\n            return self.get_argument(\"value\")",
        "begin_line": 1633,
        "end_line": 1634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs#1636",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        def my_ui_method(handler, x):\n            return \"In my_ui_method(%s) with handler value %s.\" % (\n                x, handler.value())\n\n        class MyModule(UIModule):\n            def render(self, x):\n                return \"In MyModule(%s) with handler value %s.\" % (\n                    x, self.handler.value())\n\n        loader = DictLoader({\n            'foo.html': '{{ my_ui_method(42) }} {% module MyModule(123) %}',\n        })\n        return dict(template_loader=loader,\n                    ui_methods={'my_ui_method': my_ui_method},\n                    ui_modules={'MyModule': MyModule})",
        "begin_line": 1636,
        "end_line": 1651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.my_ui_method#1637",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.my_ui_method(handler, x)",
        "snippet": "        def my_ui_method(handler, x):\n            return \"In my_ui_method(%s) with handler value %s.\" % (\n                x, handler.value())",
        "begin_line": 1637,
        "end_line": 1639,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyModule.get_app_kwargs#1636",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyModule",
        "signature": "tornado.test.web_test.MyModule.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        def my_ui_method(handler, x):\n            return \"In my_ui_method(%s) with handler value %s.\" % (\n                x, handler.value())\n\n        class MyModule(UIModule):\n            def render(self, x):\n                return \"In MyModule(%s) with handler value %s.\" % (\n                    x, self.handler.value())\n\n        loader = DictLoader({\n            'foo.html': '{{ my_ui_method(42) }} {% module MyModule(123) %}',\n        })\n        return dict(template_loader=loader,\n                    ui_methods={'my_ui_method': my_ui_method},\n                    ui_modules={'MyModule': MyModule})",
        "begin_line": 1636,
        "end_line": 1651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MyModule.render#1642",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MyModule",
        "signature": "tornado.test.web_test.MyModule.render(self, x)",
        "snippet": "            def render(self, x):\n                return \"In MyModule(%s) with handler value %s.\" % (\n                    x, self.handler.value())",
        "begin_line": 1642,
        "end_line": 1644,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.tearDown#1653",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(UIMethodUIModuleTest, self).tearDown()\n        # TODO: fix template loader caching so this isn't necessary.\n        RequestHandler._template_loaders.clear()",
        "begin_line": 1653,
        "end_line": 1656,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UIMethodUIModuleTest.test_ui_method#1658",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UIMethodUIModuleTest",
        "signature": "tornado.test.web_test.UIMethodUIModuleTest.test_ui_method(self)",
        "snippet": "    def test_ui_method(self):\n        response = self.fetch('/?value=asdf')\n        self.assertEqual(response.body,\n                         b'In my_ui_method(42) with handler value asdf. '\n                         b'In MyModule(123) with handler value asdf.')",
        "begin_line": 1658,
        "end_line": 1662,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1668",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            try:\n                self.get_argument('foo')\n                self.write({})\n            except MissingArgumentError as e:\n                self.write({'arg_name': e.arg_name,\n                            'log_message': e.log_message})",
        "begin_line": 1668,
        "end_line": 1674,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetArgumentErrorTest.test_catch_error#1676",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetArgumentErrorTest",
        "signature": "tornado.test.web_test.GetArgumentErrorTest.test_catch_error(self)",
        "snippet": "    def test_catch_error(self):\n        response = self.fetch('/')\n        self.assertEqual(json_decode(response.body),\n                         {'arg_name': 'foo',\n                          'log_message': 'Missing argument foo'})",
        "begin_line": 1676,
        "end_line": 1680,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1688",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            from tornado.ioloop import IOLoop\n            IOLoop.current().add_callback(lambda: 1 / 0)\n            IOLoop.current().add_callback(lambda: 1 / 0)",
        "begin_line": 1688,
        "end_line": 1691,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.log_exception#1693",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.log_exception(self, typ, value, tb)",
        "snippet": "        def log_exception(self, typ, value, tb):\n            MultipleExceptionTest.Handler.exc_count += 1",
        "begin_line": 1693,
        "end_line": 1694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.MultipleExceptionTest.test_multi_exception#1696",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.MultipleExceptionTest",
        "signature": "tornado.test.web_test.MultipleExceptionTest.test_multi_exception(self)",
        "snippet": "    def test_multi_exception(self):\n        # This test verifies that multiple exceptions raised into the same\n        # ExceptionStackContext do not generate extraneous log entries\n        # due to \"Cannot send error response after headers written\".\n        # log_exception is called, but it does not proceed to send_error.\n        response = self.fetch('/')\n        self.assertEqual(response.code, 500)\n        response = self.fetch('/')\n        self.assertEqual(response.code, 500)\n        # Each of our two requests generated two exceptions, we should have\n        # seen at least three of them by now (the fourth may still be\n        # in the queue).\n        self.assertGreater(MultipleExceptionTest.Handler.exc_count, 2)",
        "begin_line": 1696,
        "end_line": 1708,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.prepare#1714",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.prepare(self)",
        "snippet": "        def prepare(self):\n            self.current_user = 'Ben'\n            self.locale = locale.get('en_US')",
        "begin_line": 1714,
        "end_line": 1716,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get_user_locale#1718",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get_user_locale(self)",
        "snippet": "        def get_user_locale(self):\n            raise NotImplementedError()",
        "begin_line": 1718,
        "end_line": 1719,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get_current_user#1721",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get_current_user(self)",
        "snippet": "        def get_current_user(self):\n            raise NotImplementedError()",
        "begin_line": 1721,
        "end_line": 1722,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1724",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write('Hello %s (%s)' % (self.current_user, self.locale.code))",
        "begin_line": 1724,
        "end_line": 1725,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SetLazyPropertiesTest.test_set_properties#1727",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SetLazyPropertiesTest",
        "signature": "tornado.test.web_test.SetLazyPropertiesTest.test_set_properties(self)",
        "snippet": "    def test_set_properties(self):\n        # Ensure that current_user can be assigned to normally for apps\n        # that want to forgo the lazy get_current_user property\n        response = self.fetch('/')\n        self.assertEqual(response.body, b'Hello Ben (en_US)')",
        "begin_line": 1727,
        "end_line": 1731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.get_app_kwargs#1736",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class WithoutUserModule(UIModule):\n            def render(self):\n                return ''\n\n        class WithUserModule(UIModule):\n            def render(self):\n                return str(self.current_user)\n\n        loader = DictLoader({\n            'without_user.html': '',\n            'with_user.html': '{{ current_user }}',\n            'without_user_module.html': '{% module WithoutUserModule() %}',\n            'with_user_module.html': '{% module WithUserModule() %}',\n        })\n        return dict(template_loader=loader,\n                    ui_modules={'WithUserModule': WithUserModule,\n                                'WithoutUserModule': WithoutUserModule})",
        "begin_line": 1736,
        "end_line": 1753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModule.get_app_kwargs#1736",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModule",
        "signature": "tornado.test.web_test.WithoutUserModule.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class WithoutUserModule(UIModule):\n            def render(self):\n                return ''\n\n        class WithUserModule(UIModule):\n            def render(self):\n                return str(self.current_user)\n\n        loader = DictLoader({\n            'without_user.html': '',\n            'with_user.html': '{{ current_user }}',\n            'without_user_module.html': '{% module WithoutUserModule() %}',\n            'with_user_module.html': '{% module WithUserModule() %}',\n        })\n        return dict(template_loader=loader,\n                    ui_modules={'WithUserModule': WithUserModule,\n                                'WithoutUserModule': WithoutUserModule})",
        "begin_line": 1736,
        "end_line": 1753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModule.render#1738",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModule",
        "signature": "tornado.test.web_test.WithoutUserModule.render(self)",
        "snippet": "            def render(self):\n                return ''",
        "begin_line": 1738,
        "end_line": 1739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModule.get_app_kwargs#1736",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModule",
        "signature": "tornado.test.web_test.WithUserModule.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class WithoutUserModule(UIModule):\n            def render(self):\n                return ''\n\n        class WithUserModule(UIModule):\n            def render(self):\n                return str(self.current_user)\n\n        loader = DictLoader({\n            'without_user.html': '',\n            'with_user.html': '{{ current_user }}',\n            'without_user_module.html': '{% module WithoutUserModule() %}',\n            'with_user_module.html': '{% module WithUserModule() %}',\n        })\n        return dict(template_loader=loader,\n                    ui_modules={'WithUserModule': WithUserModule,\n                                'WithoutUserModule': WithoutUserModule})",
        "begin_line": 1736,
        "end_line": 1753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModule.render#1742",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModule",
        "signature": "tornado.test.web_test.WithUserModule.render(self)",
        "snippet": "            def render(self):\n                return str(self.current_user)",
        "begin_line": 1742,
        "end_line": 1743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.tearDown#1755",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(GetCurrentUserTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 1755,
        "end_line": 1757,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserHandler.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserHandler",
        "signature": "tornado.test.web_test.CurrentUserHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserHandler.prepare#1761",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserHandler",
        "signature": "tornado.test.web_test.CurrentUserHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                self.has_loaded_current_user = False",
        "begin_line": 1761,
        "end_line": 1762,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserHandler.get_current_user#1764",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserHandler",
        "signature": "tornado.test.web_test.CurrentUserHandler.get_current_user(self)",
        "snippet": "            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''",
        "begin_line": 1764,
        "end_line": 1766,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserHandler.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserHandler",
        "signature": "tornado.test.web_test.WithoutUserHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserHandler.get#1769",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserHandler",
        "signature": "tornado.test.web_test.WithoutUserHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 1769,
        "end_line": 1771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserHandler.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserHandler",
        "signature": "tornado.test.web_test.WithUserHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserHandler.get#1774",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserHandler",
        "signature": "tornado.test.web_test.WithUserHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 1774,
        "end_line": 1776,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserModuleHandler.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserModuleHandler",
        "signature": "tornado.test.web_test.CurrentUserModuleHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CurrentUserModuleHandler.get_template_namespace#1779",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CurrentUserModuleHandler",
        "signature": "tornado.test.web_test.CurrentUserModuleHandler.get_template_namespace(self)",
        "snippet": "            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui",
        "begin_line": 1779,
        "end_line": 1783,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModuleHandler.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModuleHandler",
        "signature": "tornado.test.web_test.WithoutUserModuleHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithoutUserModuleHandler.get#1786",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithoutUserModuleHandler",
        "signature": "tornado.test.web_test.WithoutUserModuleHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 1786,
        "end_line": 1788,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModuleHandler.get_handlers#1759",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModuleHandler",
        "signature": "tornado.test.web_test.WithUserModuleHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class CurrentUserHandler(RequestHandler):\n            def prepare(self):\n                self.has_loaded_current_user = False\n\n            def get_current_user(self):\n                self.has_loaded_current_user = True\n                return ''\n\n        class WithoutUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('without_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserHandler(CurrentUserHandler):\n            def get(self):\n                self.render_string('with_user.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class CurrentUserModuleHandler(CurrentUserHandler):\n            def get_template_namespace(self):\n                # If RequestHandler.get_template_namespace is called, then\n                # get_current_user is evaluated. Until #820 is fixed, this\n                # is a small hack to circumvent the issue.\n                return self.ui\n\n        class WithoutUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('without_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        class WithUserModuleHandler(CurrentUserModuleHandler):\n            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))\n\n        return [('/without_user', WithoutUserHandler),\n                ('/with_user', WithUserHandler),\n                ('/without_user_module', WithoutUserModuleHandler),\n                ('/with_user_module', WithUserModuleHandler)]",
        "begin_line": 1759,
        "end_line": 1798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.WithUserModuleHandler.get#1791",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.WithUserModuleHandler",
        "signature": "tornado.test.web_test.WithUserModuleHandler.get(self)",
        "snippet": "            def get(self):\n                self.render_string('with_user_module.html')\n                self.finish(str(self.has_loaded_current_user))",
        "begin_line": 1791,
        "end_line": 1793,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_is_lazy#1801",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_is_lazy(self)",
        "snippet": "    def test_get_current_user_is_lazy(self):\n        # TODO: Make this test pass. See #820.\n        response = self.fetch('/without_user')\n        self.assertEqual(response.body, b'False')",
        "begin_line": 1801,
        "end_line": 1804,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_works#1806",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_works(self)",
        "snippet": "    def test_get_current_user_works(self):\n        response = self.fetch('/with_user')\n        self.assertEqual(response.body, b'True')",
        "begin_line": 1806,
        "end_line": 1808,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy#1810",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy(self)",
        "snippet": "    def test_get_current_user_from_ui_module_is_lazy(self):\n        response = self.fetch('/without_user_module')\n        self.assertEqual(response.body, b'False')",
        "begin_line": 1810,
        "end_line": 1812,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_works#1814",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.GetCurrentUserTest",
        "signature": "tornado.test.web_test.GetCurrentUserTest.test_get_current_user_from_ui_module_works(self)",
        "snippet": "    def test_get_current_user_from_ui_module_works(self):\n        response = self.fetch('/with_user_module')\n        self.assertEqual(response.body, b'True')",
        "begin_line": 1814,
        "end_line": 1816,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods#1824",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UnimplementedHTTPMethodsTest",
        "signature": "tornado.test.web_test.UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods(self)",
        "snippet": "    def test_unimplemented_standard_methods(self):\n        for method in ['HEAD', 'GET', 'DELETE', 'OPTIONS']:\n            response = self.fetch('/', method=method)\n            self.assertEqual(response.code, 405)\n        for method in ['POST', 'PUT']:\n            response = self.fetch('/', method=method, body=b'')\n            self.assertEqual(response.code, 405)",
        "begin_line": 1824,
        "end_line": 1830,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.other#1837",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.other(self)",
        "snippet": "        def other(self):\n            # Even though this method exists, it won't get called automatically\n            # because it is not in SUPPORTED_METHODS.\n            self.write('other')",
        "begin_line": 1837,
        "end_line": 1840,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_patch#1842",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest",
        "signature": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_patch(self)",
        "snippet": "    def test_unimplemented_patch(self):\n        # PATCH is recently standardized; Tornado supports it by default\n        # but wsgiref.validate doesn't like it.\n        response = self.fetch('/', method='PATCH', body=b'')\n        self.assertEqual(response.code, 405)",
        "begin_line": 1842,
        "end_line": 1846,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_other#1848",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.UnimplementedNonStandardMethodsTest",
        "signature": "tornado.test.web_test.UnimplementedNonStandardMethodsTest.test_unimplemented_other(self)",
        "snippet": "    def test_unimplemented_other(self):\n        response = self.fetch('/', method='OTHER',\n                              allow_nonstandard_methods=True)\n        self.assertEqual(response.code, 405)",
        "begin_line": 1848,
        "end_line": 1851,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.method#1857",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.method(self)",
        "snippet": "        def method(self):\n            self.write(self.request.method)",
        "begin_line": 1857,
        "end_line": 1858,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AllHTTPMethodsTest.test_standard_methods#1862",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AllHTTPMethodsTest",
        "signature": "tornado.test.web_test.AllHTTPMethodsTest.test_standard_methods(self)",
        "snippet": "    def test_standard_methods(self):\n        response = self.fetch('/', method='HEAD')\n        self.assertEqual(response.body, b'')\n        for method in ['GET', 'DELETE', 'OPTIONS']:\n            response = self.fetch('/', method=method)\n            self.assertEqual(response.body, utf8(method))\n        for method in ['POST', 'PUT']:\n            response = self.fetch('/', method=method, body=b'')\n            self.assertEqual(response.body, utf8(method))",
        "begin_line": 1862,
        "end_line": 1870,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.patch#1877",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.patch(self)",
        "snippet": "        def patch(self):\n            self.write('patch')",
        "begin_line": 1877,
        "end_line": 1878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.other#1880",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.other(self)",
        "snippet": "        def other(self):\n            self.write('other')",
        "begin_line": 1880,
        "end_line": 1881,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PatchMethodTest.test_patch#1883",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PatchMethodTest",
        "signature": "tornado.test.web_test.PatchMethodTest.test_patch(self)",
        "snippet": "    def test_patch(self):\n        response = self.fetch('/', method='PATCH', body=b'')\n        self.assertEqual(response.body, b'patch')",
        "begin_line": 1883,
        "end_line": 1885,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.PatchMethodTest.test_other#1887",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.PatchMethodTest",
        "signature": "tornado.test.web_test.PatchMethodTest.test_other(self)",
        "snippet": "    def test_other(self):\n        response = self.fetch('/', method='OTHER',\n                              allow_nonstandard_methods=True)\n        self.assertEqual(response.body, b'other')",
        "begin_line": 1887,
        "end_line": 1890,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.prepare#1896",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.prepare(self)",
        "snippet": "        def prepare(self):\n            self.finish('done')",
        "begin_line": 1896,
        "end_line": 1897,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#1899",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            # It's difficult to assert for certain that a method did not\n            # or will not be called in an asynchronous context, but this\n            # will be logged noisily if it is reached.\n            raise Exception('should not reach this method')",
        "begin_line": 1899,
        "end_line": 1903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinishInPrepareTest.test_finish_in_prepare#1905",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinishInPrepareTest",
        "signature": "tornado.test.web_test.FinishInPrepareTest.test_finish_in_prepare(self)",
        "snippet": "    def test_finish_in_prepare(self):\n        response = self.fetch('/')\n        self.assertEqual(response.body, b'done')",
        "begin_line": 1905,
        "end_line": 1907,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Default404Test.get_handlers#1912",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Default404Test",
        "signature": "tornado.test.web_test.Default404Test.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        # If there are no handlers at all a default redirect handler gets added.\n        return [('/foo', RequestHandler)]",
        "begin_line": 1912,
        "end_line": 1914,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Default404Test.test_404#1916",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Default404Test",
        "signature": "tornado.test.web_test.Default404Test.test_404(self)",
        "snippet": "    def test_404(self):\n        response = self.fetch('/')\n        self.assertEqual(response.code, 404)\n        self.assertEqual(response.body,\n                         b'<html><title>404: Not Found</title>'\n                         b'<body>404: Not Found</body></html>')",
        "begin_line": 1916,
        "end_line": 1921,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Test.get_handlers#1926",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Test",
        "signature": "tornado.test.web_test.Custom404Test.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [('/foo', RequestHandler)]",
        "begin_line": 1926,
        "end_line": 1927,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Test.get_app_kwargs#1929",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Test",
        "signature": "tornado.test.web_test.Custom404Test.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class Custom404Handler(RequestHandler):\n            def get(self):\n                self.set_status(404)\n                self.write('custom 404 response')\n\n        return dict(default_handler_class=Custom404Handler)",
        "begin_line": 1929,
        "end_line": 1935,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Handler.get_app_kwargs#1929",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Handler",
        "signature": "tornado.test.web_test.Custom404Handler.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        class Custom404Handler(RequestHandler):\n            def get(self):\n                self.set_status(404)\n                self.write('custom 404 response')\n\n        return dict(default_handler_class=Custom404Handler)",
        "begin_line": 1929,
        "end_line": 1935,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Handler.get#1931",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Handler",
        "signature": "tornado.test.web_test.Custom404Handler.get(self)",
        "snippet": "            def get(self):\n                self.set_status(404)\n                self.write('custom 404 response')",
        "begin_line": 1931,
        "end_line": 1933,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Custom404Test.test_404#1937",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Custom404Test",
        "signature": "tornado.test.web_test.Custom404Test.test_404(self)",
        "snippet": "    def test_404(self):\n        response = self.fetch('/')\n        self.assertEqual(response.code, 404)\n        self.assertEqual(response.body, b'custom 404 response')",
        "begin_line": 1937,
        "end_line": 1940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_handlers#1945",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandlerArgumentsTest",
        "signature": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [('/foo', RequestHandler)]",
        "begin_line": 1945,
        "end_line": 1946,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_app_kwargs#1948",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandlerArgumentsTest",
        "signature": "tornado.test.web_test.DefaultHandlerArgumentsTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(default_handler_class=ErrorHandler,\n                    default_handler_args=dict(status_code=403))",
        "begin_line": 1948,
        "end_line": 1950,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DefaultHandlerArgumentsTest.test_403#1952",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DefaultHandlerArgumentsTest",
        "signature": "tornado.test.web_test.DefaultHandlerArgumentsTest.test_403(self)",
        "snippet": "    def test_403(self):\n        response = self.fetch('/')\n        self.assertEqual(response.code, 403)",
        "begin_line": 1952,
        "end_line": 1954,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HandlerByNameTest.get_handlers#1959",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HandlerByNameTest",
        "signature": "tornado.test.web_test.HandlerByNameTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        # All three are equivalent.\n        return [('/hello1', HelloHandler),\n                ('/hello2', 'tornado.test.web_test.HelloHandler'),\n                url('/hello3', 'tornado.test.web_test.HelloHandler'),\n                ]",
        "begin_line": 1959,
        "end_line": 1964,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.HandlerByNameTest.test_handler_by_name#1966",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.HandlerByNameTest",
        "signature": "tornado.test.web_test.HandlerByNameTest.test_handler_by_name(self)",
        "snippet": "    def test_handler_by_name(self):\n        resp = self.fetch('/hello1')\n        self.assertEqual(resp.body, b'hello')\n        resp = self.fetch('/hello2')\n        self.assertEqual(resp.body, b'hello')\n        resp = self.fetch('/hello3')\n        self.assertEqual(resp.body, b'hello')",
        "begin_line": 1966,
        "end_line": 1972,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.get_handlers#1976",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [('/stream_body', StreamingBodyHandler, dict(test=self)),\n                ('/early_return', EarlyReturnHandler),\n                ('/close_detection', CloseDetectionHandler, dict(test=self))]",
        "begin_line": 1976,
        "end_line": 2010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.get_handlers#1976",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [('/stream_body', StreamingBodyHandler, dict(test=self)),\n                ('/early_return', EarlyReturnHandler),\n                ('/close_detection', CloseDetectionHandler, dict(test=self))]",
        "begin_line": 1976,
        "end_line": 2010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.initialize#1979",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.initialize(self, test)",
        "snippet": "            def initialize(self, test):\n                self.test = test",
        "begin_line": 1979,
        "end_line": 1980,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.prepare#1982",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                self.test.prepared.set_result(None)",
        "begin_line": 1982,
        "end_line": 1983,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.data_received#1985",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.data_received(self, data)",
        "snippet": "            def data_received(self, data):\n                self.test.data.set_result(data)",
        "begin_line": 1985,
        "end_line": 1986,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingBodyHandler.get#1988",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingBodyHandler",
        "signature": "tornado.test.web_test.StreamingBodyHandler.get(self)",
        "snippet": "            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})",
        "begin_line": 1988,
        "end_line": 1990,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EarlyReturnHandler.get_handlers#1976",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EarlyReturnHandler",
        "signature": "tornado.test.web_test.EarlyReturnHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [('/stream_body', StreamingBodyHandler, dict(test=self)),\n                ('/early_return', EarlyReturnHandler),\n                ('/close_detection', CloseDetectionHandler, dict(test=self))]",
        "begin_line": 1976,
        "end_line": 2010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EarlyReturnHandler.prepare#1994",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EarlyReturnHandler",
        "signature": "tornado.test.web_test.EarlyReturnHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)",
        "begin_line": 1994,
        "end_line": 1997,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CloseDetectionHandler.get_handlers#1976",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CloseDetectionHandler",
        "signature": "tornado.test.web_test.CloseDetectionHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        @stream_request_body\n        class StreamingBodyHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def prepare(self):\n                self.test.prepared.set_result(None)\n\n            def data_received(self, data):\n                self.test.data.set_result(data)\n\n            def get(self):\n                self.test.finished.set_result(None)\n                self.write({})\n\n        @stream_request_body\n        class EarlyReturnHandler(RequestHandler):\n            def prepare(self):\n                # If we finish the response in prepare, it won't continue to\n                # the (non-existent) data_received.\n                raise HTTPError(401)\n\n        @stream_request_body\n        class CloseDetectionHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n\n            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)\n\n        return [('/stream_body', StreamingBodyHandler, dict(test=self)),\n                ('/early_return', EarlyReturnHandler),\n                ('/close_detection', CloseDetectionHandler, dict(test=self))]",
        "begin_line": 1976,
        "end_line": 2010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CloseDetectionHandler.initialize#2001",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CloseDetectionHandler",
        "signature": "tornado.test.web_test.CloseDetectionHandler.initialize(self, test)",
        "snippet": "            def initialize(self, test):\n                self.test = test",
        "begin_line": 2001,
        "end_line": 2002,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CloseDetectionHandler.on_connection_close#2004",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CloseDetectionHandler",
        "signature": "tornado.test.web_test.CloseDetectionHandler.on_connection_close(self)",
        "snippet": "            def on_connection_close(self):\n                super(CloseDetectionHandler, self).on_connection_close()\n                self.test.close_future.set_result(None)",
        "begin_line": 2004,
        "end_line": 2006,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.connect#2012",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.connect(self, url, connection_close)",
        "snippet": "    def connect(self, url, connection_close):\n        # Use a raw connection so we can control the sending of data.\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        s.connect((\"127.0.0.1\", self.get_http_port()))\n        stream = IOStream(s, io_loop=self.io_loop)\n        stream.write(b\"GET \" + url + b\" HTTP/1.1\\r\\n\")\n        if connection_close:\n            stream.write(b\"Connection: close\\r\\n\")\n        stream.write(b\"Transfer-Encoding: chunked\\r\\n\\r\\n\")\n        return stream",
        "begin_line": 2012,
        "end_line": 2021,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_streaming_body#2024",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_streaming_body(self)",
        "snippet": "    def test_streaming_body(self):\n        self.prepared = Future()\n        self.data = Future()\n        self.finished = Future()\n\n        stream = self.connect(b\"/stream_body\", connection_close=True)\n        yield self.prepared\n        stream.write(b\"4\\r\\nasdf\\r\\n\")\n        # Ensure the first chunk is received before we send the second.\n        data = yield self.data\n        self.assertEqual(data, b\"asdf\")\n        self.data = Future()\n        stream.write(b\"4\\r\\nqwer\\r\\n\")\n        data = yield self.data\n        self.assertEquals(data, b\"qwer\")\n        stream.write(b\"0\\r\\n\")\n        yield self.finished\n        data = yield gen.Task(stream.read_until_close)\n        # This would ideally use an HTTP1Connection to read the response.\n        self.assertTrue(data.endswith(b\"{}\"))\n        stream.close()",
        "begin_line": 2024,
        "end_line": 2044,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return#2047",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return(self)",
        "snippet": "    def test_early_return(self):\n        stream = self.connect(b\"/early_return\", connection_close=False)\n        data = yield gen.Task(stream.read_until_close)\n        self.assertTrue(data.startswith(b\"HTTP/1.1 401\"))",
        "begin_line": 2047,
        "end_line": 2050,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return_with_data#2053",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_early_return_with_data(self)",
        "snippet": "    def test_early_return_with_data(self):\n        stream = self.connect(b\"/early_return\", connection_close=False)\n        stream.write(b\"4\\r\\nasdf\\r\\n\")\n        data = yield gen.Task(stream.read_until_close)\n        self.assertTrue(data.startswith(b\"HTTP/1.1 401\"))",
        "begin_line": 2053,
        "end_line": 2057,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestBodyTest.test_close_during_upload#2060",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestBodyTest",
        "signature": "tornado.test.web_test.StreamingRequestBodyTest.test_close_during_upload(self)",
        "snippet": "    def test_close_during_upload(self):\n        self.close_future = Future()\n        stream = self.connect(b\"/close_detection\", connection_close=False)\n        stream.close()\n        yield self.close_future",
        "begin_line": 2060,
        "end_line": 2064,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestFlowControlTest.get_handlers#2068",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.StreamingRequestFlowControlTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        from tornado.ioloop import IOLoop\n\n        # Each method in this handler returns a Future and yields to the\n        # IOLoop so the future is not immediately ready.  Ensure that the\n        # Futures are respected and no method is called before the previous\n        # one has completed.\n        @stream_request_body\n        class FlowControlHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n                self.method = None\n                self.methods = []\n\n            @contextlib.contextmanager\n            def in_method(self, method):\n                if self.method is not None:\n                    self.test.fail(\"entered method %s while in %s\" %\n                                   (method, self.method))\n                self.method = method\n                self.methods.append(method)\n                try:\n                    yield\n                finally:\n                    self.method = None\n\n            @gen.coroutine\n            def prepare(self):\n                # Note that asynchronous prepare() does not block data_received,\n                # so we don't use in_method here.\n                self.methods.append('prepare')\n                yield gen.Task(IOLoop.current().add_callback)\n\n            @gen.coroutine\n            def data_received(self, data):\n                with self.in_method('data_received'):\n                    yield gen.Task(IOLoop.current().add_callback)\n\n            @gen.coroutine\n            def post(self):\n                with self.in_method('post'):\n                    yield gen.Task(IOLoop.current().add_callback)\n                self.write(dict(methods=self.methods))\n\n        return [('/', FlowControlHandler, dict(test=self))]",
        "begin_line": 2068,
        "end_line": 2112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.get_handlers#2068",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        from tornado.ioloop import IOLoop\n\n        # Each method in this handler returns a Future and yields to the\n        # IOLoop so the future is not immediately ready.  Ensure that the\n        # Futures are respected and no method is called before the previous\n        # one has completed.\n        @stream_request_body\n        class FlowControlHandler(RequestHandler):\n            def initialize(self, test):\n                self.test = test\n                self.method = None\n                self.methods = []\n\n            @contextlib.contextmanager\n            def in_method(self, method):\n                if self.method is not None:\n                    self.test.fail(\"entered method %s while in %s\" %\n                                   (method, self.method))\n                self.method = method\n                self.methods.append(method)\n                try:\n                    yield\n                finally:\n                    self.method = None\n\n            @gen.coroutine\n            def prepare(self):\n                # Note that asynchronous prepare() does not block data_received,\n                # so we don't use in_method here.\n                self.methods.append('prepare')\n                yield gen.Task(IOLoop.current().add_callback)\n\n            @gen.coroutine\n            def data_received(self, data):\n                with self.in_method('data_received'):\n                    yield gen.Task(IOLoop.current().add_callback)\n\n            @gen.coroutine\n            def post(self):\n                with self.in_method('post'):\n                    yield gen.Task(IOLoop.current().add_callback)\n                self.write(dict(methods=self.methods))\n\n        return [('/', FlowControlHandler, dict(test=self))]",
        "begin_line": 2068,
        "end_line": 2112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.initialize#2077",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.initialize(self, test)",
        "snippet": "            def initialize(self, test):\n                self.test = test\n                self.method = None\n                self.methods = []",
        "begin_line": 2077,
        "end_line": 2080,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.in_method#2083",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.in_method(self, method)",
        "snippet": "            def in_method(self, method):\n                if self.method is not None:\n                    self.test.fail(\"entered method %s while in %s\" %\n                                   (method, self.method))\n                self.method = method\n                self.methods.append(method)\n                try:\n                    yield\n                finally:\n                    self.method = None",
        "begin_line": 2083,
        "end_line": 2092,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.prepare#2095",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                # Note that asynchronous prepare() does not block data_received,\n                # so we don't use in_method here.\n                self.methods.append('prepare')\n                yield gen.Task(IOLoop.current().add_callback)",
        "begin_line": 2095,
        "end_line": 2099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.data_received#2102",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.data_received(self, data)",
        "snippet": "            def data_received(self, data):\n                with self.in_method('data_received'):\n                    yield gen.Task(IOLoop.current().add_callback)",
        "begin_line": 2102,
        "end_line": 2104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FlowControlHandler.post#2107",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FlowControlHandler",
        "signature": "tornado.test.web_test.FlowControlHandler.post(self)",
        "snippet": "            def post(self):\n                with self.in_method('post'):\n                    yield gen.Task(IOLoop.current().add_callback)\n                self.write(dict(methods=self.methods))",
        "begin_line": 2107,
        "end_line": 2110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestFlowControlTest.get_httpserver_options#2114",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.StreamingRequestFlowControlTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        # Use a small chunk size so flow control is relevant even though\n        # all the data arrives at once.\n        return dict(chunk_size=10)",
        "begin_line": 2114,
        "end_line": 2117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.StreamingRequestFlowControlTest.test_flow_control#2119",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.StreamingRequestFlowControlTest",
        "signature": "tornado.test.web_test.StreamingRequestFlowControlTest.test_flow_control(self)",
        "snippet": "    def test_flow_control(self):\n        response = self.fetch('/', body='abcdefghijklmnopqrstuvwxyz',\n                              method='POST')\n        response.rethrow()\n        self.assertEqual(json_decode(response.body),\n                         dict(methods=['prepare', 'data_received',\n                                       'data_received', 'data_received',\n                                       'post']))",
        "begin_line": 2119,
        "end_line": 2126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.IncorrectContentLengthTest.get_handlers#2131",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.IncorrectContentLengthTest",
        "signature": "tornado.test.web_test.IncorrectContentLengthTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n        self.server_error = None\n\n        # Manually set a content-length that doesn't match the actual content.\n        class TooHigh(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        class TooLow(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        return [('/high', TooHigh),\n                ('/low', TooLow)]",
        "begin_line": 2131,
        "end_line": 2155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooHigh.get_handlers#2131",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooHigh",
        "signature": "tornado.test.web_test.TooHigh.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n        self.server_error = None\n\n        # Manually set a content-length that doesn't match the actual content.\n        class TooHigh(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        class TooLow(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        return [('/high', TooHigh),\n                ('/low', TooLow)]",
        "begin_line": 2131,
        "end_line": 2155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooHigh.get#2137",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooHigh",
        "signature": "tornado.test.web_test.TooHigh.get(self)",
        "snippet": "            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise",
        "begin_line": 2137,
        "end_line": 2143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooLow.get_handlers#2131",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooLow",
        "signature": "tornado.test.web_test.TooLow.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        test = self\n        self.server_error = None\n\n        # Manually set a content-length that doesn't match the actual content.\n        class TooHigh(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"42\")\n                try:\n                    self.finish(\"ok\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        class TooLow(RequestHandler):\n            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise\n\n        return [('/high', TooHigh),\n                ('/low', TooLow)]",
        "begin_line": 2131,
        "end_line": 2155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.TooLow.get#2146",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.TooLow",
        "signature": "tornado.test.web_test.TooLow.get(self)",
        "snippet": "            def get(self):\n                self.set_header(\"Content-Length\", \"2\")\n                try:\n                    self.finish(\"hello\")\n                except Exception as e:\n                    test.server_error = e\n                    raise",
        "begin_line": 2146,
        "end_line": 2152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_high#2157",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.IncorrectContentLengthTest",
        "signature": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_high(self)",
        "snippet": "    def test_content_length_too_high(self):\n        # When the content-length is too high, the connection is simply\n        # closed without completing the response.  An error is logged on\n        # the server.\n        with ExpectLog(app_log, \"(Uncaught exception|Exception in callback)\"):\n            with ExpectLog(gen_log,\n                           \"(Cannot send error response after headers written\"\n                           \"|Failed to flush partial response)\"):\n                response = self.fetch(\"/high\")\n        self.assertEqual(response.code, 599)\n        self.assertEqual(str(self.server_error),\n                         \"Tried to write 40 bytes less than Content-Length\")",
        "begin_line": 2157,
        "end_line": 2168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_low#2170",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.IncorrectContentLengthTest",
        "signature": "tornado.test.web_test.IncorrectContentLengthTest.test_content_length_too_low(self)",
        "snippet": "    def test_content_length_too_low(self):\n        # When the content-length is too low, the connection is closed\n        # without writing the last chunk, so the client never sees the request\n        # complete (which would be a framing error).\n        with ExpectLog(app_log, \"(Uncaught exception|Exception in callback)\"):\n            with ExpectLog(gen_log,\n                           \"(Cannot send error response after headers written\"\n                           \"|Failed to flush partial response)\"):\n                response = self.fetch(\"/low\")\n        self.assertEqual(response.code, 599)\n        self.assertEqual(str(self.server_error),\n                         \"Tried to write more data than Content-Length\")",
        "begin_line": 2170,
        "end_line": 2181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2186",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            if self.request.version.startswith('HTTP/1'):\n                # Simulate a connection closed by the client during\n                # request processing.  The client will see an error, but the\n                # server should respond gracefully (without logging errors\n                # because we were unable to write out as many bytes as\n                # Content-Length said we would)\n                self.request.connection.stream.close()\n                self.write('hello')\n            else:\n                # TODO: add a HTTP2-compatible version of this test.\n                self.write('requires HTTP/1.x')",
        "begin_line": 2186,
        "end_line": 2197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.ClientCloseTest.test_client_close#2199",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.ClientCloseTest",
        "signature": "tornado.test.web_test.ClientCloseTest.test_client_close(self)",
        "snippet": "    def test_client_close(self):\n        response = self.fetch('/')\n        if response.body == b'requires HTTP/1.x':\n            self.skipTest('requires HTTP/1.x')\n        self.assertEqual(response.code, 599)",
        "begin_line": 2199,
        "end_line": 2203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.past#2210",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.past(self)",
        "snippet": "    def past(self):\n        return self.present() - 86400 * 32",
        "begin_line": 2210,
        "end_line": 2211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.present#2213",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.present(self)",
        "snippet": "    def present(self):\n        return 1300000000",
        "begin_line": 2213,
        "end_line": 2214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_known_values#2216",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_known_values(self)",
        "snippet": "    def test_known_values(self):\n        signed_v1 = create_signed_value(SignedValueTest.SECRET, \"key\", \"value\",\n                                        version=1, clock=self.present)\n        self.assertEqual(\n            signed_v1,\n            b\"dmFsdWU=|1300000000|31c934969f53e48164c50768b40cbd7e2daaaa4f\")\n\n        signed_v2 = create_signed_value(SignedValueTest.SECRET, \"key\", \"value\",\n                                        version=2, clock=self.present)\n        self.assertEqual(\n            signed_v2,\n            b\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"\n            b\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\")\n\n        signed_default = create_signed_value(SignedValueTest.SECRET,\n                                             \"key\", \"value\", clock=self.present)\n        self.assertEqual(signed_default, signed_v2)\n\n        decoded_v1 = decode_signed_value(SignedValueTest.SECRET, \"key\",\n                                         signed_v1, min_version=1,\n                                         clock=self.present)\n        self.assertEqual(decoded_v1, b\"value\")\n\n        decoded_v2 = decode_signed_value(SignedValueTest.SECRET, \"key\",\n                                         signed_v2, min_version=2,\n                                         clock=self.present)\n        self.assertEqual(decoded_v2, b\"value\")",
        "begin_line": 2216,
        "end_line": 2242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_name_swap#2244",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_name_swap(self)",
        "snippet": "    def test_name_swap(self):\n        signed1 = create_signed_value(SignedValueTest.SECRET, \"key1\", \"value\",\n                                      clock=self.present)\n        signed2 = create_signed_value(SignedValueTest.SECRET, \"key2\", \"value\",\n                                      clock=self.present)\n        # Try decoding each string with the other's \"name\"\n        decoded1 = decode_signed_value(SignedValueTest.SECRET, \"key2\", signed1,\n                                       clock=self.present)\n        self.assertIs(decoded1, None)\n        decoded2 = decode_signed_value(SignedValueTest.SECRET, \"key1\", signed2,\n                                       clock=self.present)\n        self.assertIs(decoded2, None)",
        "begin_line": 2244,
        "end_line": 2255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_expired#2257",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_expired(self)",
        "snippet": "    def test_expired(self):\n        signed = create_signed_value(SignedValueTest.SECRET, \"key1\", \"value\",\n                                     clock=self.past)\n        decoded_past = decode_signed_value(SignedValueTest.SECRET, \"key1\",\n                                           signed, clock=self.past)\n        self.assertEqual(decoded_past, b\"value\")\n        decoded_present = decode_signed_value(SignedValueTest.SECRET, \"key1\",\n                                              signed, clock=self.present)\n        self.assertIs(decoded_present, None)",
        "begin_line": 2257,
        "end_line": 2265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_payload_tampering#2267",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_payload_tampering(self)",
        "snippet": "    def test_payload_tampering(self):\n        # These cookies are variants of the one in test_known_values.\n        sig = \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\"\n\n        def validate(prefix):\n            return (b'value' ==\n                    decode_signed_value(SignedValueTest.SECRET, \"key\",\n                                        prefix + sig, clock=self.present))\n        self.assertTrue(validate(\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"))\n        # Change key version\n        self.assertFalse(validate(\"2|1:1|10:1300000000|3:key|8:dmFsdWU=|\"))\n        # length mismatch (field too short)\n        self.assertFalse(validate(\"2|1:0|10:130000000|3:key|8:dmFsdWU=|\"))\n        # length mismatch (field too long)\n        self.assertFalse(validate(\"2|1:0|10:1300000000|3:keey|8:dmFsdWU=|\"))",
        "begin_line": 2267,
        "end_line": 2281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.validate#2271",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.validate(prefix)",
        "snippet": "        def validate(prefix):\n            return (b'value' ==\n                    decode_signed_value(SignedValueTest.SECRET, \"key\",\n                                        prefix + sig, clock=self.present))",
        "begin_line": 2271,
        "end_line": 2274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_signature_tampering#2283",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_signature_tampering(self)",
        "snippet": "    def test_signature_tampering(self):\n        prefix = \"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"\n\n        def validate(sig):\n            return (b'value' ==\n                    decode_signed_value(SignedValueTest.SECRET, \"key\",\n                                        prefix + sig, clock=self.present))\n        self.assertTrue(validate(\n            \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\"))\n        # All zeros\n        self.assertFalse(validate(\"0\" * 32))\n        # Change one character\n        self.assertFalse(validate(\n            \"4d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\"))\n        # Change another character\n        self.assertFalse(validate(\n            \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e153\"))\n        # Truncate\n        self.assertFalse(validate(\n            \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e15\"))\n        # Lengthen\n        self.assertFalse(validate(\n            \"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e1538\"))",
        "begin_line": 2283,
        "end_line": 2305,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.validate#2286",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.validate(sig)",
        "snippet": "        def validate(sig):\n            return (b'value' ==\n                    decode_signed_value(SignedValueTest.SECRET, \"key\",\n                                        prefix + sig, clock=self.present))",
        "begin_line": 2286,
        "end_line": 2289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_non_ascii#2307",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_non_ascii(self)",
        "snippet": "    def test_non_ascii(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(SignedValueTest.SECRET, \"key\", value,\n                                     clock=self.present)\n        decoded = decode_signed_value(SignedValueTest.SECRET, \"key\", signed,\n                                      clock=self.present)\n        self.assertEqual(value, decoded)",
        "begin_line": 2307,
        "end_line": 2313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_default_key#2315",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_default_key(self)",
        "snippet": "    def test_key_versioning_read_write_default_key(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(SignedValueTest.SECRET_DICT,\n                                     \"key\", value, clock=self.present,\n                                     key_version=0)\n        decoded = decode_signed_value(SignedValueTest.SECRET_DICT,\n                                      \"key\", signed, clock=self.present)\n        self.assertEqual(value, decoded)",
        "begin_line": 2315,
        "end_line": 2322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_non_default_key#2324",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_versioning_read_write_non_default_key(self)",
        "snippet": "    def test_key_versioning_read_write_non_default_key(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(SignedValueTest.SECRET_DICT,\n                                     \"key\", value, clock=self.present,\n                                     key_version=1)\n        decoded = decode_signed_value(SignedValueTest.SECRET_DICT,\n                                      \"key\", signed, clock=self.present)\n        self.assertEqual(value, decoded)",
        "begin_line": 2324,
        "end_line": 2331,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_versioning_invalid_key#2333",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_versioning_invalid_key(self)",
        "snippet": "    def test_key_versioning_invalid_key(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(SignedValueTest.SECRET_DICT,\n                                     \"key\", value, clock=self.present,\n                                     key_version=0)\n        newkeys = SignedValueTest.SECRET_DICT.copy()\n        newkeys.pop(0)\n        decoded = decode_signed_value(newkeys,\n                                      \"key\", signed, clock=self.present)\n        self.assertEqual(None, decoded)",
        "begin_line": 2333,
        "end_line": 2342,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.SignedValueTest.test_key_version_retrieval#2344",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.SignedValueTest",
        "signature": "tornado.test.web_test.SignedValueTest.test_key_version_retrieval(self)",
        "snippet": "    def test_key_version_retrieval(self):\n        value = b\"\\xe9\"\n        signed = create_signed_value(SignedValueTest.SECRET_DICT,\n                                     \"key\", value, clock=self.present,\n                                     key_version=1)\n        key_version = get_signature_key_version(signed)\n        self.assertEqual(1, key_version)",
        "begin_line": 2344,
        "end_line": 2350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2356",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            version = int(self.get_argument(\"version\", \"2\"))\n            # This would be a bad idea in a real app, but in this test\n            # it's fine.\n            self.settings[\"xsrf_cookie_version\"] = version\n            self.write(self.xsrf_token)",
        "begin_line": 2356,
        "end_line": 2361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.post#2363",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.post(self)",
        "snippet": "        def post(self):\n            self.write(\"ok\")",
        "begin_line": 2363,
        "end_line": 2364,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.get_app_kwargs#2366",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.get_app_kwargs(self)",
        "snippet": "    def get_app_kwargs(self):\n        return dict(xsrf_cookies=True)",
        "begin_line": 2366,
        "end_line": 2367,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.setUp#2369",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(XSRFTest, self).setUp()\n        self.xsrf_token = self.get_token()",
        "begin_line": 2369,
        "end_line": 2371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.get_token#2373",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.get_token(self, old_token=None, version=None)",
        "snippet": "    def get_token(self, old_token=None, version=None):\n        if old_token is not None:\n            headers = self.cookie_headers(old_token)\n        else:\n            headers = None\n        response = self.fetch(\n            \"/\" if version is None else (\"/?version=%d\" % version),\n            headers=headers)\n        response.rethrow()\n        return native_str(response.body)",
        "begin_line": 2373,
        "end_line": 2382,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.cookie_headers#2384",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.cookie_headers(self, token=None)",
        "snippet": "    def cookie_headers(self, token=None):\n        if token is None:\n            token = self.xsrf_token\n        return {\"Cookie\": \"_xsrf=\" + token}",
        "begin_line": 2384,
        "end_line": 2387,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_no_token#2389",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_no_token(self)",
        "snippet": "    def test_xsrf_fail_no_token(self):\n        with ExpectLog(gen_log, \".*'_xsrf' argument missing\"):\n            response = self.fetch(\"/\", method=\"POST\", body=b\"\")\n        self.assertEqual(response.code, 403)",
        "begin_line": 2389,
        "end_line": 2392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_body_no_cookie#2394",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_body_no_cookie(self)",
        "snippet": "    def test_xsrf_fail_body_no_cookie(self):\n        with ExpectLog(gen_log, \".*XSRF cookie does not match POST\"):\n            response = self.fetch(\n                \"/\", method=\"POST\",\n                body=urllib_parse.urlencode(dict(_xsrf=self.xsrf_token)))\n        self.assertEqual(response.code, 403)",
        "begin_line": 2394,
        "end_line": 2399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_no_body#2401",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_fail_cookie_no_body(self)",
        "snippet": "    def test_xsrf_fail_cookie_no_body(self):\n        with ExpectLog(gen_log, \".*'_xsrf' argument missing\"):\n            response = self.fetch(\n                \"/\", method=\"POST\", body=b\"\",\n                headers=self.cookie_headers())\n        self.assertEqual(response.code, 403)",
        "begin_line": 2401,
        "end_line": 2406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_short_token#2408",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_short_token(self)",
        "snippet": "    def test_xsrf_success_short_token(self):\n        response = self.fetch(\n            \"/\", method=\"POST\",\n            body=urllib_parse.urlencode(dict(_xsrf='deadbeef')),\n            headers=self.cookie_headers(token='deadbeef'))\n        self.assertEqual(response.code, 200)",
        "begin_line": 2408,
        "end_line": 2413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_non_hex_token#2415",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_non_hex_token(self)",
        "snippet": "    def test_xsrf_success_non_hex_token(self):\n        response = self.fetch(\n            \"/\", method=\"POST\",\n            body=urllib_parse.urlencode(dict(_xsrf='xoxo')),\n            headers=self.cookie_headers(token='xoxo'))\n        self.assertEqual(response.code, 200)",
        "begin_line": 2415,
        "end_line": 2420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_post_body#2422",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_post_body(self)",
        "snippet": "    def test_xsrf_success_post_body(self):\n        response = self.fetch(\n            \"/\", method=\"POST\",\n            body=urllib_parse.urlencode(dict(_xsrf=self.xsrf_token)),\n            headers=self.cookie_headers())\n        self.assertEqual(response.code, 200)",
        "begin_line": 2422,
        "end_line": 2427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_query_string#2429",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_query_string(self)",
        "snippet": "    def test_xsrf_success_query_string(self):\n        response = self.fetch(\n            \"/?\" + urllib_parse.urlencode(dict(_xsrf=self.xsrf_token)),\n            method=\"POST\", body=b\"\",\n            headers=self.cookie_headers())\n        self.assertEqual(response.code, 200)",
        "begin_line": 2429,
        "end_line": 2434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_xsrf_success_header#2436",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_xsrf_success_header(self)",
        "snippet": "    def test_xsrf_success_header(self):\n        response = self.fetch(\"/\", method=\"POST\", body=b\"\",\n                              headers=dict({\"X-Xsrftoken\": self.xsrf_token},\n                                           **self.cookie_headers()))\n        self.assertEqual(response.code, 200)",
        "begin_line": 2436,
        "end_line": 2440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_distinct_tokens#2442",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_distinct_tokens(self)",
        "snippet": "    def test_distinct_tokens(self):\n        # Every request gets a distinct token.\n        NUM_TOKENS = 10\n        tokens = set()\n        for i in range(NUM_TOKENS):\n            tokens.add(self.get_token())\n        self.assertEqual(len(tokens), NUM_TOKENS)",
        "begin_line": 2442,
        "end_line": 2448,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_cross_user#2450",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_cross_user(self)",
        "snippet": "    def test_cross_user(self):\n        token2 = self.get_token()\n        # Each token can be used to authenticate its own request.\n        for token in (self.xsrf_token, token2):\n            response = self.fetch(\n                \"/\", method=\"POST\",\n                body=urllib_parse.urlencode(dict(_xsrf=token)),\n                headers=self.cookie_headers(token))\n            self.assertEqual(response.code, 200)\n        # Sending one in the cookie and the other in the body is not allowed.\n        for cookie_token, body_token in ((self.xsrf_token, token2),\n                                         (token2, self.xsrf_token)):\n            with ExpectLog(gen_log, '.*XSRF cookie does not match POST'):\n                response = self.fetch(\n                    \"/\", method=\"POST\",\n                    body=urllib_parse.urlencode(dict(_xsrf=body_token)),\n                    headers=self.cookie_headers(cookie_token))\n            self.assertEqual(response.code, 403)",
        "begin_line": 2450,
        "end_line": 2467,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_refresh_token#2469",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_refresh_token(self)",
        "snippet": "    def test_refresh_token(self):\n        token = self.xsrf_token\n        tokens_seen = set([token])\n        # A user's token is stable over time.  Refreshing the page in one tab\n        # might update the cookie while an older tab still has the old cookie\n        # in its DOM.  Simulate this scenario by passing a constant token\n        # in the body and re-querying for the token.\n        for i in range(5):\n            token = self.get_token(token)\n            # Tokens are encoded uniquely each time\n            tokens_seen.add(token)\n            response = self.fetch(\n                \"/\", method=\"POST\",\n                body=urllib_parse.urlencode(dict(_xsrf=self.xsrf_token)),\n                headers=self.cookie_headers(token))\n            self.assertEqual(response.code, 200)\n        self.assertEqual(len(tokens_seen), 6)",
        "begin_line": 2469,
        "end_line": 2485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.XSRFTest.test_versioning#2487",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.XSRFTest",
        "signature": "tornado.test.web_test.XSRFTest.test_versioning(self)",
        "snippet": "    def test_versioning(self):\n        # Version 1 still produces distinct tokens per request.\n        self.assertNotEqual(self.get_token(version=1),\n                            self.get_token(version=1))\n\n        # Refreshed v1 tokens are all identical.\n        v1_token = self.get_token(version=1)\n        for i in range(5):\n            self.assertEqual(self.get_token(v1_token, version=1), v1_token)\n\n        # Upgrade to a v2 version of the same token\n        v2_token = self.get_token(v1_token)\n        self.assertNotEqual(v1_token, v2_token)\n        # Each v1 token can map to many v2 tokens.\n        self.assertNotEqual(v2_token, self.get_token(v1_token))\n\n        # The tokens are cross-compatible.\n        for cookie_token, body_token in ((v1_token, v2_token),\n                                         (v2_token, v1_token)):\n            response = self.fetch(\n                \"/\", method=\"POST\",\n                body=urllib_parse.urlencode(dict(_xsrf=body_token)),\n                headers=self.cookie_headers(cookie_token))\n            self.assertEqual(response.code, 200)",
        "begin_line": 2487,
        "end_line": 2510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2516",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.set_status(401)\n            self.set_header('WWW-Authenticate', 'Basic realm=\"something\"')\n            self.write('authentication required')\n            raise Finish()",
        "begin_line": 2516,
        "end_line": 2520,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.FinishExceptionTest.test_finish_exception#2522",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.FinishExceptionTest",
        "signature": "tornado.test.web_test.FinishExceptionTest.test_finish_exception(self)",
        "snippet": "    def test_finish_exception(self):\n        response = self.fetch('/')\n        self.assertEqual(response.code, 401)\n        self.assertEqual('Basic realm=\"something\"',\n                         response.headers.get('WWW-Authenticate'))\n        self.assertEqual(b'authentication required', response.body)",
        "begin_line": 2522,
        "end_line": 2527,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratorTest.get_handlers#2532",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratorTest",
        "signature": "tornado.test.web_test.DecoratorTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class RemoveSlashHandler(RequestHandler):\n            @removeslash\n            def get(self):\n                pass\n\n        class AddSlashHandler(RequestHandler):\n            @addslash\n            def get(self):\n                pass\n\n        return [(\"/removeslash/\", RemoveSlashHandler),\n                (\"/addslash\", AddSlashHandler),\n                ]",
        "begin_line": 2532,
        "end_line": 2545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RemoveSlashHandler.get_handlers#2532",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RemoveSlashHandler",
        "signature": "tornado.test.web_test.RemoveSlashHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class RemoveSlashHandler(RequestHandler):\n            @removeslash\n            def get(self):\n                pass\n\n        class AddSlashHandler(RequestHandler):\n            @addslash\n            def get(self):\n                pass\n\n        return [(\"/removeslash/\", RemoveSlashHandler),\n                (\"/addslash\", AddSlashHandler),\n                ]",
        "begin_line": 2532,
        "end_line": 2545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RemoveSlashHandler.get#2535",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RemoveSlashHandler",
        "signature": "tornado.test.web_test.RemoveSlashHandler.get(self)",
        "snippet": "            def get(self):\n                pass",
        "begin_line": 2535,
        "end_line": 2536,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AddSlashHandler.get_handlers#2532",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AddSlashHandler",
        "signature": "tornado.test.web_test.AddSlashHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class RemoveSlashHandler(RequestHandler):\n            @removeslash\n            def get(self):\n                pass\n\n        class AddSlashHandler(RequestHandler):\n            @addslash\n            def get(self):\n                pass\n\n        return [(\"/removeslash/\", RemoveSlashHandler),\n                (\"/addslash\", AddSlashHandler),\n                ]",
        "begin_line": 2532,
        "end_line": 2545,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.AddSlashHandler.get#2540",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.AddSlashHandler",
        "signature": "tornado.test.web_test.AddSlashHandler.get(self)",
        "snippet": "            def get(self):\n                pass",
        "begin_line": 2540,
        "end_line": 2541,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratorTest.test_removeslash#2547",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratorTest",
        "signature": "tornado.test.web_test.DecoratorTest.test_removeslash(self)",
        "snippet": "    def test_removeslash(self):\n        response = self.fetch(\"/removeslash/\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers['Location'], \"/removeslash\")\n\n        response = self.fetch(\"/removeslash/?foo=bar\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers['Location'], \"/removeslash?foo=bar\")",
        "begin_line": 2547,
        "end_line": 2554,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.DecoratorTest.test_addslash#2556",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.DecoratorTest",
        "signature": "tornado.test.web_test.DecoratorTest.test_addslash(self)",
        "snippet": "    def test_addslash(self):\n        response = self.fetch(\"/addslash\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers['Location'], \"/addslash/\")\n\n        response = self.fetch(\"/addslash?foo=bar\", follow_redirects=False)\n        self.assertEqual(response.code, 301)\n        self.assertEqual(response.headers['Location'], \"/addslash/?foo=bar\")",
        "begin_line": 2556,
        "end_line": 2563,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.get_handlers#2568",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EtagHandler(RequestHandler):\n            def get(self, computed_etag):\n                self.write(computed_etag)\n\n            def compute_etag(self):\n                return self._write_buffer[0]\n\n        return [\n            ('/etag/(.*)', EtagHandler)\n        ]",
        "begin_line": 2568,
        "end_line": 2578,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EtagHandler.get_handlers#2568",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EtagHandler",
        "signature": "tornado.test.web_test.EtagHandler.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        class EtagHandler(RequestHandler):\n            def get(self, computed_etag):\n                self.write(computed_etag)\n\n            def compute_etag(self):\n                return self._write_buffer[0]\n\n        return [\n            ('/etag/(.*)', EtagHandler)\n        ]",
        "begin_line": 2568,
        "end_line": 2578,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EtagHandler.get#2570",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EtagHandler",
        "signature": "tornado.test.web_test.EtagHandler.get(self, computed_etag)",
        "snippet": "            def get(self, computed_etag):\n                self.write(computed_etag)",
        "begin_line": 2570,
        "end_line": 2571,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.EtagHandler.compute_etag#2573",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.EtagHandler",
        "signature": "tornado.test.web_test.EtagHandler.compute_etag(self)",
        "snippet": "            def compute_etag(self):\n                return self._write_buffer[0]",
        "begin_line": 2573,
        "end_line": 2574,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_wildcard_etag#2580",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_wildcard_etag(self)",
        "snippet": "    def test_wildcard_etag(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '*'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2580,
        "end_line": 2583,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_strong_etag_match#2585",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_strong_etag_match(self)",
        "snippet": "    def test_strong_etag_match(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '\"xyzzy\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2585,
        "end_line": 2588,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_match#2590",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_match(self)",
        "snippet": "    def test_multiple_strong_etag_match(self):\n        computed_etag = '\"xyzzy1\"'\n        etags = '\"xyzzy1\", \"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2590,
        "end_line": 2593,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_strong_etag_not_match#2595",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_strong_etag_not_match(self)",
        "snippet": "    def test_strong_etag_not_match(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '\"xyzzy1\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 2595,
        "end_line": 2598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_not_match#2600",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_strong_etag_not_match(self)",
        "snippet": "    def test_multiple_strong_etag_not_match(self):\n        computed_etag = '\"xyzzy\"'\n        etags = '\"xyzzy1\", \"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 2600,
        "end_line": 2603,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_weak_etag_match#2605",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_weak_etag_match(self)",
        "snippet": "    def test_weak_etag_match(self):\n        computed_etag = '\"xyzzy1\"'\n        etags = 'W/\"xyzzy1\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2605,
        "end_line": 2608,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_match#2610",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_match(self)",
        "snippet": "    def test_multiple_weak_etag_match(self):\n        computed_etag = '\"xyzzy2\"'\n        etags = 'W/\"xyzzy1\", W/\"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 304)",
        "begin_line": 2610,
        "end_line": 2613,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_weak_etag_not_match#2615",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_weak_etag_not_match(self)",
        "snippet": "    def test_weak_etag_not_match(self):\n        computed_etag = '\"xyzzy2\"'\n        etags = 'W/\"xyzzy1\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 2615,
        "end_line": 2618,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_not_match#2620",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest.test_multiple_weak_etag_not_match(self)",
        "snippet": "    def test_multiple_weak_etag_not_match(self):\n        computed_etag = '\"xyzzy3\"'\n        etags = 'W/\"xyzzy1\", W/\"xyzzy2\"'\n        self._test_etag(computed_etag, etags, 200)",
        "begin_line": 2620,
        "end_line": 2623,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.CacheTest._test_etag#2625",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.CacheTest",
        "signature": "tornado.test.web_test.CacheTest._test_etag(self, computed_etag, etags, status_code)",
        "snippet": "    def _test_etag(self, computed_etag, etags, status_code):\n        response = self.fetch(\n            '/etag/' + computed_etag,\n            headers={'If-None-Match': etags}\n        )\n        self.assertEqual(response.code, status_code)",
        "begin_line": 2625,
        "end_line": 2630,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.Handler.get#2636",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.Handler",
        "signature": "tornado.test.web_test.Handler.get(self)",
        "snippet": "        def get(self):\n            # remote_ip is optional, although it's set by\n            # both HTTPServer and WSGIAdapter.\n            # Clobber it to make sure it doesn't break logging.\n            self.request.remote_ip = None\n            self.finish(self._request_summary())",
        "begin_line": 2636,
        "end_line": 2641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.web_test.RequestSummaryTest.test_missing_remote_ip#2643",
        "src_path": "tornado/test/web_test.py",
        "class_name": "tornado.test.web_test.RequestSummaryTest",
        "signature": "tornado.test.web_test.RequestSummaryTest.test_missing_remote_ip(self)",
        "snippet": "    def test_missing_remote_ip(self):\n        resp = self.fetch(\"/\")\n        self.assertEqual(resp.body, b\"GET / (None)\")",
        "begin_line": 2643,
        "end_line": 2645,
        "comment": "",
        "is_bug": false
    }
]