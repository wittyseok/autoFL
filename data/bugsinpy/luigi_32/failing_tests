coverage run -m pytest test/instance_test.py::InstanceTest::test_unhashable_type
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/luigi
plugins: benchmark-3.2.3, requests-mock-1.8.0, sanic-1.6.1, sugar-0.9.3, cov-2.9.0
collected 1 item

test/instance_test.py F                                                  [100%]

=================================== FAILURES ===================================
______________________ InstanceTest.test_unhashable_type _______________________

cls = <class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>
args = (), kwargs = {'x': {}}
instantiate = <function Register.__call__.<locals>.instantiate at 0x7f7b4e4a5940>
h = {}, params = [('x', <luigi.parameter.Parameter object at 0x7f7b4e4a4670>)]
param_values = [('x', {})]
k = (<class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>, (('x', {}),))

    def __call__(cls, *args, **kwargs):
        """
        Custom class instantiation utilizing instance cache.
    
        If a Task has already been instantiated with the same parameters,
        the previous instance is returned to reduce number of object instances.
        """
        def instantiate():
            return super(Register, cls).__call__(*args, **kwargs)
    
        h = cls.__instance_cache
    
        if h is None:  # disabled
            return instantiate()
    
        params = cls.get_params()
        param_values = cls.get_param_values(params, args, kwargs)
    
        k = (cls, tuple(param_values))
    
        try:
>           hash(k)
E           TypeError: unhashable type: 'dict'

luigi/task_register.py:89: TypeError

During handling of the above exception, another exception occurred:

self = <instance_test.InstanceTest testMethod=test_unhashable_type>

    def test_unhashable_type(self):
        # See #857
        class DummyTask(luigi.Task):
            x = luigi.Parameter()
    
>       dummy = DummyTask(x={})

test/instance_test.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>
args = (), kwargs = {'x': {}}
instantiate = <function Register.__call__.<locals>.instantiate at 0x7f7b4e4a5940>
h = {}, params = [('x', <luigi.parameter.Parameter object at 0x7f7b4e4a4670>)]
param_values = [('x', {})]
k = (<class 'instance_test.InstanceTest.test_unhashable_type.<locals>.DummyTask'>, (('x', {}),))

    def __call__(cls, *args, **kwargs):
        """
        Custom class instantiation utilizing instance cache.
    
        If a Task has already been instantiated with the same parameters,
        the previous instance is returned to reduce number of object instances.
        """
        def instantiate():
            return super(Register, cls).__call__(*args, **kwargs)
    
        h = cls.__instance_cache
    
        if h is None:  # disabled
            return instantiate()
    
        params = cls.get_params()
        param_values = cls.get_param_values(params, args, kwargs)
    
        k = (cls, tuple(param_values))
    
        try:
            hash(k)
        except TypeError:
>           logger.debug("Not all parameter values are hashable so instance isn't coming from the cache")
E           NameError: name 'logger' is not defined

luigi/task_register.py:91: NameError
=========================== short test summary info ============================
FAILED test/instance_test.py::InstanceTest::test_unhashable_type - NameError:...
============================== 1 failed in 0.17s ===============================
