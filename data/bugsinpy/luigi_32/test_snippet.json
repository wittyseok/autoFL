[
    {
        "name": "test.helpers.with_config.__call__#47",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 47,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#49",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.get_config()\n            luigi.configuration.LuigiConfigParser._instance = None\n            conf = luigi.configuration.get_config()\n            for (section, settings) in six.iteritems(self.config):\n                if not conf.has_section(section):\n                    conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.InstanceTest.test_simple#30",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.InstanceTest",
        "signature": "test.instance_test.InstanceTest.test_simple(self)",
        "snippet": "    def test_simple(self):\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n\n        dummy_1 = DummyTask(1)\n        dummy_2 = DummyTask(2)\n        dummy_1b = DummyTask(1)\n\n        self.assertNotEqual(dummy_1, dummy_2)\n        self.assertEqual(dummy_1, dummy_1b)",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.DummyTask.test_simple#30",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.DummyTask",
        "signature": "test.instance_test.DummyTask.test_simple(self)",
        "snippet": "    def test_simple(self):\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n\n        dummy_1 = DummyTask(1)\n        dummy_2 = DummyTask(2)\n        dummy_1b = DummyTask(1)\n\n        self.assertNotEqual(dummy_1, dummy_2)\n        self.assertEqual(dummy_1, dummy_1b)",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.InstanceTest.test_dep#41",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.InstanceTest",
        "signature": "test.instance_test.InstanceTest.test_dep(self)",
        "snippet": "    def test_dep(self):\n        test = self\n\n        class A(luigi.Task):\n\n            def __init__(self):\n                self.has_run = False\n                super(A, self).__init__()\n\n            def run(self):\n                self.has_run = True\n\n        class B(luigi.Task):\n            x = luigi.Parameter()\n\n            def requires(self):\n                return A()  # This will end up referring to the same object\n\n            def run(self):\n                test.assertTrue(self.requires().has_run)\n\n        w = luigi.worker.Worker()\n        w.add(B(1))\n        w.add(B(2))\n        w.run()\n        w.stop()",
        "begin_line": 41,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.A.test_dep#41",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.A",
        "signature": "test.instance_test.A.test_dep(self)",
        "snippet": "    def test_dep(self):\n        test = self\n\n        class A(luigi.Task):\n\n            def __init__(self):\n                self.has_run = False\n                super(A, self).__init__()\n\n            def run(self):\n                self.has_run = True\n\n        class B(luigi.Task):\n            x = luigi.Parameter()\n\n            def requires(self):\n                return A()  # This will end up referring to the same object\n\n            def run(self):\n                test.assertTrue(self.requires().has_run)\n\n        w = luigi.worker.Worker()\n        w.add(B(1))\n        w.add(B(2))\n        w.run()\n        w.stop()",
        "begin_line": 41,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.A.__init__#46",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.A",
        "signature": "test.instance_test.A.__init__(self)",
        "snippet": "            def __init__(self):\n                self.has_run = False\n                super(A, self).__init__()",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.A.run#50",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.A",
        "signature": "test.instance_test.A.run(self)",
        "snippet": "            def run(self):\n                self.has_run = True",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.B.test_dep#41",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.B",
        "signature": "test.instance_test.B.test_dep(self)",
        "snippet": "    def test_dep(self):\n        test = self\n\n        class A(luigi.Task):\n\n            def __init__(self):\n                self.has_run = False\n                super(A, self).__init__()\n\n            def run(self):\n                self.has_run = True\n\n        class B(luigi.Task):\n            x = luigi.Parameter()\n\n            def requires(self):\n                return A()  # This will end up referring to the same object\n\n            def run(self):\n                test.assertTrue(self.requires().has_run)\n\n        w = luigi.worker.Worker()\n        w.add(B(1))\n        w.add(B(2))\n        w.run()\n        w.stop()",
        "begin_line": 41,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.B.requires#56",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.B",
        "signature": "test.instance_test.B.requires(self)",
        "snippet": "            def requires(self):\n                return A()  # This will end up referring to the same object",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.B.run#59",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.B",
        "signature": "test.instance_test.B.run(self)",
        "snippet": "            def run(self):\n                test.assertTrue(self.requires().has_run)",
        "begin_line": 59,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.InstanceTest.test_external_instance_cache#68",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.InstanceTest",
        "signature": "test.instance_test.InstanceTest.test_external_instance_cache(self)",
        "snippet": "    def test_external_instance_cache(self):\n        class A(luigi.Task):\n            pass\n\n        class OtherA(luigi.ExternalTask):\n            task_family = \"A\"\n\n        oa = OtherA()\n        a = A()\n        self.assertNotEqual(oa, a)",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.A.test_external_instance_cache#68",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.A",
        "signature": "test.instance_test.A.test_external_instance_cache(self)",
        "snippet": "    def test_external_instance_cache(self):\n        class A(luigi.Task):\n            pass\n\n        class OtherA(luigi.ExternalTask):\n            task_family = \"A\"\n\n        oa = OtherA()\n        a = A()\n        self.assertNotEqual(oa, a)",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.OtherA.test_external_instance_cache#68",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.OtherA",
        "signature": "test.instance_test.OtherA.test_external_instance_cache(self)",
        "snippet": "    def test_external_instance_cache(self):\n        class A(luigi.Task):\n            pass\n\n        class OtherA(luigi.ExternalTask):\n            task_family = \"A\"\n\n        oa = OtherA()\n        a = A()\n        self.assertNotEqual(oa, a)",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.InstanceTest.test_date#79",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.InstanceTest",
        "signature": "test.instance_test.InstanceTest.test_date(self)",
        "snippet": "    def test_date(self):\n        ''' Adding unit test because we had a problem with this '''\n        class DummyTask(luigi.Task):\n            x = luigi.DateIntervalParameter()\n\n        dummy_1 = DummyTask(luigi.date_interval.Year(2012))\n        dummy_2 = DummyTask(luigi.date_interval.Year(2013))\n        dummy_1b = DummyTask(luigi.date_interval.Year(2012))\n\n        self.assertNotEqual(dummy_1, dummy_2)\n        self.assertEqual(dummy_1, dummy_1b)",
        "begin_line": 79,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.DummyTask.test_date#79",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.DummyTask",
        "signature": "test.instance_test.DummyTask.test_date(self)",
        "snippet": "    def test_date(self):\n        ''' Adding unit test because we had a problem with this '''\n        class DummyTask(luigi.Task):\n            x = luigi.DateIntervalParameter()\n\n        dummy_1 = DummyTask(luigi.date_interval.Year(2012))\n        dummy_2 = DummyTask(luigi.date_interval.Year(2013))\n        dummy_1b = DummyTask(luigi.date_interval.Year(2012))\n\n        self.assertNotEqual(dummy_1, dummy_2)\n        self.assertEqual(dummy_1, dummy_1b)",
        "begin_line": 79,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.InstanceTest.test_unhashable_type#91",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.InstanceTest",
        "signature": "test.instance_test.InstanceTest.test_unhashable_type(self)",
        "snippet": "    def test_unhashable_type(self):\n        # See #857\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n\n        dummy = DummyTask(x={})",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.instance_test.DummyTask.test_unhashable_type#91",
        "src_path": "test/instance_test.py",
        "class_name": "test.instance_test.DummyTask",
        "signature": "test.instance_test.DummyTask.test_unhashable_type(self)",
        "snippet": "    def test_unhashable_type(self):\n        # See #857\n        class DummyTask(luigi.Task):\n            x = luigi.Parameter()\n\n        dummy = DummyTask(x={})",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#46",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#50",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        hdfs.load_hadoop_cmd = lambda: [hadoop_bin, '--config', cfg_path]",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    }
]