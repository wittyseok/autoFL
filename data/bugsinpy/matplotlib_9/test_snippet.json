[
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_annotations#11",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_annotations()",
        "snippet": "def test_polar_annotations():\n    # You can specify the xypoint and the xytext in different positions and\n    # coordinate systems, and optionally turn on a connecting line and mark the\n    # point with a marker.  Annotations work on polar axes too.  In the example\n    # below, the xy point is in native coordinates (xycoords defaults to\n    # 'data').  For a polar axes, this is in (theta, radius) space.  The text\n    # in this example is placed in the fractional figure coordinate system.\n    # Text keyword args like horizontal and vertical alignment are respected.\n\n    # Setup some data\n    r = np.arange(0.0, 1.0, 0.001)\n    theta = 2.0 * 2.0 * np.pi * r\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, polar=True)\n    line, = ax.plot(theta, r, color='#ee8d18', lw=3)\n    line, = ax.plot((0, 0), (0, 1), color=\"#0000ff\", lw=1)\n\n    ind = 800\n    thisr, thistheta = r[ind], theta[ind]\n    ax.plot([thistheta], [thisr], 'o')\n    ax.annotate('a polar annotation',\n                xy=(thistheta, thisr),  # theta, radius\n                xytext=(0.05, 0.05),    # fraction, fraction\n                textcoords='figure fraction',\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                horizontalalignment='left',\n                verticalalignment='baseline',\n                )\n\n    ax.tick_params(axis='x', tick1On=True, tick2On=True, direction='out')",
        "begin_line": 11,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_coord_annotations#45",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_coord_annotations()",
        "snippet": "def test_polar_coord_annotations():\n    # You can also use polar notation on a cartesian axes.  Here the native\n    # coordinate system ('data') is cartesian, so you need to specify the\n    # xycoords and textcoords as 'polar' if you want to use (theta, radius).\n    el = mpl.patches.Ellipse((0, 0), 10, 20, facecolor='r', alpha=0.5)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, aspect='equal')\n\n    ax.add_artist(el)\n    el.set_clip_box(ax.bbox)\n\n    ax.annotate('the top',\n                xy=(np.pi/2., 10.),      # theta, radius\n                xytext=(np.pi/3, 20.),   # theta, radius\n                xycoords='polar',\n                textcoords='polar',\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                horizontalalignment='left',\n                verticalalignment='baseline',\n                clip_on=True,  # clip to the axes bounding box\n                )\n\n    ax.set_xlim(-20, 20)\n    ax.set_ylim(-20, 20)",
        "begin_line": 45,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_alignment#73",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_alignment()",
        "snippet": "def test_polar_alignment():\n    # Test changing the vertical/horizontal alignment of a polar graph.\n    angles = np.arange(0, 360, 90)\n    grid_values = [0, 0.2, 0.4, 0.6, 0.8, 1]\n\n    fig = plt.figure()\n    rect = [0.1, 0.1, 0.8, 0.8]\n\n    horizontal = fig.add_axes(rect, polar=True, label='horizontal')\n    horizontal.set_thetagrids(angles)\n\n    vertical = fig.add_axes(rect, polar=True, label='vertical')\n    vertical.patch.set_visible(False)\n\n    for i in range(2):\n        fig.axes[i].set_rgrids(\n            grid_values, angle=angles[i],\n            horizontalalignment='left', verticalalignment='top')",
        "begin_line": 73,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_twice#93",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_twice()",
        "snippet": "def test_polar_twice():\n    fig = plt.figure()\n    plt.polar([1, 2], [.1, .2])\n    plt.polar([3, 4], [.3, .4])\n    assert len(fig.axes) == 1, 'More than one polar axes created.'",
        "begin_line": 93,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_wrap#101",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_wrap(fig_test, fig_ref)",
        "snippet": "def test_polar_wrap(fig_test, fig_ref):\n    ax = fig_test.add_subplot(projection=\"polar\")\n    ax.plot(np.deg2rad([179, -179]), [0.2, 0.1])\n    ax.plot(np.deg2rad([2, -2]), [0.2, 0.1])\n    ax = fig_ref.add_subplot(projection=\"polar\")\n    ax.plot(np.deg2rad([179, 181]), [0.2, 0.1])\n    ax.plot(np.deg2rad([2, 358]), [0.2, 0.1])",
        "begin_line": 101,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_units_1#111",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_units_1(fig_test, fig_ref)",
        "snippet": "def test_polar_units_1(fig_test, fig_ref):\n    import matplotlib.testing.jpl_units as units\n    units.register()\n    xs = [30.0, 45.0, 60.0, 90.0]\n    ys = [1.0, 2.0, 3.0, 4.0]\n\n    plt.figure(fig_test.number)\n    plt.polar([x * units.deg for x in xs], ys)\n\n    ax = fig_ref.add_subplot(projection=\"polar\")\n    ax.plot(np.deg2rad(xs), ys)\n    ax.set(xlabel=\"deg\")",
        "begin_line": 111,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_units_2#126",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_units_2(fig_test, fig_ref)",
        "snippet": "def test_polar_units_2(fig_test, fig_ref):\n    import matplotlib.testing.jpl_units as units\n    units.register()\n    xs = [30.0, 45.0, 60.0, 90.0]\n    xs_deg = [x * units.deg for x in xs]\n    ys = [1.0, 2.0, 3.0, 4.0]\n    ys_km = [y * units.km for y in ys]\n\n    plt.figure(fig_test.number)\n    # test {theta,r}units.\n    plt.polar(xs_deg, ys_km, thetaunits=\"rad\", runits=\"km\")\n    assert isinstance(plt.gca().get_xaxis().get_major_formatter(),\n                      units.UnitDblFormatter)\n\n    ax = fig_ref.add_subplot(projection=\"polar\")\n    ax.plot(np.deg2rad(xs), ys)\n    ax.xaxis.set_major_formatter(mpl.ticker.FuncFormatter(\"{:.12}\".format))\n    ax.set(xlabel=\"rad\", ylabel=\"km\")",
        "begin_line": 126,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_rmin#147",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_rmin()",
        "snippet": "def test_polar_rmin():\n    r = np.arange(0, 3.0, 0.01)\n    theta = 2*np.pi*r\n\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.plot(theta, r)\n    ax.set_rmax(2.0)\n    ax.set_rmin(0.5)",
        "begin_line": 147,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_negative_rmin#159",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_negative_rmin()",
        "snippet": "def test_polar_negative_rmin():\n    r = np.arange(-3.0, 0.0, 0.01)\n    theta = 2*np.pi*r\n\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.plot(theta, r)\n    ax.set_rmax(0.0)\n    ax.set_rmin(-3.0)",
        "begin_line": 159,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_rorigin#171",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_rorigin()",
        "snippet": "def test_polar_rorigin():\n    r = np.arange(0, 3.0, 0.01)\n    theta = 2*np.pi*r\n\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.plot(theta, r)\n    ax.set_rmax(2.0)\n    ax.set_rmin(0.5)\n    ax.set_rorigin(0.0)",
        "begin_line": 171,
        "end_line": 180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_invertedylim#184",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_invertedylim()",
        "snippet": "def test_polar_invertedylim():\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.set_ylim(2, 0)",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_invertedylim_rorigin#191",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_invertedylim_rorigin()",
        "snippet": "def test_polar_invertedylim_rorigin():\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.yaxis.set_inverted(True)\n    # Set the rlims to inverted (2, 0) without calling set_rlim, to check that\n    # viewlims are correctly unstaled before draw()ing.\n    ax.plot([0, 0], [0, 2], c=\"none\")\n    ax.margins(0)\n    ax.set_rorigin(3)",
        "begin_line": 191,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_theta_position#203",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_theta_position()",
        "snippet": "def test_polar_theta_position():\n    r = np.arange(0, 3.0, 0.01)\n    theta = 2*np.pi*r\n\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.plot(theta, r)\n    ax.set_theta_zero_location(\"NW\", 30)\n    ax.set_theta_direction('clockwise')",
        "begin_line": 203,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_rlabel_position#215",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_rlabel_position()",
        "snippet": "def test_polar_rlabel_position():\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='polar')\n    ax.set_rlabel_position(315)\n    ax.tick_params(rotation='auto')",
        "begin_line": 215,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_theta_limits#223",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_theta_limits()",
        "snippet": "def test_polar_theta_limits():\n    r = np.arange(0, 3.0, 0.01)\n    theta = 2*np.pi*r\n\n    theta_mins = np.arange(15.0, 361.0, 90.0)\n    theta_maxs = np.arange(50.0, 361.0, 90.0)\n    DIRECTIONS = ('out', 'in', 'inout')\n\n    fig, axs = plt.subplots(len(theta_mins), len(theta_maxs),\n                            subplot_kw={'polar': True},\n                            figsize=(8, 6))\n\n    for i, start in enumerate(theta_mins):\n        for j, end in enumerate(theta_maxs):\n            ax = axs[i, j]\n            ax.plot(theta, r)\n            if start < end:\n                ax.set_thetamin(start)\n                ax.set_thetamax(end)\n            else:\n                # Plot with clockwise orientation instead.\n                ax.set_thetamin(end)\n                ax.set_thetamax(start)\n                ax.set_theta_direction('clockwise')\n            ax.tick_params(tick1On=True, tick2On=True,\n                           direction=DIRECTIONS[i % len(DIRECTIONS)],\n                           rotation='auto')\n            ax.yaxis.set_tick_params(label2On=True, rotation='auto')",
        "begin_line": 223,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_rlim#254",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_rlim(fig_test, fig_ref)",
        "snippet": "def test_polar_rlim(fig_test, fig_ref):\n    ax = fig_test.subplots(subplot_kw={'polar': True})\n    ax.set_rlim(top=10)\n    ax.set_rlim(bottom=.5)\n\n    ax = fig_ref.subplots(subplot_kw={'polar': True})\n    ax.set_rmax(10.)\n    ax.set_rmin(.5)",
        "begin_line": 254,
        "end_line": 261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_rlim_bottom#265",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_rlim_bottom(fig_test, fig_ref)",
        "snippet": "def test_polar_rlim_bottom(fig_test, fig_ref):\n    ax = fig_test.subplots(subplot_kw={'polar': True})\n    ax.set_rlim(bottom=[.5, 10])\n\n    ax = fig_ref.subplots(subplot_kw={'polar': True})\n    ax.set_rmax(10.)\n    ax.set_rmin(.5)",
        "begin_line": 265,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_rlim_zero#274",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_rlim_zero()",
        "snippet": "def test_polar_rlim_zero():\n    ax = plt.figure().add_subplot(projection='polar')\n    ax.plot(np.arange(10), np.arange(10) + .01)\n    assert ax.get_ylim()[0] == 0",
        "begin_line": 274,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_no_data#280",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_no_data()",
        "snippet": "def test_polar_no_data():\n    plt.subplot(projection=\"polar\")\n    ax = plt.gca()\n    assert ax.get_rmin() == 0 and ax.get_rmax() == 1\n    plt.close(\"all\")\n    # Used to behave differently (by triggering an autoscale with no data).\n    plt.polar()\n    ax = plt.gca()\n    assert ax.get_rmin() == 0 and ax.get_rmax() == 1",
        "begin_line": 280,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_not_datalim_adjustable#291",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_not_datalim_adjustable()",
        "snippet": "def test_polar_not_datalim_adjustable():\n    ax = plt.figure().add_subplot(projection=\"polar\")\n    with pytest.raises(ValueError):\n        ax.set_adjustable(\"datalim\")",
        "begin_line": 291,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_gridlines#297",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_gridlines()",
        "snippet": "def test_polar_gridlines():\n    fig = plt.figure()\n    ax = fig.add_subplot(111, polar=True)\n    # make all major grid lines lighter, only x grid lines set in 2.1.0\n    ax.grid(alpha=0.2)\n    # hide y tick labels, no effect in 2.1.0\n    plt.setp(ax.yaxis.get_ticklabels(), visible=False)\n    fig.canvas.draw()\n    assert ax.xaxis.majorTicks[0].gridline.get_alpha() == .2\n    assert ax.yaxis.majorTicks[0].gridline.get_alpha() == .2",
        "begin_line": 297,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_get_tightbbox_polar#309",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_get_tightbbox_polar()",
        "snippet": "def test_get_tightbbox_polar():\n    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\n    fig.canvas.draw()\n    bb = ax.get_tightbbox(fig.canvas.get_renderer())\n    assert_allclose(\n        bb.extents, [107.7778,  29.2778, 539.7847, 450.7222], rtol=1e-03)",
        "begin_line": 309,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_interpolation_steps_constant_r#318",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_interpolation_steps_constant_r(fig_test, fig_ref)",
        "snippet": "def test_polar_interpolation_steps_constant_r(fig_test, fig_ref):\n    # Check that an extra half-turn doesn't make any difference -- modulo\n    # antialiasing, which we disable here.\n    p1 = (fig_test.add_subplot(121, projection=\"polar\")\n          .bar([0], [1], 3*np.pi, edgecolor=\"none\"))\n    p2 = (fig_test.add_subplot(122, projection=\"polar\")\n          .bar([0], [1], -3*np.pi, edgecolor=\"none\"))\n    p3 = (fig_ref.add_subplot(121, projection=\"polar\")\n          .bar([0], [1], 2*np.pi, edgecolor=\"none\"))\n    p4 = (fig_ref.add_subplot(122, projection=\"polar\")\n          .bar([0], [1], -2*np.pi, edgecolor=\"none\"))\n    for p in [p1, p2, p3, p4]:\n        plt.setp(p, antialiased=False)",
        "begin_line": 318,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_polar_interpolation_steps_variable_r#334",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_polar_interpolation_steps_variable_r(fig_test, fig_ref)",
        "snippet": "def test_polar_interpolation_steps_variable_r(fig_test, fig_ref):\n    l, = fig_test.add_subplot(projection=\"polar\").plot([0, np.pi/2], [1, 2])\n    l.get_path()._interpolation_steps = 100\n    fig_ref.add_subplot(projection=\"polar\").plot(\n        np.linspace(0, np.pi/2, 101), np.linspace(1, 2, 101))",
        "begin_line": 334,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_polar.test_thetalim_valid_invalid#341",
        "src_path": "lib/matplotlib/tests/test_polar.py",
        "class_name": "lib.matplotlib.tests.test_polar",
        "signature": "lib.matplotlib.tests.test_polar.test_thetalim_valid_invalid()",
        "snippet": "def test_thetalim_valid_invalid():\n    ax = plt.subplot(projection='polar')\n    ax.set_thetalim(0, 2 * np.pi)  # doesn't raise.\n    ax.set_thetalim(thetamin=800, thetamax=440)  # doesn't raise.\n    with pytest.raises(ValueError, match='The angle range must be <= 2 pi'):\n        ax.set_thetalim(0, 3 * np.pi)\n    with pytest.raises(ValueError,\n                       match='The angle range must be <= 360 degrees'):\n        ax.set_thetalim(thetamin=800, thetamax=400)",
        "begin_line": 341,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    }
]