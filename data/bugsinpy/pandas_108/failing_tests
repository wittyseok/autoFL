coverage run -m pytest pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 40 items

pandas/tests/dtypes/cast/test_infer_dtype.py FFFFF.....FFFFF.....FFFFF.. [ 67%]
...FFFFF.....                                                            [100%]

=================================== FAILURES ===================================
________________ test_infer_from_interval[left-True-0-1-int64] _________________

left = 0, right = 1, subtype = 'int64', closed = 'left', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_____________ test_infer_from_interval[left-True-0.0-1.0-float64] ______________

left = 0.0, right = 1.0, subtype = 'float64', closed = 'left'
pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_______ test_infer_from_interval[left-True-left2-right2-datetime64[ns]] ________

left = Timestamp('1970-01-01 00:00:00')
right = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'
closed = 'left', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_____ test_infer_from_interval[left-True-left3-right3-datetime64[ns, UTC]] _____

left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')
right = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')
subtype = 'datetime64[ns, UTC]', closed = 'left', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_______ test_infer_from_interval[left-True-left4-right4-timedelta64[ns]] _______

left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')
subtype = 'timedelta64[ns]', closed = 'left', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
________________ test_infer_from_interval[right-True-0-1-int64] ________________

left = 0, right = 1, subtype = 'int64', closed = 'right', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_____________ test_infer_from_interval[right-True-0.0-1.0-float64] _____________

left = 0.0, right = 1.0, subtype = 'float64', closed = 'right'
pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_______ test_infer_from_interval[right-True-left2-right2-datetime64[ns]] _______

left = Timestamp('1970-01-01 00:00:00')
right = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'
closed = 'right', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
____ test_infer_from_interval[right-True-left3-right3-datetime64[ns, UTC]] _____

left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')
right = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')
subtype = 'datetime64[ns, UTC]', closed = 'right', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
______ test_infer_from_interval[right-True-left4-right4-timedelta64[ns]] _______

left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')
subtype = 'timedelta64[ns]', closed = 'right', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
________________ test_infer_from_interval[both-True-0-1-int64] _________________

left = 0, right = 1, subtype = 'int64', closed = 'both', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_____________ test_infer_from_interval[both-True-0.0-1.0-float64] ______________

left = 0.0, right = 1.0, subtype = 'float64', closed = 'both'
pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_______ test_infer_from_interval[both-True-left2-right2-datetime64[ns]] ________

left = Timestamp('1970-01-01 00:00:00')
right = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'
closed = 'both', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_____ test_infer_from_interval[both-True-left3-right3-datetime64[ns, UTC]] _____

left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')
right = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')
subtype = 'datetime64[ns, UTC]', closed = 'both', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_______ test_infer_from_interval[both-True-left4-right4-timedelta64[ns]] _______

left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')
subtype = 'timedelta64[ns]', closed = 'both', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_______________ test_infer_from_interval[neither-True-0-1-int64] _______________

left = 0, right = 1, subtype = 'int64', closed = 'neither', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
____________ test_infer_from_interval[neither-True-0.0-1.0-float64] ____________

left = 0.0, right = 1.0, subtype = 'float64', closed = 'neither'
pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
______ test_infer_from_interval[neither-True-left2-right2-datetime64[ns]] ______

left = Timestamp('1970-01-01 00:00:00')
right = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'
closed = 'neither', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
___ test_infer_from_interval[neither-True-left3-right3-datetime64[ns, UTC]] ____

left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')
right = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')
subtype = 'datetime64[ns, UTC]', closed = 'neither', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
_____ test_infer_from_interval[neither-True-left4-right4-timedelta64[ns]] ______

left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')
subtype = 'timedelta64[ns]', closed = 'neither', pandas_dtype = True

    @pytest.mark.parametrize(
        "left, right, subtype",
        [
            (0, 1, "int64"),
            (0.0, 1.0, "float64"),
            (Timestamp(0), Timestamp(1), "datetime64[ns]"),
            (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
            (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
        ],
    )
    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
        # GH 30337
        interval = Interval(left, right, closed)
        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
        expected_dtype = f"interval[{subtype}]" if pandas_dtype else np.object_
>       assert result_dtype == expected_dtype
E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'

pandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[left-True-0-1-int64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[left-True-0.0-1.0-float64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[left-True-left2-right2-datetime64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[left-True-left3-right3-datetime64[ns, UTC]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[left-True-left4-right4-timedelta64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[right-True-0-1-int64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[right-True-0.0-1.0-float64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[right-True-left2-right2-datetime64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[right-True-left3-right3-datetime64[ns, UTC]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[right-True-left4-right4-timedelta64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[both-True-0-1-int64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[both-True-0.0-1.0-float64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[both-True-left2-right2-datetime64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[both-True-left3-right3-datetime64[ns, UTC]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[both-True-left4-right4-timedelta64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[neither-True-0-1-int64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[neither-True-0.0-1.0-float64]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[neither-True-left2-right2-datetime64[ns]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[neither-True-left3-right3-datetime64[ns, UTC]]
FAILED pandas/tests/dtypes/cast/test_infer_dtype.py::test_infer_from_interval[neither-True-left4-right4-timedelta64[ns]]
======================== 20 failed, 20 passed in 0.67s =========================
