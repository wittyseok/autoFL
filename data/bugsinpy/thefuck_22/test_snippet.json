[
    {
        "name": "tests.test_types.test_rules_names_list#6",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types",
        "signature": "tests.test_types.test_rules_names_list()",
        "snippet": "def test_rules_names_list():\n    assert RulesNamesList(['bash', 'lisp']) == ['bash', 'lisp']\n    assert RulesNamesList(['bash', 'lisp']) == RulesNamesList(['bash', 'lisp'])\n    assert Rule('lisp') in RulesNamesList(['lisp'])\n    assert Rule('bash') not in RulesNamesList(['lisp'])",
        "begin_line": 6,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.test_update_settings#13",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types",
        "signature": "tests.test_types.test_update_settings()",
        "snippet": "def test_update_settings():\n    settings = Settings({'key': 'val'})\n    new_settings = settings.update(key='new-val', unset='unset-value')\n    assert new_settings.key == 'val'\n    assert new_settings.unset == 'unset-value'\n    assert settings.key == 'val'",
        "begin_line": 13,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.TestSortedCorrectedCommandsSequence.test_realises_generator_only_on_demand#22",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types.TestSortedCorrectedCommandsSequence",
        "signature": "tests.test_types.TestSortedCorrectedCommandsSequence.test_realises_generator_only_on_demand(self, settings)",
        "snippet": "    def test_realises_generator_only_on_demand(self, settings):\n        should_realise = False\n\n        def gen():\n            yield CorrectedCommand('git commit')\n            yield CorrectedCommand('git branch', priority=200)\n            assert should_realise\n            yield CorrectedCommand('git checkout', priority=100)\n\n        commands = SortedCorrectedCommandsSequence(gen(), settings)\n        assert commands[0] == CorrectedCommand('git commit')\n        should_realise = True\n        assert commands[1] == CorrectedCommand('git checkout', priority=100)\n        assert commands[2] == CorrectedCommand('git branch', priority=200)",
        "begin_line": 22,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.TestSortedCorrectedCommandsSequence.gen#25",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types.TestSortedCorrectedCommandsSequence",
        "signature": "tests.test_types.TestSortedCorrectedCommandsSequence.gen()",
        "snippet": "        def gen():\n            yield CorrectedCommand('git commit')\n            yield CorrectedCommand('git branch', priority=200)\n            assert should_realise\n            yield CorrectedCommand('git checkout', priority=100)",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.TestSortedCorrectedCommandsSequence.test_remove_duplicates#37",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types.TestSortedCorrectedCommandsSequence",
        "signature": "tests.test_types.TestSortedCorrectedCommandsSequence.test_remove_duplicates(self, settings)",
        "snippet": "    def test_remove_duplicates(self, settings):\n        side_effect = lambda *_: None\n        seq = SortedCorrectedCommandsSequence(\n            iter([CorrectedCommand('ls', priority=100),\n                  CorrectedCommand('ls', priority=200),\n                  CorrectedCommand('ls', side_effect, 300)]),\n            settings)\n        assert set(seq) == {CorrectedCommand('ls', priority=100),\n                            CorrectedCommand('ls', side_effect, 300)}",
        "begin_line": 37,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.TestSortedCorrectedCommandsSequence.test_with_blank#47",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types.TestSortedCorrectedCommandsSequence",
        "signature": "tests.test_types.TestSortedCorrectedCommandsSequence.test_with_blank(self, settings)",
        "snippet": "    def test_with_blank(self, settings):\n        seq = SortedCorrectedCommandsSequence(iter([]), settings)\n        assert list(seq) == []",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.TestCorrectedCommand.test_equality#54",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types.TestCorrectedCommand",
        "signature": "tests.test_types.TestCorrectedCommand.test_equality(self)",
        "snippet": "    def test_equality(self):\n        assert CorrectedCommand('ls', None, 100) == \\\n               CorrectedCommand('ls', None, 200)\n        assert CorrectedCommand('ls', None, 100) != \\\n               CorrectedCommand('ls', lambda *_: _, 100)",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_types.TestCorrectedCommand.test_hashable#60",
        "src_path": "tests/test_types.py",
        "class_name": "tests.test_types.TestCorrectedCommand",
        "signature": "tests.test_types.TestCorrectedCommand.test_hashable(self)",
        "snippet": "    def test_hashable(self):\n        assert {CorrectedCommand('ls', None, 100),\n                CorrectedCommand('ls', None, 200)} == {CorrectedCommand('ls')}",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#6",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#11",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings()",
        "snippet": "def settings():\n    return Mock(debug=False, no_colors=True)",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#16",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: ' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Command(script='', stdout='', stderr='')",
        "snippet": "def Command(script='', stdout='', stderr=''):\n    return types.Command(script, stdout, stderr)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule#10",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Rule(name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "def Rule(name='', match=lambda *_: True,\n         get_new_command=lambda *_: '',\n         enabled_by_default=True,\n         side_effect=None,\n         priority=DEFAULT_PRIORITY,\n         requires_output=True):\n    return types.Rule(name, match, get_new_command,\n                      enabled_by_default, side_effect,\n                      priority, requires_output)",
        "begin_line": 10,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand#21",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.CorrectedCommand(script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "def CorrectedCommand(script='', side_effect=None, priority=DEFAULT_PRIORITY):\n    return types.CorrectedCommand(script, side_effect, priority)",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    }
]