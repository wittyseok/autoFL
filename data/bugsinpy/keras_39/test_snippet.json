[
    {
        "name": "tests.keras.utils.generic_utils_test.test_progbar#16",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_progbar()",
        "snippet": "def test_progbar():\n    n = 2\n    input_arr = np.random.random((n, n, n))\n\n    bar = Progbar(n)\n    for i, arr in enumerate(input_arr):\n        bar.update(i, list(arr))\n\n    bar = Progbar(None)\n    for i, arr in enumerate(input_arr):\n        bar.update(i, list(arr))",
        "begin_line": 16,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_custom_objects_scope#29",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_custom_objects_scope()",
        "snippet": "def test_custom_objects_scope():\n\n    def custom_fn():\n        pass\n\n    class CustomClass(object):\n        pass\n\n    with custom_object_scope({'CustomClass': CustomClass,\n                              'custom_fn': custom_fn}):\n        act = activations.get('custom_fn')\n        assert act == custom_fn\n        cl = regularizers.get('CustomClass')\n        assert cl.__class__ == CustomClass",
        "begin_line": 29,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.custom_fn#31",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.custom_fn()",
        "snippet": "    def custom_fn():\n        pass",
        "begin_line": 31,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.CustomClass.test_custom_objects_scope#29",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test.CustomClass",
        "signature": "tests.keras.utils.generic_utils_test.CustomClass.test_custom_objects_scope()",
        "snippet": "def test_custom_objects_scope():\n\n    def custom_fn():\n        pass\n\n    class CustomClass(object):\n        pass\n\n    with custom_object_scope({'CustomClass': CustomClass,\n                              'custom_fn': custom_fn}):\n        act = activations.get('custom_fn')\n        assert act == custom_fn\n        cl = regularizers.get('CustomClass')\n        assert cl.__class__ == CustomClass",
        "begin_line": 29,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_has_arg#65",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_has_arg(fn, name, accept_all, expected)",
        "snippet": "def test_has_arg(fn, name, accept_all, expected):\n    if isinstance(fn, str):\n        context = dict()\n        try:\n            exec('def {}: pass'.format(fn), context)\n        except SyntaxError:\n            if sys.version_info >= (3,):\n                raise\n            pytest.skip('Function is not compatible with Python 2')\n        context.pop('__builtins__', None)  # Sometimes exec adds builtins to the context\n        fn, = context.values()\n\n    assert has_arg(fn, name, accept_all) is expected",
        "begin_line": 65,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_has_arg_positional_only#82",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_has_arg_positional_only()",
        "snippet": "def test_has_arg_positional_only():\n    assert has_arg(pow, 'x') is False",
        "begin_line": 82,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_func_dump_and_load#89",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_func_dump_and_load(test_function_type)",
        "snippet": "def test_func_dump_and_load(test_function_type):\n\n    if test_function_type == 'simple function':\n        def test_func():\n            return r'\\u'\n\n    elif test_function_type == 'closured function':\n        def get_test_func():\n            x = r'\\u'\n\n            def test_func():\n                return x\n            return test_func\n        test_func = get_test_func()\n    else:\n        raise Exception('Unknown test case for test_func_dump_and_load')\n\n    serialized = func_dump(test_func)\n    deserialized = func_load(serialized)\n    assert deserialized.__code__ == test_func.__code__\n    assert deserialized.__defaults__ == test_func.__defaults__\n    assert deserialized.__closure__ == test_func.__closure__",
        "begin_line": 89,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_func#92",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_func()",
        "snippet": "        def test_func():\n            return r'\\u'",
        "begin_line": 92,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.get_test_func#96",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.get_test_func()",
        "snippet": "        def get_test_func():\n            x = r'\\u'\n\n            def test_func():\n                return x\n            return test_func",
        "begin_line": 96,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_func#99",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_func()",
        "snippet": "            def test_func():\n                return x",
        "begin_line": 99,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_func_dump_and_load_closure#113",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_func_dump_and_load_closure()",
        "snippet": "def test_func_dump_and_load_closure():\n    y = 0\n    test_func = lambda x: x + y\n    serialized, _, closure = func_dump(test_func)\n    deserialized = func_load(serialized, closure=closure)\n    assert deserialized.__code__ == test_func.__code__\n    assert deserialized.__defaults__ == test_func.__defaults__\n    assert deserialized.__closure__ == test_func.__closure__",
        "begin_line": 113,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.generic_utils_test.test_func_dump_and_load_backwards_compat#125",
        "src_path": "tests/keras/utils/generic_utils_test.py",
        "class_name": "tests.keras.utils.generic_utils_test",
        "signature": "tests.keras.utils.generic_utils_test.test_func_dump_and_load_backwards_compat(test_func)",
        "snippet": "def test_func_dump_and_load_backwards_compat(test_func):\n    # this test ensures that models serialized prior to version 2.1.2 can still be\n    # deserialized\n\n    # see https://github.com/evhub/keras/blob/2.1.1/keras/utils/generic_utils.py#L166\n    serialized = marshal.dumps(test_func.__code__).decode('raw_unicode_escape')\n\n    deserialized = func_load(serialized, defaults=test_func.__defaults__)\n    assert deserialized.__code__ == test_func.__code__\n    assert deserialized.__defaults__ == test_func.__defaults__\n    assert deserialized.__closure__ == test_func.__closure__",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    }
]