[
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.initialize#40",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.initialize(self, close_future, compression_options=None)",
        "snippet": "    def initialize(self, close_future, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.get_compression_options#44",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.get_compression_options(self)",
        "snippet": "    def get_compression_options(self):\n        return self.compression_options",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.TestWebSocketHandler.on_close#47",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.TestWebSocketHandler",
        "signature": "tornado.test.websocket_test.TestWebSocketHandler.on_close(self)",
        "snippet": "    def on_close(self):\n        self.close_future.set_result((self.close_code, self.close_reason))",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.EchoHandler.on_message#52",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.EchoHandler",
        "signature": "tornado.test.websocket_test.EchoHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(message, isinstance(message, bytes))",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ErrorInOnMessageHandler.on_message#57",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ErrorInOnMessageHandler",
        "signature": "tornado.test.websocket_test.ErrorInOnMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        1 / 0",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderHandler.open#62",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderHandler",
        "signature": "tornado.test.websocket_test.HeaderHandler.open(self)",
        "snippet": "    def open(self):\n        methods_to_test = [\n            functools.partial(self.write, 'This should not work'),\n            functools.partial(self.redirect, 'http://localhost/elsewhere'),\n            functools.partial(self.set_header, 'X-Test', ''),\n            functools.partial(self.set_cookie, 'Chocolate', 'Chip'),\n            functools.partial(self.set_status, 503),\n            self.flush,\n            self.finish,\n        ]\n        for method in methods_to_test:\n            try:\n                # In a websocket context, many RequestHandler methods\n                # raise RuntimeErrors.\n                method()\n                raise Exception(\"did not get expected exception\")\n            except RuntimeError:\n                pass\n        self.write_message(self.request.headers.get('X-Test', ''))",
        "begin_line": 62,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderEchoHandler.set_default_headers#84",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderEchoHandler",
        "signature": "tornado.test.websocket_test.HeaderEchoHandler.set_default_headers(self)",
        "snippet": "    def set_default_headers(self):\n        self.set_header(\"X-Extra-Response-Header\", \"Extra-Response-Value\")",
        "begin_line": 84,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.HeaderEchoHandler.prepare#87",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.HeaderEchoHandler",
        "signature": "tornado.test.websocket_test.HeaderEchoHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        for k, v in self.request.headers.get_all():\n            if k.lower().startswith('x-test'):\n                self.set_header(k, v)",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.NonWebSocketHandler.get#94",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.NonWebSocketHandler",
        "signature": "tornado.test.websocket_test.NonWebSocketHandler.get(self)",
        "snippet": "    def get(self):\n        self.write('ok')",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CloseReasonHandler.open#99",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CloseReasonHandler",
        "signature": "tornado.test.websocket_test.CloseReasonHandler.open(self)",
        "snippet": "    def open(self):\n        self.on_close_called = False\n        self.close(1001, \"goodbye\")",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.AsyncPrepareHandler.prepare#106",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.AsyncPrepareHandler",
        "signature": "tornado.test.websocket_test.AsyncPrepareHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        yield gen.moment",
        "begin_line": 106,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.AsyncPrepareHandler.on_message#109",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.AsyncPrepareHandler",
        "signature": "tornado.test.websocket_test.AsyncPrepareHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(message)",
        "begin_line": 109,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PathArgsHandler.open#114",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PathArgsHandler",
        "signature": "tornado.test.websocket_test.PathArgsHandler.open(self, arg)",
        "snippet": "    def open(self, arg):\n        self.write_message(arg)",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CoroutineOnMessageHandler.initialize#119",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.CoroutineOnMessageHandler.initialize(self, close_future, compression_options=None)",
        "snippet": "    def initialize(self, close_future, compression_options=None):\n        super(CoroutineOnMessageHandler, self).initialize(close_future,\n                                                          compression_options)\n        self.sleeping = 0",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CoroutineOnMessageHandler.on_message#125",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CoroutineOnMessageHandler",
        "signature": "tornado.test.websocket_test.CoroutineOnMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        if self.sleeping > 0:\n            self.write_message('another coroutine is already sleeping')\n        self.sleeping += 1\n        yield gen.sleep(0.01)\n        self.sleeping -= 1\n        self.write_message(message)",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.RenderMessageHandler.on_message#135",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.RenderMessageHandler",
        "signature": "tornado.test.websocket_test.RenderMessageHandler.on_message(self, message)",
        "snippet": "    def on_message(self, message):\n        self.write_message(self.render_string('message.html', message=message))",
        "begin_line": 135,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect#141",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketBaseTestCase",
        "signature": "tornado.test.websocket_test.WebSocketBaseTestCase.ws_connect(self, path, **kwargs)",
        "snippet": "    def ws_connect(self, path, **kwargs):\n        ws = yield websocket_connect(\n            'ws://127.0.0.1:%d%s' % (self.get_http_port(), path),\n            **kwargs)\n        raise gen.Return(ws)",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketBaseTestCase.close#148",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketBaseTestCase",
        "signature": "tornado.test.websocket_test.WebSocketBaseTestCase.close(self, ws)",
        "snippet": "    def close(self, ws):\n        \"\"\"Close a websocket connection and wait for the server side.\n\n        If we don't wait here, there are sometimes leak warnings in the\n        tests.\n        \"\"\"\n        ws.close()\n        yield self.close_future",
        "begin_line": 148,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.get_app#159",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/echo', EchoHandler, dict(close_future=self.close_future)),\n            ('/non_ws', NonWebSocketHandler),\n            ('/header', HeaderHandler, dict(close_future=self.close_future)),\n            ('/header_echo', HeaderEchoHandler,\n             dict(close_future=self.close_future)),\n            ('/close_reason', CloseReasonHandler,\n             dict(close_future=self.close_future)),\n            ('/error_in_on_message', ErrorInOnMessageHandler,\n             dict(close_future=self.close_future)),\n            ('/async_prepare', AsyncPrepareHandler,\n             dict(close_future=self.close_future)),\n            ('/path_args/(.*)', PathArgsHandler,\n             dict(close_future=self.close_future)),\n            ('/coroutine', CoroutineOnMessageHandler,\n             dict(close_future=self.close_future)),\n            ('/render', RenderMessageHandler,\n             dict(close_future=self.close_future)),\n        ], template_loader=DictLoader({\n            'message.html': '<b>{{ message }}</b>',\n        }))",
        "begin_line": 159,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.tearDown#183",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(WebSocketTest, self).tearDown()\n        RequestHandler._template_loaders.clear()",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_http_request#187",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_http_request(self)",
        "snippet": "    def test_http_request(self):\n        # WS server, HTTP client.\n        response = self.fetch('/echo')\n        self.assertEqual(response.code, 400)",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version#192",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_bad_websocket_version(self)",
        "snippet": "    def test_bad_websocket_version(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '12'})\n        self.assertEqual(response.code, 426)",
        "begin_line": 192,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_gen#200",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_gen(self)",
        "snippet": "    def test_websocket_gen(self):\n        ws = yield self.ws_connect('/echo')\n        yield ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks#207",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_callbacks(self)",
        "snippet": "    def test_websocket_callbacks(self):\n        websocket_connect(\n            'ws://127.0.0.1:%d/echo' % self.get_http_port(),\n            io_loop=self.io_loop, callback=self.stop)\n        ws = self.wait().result()\n        ws.write_message('hello')\n        ws.read_message(self.stop)\n        response = self.wait().result()\n        self.assertEqual(response, 'hello')\n        self.close_future.add_done_callback(lambda f: self.stop())\n        ws.close()\n        self.wait()",
        "begin_line": 207,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_binary_message#221",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_binary_message(self)",
        "snippet": "    def test_binary_message(self):\n        ws = yield self.ws_connect('/echo')\n        ws.write_message(b'hello \\xe9', binary=True)\n        response = yield ws.read_message()\n        self.assertEqual(response, b'hello \\xe9')\n        yield self.close(ws)",
        "begin_line": 221,
        "end_line": 226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_unicode_message#229",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_unicode_message(self)",
        "snippet": "    def test_unicode_message(self):\n        ws = yield self.ws_connect('/echo')\n        ws.write_message(u'hello \\u00e9')\n        response = yield ws.read_message()\n        self.assertEqual(response, u'hello \\u00e9')\n        yield self.close(ws)",
        "begin_line": 229,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_render_message#237",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_render_message(self)",
        "snippet": "    def test_render_message(self):\n        ws = yield self.ws_connect('/render')\n        ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, '<b>hello</b>')\n        yield self.close(ws)",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_error_in_on_message#245",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_error_in_on_message(self)",
        "snippet": "    def test_error_in_on_message(self):\n        ws = yield self.ws_connect('/error_in_on_message')\n        ws.write_message('hello')\n        with ExpectLog(app_log, \"Uncaught exception\"):\n            response = yield ws.read_message()\n        self.assertIs(response, None)\n        yield self.close(ws)",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail#254",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_fail(self)",
        "snippet": "    def test_websocket_http_fail(self):\n        with self.assertRaises(HTTPError) as cm:\n            yield self.ws_connect('/notfound')\n        self.assertEqual(cm.exception.code, 404)",
        "begin_line": 254,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_success#260",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_http_success(self)",
        "snippet": "    def test_websocket_http_success(self):\n        with self.assertRaises(WebSocketError):\n            yield self.ws_connect('/non_ws')",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail#265",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_network_fail(self)",
        "snippet": "    def test_websocket_network_fail(self):\n        sock, port = bind_unused_port()\n        sock.close()\n        with self.assertRaises(IOError):\n            with ExpectLog(gen_log, \".*\"):\n                yield websocket_connect(\n                    'ws://127.0.0.1:%d/' % port,\n                    io_loop=self.io_loop,\n                    connect_timeout=3600)",
        "begin_line": 265,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data#276",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_close_buffered_data(self)",
        "snippet": "    def test_websocket_close_buffered_data(self):\n        ws = yield websocket_connect(\n            'ws://127.0.0.1:%d/echo' % self.get_http_port())\n        ws.write_message('hello')\n        ws.write_message('world')\n        # Close the underlying stream.\n        ws.stream.close()\n        yield self.close_future",
        "begin_line": 276,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_headers#286",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_headers(self)",
        "snippet": "    def test_websocket_headers(self):\n        # Ensure that arbitrary headers can be passed through websocket_connect.\n        ws = yield websocket_connect(\n            HTTPRequest('ws://127.0.0.1:%d/header' % self.get_http_port(),\n                        headers={'X-Test': 'hello'}))\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 286,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo#296",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_websocket_header_echo(self)",
        "snippet": "    def test_websocket_header_echo(self):\n        # Ensure that headers can be returned in the response.\n        # Specifically, that arbitrary headers passed through websocket_connect\n        # can be returned.\n        ws = yield websocket_connect(\n            HTTPRequest('ws://127.0.0.1:%d/header_echo' % self.get_http_port(),\n                        headers={'X-Test-Hello': 'hello'}))\n        self.assertEqual(ws.headers.get('X-Test-Hello'), 'hello')\n        self.assertEqual(ws.headers.get('X-Extra-Response-Header'), 'Extra-Response-Value')\n        yield self.close(ws)",
        "begin_line": 296,
        "end_line": 305,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_server_close_reason#308",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_server_close_reason(self)",
        "snippet": "    def test_server_close_reason(self):\n        ws = yield self.ws_connect('/close_reason')\n        msg = yield ws.read_message()\n        # A message of None means the other side closed the connection.\n        self.assertIs(msg, None)\n        self.assertEqual(ws.close_code, 1001)\n        self.assertEqual(ws.close_reason, \"goodbye\")\n        # The on_close callback is called no matter which side closed.\n        code, reason = yield self.close_future\n        # The client echoed the close code it received to the server,\n        # so the server's close code (returned via close_future) is\n        # the same.\n        self.assertEqual(code, 1001)",
        "begin_line": 308,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_client_close_reason#323",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_client_close_reason(self)",
        "snippet": "    def test_client_close_reason(self):\n        ws = yield self.ws_connect('/echo')\n        ws.close(1001, 'goodbye')\n        code, reason = yield self.close_future\n        self.assertEqual(code, 1001)\n        self.assertEqual(reason, 'goodbye')",
        "begin_line": 323,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_async_prepare#331",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_async_prepare(self)",
        "snippet": "    def test_async_prepare(self):\n        # Previously, an async prepare method triggered a bug that would\n        # result in a timeout on test shutdown (and a memory leak).\n        ws = yield self.ws_connect('/async_prepare')\n        ws.write_message('hello')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello')",
        "begin_line": 331,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_path_args#340",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_path_args(self)",
        "snippet": "    def test_path_args(self):\n        ws = yield self.ws_connect('/path_args/hello')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello')",
        "begin_line": 340,
        "end_line": 343,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_coroutine#346",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_coroutine(self)",
        "snippet": "    def test_coroutine(self):\n        ws = yield self.ws_connect('/coroutine')\n        # Send both messages immediately, coroutine must process one at a time.\n        yield ws.write_message('hello1')\n        yield ws.write_message('hello2')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello1')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello2')",
        "begin_line": 346,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path#357",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_no_path(self)",
        "snippet": "    def test_check_origin_valid_no_path(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        headers = {'Origin': 'http://127.0.0.1:%d' % port}\n\n        ws = yield websocket_connect(HTTPRequest(url, headers=headers),\n                                     io_loop=self.io_loop)\n        ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 357,
        "end_line": 368,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path#371",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_valid_with_path(self)",
        "snippet": "    def test_check_origin_valid_with_path(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        headers = {'Origin': 'http://127.0.0.1:%d/something' % port}\n\n        ws = yield websocket_connect(HTTPRequest(url, headers=headers),\n                                     io_loop=self.io_loop)\n        ws.write_message('hello')\n        response = yield ws.read_message()\n        self.assertEqual(response, 'hello')\n        yield self.close(ws)",
        "begin_line": 371,
        "end_line": 382,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url#385",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_partial_url(self)",
        "snippet": "    def test_check_origin_invalid_partial_url(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        headers = {'Origin': '127.0.0.1:%d' % port}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers),\n                                    io_loop=self.io_loop)\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 385,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid#397",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid(self)",
        "snippet": "    def test_check_origin_invalid(self):\n        port = self.get_http_port()\n\n        url = 'ws://127.0.0.1:%d/echo' % port\n        # Host is 127.0.0.1, which should not be accessible from some other\n        # domain\n        headers = {'Origin': 'http://somewhereelse.com'}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers),\n                                    io_loop=self.io_loop)\n\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 397,
        "end_line": 409,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains#412",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketTest",
        "signature": "tornado.test.websocket_test.WebSocketTest.test_check_origin_invalid_subdomains(self)",
        "snippet": "    def test_check_origin_invalid_subdomains(self):\n        port = self.get_http_port()\n\n        url = 'ws://localhost:%d/echo' % port\n        # Subdomains should be disallowed by default.  If we could pass a\n        # resolver to websocket_connect we could test sibling domains as well.\n        headers = {'Origin': 'http://subtenant.localhost'}\n\n        with self.assertRaises(HTTPError) as cm:\n            yield websocket_connect(HTTPRequest(url, headers=headers),\n                                    io_loop=self.io_loop)\n\n        self.assertEqual(cm.exception.code, 403)",
        "begin_line": 412,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app#444",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest",
        "signature": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/native', NativeCoroutineOnMessageHandler,\n             dict(close_future=self.close_future))])",
        "begin_line": 444,
        "end_line": 448,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine#452",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.WebSocketNativeCoroutineTest",
        "signature": "tornado.test.websocket_test.WebSocketNativeCoroutineTest.test_native_coroutine(self)",
        "snippet": "    def test_native_coroutine(self):\n        ws = yield self.ws_connect('/native')\n        # Send both messages immediately, coroutine must process one at a time.\n        yield ws.write_message('hello1')\n        yield ws.write_message('hello2')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello1')\n        res = yield ws.read_message()\n        self.assertEqual(res, 'hello2')",
        "begin_line": 452,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_app#466",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/echo', EchoHandler, dict(\n                close_future=self.close_future,\n                compression_options=self.get_server_compression_options())),\n        ])",
        "begin_line": 466,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options#474",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return None",
        "begin_line": 474,
        "end_line": 475,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options#477",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return None",
        "begin_line": 477,
        "end_line": 478,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CompressionTestMixin.test_message_sizes#481",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CompressionTestMixin",
        "signature": "tornado.test.websocket_test.CompressionTestMixin.test_message_sizes(self)",
        "snippet": "    def test_message_sizes(self):\n        ws = yield self.ws_connect(\n            '/echo',\n            compression_options=self.get_client_compression_options())\n        # Send the same message three times so we can measure the\n        # effect of the context_takeover options.\n        for i in range(3):\n            ws.write_message(self.MESSAGE)\n            response = yield ws.read_message()\n            self.assertEqual(response, self.MESSAGE)\n        self.assertEqual(ws.protocol._message_bytes_out, len(self.MESSAGE) * 3)\n        self.assertEqual(ws.protocol._message_bytes_in, len(self.MESSAGE) * 3)\n        self.verify_wire_bytes(ws.protocol._wire_bytes_in,\n                               ws.protocol._wire_bytes_out)\n        yield self.close(ws)",
        "begin_line": 481,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes#500",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.UncompressedTestMixin",
        "signature": "tornado.test.websocket_test.UncompressedTestMixin.verify_wire_bytes(self, bytes_in, bytes_out)",
        "snippet": "    def verify_wire_bytes(self, bytes_in, bytes_out):\n        # Bytes out includes the 4-byte mask key per message.\n        self.assertEqual(bytes_out, 3 * (len(self.MESSAGE) + 6))\n        self.assertEqual(bytes_in, 3 * (len(self.MESSAGE) + 2))",
        "begin_line": 500,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options#512",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerOnlyCompressionTest",
        "signature": "tornado.test.websocket_test.ServerOnlyCompressionTest.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return {}",
        "begin_line": 512,
        "end_line": 513,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options#517",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientOnlyCompressionTest",
        "signature": "tornado.test.websocket_test.ClientOnlyCompressionTest.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return {}",
        "begin_line": 517,
        "end_line": 518,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options#522",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.get_server_compression_options(self)",
        "snippet": "    def get_server_compression_options(self):\n        return {}",
        "begin_line": 522,
        "end_line": 523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options#525",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.get_client_compression_options(self)",
        "snippet": "    def get_client_compression_options(self):\n        return {}",
        "begin_line": 525,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes#528",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.DefaultCompressionTest",
        "signature": "tornado.test.websocket_test.DefaultCompressionTest.verify_wire_bytes(self, bytes_in, bytes_out)",
        "snippet": "    def verify_wire_bytes(self, bytes_in, bytes_out):\n        self.assertLess(bytes_out, 3 * (len(self.MESSAGE) + 6))\n        self.assertLess(bytes_in, 3 * (len(self.MESSAGE) + 2))\n        # Bytes out includes the 4 bytes mask key per message.\n        self.assertEqual(bytes_out, bytes_in + 12)",
        "begin_line": 528,
        "end_line": 532,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaskFunctionMixin.test_mask#537",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaskFunctionMixin",
        "signature": "tornado.test.websocket_test.MaskFunctionMixin.test_mask(self)",
        "snippet": "    def test_mask(self):\n        self.assertEqual(self.mask(b'abcd', b''), b'')\n        self.assertEqual(self.mask(b'abcd', b'b'), b'\\x03')\n        self.assertEqual(self.mask(b'abcd', b'54321'), b'TVPVP')\n        self.assertEqual(self.mask(b'ZXCV', b'98765432'), b'c`t`olpd')\n        # Include test cases with \\x00 bytes (to ensure that the C\n        # extension isn't depending on null-terminated strings) and\n        # bytes with the high bit set (to smoke out signedness issues).\n        self.assertEqual(self.mask(b'\\x00\\x01\\x02\\x03',\n                                   b'\\xff\\xfb\\xfd\\xfc\\xfe\\xfa'),\n                         b'\\xff\\xfa\\xff\\xff\\xfe\\xfb')\n        self.assertEqual(self.mask(b'\\xff\\xfb\\xfd\\xfc',\n                                   b'\\x00\\x01\\x02\\x03\\x04\\x05'),\n                         b'\\xff\\xfa\\xff\\xff\\xfb\\xfe')",
        "begin_line": 537,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PythonMaskFunctionTest.mask#554",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PythonMaskFunctionTest",
        "signature": "tornado.test.websocket_test.PythonMaskFunctionTest.mask(self, mask, data)",
        "snippet": "    def mask(self, mask, data):\n        return _websocket_mask_python(mask, data)",
        "begin_line": 554,
        "end_line": 555,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.CythonMaskFunctionTest.mask#560",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.CythonMaskFunctionTest",
        "signature": "tornado.test.websocket_test.CythonMaskFunctionTest.mask(self, mask, data)",
        "snippet": "    def mask(self, mask, data):\n        return speedups.websocket_mask(mask, data)",
        "begin_line": 560,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerPeriodicPingTest.get_app#565",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ServerPeriodicPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_pong(self, data):\n                self.write_message(\"got pong\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ], websocket_ping_interval=0.01)",
        "begin_line": 565,
        "end_line": 573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#565",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_pong(self, data):\n                self.write_message(\"got pong\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ], websocket_ping_interval=0.01)",
        "begin_line": 565,
        "end_line": 573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_pong#567",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_pong(self, data)",
        "snippet": "            def on_pong(self, data):\n                self.write_message(\"got pong\")",
        "begin_line": 567,
        "end_line": 568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping#576",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ServerPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ServerPeriodicPingTest.test_server_ping(self)",
        "snippet": "    def test_server_ping(self):\n        ws = yield self.ws_connect('/')\n        for i in range(3):\n            response = yield ws.read_message()\n            self.assertEqual(response, \"got pong\")\n        yield self.close(ws)",
        "begin_line": 576,
        "end_line": 581,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientPeriodicPingTest.get_app#586",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ClientPeriodicPingTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(\"got ping\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ])",
        "begin_line": 586,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.get_app#586",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class PingHandler(TestWebSocketHandler):\n            def on_ping(self, data):\n                self.write_message(\"got ping\")\n\n        self.close_future = Future()\n        return Application([\n            ('/', PingHandler, dict(close_future=self.close_future)),\n        ])",
        "begin_line": 586,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.PingHandler.on_ping#588",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.PingHandler",
        "signature": "tornado.test.websocket_test.PingHandler.on_ping(self, data)",
        "snippet": "            def on_ping(self, data):\n                self.write_message(\"got ping\")",
        "begin_line": 588,
        "end_line": 589,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping#597",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.ClientPeriodicPingTest",
        "signature": "tornado.test.websocket_test.ClientPeriodicPingTest.test_client_ping(self)",
        "snippet": "    def test_client_ping(self):\n        ws = yield self.ws_connect('/', ping_interval=0.01)\n        for i in range(3):\n            response = yield ws.read_message()\n            self.assertEqual(response, \"got ping\")\n        yield self.close(ws)",
        "begin_line": 597,
        "end_line": 602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaxMessageSizeTest.get_app#607",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaxMessageSizeTest",
        "signature": "tornado.test.websocket_test.MaxMessageSizeTest.get_app(self)",
        "snippet": "    def get_app(self):\n        self.close_future = Future()\n        return Application([\n            ('/', EchoHandler, dict(close_future=self.close_future)),\n        ], websocket_max_message_size=1024)",
        "begin_line": 607,
        "end_line": 611,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.websocket_test.MaxMessageSizeTest.test_large_message#614",
        "src_path": "tornado/test/websocket_test.py",
        "class_name": "tornado.test.websocket_test.MaxMessageSizeTest",
        "signature": "tornado.test.websocket_test.MaxMessageSizeTest.test_large_message(self)",
        "snippet": "    def test_large_message(self):\n        ws = yield self.ws_connect('/')\n\n        # Write a message that is allowed.\n        msg = 'a' * 1024\n        ws.write_message(msg)\n        resp = yield ws.read_message()\n        self.assertEqual(resp, msg)\n\n        # Write a message that is too large.\n        ws.write_message(msg + 'b')\n        resp = yield ws.read_message()\n        # A message of None means the other side closed the connection.\n        self.assertIs(resp, None)\n        self.assertEqual(ws.close_code, 1009)\n        self.assertEqual(ws.close_reason, \"message too big\")",
        "begin_line": 614,
        "end_line": 629,
        "comment": "",
        "is_bug": false
    }
]