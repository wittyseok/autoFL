[
    {
        "name": "test.helpers.with_config.__init__#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#94",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#108",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#110",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 110,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#130",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#147",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#152",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#157",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#168",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#182",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#191",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.temporary_unloaded_module#197",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.temporary_unloaded_module(python_file_contents)",
        "snippet": "def temporary_unloaded_module(python_file_contents):\n    \"\"\" Create an importable module\n\n    Return the name of importable module name given its file contents (source\n    code) \"\"\"\n    with tempfile.NamedTemporaryFile(\n            dir='test/',\n            prefix=\"_test_time_generated_module\",\n            suffix='.py') as temp_module_file:\n        temp_module_file.file.write(python_file_contents)\n        temp_module_file.file.flush()\n        temp_module_path = temp_module_file.name\n        temp_module_name = re.search(r'/(_test_time_generated_module.*).py',\n                                     temp_module_path).group(1)\n        yield temp_module_name",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.setUp#34",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(SchedulerApiTest, self).setUp()\n        conf = self.get_scheduler_config()\n        self.sch = Scheduler(**conf)\n        self.time = time.time",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.get_scheduler_config#40",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.get_scheduler_config(self)",
        "snippet": "    def get_scheduler_config(self):\n        return {\n            'retry_delay': 100,\n            'remove_delay': 1000,\n            'worker_disconnect_delay': 10,\n            'disable_persist': 10,\n            'disable_window': 10,\n            'retry_count': 3,\n            'disable_hard_timeout': 60 * 60,\n        }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.tearDown#51",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(SchedulerApiTest, self).tearDown()\n        if time.time != self.time:\n            time.time = self.time",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.setTime#56",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.setTime(self, t)",
        "snippet": "    def setTime(self, t):\n        time.time = lambda: t",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_dep#59",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_dep(self)",
        "snippet": "    def test_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_failed_dep#68",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_failed_dep(self)",
        "snippet": "    def test_failed_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 68,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_broken_dep#81",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_broken_dep(self)",
        "snippet": "    def test_broken_dep(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A', runnable=False)\n\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)  # can still wait and retry: TODO: do we want this?\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'B')\n        self.sch.add_task(worker=WORKER, task_id='B', status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 81,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_two_workers#91",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_two_workers(self)",
        "snippet": "    def test_two_workers(self):\n        # Worker X wants to build A -> B\n        # Worker Y wants to build A -> C\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n        self.sch.add_task(task_id='C', deps=('A',), worker='Y')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)  # Worker Y is pending on A to be done\n        self.sch.add_task(worker='X', task_id='A', status=DONE)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'C')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'B')",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_status_wont_override#105",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_status_wont_override(self)",
        "snippet": "    def test_status_wont_override(self):\n        # Worker X is running A\n        # Worker Y wants to override the status to UNKNOWN (e.g. complete is throwing an exception)\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.sch.add_task(worker='Y', task_id='A', status=UNKNOWN)\n        self.assertEqual({'A'}, set(self.sch.task_list(RUNNING, '').keys()))",
        "begin_line": 105,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_retry#113",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_retry(self)",
        "snippet": "    def test_retry(self):\n        # Try to build A but fails, will retry after 100s\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        for t in range(100):\n            self.setTime(t)\n            self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)\n            self.sch.ping(worker=WORKER)\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.setTime(101)\n        self.sch.prune()\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 113,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_resend_task#130",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_resend_task(self)",
        "snippet": "    def test_resend_task(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        for _ in range(10):\n            self.assertEqual('A', self.sch.get_work(worker=WORKER, current_tasks=[])['task_id'])\n        self.assertEqual('B', self.sch.get_work(worker=WORKER, current_tasks=['A'])['task_id'])",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_resend_multiple_tasks#137",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_resend_multiple_tasks(self)",
        "snippet": "    def test_resend_multiple_tasks(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C')\n\n        # get A and B running\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.assertEqual('B', self.sch.get_work(worker=WORKER)['task_id'])\n\n        for _ in range(10):\n            self.assertEqual('A', self.sch.get_work(worker=WORKER, current_tasks=[])['task_id'])\n            self.assertEqual('A', self.sch.get_work(worker=WORKER, current_tasks=['B'])['task_id'])\n            self.assertEqual('B', self.sch.get_work(worker=WORKER, current_tasks=['A'])['task_id'])\n            self.assertEqual('C', self.sch.get_work(worker=WORKER, current_tasks=['A', 'B'])['task_id'])",
        "begin_line": 137,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disconnect_running#152",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disconnect_running(self)",
        "snippet": "    def test_disconnect_running(self):\n        # X and Y wants to run A.\n        # X starts but does not report back. Y does.\n        # After some timeout, Y will build it instead\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.sch.add_task(task_id='A', worker='Y')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        for t in range(200):\n            self.setTime(t)\n            self.sch.ping(worker='Y')\n            if t % 10 == 0:\n                self.sch.prune()\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'A')",
        "begin_line": 152,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_single_batch_item#168",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_single_batch_item(self)",
        "snippet": "    def test_get_work_single_batch_item(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertEqual('A_a_1', response['task_id'])\n\n        param_values = response['task_params'].values()\n        self.assertTrue(not any(isinstance(param, list)) for param in param_values)",
        "begin_line": 168,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_multiple_batch_items#179",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_multiple_batch_items(self)",
        "snippet": "    def test_get_work_multiple_batch_items(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, batchable=True)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n        self.assertEqual({'a': ['1', '2', '3']}, response['task_params'])\n        self.assertEqual('A', response['task_family'])",
        "begin_line": 179,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_time_running#193",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_time_running(self)",
        "snippet": "    def test_batch_time_running(self):\n        self.setTime(1234)\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, batchable=True)\n\n        self.sch.get_work(worker=WORKER)\n        for task in self.sch.task_list().values():\n            self.assertEqual(1234, task['time_running'])",
        "begin_line": 193,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_ignore_items_not_ready#207",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_ignore_items_not_ready(self)",
        "snippet": "    def test_batch_ignore_items_not_ready(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, deps=['NOT_DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_4', family='A', params={'a': '4'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_5', family='A', params={'a': '5'}, deps=['NOT_DONE'],\n            batchable=True)\n\n        self.sch.add_task(worker=WORKER, task_id='NOT_DONE', runnable=False)\n        self.sch.add_task(worker=WORKER, task_id='DONE', status=DONE)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n        self.assertEqual({'a': ['1', '3', '4']}, response['task_params'])\n        self.assertEqual('A', response['task_family'])",
        "begin_line": 207,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_ignore_first_item_not_ready#232",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_ignore_first_item_not_ready(self)",
        "snippet": "    def test_batch_ignore_first_item_not_ready(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, deps=['NOT_DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, deps=['DONE'],\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, deps=['DONE'],\n            batchable=True)\n\n        self.sch.add_task(worker=WORKER, task_id='NOT_DONE', runnable=False)\n        self.sch.add_task(worker=WORKER, task_id='DONE', status=DONE)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n        self.assertEqual({'a': ['2', '3']}, response['task_params'])\n        self.assertEqual('A', response['task_family'])",
        "begin_line": 232,
        "end_line": 250,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_with_batch_items_with_resources#252",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_with_batch_items_with_resources(self)",
        "snippet": "    def test_get_work_with_batch_items_with_resources(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True,\n            resources={'r1': 1})\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, batchable=True,\n            resources={'r1': 1})\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, batchable=True,\n            resources={'r1': 1})\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n        self.assertEqual({'a': ['1', '2', '3']}, response['task_params'])\n        self.assertEqual('A', response['task_family'])",
        "begin_line": 252,
        "end_line": 267,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_limited_batch_size#269",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_limited_batch_size(self)",
        "snippet": "    def test_get_work_limited_batch_size(self):\n        self.sch.add_task_batcher(\n            worker=WORKER, task_family='A', batched_args=['a'], max_batch_size=2)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True,\n            priority=1)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, batchable=True,\n            priority=2)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n        self.assertEqual({'a': ['3', '1']}, response['task_params'])\n        self.assertEqual('A', response['task_family'])\n\n        response2 = self.sch.get_work(worker=WORKER)\n        self.assertEqual('A_a_2', response2['task_id'])",
        "begin_line": 269,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_do_not_batch_non_batchable_item#289",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_do_not_batch_non_batchable_item(self)",
        "snippet": "    def test_get_work_do_not_batch_non_batchable_item(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_1', family='A', params={'a': '1'}, batchable=True,\n            priority=1)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_2', family='A', params={'a': '2'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_a_3', family='A', params={'a': '3'}, batchable=False,\n            priority=2)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertEqual('A_a_3', response['task_id'])\n\n        response2 = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response2['task_id'])\n        self.assertEqual({'a': ['1', '2']}, response2['task_params'])\n        self.assertEqual('A', response2['task_family'])",
        "begin_line": 289,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_group_on_non_batch_params#308",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_group_on_non_batch_params(self)",
        "snippet": "    def test_get_work_group_on_non_batch_params(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['b'])\n        for a, b, c in itertools.product((1, 2), repeat=3):\n            self.sch.add_task(\n                worker=WORKER, task_id='A_%i_%i_%i' % (a, b, c), family='A',\n                params={'a': str(a), 'b': str(b), 'c': str(c)}, batchable=True,\n                priority=9 * a + 3 * c + b)\n\n        for a, c in [('2', '2'), ('2', '1'), ('1', '2'), ('1', '1')]:\n            response = self.sch.get_work(worker=WORKER)\n            self.assertIsNone(response['task_id'])\n            self.assertEqual({'a': a, 'b': ['2', '1'], 'c': c}, response['task_params'])\n            self.assertEqual('A', response['task_family'])",
        "begin_line": 308,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_multiple_batched_params#322",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_multiple_batched_params(self)",
        "snippet": "    def test_get_work_multiple_batched_params(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a', 'b'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_1_1', family='A', params={'a': '1', 'b': '1'}, priority=1,\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_1_2', family='A', params={'a': '1', 'b': '2'}, priority=2,\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_2_1', family='A', params={'a': '2', 'b': '1'}, priority=3,\n            batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_2_2', family='A', params={'a': '2', 'b': '2'}, priority=4,\n            batchable=True)\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertIsNone(response['task_id'])\n\n        expected_params = {\n            'a': ['2', '2', '1', '1'],\n            'b': ['2', '1', '2', '1'],\n        }\n        self.assertEqual(expected_params, response['task_params'])",
        "begin_line": 322,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_with_unbatched_worker_on_batched_task#346",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_with_unbatched_worker_on_batched_task(self)",
        "snippet": "    def test_get_work_with_unbatched_worker_on_batched_task(self):\n        self.sch.add_task_batcher(worker='batcher', task_family='A', batched_args=['a'])\n        for i in range(5):\n            self.sch.add_task(\n                worker=WORKER, task_id='A_%i' % i, family='A', params={'a': str(i)}, priority=i,\n                batchable=False)\n            self.sch.add_task(\n                worker='batcher', task_id='A_%i' % i, family='A', params={'a': str(i)}, priority=i,\n                batchable=True)\n        self.assertEqual('A_4', self.sch.get_work(worker=WORKER)['task_id'])\n        batch_response = self.sch.get_work(worker='batcher')\n        self.assertIsNone(batch_response['task_id'])\n        self.assertEqual({'a': ['3', '2', '1', '0']}, batch_response['task_params'])",
        "begin_line": 346,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batched_tasks_become_batch_running#360",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batched_tasks_become_batch_running(self)",
        "snippet": "    def test_batched_tasks_become_batch_running(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': 1}, batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': 2}, batchable=True)\n        self.sch.get_work(worker=WORKER)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list('BATCH_RUNNING', '').keys()))",
        "begin_line": 360,
        "end_line": 365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_downstream_jobs_from_batch_running_have_upstream_running_status#367",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_downstream_jobs_from_batch_running_have_upstream_running_status(self)",
        "snippet": "    def test_downstream_jobs_from_batch_running_have_upstream_running_status(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': 1}, batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': 2}, batchable=True)\n        self.sch.get_work(worker=WORKER)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list('BATCH_RUNNING', '').keys()))\n\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A_1'])\n        self.assertEqual({'B'}, set(self.sch.task_list(PENDING, UPSTREAM_RUNNING).keys()))",
        "begin_line": 367,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_new_task#377",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_new_task(self)",
        "snippet": "    def test_set_batch_runner_new_task(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        response = self.sch.get_work(worker=WORKER)\n        batch_id = response['batch_id']\n        self.sch.add_task(\n            worker=WORKER, task_id='A_1_2', task_family='A', params={'a': '1,2'},\n            batch_id=batch_id, status='RUNNING')\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list('BATCH_RUNNING', '').keys()))\n        self.assertEqual({'A_1_2'}, set(self.sch.task_list('RUNNING', '').keys()))\n\n        self.sch.add_task(worker=WORKER, task_id='A_1_2', status=DONE)\n        self.assertEqual({'A_1', 'A_2', 'A_1_2'}, set(self.sch.task_list(DONE, '').keys()))",
        "begin_line": 377,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_max#394",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_max(self)",
        "snippet": "    def test_set_batch_runner_max(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        response = self.sch.get_work(worker=WORKER)\n        batch_id = response['batch_id']\n        self.sch.add_task(\n            worker=WORKER, task_id='A_2', task_family='A', params={'a': '2'},\n            batch_id=batch_id, status='RUNNING')\n        self.assertEqual({'A_1'}, set(self.sch.task_list('BATCH_RUNNING', '').keys()))\n        self.assertEqual({'A_2'}, set(self.sch.task_list('RUNNING', '').keys()))\n\n        self.sch.add_task(worker=WORKER, task_id='A_2', status=DONE)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(DONE, '').keys()))",
        "begin_line": 394,
        "end_line": 409,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest._start_simple_batch#411",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest._start_simple_batch(self, use_max=False, mark_running=True)",
        "snippet": "    def _start_simple_batch(self, use_max=False, mark_running=True):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        response = self.sch.get_work(worker=WORKER)\n        if mark_running:\n            batch_id = response['batch_id']\n            task_id, params = ('A_2', {'a': '2'}) if use_max else ('A_1_2', {'a': '1,2'})\n\n            self.sch.add_task(\n                worker=WORKER, task_id=task_id, task_family='A', params=params, batch_id=batch_id,\n                status='RUNNING')\n            return batch_id, task_id, params",
        "begin_line": 411,
        "end_line": 425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_retry#427",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_retry(self)",
        "snippet": "    def test_set_batch_runner_retry(self):\n        batch_id, task_id, params = self._start_simple_batch()\n        self.sch.add_task(\n            worker=WORKER, task_id=task_id, task_family='A', params=params, batch_id=batch_id,\n            status='RUNNING'\n        )\n        self.assertEqual({task_id}, set(self.sch.task_list('RUNNING', '').keys()))\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(BATCH_RUNNING, '').keys()))",
        "begin_line": 427,
        "end_line": 434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_multiple_retries#436",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_set_batch_runner_multiple_retries(self)",
        "snippet": "    def test_set_batch_runner_multiple_retries(self):\n        batch_id, task_id, params = self._start_simple_batch()\n        for _ in range(3):\n            self.sch.add_task(\n                worker=WORKER, task_id=task_id, task_family='A', params=params, batch_id=batch_id,\n                status='RUNNING'\n            )\n        self.assertEqual({task_id}, set(self.sch.task_list('RUNNING', '').keys()))\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(BATCH_RUNNING, '').keys()))",
        "begin_line": 436,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail#446",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail(self)",
        "snippet": "    def test_batch_fail(self):\n        self._start_simple_batch()\n        self.sch.add_task(worker=WORKER, task_id='A_1_2', status=FAILED, expl='bad failure')\n\n        task_ids = {'A_1', 'A_2'}\n        self.assertEqual(task_ids, set(self.sch.task_list(FAILED, '').keys()))\n        for task_id in task_ids:\n            expl = self.sch.fetch_error(task_id)['error']\n            self.assertEqual('bad failure', expl)",
        "begin_line": 446,
        "end_line": 454,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_max#456",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_max(self)",
        "snippet": "    def test_batch_fail_max(self):\n        self._start_simple_batch(use_max=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', status=FAILED, expl='bad max failure')\n\n        task_ids = {'A_1', 'A_2'}\n        self.assertEqual(task_ids, set(self.sch.task_list(FAILED, '').keys()))\n        for task_id in task_ids:\n            response = self.sch.fetch_error(task_id)\n            self.assertEqual('bad max failure', response['error'])",
        "begin_line": 456,
        "end_line": 464,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_from_dead_worker#466",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_from_dead_worker(self)",
        "snippet": "    def test_batch_fail_from_dead_worker(self):\n        self.setTime(1)\n        self._start_simple_batch()\n        self.setTime(601)\n        self.sch.prune()\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(FAILED, '').keys()))",
        "begin_line": 466,
        "end_line": 471,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_max_from_dead_worker#473",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_max_from_dead_worker(self)",
        "snippet": "    def test_batch_fail_max_from_dead_worker(self):\n        self.setTime(1)\n        self._start_simple_batch(use_max=True)\n        self.setTime(601)\n        self.sch.prune()\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(FAILED, '').keys()))",
        "begin_line": 473,
        "end_line": 478,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_from_dead_worker_without_running#480",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_fail_from_dead_worker_without_running(self)",
        "snippet": "    def test_batch_fail_from_dead_worker_without_running(self):\n        self.setTime(1)\n        self._start_simple_batch(mark_running=False)\n        self.setTime(601)\n        self.sch.prune()\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(FAILED, '').keys()))",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_update_status#487",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_update_status(self)",
        "snippet": "    def test_batch_update_status(self):\n        self._start_simple_batch()\n        self.sch.set_task_status_message('A_1_2', 'test message')\n        for task_id in ('A_1', 'A_2', 'A_1_2'):\n            self.assertEqual('test message', self.sch.get_task_status_message(task_id)['statusMessage'])",
        "begin_line": 487,
        "end_line": 491,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_tracking_url#493",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_tracking_url(self)",
        "snippet": "    def test_batch_tracking_url(self):\n        self._start_simple_batch()\n        self.sch.add_task(worker=WORKER, task_id='A_1_2', tracking_url='http://test.tracking.url/')\n\n        tasks = self.sch.task_list('', '')\n        for task_id in ('A_1', 'A_2', 'A_1_2'):\n            self.assertEqual('http://test.tracking.url/', tasks[task_id]['tracking_url'])",
        "begin_line": 493,
        "end_line": 499,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_finish_batch#501",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_finish_batch(self)",
        "snippet": "    def test_finish_batch(self):\n        self._start_simple_batch()\n        self.sch.add_task(worker=WORKER, task_id='A_1_2', status=DONE)\n        self.assertEqual({'A_1', 'A_2', 'A_1_2'}, set(self.sch.task_list(DONE, '').keys()))",
        "begin_line": 501,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_reschedule_max_batch#506",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_reschedule_max_batch(self)",
        "snippet": "    def test_reschedule_max_batch(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(\n            worker=WORKER, task_id='A_1', family='A', params={'a': '1'}, batchable=True)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_2', family='A', params={'a': '2'}, batchable=True)\n        response = self.sch.get_work(worker=WORKER)\n        batch_id = response['batch_id']\n        self.sch.add_task(\n            worker=WORKER, task_id='A_2', task_family='A', params={'a': '2'}, batch_id=batch_id,\n            status='RUNNING')\n        self.sch.add_task(worker=WORKER, task_id='A_2', status=DONE)\n        self.sch.add_task(\n            worker=WORKER, task_id='A_2', task_family='A', params={'a': '2'}, batchable=True)\n\n        self.assertEqual({'A_2'}, set(self.sch.task_list(PENDING, '').keys()))\n        self.assertEqual({'A_1'}, set(self.sch.task_list(DONE, '').keys()))",
        "begin_line": 506,
        "end_line": 522,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_resend_batch_on_get_work_retry#524",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_resend_batch_on_get_work_retry(self)",
        "snippet": "    def test_resend_batch_on_get_work_retry(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        response = self.sch.get_work(worker=WORKER)\n        response2 = self.sch.get_work(worker=WORKER, current_tasks=())\n        self.assertEqual(response['task_id'], response2['task_id'])\n        self.assertEqual(response['task_family'], response2.get('task_family'))\n        self.assertEqual(response['task_params'], response2.get('task_params'))",
        "begin_line": 524,
        "end_line": 534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_resend_batch_runner_on_get_work_retry#536",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_resend_batch_runner_on_get_work_retry(self)",
        "snippet": "    def test_resend_batch_runner_on_get_work_retry(self):\n        self._start_simple_batch()\n        get_work = self.sch.get_work(worker=WORKER, current_tasks=())\n        self.assertEqual('A_1_2', get_work['task_id'])",
        "begin_line": 536,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_resend_max_batch_runner_on_get_work_retry#541",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_resend_max_batch_runner_on_get_work_retry(self)",
        "snippet": "    def test_resend_max_batch_runner_on_get_work_retry(self):\n        self._start_simple_batch(use_max=True)\n        get_work = self.sch.get_work(worker=WORKER, current_tasks=())\n        self.assertEqual('A_2', get_work['task_id'])",
        "begin_line": 541,
        "end_line": 544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_resend_batch_runner_on_get_work#546",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_resend_batch_runner_on_get_work(self)",
        "snippet": "    def test_do_not_resend_batch_runner_on_get_work(self):\n        self._start_simple_batch()\n        get_work = self.sch.get_work(worker=WORKER, current_tasks=('A_1_2',))\n        self.assertIsNone(get_work['task_id'])",
        "begin_line": 546,
        "end_line": 549,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_resend_max_batch_runner_on_get_work#551",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_resend_max_batch_runner_on_get_work(self)",
        "snippet": "    def test_do_not_resend_max_batch_runner_on_get_work(self):\n        self._start_simple_batch(use_max=True)\n        get_work = self.sch.get_work(worker=WORKER, current_tasks=('A_2',))\n        self.assertIsNone(get_work['task_id'])",
        "begin_line": 551,
        "end_line": 554,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_rescheduled_batch_running_tasks_stay_batch_running_before_runner#556",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_rescheduled_batch_running_tasks_stay_batch_running_before_runner(self)",
        "snippet": "    def test_rescheduled_batch_running_tasks_stay_batch_running_before_runner(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        self.sch.get_work(worker=WORKER)\n\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(BATCH_RUNNING, '').keys()))",
        "begin_line": 556,
        "end_line": 568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_rescheduled_batch_running_tasks_stay_batch_running_after_runner#570",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_rescheduled_batch_running_tasks_stay_batch_running_after_runner(self)",
        "snippet": "    def test_rescheduled_batch_running_tasks_stay_batch_running_after_runner(self):\n        self._start_simple_batch()\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(BATCH_RUNNING, '').keys()))",
        "begin_line": 570,
        "end_line": 576,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disabled_batch_running_tasks_stay_batch_running_before_runner#578",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disabled_batch_running_tasks_stay_batch_running_before_runner(self)",
        "snippet": "    def test_disabled_batch_running_tasks_stay_batch_running_before_runner(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        self.sch.get_work(worker=WORKER)\n\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True, status=DISABLED)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True, status=DISABLED)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(BATCH_RUNNING, '').keys()))",
        "begin_line": 578,
        "end_line": 590,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_returns_batch_task_id_list#592",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_returns_batch_task_id_list(self)",
        "snippet": "    def test_get_work_returns_batch_task_id_list(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True)\n        response = self.sch.get_work(worker=WORKER)\n        self.assertEqual({'A_1', 'A_2'}, set(response['batch_task_ids']))",
        "begin_line": 592,
        "end_line": 599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disabled_batch_running_tasks_stay_batch_running_after_runner#601",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disabled_batch_running_tasks_stay_batch_running_after_runner(self)",
        "snippet": "    def test_disabled_batch_running_tasks_stay_batch_running_after_runner(self):\n        self._start_simple_batch()\n        self.sch.add_task(worker=WORKER, task_id='A_1', family='A', params={'a': '1'},\n                          batchable=True, status=DISABLED)\n        self.sch.add_task(worker=WORKER, task_id='A_2', family='A', params={'a': '2'},\n                          batchable=True, status=DISABLED)\n        self.assertEqual({'A_1', 'A_2'}, set(self.sch.task_list(BATCH_RUNNING, '').keys()))",
        "begin_line": 601,
        "end_line": 607,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_overwrite_tracking_url_while_running#609",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_overwrite_tracking_url_while_running(self)",
        "snippet": "    def test_do_not_overwrite_tracking_url_while_running(self):\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n        # not wiped out by another working scheduling as pending\n        self.sch.add_task(task_id='A', worker='Y', status='PENDING')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 609,
        "end_line": 615,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_update_tracking_url_while_running#617",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_update_tracking_url_while_running(self)",
        "snippet": "    def test_do_update_tracking_url_while_running(self):\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n        self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='stage_2')\n        self.assertEqual('stage_2', self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 617,
        "end_line": 622,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_keep_tracking_url_on_done_and_fail#624",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_keep_tracking_url_on_done_and_fail(self)",
        "snippet": "    def test_keep_tracking_url_on_done_and_fail(self):\n        for status in ('DONE', 'FAILED'):\n            self.sch.add_task(task_id='A', worker='X', status='RUNNING', tracking_url='trackme')\n            self.assertEqual('trackme', self.sch.task_list('RUNNING', '')['A']['tracking_url'])\n\n            self.sch.add_task(task_id='A', worker='X', status=status)\n            self.assertEqual('trackme', self.sch.task_list(status, '')['A']['tracking_url'])",
        "begin_line": 624,
        "end_line": 630,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_drop_tracking_url_when_rescheduled_while_not_running#632",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_drop_tracking_url_when_rescheduled_while_not_running(self)",
        "snippet": "    def test_drop_tracking_url_when_rescheduled_while_not_running(self):\n        for status in ('DONE', 'FAILED', 'PENDING'):\n            self.sch.add_task(task_id='A', worker='X', status=status, tracking_url='trackme')\n            self.assertEqual('trackme', self.sch.task_list(status, '')['A']['tracking_url'])\n\n            self.sch.add_task(task_id='A', worker='Y', status='PENDING')\n            self.assertIsNone(self.sch.task_list('PENDING', '')['A']['tracking_url'])",
        "begin_line": 632,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_reset_tracking_url_on_new_run#640",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_reset_tracking_url_on_new_run(self)",
        "snippet": "    def test_reset_tracking_url_on_new_run(self):\n        self.sch.add_task(task_id='A', worker='X', status='PENDING', tracking_url='trackme')\n        self.assertEqual('trackme', self.sch.task_list('PENDING', '')['A']['tracking_url'])\n\n        self.sch.add_task(task_id='A', worker='Y', status='RUNNING')\n        self.assertIsNone(self.sch.task_list('RUNNING', '')['A']['tracking_url'])",
        "begin_line": 640,
        "end_line": 645,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_remove_dep#647",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_remove_dep(self)",
        "snippet": "    def test_remove_dep(self):\n        # X schedules A -> B, A is broken\n        # Y schedules C -> B: this should remove A as a dep of B\n        self.sch.add_task(task_id='A', worker='X', runnable=False)\n        self.sch.add_task(task_id='B', deps=('A',), worker='X')\n\n        # X can't build anything\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], None)\n\n        self.sch.add_task(task_id='B', deps=('C',), worker='Y')  # should reset dependencies for A\n        self.sch.add_task(task_id='C', worker='Y', status=DONE)\n\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 647,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_start_time#661",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_start_time(self)",
        "snippet": "    def test_start_time(self):\n        self.setTime(100)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.setTime(200)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.assertEqual(100, self.sch.task_list(DONE, '')['A']['start_time'])",
        "begin_line": 661,
        "end_line": 667,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_last_updated_does_not_change_with_same_status_update#669",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_last_updated_does_not_change_with_same_status_update(self)",
        "snippet": "    def test_last_updated_does_not_change_with_same_status_update(self):\n        for t, status in ((100, PENDING), (300, DONE), (500, DISABLED)):\n            self.setTime(t)\n            self.sch.add_task(worker=WORKER, task_id='A', status=status)\n            self.assertEqual(t, self.sch.task_list(status, '')['A']['last_updated'])\n\n            self.setTime(t + 100)\n            self.sch.add_task(worker=WORKER, task_id='A', status=status)\n            self.assertEqual(t, self.sch.task_list(status, '')['A']['last_updated'])",
        "begin_line": 669,
        "end_line": 677,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_last_updated_shows_running_start#679",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_last_updated_shows_running_start(self)",
        "snippet": "    def test_last_updated_shows_running_start(self):\n        self.setTime(100)\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.assertEqual(100, self.sch.task_list(PENDING, '')['A']['last_updated'])\n\n        self.setTime(200)\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.assertEqual(200, self.sch.task_list('RUNNING', '')['A']['last_updated'])\n\n        self.setTime(300)\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.assertEqual(200, self.sch.task_list('RUNNING', '')['A']['last_updated'])",
        "begin_line": 679,
        "end_line": 690,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_last_updated_with_failure_and_recovery#692",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_last_updated_with_failure_and_recovery(self)",
        "snippet": "    def test_last_updated_with_failure_and_recovery(self):\n        self.setTime(100)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n\n        self.setTime(200)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.assertEqual(200, self.sch.task_list(FAILED, '')['A']['last_updated'])\n\n        self.setTime(1000)\n        self.sch.prune()\n        self.assertEqual(1000, self.sch.task_list(PENDING, '')['A']['last_updated'])",
        "begin_line": 692,
        "end_line": 703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_timeout#705",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_timeout(self)",
        "snippet": "    def test_timeout(self):\n        # A bug that was earlier present when restarting the same flow\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.setTime(10000)\n        self.sch.add_task(task_id='A', worker='Y')  # Will timeout X but not schedule A for removal\n        for i in range(2000):\n            self.setTime(10000 + i)\n            self.sch.ping(worker='Y')\n        self.sch.add_task(task_id='A', status=DONE, worker='Y')  # This used to raise an exception since A was removed",
        "begin_line": 705,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disallowed_state_changes#717",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disallowed_state_changes(self)",
        "snippet": "    def test_disallowed_state_changes(self):\n        # Test that we can not schedule an already running task\n        t = 'A'\n        self.sch.add_task(task_id=t, worker='X')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], t)\n        self.sch.add_task(task_id=t, worker='Y')\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], None)",
        "begin_line": 717,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_two_worker_info#725",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_two_worker_info(self)",
        "snippet": "    def test_two_worker_info(self):\n        # Make sure the scheduler returns info that some other worker is running task A\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_task(worker='Y', task_id='A')\n\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        r = self.sch.get_work(worker='Y')\n        self.assertEqual(r['task_id'], None)  # Worker Y is pending on A to be done\n        s = r['running_tasks'][0]\n        self.assertEqual(s['task_id'], 'A')\n        self.assertEqual(s['worker'], 'X')",
        "begin_line": 725,
        "end_line": 735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_get_work#737",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_get_work(self)",
        "snippet": "    def test_assistant_get_work(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work(worker='Y', assistant=True)['task_id'], 'A')\n\n        # check that the scheduler recognizes tasks as running\n        running_tasks = self.sch.task_list('RUNNING', '')\n        self.assertEqual(len(running_tasks), 1)\n        self.assertEqual(list(running_tasks.keys()), ['A'])\n        self.assertEqual(running_tasks['A']['worker_running'], 'Y')",
        "begin_line": 737,
        "end_line": 747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_get_work_external_task#749",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_get_work_external_task(self)",
        "snippet": "    def test_assistant_get_work_external_task(self):\n        self.sch.add_task(worker='X', task_id='A', runnable=False)\n        self.assertTrue(self.sch.get_work(worker='Y', assistant=True)['task_id'] is None)",
        "begin_line": 749,
        "end_line": 751,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_fails_when_assistant_dies#753",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_fails_when_assistant_dies(self)",
        "snippet": "    def test_task_fails_when_assistant_dies(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.add_worker('Y', [])\n\n        self.assertEqual(self.sch.get_work(worker='Y', assistant=True)['task_id'], 'A')\n        self.assertEqual(list(self.sch.task_list('RUNNING', '').keys()), ['A'])\n\n        # Y dies for 50 seconds, X stays alive\n        self.setTime(50)\n        self.sch.ping(worker='X')\n        self.assertEqual(list(self.sch.task_list('FAILED', '').keys()), ['A'])",
        "begin_line": 753,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_prune_with_live_assistant#766",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_prune_with_live_assistant(self)",
        "snippet": "    def test_prune_with_live_assistant(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.sch.get_work(worker='Y', assistant=True)\n        self.sch.add_task(worker='Y', task_id='A', status=DONE, assistant=True)\n\n        # worker X stops communicating, A should be marked for removal\n        self.setTime(600)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n\n        # A will now be pruned\n        self.setTime(2000)\n        self.sch.prune()\n        self.assertFalse(list(self.sch.task_list('', '')))",
        "begin_line": 766,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_re_enable_failed_task_assistant#782",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_re_enable_failed_task_assistant(self)",
        "snippet": "    def test_re_enable_failed_task_assistant(self):\n        self.setTime(0)\n        self.sch.add_worker('X', [('assistant', True)])\n        self.sch.add_task(worker='X', task_id='A', status=FAILED, assistant=True)\n\n        # should be failed now\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])\n\n        # resets to PENDING after 100 seconds\n        self.setTime(101)\n        self.sch.ping(worker='X')  # worker still alive\n        self.assertEqual('PENDING', self.sch.task_list('', '')['A']['status'])",
        "begin_line": 782,
        "end_line": 793,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_doesnt_keep_alive_task#795",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_doesnt_keep_alive_task(self)",
        "snippet": "    def test_assistant_doesnt_keep_alive_task(self):\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.sch.add_worker('Y', {'assistant': True})\n\n        remove_delay = self.get_scheduler_config()['remove_delay'] + 1.0\n        self.setTime(remove_delay)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n        self.assertEqual(['A'], list(self.sch.task_list(status='FAILED', upstream_status='').keys()))\n        self.assertEqual(['A'], list(self.sch.task_list(status='', upstream_status='').keys()))\n\n        self.setTime(2*remove_delay)\n        self.sch.ping(worker='Y')\n        self.sch.prune()\n        self.assertEqual([], list(self.sch.task_list(status='', upstream_status='').keys()))",
        "begin_line": 795,
        "end_line": 811,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_request_runnable_task#813",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_request_runnable_task(self)",
        "snippet": "    def test_assistant_request_runnable_task(self):\n        \"\"\"\n        Test that an assistant gets a task despite it havent registered for it\n        \"\"\"\n        self.setTime(0)\n        self.sch.add_task(worker='X', task_id='A', runnable=True)\n        self.setTime(600)\n        self.sch.prune()\n\n        self.assertEqual('A', self.sch.get_work(worker='Y', assistant=True)['task_id'])",
        "begin_line": 813,
        "end_line": 822,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_request_external_task#824",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_request_external_task(self)",
        "snippet": "    def test_assistant_request_external_task(self):\n        self.sch.add_task(worker='X', task_id='A', runnable=False)\n        self.assertIsNone(self.sch.get_work(worker='Y', assistant=True)['task_id'])",
        "begin_line": 824,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest._test_prune_done_tasks#828",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest._test_prune_done_tasks(self, expected=None)",
        "snippet": "    def _test_prune_done_tasks(self, expected=None):\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'], status=DONE)\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['B'])\n\n        self.setTime(600)\n        self.sch.ping(worker='MAYBE_ASSITANT')\n        self.sch.prune()\n        self.setTime(2000)\n        self.sch.ping(worker='MAYBE_ASSITANT')\n        self.sch.prune()\n\n        self.assertEqual(set(expected), set(self.sch.task_list('', '').keys()))",
        "begin_line": 828,
        "end_line": 841,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_prune_done_tasks_not_assistant#843",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_prune_done_tasks_not_assistant(self, expected=None)",
        "snippet": "    def test_prune_done_tasks_not_assistant(self, expected=None):\n        # Here, MAYBE_ASSISTANT isnt an assistant\n        self._test_prune_done_tasks(expected=[])",
        "begin_line": 843,
        "end_line": 845,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_keep_tasks_for_assistant#847",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_keep_tasks_for_assistant(self)",
        "snippet": "    def test_keep_tasks_for_assistant(self):\n        self.sch.get_work(worker='MAYBE_ASSITANT', assistant=True)  # tell the scheduler this is an assistant\n        self._test_prune_done_tasks([])",
        "begin_line": 847,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_keep_scheduler_disabled_tasks_for_assistant#851",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_keep_scheduler_disabled_tasks_for_assistant(self)",
        "snippet": "    def test_keep_scheduler_disabled_tasks_for_assistant(self):\n        self.sch.get_work(worker='MAYBE_ASSITANT', assistant=True)  # tell the scheduler this is an assistant\n\n        # create a scheduler disabled task and a worker disabled task\n        for i in range(10):\n            self.sch.add_task(worker=WORKER, task_id='D', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='E', status=DISABLED)\n\n        # scheduler prunes the worker disabled task\n        self.assertEqual(set(['D', 'E']), set(self.sch.task_list(DISABLED, '')))\n        self._test_prune_done_tasks([])",
        "begin_line": 851,
        "end_line": 861,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_keep_failed_tasks_for_assistant#863",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_keep_failed_tasks_for_assistant(self)",
        "snippet": "    def test_keep_failed_tasks_for_assistant(self):\n        self.sch.get_work(worker='MAYBE_ASSITANT', assistant=True)  # tell the scheduler this is an assistant\n        self.sch.add_task(worker=WORKER, task_id='D', status=FAILED, deps=['A'])\n        self._test_prune_done_tasks([])",
        "begin_line": 863,
        "end_line": 866,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending#868",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending(self)",
        "snippet": "    def test_count_pending(self):\n        for num_tasks in range(1, 20):\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks), status=PENDING)\n            expected = {\n                'n_pending_tasks': num_tasks,\n                'n_unique_pending': num_tasks,\n                'n_pending_last_scheduled': num_tasks,\n                'running_tasks': [],\n                'worker_state': 'active',\n            }\n            self.assertEqual(expected, self.sch.count_pending(WORKER))",
        "begin_line": 868,
        "end_line": 878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_include_failures#880",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_include_failures(self)",
        "snippet": "    def test_count_pending_include_failures(self):\n        for num_tasks in range(1, 20):\n            # must be scheduled as pending before failed to ensure WORKER is in the task's workers\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks), status=PENDING)\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks), status=FAILED)\n            expected = {\n                'n_pending_tasks': num_tasks,\n                'n_unique_pending': num_tasks,\n                'n_pending_last_scheduled': num_tasks,\n                'running_tasks': [],\n                'worker_state': 'active',\n            }\n            self.assertEqual(expected, self.sch.count_pending(WORKER))",
        "begin_line": 880,
        "end_line": 892,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_do_not_include_done_or_disabled#894",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_do_not_include_done_or_disabled(self)",
        "snippet": "    def test_count_pending_do_not_include_done_or_disabled(self):\n        for num_tasks in range(1, 20, 2):\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks), status=PENDING)\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks + 1), status=PENDING)\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks), status=DONE)\n            self.sch.add_task(worker=WORKER, task_id=str(num_tasks + 1), status=DISABLED)\n        expected = {\n            'n_pending_tasks': 0,\n            'n_unique_pending': 0,\n            'n_pending_last_scheduled': 0,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected, self.sch.count_pending(WORKER))",
        "begin_line": 894,
        "end_line": 907,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_do_not_count_upstream_disabled#909",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_do_not_count_upstream_disabled(self)",
        "snippet": "    def test_count_pending_do_not_count_upstream_disabled(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.sch.add_task(worker=WORKER, task_id='B', status=DISABLED)\n        self.sch.add_task(worker=WORKER, task_id='C', status=PENDING, deps=['A', 'B'])\n        expected = {\n            'n_pending_tasks': 1,\n            'n_unique_pending': 1,\n            'n_pending_last_scheduled': 1,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected, self.sch.count_pending(WORKER))",
        "begin_line": 909,
        "end_line": 920,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_count_upstream_failed#922",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_count_upstream_failed(self)",
        "snippet": "    def test_count_pending_count_upstream_failed(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='B', status=PENDING, deps=['A'])\n        expected = {\n            'n_pending_tasks': 2,\n            'n_unique_pending': 2,\n            'n_pending_last_scheduled': 2,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected, self.sch.count_pending(WORKER))",
        "begin_line": 922,
        "end_line": 933,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_missing_worker#935",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_missing_worker(self)",
        "snippet": "    def test_count_pending_missing_worker(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        expected = {\n            'n_pending_tasks': 0,\n            'n_unique_pending': 0,\n            'n_pending_last_scheduled': 0,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected, self.sch.count_pending('other_worker'))",
        "begin_line": 935,
        "end_line": 944,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_uniques#946",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_uniques(self)",
        "snippet": "    def test_count_pending_uniques(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.sch.add_task(worker=WORKER, task_id='B', status=PENDING)\n        self.sch.add_task(worker=WORKER, task_id='C', status=PENDING)\n\n        self.sch.add_task(worker='other_worker', task_id='A', status=PENDING)\n\n        expected = {\n            'n_pending_tasks': 3,\n            'n_unique_pending': 2,\n            'n_pending_last_scheduled': 2,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected, self.sch.count_pending(WORKER))",
        "begin_line": 946,
        "end_line": 960,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_last_scheduled#962",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_last_scheduled(self)",
        "snippet": "    def test_count_pending_last_scheduled(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=PENDING)\n        self.sch.add_task(worker=WORKER, task_id='B', status=PENDING)\n        self.sch.add_task(worker=WORKER, task_id='C', status=PENDING)\n\n        self.sch.add_task(worker='other_worker', task_id='A', status=PENDING)\n        self.sch.add_task(worker='other_worker', task_id='B', status=PENDING)\n        self.sch.add_task(worker='other_worker', task_id='C', status=PENDING)\n\n        expected = {\n            'n_pending_tasks': 3,\n            'n_unique_pending': 0,\n            'n_pending_last_scheduled': 0,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected, self.sch.count_pending(WORKER))\n\n        expected_other_worker = {\n            'n_pending_tasks': 3,\n            'n_unique_pending': 0,\n            'n_pending_last_scheduled': 3,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected_other_worker, self.sch.count_pending('other_worker'))",
        "begin_line": 962,
        "end_line": 987,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_disabled_worker#989",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_disabled_worker(self)",
        "snippet": "    def test_count_pending_disabled_worker(self):\n        self.sch.add_task(worker=WORKER,  task_id='A', status=PENDING)\n\n        expected_active_state = {\n            'n_pending_tasks': 1,\n            'n_unique_pending': 1,\n            'n_pending_last_scheduled': 1,\n            'running_tasks': [],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected_active_state, self.sch.count_pending(worker=WORKER))\n\n        expected_disabled_state = {\n            'n_pending_tasks': 0,\n            'n_unique_pending': 0,\n            'n_pending_last_scheduled': 0,\n            'running_tasks': [],\n            'worker_state': 'disabled',\n        }\n        self.sch.disable_worker(worker=WORKER)\n        self.assertEqual(expected_disabled_state, self.sch.count_pending(worker=WORKER))",
        "begin_line": 989,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_running_tasks#1011",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_count_pending_running_tasks(self)",
        "snippet": "    def test_count_pending_running_tasks(self):\n        self.sch.add_task(worker=WORKER,  task_id='A', status=PENDING)\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n\n        expected_active_state = {\n            'n_pending_tasks': 0,\n            'n_unique_pending': 0,\n            'n_pending_last_scheduled': 0,\n            'running_tasks': [{'task_id': 'A', 'worker': 'myworker'}],\n            'worker_state': 'active',\n        }\n        self.assertEqual(expected_active_state, self.sch.count_pending(worker=WORKER))",
        "begin_line": 1011,
        "end_line": 1022,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_resources_none_allow_one#1024",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_resources_none_allow_one(self)",
        "snippet": "    def test_scheduler_resources_none_allow_one(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_resources_none_disallow_two#1028",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_resources_none_disallow_two(self)",
        "snippet": "    def test_scheduler_resources_none_disallow_two(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_insufficient_resources#1032",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_insufficient_resources(self)",
        "snippet": "    def test_scheduler_with_insufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=2)\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 1032,
        "end_line": 1035,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_sufficient_resources#1037",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_sufficient_resources(self)",
        "snippet": "    def test_scheduler_with_sufficient_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 3})\n        self.sch.update_resources(R1=3)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')",
        "begin_line": 1037,
        "end_line": 1040,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_resources_used#1042",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_resources_used(self)",
        "snippet": "    def test_scheduler_with_resources_used(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 1})\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R1': 1})\n        self.sch.update_resources(R1=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 1042,
        "end_line": 1048,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_overprovisioned_on_other_resource#1050",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_overprovisioned_on_other_resource(self)",
        "snippet": "    def test_scheduler_overprovisioned_on_other_resource(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R1': 2})\n        self.sch.update_resources(R1=2)\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R2': 2})\n        self.sch.update_resources(R1=1, R2=2)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'B')",
        "begin_line": 1050,
        "end_line": 1057,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_priority_and_competing_resources#1059",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduler_with_priority_and_competing_resources(self)",
        "snippet": "    def test_scheduler_with_priority_and_competing_resources(self):\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n        self.sch.update_resources(R=1)\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='D', priority=0)\n        self.assertEqual(self.sch.get_work(worker='Y')['task_id'], 'D')",
        "begin_line": 1059,
        "end_line": 1069,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_lock_resources_when_not_ready#1071",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_lock_resources_when_not_ready(self)",
        "snippet": "    def test_do_not_lock_resources_when_not_ready(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 1071,
        "end_line": 1079,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_lock_resources_when_one_of_multiple_workers_is_ready#1081",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_lock_resources_when_one_of_multiple_workers_is_ready(self)",
        "snippet": "    def test_lock_resources_when_one_of_multiple_workers_is_ready(self):\n        self.sch.get_work(worker='X')  # indicate to the scheduler that X is active\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 2)])\n        self.sch.add_worker('Y', [])\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 1081,
        "end_line": 1090,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_lock_resources_while_running_higher_priority#1092",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_lock_resources_while_running_higher_priority(self)",
        "snippet": "    def test_do_not_lock_resources_while_running_higher_priority(self):\n        \"\"\" Test to make sure that resources won't go unused waiting on workers \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=10)\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 1092,
        "end_line": 1101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_lock_resources_while_running_lower_priority#1103",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_lock_resources_while_running_lower_priority(self)",
        "snippet": "    def test_lock_resources_while_running_lower_priority(self):\n        \"\"\" Make sure resources will be made available while working on lower priority tasks \"\"\"\n        self.sch.add_task(worker='X', task_id='A', priority=4)\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1}, priority=5)\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=1)\n\n        self.sch.update_resources(R=1)\n        self.sch.add_worker('X', [('workers', 1)])\n        self.assertFalse(self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 1103,
        "end_line": 1112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_lock_resources_for_second_worker#1114",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_lock_resources_for_second_worker(self)",
        "snippet": "    def test_lock_resources_for_second_worker(self):\n        self.sch.get_work(worker='Y')  # indicate to the scheduler that Y is active\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1})\n        self.sch.add_task(worker='X', task_id='B', resources={'R': 1})\n        self.sch.add_task(worker='Y', task_id='C', resources={'R': 1}, priority=10)\n\n        self.sch.add_worker('X', {'workers': 2})\n        self.sch.add_worker('Y', {'workers': 1})\n        self.sch.update_resources(R=2)\n\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n        self.assertFalse(self.sch.get_work(worker='X')['task_id'])",
        "begin_line": 1114,
        "end_line": 1125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_can_work_on_lower_priority_while_waiting_for_resources#1127",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_can_work_on_lower_priority_while_waiting_for_resources(self)",
        "snippet": "    def test_can_work_on_lower_priority_while_waiting_for_resources(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'R': 1}, priority=0)\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n\n        self.sch.add_task(worker='Y', task_id='B', resources={'R': 1}, priority=10)\n        self.sch.add_task(worker='Y', task_id='C', priority=0)\n        self.sch.update_resources(R=1)\n\n        self.assertEqual('C', self.sch.get_work(worker='Y')['task_id'])",
        "begin_line": 1127,
        "end_line": 1135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.validate_resource_count#1137",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.validate_resource_count(self, name, count)",
        "snippet": "    def validate_resource_count(self, name, count):\n        counts = {resource['name']: resource['num_total'] for resource in self.sch.resource_list()}\n        self.assertEqual(count, counts.get(name))",
        "begin_line": 1137,
        "end_line": 1139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_update_new_resource#1141",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_update_new_resource(self)",
        "snippet": "    def test_update_new_resource(self):\n        self.validate_resource_count('new_resource', None)  # new_resource is not in the scheduler\n        self.sch.update_resource('new_resource', 1)\n        self.validate_resource_count('new_resource', 1)",
        "begin_line": 1141,
        "end_line": 1144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_update_existing_resource#1146",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_update_existing_resource(self)",
        "snippet": "    def test_update_existing_resource(self):\n        self.sch.update_resource('new_resource', 1)\n        self.sch.update_resource('new_resource', 2)\n        self.validate_resource_count('new_resource', 2)",
        "begin_line": 1146,
        "end_line": 1149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_existing_resource#1151",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_existing_resource(self)",
        "snippet": "    def test_disable_existing_resource(self):\n        self.sch.update_resource('new_resource', 1)\n        self.sch.update_resource('new_resource', 0)\n        self.validate_resource_count('new_resource', 0)",
        "begin_line": 1151,
        "end_line": 1154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_attempt_to_set_resource_to_negative_value#1156",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_attempt_to_set_resource_to_negative_value(self)",
        "snippet": "    def test_attempt_to_set_resource_to_negative_value(self):\n        self.sch.update_resource('new_resource', 1)\n        self.assertFalse(self.sch.update_resource('new_resource', -1))\n        self.validate_resource_count('new_resource', 1)",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_attempt_to_set_resource_to_non_integer#1161",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_attempt_to_set_resource_to_non_integer(self)",
        "snippet": "    def test_attempt_to_set_resource_to_non_integer(self):\n        self.sch.update_resource('new_resource', 1)\n        self.assertFalse(self.sch.update_resource('new_resource', 1.3))\n        self.assertFalse(self.sch.update_resource('new_resource', '1'))\n        self.assertFalse(self.sch.update_resource('new_resource', None))\n        self.validate_resource_count('new_resource', 1)",
        "begin_line": 1161,
        "end_line": 1166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priority_update_with_pruning#1168",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priority_update_with_pruning(self)",
        "snippet": "    def test_priority_update_with_pruning(self):\n        self.setTime(0)\n        self.sch.add_task(task_id='A', worker='X')\n\n        self.setTime(50)  # after worker disconnects\n        self.sch.prune()\n        self.sch.add_task(task_id='B', deps=['A'], worker='X')\n\n        self.setTime(2000)  # after remove for task A\n        self.sch.prune()\n\n        # Here task A that B depends on is missing\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['B'], priority=100)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='D', priority=10)\n\n        self.check_task_order('ABCD')",
        "begin_line": 1168,
        "end_line": 1185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_update_resources#1187",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_update_resources(self)",
        "snippet": "    def test_update_resources(self):\n        self.sch.add_task(worker=WORKER, task_id='A', deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 2})\n        self.sch.update_resources(r=1)\n\n        # B requires too many resources, we can't schedule\n        self.check_task_order([])\n\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 1})\n\n        # now we have enough resources\n        self.check_task_order(['B', 'A'])",
        "begin_line": 1187,
        "end_line": 1198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_handle_multiple_resources#1200",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_handle_multiple_resources(self)",
        "snippet": "    def test_handle_multiple_resources(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1, 'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=2, r2=1)\n\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        self.check_task_order('C')",
        "begin_line": 1200,
        "end_line": 1207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_single_resource_lock#1209",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_single_resource_lock(self)",
        "snippet": "    def test_single_resource_lock(self):\n        self.sch.add_task(worker='X', task_id='A', resources={'r': 1})\n        self.assertEqual('A', self.sch.get_work(worker='X')['task_id'])\n\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 2}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r': 1})\n        self.sch.update_resources(r=2)\n\n        # Should wait for 2 units of r to be available for B before scheduling C\n        self.check_task_order([])",
        "begin_line": 1209,
        "end_line": 1218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_no_lock_if_too_many_resources_required#1220",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_no_lock_if_too_many_resources_required(self)",
        "snippet": "    def test_no_lock_if_too_many_resources_required(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r': 2}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r': 1})\n        self.sch.update_resources(r=1)\n        self.check_task_order('B')",
        "begin_line": 1220,
        "end_line": 1224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_multiple_resources_lock#1226",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_multiple_resources_lock(self)",
        "snippet": "    def test_multiple_resources_lock(self):\n        self.sch.get_work(worker='X')  # indicate to the scheduler that X is active\n        self.sch.add_task(worker='X', task_id='A', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r2': 1})\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r1': 1})\n        self.sch.update_resources(r1=1, r2=1)\n\n        # should preserve both resources for worker 'X'\n        self.check_task_order([])",
        "begin_line": 1226,
        "end_line": 1234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_multiple_resources_no_lock#1236",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_multiple_resources_no_lock(self)",
        "snippet": "    def test_multiple_resources_no_lock(self):\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1, 'r2': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='C', resources={'r2': 1})\n        self.sch.update_resources(r1=1, r2=2)\n\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n        # C doesn't block B, so it can go first\n        self.check_task_order('C')",
        "begin_line": 1236,
        "end_line": 1244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_allow_stowaway_resources#1246",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_allow_stowaway_resources(self)",
        "snippet": "    def test_do_not_allow_stowaway_resources(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'r1': 1}, family='A', params={'a': '1'}, batchable=True, priority=1)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'r1': 2}, family='A', params={'a': '2'}, batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'r2': 1}, family='A', params={'a': '3'}, batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A4', resources={'r1': 1}, family='A', params={'a': '4'}, batchable=True)\n        self.assertEqual({'A1', 'A4'}, set(self.sch.get_work(worker=WORKER)['batch_task_ids']))",
        "begin_line": 1246,
        "end_line": 1252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_allow_same_resources#1254",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_allow_same_resources(self)",
        "snippet": "    def test_do_not_allow_same_resources(self):\n        self.sch.add_task_batcher(worker=WORKER, task_family='A', batched_args=['a'])\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'r1': 1}, family='A', params={'a': '1'}, batchable=True, priority=1)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'r1': 1}, family='A', params={'a': '2'}, batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'r1': 1}, family='A', params={'a': '3'}, batchable=True)\n        self.sch.add_task(worker=WORKER, task_id='A4', resources={'r1': 1}, family='A', params={'a': '4'}, batchable=True)\n        self.assertEqual({'A1', 'A2', 'A3', 'A4'}, set(self.sch.get_work(worker=WORKER)['batch_task_ids']))",
        "begin_line": 1254,
        "end_line": 1260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_change_resources_on_running_task#1262",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_change_resources_on_running_task(self)",
        "snippet": "    def test_change_resources_on_running_task(self):\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'a': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'a': 1}, priority=1)\n\n        self.assertEqual('A1', self.sch.get_work(worker=WORKER)['task_id'])\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n\n        # switch the resource of the running task\n        self.sch.add_task(worker='other', task_id='A1', resources={'b': 1}, priority=1)\n\n        # the running task should be using the resource it had when it started running\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1262,
        "end_line": 1273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_interleave_resource_change_and_get_work#1275",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_interleave_resource_change_and_get_work(self)",
        "snippet": "    def test_interleave_resource_change_and_get_work(self):\n        for i in range(100):\n            self.sch.add_task(worker=WORKER, task_id='A{}'.format(i), resources={'a': 1}, priority=100-i)\n\n        for i in range(100):\n            self.sch.get_work(worker=WORKER)\n            self.sch.add_task(worker='other', task_id='A{}'.format(i), resources={'b': 1}, priority=100-i)\n\n        # we should only see 1 task  per resource rather than all 100 tasks running\n        self.assertEqual(2, len(self.sch.task_list(RUNNING, '')))",
        "begin_line": 1275,
        "end_line": 1284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_max_task_id#1286",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_max_task_id(self)",
        "snippet": "    def test_assistant_has_different_resources_than_scheduled_max_task_id(self):\n        self.sch.add_task_batcher(worker='assistant', task_family='A', batched_args=['a'], max_batch_size=2)\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'a': 1}, family='A', params={'a': '1'}, batchable=True, priority=1)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'a': 1}, family='A', params={'a': '2'}, batchable=True, priority=2)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'a': 1}, family='A', params={'a': '3'}, batchable=True, priority=3)\n\n        result = self.sch.get_work(worker='assistant', assistant=True)\n        self.assertEqual({'A3', 'A2'}, set(result['batch_task_ids']))\n        self.sch.add_task(worker='assistant', task_id='A3', status=RUNNING, batch_id=result['batch_id'], resources={'b': 1})\n\n        # the assistant changed the status, but only after it was batch running\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1286,
        "end_line": 1297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_new_task_id#1299",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_new_task_id(self)",
        "snippet": "    def test_assistant_has_different_resources_than_scheduled_new_task_id(self):\n        self.sch.add_task_batcher(worker='assistant', task_family='A', batched_args=['a'], max_batch_size=2)\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'a': 1}, family='A', params={'a': '1'}, batchable=True, priority=1)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'a': 1}, family='A', params={'a': '2'}, batchable=True, priority=2)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'a': 1}, family='A', params={'a': '3'}, batchable=True, priority=3)\n\n        result = self.sch.get_work(worker='assistant', assistant=True)\n        self.assertEqual({'A3', 'A2'}, set(result['batch_task_ids']))\n        self.sch.add_task(worker='assistant', task_id='A_2_3', status=RUNNING, batch_id=result['batch_id'], resources={'b': 1})\n\n        # the assistant changed the status, but only after it was batch running\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1299,
        "end_line": 1310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_max_task_id_during_scheduling#1312",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_max_task_id_during_scheduling(self)",
        "snippet": "    def test_assistant_has_different_resources_than_scheduled_max_task_id_during_scheduling(self):\n        self.sch.add_task_batcher(worker='assistant', task_family='A', batched_args=['a'], max_batch_size=2)\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'a': 1}, family='A', params={'a': '1'}, batchable=True, priority=1)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'a': 1}, family='A', params={'a': '2'}, batchable=True, priority=2)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'a': 1}, family='A', params={'a': '3'}, batchable=True, priority=3)\n\n        result = self.sch.get_work(worker='assistant', assistant=True)\n        self.assertEqual({'A3', 'A2'}, set(result['batch_task_ids']))\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'b': 1}, family='A', params={'a': '2'}, batchable=True, priority=2)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'b': 1}, family='A', params={'a': '3'}, batchable=True, priority=3)\n        self.sch.add_task(worker='assistant', task_id='A3', status=RUNNING, batch_id=result['batch_id'], resources={'b': 1})\n\n        # the statuses changed, but only after they wree batch running\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1312,
        "end_line": 1325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_new_task_id_during_scheduling#1327",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_has_different_resources_than_scheduled_new_task_id_during_scheduling(self)",
        "snippet": "    def test_assistant_has_different_resources_than_scheduled_new_task_id_during_scheduling(self):\n        self.sch.add_task_batcher(worker='assistant', task_family='A', batched_args=['a'], max_batch_size=2)\n        self.sch.add_task(worker=WORKER, task_id='A1', resources={'a': 1}, family='A', params={'a': '1'}, batchable=True, priority=1)\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'a': 1}, family='A', params={'a': '2'}, batchable=True, priority=2)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'a': 1}, family='A', params={'a': '3'}, batchable=True, priority=3)\n\n        result = self.sch.get_work(worker='assistant', assistant=True)\n        self.assertEqual({'A3', 'A2'}, set(result['batch_task_ids']))\n        self.sch.add_task(worker=WORKER, task_id='A2', resources={'b': 1}, family='A', params={'a': '2'}, batchable=True, priority=2)\n        self.sch.add_task(worker=WORKER, task_id='A3', resources={'b': 1}, family='A', params={'a': '3'}, batchable=True, priority=3)\n        self.sch.add_task(worker='assistant', task_id='A_2_3', status=RUNNING, batch_id=result['batch_id'], resources={'b': 1})\n\n        # the statuses changed, but only after they were batch running\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1327,
        "end_line": 1340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_allow_resource_use_while_scheduling#1342",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_allow_resource_use_while_scheduling(self)",
        "snippet": "    def test_allow_resource_use_while_scheduling(self):\n        self.sch.update_resources(r1=1)\n        self.sch.add_task(worker='SCHEDULING', task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', resources={'r1': 1}, priority=1)\n        self.assertEqual('B', self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1342,
        "end_line": 1346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_stop_locking_resource_for_uninterested_worker#1348",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_stop_locking_resource_for_uninterested_worker(self)",
        "snippet": "    def test_stop_locking_resource_for_uninterested_worker(self):\n        self.setTime(0)\n        self.sch.update_resources(r1=1)\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n        self.sch.add_task(worker=WORKER, task_id='A', resources={'r1': 1}, priority=10)\n        self.sch.add_task(worker='LOW_PRIO', task_id='B', resources={'r1': 1}, priority=1)\n        self.assertIsNone(self.sch.get_work(worker='LOW_PRIO')['task_id'])\n\n        self.setTime(120)\n        self.assertEqual('B', self.sch.get_work(worker='LOW_PRIO')['task_id'])",
        "begin_line": 1348,
        "end_line": 1357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.check_task_order#1359",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.check_task_order(self, order)",
        "snippet": "    def check_task_order(self, order):\n        for expected_id in order:\n            self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], expected_id)\n            self.sch.add_task(worker=WORKER, task_id=expected_id, status=DONE)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 1359,
        "end_line": 1363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priorities#1365",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priorities(self)",
        "snippet": "    def test_priorities(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5)\n        self.sch.add_task(worker=WORKER, task_id='C', priority=15)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=9)\n        self.check_task_order(['C', 'A', 'D', 'B'])",
        "begin_line": 1365,
        "end_line": 1370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priorities_default_and_negative#1372",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priorities_default_and_negative(self)",
        "snippet": "    def test_priorities_default_and_negative(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C', priority=15)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=-20)\n        self.sch.add_task(worker=WORKER, task_id='E', priority=1)\n        self.check_task_order(['C', 'A', 'E', 'B', 'D'])",
        "begin_line": 1372,
        "end_line": 1378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priorities_and_dependencies#1380",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priorities_and_dependencies(self)",
        "snippet": "    def test_priorities_and_dependencies(self):\n        self.sch.add_task(worker=WORKER, task_id='A', deps=['Z'], priority=10)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5)\n        self.sch.add_task(worker=WORKER, task_id='C', deps=['Z'], priority=3)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=2)\n        self.sch.add_task(worker=WORKER, task_id='Z', priority=1)\n        self.check_task_order(['Z', 'A', 'B', 'C', 'D'])",
        "begin_line": 1380,
        "end_line": 1386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priority_update_dependency_after_scheduling#1388",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priority_update_dependency_after_scheduling(self)",
        "snippet": "    def test_priority_update_dependency_after_scheduling(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=10, deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['A', 'B', 'C', 'D'])",
        "begin_line": 1388,
        "end_line": 1393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable#1395",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable(self)",
        "snippet": "    def test_disable(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 1395,
        "end_line": 1405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_and_reenable#1407",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_and_reenable(self)",
        "snippet": "    def test_disable_and_reenable(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 1407,
        "end_line": 1423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_and_reenable_and_disable_again#1425",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_and_reenable_and_disable_again(self)",
        "snippet": "    def test_disable_and_reenable_and_disable_again(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.re_enable_task('A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be still enabled\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)",
        "begin_line": 1425,
        "end_line": 1458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_and_done#1460",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_and_done(self)",
        "snippet": "    def test_disable_and_done(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n        self.assertEqual(len(self.sch.task_list('FAILED', '')), 0)\n\n        self.sch.add_task(worker=WORKER, task_id='A', status=DONE)\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.assertEqual(len(self.sch.task_list('DONE', '')), 1)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 1460,
        "end_line": 1476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_automatic_re_enable#1478",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_automatic_re_enable(self)",
        "snippet": "    def test_automatic_re_enable(self):\n        self.sch = Scheduler(retry_count=2, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 1478,
        "end_line": 1489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_automatic_re_enable_with_one_failure_allowed#1491",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_automatic_re_enable_with_one_failure_allowed(self)",
        "snippet": "    def test_automatic_re_enable_with_one_failure_allowed(self):\n        self.sch = Scheduler(retry_count=1, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # re-enables after 100 seconds\n        self.setTime(101)\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 1491,
        "end_line": 1501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_no_automatic_re_enable_after_manual_disable#1503",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_no_automatic_re_enable_after_manual_disable(self)",
        "snippet": "    def test_no_automatic_re_enable_after_manual_disable(self):\n        self.sch = Scheduler(disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # should not re-enable after 100 seconds\n        self.setTime(101)\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 1503,
        "end_line": 1513,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_no_automatic_re_enable_after_auto_then_manual_disable#1515",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_no_automatic_re_enable_after_auto_then_manual_disable(self)",
        "snippet": "    def test_no_automatic_re_enable_after_auto_then_manual_disable(self):\n        self.sch = Scheduler(retry_count=2, disable_persist=100)\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # should be disabled now\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # should remain disabled once set\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])\n\n        # should not re-enable after 100 seconds\n        self.setTime(101)\n        self.assertEqual(DISABLED, self.sch.task_list('', '')['A']['status'])",
        "begin_line": 1515,
        "end_line": 1530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_by_worker#1532",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_by_worker(self)",
        "snippet": "    def test_disable_by_worker(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 1)\n\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        # should be enabled at this point\n        self.assertEqual(len(self.sch.task_list('DISABLED', '')), 0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 1532,
        "end_line": 1541,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker#1543",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker(self)",
        "snippet": "    def test_disable_worker(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.disable_worker(worker=WORKER)\n        work = self.sch.get_work(worker=WORKER)\n        self.assertEqual(0, work['n_unique_pending'])\n        self.assertEqual(0, work['n_pending_tasks'])\n        self.assertIsNone(work['task_id'])",
        "begin_line": 1543,
        "end_line": 1549,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_pause_work#1551",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_pause_work(self)",
        "snippet": "    def test_pause_work(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n\n        self.sch.pause()\n        self.assertEqual({\n            'n_pending_last_scheduled': 1,\n            'n_unique_pending': 1,\n            'n_pending_tasks': 1,\n            'running_tasks': [],\n            'task_id': None,\n            'worker_state': 'active',\n        }, self.sch.get_work(worker=WORKER))\n\n        self.sch.unpause()\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1551,
        "end_line": 1565,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_is_paused#1567",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_is_paused(self)",
        "snippet": "    def test_is_paused(self):\n        self.assertFalse(self.sch.is_paused()['paused'])\n        self.sch.pause()\n        self.assertTrue(self.sch.is_paused()['paused'])\n        self.sch.unpause()\n        self.assertFalse(self.sch.is_paused()['paused'])",
        "begin_line": 1567,
        "end_line": 1572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_leaves_jobs_running#1574",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_leaves_jobs_running(self)",
        "snippet": "    def test_disable_worker_leaves_jobs_running(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.get_work(worker=WORKER)\n\n        self.sch.disable_worker(worker=WORKER)\n        self.assertEqual(['A'], list(self.sch.task_list('RUNNING', '').keys()))\n        self.assertEqual(['A'], list(self.sch.worker_list()[0]['running'].keys()))",
        "begin_line": 1574,
        "end_line": 1580,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_cannot_pick_up_failed_jobs#1582",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_cannot_pick_up_failed_jobs(self)",
        "snippet": "    def test_disable_worker_cannot_pick_up_failed_jobs(self):\n        self.setTime(0)\n\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.get_work(worker=WORKER)\n        self.sch.disable_worker(worker=WORKER)\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n\n        # increase time and prune to make the job pending again\n        self.setTime(1000)\n        self.sch.ping(worker=WORKER)\n        self.sch.prune()\n\n        # we won't try the job again\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n\n        # not even if other stuff is pending, changing the pending tasks code path\n        self.sch.add_task(worker='other_worker', task_id='B')\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1582,
        "end_line": 1600,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_cannot_continue_scheduling#1602",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_cannot_continue_scheduling(self)",
        "snippet": "    def test_disable_worker_cannot_continue_scheduling(self):\n        self.sch.disable_worker(worker=WORKER)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1602,
        "end_line": 1605,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_cannot_add_tasks#1607",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_cannot_add_tasks(self)",
        "snippet": "    def test_disable_worker_cannot_add_tasks(self):\n        \"\"\"\n        Verify that a disabled worker cannot add tasks\n        \"\"\"\n        self.sch.disable_worker(worker=WORKER)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertIsNone(self.sch.get_work(worker='assistant', assistant=True)['task_id'])\n        self.sch.add_task(worker='third_enabled_worker', task_id='A')\n        self.assertIsNotNone(self.sch.get_work(worker='assistant', assistant=True)['task_id'])",
        "begin_line": 1607,
        "end_line": 1615,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest._test_disable_worker_helper#1617",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest._test_disable_worker_helper(self, new_status, new_deps)",
        "snippet": "    def _test_disable_worker_helper(self, new_status, new_deps):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual('A', self.sch.get_work(worker=WORKER)['task_id'])\n\n        self.sch.disable_worker(worker=WORKER)\n        self.assertEqual(['A'], list(self.sch.task_list('RUNNING', '').keys()))\n\n        for dep in new_deps:\n            self.sch.add_task(worker=WORKER, task_id=dep, status='PENDING')\n        self.sch.add_task(worker=WORKER, task_id='A', status=new_status, new_deps=new_deps)\n        self.assertFalse(self.sch.task_list('RUNNING', '').keys())\n        self.assertEqual(['A'], list(self.sch.task_list(new_status, '').keys()))\n\n        self.assertIsNone(self.sch.get_work(worker=WORKER)['task_id'])\n        for task in self.sch.task_list('', '').values():\n            self.assertFalse(task['workers'])",
        "begin_line": 1617,
        "end_line": 1632,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_can_finish_task#1634",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_can_finish_task(self)",
        "snippet": "    def test_disable_worker_can_finish_task(self):\n        self._test_disable_worker_helper(new_status=DONE, new_deps=[])",
        "begin_line": 1634,
        "end_line": 1635,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_can_fail_task#1637",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_can_fail_task(self)",
        "snippet": "    def test_disable_worker_can_fail_task(self):\n        self._test_disable_worker_helper(new_status=FAILED, new_deps=[])",
        "begin_line": 1637,
        "end_line": 1638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_stays_disabled_on_new_deps#1640",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_stays_disabled_on_new_deps(self)",
        "snippet": "    def test_disable_worker_stays_disabled_on_new_deps(self):\n        self._test_disable_worker_helper(new_status='PENDING', new_deps=['B', 'C'])",
        "begin_line": 1640,
        "end_line": 1641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_assistant_gets_no_task#1643",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_disable_worker_assistant_gets_no_task(self)",
        "snippet": "    def test_disable_worker_assistant_gets_no_task(self):\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_worker('assistant', [('assistant', True)])\n        self.sch.ping(worker='assistant')\n        self.sch.disable_worker('assistant')\n        self.assertIsNone(self.sch.get_work(worker='assistant', assistant=True)['task_id'])\n        self.assertIsNotNone(self.sch.get_work(worker=WORKER)['task_id'])",
        "begin_line": 1643,
        "end_line": 1650,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_prune_worker#1652",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_prune_worker(self)",
        "snippet": "    def test_prune_worker(self):\n        self.setTime(1)\n        self.sch.add_worker(worker=WORKER, info={})\n        self.setTime(10000)\n        self.sch.prune()\n        self.setTime(20000)\n        self.sch.prune()\n        self.assertFalse(self.sch.worker_list())",
        "begin_line": 1652,
        "end_line": 1659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_beyond_limit#1661",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_beyond_limit(self)",
        "snippet": "    def test_task_list_beyond_limit(self):\n        sch = Scheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '', False).keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', ''))",
        "begin_line": 1661,
        "end_line": 1666,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_within_limit#1668",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_within_limit(self)",
        "snippet": "    def test_task_list_within_limit(self):\n        sch = Scheduler(max_shown_tasks=4)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('ABCD'), set(sch.task_list('PENDING', '').keys()))",
        "begin_line": 1668,
        "end_line": 1672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_lists_some_beyond_limit#1674",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_lists_some_beyond_limit(self)",
        "snippet": "    def test_task_lists_some_beyond_limit(self):\n        sch = Scheduler(max_shown_tasks=3)\n        for c in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=c, status=DONE)\n        for c in 'EFG':\n            sch.add_task(worker=WORKER, task_id=c)\n        self.assertEqual(set('EFG'), set(sch.task_list('PENDING', '').keys()))\n        self.assertEqual({'num_tasks': 4}, sch.task_list('DONE', ''))",
        "begin_line": 1674,
        "end_line": 1681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_dynamic_shown_tasks_in_task_list#1683",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_dynamic_shown_tasks_in_task_list(self)",
        "snippet": "    def test_dynamic_shown_tasks_in_task_list(self):\n        sch = Scheduler(max_shown_tasks=3)\n        for task_id in 'ABCD':\n            sch.add_task(worker=WORKER, task_id=task_id, status=DONE)\n        for task_id in 'EFG':\n            sch.add_task(worker=WORKER, task_id=task_id)\n\n        self.assertEqual(set('EFG'), set(sch.task_list('PENDING', '').keys()))\n        self.assertEqual({'num_tasks': 3}, sch.task_list('PENDING', '', max_shown_tasks=2))\n\n        self.assertEqual({'num_tasks': 4}, sch.task_list('DONE', ''))\n        self.assertEqual(set('ABCD'), set(sch.task_list('DONE', '', max_shown_tasks=4).keys()))",
        "begin_line": 1683,
        "end_line": 1694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.add_task#1696",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.add_task(self, family, **params)",
        "snippet": "    def add_task(self, family, **params):\n        task_id = str(hash((family, str(params))))  # use an unhelpful task id\n        self.sch.add_task(worker=WORKER, family=family, params=params, task_id=task_id)\n        return task_id",
        "begin_line": 1696,
        "end_line": 1699,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.search_pending#1701",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.search_pending(self, term, expected_keys)",
        "snippet": "    def search_pending(self, term, expected_keys):\n        actual_keys = set(self.sch.task_list('PENDING', '', search=term).keys())\n        self.assertEqual(expected_keys, actual_keys)",
        "begin_line": 1701,
        "end_line": 1703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_search_family_name#1705",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_search_family_name(self)",
        "snippet": "    def test_task_list_filter_by_search_family_name(self):\n        task1 = self.add_task('MySpecialTask')\n        task2 = self.add_task('OtherSpecialTask')\n\n        self.search_pending('Special', {task1, task2})\n        self.search_pending('Task', {task1, task2})\n        self.search_pending('My', {task1})\n        self.search_pending('Other', {task2})",
        "begin_line": 1705,
        "end_line": 1712,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_search_long_family_name#1714",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_search_long_family_name(self)",
        "snippet": "    def test_task_list_filter_by_search_long_family_name(self):\n        task = self.add_task('TaskClassWithAVeryLongNameAndDistinctEndingUUDDLRLRAB')\n        self.search_pending('UUDDLRLRAB', {task})",
        "begin_line": 1714,
        "end_line": 1716,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_param_name#1718",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_param_name(self)",
        "snippet": "    def test_task_list_filter_by_param_name(self):\n        task1 = self.add_task('ClassA', day='2016-02-01')\n        task2 = self.add_task('ClassB', hour='2016-02-01T12')\n\n        self.search_pending('day', {task1})\n        self.search_pending('hour', {task2})",
        "begin_line": 1718,
        "end_line": 1723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_long_param_name#1725",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_long_param_name(self)",
        "snippet": "    def test_task_list_filter_by_long_param_name(self):\n        task = self.add_task('ClassA', a_very_long_param_name_ending_with_uuddlrlrab='2016-02-01')\n\n        self.search_pending('uuddlrlrab', {task})",
        "begin_line": 1725,
        "end_line": 1728,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_param_value#1730",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_param_value(self)",
        "snippet": "    def test_task_list_filter_by_param_value(self):\n        task1 = self.add_task('ClassA', day='2016-02-01')\n        task2 = self.add_task('ClassB', hour='2016-02-01T12')\n\n        self.search_pending('2016-02-01', {task1, task2})\n        self.search_pending('T12', {task2})",
        "begin_line": 1730,
        "end_line": 1735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_long_param_value#1737",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_long_param_value(self)",
        "snippet": "    def test_task_list_filter_by_long_param_value(self):\n        task = self.add_task('ClassA', param='a_very_long_param_value_ending_with_uuddlrlrab')\n        self.search_pending('uuddlrlrab', {task})",
        "begin_line": 1737,
        "end_line": 1739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_param_name_value_pair#1741",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_param_name_value_pair(self)",
        "snippet": "    def test_task_list_filter_by_param_name_value_pair(self):\n        task = self.add_task('ClassA', param='value')\n        self.search_pending('param=value', {task})",
        "begin_line": 1741,
        "end_line": 1743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_does_not_filter_by_task_id#1745",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_does_not_filter_by_task_id(self)",
        "snippet": "    def test_task_list_does_not_filter_by_task_id(self):\n        task = self.add_task('Class')\n        self.search_pending(task, set())",
        "begin_line": 1745,
        "end_line": 1747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_multiple_search_terms#1749",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_filter_by_multiple_search_terms(self)",
        "snippet": "    def test_task_list_filter_by_multiple_search_terms(self):\n        expected = self.add_task('ClassA', day='2016-02-01', num='5')\n        self.add_task('ClassA', day='2016-03-01', num='5')\n        self.add_task('ClassB', day='2016-02-01', num='5')\n        self.add_task('ClassA', day='2016-02-01', val='5')\n\n        self.search_pending('ClassA 2016-02-01 num', {expected})",
        "begin_line": 1749,
        "end_line": 1755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_search_results_beyond_limit#1757",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_search_results_beyond_limit(self)",
        "snippet": "    def test_search_results_beyond_limit(self):\n        sch = Scheduler(max_shown_tasks=3)\n        for i in range(4):\n            sch.add_task(worker=WORKER, family='Test', params={'p': str(i)}, task_id='Test_%i' % i)\n        self.assertEqual({'num_tasks': 4}, sch.task_list('PENDING', '', search='Test'))\n        self.assertEqual(['Test_0'], list(sch.task_list('PENDING', '', search='0').keys()))",
        "begin_line": 1757,
        "end_line": 1762,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priority_update_dependency_chain#1764",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priority_update_dependency_chain(self)",
        "snippet": "    def test_priority_update_dependency_chain(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=10, deps=['B'])\n        self.sch.add_task(worker=WORKER, task_id='B', priority=5, deps=['C'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['C', 'B', 'A', 'D'])",
        "begin_line": 1764,
        "end_line": 1769,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_priority_no_decrease_with_multiple_updates#1771",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_priority_no_decrease_with_multiple_updates(self)",
        "snippet": "    def test_priority_no_decrease_with_multiple_updates(self):\n        self.sch.add_task(worker=WORKER, task_id='A', priority=1)\n        self.sch.add_task(worker=WORKER, task_id='B', priority=10, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='C', priority=5, deps=['A'])\n        self.sch.add_task(worker=WORKER, task_id='D', priority=6)\n        self.check_task_order(['A', 'B', 'D', 'C'])",
        "begin_line": 1771,
        "end_line": 1776,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_unique_tasks#1778",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_unique_tasks(self)",
        "snippet": "    def test_unique_tasks(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_task(worker=WORKER, task_id='C')\n        self.sch.add_task(worker=WORKER + \"_2\", task_id='B')\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertEqual(3, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 1778,
        "end_line": 1786,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_pending_downstream_disable#1788",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_pending_downstream_disable(self)",
        "snippet": "    def test_pending_downstream_disable(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=DISABLED)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='C', deps=('B',))\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertTrue(response['task_id'] is None)\n        self.assertEqual(0, response['n_pending_tasks'])\n        self.assertEqual(0, response['n_unique_pending'])",
        "begin_line": 1788,
        "end_line": 1796,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_pending_downstream_failure#1798",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_pending_downstream_failure(self)",
        "snippet": "    def test_pending_downstream_failure(self):\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='C', deps=('B',))\n\n        response = self.sch.get_work(worker=WORKER)\n        self.assertTrue(response['task_id'] is None)\n        self.assertEqual(2, response['n_pending_tasks'])\n        self.assertEqual(2, response['n_unique_pending'])",
        "begin_line": 1798,
        "end_line": 1806,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_list_no_deps#1808",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_list_no_deps(self)",
        "snippet": "    def test_task_list_no_deps(self):\n        self.sch.add_task(worker=WORKER, task_id='B', deps=('A',))\n        self.sch.add_task(worker=WORKER, task_id='A')\n        task_list = self.sch.task_list('PENDING', '')\n        self.assertFalse('deps' in task_list['A'])",
        "begin_line": 1808,
        "end_line": 1812,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_first_failure_time#1814",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_first_failure_time(self)",
        "snippet": "    def test_task_first_failure_time(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        time_before_failure = time.time()\n        test_task.add_failure()\n        time_after_failure = time.time()\n\n        self.assertLessEqual(time_before_failure,\n                             test_task.failures.first_failure_time)\n        self.assertGreaterEqual(time_after_failure,\n                                test_task.failures.first_failure_time)",
        "begin_line": 1814,
        "end_line": 1826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_first_failure_time_remains_constant#1828",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_first_failure_time_remains_constant(self)",
        "snippet": "    def test_task_first_failure_time_remains_constant(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        test_task.add_failure()\n        first_failure_time = test_task.failures.first_failure_time\n\n        test_task.add_failure()\n        self.assertEqual(first_failure_time, test_task.failures.first_failure_time)",
        "begin_line": 1828,
        "end_line": 1837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_task_has_excessive_failures#1839",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_task_has_excessive_failures(self)",
        "snippet": "    def test_task_has_excessive_failures(self):\n        self.sch.add_task(worker=WORKER, task_id='A')\n        test_task = self.sch._state.get_task('A')\n        self.assertIsNone(test_task.failures.first_failure_time)\n\n        self.assertFalse(test_task.has_excessive_failures())\n\n        test_task.add_failure()\n        self.assertFalse(test_task.has_excessive_failures())\n\n        fake_failure_time = (test_task.failures.first_failure_time -\n                             2 * 60 * 60)\n\n        test_task.failures.first_failure_time = fake_failure_time\n        self.assertTrue(test_task.has_excessive_failures())",
        "begin_line": 1839,
        "end_line": 1853,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_quadratic_behavior#1855",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_quadratic_behavior(self)",
        "snippet": "    def test_quadratic_behavior(self):\n        \"\"\" Test that get_work is not taking linear amount of time.\n\n        This is of course impossible to test, however, doing reasonable\n        assumptions about hardware. This time should finish in a timely\n        manner.\n        \"\"\"\n        # For 10000 it takes almost 1 second on my laptop.  Prior to these\n        # changes it was being slow already at NUM_TASKS=300\n        NUM_TASKS = 10000\n        for i in range(NUM_TASKS):\n            self.sch.add_task(worker=str(i), task_id=str(i), resources={})\n\n        for i in range(NUM_TASKS):\n            self.assertEqual(self.sch.get_work(worker=str(i))['task_id'], str(i))\n            self.sch.add_task(worker=str(i), task_id=str(i), status=DONE)",
        "begin_line": 1855,
        "end_line": 1870,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_get_work_speed#1872",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_get_work_speed(self)",
        "snippet": "    def test_get_work_speed(self):\n        \"\"\" Test that get_work is fast for few workers and many DONEs.\n\n        In #986, @daveFNbuck reported that he got a slowdown.\n        \"\"\"\n        # This took almost 4 minutes without optimization.\n        # Now it takes 10 seconds on my machine.\n        NUM_PENDING = 1000\n        NUM_DONE = 200000\n        assert NUM_DONE >= NUM_PENDING\n        for i in range(NUM_PENDING):\n            self.sch.add_task(worker=WORKER, task_id=str(i), resources={})\n\n        for i in range(NUM_PENDING, NUM_DONE):\n            self.sch.add_task(worker=WORKER, task_id=str(i), status=DONE)\n\n        for i in range(NUM_PENDING):\n            res = int(self.sch.get_work(worker=WORKER)['task_id'])\n            self.assertTrue(0 <= res < NUM_PENDING)\n            self.sch.add_task(worker=WORKER, task_id=str(res), status=DONE)",
        "begin_line": 1872,
        "end_line": 1891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistants_dont_nurture_finished_statuses#1893",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistants_dont_nurture_finished_statuses(self)",
        "snippet": "    def test_assistants_dont_nurture_finished_statuses(self):\n        \"\"\"\n        Test how assistants affect longevity of tasks\n\n        Assistants should not affect longevity expect for the tasks that it is\n        running, par the one it's actually running.\n        \"\"\"\n        self.sch = Scheduler(retry_delay=100000000000)  # Never pendify failed tasks\n        self.setTime(1)\n        self.sch.add_worker('assistant', [('assistant', True)])\n        self.sch.ping(worker='assistant')\n        self.sch.add_task(worker='uploader', task_id='running', status=PENDING)\n        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'running')\n\n        self.setTime(2)\n        self.sch.add_task(worker='uploader', task_id='done', status=DONE)\n        self.sch.add_task(worker='uploader', task_id='disabled', status=DISABLED)\n        self.sch.add_task(worker='uploader', task_id='pending', status=PENDING)\n        self.sch.add_task(worker='uploader', task_id='failed', status=FAILED)\n        self.sch.add_task(worker='uploader', task_id='unknown', status=UNKNOWN)\n\n        self.setTime(100000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n\n        self.setTime(200000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n        nurtured_statuses = [RUNNING]\n        not_nurtured_statuses = [DONE, UNKNOWN, DISABLED, PENDING, FAILED]\n\n        for status in nurtured_statuses:\n            self.assertEqual(set([status.lower()]), set(self.sch.task_list(status, '')))\n\n        for status in not_nurtured_statuses:\n            self.assertEqual(set([]), set(self.sch.task_list(status, '')))\n\n        self.assertEqual(1, len(self.sch.task_list(None, '')))  # None == All statuses",
        "begin_line": 1893,
        "end_line": 1930,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_no_crash_on_only_disable_hard_timeout#1932",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_no_crash_on_only_disable_hard_timeout(self)",
        "snippet": "    def test_no_crash_on_only_disable_hard_timeout(self):\n        \"\"\"\n        Scheduler shouldn't crash with only disable_hard_timeout\n\n        There was some failure happening when disable_hard_timeout was set but\n        disable_failures was not.\n        \"\"\"\n        self.sch = Scheduler(retry_delay=5,\n                             disable_hard_timeout=100)\n        self.setTime(1)\n        self.sch.add_worker(WORKER, [])\n        self.sch.ping(worker=WORKER)\n\n        self.setTime(2)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.sch.add_task(worker=WORKER, task_id='B', deps=['A'])\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.setTime(10)\n        self.sch.prune()\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 1932,
        "end_line": 1952,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_assistant_running_task_dont_disappear#1954",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_assistant_running_task_dont_disappear(self)",
        "snippet": "    def test_assistant_running_task_dont_disappear(self):\n        \"\"\"\n        Tasks run by an assistant shouldn't be pruned\n        \"\"\"\n        self.setTime(1)\n        self.sch.add_worker(WORKER, [])\n        self.sch.ping(worker=WORKER)\n\n        self.setTime(2)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='B')\n        self.sch.add_worker('assistant', [('assistant', True)])\n        self.sch.ping(worker='assistant')\n        self.assertEqual(self.sch.get_work(worker='assistant', assistant=True)['task_id'], 'B')\n\n        self.setTime(100000)\n        # Here, lets say WORKER disconnects (doesnt ping)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n\n        self.setTime(200000)\n        self.sch.ping(worker='assistant')\n        self.sch.prune()\n        self.assertEqual({'B'}, set(self.sch.task_list(RUNNING, '')))\n        self.assertEqual({'B'}, set(self.sch.task_list('', '')))",
        "begin_line": 1954,
        "end_line": 1979,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_failure_emails#1982",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_failure_emails(self, BatchNotifier)",
        "snippet": "    def test_batch_failure_emails(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"')\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            'bad thing',\n            None,\n        )\n        BatchNotifier().add_disable.assert_not_called()",
        "begin_line": 1982,
        "end_line": 1994,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_send_batch_email_on_dump#1997",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_send_batch_email_on_dump(self, BatchNotifier)",
        "snippet": "    def test_send_batch_email_on_dump(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n\n        BatchNotifier().send_email.assert_not_called()\n        scheduler.dump()\n        BatchNotifier().send_email.assert_called_once_with()",
        "begin_line": 1997,
        "end_line": 2002,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_do_not_send_batch_email_on_dump_without_batch_enabled#2005",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_do_not_send_batch_email_on_dump_without_batch_enabled(self, BatchNotifier)",
        "snippet": "    def test_do_not_send_batch_email_on_dump_without_batch_enabled(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=False)\n        scheduler.dump()\n\n        BatchNotifier().send_email.assert_not_called()",
        "begin_line": 2005,
        "end_line": 2009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_handle_bad_expl_in_failure_emails#2012",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_handle_bad_expl_in_failure_emails(self, BatchNotifier)",
        "snippet": "    def test_handle_bad_expl_in_failure_emails(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='bad thing')\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            'bad thing',\n            None,\n        )\n        BatchNotifier().add_disable.assert_not_called()",
        "begin_line": 2012,
        "end_line": 2024,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduling_failure#2027",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduling_failure(self, BatchNotifier)",
        "snippet": "    def test_scheduling_failure(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        scheduler.announce_scheduling_failure(\n            worker=WORKER,\n            task_name='T(a=1, b=2)',\n            family='T',\n            params={'a': '1', 'b': '2'},\n            expl='error',\n            owners=('owner',)\n        )\n        BatchNotifier().add_scheduling_fail.assert_called_once_with(\n            'T(a=1, b=2)', 'T', {'a': '1', 'b': '2'}, 'error', ('owner',))",
        "begin_line": 2027,
        "end_line": 2038,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduling_failure_without_batcher#2041",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduling_failure_without_batcher(self, BatchNotifier)",
        "snippet": "    def test_scheduling_failure_without_batcher(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=False)\n        scheduler.announce_scheduling_failure(\n            worker=WORKER,\n            task_name='T(a=1, b=2)',\n            family='T',\n            params={'a': '1', 'b': '2'},\n            expl='error',\n            owners=('owner',)\n        )\n        BatchNotifier().add_scheduling_fail.assert_not_called()",
        "begin_line": 2041,
        "end_line": 2051,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_failure_emails_with_task_batcher#2054",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_failure_emails_with_task_batcher(self, BatchNotifier)",
        "snippet": "    def test_batch_failure_emails_with_task_batcher(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        scheduler.add_task_batcher(worker=WORKER, task_family='T', batched_args=['a'])\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"')\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'b': '6'},\n            'bad thing',\n            None,\n        )\n        BatchNotifier().add_disable.assert_not_called()",
        "begin_line": 2054,
        "end_line": 2067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_scheduling_failure_with_task_batcher#2070",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_scheduling_failure_with_task_batcher(self, BatchNotifier)",
        "snippet": "    def test_scheduling_failure_with_task_batcher(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        scheduler.add_task_batcher(worker=WORKER, task_family='T', batched_args=['a'])\n        scheduler.announce_scheduling_failure(\n            worker=WORKER,\n            task_name='T(a=1, b=2)',\n            family='T',\n            params={'a': '1', 'b': '2'},\n            expl='error',\n            owners=('owner',)\n        )\n        BatchNotifier().add_scheduling_fail.assert_called_once_with(\n            'T(a=1, b=2)', 'T', {'b': '2'}, 'error', ('owner',))",
        "begin_line": 2070,
        "end_line": 2082,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_failure_email_with_owner#2085",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_failure_email_with_owner(self, BatchNotifier)",
        "snippet": "    def test_batch_failure_email_with_owner(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"', owners=['a@test.com', 'b@test.com'])\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            'bad thing',\n            ['a@test.com', 'b@test.com'],\n        )\n        BatchNotifier().add_disable.assert_not_called()",
        "begin_line": 2085,
        "end_line": 2097,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_disable_emails#2101",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_disable_emails(self, BatchNotifier, notifications)",
        "snippet": "    def test_batch_disable_emails(self, BatchNotifier, notifications):\n        scheduler = Scheduler(batch_emails=True, retry_count=1)\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"')\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            'bad thing',\n            None,\n        )\n        BatchNotifier().add_disable.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            None,\n        )\n        notifications.send_error_email.assert_not_called()",
        "begin_line": 2101,
        "end_line": 2119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_disable_email_with_owner#2123",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_disable_email_with_owner(self, BatchNotifier, notifications)",
        "snippet": "    def test_batch_disable_email_with_owner(self, BatchNotifier, notifications):\n        scheduler = Scheduler(batch_emails=True, retry_count=1)\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"', owners=['a@test.com'])\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            'bad thing',\n            ['a@test.com'],\n        )\n        BatchNotifier().add_disable.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'a': '5', 'b': '6'},\n            ['a@test.com'],\n        )\n        notifications.send_error_email.assert_not_called()",
        "begin_line": 2123,
        "end_line": 2141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_batch_disable_emails_with_task_batcher#2145",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_batch_disable_emails_with_task_batcher(self, BatchNotifier, notifications)",
        "snippet": "    def test_batch_disable_emails_with_task_batcher(self, BatchNotifier, notifications):\n        scheduler = Scheduler(batch_emails=True, retry_count=1)\n        scheduler.add_task_batcher(worker=WORKER, task_family='T', batched_args=['a'])\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"')\n        BatchNotifier().add_failure.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'b': '6'},\n            'bad thing',\n            None,\n        )\n        BatchNotifier().add_disable.assert_called_once_with(\n            'T(a=5, b=6)',\n            'T',\n            {'b': '6'},\n            None,\n        )\n        notifications.send_error_email.assert_not_called()",
        "begin_line": 2145,
        "end_line": 2164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_send_normal_disable_email#2167",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_send_normal_disable_email(self, notifications)",
        "snippet": "    def test_send_normal_disable_email(self, notifications):\n        scheduler = Scheduler(batch_emails=False, retry_count=1)\n        notifications.send_error_email.assert_not_called()\n        scheduler.add_task(\n            worker=WORKER, status=FAILED, task_id='T(a=5, b=6)', family='T',\n            params={'a': '5', 'b': '6'}, expl='\"bad thing\"')\n        self.assertEqual(1, notifications.send_error_email.call_count)",
        "begin_line": 2167,
        "end_line": 2173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_no_batch_notifier_without_batch_emails#2176",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_no_batch_notifier_without_batch_emails(self, BatchNotifier)",
        "snippet": "    def test_no_batch_notifier_without_batch_emails(self, BatchNotifier):\n        Scheduler(batch_emails=False)\n        BatchNotifier.assert_not_called()",
        "begin_line": 2176,
        "end_line": 2178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_update_batcher_on_prune#2181",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_update_batcher_on_prune(self, BatchNotifier)",
        "snippet": "    def test_update_batcher_on_prune(self, BatchNotifier):\n        scheduler = Scheduler(batch_emails=True)\n        BatchNotifier().update.assert_not_called()\n        scheduler.prune()\n        BatchNotifier().update.assert_called_once_with()",
        "begin_line": 2181,
        "end_line": 2185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_forgive_failures#2187",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_forgive_failures(self)",
        "snippet": "    def test_forgive_failures(self):\n        # Try to build A but fails, forgive failures and will retry before 100s\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.setTime(1)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)\n        self.setTime(2)\n        self.sch.forgive_failures(task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 2187,
        "end_line": 2197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_api_test.SchedulerApiTest.test_you_can_forgive_failures_twice#2199",
        "src_path": "test/scheduler_api_test.py",
        "class_name": "test.scheduler_api_test.SchedulerApiTest",
        "signature": "test.scheduler_api_test.SchedulerApiTest.test_you_can_forgive_failures_twice(self)",
        "snippet": "    def test_you_can_forgive_failures_twice(self):\n        # Try to build A but fails, forgive failures two times and will retry before 100s\n        self.setTime(0)\n        self.sch.add_task(worker=WORKER, task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')\n        self.sch.add_task(worker=WORKER, task_id='A', status=FAILED)\n        self.setTime(1)\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], None)\n        self.setTime(2)\n        self.sch.forgive_failures(task_id='A')\n        self.sch.forgive_failures(task_id='A')\n        self.assertEqual(self.sch.get_work(worker=WORKER)['task_id'], 'A')",
        "begin_line": 2199,
        "end_line": 2210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]