coverage run -m pytest pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 18 items

pandas/tests/series/methods/test_to_period.py FF..FFFFFFFFFFFFFF         [100%]

=================================== FAILURES ===================================
_________________ TestToPeriod.test_to_period_raises[unicode] __________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c6720bb0>
indices = Index(['ש0ב7ה9בעטכ', '585סמסהכקל', 'פמ7ה862יץח', 'צהפםצ79טבד', 'אלן8אומרשנ',
       'ק6חרי5ב9ט4', '8דצףלםח1זט', 'רןךצ4...הםס', '87רן1גץ6ה3',
       'ר7קףל4ם0רם', 'צההע9ןעפבכ', 'ע7הב5ףךב3ל', 'ר9עו09ו9חש', '8ףטדל0נרוו'],
      dtype='object')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ש0ב7ה9בעטכ    NaN
585סמסהכקל    NaN
פמ7ה862יץח    NaN
צהפםצ79טבד    NaN
אלן8אומרשנ    NaN
             ... 
ר7קףל4ם0רם    NaN
צההע9ןעפבכ    NaN
ע7הב5ףךב3ל    NaN
ר9עו09ו9חש    NaN
8ףטדל0נרוו    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[string] __________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c6733580>
indices = Index(['E1eUWeseNU', 'r4Bn8HZaVI', 'MMEihrjoUS', 'ms7AuSmSTq', 'MkENjnZzvZ',
       'GAh1KTxfPi', 'NZphnPWb5t', '2mR2m...cRj', 'oaz729Hzg8',
       'qsq0mMe0iW', 'm9WaK8l8aF', 'NZuDN5EWPz', 'YQBdszbn0N', 'jnkmTVWrKx'],
      dtype='object')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = E1eUWeseNU    NaN
r4Bn8HZaVI    NaN
MMEihrjoUS    NaN
ms7AuSmSTq    NaN
MkENjnZzvZ    NaN
             ... 
qsq0mMe0iW    NaN
m9WaK8l8aF    NaN
NZuDN5EWPz    NaN
YQBdszbn0N    NaN
jnkmTVWrKx    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[period] __________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c66ac6d0>
indices = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
             '2000-01-07', '2000-01-10', '2000-01...-05-15',
             '2000-05-16', '2000-05-17', '2000-05-18', '2000-05-19'],
            dtype='period[B]', freq='B')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 2000-01-03    NaN
2000-01-04    NaN
2000-01-05    NaN
2000-01-06    NaN
2000-01-07    NaN
             ... 
2000-05-15    NaN
2000-05-16    NaN
2000-05-17    NaN
2000-05-18    NaN
2000-05-19    NaN
Freq: B, Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
________________ TestToPeriod.test_to_period_raises[timedelta] _________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c632c430>
indices = TimedeltaIndex([  '1 days',   '2 days',   '3 days',   '4 days',   '5 days',
                  '6 days',   '7 days',   ...          '96 days',  '97 days',  '98 days',  '99 days', '100 days'],
               dtype='timedelta64[ns]', freq='D')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1 days      NaN
2 days      NaN
3 days      NaN
4 days      NaN
5 days      NaN
           ... 
96 days     NaN
97 days     NaN
98 days     NaN
99 days     NaN
100 days    NaN
Freq: D, Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
___________________ TestToPeriod.test_to_period_raises[int] ____________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c6334130>
indices = Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23... 80, 81, 82, 83, 84,
            85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
           dtype='int64')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0     NaN
1     NaN
2     NaN
3     NaN
4     NaN
     ... 
95    NaN
96    NaN
97    NaN
98    NaN
99    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
___________________ TestToPeriod.test_to_period_raises[uint] ___________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c66ac3d0>
indices = UInt64Index([9223372036854775808, 9223372036854775809, 9223372036854775810,
             9223372036854775811, 92233720...2036854775904, 9223372036854775905, 9223372036854775906,
             9223372036854775907],
            dtype='uint64')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 9223372036854775808    NaN
9223372036854775809    NaN
9223372036854775810    NaN
9223372036854775811    NaN
9223372036...5904    NaN
9223372036854775905    NaN
9223372036854775906    NaN
9223372036854775907    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[range] ___________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c66a99a0>
indices = RangeIndex(start=0, stop=100, step=1)

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0     NaN
1     NaN
2     NaN
3     NaN
4     NaN
     ... 
95    NaN
96    NaN
97    NaN
98    NaN
99    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[float] ___________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c6469490>
indices = Float64Index([ -4147.841460504557,  -4016.961215261833, -3875.1633481072436,
               -3839.043108866329, -3821....5802972616,   5300.927460257234,   5570.902431022231,
                5616.217707174907],
             dtype='float64')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -4147.841461    NaN
-4016.961215    NaN
-3875.163348    NaN
-3839.043109    NaN
-3821.913907    NaN
               ......81590    NaN
 5242.580297    NaN
 5300.927460    NaN
 5570.902431    NaN
 5616.217707    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
___________________ TestToPeriod.test_to_period_raises[bool] ___________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c64cd070>
indices = Index([False, True, False, False, False, False, False, False, False, False], dtype='object')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = False    NaN
True     NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
_______________ TestToPeriod.test_to_period_raises[categorical] ________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c6733d00>
indices = CategoricalIndex(['Te4i', 'i6Mt', 'Khhl', 'Te4i', 'i6Mt', 'Khhl', 'Te4i',
                  'i6Mt', 'Khhl', 'Te4i', 'i...                'Khhl', 'Te4i'],
                 categories=['Te4i', 'i6Mt', 'Khhl'], ordered=False, dtype='category')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Te4i    NaN
i6Mt    NaN
Khhl    NaN
Te4i    NaN
i6Mt    NaN
       ... 
Khhl    NaN
Te4i    NaN
i6Mt    NaN
Khhl    NaN
Te4i    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
_________________ TestToPeriod.test_to_period_raises[interval] _________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c63b4370>
indices = IntervalIndex([(0.0, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0], (4.0, 5.0] ... (95.0, 96.0], (96.0, 97.0], (97.0, 98.0], (98.0, 99.0], (99.0, 100.0]],
              closed='right',
              dtype='interval[float64]')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (0.0, 1.0]       NaN
(1.0, 2.0]       NaN
(2.0, 3.0]       NaN
(3.0, 4.0]       NaN
(4.0, 5.0]       NaN
             ...     NaN
(96.0, 97.0]     NaN
(97.0, 98.0]     NaN
(98.0, 99.0]     NaN
(99.0, 100.0]    NaN
Length: 100, dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[empty] ___________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c66a92b0>
indices = Index([], dtype='object')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Series([], dtype: object), freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[tuples] __________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c653b550>
indices = MultiIndex([('foo', 1),
            ('bar', 2),
            ('baz', 3)],
           )

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = foo  1    NaN
bar  2    NaN
baz  3    NaN
dtype: object, freq = None
copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
___________ TestToPeriod.test_to_period_raises[mi-with-dt64tz-level] ___________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c65255b0>
indices = MultiIndex([(1, 'a', '2013-01-01 00:00:00-05:00'),
            (1, 'a', '2013-01-02 00:00:00-05:00'),
            (1, ...3-01-02 00:00:00-05:00'),
            (2, 'b', '2013-01-03 00:00:00-05:00')],
           names=['one', 'two', 'three'])

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = one  two  three                    
1    a    2013-01-01 00:00:00-05:00    NaN
          2013-01-02 00:00:00-05:00    ...:00:00-05:00    NaN
          2013-01-02 00:00:00-05:00    NaN
          2013-01-03 00:00:00-05:00    NaN
dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
__________________ TestToPeriod.test_to_period_raises[multi] ___________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c64cd460>
indices = MultiIndex([('foo', 'one'),
            ('foo', 'two'),
            ('bar', 'one'),
            ('baz', 'two'),
            ('qux', 'one'),
            ('qux', 'two')],
           names=['first', 'second'])

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = first  second
foo    one       NaN
       two       NaN
bar    one       NaN
baz    two       NaN
qux    one       NaN
       two       NaN
dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
_________________ TestToPeriod.test_to_period_raises[repeats] __________________

self = <pandas.tests.series.methods.test_to_period.TestToPeriod object at 0x7f69c64925e0>
indices = Int64Index([0, 0, 1, 1, 2, 2], dtype='int64')

    def test_to_period_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, DatetimeIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_period()

pandas/tests/series/methods/test_to_period.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0    NaN
0    NaN
1    NaN
1    NaN
2    NaN
2    NaN
dtype: object
freq = None, copy = True

    def to_period(self, freq=None, copy=True) -> "Series":
        """
        Convert Series from DatetimeIndex to PeriodIndex with desired
        frequency (inferred from index if not passed).
    
        Parameters
        ----------
        freq : str, default None
            Frequency associated with the PeriodIndex.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series
            Series with index converted to PeriodIndex.
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, DatetimeIndex)
E       AssertionError

pandas/core/series.py:4714: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[unicode]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[string]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[period]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[timedelta]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[int]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[uint]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[range]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[float]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[bool]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[categorical]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[interval]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[empty]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[tuples]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[mi-with-dt64tz-level]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[multi]
FAILED pandas/tests/series/methods/test_to_period.py::TestToPeriod::test_to_period_raises[repeats]
========================= 16 failed, 2 passed in 1.21s =========================

coverage run -m pytest pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 18 items

pandas/tests/series/methods/test_to_timestamp.py FFFF.FFFFFFFFFFFFF      [100%]

=================================== FAILURES ===================================
______________ TestToTimestamp.test_to_timestamp_raises[unicode] _______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1142fcc10>
indices = Index(['3ינ3ינש77ס', 'נ320צנם5עו', 'וץ4ץלדןחרס', '91אמ8כפסק8', '66דץאטזאך7',
       '29גגבאף8כש', 'ןאקכז5ף7רק', 'דגבגו...ן8כ', '9317גה8כזח',
       'ןלפףףךרףבף', 'צ1ו8ם7זה74', 'ה8מל2שזסמפ', '6ורףה40ם9ף', 'פםפבפ3ובסא'],
      dtype='object')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 3ינ3ינש77ס    NaN
נ320צנם5עו    NaN
וץ4ץלדןחרס    NaN
91אמ8כפסק8    NaN
66דץאטזאך7    NaN
             ... 
ןלפףףךרףבף    NaN
צ1ו8ם7זה74    NaN
ה8מל2שזסמפ    NaN
6ורףה40ם9ף    NaN
פםפבפ3ובסא    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_______________ TestToTimestamp.test_to_timestamp_raises[string] _______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1143099a0>
indices = Index(['UrNuMRwBbU', 'nb2Nkc9JF6', 'q0fZ0N7zP5', 'jxnYovToEc', 'yomE7Qfm53',
       'SUlkukn1vJ', 'NFrQE77HGh', 'z01ML...If9', 'GDDA6pYc1a',
       '9rSTHOs1Ua', '1Ez9xbnz1t', '0PVas2Rsqq', 'QH5n7CRSw7', '4T3zxanm1J'],
      dtype='object')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = UrNuMRwBbU    NaN
nb2Nkc9JF6    NaN
q0fZ0N7zP5    NaN
jxnYovToEc    NaN
yomE7Qfm53    NaN
             ... 
9rSTHOs1Ua    NaN
1Ez9xbnz1t    NaN
0PVas2Rsqq    NaN
QH5n7CRSw7    NaN
4T3zxanm1J    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
______________ TestToTimestamp.test_to_timestamp_raises[datetime] ______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb114327c10>
indices = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
               '2000-01-07', '2000-01-10', '200...               '2000-05-16', '2000-05-17', '2000-05-18', '2000-05-19'],
              dtype='datetime64[ns]', freq='B')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 2000-01-03    NaN
2000-01-04    NaN
2000-01-05    NaN
2000-01-06    NaN
2000-01-07    NaN
             ... 
2000-05-15    NaN
2000-05-16    NaN
2000-05-17    NaN
2000-05-18    NaN
2000-05-19    NaN
Freq: B, Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
____________ TestToTimestamp.test_to_timestamp_raises[datetime-tz] _____________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb100439460>
indices = DatetimeIndex(['2000-01-03 00:00:00-08:00', '2000-01-04 00:00:00-08:00',
               '2000-01-05 00:00:00-08:00', '... '2000-05-18 00:00:00-07:00', '2000-05-19 00:00:00-07:00'],
              dtype='datetime64[ns, US/Pacific]', freq='B')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 2000-01-03 00:00:00-08:00    NaN
2000-01-04 00:00:00-08:00    NaN
2000-01-05 00:00:00-08:00    NaN
2000-01-06 00:00:00...0:00-07:00    NaN
2000-05-18 00:00:00-07:00    NaN
2000-05-19 00:00:00-07:00    NaN
Freq: B, Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_____________ TestToTimestamp.test_to_timestamp_raises[timedelta] ______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb11430f040>
indices = TimedeltaIndex([  '1 days',   '2 days',   '3 days',   '4 days',   '5 days',
                  '6 days',   '7 days',   ...          '96 days',  '97 days',  '98 days',  '99 days', '100 days'],
               dtype='timedelta64[ns]', freq='D')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1 days      NaN
2 days      NaN
3 days      NaN
4 days      NaN
5 days      NaN
           ... 
96 days     NaN
97 days     NaN
98 days     NaN
99 days     NaN
100 days    NaN
Freq: D, Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
________________ TestToTimestamp.test_to_timestamp_raises[int] _________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb10032d070>
indices = Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23... 80, 81, 82, 83, 84,
            85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
           dtype='int64')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0     NaN
1     NaN
2     NaN
3     NaN
4     NaN
     ... 
95    NaN
96    NaN
97    NaN
98    NaN
99    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
________________ TestToTimestamp.test_to_timestamp_raises[uint] ________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb100439a60>
indices = UInt64Index([9223372036854775808, 9223372036854775809, 9223372036854775810,
             9223372036854775811, 92233720...2036854775904, 9223372036854775905, 9223372036854775906,
             9223372036854775907],
            dtype='uint64')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 9223372036854775808    NaN
9223372036854775809    NaN
9223372036854775810    NaN
9223372036854775811    NaN
9223372036...5904    NaN
9223372036854775905    NaN
9223372036854775906    NaN
9223372036854775907    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_______________ TestToTimestamp.test_to_timestamp_raises[range] ________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1002891c0>
indices = RangeIndex(start=0, stop=100, step=1)

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0     NaN
1     NaN
2     NaN
3     NaN
4     NaN
     ... 
95    NaN
96    NaN
97    NaN
98    NaN
99    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_______________ TestToTimestamp.test_to_timestamp_raises[float] ________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1002aa6d0>
indices = Float64Index([ -84259860.91820863,  -82676783.11629686,  -81728090.45839415,
               -81570141.42203727,  -8121....509733595,   9863716.738605388,  10506713.951981006,
               10851087.167279327],
             dtype='float64')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -8.425986e+07    NaN
-8.267678e+07    NaN
-8.172809e+07    NaN
-8.157014e+07    NaN
-8.121065e+07    NaN
             ...6    NaN
 9.713569e+06    NaN
 9.863717e+06    NaN
 1.050671e+07    NaN
 1.085109e+07    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
________________ TestToTimestamp.test_to_timestamp_raises[bool] ________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb100000130>
indices = Index([False, True, False, False, False, False, False, False, False, False], dtype='object')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = False    NaN
True     NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
False    NaN
dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
____________ TestToTimestamp.test_to_timestamp_raises[categorical] _____________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1000b65e0>
indices = CategoricalIndex(['FjKK', 'o0hC', '4TTV', 'FjKK', 'o0hC', '4TTV', 'FjKK',
                  'o0hC', '4TTV', 'FjKK', 'o...                '4TTV', 'FjKK'],
                 categories=['FjKK', 'o0hC', '4TTV'], ordered=False, dtype='category')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = FjKK    NaN
o0hC    NaN
4TTV    NaN
FjKK    NaN
o0hC    NaN
       ... 
4TTV    NaN
FjKK    NaN
o0hC    NaN
4TTV    NaN
FjKK    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
______________ TestToTimestamp.test_to_timestamp_raises[interval] ______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1002aad30>
indices = IntervalIndex([(0.0, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0], (4.0, 5.0] ... (95.0, 96.0], (96.0, 97.0], (97.0, 98.0], (98.0, 99.0], (99.0, 100.0]],
              closed='right',
              dtype='interval[float64]')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (0.0, 1.0]       NaN
(1.0, 2.0]       NaN
(2.0, 3.0]       NaN
(3.0, 4.0]       NaN
(4.0, 5.0]       NaN
             ...     NaN
(96.0, 97.0]     NaN
(97.0, 98.0]     NaN
(98.0, 99.0]     NaN
(99.0, 100.0]    NaN
Length: 100, dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_______________ TestToTimestamp.test_to_timestamp_raises[empty] ________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1000ab8e0>
indices = Index([], dtype='object')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Series([], dtype: object), freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_______________ TestToTimestamp.test_to_timestamp_raises[tuples] _______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb100289ee0>
indices = MultiIndex([('foo', 1),
            ('bar', 2),
            ('baz', 3)],
           )

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = foo  1    NaN
bar  2    NaN
baz  3    NaN
dtype: object, freq = None
how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
________ TestToTimestamp.test_to_timestamp_raises[mi-with-dt64tz-level] ________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb1003459d0>
indices = MultiIndex([(1, 'a', '2013-01-01 00:00:00-05:00'),
            (1, 'a', '2013-01-02 00:00:00-05:00'),
            (1, ...3-01-02 00:00:00-05:00'),
            (2, 'b', '2013-01-03 00:00:00-05:00')],
           names=['one', 'two', 'three'])

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = one  two  three                    
1    a    2013-01-01 00:00:00-05:00    NaN
          2013-01-02 00:00:00-05:00    ...:00:00-05:00    NaN
          2013-01-02 00:00:00-05:00    NaN
          2013-01-03 00:00:00-05:00    NaN
dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
_______________ TestToTimestamp.test_to_timestamp_raises[multi] ________________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb0fffbf400>
indices = MultiIndex([('foo', 'one'),
            ('foo', 'two'),
            ('bar', 'one'),
            ('baz', 'two'),
            ('qux', 'one'),
            ('qux', 'two')],
           names=['first', 'second'])

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = first  second
foo    one       NaN
       two       NaN
bar    one       NaN
baz    two       NaN
qux    one       NaN
       two       NaN
dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
______________ TestToTimestamp.test_to_timestamp_raises[repeats] _______________

self = <pandas.tests.series.methods.test_to_timestamp.TestToTimestamp object at 0x7fb114327b80>
indices = Int64Index([0, 0, 1, 1, 2, 2], dtype='int64')

    def test_to_timestamp_raises(self, indices):
        # https://github.com/pandas-dev/pandas/issues/33327
        index = indices
        ser = Series(index=index, dtype=object)
        if not isinstance(index, PeriodIndex):
            msg = f"unsupported Type {type(index).__name__}"
            with pytest.raises(TypeError, match=msg):
>               ser.to_timestamp()

pandas/tests/series/methods/test_to_timestamp.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0    NaN
0    NaN
1    NaN
1    NaN
2    NaN
2    NaN
dtype: object
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
>       assert isinstance(self.index, PeriodIndex)
E       AssertionError

pandas/core/series.py:4687: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[unicode]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[string]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[datetime]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[datetime-tz]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[timedelta]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[int]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[uint]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[range]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[float]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[bool]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[categorical]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[interval]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[empty]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[tuples]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[mi-with-dt64tz-level]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[multi]
FAILED pandas/tests/series/methods/test_to_timestamp.py::TestToTimestamp::test_to_timestamp_raises[repeats]
========================= 17 failed, 1 passed in 1.27s =========================
