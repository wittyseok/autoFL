[
    {
        "name": "pandas.tests.series.methods.test_to_period.TestToPeriod.test_to_period#16",
        "src_path": "pandas/tests/series/methods/test_to_period.py",
        "class_name": "pandas.tests.series.methods.test_to_period.TestToPeriod",
        "signature": "pandas.tests.series.methods.test_to_period.TestToPeriod.test_to_period(self)",
        "snippet": "    def test_to_period(self):\n        rng = date_range(\"1/1/2000\", \"1/1/2001\", freq=\"D\")\n        ts = Series(np.random.randn(len(rng)), index=rng)\n\n        pts = ts.to_period()\n        exp = ts.copy()\n        exp.index = period_range(\"1/1/2000\", \"1/1/2001\")\n        tm.assert_series_equal(pts, exp)\n\n        pts = ts.to_period(\"M\")\n        exp.index = exp.index.asfreq(\"M\")\n        tm.assert_index_equal(pts.index, exp.index.asfreq(\"M\"))\n        tm.assert_series_equal(pts, exp)\n\n        # GH#7606 without freq\n        idx = DatetimeIndex([\"2011-01-01\", \"2011-01-02\", \"2011-01-03\", \"2011-01-04\"])\n        exp_idx = PeriodIndex(\n            [\"2011-01-01\", \"2011-01-02\", \"2011-01-03\", \"2011-01-04\"], freq=\"D\"\n        )\n\n        s = Series(np.random.randn(4), index=idx)\n        expected = s.copy()\n        expected.index = exp_idx\n        tm.assert_series_equal(s.to_period(), expected)\n\n        df = DataFrame(np.random.randn(4, 4), index=idx, columns=idx)\n        expected = df.copy()\n        expected.index = exp_idx\n        tm.assert_frame_equal(df.to_period(), expected)\n\n        expected = df.copy()\n        expected.columns = exp_idx\n        tm.assert_frame_equal(df.to_period(axis=1), expected)",
        "begin_line": 16,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.methods.test_to_period.TestToPeriod.test_to_period_raises#50",
        "src_path": "pandas/tests/series/methods/test_to_period.py",
        "class_name": "pandas.tests.series.methods.test_to_period.TestToPeriod",
        "signature": "pandas.tests.series.methods.test_to_period.TestToPeriod.test_to_period_raises(self, indices)",
        "snippet": "    def test_to_period_raises(self, indices):\n        # https://github.com/pandas-dev/pandas/issues/33327\n        index = indices\n        ser = Series(index=index, dtype=object)\n        if not isinstance(index, DatetimeIndex):\n            msg = f\"unsupported Type {type(index).__name__}\"\n            with pytest.raises(TypeError, match=msg):\n                ser.to_period()",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp.test_to_timestamp#10",
        "src_path": "pandas/tests/series/methods/test_to_timestamp.py",
        "class_name": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp",
        "signature": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp.test_to_timestamp(self)",
        "snippet": "    def test_to_timestamp(self):\n        index = period_range(freq=\"A\", start=\"1/1/2001\", end=\"12/1/2009\")\n        series = Series(1, index=index, name=\"foo\")\n\n        exp_index = date_range(\"1/1/2001\", end=\"12/31/2009\", freq=\"A-DEC\")\n        result = series.to_timestamp(how=\"end\")\n        exp_index = exp_index + Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n        tm.assert_index_equal(result.index, exp_index)\n        assert result.name == \"foo\"\n\n        exp_index = date_range(\"1/1/2001\", end=\"1/1/2009\", freq=\"AS-JAN\")\n        result = series.to_timestamp(how=\"start\")\n        tm.assert_index_equal(result.index, exp_index)\n\n        def _get_with_delta(delta, freq=\"A-DEC\"):\n            return date_range(\n                to_datetime(\"1/1/2001\") + delta,\n                to_datetime(\"12/31/2009\") + delta,\n                freq=freq,\n            )\n\n        delta = timedelta(hours=23)\n        result = series.to_timestamp(\"H\", \"end\")\n        exp_index = _get_with_delta(delta)\n        exp_index = exp_index + Timedelta(1, \"h\") - Timedelta(1, \"ns\")\n        tm.assert_index_equal(result.index, exp_index)\n\n        delta = timedelta(hours=23, minutes=59)\n        result = series.to_timestamp(\"T\", \"end\")\n        exp_index = _get_with_delta(delta)\n        exp_index = exp_index + Timedelta(1, \"m\") - Timedelta(1, \"ns\")\n        tm.assert_index_equal(result.index, exp_index)\n\n        result = series.to_timestamp(\"S\", \"end\")\n        delta = timedelta(hours=23, minutes=59, seconds=59)\n        exp_index = _get_with_delta(delta)\n        exp_index = exp_index + Timedelta(1, \"s\") - Timedelta(1, \"ns\")\n        tm.assert_index_equal(result.index, exp_index)\n\n        index = period_range(freq=\"H\", start=\"1/1/2001\", end=\"1/2/2001\")\n        series = Series(1, index=index, name=\"foo\")\n\n        exp_index = date_range(\"1/1/2001 00:59:59\", end=\"1/2/2001 00:59:59\", freq=\"H\")\n        result = series.to_timestamp(how=\"end\")\n        exp_index = exp_index + Timedelta(1, \"s\") - Timedelta(1, \"ns\")\n        tm.assert_index_equal(result.index, exp_index)\n        assert result.name == \"foo\"",
        "begin_line": 10,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp._get_with_delta#24",
        "src_path": "pandas/tests/series/methods/test_to_timestamp.py",
        "class_name": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp",
        "signature": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp._get_with_delta(delta, freq='A-DEC')",
        "snippet": "        def _get_with_delta(delta, freq=\"A-DEC\"):\n            return date_range(\n                to_datetime(\"1/1/2001\") + delta,\n                to_datetime(\"12/31/2009\") + delta,\n                freq=freq,\n            )",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp.test_to_timestamp_raises#58",
        "src_path": "pandas/tests/series/methods/test_to_timestamp.py",
        "class_name": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp",
        "signature": "pandas.tests.series.methods.test_to_timestamp.TestToTimestamp.test_to_timestamp_raises(self, indices)",
        "snippet": "    def test_to_timestamp_raises(self, indices):\n        # https://github.com/pandas-dev/pandas/issues/33327\n        index = indices\n        ser = Series(index=index, dtype=object)\n        if not isinstance(index, PeriodIndex):\n            msg = f\"unsupported Type {type(index).__name__}\"\n            with pytest.raises(TypeError, match=msg):\n                ser.to_timestamp()",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.string_series#7",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.string_series()",
        "snippet": "def string_series():\n    \"\"\"\n    Fixture for Series of floats with Index of unique strings\n    \"\"\"\n    s = tm.makeStringSeries()\n    s.name = \"series\"\n    return s",
        "begin_line": 7,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.object_series#17",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.object_series()",
        "snippet": "def object_series():\n    \"\"\"\n    Fixture for Series of dtype object with Index of unique strings\n    \"\"\"\n    s = tm.makeObjectSeries()\n    s.name = \"objects\"\n    return s",
        "begin_line": 17,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    }
]