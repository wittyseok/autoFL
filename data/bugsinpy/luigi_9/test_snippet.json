[
    {
        "name": "test.helpers.with_config.__init__#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#94",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#108",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#110",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 110,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#130",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#147",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#152",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#157",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#168",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#182",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#191",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.temporary_unloaded_module#197",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.temporary_unloaded_module(python_file_contents)",
        "snippet": "def temporary_unloaded_module(python_file_contents):\n    \"\"\" Create an importable module\n\n    Return the name of importable module name given its file contents (source\n    code) \"\"\"\n    with tempfile.NamedTemporaryFile(\n            dir='test/',\n            prefix=\"_test_time_generated_module\",\n            suffix='.py') as temp_module_file:\n        temp_module_file.file.write(python_file_contents)\n        temp_module_file.file.flush()\n        temp_module_path = temp_module_file.name\n        temp_module_name = re.search(r'/(_test_time_generated_module.*).py',\n                                     temp_module_path).group(1)\n        yield temp_module_name",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.setUp#31",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(ExecutionSummaryTest, self).setUp()\n        self.scheduler = luigi.scheduler.Scheduler(prune_on_get_work=False)\n        self.worker = luigi.worker.Worker(scheduler=self.scheduler)",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.run_task#36",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.run_task(self, task)",
        "snippet": "    def run_task(self, task):\n        self.worker.add(task)  # schedule\n        self.worker.run()  # run",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.summary_dict#40",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.summary_dict(self)",
        "snippet": "    def summary_dict(self):\n        return luigi.execution_summary._summary_dict(self.worker)",
        "begin_line": 40,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.summary#43",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.summary(self)",
        "snippet": "    def summary(self):\n        return luigi.execution_summary.summary(self.worker)",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_all_statuses#46",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_all_statuses(self)",
        "snippet": "    def test_all_statuses(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 6 tasks of which:',\n                    '* 1 present dependencies were encountered:',\n                    '    - 1 Bar(num=1)',\n                    '* 3 ran successfully:',\n                    '    - 3 Bar(num=2,3,4)',\n                    '* 1 failed:',\n                    '    - 1 Bar(num=0)',\n                    '* 1 were left pending, among these:',\n                    '    * 1 had failed dependencies:',\n                    '        - 1 Foo()',\n                    '',\n                    'This progress looks :( because there were failed tasks',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 46,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_all_statuses#46",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_all_statuses(self)",
        "snippet": "    def test_all_statuses(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 6 tasks of which:',\n                    '* 1 present dependencies were encountered:',\n                    '    - 1 Bar(num=1)',\n                    '* 3 ran successfully:',\n                    '    - 3 Bar(num=2,3,4)',\n                    '* 1 failed:',\n                    '    - 1 Bar(num=0)',\n                    '* 1 were left pending, among these:',\n                    '    * 1 had failed dependencies:',\n                    '        - 1 Foo()',\n                    '',\n                    'This progress looks :( because there were failed tasks',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 46,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.run#50",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.run(self)",
        "snippet": "            def run(self):\n                if self.num == 0:\n                    raise ValueError()",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.complete#54",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.complete(self)",
        "snippet": "            def complete(self):\n                if self.num == 1:\n                    return True\n                return False",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_all_statuses#46",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_all_statuses(self)",
        "snippet": "    def test_all_statuses(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 6 tasks of which:',\n                    '* 1 present dependencies were encountered:',\n                    '    - 1 Bar(num=1)',\n                    '* 3 ran successfully:',\n                    '    - 3 Bar(num=2,3,4)',\n                    '* 1 failed:',\n                    '    - 1 Bar(num=0)',\n                    '* 1 were left pending, among these:',\n                    '    * 1 had failed dependencies:',\n                    '        - 1 Foo()',\n                    '',\n                    'This progress looks :( because there were failed tasks',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 46,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#60",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(5):\n                    yield Bar(i)",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_batch_complete#98",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_batch_complete(self)",
        "snippet": "    def test_batch_complete(self):\n        ran_tasks = set()\n\n        class MaxBatchTask(luigi.Task):\n            param = luigi.IntParameter(batch_method=max)\n\n            def run(self):\n                ran_tasks.add(self.param)\n\n            def complete(self):\n                return any(self.param <= ran_param for ran_param in ran_tasks)\n\n        class MaxBatches(luigi.WrapperTask):\n            def requires(self):\n                return map(MaxBatchTask, range(5))\n\n        self.run_task(MaxBatches())\n        d = self.summary_dict()\n        expected_completed = {\n            MaxBatchTask(0),\n            MaxBatchTask(1),\n            MaxBatchTask(2),\n            MaxBatchTask(3),\n            MaxBatchTask(4),\n            MaxBatches(),\n        }\n        self.assertEqual(expected_completed, d['completed'])",
        "begin_line": 98,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatchTask.test_batch_complete#98",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatchTask",
        "signature": "test.execution_summary_test.MaxBatchTask.test_batch_complete(self)",
        "snippet": "    def test_batch_complete(self):\n        ran_tasks = set()\n\n        class MaxBatchTask(luigi.Task):\n            param = luigi.IntParameter(batch_method=max)\n\n            def run(self):\n                ran_tasks.add(self.param)\n\n            def complete(self):\n                return any(self.param <= ran_param for ran_param in ran_tasks)\n\n        class MaxBatches(luigi.WrapperTask):\n            def requires(self):\n                return map(MaxBatchTask, range(5))\n\n        self.run_task(MaxBatches())\n        d = self.summary_dict()\n        expected_completed = {\n            MaxBatchTask(0),\n            MaxBatchTask(1),\n            MaxBatchTask(2),\n            MaxBatchTask(3),\n            MaxBatchTask(4),\n            MaxBatches(),\n        }\n        self.assertEqual(expected_completed, d['completed'])",
        "begin_line": 98,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatchTask.run#104",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatchTask",
        "signature": "test.execution_summary_test.MaxBatchTask.run(self)",
        "snippet": "            def run(self):\n                ran_tasks.add(self.param)",
        "begin_line": 104,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatchTask.complete#107",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatchTask",
        "signature": "test.execution_summary_test.MaxBatchTask.complete(self)",
        "snippet": "            def complete(self):\n                return any(self.param <= ran_param for ran_param in ran_tasks)",
        "begin_line": 107,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatches.test_batch_complete#98",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatches",
        "signature": "test.execution_summary_test.MaxBatches.test_batch_complete(self)",
        "snippet": "    def test_batch_complete(self):\n        ran_tasks = set()\n\n        class MaxBatchTask(luigi.Task):\n            param = luigi.IntParameter(batch_method=max)\n\n            def run(self):\n                ran_tasks.add(self.param)\n\n            def complete(self):\n                return any(self.param <= ran_param for ran_param in ran_tasks)\n\n        class MaxBatches(luigi.WrapperTask):\n            def requires(self):\n                return map(MaxBatchTask, range(5))\n\n        self.run_task(MaxBatches())\n        d = self.summary_dict()\n        expected_completed = {\n            MaxBatchTask(0),\n            MaxBatchTask(1),\n            MaxBatchTask(2),\n            MaxBatchTask(3),\n            MaxBatchTask(4),\n            MaxBatches(),\n        }\n        self.assertEqual(expected_completed, d['completed'])",
        "begin_line": 98,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatches.requires#111",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatches",
        "signature": "test.execution_summary_test.MaxBatches.requires(self)",
        "snippet": "            def requires(self):\n                return map(MaxBatchTask, range(5))",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_batch_fail#126",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_batch_fail(self)",
        "snippet": "    def test_batch_fail(self):\n        class MaxBatchFailTask(luigi.Task):\n            param = luigi.IntParameter(batch_method=max)\n\n            def run(self):\n                assert self.param < 4\n\n            def complete(self):\n                return False\n\n        class MaxBatches(luigi.WrapperTask):\n            def requires(self):\n                return map(MaxBatchFailTask, range(5))\n\n        self.run_task(MaxBatches())\n        d = self.summary_dict()\n        expected_failed = {\n            MaxBatchFailTask(0),\n            MaxBatchFailTask(1),\n            MaxBatchFailTask(2),\n            MaxBatchFailTask(3),\n            MaxBatchFailTask(4),\n        }\n        self.assertEqual(expected_failed, d['failed'])",
        "begin_line": 126,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatchFailTask.test_batch_fail#126",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatchFailTask",
        "signature": "test.execution_summary_test.MaxBatchFailTask.test_batch_fail(self)",
        "snippet": "    def test_batch_fail(self):\n        class MaxBatchFailTask(luigi.Task):\n            param = luigi.IntParameter(batch_method=max)\n\n            def run(self):\n                assert self.param < 4\n\n            def complete(self):\n                return False\n\n        class MaxBatches(luigi.WrapperTask):\n            def requires(self):\n                return map(MaxBatchFailTask, range(5))\n\n        self.run_task(MaxBatches())\n        d = self.summary_dict()\n        expected_failed = {\n            MaxBatchFailTask(0),\n            MaxBatchFailTask(1),\n            MaxBatchFailTask(2),\n            MaxBatchFailTask(3),\n            MaxBatchFailTask(4),\n        }\n        self.assertEqual(expected_failed, d['failed'])",
        "begin_line": 126,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatchFailTask.run#130",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatchFailTask",
        "signature": "test.execution_summary_test.MaxBatchFailTask.run(self)",
        "snippet": "            def run(self):\n                assert self.param < 4",
        "begin_line": 130,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatchFailTask.complete#133",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatchFailTask",
        "signature": "test.execution_summary_test.MaxBatchFailTask.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 133,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatches.test_batch_fail#126",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatches",
        "signature": "test.execution_summary_test.MaxBatches.test_batch_fail(self)",
        "snippet": "    def test_batch_fail(self):\n        class MaxBatchFailTask(luigi.Task):\n            param = luigi.IntParameter(batch_method=max)\n\n            def run(self):\n                assert self.param < 4\n\n            def complete(self):\n                return False\n\n        class MaxBatches(luigi.WrapperTask):\n            def requires(self):\n                return map(MaxBatchFailTask, range(5))\n\n        self.run_task(MaxBatches())\n        d = self.summary_dict()\n        expected_failed = {\n            MaxBatchFailTask(0),\n            MaxBatchFailTask(1),\n            MaxBatchFailTask(2),\n            MaxBatchFailTask(3),\n            MaxBatchFailTask(4),\n        }\n        self.assertEqual(expected_failed, d['failed'])",
        "begin_line": 126,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MaxBatches.requires#137",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MaxBatches",
        "signature": "test.execution_summary_test.MaxBatches.requires(self)",
        "snippet": "            def requires(self):\n                return map(MaxBatchFailTask, range(5))",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_check_complete_error#151",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_check_complete_error(self)",
        "snippet": "    def test_check_complete_error(self):\n        class Bar(luigi.Task):\n            def run(self):\n                pass\n\n            def complete(self):\n                raise Exception\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar()\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['still_pending_not_ext'])\n        self.assertEqual({Foo()}, d['upstream_scheduling_error'])\n        self.assertEqual({Bar()}, d['scheduling_error'])\n        self.assertFalse(d['not_run'])\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 2 tasks of which:',\n                    '* 1 failed scheduling:',\n                    '    - 1 Bar()',\n                    '* 1 were left pending, among these:',\n                    \"    * 1 had dependencies whose scheduling failed:\",\n                    '        - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :( because there were tasks whose scheduling failed',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 151,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_check_complete_error#151",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_check_complete_error(self)",
        "snippet": "    def test_check_complete_error(self):\n        class Bar(luigi.Task):\n            def run(self):\n                pass\n\n            def complete(self):\n                raise Exception\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar()\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['still_pending_not_ext'])\n        self.assertEqual({Foo()}, d['upstream_scheduling_error'])\n        self.assertEqual({Bar()}, d['scheduling_error'])\n        self.assertFalse(d['not_run'])\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 2 tasks of which:',\n                    '* 1 failed scheduling:',\n                    '    - 1 Bar()',\n                    '* 1 were left pending, among these:',\n                    \"    * 1 had dependencies whose scheduling failed:\",\n                    '        - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :( because there were tasks whose scheduling failed',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 151,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.run#153",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 153,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.complete#156",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.complete(self)",
        "snippet": "            def complete(self):\n                raise Exception\n                return True",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_check_complete_error#151",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_check_complete_error(self)",
        "snippet": "    def test_check_complete_error(self):\n        class Bar(luigi.Task):\n            def run(self):\n                pass\n\n            def complete(self):\n                raise Exception\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar()\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['still_pending_not_ext'])\n        self.assertEqual({Foo()}, d['upstream_scheduling_error'])\n        self.assertEqual({Bar()}, d['scheduling_error'])\n        self.assertFalse(d['not_run'])\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 2 tasks of which:',\n                    '* 1 failed scheduling:',\n                    '    - 1 Bar()',\n                    '* 1 were left pending, among these:',\n                    \"    * 1 had dependencies whose scheduling failed:\",\n                    '        - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :( because there were tasks whose scheduling failed',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 151,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#161",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield Bar()",
        "begin_line": 161,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_not_run_error#198",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_not_run_error(self)",
        "snippet": "    def test_not_run_error(self):\n        class Bar(luigi.Task):\n            def complete(self):\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar()\n\n        def new_func(*args, **kwargs):\n            return None\n\n        with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):\n            self.run_task(Foo())\n\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['still_pending_not_ext'])\n        self.assertEqual({Foo()}, d['not_run'])\n        self.assertEqual({Bar()}, d['already_done'])\n        self.assertFalse(d['upstream_scheduling_error'])\n        self.assertFalse(d['scheduling_error'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 2 tasks of which:',\n                    '* 1 present dependencies were encountered:',\n                    '    - 1 Bar()',\n                    '* 1 were left pending, among these:',\n                    \"    * 1 was not granted run permission by the scheduler:\",\n                    '        - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :| because there were tasks that were not granted run permission by the scheduler',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 198,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_not_run_error#198",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_not_run_error(self)",
        "snippet": "    def test_not_run_error(self):\n        class Bar(luigi.Task):\n            def complete(self):\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar()\n\n        def new_func(*args, **kwargs):\n            return None\n\n        with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):\n            self.run_task(Foo())\n\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['still_pending_not_ext'])\n        self.assertEqual({Foo()}, d['not_run'])\n        self.assertEqual({Bar()}, d['already_done'])\n        self.assertFalse(d['upstream_scheduling_error'])\n        self.assertFalse(d['scheduling_error'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 2 tasks of which:',\n                    '* 1 present dependencies were encountered:',\n                    '    - 1 Bar()',\n                    '* 1 were left pending, among these:',\n                    \"    * 1 was not granted run permission by the scheduler:\",\n                    '        - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :| because there were tasks that were not granted run permission by the scheduler',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 198,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.complete#200",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.complete(self)",
        "snippet": "            def complete(self):\n                return True",
        "begin_line": 200,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_not_run_error#198",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_not_run_error(self)",
        "snippet": "    def test_not_run_error(self):\n        class Bar(luigi.Task):\n            def complete(self):\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar()\n\n        def new_func(*args, **kwargs):\n            return None\n\n        with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):\n            self.run_task(Foo())\n\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['still_pending_not_ext'])\n        self.assertEqual({Foo()}, d['not_run'])\n        self.assertEqual({Bar()}, d['already_done'])\n        self.assertFalse(d['upstream_scheduling_error'])\n        self.assertFalse(d['scheduling_error'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 2 tasks of which:',\n                    '* 1 present dependencies were encountered:',\n                    '    - 1 Bar()',\n                    '* 1 were left pending, among these:',\n                    \"    * 1 was not granted run permission by the scheduler:\",\n                    '        - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :| because there were tasks that were not granted run permission by the scheduler',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 198,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#204",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield Bar()",
        "begin_line": 204,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.new_func#207",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.new_func(*args, **kwargs)",
        "snippet": "        def new_func(*args, **kwargs):\n            return None",
        "begin_line": 207,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_deps_error#246",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_deps_error(self)",
        "snippet": "    def test_deps_error(self):\n        class Bar(luigi.Task):\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                raise Exception\n                yield Bar()\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['scheduling_error'])\n        self.assertFalse(d['upstream_scheduling_error'])\n        self.assertFalse(d['not_run'])\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 1 tasks of which:',\n                    '* 1 failed scheduling:',\n                    '    - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :( because there were tasks whose scheduling failed',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 246,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_deps_error#246",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_deps_error(self)",
        "snippet": "    def test_deps_error(self):\n        class Bar(luigi.Task):\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                raise Exception\n                yield Bar()\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['scheduling_error'])\n        self.assertFalse(d['upstream_scheduling_error'])\n        self.assertFalse(d['not_run'])\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 1 tasks of which:',\n                    '* 1 failed scheduling:',\n                    '    - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :( because there were tasks whose scheduling failed',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 246,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.run#248",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 248,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.complete#251",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.complete(self)",
        "snippet": "            def complete(self):\n                return True",
        "begin_line": 251,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_deps_error#246",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_deps_error(self)",
        "snippet": "    def test_deps_error(self):\n        class Bar(luigi.Task):\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Foo(luigi.Task):\n            def requires(self):\n                raise Exception\n                yield Bar()\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['scheduling_error'])\n        self.assertFalse(d['upstream_scheduling_error'])\n        self.assertFalse(d['not_run'])\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 1 tasks of which:',\n                    '* 1 failed scheduling:',\n                    '    - 1 Foo()',\n                    '',\n                    'Did not run any tasks',\n                    'This progress looks :( because there were tasks whose scheduling failed',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 246,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#255",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                raise Exception\n                yield Bar()",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_config_summary_limit#290",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_config_summary_limit(self)",
        "snippet": "    def test_config_summary_limit(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Biz(Bar):\n            pass\n\n        class Bat(Bar):\n            pass\n\n        class Wut(Bar):\n            pass\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bat(1), Wut(1), Biz(1), Bar(0), Bar(1), Bar(2), Bar(3)}, d['already_done'])\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 8 tasks of which:',\n                    '* 7 present dependencies were encountered:',\n                    '    - 4 Bar(num=0...3)',\n                    '    ...',\n                    '* 1 ran successfully:',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 290,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_config_summary_limit#290",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_config_summary_limit(self)",
        "snippet": "    def test_config_summary_limit(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Biz(Bar):\n            pass\n\n        class Bat(Bar):\n            pass\n\n        class Wut(Bar):\n            pass\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bat(1), Wut(1), Biz(1), Bar(0), Bar(1), Bar(2), Bar(3)}, d['already_done'])\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 8 tasks of which:',\n                    '* 7 present dependencies were encountered:',\n                    '    - 4 Bar(num=0...3)',\n                    '    ...',\n                    '* 1 ran successfully:',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 290,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.run#294",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 294,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.complete#297",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.complete(self)",
        "snippet": "            def complete(self):\n                return True",
        "begin_line": 297,
        "end_line": 298,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Biz.test_config_summary_limit#290",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Biz",
        "signature": "test.execution_summary_test.Biz.test_config_summary_limit(self)",
        "snippet": "    def test_config_summary_limit(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Biz(Bar):\n            pass\n\n        class Bat(Bar):\n            pass\n\n        class Wut(Bar):\n            pass\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bat(1), Wut(1), Biz(1), Bar(0), Bar(1), Bar(2), Bar(3)}, d['already_done'])\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 8 tasks of which:',\n                    '* 7 present dependencies were encountered:',\n                    '    - 4 Bar(num=0...3)',\n                    '    ...',\n                    '* 1 ran successfully:',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 290,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bat.test_config_summary_limit#290",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bat",
        "signature": "test.execution_summary_test.Bat.test_config_summary_limit(self)",
        "snippet": "    def test_config_summary_limit(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Biz(Bar):\n            pass\n\n        class Bat(Bar):\n            pass\n\n        class Wut(Bar):\n            pass\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bat(1), Wut(1), Biz(1), Bar(0), Bar(1), Bar(2), Bar(3)}, d['already_done'])\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 8 tasks of which:',\n                    '* 7 present dependencies were encountered:',\n                    '    - 4 Bar(num=0...3)',\n                    '    ...',\n                    '* 1 ran successfully:',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 290,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Wut.test_config_summary_limit#290",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Wut",
        "signature": "test.execution_summary_test.Wut.test_config_summary_limit(self)",
        "snippet": "    def test_config_summary_limit(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Biz(Bar):\n            pass\n\n        class Bat(Bar):\n            pass\n\n        class Wut(Bar):\n            pass\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bat(1), Wut(1), Biz(1), Bar(0), Bar(1), Bar(2), Bar(3)}, d['already_done'])\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 8 tasks of which:',\n                    '* 7 present dependencies were encountered:',\n                    '    - 4 Bar(num=0...3)',\n                    '    ...',\n                    '* 1 ran successfully:',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 290,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_config_summary_limit#290",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_config_summary_limit(self)",
        "snippet": "    def test_config_summary_limit(self):\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                pass\n\n            def complete(self):\n                return True\n\n        class Biz(Bar):\n            pass\n\n        class Bat(Bar):\n            pass\n\n        class Wut(Bar):\n            pass\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Bat(1), Wut(1), Biz(1), Bar(0), Bar(1), Bar(2), Bar(3)}, d['already_done'])\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        summary = self.summary()\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 8 tasks of which:',\n                    '* 7 present dependencies were encountered:',\n                    '    - 4 Bar(num=0...3)',\n                    '    ...',\n                    '* 1 ran successfully:',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 290,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#310",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield Bat(1)\n                yield Wut(1)\n                yield Biz(1)\n                for i in range(4):\n                    yield Bar(i)",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.complete#317",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_upstream_not_running#349",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_upstream_not_running(self)",
        "snippet": "    def test_upstream_not_running(self):\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield ExternalBar(i)\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=1), Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar(num=0), ExternalBar(num=2), ExternalBar(num=3), ExternalBar(num=4)}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('\\n* 1 present dependencies were encountered:\\n    - 1 ExternalBar(num=1)\\n', s)\n        self.assertIn('\\n* 4 ran successfully:\\n    - 4 Bar(num=1...4)\\n', s)\n        self.assertIn('\\n* 1 failed:\\n    - 1 Bar(num=0)\\n', s)\n        self.assertIn('\\n* 5 were left pending, among these:\\n    * 4 were missing external dependencies:\\n        - 4 ExternalBar(num=', s)\n        self.assertIn('\\n    * 1 had failed dependencies:\\n'\n                      '        - 1 Foo()\\n'\n                      '    * 1 had missing external dependencies:\\n'\n                      '        - 1 Foo()\\n\\n'\n                      'This progress looks :( because there were failed tasks\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 349,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.test_upstream_not_running#349",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.test_upstream_not_running(self)",
        "snippet": "    def test_upstream_not_running(self):\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield ExternalBar(i)\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=1), Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar(num=0), ExternalBar(num=2), ExternalBar(num=3), ExternalBar(num=4)}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('\\n* 1 present dependencies were encountered:\\n    - 1 ExternalBar(num=1)\\n', s)\n        self.assertIn('\\n* 4 ran successfully:\\n    - 4 Bar(num=1...4)\\n', s)\n        self.assertIn('\\n* 1 failed:\\n    - 1 Bar(num=0)\\n', s)\n        self.assertIn('\\n* 5 were left pending, among these:\\n    * 4 were missing external dependencies:\\n        - 4 ExternalBar(num=', s)\n        self.assertIn('\\n    * 1 had failed dependencies:\\n'\n                      '        - 1 Foo()\\n'\n                      '    * 1 had missing external dependencies:\\n'\n                      '        - 1 Foo()\\n\\n'\n                      'This progress looks :( because there were failed tasks\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 349,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.complete#353",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.complete(self)",
        "snippet": "            def complete(self):\n                if self.num == 1:\n                    return True\n                return False",
        "begin_line": 353,
        "end_line": 356,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_upstream_not_running#349",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_upstream_not_running(self)",
        "snippet": "    def test_upstream_not_running(self):\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield ExternalBar(i)\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=1), Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar(num=0), ExternalBar(num=2), ExternalBar(num=3), ExternalBar(num=4)}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('\\n* 1 present dependencies were encountered:\\n    - 1 ExternalBar(num=1)\\n', s)\n        self.assertIn('\\n* 4 ran successfully:\\n    - 4 Bar(num=1...4)\\n', s)\n        self.assertIn('\\n* 1 failed:\\n    - 1 Bar(num=0)\\n', s)\n        self.assertIn('\\n* 5 were left pending, among these:\\n    * 4 were missing external dependencies:\\n        - 4 ExternalBar(num=', s)\n        self.assertIn('\\n    * 1 had failed dependencies:\\n'\n                      '        - 1 Foo()\\n'\n                      '    * 1 had missing external dependencies:\\n'\n                      '        - 1 Foo()\\n\\n'\n                      'This progress looks :( because there were failed tasks\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 349,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.run#361",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.run(self)",
        "snippet": "            def run(self):\n                if self.num == 0:\n                    raise ValueError()",
        "begin_line": 361,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_upstream_not_running#349",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_upstream_not_running(self)",
        "snippet": "    def test_upstream_not_running(self):\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield ExternalBar(i)\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(num=1)}, d['already_done'])\n        self.assertEqual({Bar(num=1), Bar(num=2), Bar(num=3), Bar(num=4)}, d['completed'])\n        self.assertEqual({Bar(num=0)}, d['failed'])\n        self.assertEqual({Foo()}, d['upstream_failure'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar(num=0), ExternalBar(num=2), ExternalBar(num=3), ExternalBar(num=4)}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('\\n* 1 present dependencies were encountered:\\n    - 1 ExternalBar(num=1)\\n', s)\n        self.assertIn('\\n* 4 ran successfully:\\n    - 4 Bar(num=1...4)\\n', s)\n        self.assertIn('\\n* 1 failed:\\n    - 1 Bar(num=0)\\n', s)\n        self.assertIn('\\n* 5 were left pending, among these:\\n    * 4 were missing external dependencies:\\n        - 4 ExternalBar(num=', s)\n        self.assertIn('\\n    * 1 had failed dependencies:\\n'\n                      '        - 1 Foo()\\n'\n                      '    * 1 had missing external dependencies:\\n'\n                      '        - 1 Foo()\\n\\n'\n                      'This progress looks :( because there were failed tasks\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 349,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#366",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(5):\n                    yield ExternalBar(i)\n                    yield Bar(i)",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_already_running#392",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_already_running(self)",
        "snippet": "    def test_already_running(self):\n        lock1 = threading.Lock()\n        lock2 = threading.Lock()\n\n        class ParentTask(RunOnceTask):\n\n            def requires(self):\n                yield LockTask()\n\n        class LockTask(RunOnceTask):\n            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True\n\n        lock1.acquire()\n        lock2.acquire()\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(ParentTask())\n        t1 = threading.Thread(target=other_worker.run)\n        t1.start()\n        lock2.acquire()\n        self.run_task(ParentTask())\n        lock1.release()\n        t1.join()\n        d = self.summary_dict()\n        self.assertEqual({LockTask()}, d['run_by_other_worker'])\n        self.assertEqual({ParentTask()}, d['upstream_run_by_other_worker'])\n        s = self.summary()\n        self.assertIn('\\nScheduled 2 tasks of which:\\n'\n                      '* 2 were left pending, among these:\\n'\n                      '    * 1 were being run by another worker:\\n'\n                      '        - 1 LockTask()\\n'\n                      '    * 1 had dependencies that were being run by other worker:\\n'\n                      '        - 1 ParentTask()\\n', s)\n        self.assertIn('\\n\\nThe other workers were:\\n'\n                      '    - other_worker ran 1 tasks\\n\\n'\n                      'Did not run any tasks\\n'\n                      'This progress looks :) because there were no failed '\n                      'tasks or missing external dependencies\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 392,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ParentTask.test_already_running#392",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ParentTask",
        "signature": "test.execution_summary_test.ParentTask.test_already_running(self)",
        "snippet": "    def test_already_running(self):\n        lock1 = threading.Lock()\n        lock2 = threading.Lock()\n\n        class ParentTask(RunOnceTask):\n\n            def requires(self):\n                yield LockTask()\n\n        class LockTask(RunOnceTask):\n            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True\n\n        lock1.acquire()\n        lock2.acquire()\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(ParentTask())\n        t1 = threading.Thread(target=other_worker.run)\n        t1.start()\n        lock2.acquire()\n        self.run_task(ParentTask())\n        lock1.release()\n        t1.join()\n        d = self.summary_dict()\n        self.assertEqual({LockTask()}, d['run_by_other_worker'])\n        self.assertEqual({ParentTask()}, d['upstream_run_by_other_worker'])\n        s = self.summary()\n        self.assertIn('\\nScheduled 2 tasks of which:\\n'\n                      '* 2 were left pending, among these:\\n'\n                      '    * 1 were being run by another worker:\\n'\n                      '        - 1 LockTask()\\n'\n                      '    * 1 had dependencies that were being run by other worker:\\n'\n                      '        - 1 ParentTask()\\n', s)\n        self.assertIn('\\n\\nThe other workers were:\\n'\n                      '    - other_worker ran 1 tasks\\n\\n'\n                      'Did not run any tasks\\n'\n                      'This progress looks :) because there were no failed '\n                      'tasks or missing external dependencies\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 392,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ParentTask.requires#398",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ParentTask",
        "signature": "test.execution_summary_test.ParentTask.requires(self)",
        "snippet": "            def requires(self):\n                yield LockTask()",
        "begin_line": 398,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.LockTask.test_already_running#392",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.LockTask",
        "signature": "test.execution_summary_test.LockTask.test_already_running(self)",
        "snippet": "    def test_already_running(self):\n        lock1 = threading.Lock()\n        lock2 = threading.Lock()\n\n        class ParentTask(RunOnceTask):\n\n            def requires(self):\n                yield LockTask()\n\n        class LockTask(RunOnceTask):\n            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True\n\n        lock1.acquire()\n        lock2.acquire()\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(ParentTask())\n        t1 = threading.Thread(target=other_worker.run)\n        t1.start()\n        lock2.acquire()\n        self.run_task(ParentTask())\n        lock1.release()\n        t1.join()\n        d = self.summary_dict()\n        self.assertEqual({LockTask()}, d['run_by_other_worker'])\n        self.assertEqual({ParentTask()}, d['upstream_run_by_other_worker'])\n        s = self.summary()\n        self.assertIn('\\nScheduled 2 tasks of which:\\n'\n                      '* 2 were left pending, among these:\\n'\n                      '    * 1 were being run by another worker:\\n'\n                      '        - 1 LockTask()\\n'\n                      '    * 1 had dependencies that were being run by other worker:\\n'\n                      '        - 1 ParentTask()\\n', s)\n        self.assertIn('\\n\\nThe other workers were:\\n'\n                      '    - other_worker ran 1 tasks\\n\\n'\n                      'Did not run any tasks\\n'\n                      'This progress looks :) because there were no failed '\n                      'tasks or missing external dependencies\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 392,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.LockTask.run#402",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.LockTask",
        "signature": "test.execution_summary_test.LockTask.run(self)",
        "snippet": "            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_already_running_2#434",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_already_running_2(self)",
        "snippet": "    def test_already_running_2(self):\n        class AlreadyRunningTask(luigi.Task):\n            def run(self):\n                pass\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(AlreadyRunningTask())  # This also registers this worker\n        old_func = luigi.scheduler.Scheduler.get_work\n\n        def new_func(*args, **kwargs):\n            new_kwargs = kwargs.copy()\n            new_kwargs['worker'] = 'other_worker'\n            old_func(*args, **new_kwargs)\n            return old_func(*args, **kwargs)\n\n        with mock.patch('luigi.scheduler.Scheduler.get_work', new_func):\n            self.run_task(AlreadyRunningTask())\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['not_run'])\n        self.assertEqual({AlreadyRunningTask()}, d['run_by_other_worker'])",
        "begin_line": 434,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.AlreadyRunningTask.test_already_running_2#434",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.AlreadyRunningTask",
        "signature": "test.execution_summary_test.AlreadyRunningTask.test_already_running_2(self)",
        "snippet": "    def test_already_running_2(self):\n        class AlreadyRunningTask(luigi.Task):\n            def run(self):\n                pass\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(AlreadyRunningTask())  # This also registers this worker\n        old_func = luigi.scheduler.Scheduler.get_work\n\n        def new_func(*args, **kwargs):\n            new_kwargs = kwargs.copy()\n            new_kwargs['worker'] = 'other_worker'\n            old_func(*args, **new_kwargs)\n            return old_func(*args, **kwargs)\n\n        with mock.patch('luigi.scheduler.Scheduler.get_work', new_func):\n            self.run_task(AlreadyRunningTask())\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['not_run'])\n        self.assertEqual({AlreadyRunningTask()}, d['run_by_other_worker'])",
        "begin_line": 434,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.AlreadyRunningTask.run#436",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.AlreadyRunningTask",
        "signature": "test.execution_summary_test.AlreadyRunningTask.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 436,
        "end_line": 437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.new_func#443",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.new_func(*args, **kwargs)",
        "snippet": "        def new_func(*args, **kwargs):\n            new_kwargs = kwargs.copy()\n            new_kwargs['worker'] = 'other_worker'\n            old_func(*args, **new_kwargs)\n            return old_func(*args, **kwargs)",
        "begin_line": 443,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_not_run#458",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_not_run(self)",
        "snippet": "    def test_not_run(self):\n        class AlreadyRunningTask(luigi.Task):\n            def run(self):\n                pass\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(AlreadyRunningTask())  # This also registers this worker\n        old_func = luigi.scheduler.Scheduler.get_work\n\n        def new_func(*args, **kwargs):\n            kwargs['current_tasks'] = None\n            old_func(*args, **kwargs)\n            return old_func(*args, **kwargs)\n\n        with mock.patch('luigi.scheduler.Scheduler.get_work', new_func):\n            self.run_task(AlreadyRunningTask())\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({AlreadyRunningTask()}, d['not_run'])\n\n        s = self.summary()\n        self.assertIn('\\nScheduled 1 tasks of which:\\n'\n                      '* 1 were left pending, among these:\\n'\n                      '    * 1 was not granted run permission by the scheduler:\\n'\n                      '        - 1 AlreadyRunningTask()\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 458,
        "end_line": 486,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.AlreadyRunningTask.test_not_run#458",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.AlreadyRunningTask",
        "signature": "test.execution_summary_test.AlreadyRunningTask.test_not_run(self)",
        "snippet": "    def test_not_run(self):\n        class AlreadyRunningTask(luigi.Task):\n            def run(self):\n                pass\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(AlreadyRunningTask())  # This also registers this worker\n        old_func = luigi.scheduler.Scheduler.get_work\n\n        def new_func(*args, **kwargs):\n            kwargs['current_tasks'] = None\n            old_func(*args, **kwargs)\n            return old_func(*args, **kwargs)\n\n        with mock.patch('luigi.scheduler.Scheduler.get_work', new_func):\n            self.run_task(AlreadyRunningTask())\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({AlreadyRunningTask()}, d['not_run'])\n\n        s = self.summary()\n        self.assertIn('\\nScheduled 1 tasks of which:\\n'\n                      '* 1 were left pending, among these:\\n'\n                      '    * 1 was not granted run permission by the scheduler:\\n'\n                      '        - 1 AlreadyRunningTask()\\n', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 458,
        "end_line": 486,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.AlreadyRunningTask.run#460",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.AlreadyRunningTask",
        "signature": "test.execution_summary_test.AlreadyRunningTask.run(self)",
        "snippet": "            def run(self):\n                pass",
        "begin_line": 460,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.new_func#467",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.new_func(*args, **kwargs)",
        "snippet": "        def new_func(*args, **kwargs):\n            kwargs['current_tasks'] = None\n            old_func(*args, **kwargs)\n            return old_func(*args, **kwargs)",
        "begin_line": 467,
        "end_line": 470,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_somebody_else_finish_task#488",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_somebody_else_finish_task(self)",
        "snippet": "    def test_somebody_else_finish_task(self):\n        class SomeTask(RunOnceTask):\n            pass\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n\n        self.worker.add(SomeTask())\n        other_worker.add(SomeTask())\n        other_worker.run()\n        self.worker.run()\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({SomeTask()}, d['not_run'])",
        "begin_line": 488,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.SomeTask.test_somebody_else_finish_task#488",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.SomeTask",
        "signature": "test.execution_summary_test.SomeTask.test_somebody_else_finish_task(self)",
        "snippet": "    def test_somebody_else_finish_task(self):\n        class SomeTask(RunOnceTask):\n            pass\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n\n        self.worker.add(SomeTask())\n        other_worker.add(SomeTask())\n        other_worker.run()\n        self.worker.run()\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({SomeTask()}, d['not_run'])",
        "begin_line": 488,
        "end_line": 503,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_somebody_else_disables_task#505",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_somebody_else_disables_task(self)",
        "snippet": "    def test_somebody_else_disables_task(self):\n        class SomeTask(luigi.Task):\n            def complete(self):\n                return False\n\n            def run(self):\n                raise ValueError()\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n\n        self.worker.add(SomeTask())\n        other_worker.add(SomeTask())\n        other_worker.run()  # Assuming it is disabled for a while after this\n        self.worker.run()\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({SomeTask()}, d['not_run'])",
        "begin_line": 505,
        "end_line": 524,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.SomeTask.test_somebody_else_disables_task#505",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.SomeTask",
        "signature": "test.execution_summary_test.SomeTask.test_somebody_else_disables_task(self)",
        "snippet": "    def test_somebody_else_disables_task(self):\n        class SomeTask(luigi.Task):\n            def complete(self):\n                return False\n\n            def run(self):\n                raise ValueError()\n\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n\n        self.worker.add(SomeTask())\n        other_worker.add(SomeTask())\n        other_worker.run()  # Assuming it is disabled for a while after this\n        self.worker.run()\n\n        d = self.summary_dict()\n        self.assertFalse(d['already_done'])\n        self.assertFalse(d['completed'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({SomeTask()}, d['not_run'])",
        "begin_line": 505,
        "end_line": 524,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.SomeTask.complete#507",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.SomeTask",
        "signature": "test.execution_summary_test.SomeTask.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 507,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.SomeTask.run#510",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.SomeTask",
        "signature": "test.execution_summary_test.SomeTask.run(self)",
        "snippet": "            def run(self):\n                raise ValueError()",
        "begin_line": 510,
        "end_line": 511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_larger_tree#526",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_larger_tree(self)",
        "snippet": "    def test_larger_tree(self):\n\n        class Dog(RunOnceTask):\n            def requires(self):\n                yield Cat(2)\n\n        class Cat(luigi.Task):\n            num = luigi.IntParameter()\n\n            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False\n\n            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    yield Bar(i)\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n\n        self.assertEqual({Cat(num=1)}, d['already_done'])\n        self.assertEqual({Cat(num=0), Bar(num=1)}, d['completed'])\n        self.assertEqual({Cat(num=2)}, d['failed'])\n        self.assertEqual({Dog(), Bar(num=2), Foo()}, d['upstream_failure'])\n        self.assertEqual({Bar(num=0), Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar()}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 526,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Dog.test_larger_tree#526",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Dog",
        "signature": "test.execution_summary_test.Dog.test_larger_tree(self)",
        "snippet": "    def test_larger_tree(self):\n\n        class Dog(RunOnceTask):\n            def requires(self):\n                yield Cat(2)\n\n        class Cat(luigi.Task):\n            num = luigi.IntParameter()\n\n            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False\n\n            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    yield Bar(i)\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n\n        self.assertEqual({Cat(num=1)}, d['already_done'])\n        self.assertEqual({Cat(num=0), Bar(num=1)}, d['completed'])\n        self.assertEqual({Cat(num=2)}, d['failed'])\n        self.assertEqual({Dog(), Bar(num=2), Foo()}, d['upstream_failure'])\n        self.assertEqual({Bar(num=0), Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar()}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 526,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Dog.requires#529",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Dog",
        "signature": "test.execution_summary_test.Dog.requires(self)",
        "snippet": "            def requires(self):\n                yield Cat(2)",
        "begin_line": 529,
        "end_line": 530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Cat.test_larger_tree#526",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Cat",
        "signature": "test.execution_summary_test.Cat.test_larger_tree(self)",
        "snippet": "    def test_larger_tree(self):\n\n        class Dog(RunOnceTask):\n            def requires(self):\n                yield Cat(2)\n\n        class Cat(luigi.Task):\n            num = luigi.IntParameter()\n\n            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False\n\n            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    yield Bar(i)\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n\n        self.assertEqual({Cat(num=1)}, d['already_done'])\n        self.assertEqual({Cat(num=0), Bar(num=1)}, d['completed'])\n        self.assertEqual({Cat(num=2)}, d['failed'])\n        self.assertEqual({Dog(), Bar(num=2), Foo()}, d['upstream_failure'])\n        self.assertEqual({Bar(num=0), Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar()}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 526,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Cat.__init__#535",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Cat",
        "signature": "test.execution_summary_test.Cat.__init__(self, *args, **kwargs)",
        "snippet": "            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False",
        "begin_line": 535,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Cat.run#539",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Cat",
        "signature": "test.execution_summary_test.Cat.run(self)",
        "snippet": "            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True",
        "begin_line": 539,
        "end_line": 542,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Cat.complete#544",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Cat",
        "signature": "test.execution_summary_test.Cat.complete(self)",
        "snippet": "            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp",
        "begin_line": 544,
        "end_line": 548,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_larger_tree#526",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_larger_tree(self)",
        "snippet": "    def test_larger_tree(self):\n\n        class Dog(RunOnceTask):\n            def requires(self):\n                yield Cat(2)\n\n        class Cat(luigi.Task):\n            num = luigi.IntParameter()\n\n            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False\n\n            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    yield Bar(i)\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n\n        self.assertEqual({Cat(num=1)}, d['already_done'])\n        self.assertEqual({Cat(num=0), Bar(num=1)}, d['completed'])\n        self.assertEqual({Cat(num=2)}, d['failed'])\n        self.assertEqual({Dog(), Bar(num=2), Foo()}, d['upstream_failure'])\n        self.assertEqual({Bar(num=0), Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar()}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 526,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.requires#553",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.requires(self)",
        "snippet": "            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()",
        "begin_line": 553,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_larger_tree#526",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_larger_tree(self)",
        "snippet": "    def test_larger_tree(self):\n\n        class Dog(RunOnceTask):\n            def requires(self):\n                yield Cat(2)\n\n        class Cat(luigi.Task):\n            num = luigi.IntParameter()\n\n            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False\n\n            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    yield Bar(i)\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n\n        self.assertEqual({Cat(num=1)}, d['already_done'])\n        self.assertEqual({Cat(num=0), Bar(num=1)}, d['completed'])\n        self.assertEqual({Cat(num=2)}, d['failed'])\n        self.assertEqual({Dog(), Bar(num=2), Foo()}, d['upstream_failure'])\n        self.assertEqual({Bar(num=0), Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar()}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 526,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#564",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(3):\n                    yield Bar(i)",
        "begin_line": 564,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.test_larger_tree#526",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.test_larger_tree(self)",
        "snippet": "    def test_larger_tree(self):\n\n        class Dog(RunOnceTask):\n            def requires(self):\n                yield Cat(2)\n\n        class Cat(luigi.Task):\n            num = luigi.IntParameter()\n\n            def __init__(self, *args, **kwargs):\n                super(Cat, self).__init__(*args, **kwargs)\n                self.comp = False\n\n            def run(self):\n                if self.num == 2:\n                    raise ValueError()\n                self.comp = True\n\n            def complete(self):\n                if self.num == 1:\n                    return True\n                else:\n                    return self.comp\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n            def requires(self):\n                if self.num == 0:\n                    yield ExternalBar()\n                    yield Cat(0)\n                if self.num == 1:\n                    yield Cat(0)\n                    yield Cat(1)\n                if self.num == 2:\n                    yield Dog()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    yield Bar(i)\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n\n        self.assertEqual({Cat(num=1)}, d['already_done'])\n        self.assertEqual({Cat(num=0), Bar(num=1)}, d['completed'])\n        self.assertEqual({Cat(num=2)}, d['failed'])\n        self.assertEqual({Dog(), Bar(num=2), Foo()}, d['upstream_failure'])\n        self.assertEqual({Bar(num=0), Foo()}, d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertEqual({ExternalBar()}, d['still_pending_ext'])\n        s = self.summary()\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 526,
        "end_line": 584,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.complete#570",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 570,
        "end_line": 571,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_dates#586",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_dates(self)",
        "snippet": "    def test_with_dates(self):\n        \"\"\" Just test that it doesn't crash with date params \"\"\"\n\n        start = datetime.date(1998, 3, 23)\n\n        class Bar(RunOnceTask):\n            date = luigi.DateParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(days=i)\n                    yield Bar(date=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(days=i)) for i in range(10)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('date=1998-0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 586,
        "end_line": 610,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_dates#586",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_dates(self)",
        "snippet": "    def test_with_dates(self):\n        \"\"\" Just test that it doesn't crash with date params \"\"\"\n\n        start = datetime.date(1998, 3, 23)\n\n        class Bar(RunOnceTask):\n            date = luigi.DateParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(days=i)\n                    yield Bar(date=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(days=i)) for i in range(10)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('date=1998-0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 586,
        "end_line": 610,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_dates#586",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_dates(self)",
        "snippet": "    def test_with_dates(self):\n        \"\"\" Just test that it doesn't crash with date params \"\"\"\n\n        start = datetime.date(1998, 3, 23)\n\n        class Bar(RunOnceTask):\n            date = luigi.DateParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(days=i)\n                    yield Bar(date=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(days=i)) for i in range(10)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('date=1998-0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 586,
        "end_line": 610,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#595",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(days=i)\n                    yield Bar(date=new_date)",
        "begin_line": 595,
        "end_line": 598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_ranges_minutes#612",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_ranges_minutes(self)",
        "snippet": "    def test_with_ranges_minutes(self):\n\n        start = datetime.datetime(1998, 3, 23, 1, 50)\n\n        class Bar(RunOnceTask):\n            time = luigi.DateMinuteParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(300):\n                    new_time = start + datetime.timedelta(minutes=i)\n                    yield Bar(time=new_time)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(minutes=i)) for i in range(300)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('Bar(time=1998-03-23T0150...1998-03-23T0649)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 612,
        "end_line": 632,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_ranges_minutes#612",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_ranges_minutes(self)",
        "snippet": "    def test_with_ranges_minutes(self):\n\n        start = datetime.datetime(1998, 3, 23, 1, 50)\n\n        class Bar(RunOnceTask):\n            time = luigi.DateMinuteParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(300):\n                    new_time = start + datetime.timedelta(minutes=i)\n                    yield Bar(time=new_time)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(minutes=i)) for i in range(300)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('Bar(time=1998-03-23T0150...1998-03-23T0649)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 612,
        "end_line": 632,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_ranges_minutes#612",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_ranges_minutes(self)",
        "snippet": "    def test_with_ranges_minutes(self):\n\n        start = datetime.datetime(1998, 3, 23, 1, 50)\n\n        class Bar(RunOnceTask):\n            time = luigi.DateMinuteParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(300):\n                    new_time = start + datetime.timedelta(minutes=i)\n                    yield Bar(time=new_time)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(minutes=i)) for i in range(300)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('Bar(time=1998-03-23T0150...1998-03-23T0649)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 612,
        "end_line": 632,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#620",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(300):\n                    new_time = start + datetime.timedelta(minutes=i)\n                    yield Bar(time=new_time)",
        "begin_line": 620,
        "end_line": 623,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_ranges_one_param#634",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_ranges_one_param(self)",
        "snippet": "    def test_with_ranges_one_param(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(11):\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(i) for i in range(11)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('Bar(num=0...10)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 634,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_ranges_one_param#634",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_ranges_one_param(self)",
        "snippet": "    def test_with_ranges_one_param(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(11):\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(i) for i in range(11)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('Bar(num=0...10)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 634,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_ranges_one_param#634",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_ranges_one_param(self)",
        "snippet": "    def test_with_ranges_one_param(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(11):\n                    yield Bar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(i) for i in range(11)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('Bar(num=0...10)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 634,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#640",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(11):\n                    yield Bar(i)",
        "begin_line": 640,
        "end_line": 642,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_ranges_multiple_params#653",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_ranges_multiple_params(self)",
        "snippet": "    def test_with_ranges_multiple_params(self):\n\n        class Bar(RunOnceTask):\n            num1 = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n            num3 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(5, i, 25)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(5, i, 25) for i in range(5)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('- 5 Bar(num1=5, num2=0...4, num3=25)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 653,
        "end_line": 672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_ranges_multiple_params#653",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_ranges_multiple_params(self)",
        "snippet": "    def test_with_ranges_multiple_params(self):\n\n        class Bar(RunOnceTask):\n            num1 = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n            num3 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(5, i, 25)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(5, i, 25) for i in range(5)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('- 5 Bar(num1=5, num2=0...4, num3=25)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 653,
        "end_line": 672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_ranges_multiple_params#653",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_ranges_multiple_params(self)",
        "snippet": "    def test_with_ranges_multiple_params(self):\n\n        class Bar(RunOnceTask):\n            num1 = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n            num3 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(5, i, 25)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(5, i, 25) for i in range(5)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('- 5 Bar(num1=5, num2=0...4, num3=25)', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 653,
        "end_line": 672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#661",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(5):\n                    yield Bar(5, i, 25)",
        "begin_line": 661,
        "end_line": 663,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_two_tasks#674",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_two_tasks(self)",
        "snippet": "    def test_with_two_tasks(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(2):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo(), Bar(num=0, num2=0), Bar(num=1, num2=2)}, d['completed'])\n\n        summary = self.summary()\n        result = summary.split('\\n')\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 3 tasks of which:',\n                    '* 3 ran successfully:',\n                    '    - 2 Bar(num=0, num2=0) and Bar(num=1, num2=2)',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 674,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_two_tasks#674",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_two_tasks(self)",
        "snippet": "    def test_with_two_tasks(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(2):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo(), Bar(num=0, num2=0), Bar(num=1, num2=2)}, d['completed'])\n\n        summary = self.summary()\n        result = summary.split('\\n')\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 3 tasks of which:',\n                    '* 3 ran successfully:',\n                    '    - 2 Bar(num=0, num2=0) and Bar(num=1, num2=2)',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 674,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_two_tasks#674",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_two_tasks(self)",
        "snippet": "    def test_with_two_tasks(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(2):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo(), Bar(num=0, num2=0), Bar(num=1, num2=2)}, d['completed'])\n\n        summary = self.summary()\n        result = summary.split('\\n')\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 3 tasks of which:',\n                    '* 3 ran successfully:',\n                    '    - 2 Bar(num=0, num2=0) and Bar(num=1, num2=2)',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 674,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#681",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(2):\n                    yield Bar(i, 2 * i)",
        "begin_line": 681,
        "end_line": 683,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_really_long_param_name#708",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_really_long_param_name(self)",
        "snippet": "    def test_really_long_param_name(self):\n\n        class Bar(RunOnceTask):\n            This_is_a_really_long_parameter_that_we_should_not_print_out_because_people_will_get_annoyed = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(0)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('Bar(...)', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 708,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_really_long_param_name#708",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_really_long_param_name(self)",
        "snippet": "    def test_really_long_param_name(self):\n\n        class Bar(RunOnceTask):\n            This_is_a_really_long_parameter_that_we_should_not_print_out_because_people_will_get_annoyed = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(0)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('Bar(...)', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 708,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_really_long_param_name#708",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_really_long_param_name(self)",
        "snippet": "    def test_really_long_param_name(self):\n\n        class Bar(RunOnceTask):\n            This_is_a_really_long_parameter_that_we_should_not_print_out_because_people_will_get_annoyed = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(0)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('Bar(...)', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 708,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#714",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield Bar(0)",
        "begin_line": 714,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_multiple_params_multiple_same_task_family#723",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_multiple_params_multiple_same_task_family(self)",
        "snippet": "    def test_multiple_params_multiple_same_task_family(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        summary = self.summary()\n\n        result = summary.split('\\n')\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 5 tasks of which:',\n                    '* 5 ran successfully:',\n                    '    - 4 Bar(num=0, num2=0) ...',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 723,
        "end_line": 753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_multiple_params_multiple_same_task_family#723",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_multiple_params_multiple_same_task_family(self)",
        "snippet": "    def test_multiple_params_multiple_same_task_family(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        summary = self.summary()\n\n        result = summary.split('\\n')\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 5 tasks of which:',\n                    '* 5 ran successfully:',\n                    '    - 4 Bar(num=0, num2=0) ...',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 723,
        "end_line": 753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_multiple_params_multiple_same_task_family#723",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_multiple_params_multiple_same_task_family(self)",
        "snippet": "    def test_multiple_params_multiple_same_task_family(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        summary = self.summary()\n\n        result = summary.split('\\n')\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 5 tasks of which:',\n                    '* 5 ran successfully:',\n                    '    - 4 Bar(num=0, num2=0) ...',\n                    '    - 1 Foo()',\n                    '',\n                    'This progress looks :) because there were no failed tasks or missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 723,
        "end_line": 753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#730",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)",
        "begin_line": 730,
        "end_line": 732,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_happy_smiley_face_normal#755",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_happy_smiley_face_normal(self)",
        "snippet": "    def test_happy_smiley_face_normal(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :) because there were no failed tasks or missing external dependencies', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 755,
        "end_line": 770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_happy_smiley_face_normal#755",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_happy_smiley_face_normal(self)",
        "snippet": "    def test_happy_smiley_face_normal(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :) because there were no failed tasks or missing external dependencies', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 755,
        "end_line": 770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_happy_smiley_face_normal#755",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_happy_smiley_face_normal(self)",
        "snippet": "    def test_happy_smiley_face_normal(self):\n\n        class Bar(RunOnceTask):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :) because there were no failed tasks or missing external dependencies', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 755,
        "end_line": 770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#762",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(4):\n                    yield Bar(i, 2 * i)",
        "begin_line": 762,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_happy_smiley_face_other_workers#772",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_happy_smiley_face_other_workers(self)",
        "snippet": "    def test_happy_smiley_face_other_workers(self):\n        lock1 = threading.Lock()\n        lock2 = threading.Lock()\n\n        class ParentTask(RunOnceTask):\n\n            def requires(self):\n                yield LockTask()\n\n        class LockTask(RunOnceTask):\n\n            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True\n\n        lock1.acquire()\n        lock2.acquire()\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(ParentTask())\n        t1 = threading.Thread(target=other_worker.run)\n        t1.start()\n        lock2.acquire()\n        self.run_task(ParentTask())\n        lock1.release()\n        t1.join()\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :) because there were no failed tasks or missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 772,
        "end_line": 800,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ParentTask.test_happy_smiley_face_other_workers#772",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ParentTask",
        "signature": "test.execution_summary_test.ParentTask.test_happy_smiley_face_other_workers(self)",
        "snippet": "    def test_happy_smiley_face_other_workers(self):\n        lock1 = threading.Lock()\n        lock2 = threading.Lock()\n\n        class ParentTask(RunOnceTask):\n\n            def requires(self):\n                yield LockTask()\n\n        class LockTask(RunOnceTask):\n\n            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True\n\n        lock1.acquire()\n        lock2.acquire()\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(ParentTask())\n        t1 = threading.Thread(target=other_worker.run)\n        t1.start()\n        lock2.acquire()\n        self.run_task(ParentTask())\n        lock1.release()\n        t1.join()\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :) because there were no failed tasks or missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 772,
        "end_line": 800,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ParentTask.requires#778",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ParentTask",
        "signature": "test.execution_summary_test.ParentTask.requires(self)",
        "snippet": "            def requires(self):\n                yield LockTask()",
        "begin_line": 778,
        "end_line": 779,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.LockTask.test_happy_smiley_face_other_workers#772",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.LockTask",
        "signature": "test.execution_summary_test.LockTask.test_happy_smiley_face_other_workers(self)",
        "snippet": "    def test_happy_smiley_face_other_workers(self):\n        lock1 = threading.Lock()\n        lock2 = threading.Lock()\n\n        class ParentTask(RunOnceTask):\n\n            def requires(self):\n                yield LockTask()\n\n        class LockTask(RunOnceTask):\n\n            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True\n\n        lock1.acquire()\n        lock2.acquire()\n        other_worker = luigi.worker.Worker(scheduler=self.scheduler, worker_id=\"other_worker\")\n        other_worker.add(ParentTask())\n        t1 = threading.Thread(target=other_worker.run)\n        t1.start()\n        lock2.acquire()\n        self.run_task(ParentTask())\n        lock1.release()\n        t1.join()\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :) because there were no failed tasks or missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 772,
        "end_line": 800,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.LockTask.run#783",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.LockTask",
        "signature": "test.execution_summary_test.LockTask.run(self)",
        "snippet": "            def run(self):\n                lock2.release()\n                lock1.acquire()\n                self.comp = True",
        "begin_line": 783,
        "end_line": 786,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_sad_smiley_face#802",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_sad_smiley_face(self)",
        "snippet": "    def test_sad_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :( because there were failed tasks', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 802,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.test_sad_smiley_face#802",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.test_sad_smiley_face(self)",
        "snippet": "    def test_sad_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :( because there were failed tasks', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 802,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.complete#806",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 806,
        "end_line": 807,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_sad_smiley_face#802",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_sad_smiley_face(self)",
        "snippet": "    def test_sad_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :( because there were failed tasks', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 802,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.run#812",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.run(self)",
        "snippet": "            def run(self):\n                if self.num == 0:\n                    raise ValueError()",
        "begin_line": 812,
        "end_line": 814,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_sad_smiley_face#802",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_sad_smiley_face(self)",
        "snippet": "    def test_sad_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def run(self):\n                if self.num == 0:\n                    raise ValueError()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :( because there were failed tasks', s)\n        self.assertNotIn(\"Did not run any tasks\", s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 802,
        "end_line": 826,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#817",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(5):\n                    yield Bar(i)\n                yield ExternalBar()",
        "begin_line": 817,
        "end_line": 820,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_neutral_smiley_face#828",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_neutral_smiley_face(self)",
        "snippet": "    def test_neutral_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :| because there were missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 828,
        "end_line": 842,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.test_neutral_smiley_face#828",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.test_neutral_smiley_face(self)",
        "snippet": "    def test_neutral_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :| because there were missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 828,
        "end_line": 842,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.complete#832",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 832,
        "end_line": 833,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_neutral_smiley_face#828",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_neutral_smiley_face(self)",
        "snippet": "    def test_neutral_smiley_face(self):\n\n        class ExternalBar(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield ExternalBar()\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('\\nThis progress looks :| because there were missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 828,
        "end_line": 842,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#836",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield ExternalBar()",
        "begin_line": 836,
        "end_line": 837,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_did_not_run_any_tasks#844",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_did_not_run_any_tasks(self)",
        "snippet": "    def test_did_not_run_any_tasks(self):\n\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 5:\n                    return True\n                return False\n\n        class Foo(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield ExternalBar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(5)}, d['already_done'])\n        self.assertEqual({ExternalBar(i) for i in range(10) if i != 5}, d['still_pending_ext'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        s = self.summary()\n        self.assertIn('\\n\\nDid not run any tasks\\nThis progress looks :| because there were missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 844,
        "end_line": 867,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.test_did_not_run_any_tasks#844",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.test_did_not_run_any_tasks(self)",
        "snippet": "    def test_did_not_run_any_tasks(self):\n\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 5:\n                    return True\n                return False\n\n        class Foo(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield ExternalBar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(5)}, d['already_done'])\n        self.assertEqual({ExternalBar(i) for i in range(10) if i != 5}, d['still_pending_ext'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        s = self.summary()\n        self.assertIn('\\n\\nDid not run any tasks\\nThis progress looks :| because there were missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 844,
        "end_line": 867,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExternalBar.complete#849",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExternalBar",
        "signature": "test.execution_summary_test.ExternalBar.complete(self)",
        "snippet": "            def complete(self):\n                if self.num == 5:\n                    return True\n                return False",
        "begin_line": 849,
        "end_line": 852,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_did_not_run_any_tasks#844",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_did_not_run_any_tasks(self)",
        "snippet": "    def test_did_not_run_any_tasks(self):\n\n        class ExternalBar(luigi.ExternalTask):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                if self.num == 5:\n                    return True\n                return False\n\n        class Foo(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield ExternalBar(i)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({ExternalBar(5)}, d['already_done'])\n        self.assertEqual({ExternalBar(i) for i in range(10) if i != 5}, d['still_pending_ext'])\n        self.assertEqual({Foo()}, d['upstream_missing_dependency'])\n        s = self.summary()\n        self.assertIn('\\n\\nDid not run any tasks\\nThis progress looks :| because there were missing external dependencies', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 844,
        "end_line": 867,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#856",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(10):\n                    yield ExternalBar(i)",
        "begin_line": 856,
        "end_line": 858,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MyExternal.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MyExternal",
        "signature": "test.execution_summary_test.MyExternal.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.MyExternal.complete#873",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.MyExternal",
        "signature": "test.execution_summary_test.MyExternal.complete(self)",
        "snippet": "            def complete(self):\n                return False",
        "begin_line": 873,
        "end_line": 874,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Boom.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Boom",
        "signature": "test.execution_summary_test.Boom.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Boom.requires#879",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Boom",
        "signature": "test.execution_summary_test.Boom.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)",
        "begin_line": 879,
        "end_line": 881,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#887",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield MyExternal()\n                yield Boom(0)",
        "begin_line": 887,
        "end_line": 889,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.complete#894",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.complete(self)",
        "snippet": "            def complete(self):\n                return True",
        "begin_line": 894,
        "end_line": 895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.DateTask.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.DateTask",
        "signature": "test.execution_summary_test.DateTask.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.DateTask.requires#901",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.DateTask",
        "signature": "test.execution_summary_test.DateTask.requires(self)",
        "snippet": "            def requires(self):\n                yield MyExternal()\n                yield Boom(0)",
        "begin_line": 901,
        "end_line": 903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.EntryPoint.test_example#869",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.EntryPoint",
        "signature": "test.execution_summary_test.EntryPoint.test_example(self)",
        "snippet": "    def test_example(self):\n\n        class MyExternal(luigi.ExternalTask):\n\n            def complete(self):\n                return False\n\n        class Boom(luigi.Task):\n            this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n            def requires(self):\n                for i in range(5, 200):\n                    yield Bar(i)\n\n        class Foo(luigi.Task):\n            num = luigi.IntParameter()\n            num2 = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class Bar(luigi.Task):\n            num = luigi.IntParameter()\n\n            def complete(self):\n                return True\n\n        class DateTask(luigi.Task):\n            date = luigi.DateParameter()\n            num = luigi.IntParameter()\n\n            def requires(self):\n                yield MyExternal()\n                yield Boom(0)\n\n        class EntryPoint(luigi.Task):\n\n            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n\n        self.run_task(EntryPoint())\n        summary = self.summary()\n\n        expected = ['',\n                    '===== Luigi Execution Summary =====',\n                    '',\n                    'Scheduled 218 tasks of which:',\n                    '* 195 present dependencies were encountered:',\n                    '    - 195 Bar(num=5...199)',\n                    '* 1 ran successfully:',\n                    '    - 1 Boom(...)',\n                    '* 22 were left pending, among these:',\n                    '    * 1 were missing external dependencies:',\n                    '        - 1 MyExternal()',\n                    '    * 21 had missing external dependencies:',\n                    '        - 10 DateTask(date=1998-03-23...1998-04-01, num=5)',\n                    '        - 1 EntryPoint()',\n                    '        - 10 Foo(num=100, num2=0) ...',\n                    '',\n                    'This progress looks :| because there were missing external dependencies',\n                    '',\n                    '===== Luigi Execution Summary =====',\n                    '']\n        result = summary.split('\\n')\n\n        self.assertEqual(len(result), len(expected))\n        for i, line in enumerate(result):\n            self.assertEqual(line, expected[i])",
        "begin_line": 869,
        "end_line": 940,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.EntryPoint.requires#907",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.EntryPoint",
        "signature": "test.execution_summary_test.EntryPoint.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(10):\n                    yield Foo(100, 2 * i)\n                for i in range(10):\n                    yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)",
        "begin_line": 907,
        "end_line": 911,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_datehours#942",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_datehours(self)",
        "snippet": "    def test_with_datehours(self):\n        \"\"\" Just test that it doesn't crash with datehour params \"\"\"\n\n        start = datetime.datetime(1998, 3, 23, 5)\n\n        class Bar(RunOnceTask):\n            datehour = luigi.DateHourParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(hours=i)\n                    yield Bar(datehour=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(hours=i)) for i in range(10)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('datehour=1998-03-23T0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 942,
        "end_line": 966,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_datehours#942",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_datehours(self)",
        "snippet": "    def test_with_datehours(self):\n        \"\"\" Just test that it doesn't crash with datehour params \"\"\"\n\n        start = datetime.datetime(1998, 3, 23, 5)\n\n        class Bar(RunOnceTask):\n            datehour = luigi.DateHourParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(hours=i)\n                    yield Bar(datehour=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(hours=i)) for i in range(10)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('datehour=1998-03-23T0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 942,
        "end_line": 966,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_datehours#942",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_datehours(self)",
        "snippet": "    def test_with_datehours(self):\n        \"\"\" Just test that it doesn't crash with datehour params \"\"\"\n\n        start = datetime.datetime(1998, 3, 23, 5)\n\n        class Bar(RunOnceTask):\n            datehour = luigi.DateHourParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(hours=i)\n                    yield Bar(datehour=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(hours=i)) for i in range(10)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('datehour=1998-03-23T0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 942,
        "end_line": 966,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#951",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(10):\n                    new_date = start + datetime.timedelta(hours=i)\n                    yield Bar(datehour=new_date)",
        "begin_line": 951,
        "end_line": 954,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_months#968",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_months(self)",
        "snippet": "    def test_with_months(self):\n        \"\"\" Just test that it doesn't crash with month params \"\"\"\n\n        start = datetime.datetime(1998, 3, 23)\n\n        class Bar(RunOnceTask):\n            month = luigi.MonthParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    new_date = start + datetime.timedelta(days=30*i)\n                    yield Bar(month=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(days=30*i)) for i in range(3)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('month=1998-0', s)\n        self.assertIn('Scheduled 4 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 968,
        "end_line": 992,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_months#968",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_months(self)",
        "snippet": "    def test_with_months(self):\n        \"\"\" Just test that it doesn't crash with month params \"\"\"\n\n        start = datetime.datetime(1998, 3, 23)\n\n        class Bar(RunOnceTask):\n            month = luigi.MonthParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    new_date = start + datetime.timedelta(days=30*i)\n                    yield Bar(month=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(days=30*i)) for i in range(3)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('month=1998-0', s)\n        self.assertIn('Scheduled 4 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 968,
        "end_line": 992,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_months#968",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_months(self)",
        "snippet": "    def test_with_months(self):\n        \"\"\" Just test that it doesn't crash with month params \"\"\"\n\n        start = datetime.datetime(1998, 3, 23)\n\n        class Bar(RunOnceTask):\n            month = luigi.MonthParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(3):\n                    new_date = start + datetime.timedelta(days=30*i)\n                    yield Bar(month=new_date)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = {Bar(start + datetime.timedelta(days=30*i)) for i in range(3)}\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('month=1998-0', s)\n        self.assertIn('Scheduled 4 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 968,
        "end_line": 992,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#977",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(3):\n                    new_date = start + datetime.timedelta(days=30*i)\n                    yield Bar(month=new_date)",
        "begin_line": 977,
        "end_line": 980,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_multiple_dash_dash_workers#994",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_multiple_dash_dash_workers(self)",
        "snippet": "    def test_multiple_dash_dash_workers(self):\n        \"\"\"\n        Don't print own worker with ``--workers 2`` setting.\n        \"\"\"\n        self.worker = luigi.worker.Worker(scheduler=self.scheduler, worker_processes=2)\n\n        class Foo(RunOnceTask):\n            pass\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual(set(), d['run_by_other_worker'])\n        s = self.summary()\n        self.assertNotIn('The other workers were', s)\n        self.assertIn('This progress looks :) because there were no failed ', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 994,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_multiple_dash_dash_workers#994",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_multiple_dash_dash_workers(self)",
        "snippet": "    def test_multiple_dash_dash_workers(self):\n        \"\"\"\n        Don't print own worker with ``--workers 2`` setting.\n        \"\"\"\n        self.worker = luigi.worker.Worker(scheduler=self.scheduler, worker_processes=2)\n\n        class Foo(RunOnceTask):\n            pass\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual(set(), d['run_by_other_worker'])\n        s = self.summary()\n        self.assertNotIn('The other workers were', s)\n        self.assertIn('This progress looks :) because there were no failed ', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 994,
        "end_line": 1009,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_uncomparable_parameters#1011",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_uncomparable_parameters(self)",
        "snippet": "    def test_with_uncomparable_parameters(self):\n        \"\"\"\n        Don't rely on parameters being sortable\n        \"\"\"\n        class Color(Enum):\n            red = 1\n            yellow = 2\n\n        class Bar(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n\n        class Baz(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n            another_param = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(Color.red)\n                yield Bar(Color.yellow)\n                yield Baz(Color.red, 5)\n                yield Baz(Color.yellow, 5)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('yellow', s)",
        "begin_line": 1011,
        "end_line": 1035,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Color.test_with_uncomparable_parameters#1011",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Color",
        "signature": "test.execution_summary_test.Color.test_with_uncomparable_parameters(self)",
        "snippet": "    def test_with_uncomparable_parameters(self):\n        \"\"\"\n        Don't rely on parameters being sortable\n        \"\"\"\n        class Color(Enum):\n            red = 1\n            yellow = 2\n\n        class Bar(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n\n        class Baz(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n            another_param = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(Color.red)\n                yield Bar(Color.yellow)\n                yield Baz(Color.red, 5)\n                yield Baz(Color.yellow, 5)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('yellow', s)",
        "begin_line": 1011,
        "end_line": 1035,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_uncomparable_parameters#1011",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_uncomparable_parameters(self)",
        "snippet": "    def test_with_uncomparable_parameters(self):\n        \"\"\"\n        Don't rely on parameters being sortable\n        \"\"\"\n        class Color(Enum):\n            red = 1\n            yellow = 2\n\n        class Bar(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n\n        class Baz(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n            another_param = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(Color.red)\n                yield Bar(Color.yellow)\n                yield Baz(Color.red, 5)\n                yield Baz(Color.yellow, 5)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('yellow', s)",
        "begin_line": 1011,
        "end_line": 1035,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Baz.test_with_uncomparable_parameters#1011",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Baz",
        "signature": "test.execution_summary_test.Baz.test_with_uncomparable_parameters(self)",
        "snippet": "    def test_with_uncomparable_parameters(self):\n        \"\"\"\n        Don't rely on parameters being sortable\n        \"\"\"\n        class Color(Enum):\n            red = 1\n            yellow = 2\n\n        class Bar(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n\n        class Baz(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n            another_param = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(Color.red)\n                yield Bar(Color.yellow)\n                yield Baz(Color.red, 5)\n                yield Baz(Color.yellow, 5)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('yellow', s)",
        "begin_line": 1011,
        "end_line": 1035,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_uncomparable_parameters#1011",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_uncomparable_parameters(self)",
        "snippet": "    def test_with_uncomparable_parameters(self):\n        \"\"\"\n        Don't rely on parameters being sortable\n        \"\"\"\n        class Color(Enum):\n            red = 1\n            yellow = 2\n\n        class Bar(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n\n        class Baz(RunOnceTask):\n            eparam = luigi.EnumParameter(enum=Color)\n            another_param = luigi.IntParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                yield Bar(Color.red)\n                yield Bar(Color.yellow)\n                yield Baz(Color.red, 5)\n                yield Baz(Color.yellow, 5)\n\n        self.run_task(Foo())\n        s = self.summary()\n        self.assertIn('yellow', s)",
        "begin_line": 1011,
        "end_line": 1035,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#1027",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                yield Bar(Color.red)\n                yield Bar(Color.yellow)\n                yield Baz(Color.red, 5)\n                yield Baz(Color.yellow, 5)",
        "begin_line": 1027,
        "end_line": 1031,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_dict_dependency#1037",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_dict_dependency(self)",
        "snippet": "    def test_with_dict_dependency(self):\n        \"\"\" Just test that it doesn't crash with dict params in dependencies \"\"\"\n\n        args = dict(start=datetime.date(1998, 3, 23), num=3)\n\n        class Bar(RunOnceTask):\n            args = luigi.DictParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_dict = args.copy()\n                    new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n                    yield Bar(args=new_dict)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = set()\n        for i in range(10):\n            new_dict = args.copy()\n            new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n            exp_set.add(Bar(new_dict))\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('\"num\": 3', s)\n        self.assertIn('\"start\": \"1998-0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 1037,
        "end_line": 1067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_dict_dependency#1037",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_dict_dependency(self)",
        "snippet": "    def test_with_dict_dependency(self):\n        \"\"\" Just test that it doesn't crash with dict params in dependencies \"\"\"\n\n        args = dict(start=datetime.date(1998, 3, 23), num=3)\n\n        class Bar(RunOnceTask):\n            args = luigi.DictParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_dict = args.copy()\n                    new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n                    yield Bar(args=new_dict)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = set()\n        for i in range(10):\n            new_dict = args.copy()\n            new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n            exp_set.add(Bar(new_dict))\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('\"num\": 3', s)\n        self.assertIn('\"start\": \"1998-0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 1037,
        "end_line": 1067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_with_dict_dependency#1037",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_with_dict_dependency(self)",
        "snippet": "    def test_with_dict_dependency(self):\n        \"\"\" Just test that it doesn't crash with dict params in dependencies \"\"\"\n\n        args = dict(start=datetime.date(1998, 3, 23), num=3)\n\n        class Bar(RunOnceTask):\n            args = luigi.DictParameter()\n\n        class Foo(luigi.Task):\n            def requires(self):\n                for i in range(10):\n                    new_dict = args.copy()\n                    new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n                    yield Bar(args=new_dict)\n\n        self.run_task(Foo())\n        d = self.summary_dict()\n        exp_set = set()\n        for i in range(10):\n            new_dict = args.copy()\n            new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n            exp_set.add(Bar(new_dict))\n        exp_set.add(Foo())\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('\"num\": 3', s)\n        self.assertIn('\"start\": \"1998-0', s)\n        self.assertIn('Scheduled 11 tasks', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 1037,
        "end_line": 1067,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.requires#1046",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.requires(self)",
        "snippet": "            def requires(self):\n                for i in range(10):\n                    new_dict = args.copy()\n                    new_dict['start'] = str(new_dict['start'] + datetime.timedelta(days=i))\n                    yield Bar(args=new_dict)",
        "begin_line": 1046,
        "end_line": 1050,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_with_dict_argument#1069",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_with_dict_argument(self)",
        "snippet": "    def test_with_dict_argument(self):\n        \"\"\" Just test that it doesn't crash with dict params \"\"\"\n\n        args = dict(start=str(datetime.date(1998, 3, 23)), num=3)\n\n        class Bar(RunOnceTask):\n            args = luigi.DictParameter()\n\n        self.run_task(Bar(args=args))\n        d = self.summary_dict()\n        exp_set = set()\n        exp_set.add(Bar(args=args))\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('\"num\": 3', s)\n        self.assertIn('\"start\": \"1998-0', s)\n        self.assertIn('Scheduled 1 task', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 1069,
        "end_line": 1088,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Bar.test_with_dict_argument#1069",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Bar",
        "signature": "test.execution_summary_test.Bar.test_with_dict_argument(self)",
        "snippet": "    def test_with_dict_argument(self):\n        \"\"\" Just test that it doesn't crash with dict params \"\"\"\n\n        args = dict(start=str(datetime.date(1998, 3, 23)), num=3)\n\n        class Bar(RunOnceTask):\n            args = luigi.DictParameter()\n\n        self.run_task(Bar(args=args))\n        d = self.summary_dict()\n        exp_set = set()\n        exp_set.add(Bar(args=args))\n        self.assertEqual(exp_set, d['completed'])\n        s = self.summary()\n        self.assertIn('\"num\": 3', s)\n        self.assertIn('\"start\": \"1998-0', s)\n        self.assertIn('Scheduled 1 task', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('00:00:00', s)\n        self.assertNotIn('\\n\\n\\n', s)",
        "begin_line": 1069,
        "end_line": 1088,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.ExecutionSummaryTest.test_status_with_task_retry#1093",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.ExecutionSummaryTest",
        "signature": "test.execution_summary_test.ExecutionSummaryTest.test_status_with_task_retry(self)",
        "snippet": "    def test_status_with_task_retry(self):\n        class Foo(luigi.Task):\n            run_count = 0\n\n            def run(self):\n                self.run_count += 1\n                if self.run_count == 1:\n                    raise ValueError()\n\n            def complete(self):\n                return self.run_count > 0\n\n        self.run_task(Foo())\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertEqual({Foo()}, d['ever_failed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('Scheduled 1 task', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('ever failed', s)\n        self.assertIn('\\n\\nThis progress looks :) because there were failed tasks but they all suceeded in a retry', s)",
        "begin_line": 1093,
        "end_line": 1119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.test_status_with_task_retry#1093",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.test_status_with_task_retry(self)",
        "snippet": "    def test_status_with_task_retry(self):\n        class Foo(luigi.Task):\n            run_count = 0\n\n            def run(self):\n                self.run_count += 1\n                if self.run_count == 1:\n                    raise ValueError()\n\n            def complete(self):\n                return self.run_count > 0\n\n        self.run_task(Foo())\n        self.run_task(Foo())\n        d = self.summary_dict()\n        self.assertEqual({Foo()}, d['completed'])\n        self.assertEqual({Foo()}, d['ever_failed'])\n        self.assertFalse(d['failed'])\n        self.assertFalse(d['upstream_failure'])\n        self.assertFalse(d['upstream_missing_dependency'])\n        self.assertFalse(d['run_by_other_worker'])\n        self.assertFalse(d['still_pending_ext'])\n        s = self.summary()\n        self.assertIn('Scheduled 1 task', s)\n        self.assertIn('Luigi Execution Summary', s)\n        self.assertNotIn('ever failed', s)\n        self.assertIn('\\n\\nThis progress looks :) because there were failed tasks but they all suceeded in a retry', s)",
        "begin_line": 1093,
        "end_line": 1119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.run#1097",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.run(self)",
        "snippet": "            def run(self):\n                self.run_count += 1\n                if self.run_count == 1:\n                    raise ValueError()",
        "begin_line": 1097,
        "end_line": 1100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.execution_summary_test.Foo.complete#1102",
        "src_path": "test/execution_summary_test.py",
        "class_name": "test.execution_summary_test.Foo",
        "signature": "test.execution_summary_test.Foo.complete(self)",
        "snippet": "            def complete(self):\n                return self.run_count > 0",
        "begin_line": 1102,
        "end_line": 1103,
        "comment": "",
        "is_bug": false
    }
]