[
    {
        "name": "tqdm.tests.tests_main._sh#9",
        "src_path": "tqdm/tests/tests_main.py",
        "class_name": "tqdm.tests.tests_main",
        "signature": "tqdm.tests.tests_main._sh(*cmd, **kwargs)",
        "snippet": "def _sh(*cmd, **kwargs):\n    return subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                            **kwargs).communicate()[0].decode('utf-8')",
        "begin_line": 9,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_main.test_main#16",
        "src_path": "tqdm/tests/tests_main.py",
        "class_name": "tqdm.tests.tests_main",
        "signature": "tqdm.tests.tests_main.test_main()",
        "snippet": "def test_main():\n    \"\"\"Test command line pipes\"\"\"\n    ls_out = _sh('ls').replace('\\r\\n', '\\n')\n    ls = subprocess.Popen('ls', stdout=subprocess.PIPE,\n                          stderr=subprocess.STDOUT)\n    res = _sh(sys.executable, '-c', 'from tqdm import main; main()',\n              stdin=ls.stdout, stderr=subprocess.STDOUT)\n    ls.wait()\n\n    # actual test:\n\n    assert (ls_out in res.replace('\\r\\n', '\\n'))\n\n    # semi-fake test which gets coverage:\n    _SYS = sys.stdin, sys.argv\n\n    with closing(StringIO()) as sys.stdin:\n        sys.argv = ['', '--desc', 'Test CLI-delims',\n                    '--ascii', 'True', '--delim', r'\\0', '--buf_size', '64']\n        sys.stdin.write('\\0'.join(map(str, _range(int(1e3)))))\n        sys.stdin.seek(0)\n        main()\n\n    IN_DATA_LIST = map(str, _range(int(1e3)))\n    sys.stdin = IN_DATA_LIST\n    sys.argv = ['', '--desc', 'Test CLI pipes',\n                '--ascii', 'True', '--unit_scale', 'True']\n    import tqdm.__main__  # NOQA\n\n    IN_DATA = '\\0'.join(IN_DATA_LIST)\n    with closing(StringIO()) as sys.stdin:\n        sys.stdin.write(IN_DATA)\n        sys.stdin.seek(0)\n        sys.argv = ['', '--ascii', '--bytes', '--unit_scale', 'False']\n        with closing(UnicodeIO()) as fp:\n            main(fp=fp)\n            assert (str(len(IN_DATA)) in fp.getvalue())\n\n    sys.stdin = IN_DATA_LIST\n    sys.argv = ['', '-ascii', '--unit_scale', 'False',\n                '--desc', 'Test CLI errors']\n    main()\n\n    sys.argv = ['', '-ascii', '-unit_scale', '--bad_arg_u_ment', 'foo']\n    try:\n        main()\n    except TqdmKeyError as e:\n        if 'bad_arg_u_ment' not in str(e):\n            raise\n    else:\n        raise TqdmKeyError('bad_arg_u_ment')\n\n    sys.argv = ['', '-ascii', '-unit_scale', 'invalid_bool_value']\n    try:\n        main()\n    except TqdmTypeError as e:\n        if 'invalid_bool_value' not in str(e):\n            raise\n    else:\n        raise TqdmTypeError('invalid_bool_value')\n\n    sys.argv = ['', '-ascii', '--total', 'invalid_int_value']\n    try:\n        main()\n    except TqdmTypeError as e:\n        if 'invalid_int_value' not in str(e):\n            raise\n    else:\n        raise TqdmTypeError('invalid_int_value')\n\n    for i in ('-h', '--help', '-v', '--version'):\n        sys.argv = ['', i]\n        try:\n            main()\n        except SystemExit:\n            pass\n\n    # clean up\n    sys.stdin, sys.argv = _SYS",
        "begin_line": 16,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    }
]