[
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_query_params#20",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_query_params(self)",
        "snippet": "    def test_url_concat_no_query_params(self):\n        url = url_concat(\n            \"https://localhost/path\",\n            [('y', 'y'), ('z', 'z')],\n        )\n        self.assertEqual(url, \"https://localhost/path?y=y&z=z\")",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_encode_args#27",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_encode_args(self)",
        "snippet": "    def test_url_concat_encode_args(self):\n        url = url_concat(\n            \"https://localhost/path\",\n            [('y', '/y'), ('z', 'z')],\n        )\n        self.assertEqual(url, \"https://localhost/path?y=%2Fy&z=z\")",
        "begin_line": 27,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_q#34",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_q(self)",
        "snippet": "    def test_url_concat_trailing_q(self):\n        url = url_concat(\n            \"https://localhost/path?\",\n            [('y', 'y'), ('z', 'z')],\n        )\n        self.assertEqual(url, \"https://localhost/path?y=y&z=z\")",
        "begin_line": 34,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_q_with_no_trailing_amp#41",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_q_with_no_trailing_amp(self)",
        "snippet": "    def test_url_concat_q_with_no_trailing_amp(self):\n        url = url_concat(\n            \"https://localhost/path?x\",\n            [('y', 'y'), ('z', 'z')],\n        )\n        self.assertEqual(url, \"https://localhost/path?x=&y=y&z=z\")",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_amp#48",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_trailing_amp(self)",
        "snippet": "    def test_url_concat_trailing_amp(self):\n        url = url_concat(\n            \"https://localhost/path?x&\",\n            [('y', 'y'), ('z', 'z')],\n        )\n        self.assertEqual(url, \"https://localhost/path?x=&y=y&z=z\")",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_mult_params#55",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_mult_params(self)",
        "snippet": "    def test_url_concat_mult_params(self):\n        url = url_concat(\n            \"https://localhost/path?a=1&b=2\",\n            [('y', 'y'), ('z', 'z')],\n        )\n        self.assertEqual(url, \"https://localhost/path?a=1&b=2&y=y&z=z\")",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_params#62",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_no_params(self)",
        "snippet": "    def test_url_concat_no_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n            [],\n        )\n        self.assertEqual(url, \"https://localhost/path?r=1&t=2\")",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_none_params#69",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_none_params(self)",
        "snippet": "    def test_url_concat_none_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n            None,\n        )\n        self.assertEqual(url, \"https://localhost/path?r=1&t=2\")",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_with_frag#76",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_with_frag(self)",
        "snippet": "    def test_url_concat_with_frag(self):\n        url = url_concat(\n            \"https://localhost/path#tab\",\n            [('y', 'y')],\n        )\n        self.assertEqual(url, \"https://localhost/path?y=y#tab\")",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_multi_same_params#83",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_multi_same_params(self)",
        "snippet": "    def test_url_concat_multi_same_params(self):\n        url = url_concat(\n            \"https://localhost/path\",\n            [('y', 'y1'), ('y', 'y2')],\n        )\n        self.assertEqual(url, \"https://localhost/path?y=y1&y=y2\")",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_multi_same_query_params#90",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_multi_same_query_params(self)",
        "snippet": "    def test_url_concat_multi_same_query_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&r=2\",\n            [('y', 'y')],\n        )\n        self.assertEqual(url, \"https://localhost/path?r=1&r=2&y=y\")",
        "begin_line": 90,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_dict_params#97",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.TestUrlConcat",
        "signature": "tornado.test.httputil_test.TestUrlConcat.test_url_concat_dict_params(self)",
        "snippet": "    def test_url_concat_dict_params(self):\n        url = url_concat(\n            \"https://localhost/path\",\n            dict(y='y'),\n        )\n        self.assertEqual(url, \"https://localhost/path?y=y\")",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_file_upload#106",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_file_upload(self)",
        "snippet": "    def test_file_upload(self):\n        data = b\"\"\"\\\n--1234\nContent-Disposition: form-data; name=\"files\"; filename=\"ab.txt\"\n\nFoo\n--1234--\"\"\".replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        parse_multipart_form_data(b\"1234\", data, args, files)\n        file = files[\"files\"][0]\n        self.assertEqual(file[\"filename\"], \"ab.txt\")\n        self.assertEqual(file[\"body\"], b\"Foo\")",
        "begin_line": 106,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_unquoted_names#120",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_unquoted_names(self)",
        "snippet": "    def test_unquoted_names(self):\n        # quotes are optional unless special characters are present\n        data = b\"\"\"\\\n--1234\nContent-Disposition: form-data; name=files; filename=ab.txt\n\nFoo\n--1234--\"\"\".replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        parse_multipart_form_data(b\"1234\", data, args, files)\n        file = files[\"files\"][0]\n        self.assertEqual(file[\"filename\"], \"ab.txt\")\n        self.assertEqual(file[\"body\"], b\"Foo\")",
        "begin_line": 120,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_special_filenames#135",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_special_filenames(self)",
        "snippet": "    def test_special_filenames(self):\n        filenames = ['a;b.txt',\n                     'a\"b.txt',\n                     'a\";b.txt',\n                     'a;\"b.txt',\n                     'a\";\";.txt',\n                     'a\\\\\"b.txt',\n                     'a\\\\b.txt',\n                     ]\n        for filename in filenames:\n            logging.debug(\"trying filename %r\", filename)\n            data = \"\"\"\\\n--1234\nContent-Disposition: form-data; name=\"files\"; filename=\"%s\"\n\nFoo\n--1234--\"\"\" % filename.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')\n            data = utf8(data.replace(\"\\n\", \"\\r\\n\"))\n            args = {}\n            files = {}\n            parse_multipart_form_data(b\"1234\", data, args, files)\n            file = files[\"files\"][0]\n            self.assertEqual(file[\"filename\"], filename)\n            self.assertEqual(file[\"body\"], b\"Foo\")",
        "begin_line": 135,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_boundary_starts_and_ends_with_quotes#160",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_boundary_starts_and_ends_with_quotes(self)",
        "snippet": "    def test_boundary_starts_and_ends_with_quotes(self):\n        data = b'''\\\n--1234\nContent-Disposition: form-data; name=\"files\"; filename=\"ab.txt\"\n\nFoo\n--1234--'''.replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        parse_multipart_form_data(b'\"1234\"', data, args, files)\n        file = files[\"files\"][0]\n        self.assertEqual(file[\"filename\"], \"ab.txt\")\n        self.assertEqual(file[\"body\"], b\"Foo\")",
        "begin_line": 160,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_missing_headers#174",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_missing_headers(self)",
        "snippet": "    def test_missing_headers(self):\n        data = b'''\\\n--1234\n\nFoo\n--1234--'''.replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        with ExpectLog(gen_log, \"multipart/form-data missing headers\"):\n            parse_multipart_form_data(b\"1234\", data, args, files)\n        self.assertEqual(files, {})",
        "begin_line": 174,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_invalid_content_disposition#186",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_invalid_content_disposition(self)",
        "snippet": "    def test_invalid_content_disposition(self):\n        data = b'''\\\n--1234\nContent-Disposition: invalid; name=\"files\"; filename=\"ab.txt\"\n\nFoo\n--1234--'''.replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        with ExpectLog(gen_log, \"Invalid multipart/form-data\"):\n            parse_multipart_form_data(b\"1234\", data, args, files)\n        self.assertEqual(files, {})",
        "begin_line": 186,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_line_does_not_end_with_correct_line_break#199",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_line_does_not_end_with_correct_line_break(self)",
        "snippet": "    def test_line_does_not_end_with_correct_line_break(self):\n        data = b'''\\\n--1234\nContent-Disposition: form-data; name=\"files\"; filename=\"ab.txt\"\n\nFoo--1234--'''.replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        with ExpectLog(gen_log, \"Invalid multipart/form-data\"):\n            parse_multipart_form_data(b\"1234\", data, args, files)\n        self.assertEqual(files, {})",
        "begin_line": 199,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_content_disposition_header_without_name_parameter#211",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_content_disposition_header_without_name_parameter(self)",
        "snippet": "    def test_content_disposition_header_without_name_parameter(self):\n        data = b\"\"\"\\\n--1234\nContent-Disposition: form-data; filename=\"ab.txt\"\n\nFoo\n--1234--\"\"\".replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        with ExpectLog(gen_log, \"multipart/form-data value missing name\"):\n            parse_multipart_form_data(b\"1234\", data, args, files)\n        self.assertEqual(files, {})",
        "begin_line": 211,
        "end_line": 222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.MultipartFormDataTest.test_data_after_final_boundary#224",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.MultipartFormDataTest",
        "signature": "tornado.test.httputil_test.MultipartFormDataTest.test_data_after_final_boundary(self)",
        "snippet": "    def test_data_after_final_boundary(self):\n        # The spec requires that data after the final boundary be ignored.\n        # http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\n        # In practice, some libraries include an extra CRLF after the boundary.\n        data = b\"\"\"\\\n--1234\nContent-Disposition: form-data; name=\"files\"; filename=\"ab.txt\"\n\nFoo\n--1234--\n\"\"\".replace(b\"\\n\", b\"\\r\\n\")\n        args = {}\n        files = {}\n        parse_multipart_form_data(b\"1234\", data, args, files)\n        file = files[\"files\"][0]\n        self.assertEqual(file[\"filename\"], \"ab.txt\")\n        self.assertEqual(file[\"body\"], b\"Foo\")",
        "begin_line": 224,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_multi_line#244",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_multi_line(self)",
        "snippet": "    def test_multi_line(self):\n        # Lines beginning with whitespace are appended to the previous line\n        # with any leading whitespace replaced by a single space.\n        # Note that while multi-line headers are a part of the HTTP spec,\n        # their use is strongly discouraged.\n        data = \"\"\"\\\nFoo: bar\n baz\nAsdf: qwer\n\\tzxcv\nFoo: even\n     more\n     lines\n\"\"\".replace(\"\\n\", \"\\r\\n\")\n        headers = HTTPHeaders.parse(data)\n        self.assertEqual(headers[\"asdf\"], \"qwer zxcv\")\n        self.assertEqual(headers.get_list(\"asdf\"), [\"qwer zxcv\"])\n        self.assertEqual(headers[\"Foo\"], \"bar baz,even more lines\")\n        self.assertEqual(headers.get_list(\"foo\"), [\"bar baz\", \"even more lines\"])\n        self.assertEqual(sorted(list(headers.get_all())),\n                         [(\"Asdf\", \"qwer zxcv\"),\n                          (\"Foo\", \"bar baz\"),\n                          (\"Foo\", \"even more lines\")])",
        "begin_line": 244,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_unicode_newlines#268",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_unicode_newlines(self)",
        "snippet": "    def test_unicode_newlines(self):\n        # Ensure that only \\r\\n is recognized as a header separator, and not\n        # the other newline-like unicode characters.\n        # Characters that are likely to be problematic can be found in\n        # http://unicode.org/standard/reports/tr13/tr13-5.html\n        # and cpython's unicodeobject.c (which defines the implementation\n        # of unicode_type.splitlines(), and uses a different list than TR13).\n        newlines = [\n            u'\\u001b',  # VERTICAL TAB\n            u'\\u001c',  # FILE SEPARATOR\n            u'\\u001d',  # GROUP SEPARATOR\n            u'\\u001e',  # RECORD SEPARATOR\n            u'\\u0085',  # NEXT LINE\n            u'\\u2028',  # LINE SEPARATOR\n            u'\\u2029',  # PARAGRAPH SEPARATOR\n        ]\n        for newline in newlines:\n            # Try the utf8 and latin1 representations of each newline\n            for encoding in ['utf8', 'latin1']:\n                try:\n                    try:\n                        encoded = newline.encode(encoding)\n                    except UnicodeEncodeError:\n                        # Some chars cannot be represented in latin1\n                        continue\n                    data = b'Cookie: foo=' + encoded + b'bar'\n                    # parse() wants a native_str, so decode through latin1\n                    # in the same way the real parser does.\n                    headers = HTTPHeaders.parse(\n                        native_str(data.decode('latin1')))\n                    expected = [('Cookie', 'foo=' +\n                                 native_str(encoded.decode('latin1')) + 'bar')]\n                    self.assertEqual(\n                        expected, list(headers.get_all()))\n                except Exception:\n                    gen_log.warning(\"failed while trying %r in %s\",\n                                    newline, encoding)\n                    raise",
        "begin_line": 268,
        "end_line": 305,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_optional_cr#307",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_optional_cr(self)",
        "snippet": "    def test_optional_cr(self):\n        # Both CRLF and LF should be accepted as separators. CR should not be\n        # part of the data when followed by LF, but it is a normal char\n        # otherwise (or should bare CR be an error?)\n        headers = HTTPHeaders.parse(\n            'CRLF: crlf\\r\\nLF: lf\\nCR: cr\\rMore: more\\r\\n')\n        self.assertEqual(sorted(headers.get_all()),\n                         [('Cr', 'cr\\rMore: more'),\n                          ('Crlf', 'crlf'),\n                          ('Lf', 'lf'),\n                          ])",
        "begin_line": 307,
        "end_line": 317,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_copy#319",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        all_pairs = [('A', '1'), ('A', '2'), ('B', 'c')]\n        h1 = HTTPHeaders()\n        for k, v in all_pairs:\n            h1.add(k, v)\n        h2 = h1.copy()\n        h3 = copy.copy(h1)\n        h4 = copy.deepcopy(h1)\n        for headers in [h1, h2, h3, h4]:\n            # All the copies are identical, no matter how they were\n            # constructed.\n            self.assertEqual(list(sorted(headers.get_all())), all_pairs)\n        for headers in [h2, h3, h4]:\n            # Neither the dict or its member lists are reused.\n            self.assertIsNot(headers, h1)\n            self.assertIsNot(headers.get_list('A'), h1.get_list('A'))",
        "begin_line": 319,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_pickle_roundtrip#336",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_pickle_roundtrip(self)",
        "snippet": "    def test_pickle_roundtrip(self):\n        headers = HTTPHeaders()\n        headers.add('Set-Cookie', 'a=b')\n        headers.add('Set-Cookie', 'c=d')\n        headers.add('Content-Type', 'text/html')\n        pickled = pickle.dumps(headers)\n        unpickled = pickle.loads(pickled)\n        self.assertEqual(sorted(headers.get_all()), sorted(unpickled.get_all()))\n        self.assertEqual(sorted(headers.items()), sorted(unpickled.items()))",
        "begin_line": 336,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_setdefault#346",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_setdefault(self)",
        "snippet": "    def test_setdefault(self):\n        headers = HTTPHeaders()\n        headers['foo'] = 'bar'\n        # If a value is present, setdefault returns it without changes.\n        self.assertEqual(headers.setdefault('foo', 'baz'), 'bar')\n        self.assertEqual(headers['foo'], 'bar')\n        # If a value is not present, setdefault sets it for future use.\n        self.assertEqual(headers.setdefault('quux', 'xyzzy'), 'xyzzy')\n        self.assertEqual(headers['quux'], 'xyzzy')\n        self.assertEqual(sorted(headers.get_all()), [('Foo', 'bar'), ('Quux', 'xyzzy')])",
        "begin_line": 346,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPHeadersTest.test_string#357",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPHeadersTest",
        "signature": "tornado.test.httputil_test.HTTPHeadersTest.test_string(self)",
        "snippet": "    def test_string(self):\n        headers = HTTPHeaders()\n        headers.add(\"Foo\", \"1\")\n        headers.add(\"Foo\", \"2\")\n        headers.add(\"Foo\", \"3\")\n        headers2 = HTTPHeaders.parse(str(headers))\n        self.assertEquals(headers, headers2)",
        "begin_line": 357,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.FormatTimestampTest.check#371",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.FormatTimestampTest",
        "signature": "tornado.test.httputil_test.FormatTimestampTest.check(self, value)",
        "snippet": "    def check(self, value):\n        self.assertEqual(format_timestamp(value), self.EXPECTED)",
        "begin_line": 371,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.FormatTimestampTest.test_unix_time_float#374",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.FormatTimestampTest",
        "signature": "tornado.test.httputil_test.FormatTimestampTest.test_unix_time_float(self)",
        "snippet": "    def test_unix_time_float(self):\n        self.check(self.TIMESTAMP)",
        "begin_line": 374,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.FormatTimestampTest.test_unix_time_int#377",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.FormatTimestampTest",
        "signature": "tornado.test.httputil_test.FormatTimestampTest.test_unix_time_int(self)",
        "snippet": "    def test_unix_time_int(self):\n        self.check(int(self.TIMESTAMP))",
        "begin_line": 377,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.FormatTimestampTest.test_struct_time#380",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.FormatTimestampTest",
        "signature": "tornado.test.httputil_test.FormatTimestampTest.test_struct_time(self)",
        "snippet": "    def test_struct_time(self):\n        self.check(time.gmtime(self.TIMESTAMP))",
        "begin_line": 380,
        "end_line": 381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.FormatTimestampTest.test_time_tuple#383",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.FormatTimestampTest",
        "signature": "tornado.test.httputil_test.FormatTimestampTest.test_time_tuple(self)",
        "snippet": "    def test_time_tuple(self):\n        tup = tuple(time.gmtime(self.TIMESTAMP))\n        self.assertEqual(9, len(tup))\n        self.check(tup)",
        "begin_line": 383,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.FormatTimestampTest.test_datetime#388",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.FormatTimestampTest",
        "signature": "tornado.test.httputil_test.FormatTimestampTest.test_datetime(self)",
        "snippet": "    def test_datetime(self):\n        self.check(datetime.datetime.utcfromtimestamp(self.TIMESTAMP))",
        "begin_line": 388,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPServerRequestTest.test_default_constructor#395",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPServerRequestTest",
        "signature": "tornado.test.httputil_test.HTTPServerRequestTest.test_default_constructor(self)",
        "snippet": "    def test_default_constructor(self):\n        # All parameters are formally optional, but uri is required\n        # (and has been for some time).  This test ensures that no\n        # more required parameters slip in.\n        HTTPServerRequest(uri='/')",
        "begin_line": 395,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.HTTPServerRequestTest.test_body_is_a_byte_string#401",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.HTTPServerRequestTest",
        "signature": "tornado.test.httputil_test.HTTPServerRequestTest.test_body_is_a_byte_string(self)",
        "snippet": "    def test_body_is_a_byte_string(self):\n        requets = HTTPServerRequest(uri='/')\n        self.assertIsInstance(requets.body, bytes)",
        "begin_line": 401,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.ParseRequestStartLineTest.test_parse_request_start_line#411",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.ParseRequestStartLineTest",
        "signature": "tornado.test.httputil_test.ParseRequestStartLineTest.test_parse_request_start_line(self)",
        "snippet": "    def test_parse_request_start_line(self):\n        start_line = \" \".join([self.METHOD, self.PATH, self.VERSION])\n        parsed_start_line = parse_request_start_line(start_line)\n        self.assertEqual(parsed_start_line.method, self.METHOD)\n        self.assertEqual(parsed_start_line.path, self.PATH)\n        self.assertEqual(parsed_start_line.version, self.VERSION)",
        "begin_line": 411,
        "end_line": 416,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.ParseCookieTest.test_python_cookies#422",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.ParseCookieTest",
        "signature": "tornado.test.httputil_test.ParseCookieTest.test_python_cookies(self)",
        "snippet": "    def test_python_cookies(self):\n        \"\"\"\n        Test cases copied from Python's Lib/test/test_http_cookies.py\n        \"\"\"\n        self.assertEqual(parse_cookie('chips=ahoy; vienna=finger'), {'chips': 'ahoy', 'vienna': 'finger'})\n        # Here parse_cookie() differs from Python's cookie parsing in that it\n        # treats all semicolons as delimiters, even within quotes.\n        self.assertEqual(\n            parse_cookie('keebler=\"E=mc2; L=\\\\\"Loves\\\\\"; fudge=\\\\012;\"'),\n            {'keebler': '\"E=mc2', 'L': '\\\\\"Loves\\\\\"', 'fudge': '\\\\012', '': '\"'}\n        )\n        # Illegal cookies that have an '=' char in an unquoted value.\n        self.assertEqual(parse_cookie('keebler=E=mc2'), {'keebler': 'E=mc2'})\n        # Cookies with ':' character in their name.\n        self.assertEqual(parse_cookie('key:term=value:term'), {'key:term': 'value:term'})\n        # Cookies with '[' and ']'.\n        self.assertEqual(parse_cookie('a=b; c=[; d=r; f=h'), {'a': 'b', 'c': '[', 'd': 'r', 'f': 'h'})",
        "begin_line": 422,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.ParseCookieTest.test_cookie_edgecases#440",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.ParseCookieTest",
        "signature": "tornado.test.httputil_test.ParseCookieTest.test_cookie_edgecases(self)",
        "snippet": "    def test_cookie_edgecases(self):\n        # Cookies that RFC6265 allows.\n        self.assertEqual(parse_cookie('a=b; Domain=example.com'), {'a': 'b', 'Domain': 'example.com'})\n        # parse_cookie() has historically kept only the last cookie with the\n        # same name.\n        self.assertEqual(parse_cookie('a=b; h=i; a=c'), {'a': 'c', 'h': 'i'})",
        "begin_line": 440,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httputil_test.ParseCookieTest.test_invalid_cookies#447",
        "src_path": "tornado/test/httputil_test.py",
        "class_name": "tornado.test.httputil_test.ParseCookieTest",
        "signature": "tornado.test.httputil_test.ParseCookieTest.test_invalid_cookies(self)",
        "snippet": "    def test_invalid_cookies(self):\n        \"\"\"\n        Cookie strings that go against RFC6265 but browsers will send if set\n        via document.cookie.\n        \"\"\"\n        # Chunks without an equals sign appear as unnamed values per\n        # https://bugzilla.mozilla.org/show_bug.cgi?id=169091\n        self.assertIn('django_language', parse_cookie('abc=def; unnamed; django_language=en').keys())\n        # Even a double quote may be an unamed value.\n        self.assertEqual(parse_cookie('a=b; \"; c=d'), {'a': 'b', '': '\"', 'c': 'd'})\n        # Spaces in names and values, and an equals sign in values.\n        self.assertEqual(parse_cookie('a b c=d e = f; gh=i'), {'a b c': 'd e = f', 'gh': 'i'})\n        # More characters the spec forbids.\n        self.assertEqual(parse_cookie('a   b,c<>@:/[]?{}=d  \"  =e,f g'), {'a   b,c<>@:/[]?{}': 'd  \"  =e,f g'})\n        # Unicode characters. The spec only allows ASCII.\n        self.assertEqual(parse_cookie('saint=Andr\u00e9 Bessette'), {'saint': native_str('Andr\u00e9 Bessette')})\n        # Browsers don't send extra whitespace or semicolons in Cookie headers,\n        # but parse_cookie() should parse whitespace the same way\n        # document.cookie parses whitespace.\n        self.assertEqual(parse_cookie('  =  b  ;  ;  =  ;   c  =  ;  '), {'': 'b', 'c': ''})",
        "begin_line": 447,
        "end_line": 466,
        "comment": "",
        "is_bug": false
    }
]