[
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_init_dict#18",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_init_dict(self)",
        "snippet": "    def test_init_dict(self):\n        seq = {'red': 1, 'black': 3}\n        d = CaselessDict(seq)\n        self.assertEqual(d['red'], 1)\n        self.assertEqual(d['black'], 3)",
        "begin_line": 18,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_init_pair_sequence#24",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_init_pair_sequence(self)",
        "snippet": "    def test_init_pair_sequence(self):\n        seq = (('red', 1), ('black', 3))\n        d = CaselessDict(seq)\n        self.assertEqual(d['red'], 1)\n        self.assertEqual(d['black'], 3)",
        "begin_line": 24,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_init_mapping#30",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_init_mapping(self)",
        "snippet": "    def test_init_mapping(self):\n        class MyMapping(Mapping):\n            def __init__(self, **kwargs):\n                self._d = kwargs\n\n            def __getitem__(self, key):\n                return self._d[key]\n\n            def __iter__(self):\n                return iter(self._d)\n\n            def __len__(self):\n                return len(self._d)\n\n        seq = MyMapping(red=1, black=3)\n        d = CaselessDict(seq)\n        self.assertEqual(d['red'], 1)\n        self.assertEqual(d['black'], 3)",
        "begin_line": 30,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMapping.test_init_mapping#30",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMapping",
        "signature": "tests.test_utils_datatypes.MyMapping.test_init_mapping(self)",
        "snippet": "    def test_init_mapping(self):\n        class MyMapping(Mapping):\n            def __init__(self, **kwargs):\n                self._d = kwargs\n\n            def __getitem__(self, key):\n                return self._d[key]\n\n            def __iter__(self):\n                return iter(self._d)\n\n            def __len__(self):\n                return len(self._d)\n\n        seq = MyMapping(red=1, black=3)\n        d = CaselessDict(seq)\n        self.assertEqual(d['red'], 1)\n        self.assertEqual(d['black'], 3)",
        "begin_line": 30,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMapping.__init__#32",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMapping",
        "signature": "tests.test_utils_datatypes.MyMapping.__init__(self, **kwargs)",
        "snippet": "            def __init__(self, **kwargs):\n                self._d = kwargs",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMapping.__getitem__#35",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMapping",
        "signature": "tests.test_utils_datatypes.MyMapping.__getitem__(self, key)",
        "snippet": "            def __getitem__(self, key):\n                return self._d[key]",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMapping.__iter__#38",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMapping",
        "signature": "tests.test_utils_datatypes.MyMapping.__iter__(self)",
        "snippet": "            def __iter__(self):\n                return iter(self._d)",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMapping.__len__#41",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMapping",
        "signature": "tests.test_utils_datatypes.MyMapping.__len__(self)",
        "snippet": "            def __len__(self):\n                return len(self._d)",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_init_mutable_mapping#49",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_init_mutable_mapping(self)",
        "snippet": "    def test_init_mutable_mapping(self):\n        class MyMutableMapping(MutableMapping):\n            def __init__(self, **kwargs):\n                self._d = kwargs\n\n            def __getitem__(self, key):\n                return self._d[key]\n\n            def __setitem__(self, key, value):\n                self._d[key] = value\n\n            def __delitem__(self, key):\n                del self._d[key]\n\n            def __iter__(self):\n                return iter(self._d)\n\n            def __len__(self):\n                return len(self._d)\n\n        seq = MyMutableMapping(red=1, black=3)\n        d = CaselessDict(seq)\n        self.assertEqual(d['red'], 1)\n        self.assertEqual(d['black'], 3)",
        "begin_line": 49,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.test_init_mutable_mapping#49",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.test_init_mutable_mapping(self)",
        "snippet": "    def test_init_mutable_mapping(self):\n        class MyMutableMapping(MutableMapping):\n            def __init__(self, **kwargs):\n                self._d = kwargs\n\n            def __getitem__(self, key):\n                return self._d[key]\n\n            def __setitem__(self, key, value):\n                self._d[key] = value\n\n            def __delitem__(self, key):\n                del self._d[key]\n\n            def __iter__(self):\n                return iter(self._d)\n\n            def __len__(self):\n                return len(self._d)\n\n        seq = MyMutableMapping(red=1, black=3)\n        d = CaselessDict(seq)\n        self.assertEqual(d['red'], 1)\n        self.assertEqual(d['black'], 3)",
        "begin_line": 49,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.__init__#51",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.__init__(self, **kwargs)",
        "snippet": "            def __init__(self, **kwargs):\n                self._d = kwargs",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.__getitem__#54",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.__getitem__(self, key)",
        "snippet": "            def __getitem__(self, key):\n                return self._d[key]",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.__setitem__#57",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.__setitem__(self, key, value)",
        "snippet": "            def __setitem__(self, key, value):\n                self._d[key] = value",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.__delitem__#60",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.__delitem__(self, key)",
        "snippet": "            def __delitem__(self, key):\n                del self._d[key]",
        "begin_line": 60,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.__iter__#63",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.__iter__(self)",
        "snippet": "            def __iter__(self):\n                return iter(self._d)",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyMutableMapping.__len__#66",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyMutableMapping",
        "signature": "tests.test_utils_datatypes.MyMutableMapping.__len__(self)",
        "snippet": "            def __len__(self):\n                return len(self._d)",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_caseless#74",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_caseless(self)",
        "snippet": "    def test_caseless(self):\n        d = CaselessDict()\n        d['key_Lower'] = 1\n        self.assertEqual(d['KEy_loWer'], 1)\n        self.assertEqual(d.get('KEy_loWer'), 1)\n\n        d['KEY_LOWER'] = 3\n        self.assertEqual(d['key_Lower'], 3)\n        self.assertEqual(d.get('key_Lower'), 3)",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_delete#84",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_delete(self)",
        "snippet": "    def test_delete(self):\n        d = CaselessDict({'key_lower': 1})\n        del d['key_LOWER']\n        self.assertRaises(KeyError, d.__getitem__, 'key_LOWER')\n        self.assertRaises(KeyError, d.__getitem__, 'key_lower')",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_getdefault#90",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_getdefault(self)",
        "snippet": "    def test_getdefault(self):\n        d = CaselessDict()\n        self.assertEqual(d.get('c', 5), 5)\n        d['c'] = 10\n        self.assertEqual(d.get('c', 5), 10)",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_setdefault#96",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_setdefault(self)",
        "snippet": "    def test_setdefault(self):\n        d = CaselessDict({'a': 1, 'b': 2})\n\n        r = d.setdefault('A', 5)\n        self.assertEqual(r, 1)\n        self.assertEqual(d['A'], 1)\n\n        r = d.setdefault('c', 5)\n        self.assertEqual(r, 5)\n        self.assertEqual(d['C'], 5)",
        "begin_line": 96,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_fromkeys#107",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_fromkeys(self)",
        "snippet": "    def test_fromkeys(self):\n        keys = ('a', 'b')\n\n        d = CaselessDict.fromkeys(keys)\n        self.assertEqual(d['A'], None)\n        self.assertEqual(d['B'], None)\n\n        d = CaselessDict.fromkeys(keys, 1)\n        self.assertEqual(d['A'], 1)\n        self.assertEqual(d['B'], 1)\n\n        instance = CaselessDict()\n        d = instance.fromkeys(keys)\n        self.assertEqual(d['A'], None)\n        self.assertEqual(d['B'], None)\n\n        d = instance.fromkeys(keys, 1)\n        self.assertEqual(d['A'], 1)\n        self.assertEqual(d['B'], 1)",
        "begin_line": 107,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_contains#127",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_contains(self)",
        "snippet": "    def test_contains(self):\n        d = CaselessDict()\n        d['a'] = 1\n        assert 'a' in d",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_pop#132",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_pop(self)",
        "snippet": "    def test_pop(self):\n        d = CaselessDict()\n        d['a'] = 1\n        self.assertEqual(d.pop('A'), 1)\n        self.assertRaises(KeyError, d.pop, 'A')",
        "begin_line": 132,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_normkey#138",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_normkey(self)",
        "snippet": "    def test_normkey(self):\n        class MyDict(CaselessDict):\n            def normkey(self, key):\n                return key.title()\n\n        d = MyDict()\n        d['key-one'] = 2\n        self.assertEqual(list(d.keys()), ['Key-One'])",
        "begin_line": 138,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyDict.test_normkey#138",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyDict",
        "signature": "tests.test_utils_datatypes.MyDict.test_normkey(self)",
        "snippet": "    def test_normkey(self):\n        class MyDict(CaselessDict):\n            def normkey(self, key):\n                return key.title()\n\n        d = MyDict()\n        d['key-one'] = 2\n        self.assertEqual(list(d.keys()), ['Key-One'])",
        "begin_line": 138,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyDict.normkey#140",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyDict",
        "signature": "tests.test_utils_datatypes.MyDict.normkey(self, key)",
        "snippet": "            def normkey(self, key):\n                return key.title()",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_normvalue#147",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_normvalue(self)",
        "snippet": "    def test_normvalue(self):\n        class MyDict(CaselessDict):\n            def normvalue(self, value):\n                if value is not None:\n                    return value + 1\n\n        d = MyDict({'key': 1})\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict()\n        d['key'] = 1\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict()\n        d.setdefault('key', 1)\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict()\n        d.update({'key': 1})\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict.fromkeys(('key',), 1)\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)",
        "begin_line": 147,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyDict.test_normvalue#147",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyDict",
        "signature": "tests.test_utils_datatypes.MyDict.test_normvalue(self)",
        "snippet": "    def test_normvalue(self):\n        class MyDict(CaselessDict):\n            def normvalue(self, value):\n                if value is not None:\n                    return value + 1\n\n        d = MyDict({'key': 1})\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict()\n        d['key'] = 1\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict()\n        d.setdefault('key', 1)\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict()\n        d.update({'key': 1})\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)\n\n        d = MyDict.fromkeys(('key',), 1)\n        self.assertEqual(d['key'], 2)\n        self.assertEqual(d.get('key'), 2)",
        "begin_line": 147,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.MyDict.normvalue#149",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.MyDict",
        "signature": "tests.test_utils_datatypes.MyDict.normvalue(self, value)",
        "snippet": "            def normvalue(self, value):\n                if value is not None:\n                    return value + 1",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.CaselessDictTest.test_copy#176",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.CaselessDictTest",
        "signature": "tests.test_utils_datatypes.CaselessDictTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        h1 = CaselessDict({'header1': 'value'})\n        h2 = copy.copy(h1)\n        self.assertEqual(h1, h2)\n        self.assertEqual(h1.get('header1'), h2.get('header1'))\n        assert isinstance(h2, CaselessDict)",
        "begin_line": 176,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_list#186",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_list(self)",
        "snippet": "    def test_list(self):\n        seq = [1, 2, 3]\n        d = SequenceExclude(seq)\n        self.assertIn(0, d)\n        self.assertIn(4, d)\n        self.assertNotIn(2, d)",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_range#193",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_range(self)",
        "snippet": "    def test_range(self):\n        seq = range(10, 20)\n        d = SequenceExclude(seq)\n        self.assertIn(5, d)\n        self.assertIn(20, d)\n        self.assertNotIn(15, d)",
        "begin_line": 193,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_six_range#200",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_six_range(self)",
        "snippet": "    def test_six_range(self):\n        import six.moves\n        seq = six.moves.range(10**3, 10**6)\n        d = SequenceExclude(seq)\n        self.assertIn(10**2, d)\n        self.assertIn(10**7, d)\n        self.assertNotIn(10**4, d)",
        "begin_line": 200,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_range_step#208",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_range_step(self)",
        "snippet": "    def test_range_step(self):\n        seq = range(10, 20, 3)\n        d = SequenceExclude(seq)\n        are_not_in = [v for v in range(10, 20, 3) if v in d]\n        self.assertEqual([], are_not_in)\n\n        are_not_in = [v for v in range(10, 20) if v in d]\n        self.assertEqual([11, 12, 14, 15, 17, 18], are_not_in)",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_string_seq#217",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_string_seq(self)",
        "snippet": "    def test_string_seq(self):\n        seq = \"cde\"\n        d = SequenceExclude(seq)\n        chars = \"\".join(v for v in \"abcdefg\" if v in d)\n        self.assertEqual(\"abfg\", chars)",
        "begin_line": 217,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_stringset_seq#223",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_stringset_seq(self)",
        "snippet": "    def test_stringset_seq(self):\n        seq = set(\"cde\")\n        d = SequenceExclude(seq)\n        chars = \"\".join(v for v in \"abcdefg\" if v in d)\n        self.assertEqual(\"abfg\", chars)",
        "begin_line": 223,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.SequenceExcludeTest.test_set#229",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.SequenceExcludeTest",
        "signature": "tests.test_utils_datatypes.SequenceExcludeTest.test_set(self)",
        "snippet": "    def test_set(self):\n        \"\"\"Anything that is not in the supplied sequence will evaluate as 'in' the container.\"\"\"\n        seq = set([-3, \"test\", 1.1])\n        d = SequenceExclude(seq)\n        self.assertIn(0, d)\n        self.assertIn(\"foo\", d)\n        self.assertIn(3.14, d)\n        self.assertIn(set(\"bar\"), d)\n\n        # supplied sequence is a set, so checking for list (non)inclusion fails\n        self.assertRaises(TypeError, (0, 1, 2) in d)\n        self.assertRaises(TypeError, d.__contains__, ['a', 'b', 'c'])\n\n        for v in [-3, \"test\", 1.1]:\n            self.assertNotIn(v, d)",
        "begin_line": 229,
        "end_line": 243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.LocalCacheTest.test_cache_with_limit#248",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.LocalCacheTest",
        "signature": "tests.test_utils_datatypes.LocalCacheTest.test_cache_with_limit(self)",
        "snippet": "    def test_cache_with_limit(self):\n        cache = LocalCache(limit=2)\n        cache['a'] = 1\n        cache['b'] = 2\n        cache['c'] = 3\n        self.assertEqual(len(cache), 2)\n        self.assertNotIn('a', cache)\n        self.assertIn('b', cache)\n        self.assertIn('c', cache)\n        self.assertEqual(cache['b'], 2)\n        self.assertEqual(cache['c'], 3)",
        "begin_line": 248,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_datatypes.LocalCacheTest.test_cache_without_limit#260",
        "src_path": "tests/test_utils_datatypes.py",
        "class_name": "tests.test_utils_datatypes.LocalCacheTest",
        "signature": "tests.test_utils_datatypes.LocalCacheTest.test_cache_without_limit(self)",
        "snippet": "    def test_cache_without_limit(self):\n        max = 10**4\n        cache = LocalCache()\n        for x in range(max):\n            cache[str(x)] = x\n        self.assertEqual(len(cache), max)\n        for x in range(max):\n            self.assertIn(str(x), cache)\n            self.assertEqual(cache[str(x)], x)",
        "begin_line": 260,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    }
]