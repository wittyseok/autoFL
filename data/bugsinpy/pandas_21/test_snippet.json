[
    {
        "name": "pandas.tests.series.conftest.string_series#7",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.string_series()",
        "snippet": "def string_series():\n    \"\"\"\n    Fixture for Series of floats with Index of unique strings\n    \"\"\"\n    s = tm.makeStringSeries()\n    s.name = \"series\"\n    return s",
        "begin_line": 7,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.object_series#17",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.object_series()",
        "snippet": "def object_series():\n    \"\"\"\n    Fixture for Series of dtype object with Index of unique strings\n    \"\"\"\n    s = tm.makeObjectSeries()\n    s.name = \"objects\"\n    return s",
        "begin_line": 17,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars.test_getitem_regression#19",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars.test_getitem_regression(self)",
        "snippet": "    def test_getitem_regression(self):\n        ser = Series(range(5), index=list(range(5)))\n        result = ser[list(range(5))]\n        tm.assert_series_equal(result, ser)",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars.test_getitem_pydatetime_tz#28",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars.test_getitem_pydatetime_tz(self, tzstr)",
        "snippet": "    def test_getitem_pydatetime_tz(self, tzstr):\n        tz = timezones.maybe_get_tz(tzstr)\n\n        index = date_range(\n            start=\"2012-12-24 16:00\", end=\"2012-12-24 18:00\", freq=\"H\", tz=tzstr\n        )\n        ts = Series(index=index, data=index.hour)\n        time_pandas = Timestamp(\"2012-12-24 17:00\", tz=tzstr)\n\n        dt = datetime(2012, 12, 24, 17, 0)\n        time_datetime = conversion.localize_pydatetime(dt, tz)\n        assert ts[time_pandas] == ts[time_datetime]",
        "begin_line": 28,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars.test_string_index_alias_tz_aware#42",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemScalars.test_string_index_alias_tz_aware(self, tz)",
        "snippet": "    def test_string_index_alias_tz_aware(self, tz):\n        rng = date_range(\"1/1/2000\", periods=10, tz=tz)\n        ser = Series(np.random.randn(len(rng)), index=rng)\n\n        result = ser[\"1/3/2000\"]\n        tm.assert_almost_equal(result, ser[2])",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemSlices.test_getitem_slice_2d#51",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemSlices",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemSlices.test_getitem_slice_2d(self, datetime_series)",
        "snippet": "    def test_getitem_slice_2d(self, datetime_series):\n        # GH#30588 multi-dimensional indexing deprecated\n\n        # This is currently failing because the test was relying on\n        # the DeprecationWarning coming through Index.__getitem__.\n        # We want to implement a warning specifically for Series.__getitem__\n        # at which point this will become a Deprecation/FutureWarning\n        with tm.assert_produces_warning(None):\n            # GH#30867 Don't want to support this long-term, but\n            # for now ensure that the warning from Index\n            # doesn't comes through via Series.__getitem__.\n            result = datetime_series[:, np.newaxis]\n        expected = datetime_series.values[:, np.newaxis]\n        tm.assert_almost_equal(result, expected)",
        "begin_line": 51,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemSlices.test_getitem_median_slice_bug#68",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemSlices",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemSlices.test_getitem_median_slice_bug(self)",
        "snippet": "    def test_getitem_median_slice_bug(self):\n        index = date_range(\"20090415\", \"20090519\", freq=\"2B\")\n        s = Series(np.random.randn(13), index=index)\n\n        indexer = [slice(6, 7, None)]\n        with tm.assert_produces_warning(FutureWarning):\n            # GH#31299\n            result = s[indexer]\n        expected = s[indexer[0]]\n        tm.assert_series_equal(result, expected)",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike.test_getitem_no_matches#82",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike.test_getitem_no_matches(self, box)",
        "snippet": "    def test_getitem_no_matches(self, box):\n        # GH#33462 we expect the same behavior for list/ndarray/Index/Series\n        ser = Series([\"A\", \"B\"])\n\n        key = Series([\"C\"], dtype=object)\n        key = box(key)\n\n        msg = r\"None of \\[Index\\(\\['C'\\], dtype='object'\\)\\] are in the \\[index\\]\"\n        with pytest.raises(KeyError, match=msg):\n            ser[key]",
        "begin_line": 82,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike.test_getitem_intlist_intindex_periodvalues#93",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike.test_getitem_intlist_intindex_periodvalues(self)",
        "snippet": "    def test_getitem_intlist_intindex_periodvalues(self):\n        ser = Series(period_range(\"2000-01-01\", periods=10, freq=\"D\"))\n\n        result = ser[[2, 4]]\n        exp = pd.Series(\n            [pd.Period(\"2000-01-03\", freq=\"D\"), pd.Period(\"2000-01-05\", freq=\"D\")],\n            index=[2, 4],\n            dtype=\"Period[D]\",\n        )\n        tm.assert_series_equal(result, exp)\n        assert result.dtype == \"Period[D]\"",
        "begin_line": 93,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike.test_getitem_intlist_intervalindex_non_int#106",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike",
        "signature": "pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike.test_getitem_intlist_intervalindex_non_int(self, box)",
        "snippet": "    def test_getitem_intlist_intervalindex_non_int(self, box):\n        # GH#33404 fall back to positional since ints are unambiguous\n        dti = date_range(\"2000-01-03\", periods=3)\n        ii = pd.IntervalIndex.from_breaks(dti)\n        ser = Series(range(len(ii)), index=ii)\n\n        expected = ser.iloc[:1]\n        key = box([0])\n        result = ser[key]\n        tm.assert_series_equal(result, expected)",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.indexing.test_getitem.test_getitem_generator#118",
        "src_path": "pandas/tests/series/indexing/test_getitem.py",
        "class_name": "pandas.tests.series.indexing.test_getitem",
        "signature": "pandas.tests.series.indexing.test_getitem.test_getitem_generator(string_series)",
        "snippet": "def test_getitem_generator(string_series):\n    gen = (x > 0 for x in string_series)\n    result = string_series[gen]\n    result2 = string_series[iter(string_series > 0)]\n    expected = string_series[string_series > 0]\n    tm.assert_series_equal(result, expected)\n    tm.assert_series_equal(result2, expected)",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    }
]