[
    {
        "name": "pandas.tests.arrays.test_numpy.any_numpy_array#25",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.any_numpy_array(request)",
        "snippet": "def any_numpy_array(request):\n    \"\"\"\n    Parametrized fixture for NumPy arrays with different dtypes.\n\n    This excludes string and bytes.\n    \"\"\"\n    return request.param",
        "begin_line": 25,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_is_numeric#53",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_is_numeric(dtype, expected)",
        "snippet": "def test_is_numeric(dtype, expected):\n    dtype = PandasDtype(dtype)\n    assert dtype._is_numeric is expected",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_is_boolean#73",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_is_boolean(dtype, expected)",
        "snippet": "def test_is_boolean(dtype, expected):\n    dtype = PandasDtype(dtype)\n    assert dtype._is_boolean is expected",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_repr#78",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_repr()",
        "snippet": "def test_repr():\n    dtype = PandasDtype(np.dtype(\"int64\"))\n    assert repr(dtype) == \"PandasDtype('int64')\"",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_constructor_from_string#83",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_constructor_from_string()",
        "snippet": "def test_constructor_from_string():\n    result = PandasDtype.construct_from_string(\"int64\")\n    expected = PandasDtype(np.dtype(\"int64\"))\n    assert result == expected",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_constructor_no_coercion#93",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_constructor_no_coercion()",
        "snippet": "def test_constructor_no_coercion():\n    with pytest.raises(ValueError, match=\"NumPy array\"):\n        PandasArray([1, 2, 3])",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_series_constructor_with_copy#98",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_series_constructor_with_copy()",
        "snippet": "def test_series_constructor_with_copy():\n    ndarray = np.array([1, 2, 3])\n    ser = pd.Series(PandasArray(ndarray), copy=True)\n\n    assert ser.values is not ndarray",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_series_constructor_with_astype#105",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_series_constructor_with_astype()",
        "snippet": "def test_series_constructor_with_astype():\n    ndarray = np.array([1, 2, 3])\n    result = pd.Series(PandasArray(ndarray), dtype=\"float64\")\n    expected = pd.Series([1.0, 2.0, 3.0], dtype=\"float64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_from_sequence_dtype#112",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_from_sequence_dtype()",
        "snippet": "def test_from_sequence_dtype():\n    arr = np.array([1, 2, 3], dtype=\"int64\")\n    result = PandasArray._from_sequence(arr, dtype=\"uint64\")\n    expected = PandasArray(np.array([1, 2, 3], dtype=\"uint64\"))\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_constructor_copy#119",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_constructor_copy()",
        "snippet": "def test_constructor_copy():\n    arr = np.array([0, 1])\n    result = PandasArray(arr, copy=True)\n\n    assert np.shares_memory(result._ndarray, arr) is False",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_constructor_with_data#126",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_constructor_with_data(any_numpy_array)",
        "snippet": "def test_constructor_with_data(any_numpy_array):\n    nparr = any_numpy_array\n    arr = PandasArray(nparr)\n    assert arr.dtype.numpy_dtype == nparr.dtype",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_to_numpy#136",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_to_numpy()",
        "snippet": "def test_to_numpy():\n    arr = PandasArray(np.array([1, 2, 3]))\n    result = arr.to_numpy()\n    assert result is arr._ndarray\n\n    result = arr.to_numpy(copy=True)\n    assert result is not arr._ndarray\n\n    result = arr.to_numpy(dtype=\"f8\")\n    expected = np.array([1, 2, 3], dtype=\"f8\")\n    tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 136,
        "end_line": 146,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_setitem_series#153",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_setitem_series()",
        "snippet": "def test_setitem_series():\n    ser = pd.Series([1, 2, 3])\n    ser.array[0] = 10\n    expected = pd.Series([10, 2, 3])\n    tm.assert_series_equal(ser, expected)",
        "begin_line": 153,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_setitem#160",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_setitem(any_numpy_array)",
        "snippet": "def test_setitem(any_numpy_array):\n    nparr = any_numpy_array\n    arr = PandasArray(nparr, copy=True)\n\n    arr[0] = arr[1]\n    nparr[0] = nparr[1]\n\n    tm.assert_numpy_array_equal(arr.to_numpy(), nparr)",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_bad_reduce_raises#174",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_bad_reduce_raises()",
        "snippet": "def test_bad_reduce_raises():\n    arr = np.array([1, 2, 3], dtype=\"int64\")\n    arr = PandasArray(arr)\n    msg = \"cannot perform not_a_method with type int\"\n    with pytest.raises(TypeError, match=msg):\n        arr._reduce(msg)",
        "begin_line": 174,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_validate_reduction_keyword_args#182",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_validate_reduction_keyword_args()",
        "snippet": "def test_validate_reduction_keyword_args():\n    arr = PandasArray(np.array([1, 2, 3]))\n    msg = \"the 'keepdims' parameter is not supported .*all\"\n    with pytest.raises(ValueError, match=msg):\n        arr.all(keepdims=True)",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_ufunc#193",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_ufunc()",
        "snippet": "def test_ufunc():\n    arr = PandasArray(np.array([-1.0, 0.0, 1.0]))\n    result = np.abs(arr)\n    expected = PandasArray(np.abs(arr._ndarray))\n    tm.assert_extension_array_equal(result, expected)\n\n    r1, r2 = np.divmod(arr, np.add(arr, 2))\n    e1, e2 = np.divmod(arr._ndarray, np.add(arr._ndarray, 2))\n    e1 = PandasArray(e1)\n    e2 = PandasArray(e2)\n    tm.assert_extension_array_equal(r1, e1)\n    tm.assert_extension_array_equal(r2, e2)",
        "begin_line": 193,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_basic_binop#207",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_basic_binop()",
        "snippet": "def test_basic_binop():\n    # Just a basic smoke test. The EA interface tests exercise this\n    # more thoroughly.\n    x = PandasArray(np.array([1, 2, 3]))\n    result = x + x\n    expected = PandasArray(np.array([2, 4, 6]))\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 207,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_setitem_object_typecode#217",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_setitem_object_typecode(dtype)",
        "snippet": "def test_setitem_object_typecode(dtype):\n    arr = PandasArray(np.array([\"a\", \"b\", \"c\"], dtype=dtype))\n    arr[0] = \"t\"\n    expected = PandasArray(np.array([\"t\", \"b\", \"c\"], dtype=dtype))\n    tm.assert_extension_array_equal(arr, expected)",
        "begin_line": 217,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_numpy.test_setitem_no_coercion#224",
        "src_path": "pandas/tests/arrays/test_numpy.py",
        "class_name": "pandas.tests.arrays.test_numpy",
        "signature": "pandas.tests.arrays.test_numpy.test_setitem_no_coercion()",
        "snippet": "def test_setitem_no_coercion():\n    # https://github.com/pandas-dev/pandas/issues/28150\n    arr = PandasArray(np.array([1, 2, 3]))\n    with pytest.raises(ValueError, match=\"int\"):\n        arr[0] = \"a\"",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#12",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 12,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#29",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#39",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#53",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#73",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 73,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#107",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            return type(self)(self._data[item])",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#126",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#140",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#150",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 150,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    }
]