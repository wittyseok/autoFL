[
    {
        "name": "tests.test_modules_same_name_body.app.b.compute#7",
        "src_path": "tests/test_modules_same_name_body/app/b.py",
        "class_name": "tests.test_modules_same_name_body.app.b",
        "signature": "tests.test_modules_same_name_body.app.b.compute(a: int=Body(...), b: str=Body(...))",
        "snippet": "def compute(a: int = Body(...), b: str = Body(...)):\n    return {\"a\": a, \"b\": b}",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.Person.__init__#17",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.Person",
        "signature": "tests.test_jsonable_encoder.Person.__init__(self, name: str)",
        "snippet": "    def __init__(self, name: str):\n        self.name = name",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.Pet.__init__#22",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.Pet",
        "signature": "tests.test_jsonable_encoder.Pet.__init__(self, owner: Person, name: str)",
        "snippet": "    def __init__(self, owner: Person, name: str):\n        self.owner = owner\n        self.name = name",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.DictablePerson.__iter__#28",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.DictablePerson",
        "signature": "tests.test_jsonable_encoder.DictablePerson.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return ((k, v) for k, v in self.__dict__.items())",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.DictablePet.__iter__#33",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.DictablePet",
        "signature": "tests.test_jsonable_encoder.DictablePet.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return ((k, v) for k, v in self.__dict__.items())",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.Unserializable.__iter__#38",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.Unserializable",
        "signature": "tests.test_jsonable_encoder.Unserializable.__iter__(self)",
        "snippet": "    def __iter__(self):\n        raise NotImplementedError()",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.Unserializable.__dict__#42",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.Unserializable",
        "signature": "tests.test_jsonable_encoder.Unserializable.__dict__(self)",
        "snippet": "    def __dict__(self):\n        raise NotImplementedError()",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.fixture_model_with_path#82",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.fixture_model_with_path(request)",
        "snippet": "def fixture_model_with_path(request):\n    class Config:\n        arbitrary_types_allowed = True\n\n    ModelWithPath = create_model(\n        \"ModelWithPath\", path=(request.param, ...), __config__=Config\n    )\n    return ModelWithPath(path=request.param(\"/foo\", \"bar\"))",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.Config.fixture_model_with_path#82",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.Config",
        "signature": "tests.test_jsonable_encoder.Config.fixture_model_with_path(request)",
        "snippet": "def fixture_model_with_path(request):\n    class Config:\n        arbitrary_types_allowed = True\n\n    ModelWithPath = create_model(\n        \"ModelWithPath\", path=(request.param, ...), __config__=Config\n    )\n    return ModelWithPath(path=request.param(\"/foo\", \"bar\"))",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_class#92",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_class()",
        "snippet": "def test_encode_class():\n    person = Person(name=\"Foo\")\n    pet = Pet(owner=person, name=\"Firulais\")\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_dictable#98",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_dictable()",
        "snippet": "def test_encode_dictable():\n    person = DictablePerson(name=\"Foo\")\n    pet = DictablePet(owner=person, name=\"Firulais\")\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_unsupported#104",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_unsupported()",
        "snippet": "def test_encode_unsupported():\n    unserializable = Unserializable()\n    with pytest.raises(ValueError):\n        jsonable_encoder(unserializable)",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_custom_json_encoders_model#110",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_custom_json_encoders_model()",
        "snippet": "def test_encode_custom_json_encoders_model():\n    model = ModelWithCustomEncoder(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_model_with_config#115",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_model_with_config()",
        "snippet": "def test_encode_model_with_config():\n    model = ModelWithConfig(role=RoleEnum.admin)\n    assert jsonable_encoder(model) == {\"role\": \"admin\"}",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_model_with_alias_raises#120",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_model_with_alias_raises()",
        "snippet": "def test_encode_model_with_alias_raises():\n    with pytest.raises(ValidationError):\n        model = ModelWithAlias(foo=\"Bar\")",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_model_with_alias#125",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_model_with_alias()",
        "snippet": "def test_encode_model_with_alias():\n    model = ModelWithAlias(Foo=\"Bar\")\n    assert jsonable_encoder(model) == {\"Foo\": \"Bar\"}",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_model_with_default#130",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_model_with_default()",
        "snippet": "def test_encode_model_with_default():\n    model = ModelWithDefault(foo=\"foo\", bar=\"bar\")\n    assert jsonable_encoder(model) == {\"foo\": \"foo\", \"bar\": \"bar\", \"bla\": \"bla\"}\n    assert jsonable_encoder(model, exclude_unset=True) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n    assert jsonable_encoder(model, exclude_defaults=True) == {\"foo\": \"foo\"}\n    assert jsonable_encoder(model, exclude_unset=True, exclude_defaults=True) == {\n        \"foo\": \"foo\"\n    }",
        "begin_line": 130,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_custom_encoders#140",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_custom_encoders()",
        "snippet": "def test_custom_encoders():\n    class safe_datetime(datetime):\n        pass\n\n    class MyModel(BaseModel):\n        dt_field: safe_datetime\n\n    instance = MyModel(dt_field=safe_datetime.now())\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n    )\n    assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()",
        "begin_line": 140,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.safe_datetime.test_custom_encoders#140",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.safe_datetime",
        "signature": "tests.test_jsonable_encoder.safe_datetime.test_custom_encoders()",
        "snippet": "def test_custom_encoders():\n    class safe_datetime(datetime):\n        pass\n\n    class MyModel(BaseModel):\n        dt_field: safe_datetime\n\n    instance = MyModel(dt_field=safe_datetime.now())\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n    )\n    assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()",
        "begin_line": 140,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.MyModel.test_custom_encoders#140",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder.MyModel",
        "signature": "tests.test_jsonable_encoder.MyModel.test_custom_encoders()",
        "snippet": "def test_custom_encoders():\n    class safe_datetime(datetime):\n        pass\n\n    class MyModel(BaseModel):\n        dt_field: safe_datetime\n\n    instance = MyModel(dt_field=safe_datetime.now())\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n    )\n    assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()",
        "begin_line": 140,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_jsonable_encoder.test_encode_model_with_path#155",
        "src_path": "tests/test_jsonable_encoder.py",
        "class_name": "tests.test_jsonable_encoder",
        "signature": "tests.test_jsonable_encoder.test_encode_model_with_path(model_with_path)",
        "snippet": "def test_encode_model_with_path(model_with_path):\n    if isinstance(model_with_path.path, PureWindowsPath):\n        expected = \"\\\\foo\\\\bar\"\n    else:\n        expected = \"/foo/bar\"\n    assert jsonable_encoder(model_with_path) == {\"path\": expected}",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.non_operation#7",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.non_operation()",
        "snippet": "def non_operation():\n    return {\"message\": \"Hello World\"}",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.non_decorated_route#11",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.non_decorated_route()",
        "snippet": "def non_decorated_route():\n    return {\"message\": \"Hello World\"}",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_text#19",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_text()",
        "snippet": "def get_text():\n    return \"Hello World\"",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_id#24",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_id(item_id)",
        "snippet": "def get_id(item_id):\n    return item_id",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_str_id#29",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_str_id(item_id: str)",
        "snippet": "def get_str_id(item_id: str):\n    return item_id",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_int_id#34",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_int_id(item_id: int)",
        "snippet": "def get_int_id(item_id: int):\n    return item_id",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_float_id#39",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_float_id(item_id: float)",
        "snippet": "def get_float_id(item_id: float):\n    return item_id",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_bool_id#44",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_bool_id(item_id: bool)",
        "snippet": "def get_bool_id(item_id: bool):\n    return item_id",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_id#49",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_id(item_id: str=Path(None))",
        "snippet": "def get_path_param_id(item_id: str = Path(None)):\n    return item_id",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_required_id#54",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_required_id(item_id: str=Path(...))",
        "snippet": "def get_path_param_required_id(item_id: str = Path(...)):\n    return item_id",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_min_length#59",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_min_length(item_id: str=Path(..., min_length=3))",
        "snippet": "def get_path_param_min_length(item_id: str = Path(..., min_length=3)):\n    return item_id",
        "begin_line": 59,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_max_length#64",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_max_length(item_id: str=Path(..., max_length=3))",
        "snippet": "def get_path_param_max_length(item_id: str = Path(..., max_length=3)):\n    return item_id",
        "begin_line": 64,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_min_max_length#69",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_min_max_length(item_id: str=Path(..., max_length=3, min_length=2))",
        "snippet": "def get_path_param_min_max_length(item_id: str = Path(..., max_length=3, min_length=2)):\n    return item_id",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_gt#74",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_gt(item_id: float=Path(..., gt=3))",
        "snippet": "def get_path_param_gt(item_id: float = Path(..., gt=3)):\n    return item_id",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_gt0#79",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_gt0(item_id: float=Path(..., gt=0))",
        "snippet": "def get_path_param_gt0(item_id: float = Path(..., gt=0)):\n    return item_id",
        "begin_line": 79,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_ge#84",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_ge(item_id: float=Path(..., ge=3))",
        "snippet": "def get_path_param_ge(item_id: float = Path(..., ge=3)):\n    return item_id",
        "begin_line": 84,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_lt#89",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_lt(item_id: float=Path(..., lt=3))",
        "snippet": "def get_path_param_lt(item_id: float = Path(..., lt=3)):\n    return item_id",
        "begin_line": 89,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_lt0#94",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_lt0(item_id: float=Path(..., lt=0))",
        "snippet": "def get_path_param_lt0(item_id: float = Path(..., lt=0)):\n    return item_id",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_le#99",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_le(item_id: float=Path(..., le=3))",
        "snippet": "def get_path_param_le(item_id: float = Path(..., le=3)):\n    return item_id",
        "begin_line": 99,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_lt_gt#104",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_lt_gt(item_id: float=Path(..., lt=3, gt=1))",
        "snippet": "def get_path_param_lt_gt(item_id: float = Path(..., lt=3, gt=1)):\n    return item_id",
        "begin_line": 104,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_le_ge#109",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_le_ge(item_id: float=Path(..., le=3, ge=1))",
        "snippet": "def get_path_param_le_ge(item_id: float = Path(..., le=3, ge=1)):\n    return item_id",
        "begin_line": 109,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_lt_int#114",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_lt_int(item_id: int=Path(..., lt=3))",
        "snippet": "def get_path_param_lt_int(item_id: int = Path(..., lt=3)):\n    return item_id",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_gt_int#119",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_gt_int(item_id: int=Path(..., gt=3))",
        "snippet": "def get_path_param_gt_int(item_id: int = Path(..., gt=3)):\n    return item_id",
        "begin_line": 119,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_le_int#124",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_le_int(item_id: int=Path(..., le=3))",
        "snippet": "def get_path_param_le_int(item_id: int = Path(..., le=3)):\n    return item_id",
        "begin_line": 124,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_ge_int#129",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_ge_int(item_id: int=Path(..., ge=3))",
        "snippet": "def get_path_param_ge_int(item_id: int = Path(..., ge=3)):\n    return item_id",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_lt_gt_int#134",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_lt_gt_int(item_id: int=Path(..., lt=3, gt=1))",
        "snippet": "def get_path_param_lt_gt_int(item_id: int = Path(..., lt=3, gt=1)):\n    return item_id",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_path_param_le_ge_int#139",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_path_param_le_ge_int(item_id: int=Path(..., le=3, ge=1))",
        "snippet": "def get_path_param_le_ge_int(item_id: int = Path(..., le=3, ge=1)):\n    return item_id",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query#144",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query(query)",
        "snippet": "def get_query(query):\n    return f\"foo bar {query}\"",
        "begin_line": 144,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_optional#149",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_optional(query=None)",
        "snippet": "def get_query_optional(query=None):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"",
        "begin_line": 149,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_type#156",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_type(query: int)",
        "snippet": "def get_query_type(query: int):\n    return f\"foo bar {query}\"",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_type_optional#161",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_type_optional(query: int=None)",
        "snippet": "def get_query_type_optional(query: int = None):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_type_optional#168",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_type_optional(query: int=10)",
        "snippet": "def get_query_type_optional(query: int = 10):\n    return f\"foo bar {query}\"",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_param#173",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_param(query=Query(None))",
        "snippet": "def get_query_param(query=Query(None)):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_param_required#180",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_param_required(query=Query(...))",
        "snippet": "def get_query_param_required(query=Query(...)):\n    return f\"foo bar {query}\"",
        "begin_line": 180,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.main.get_query_param_required_type#185",
        "src_path": "tests/main.py",
        "class_name": "tests.main",
        "signature": "tests.main.get_query_param_required_type(query: int=Query(...))",
        "snippet": "def get_query_param_required_type(query: int = Query(...)):\n    return f\"foo bar {query}\"",
        "begin_line": 185,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_modules_same_name_body.app.a.compute#7",
        "src_path": "tests/test_modules_same_name_body/app/a.py",
        "class_name": "tests.test_modules_same_name_body.app.a",
        "signature": "tests.test_modules_same_name_body.app.a.compute(a: int=Body(...), b: str=Body(...))",
        "snippet": "def compute(a: int = Body(...), b: str = Body(...)):\n    return {\"a\": a, \"b\": b}",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    }
]