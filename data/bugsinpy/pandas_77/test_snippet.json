[
    {
        "name": "pandas.tests.arithmetic.conftest.one#23",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.one(request)",
        "snippet": "def one(request):\n    \"\"\"\n    Several variants of integer value 1. The zero-dim integer array\n    behaves like an integer.\n\n    This fixture can be used to check that datetimelike indexes handle\n    addition and subtraction of integers and zero-dimensional arrays\n    of integers.\n\n    Examples\n    --------\n    >>> dti = pd.date_range('2016-01-01', periods=2, freq='H')\n    >>> dti\n    DatetimeIndex(['2016-01-01 00:00:00', '2016-01-01 01:00:00'],\n    dtype='datetime64[ns]', freq='H')\n    >>> dti + one\n    DatetimeIndex(['2016-01-01 01:00:00', '2016-01-01 02:00:00'],\n    dtype='datetime64[ns]', freq='H')\n    \"\"\"\n    return request.param",
        "begin_line": 23,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.zero#59",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.zero(request)",
        "snippet": "def zero(request):\n    \"\"\"\n    Several types of scalar zeros and length 5 vectors of zeros.\n\n    This fixture can be used to check that numeric-dtype indexes handle\n    division by any zero numeric-dtype.\n\n    Uses vector of length 5 for broadcasting with `numeric_idx` fixture,\n    which creates numeric-dtype vectors also of length 5.\n\n    Examples\n    --------\n    >>> arr = pd.RangeIndex(5)\n    >>> arr / zeros\n    Float64Index([nan, inf, inf, inf, inf], dtype='float64')\n    \"\"\"\n    return request.param",
        "begin_line": 59,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.numeric_idx#91",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.numeric_idx(request)",
        "snippet": "def numeric_idx(request):\n    \"\"\"\n    Several types of numeric-dtypes Index objects\n    \"\"\"\n    return request.param",
        "begin_line": 91,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.scalar_td#110",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.scalar_td(request)",
        "snippet": "def scalar_td(request):\n    \"\"\"\n    Several variants of Timedelta scalars representing 5 minutes and 4 seconds\n    \"\"\"\n    return request.param",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.three_days#128",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.three_days(request)",
        "snippet": "def three_days(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 3-day timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 128,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.two_hours#147",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.two_hours(request)",
        "snippet": "def two_hours(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 2-hour timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_hourly#170",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_hourly(request)",
        "snippet": "def not_hourly(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Hourly frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 170,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_daily#186",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_daily(request)",
        "snippet": "def not_daily(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Daily frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.mismatched_freq#202",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.mismatched_freq(request)",
        "snippet": "def mismatched_freq(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Monthly or Annual frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 202,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box#214",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box(request)",
        "snippet": "def box(request):\n    \"\"\"\n    Several array-like containers that should have effectively identical\n    behavior with respect to arithmetic operations.\n    \"\"\"\n    return request.param",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_df_fail#231",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_df_fail(request)",
        "snippet": "def box_df_fail(request):\n    \"\"\"\n    Fixture equivalent to `box` fixture but xfailing the DataFrame case.\n    \"\"\"\n    return request.param",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_with_array#239",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_with_array(request)",
        "snippet": "def box_with_array(request):\n    \"\"\"\n    Fixture to test behavior for Index, Series, DataFrame, and pandas Array\n    classes\n    \"\"\"\n    return request.param",
        "begin_line": 239,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_array_ops.test_na_logical_op_2d#10",
        "src_path": "pandas/tests/arithmetic/test_array_ops.py",
        "class_name": "pandas.tests.arithmetic.test_array_ops",
        "signature": "pandas.tests.arithmetic.test_array_ops.test_na_logical_op_2d()",
        "snippet": "def test_na_logical_op_2d():\n    left = np.arange(8).reshape(4, 2)\n    right = left.astype(object)\n    right[0, 0] = np.nan\n\n    # Check that we fall back to the vec_binop branch\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        operator.or_(left, right)\n\n    result = na_logical_op(left, right, operator.or_)\n    expected = right\n    tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 10,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.common.assert_invalid_addsub_type#11",
        "src_path": "pandas/tests/arithmetic/common.py",
        "class_name": "pandas.tests.arithmetic.common",
        "signature": "pandas.tests.arithmetic.common.assert_invalid_addsub_type(left, right, msg=None)",
        "snippet": "def assert_invalid_addsub_type(left, right, msg=None):\n    \"\"\"\n    Helper to assert that left and right can be neither added nor subtracted.\n\n    Parameters\n    ---------\n    left : object\n    right : object\n    msg : str or None, default None\n    \"\"\"\n    with pytest.raises(TypeError, match=msg):\n        left + right\n    with pytest.raises(TypeError, match=msg):\n        right + left\n    with pytest.raises(TypeError, match=msg):\n        left - right\n    with pytest.raises(TypeError, match=msg):\n        right - left",
        "begin_line": 11,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.common.get_upcast_box#31",
        "src_path": "pandas/tests/arithmetic/common.py",
        "class_name": "pandas.tests.arithmetic.common",
        "signature": "pandas.tests.arithmetic.common.get_upcast_box(box, vector)",
        "snippet": "def get_upcast_box(box, vector):\n    \"\"\"\n    Given two box-types, find the one that takes priority\n    \"\"\"\n    if box is DataFrame or isinstance(vector, DataFrame):\n        return DataFrame\n    if box is Series or isinstance(vector, Series):\n        return Series\n    if box is Index or isinstance(vector, Index):\n        return Index\n    return box",
        "begin_line": 31,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.common.assert_invalid_comparison#44",
        "src_path": "pandas/tests/arithmetic/common.py",
        "class_name": "pandas.tests.arithmetic.common",
        "signature": "pandas.tests.arithmetic.common.assert_invalid_comparison(left, right, box)",
        "snippet": "def assert_invalid_comparison(left, right, box):\n    \"\"\"\n    Assert that comparison operations with mismatched types behave correctly.\n\n    Parameters\n    ----------\n    left : np.ndarray, ExtensionArray, Index, or Series\n    right : object\n    box : {pd.DataFrame, pd.Series, pd.Index, tm.to_array}\n    \"\"\"\n    # Not for tznaive-tzaware comparison\n\n    # Note: not quite the same as how we do this for tm.box_expected\n    xbox = box if box is not Index else np.array\n\n    result = left == right\n    expected = xbox(np.zeros(result.shape, dtype=np.bool_))\n\n    tm.assert_equal(result, expected)\n\n    result = right == left\n    tm.assert_equal(result, expected)\n\n    result = left != right\n    tm.assert_equal(result, ~expected)\n\n    result = right != left\n    tm.assert_equal(result, ~expected)\n\n    msg = \"Invalid comparison between|Cannot compare type|not supported between\"\n    with pytest.raises(TypeError, match=msg):\n        left < right\n    with pytest.raises(TypeError, match=msg):\n        left <= right\n    with pytest.raises(TypeError, match=msg):\n        left > right\n    with pytest.raises(TypeError, match=msg):\n        left >= right\n    with pytest.raises(TypeError, match=msg):\n        right < left\n    with pytest.raises(TypeError, match=msg):\n        right <= left\n    with pytest.raises(TypeError, match=msg):\n        right > left\n    with pytest.raises(TypeError, match=msg):\n        right >= left",
        "begin_line": 44,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    }
]