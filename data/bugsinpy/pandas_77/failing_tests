coverage run -m pytest pandas/tests/arithmetic/test_array_ops.py::test_na_logical_op_2d
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/arithmetic/test_array_ops.py F                              [100%]

=================================== FAILURES ===================================
____________________________ test_na_logical_op_2d _____________________________

x = array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7]], dtype=object)
y = array([[nan, 1],
       [2, 3],
       [4, 5],
       [6, 7]], dtype=object)
op = <built-in function or_>

    def na_logical_op(x: np.ndarray, y, op):
        try:
            # For exposition, write:
            #  yarr = isinstance(y, np.ndarray)
            #  yint = is_integer(y) or (yarr and y.dtype.kind == "i")
            #  ybool = is_bool(y) or (yarr and y.dtype.kind == "b")
            #  xint = x.dtype.kind == "i"
            #  xbool = x.dtype.kind == "b"
            # Then Cases where this goes through without raising include:
            #  (xint or xbool) and (yint or bool)
>           result = op(x, y)
E           TypeError: unsupported operand type(s) for |: 'int' and 'float'

pandas/core/ops/array_ops.py:273: TypeError

During handling of the above exception, another exception occurred:

    def test_na_logical_op_2d():
        left = np.arange(8).reshape(4, 2)
        right = left.astype(object)
        right[0, 0] = np.nan
    
        # Check that we fall back to the vec_binop branch
        with pytest.raises(TypeError, match="unsupported operand type"):
            operator.or_(left, right)
    
>       result = na_logical_op(left, right, operator.or_)

pandas/tests/arithmetic/test_array_ops.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/array_ops.py:280: in na_logical_op
    result = libops.vec_binop(x, y, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   def vec_binop(object[:] left, object[:] right, object op):
E   ValueError: Buffer has wrong number of dimensions (expected 1, got 2)

pandas/_libs/ops.pyx:206: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_array_ops.py::test_na_logical_op_2d - Val...
============================== 1 failed in 0.24s ===============================
