[
    {
        "name": "tests.test_http_request.RequestTest.test_init#19",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_init(self)",
        "snippet": "    def test_init(self):\n        # Request requires url in the constructor\n        self.assertRaises(Exception, self.request_class)\n\n        # url argument must be basestring\n        self.assertRaises(TypeError, self.request_class, 123)\n        r = self.request_class('http://www.example.com')\n\n        r = self.request_class(\"http://www.example.com\")\n        assert isinstance(r.url, str)\n        self.assertEqual(r.url, \"http://www.example.com\")\n        self.assertEqual(r.method, self.default_method)\n\n        assert isinstance(r.headers, Headers)\n        self.assertEqual(r.headers, self.default_headers)\n        self.assertEqual(r.meta, self.default_meta)\n\n        meta = {\"lala\": \"lolo\"}\n        headers = {b\"caca\": b\"coco\"}\n        r = self.request_class(\"http://www.example.com\", meta=meta, headers=headers, body=\"a body\")\n\n        assert r.meta is not meta\n        self.assertEqual(r.meta, meta)\n        assert r.headers is not headers\n        self.assertEqual(r.headers[b\"caca\"], b\"coco\")",
        "begin_line": 19,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_no_scheme#45",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_no_scheme(self)",
        "snippet": "    def test_url_no_scheme(self):\n        self.assertRaises(ValueError, self.request_class, 'foo')",
        "begin_line": 45,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_headers#48",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_headers(self)",
        "snippet": "    def test_headers(self):\n        # Different ways of setting headers attribute\n        url = 'http://www.scrapy.org'\n        headers = {b'Accept':'gzip', b'Custom-Header':'nothing to tell you'}\n        r = self.request_class(url=url, headers=headers)\n        p = self.request_class(url=url, headers=r.headers)\n\n        self.assertEqual(r.headers, p.headers)\n        self.assertFalse(r.headers is headers)\n        self.assertFalse(p.headers is r.headers)\n\n        # headers must not be unicode\n        h = Headers({'key1': u'val1', u'key2': 'val2'})\n        h[u'newkey'] = u'newval'\n        for k, v in h.iteritems():\n            self.assert_(isinstance(k, bytes))\n            for s in v:\n                self.assert_(isinstance(s, bytes))",
        "begin_line": 48,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_eq#67",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_eq(self)",
        "snippet": "    def test_eq(self):\n        url = 'http://www.scrapy.org'\n        r1 = self.request_class(url=url)\n        r2 = self.request_class(url=url)\n        self.assertNotEqual(r1, r2)\n\n        set_ = set()\n        set_.add(r1)\n        set_.add(r2)\n        self.assertEqual(len(set_), 2)",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url#78",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url(self)",
        "snippet": "    def test_url(self):\n        r = self.request_class(url=\"http://www.scrapy.org/path\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/path\")",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_quoting#82",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_quoting(self)",
        "snippet": "    def test_url_quoting(self):\n        r = self.request_class(url=\"http://www.scrapy.org/blank%20space\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")\n        r = self.request_class(url=\"http://www.scrapy.org/blank space\")\n        self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_url_encoding#89",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_url_encoding(self)",
        "snippet": "    def test_url_encoding(self):\n        r1 = self.request_class(url=u\"http://www.scrapy.org/price/\\xa3\", encoding=\"utf-8\")\n        r2 = self.request_class(url=u\"http://www.scrapy.org/price/\\xa3\", encoding=\"latin1\")\n        self.assertEqual(r1.url, \"http://www.scrapy.org/price/%C2%A3\")\n        self.assertEqual(r2.url, \"http://www.scrapy.org/price/%A3\")",
        "begin_line": 89,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_body#95",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_body(self)",
        "snippet": "    def test_body(self):\n        r1 = self.request_class(url=\"http://www.example.com/\")\n        assert r1.body == b''\n\n        r2 = self.request_class(url=\"http://www.example.com/\", body=b\"\")\n        assert isinstance(r2.body, bytes)\n        self.assertEqual(r2.encoding, 'utf-8') # default encoding\n\n        r3 = self.request_class(url=\"http://www.example.com/\", body=u\"Price: \\xa3100\", encoding='utf-8')\n        assert isinstance(r3.body, bytes)\n        self.assertEqual(r3.body, b\"Price: \\xc2\\xa3100\")\n\n        r4 = self.request_class(url=\"http://www.example.com/\", body=u\"Price: \\xa3100\", encoding='latin1')\n        assert isinstance(r4.body, bytes)\n        self.assertEqual(r4.body, b\"Price: \\xa3100\")",
        "begin_line": 95,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_ajax_url#111",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_ajax_url(self)",
        "snippet": "    def test_ajax_url(self):\n        # ascii url\n        r = self.request_class(url=\"http://www.example.com/ajax.html#!key=value\")\n        self.assertEqual(r.url, \"http://www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue\")\n        # unicode url\n        r = self.request_class(url=u\"http://www.example.com/ajax.html#!key=value\")\n        self.assertEqual(r.url, \"http://www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue\")",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_copy#119",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        \"\"\"Test Request copy\"\"\"\n\n        def somecallback():\n            pass\n\n        r1 = self.request_class(\"http://www.example.com\", callback=somecallback, errback=somecallback)\n        r1.meta['foo'] = 'bar'\n        r2 = r1.copy()\n\n        # make sure copy does not propagate callbacks\n        assert r1.callback is somecallback\n        assert r1.errback is somecallback\n        assert r2.callback is r1.callback\n        assert r2.errback is r2.errback\n\n        # make sure meta dict is shallow copied\n        assert r1.meta is not r2.meta, \"meta must be a shallow copy, not identical\"\n        self.assertEqual(r1.meta, r2.meta)\n\n        # make sure headers attribute is shallow copied\n        assert r1.headers is not r2.headers, \"headers must be a shallow copy, not identical\"\n        self.assertEqual(r1.headers, r2.headers)\n        self.assertEqual(r1.encoding, r2.encoding)\n        self.assertEqual(r1.dont_filter, r2.dont_filter)",
        "begin_line": 119,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.somecallback#122",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.somecallback()",
        "snippet": "        def somecallback():\n            pass",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_copy_inherited_classes#147",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_copy_inherited_classes(self)",
        "snippet": "    def test_copy_inherited_classes(self):\n        \"\"\"Test Request children copies preserve their class\"\"\"\n\n        class CustomRequest(self.request_class):\n            pass\n\n        r1 = CustomRequest('http://www.example.com')\n        r2 = r1.copy()\n\n        assert type(r2) is CustomRequest",
        "begin_line": 147,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.CustomRequest.test_copy_inherited_classes#147",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.CustomRequest",
        "signature": "tests.test_http_request.CustomRequest.test_copy_inherited_classes(self)",
        "snippet": "    def test_copy_inherited_classes(self):\n        \"\"\"Test Request children copies preserve their class\"\"\"\n\n        class CustomRequest(self.request_class):\n            pass\n\n        r1 = CustomRequest('http://www.example.com')\n        r2 = r1.copy()\n\n        assert type(r2) is CustomRequest",
        "begin_line": 147,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_replace#158",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_replace(self)",
        "snippet": "    def test_replace(self):\n        \"\"\"Test Request.replace() method\"\"\"\n        r1 = self.request_class(\"http://www.example.com\", method='GET')\n        hdrs = Headers(r1.headers)\n        hdrs[b'key'] = b'value'\n        r2 = r1.replace(method=\"POST\", body=\"New body\", headers=hdrs)\n        self.assertEqual(r1.url, r2.url)\n        self.assertEqual((r1.method, r2.method), (\"GET\", \"POST\"))\n        self.assertEqual((r1.body, r2.body), (b'', b\"New body\"))\n        self.assertEqual((r1.headers, r2.headers), (self.default_headers, hdrs))\n\n        # Empty attributes (which may fail if not compared properly)\n        r3 = self.request_class(\"http://www.example.com\", meta={'a': 1}, dont_filter=True)\n        r4 = r3.replace(url=\"http://www.example.com/2\", body=b'', meta={}, dont_filter=False)\n        self.assertEqual(r4.url, \"http://www.example.com/2\")\n        self.assertEqual(r4.body, b'')\n        self.assertEqual(r4.meta, {})\n        assert r4.dont_filter is False",
        "begin_line": 158,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_method_always_str#177",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_method_always_str(self)",
        "snippet": "    def test_method_always_str(self):\n        r = self.request_class(\"http://www.example.com\", method=u\"POST\")\n        assert isinstance(r.method, str)",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.RequestTest.test_immutable_attributes#181",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.RequestTest",
        "signature": "tests.test_http_request.RequestTest.test_immutable_attributes(self)",
        "snippet": "    def test_immutable_attributes(self):\n        r = self.request_class(\"http://example.com\")\n        self.assertRaises(AttributeError, setattr, r, 'url', 'http://example2.com')\n        self.assertRaises(AttributeError, setattr, r, 'body', 'xxx')",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.assertQueryEqual#191",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.assertQueryEqual(self, first, second, msg=None)",
        "snippet": "    def assertQueryEqual(self, first, second, msg=None):\n        first = to_native_str(first).split(\"&\")\n        second = to_native_str(second).split(\"&\")\n        return self.assertEqual(sorted(first), sorted(second), msg)",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_empty_formdata#196",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_empty_formdata(self)",
        "snippet": "    def test_empty_formdata(self):\n        r1 = self.request_class(\"http://www.example.com\", formdata={})\n        self.assertEqual(r1.body, b'')",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_default_encoding#201",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_default_encoding(self)",
        "snippet": "    def test_default_encoding(self):\n        # using default encoding (utf-8)\n        data = {'one': 'two', 'price': '\\xc2\\xa3 100'}\n        r2 = self.request_class(\"http://www.example.com\", formdata=data)\n        self.assertEqual(r2.method, 'POST')\n        self.assertEqual(r2.encoding, 'utf-8')\n        self.assertQueryEqual(r2.body, b'price=%C2%A3+100&one=two')\n        self.assertEqual(r2.headers[b'Content-Type'], b'application/x-www-form-urlencoded')",
        "begin_line": 201,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_custom_encoding#210",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_custom_encoding(self)",
        "snippet": "    def test_custom_encoding(self):\n        data = {'price': u'\\xa3 100'}\n        r3 = self.request_class(\"http://www.example.com\", formdata=data, encoding='latin1')\n        self.assertEqual(r3.encoding, 'latin1')\n        self.assertEqual(r3.body, b'price=%A3+100')",
        "begin_line": 210,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_multi_key_values#216",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_multi_key_values(self)",
        "snippet": "    def test_multi_key_values(self):\n        # using multiples values for a single key\n        data = {'price': u'\\xa3 100', 'colours': ['red', 'blue', 'green']}\n        r3 = self.request_class(\"http://www.example.com\", formdata=data)\n        self.assertQueryEqual(r3.body,\n            b'colours=red&colours=blue&colours=green&price=%C2%A3+100')",
        "begin_line": 216,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_post#223",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_post(self)",
        "snippet": "    def test_from_response_post(self):\n        response = _buildresponse(\n            b\"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(set(fs[b\"test\"]), {b\"val1\", b\"val2\"})\n        self.assertEqual(set(fs[b\"one\"]), {b\"two\", b\"three\"})\n        self.assertEqual(fs[b'test2'], [b'xxx'])\n        self.assertEqual(fs[b'six'], [b'seven'])",
        "begin_line": 223,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_extra_headers#242",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_extra_headers(self)",
        "snippet": "    def test_from_response_extra_headers(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'},\n                headers={\"Accept-Encoding\": \"gzip,deflate\"})\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.headers['Accept-Encoding'], b'gzip,deflate')",
        "begin_line": 242,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_get#256",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_get(self)",
        "snippet": "    def test_from_response_get(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        r1 = self.request_class.from_response(response,\n                formdata={'one': ['two', 'three'], 'six': 'seven'})\n        self.assertEqual(r1.method, 'GET')\n        self.assertEqual(urlparse(r1.url).hostname, \"www.example.com\")\n        self.assertEqual(urlparse(r1.url).path, \"/this/get.php\")\n        fs = _qs(r1)\n        self.assertEqual(set(fs['test']), set(['val1', 'val2']))\n        self.assertEqual(set(fs['one']), set(['two', 'three']))\n        self.assertEqual(fs['test2'], ['xxx'])\n        self.assertEqual(fs['six'], ['seven'])",
        "begin_line": 256,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_params#275",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_params(self)",
        "snippet": "    def test_from_response_override_params(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': '2'})\n        fs = _qs(req)\n        self.assertEqual(fs[b'one'], [b'1'])\n        self.assertEqual(fs[b'two'], [b'2'])",
        "begin_line": 275,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_method#286",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_method(self)",
        "snippet": "    def test_from_response_override_method(self):\n        response = _buildresponse(\n                '''<html><body>\n                <form action=\"/app\"></form>\n                </body></html>''')\n        request = FormRequest.from_response(response)\n        self.assertEqual(request.method, 'GET')\n        request = FormRequest.from_response(response, method='POST')\n        self.assertEqual(request.method, 'POST')",
        "begin_line": 286,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_url#296",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_url(self)",
        "snippet": "    def test_from_response_override_url(self):\n        response = _buildresponse(\n                '''<html><body>\n                <form action=\"/app\"></form>\n                </body></html>''')\n        request = FormRequest.from_response(response)\n        self.assertEqual(request.url, 'http://example.com/app')\n        request = FormRequest.from_response(response, url='http://foo.bar/absolute')\n        self.assertEqual(request.url, 'http://foo.bar/absolute')\n        request = FormRequest.from_response(response, url='/relative')\n        self.assertEqual(request.url, 'http://example.com/relative')",
        "begin_line": 296,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_submit_first_clickable#308",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_submit_first_clickable(self)",
        "snippet": "    def test_from_response_submit_first_clickable(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': '2'})\n        fs = _qs(req)\n        self.assertEqual(fs['clickable1'], ['clicked1'])\n        self.assertFalse('clickable2' in fs, fs)\n        self.assertEqual(fs['one'], ['1'])\n        self.assertEqual(fs['two'], ['2'])",
        "begin_line": 308,
        "end_line": 321,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_submit_not_first_clickable#323",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_submit_not_first_clickable(self)",
        "snippet": "    def test_from_response_submit_not_first_clickable(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, formdata={'two': '2'}, \\\n                                              clickdata={'name': 'clickable2'})\n        fs = _qs(req)\n        self.assertEqual(fs['clickable2'], ['clicked2'])\n        self.assertFalse('clickable1' in fs, fs)\n        self.assertEqual(fs['one'], ['1'])\n        self.assertEqual(fs['two'], ['2'])",
        "begin_line": 323,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_image_as_input#339",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_image_as_input(self)",
        "snippet": "    def test_from_response_dont_submit_image_as_input(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"hidden\" name=\"i1\" value=\"i1v\">\n            <input type=\"image\" name=\"i2\" src=\"http://my.image.org/1.jpg\">\n            <input type=\"submit\" name=\"i3\" value=\"i3v\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, dont_click=True)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['i1v']})",
        "begin_line": 339,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_reset_as_input#350",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_dont_submit_reset_as_input(self)",
        "snippet": "    def test_from_response_dont_submit_reset_as_input(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"hidden\" name=\"i1\" value=\"i1v\">\n            <input type=\"text\" name=\"i2\" value=\"i2v\">\n            <input type=\"reset\" name=\"resetme\">\n            <input type=\"submit\" name=\"i3\" value=\"i3v\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, dont_click=True)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['i1v'], 'i2': ['i2v']})",
        "begin_line": 350,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_multiple_clickdata#362",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_multiple_clickdata(self)",
        "snippet": "    def test_from_response_multiple_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n            <input type=\"hidden\" name=\"one\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"two\" value=\"clicked2\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, \\\n                clickdata={'name': 'clickable', 'value': 'clicked2'})\n        fs = _qs(req)\n        self.assertEqual(fs['clickable'], ['clicked2'])\n        self.assertEqual(fs['one'], ['clicked1'])\n        self.assertEqual(fs['two'], ['clicked2'])",
        "begin_line": 362,
        "end_line": 375,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_unicode_clickdata#377",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_unicode_clickdata(self)",
        "snippet": "    def test_from_response_unicode_clickdata(self):\n        response = _buildresponse(\n            u\"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"price in \\u00a3\" value=\"\\u00a3 1000\">\n            <input type=\"submit\" name=\"price in \\u20ac\" value=\"\\u20ac 2000\">\n            <input type=\"hidden\" name=\"poundsign\" value=\"\\u00a3\">\n            <input type=\"hidden\" name=\"eurosign\" value=\"\\u20ac\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response, \\\n                clickdata={'name': u'price in \\u00a3'})\n        fs = _qs(req)\n        self.assertTrue(fs[to_native_str(u'price in \\u00a3')])",
        "begin_line": 377,
        "end_line": 388,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_multiple_forms_clickdata#390",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_multiple_forms_clickdata(self)",
        "snippet": "    def test_from_response_multiple_forms_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form name=\"form1\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"field1\" value=\"value1\">\n            </form>\n            <form name=\"form2\">\n            <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n            <input type=\"hidden\" name=\"field2\" value=\"value2\">\n            </form>\n            \"\"\")\n        req = self.request_class.from_response(response, formname='form2', \\\n                clickdata={'name': 'clickable'})\n        fs = _qs(req)\n        self.assertEqual(fs['clickable'], ['clicked2'])\n        self.assertEqual(fs['field2'], ['value2'])\n        self.assertFalse('field1' in fs, fs)",
        "begin_line": 390,
        "end_line": 406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_override_clickable#408",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_override_clickable(self)",
        "snippet": "    def test_from_response_override_clickable(self):\n        response = _buildresponse('''<form><input type=\"submit\" name=\"clickme\" value=\"one\"> </form>''')\n        req = self.request_class.from_response(response, \\\n                formdata={'clickme': 'two'}, clickdata={'name': 'clickme'})\n        fs = _qs(req)\n        self.assertEqual(fs['clickme'], ['two'])",
        "begin_line": 408,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_dont_click#415",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_dont_click(self)",
        "snippet": "    def test_from_response_dont_click(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, dont_click=True)\n        fs = _qs(r1)\n        self.assertFalse('clickable1' in fs, fs)\n        self.assertFalse('clickable2' in fs, fs)",
        "begin_line": 415,
        "end_line": 426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_ambiguous_clickdata#428",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_ambiguous_clickdata(self)",
        "snippet": "    def test_from_response_ambiguous_clickdata(self):\n        response = _buildresponse(\n            \"\"\"\n            <form action=\"get.php\" method=\"GET\">\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"3\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, clickdata={'type': 'submit'})",
        "begin_line": 428,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_non_matching_clickdata#440",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_non_matching_clickdata(self)",
        "snippet": "    def test_from_response_non_matching_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n            </form>\"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, clickdata={'nonexistent': 'notme'})",
        "begin_line": 440,
        "end_line": 446,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_nr_index_clickdata#448",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_nr_index_clickdata(self)",
        "snippet": "    def test_from_response_nr_index_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n            <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n            </form>\n            \"\"\")\n        req = self.request_class.from_response(response, clickdata={'nr': 1})\n        fs = _qs(req)\n        self.assertIn('clickable2', fs)\n        self.assertNotIn('clickable1', fs)",
        "begin_line": 448,
        "end_line": 458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_invalid_nr_index_clickdata#460",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_invalid_nr_index_clickdata(self)",
        "snippet": "    def test_from_response_invalid_nr_index_clickdata(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n            </form>\n            \"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, clickdata={'nr': 1})",
        "begin_line": 460,
        "end_line": 467,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_errors_noform#469",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_errors_noform(self)",
        "snippet": "    def test_from_response_errors_noform(self):\n        response = _buildresponse(\"\"\"<html></html>\"\"\")\n        self.assertRaises(ValueError, self.request_class.from_response, response)",
        "begin_line": 469,
        "end_line": 471,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_invalid_html5#473",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_invalid_html5(self)",
        "snippet": "    def test_from_response_invalid_html5(self):\n        response = _buildresponse(\"\"\"<!DOCTYPE html><body></html><form>\"\"\"\n                                  \"\"\"<input type=\"text\" name=\"foo\" value=\"xxx\">\"\"\"\n                                  \"\"\"</form></body></html>\"\"\")\n        req = self.request_class.from_response(response, formdata={'bar': 'buz'})\n        fs = _qs(req)\n        self.assertEqual(fs, {'foo': ['xxx'], 'bar': ['buz']})",
        "begin_line": 473,
        "end_line": 479,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_errors_formnumber#481",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_errors_formnumber(self)",
        "snippet": "    def test_from_response_errors_formnumber(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"get.php\" method=\"GET\">\n            <input type=\"hidden\" name=\"test\" value=\"val1\">\n            <input type=\"hidden\" name=\"test\" value=\"val2\">\n            <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n            </form>\"\"\")\n        self.assertRaises(IndexError, self.request_class.from_response, response, formnumber=1)",
        "begin_line": 481,
        "end_line": 488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_noformname#490",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_noformname(self)",
        "snippet": "    def test_from_response_noformname(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formdata={'two':'3'})\n        self.assertEqual(r1.method, 'POST')\n        self.assertEqual(r1.headers['Content-type'], b'application/x-www-form-urlencoded')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'one': [b'1'], b'two': [b'3']})",
        "begin_line": 490,
        "end_line": 500,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_exists#502",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_exists(self)",
        "snippet": "    def test_from_response_formname_exists(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formname=\"form2\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'four': [b'4'], b'three': [b'3']})",
        "begin_line": 502,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexist#517",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexist(self)",
        "snippet": "    def test_from_response_formname_notexist(self):\n        response = _buildresponse(\n            \"\"\"<form name=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formname=\"form3\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'one': [b'1']})",
        "begin_line": 517,
        "end_line": 528,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_errors_formnumber#530",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_errors_formnumber(self)",
        "snippet": "    def test_from_response_formname_errors_formnumber(self):\n        response = _buildresponse(\n            \"\"\"<form name=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        self.assertRaises(IndexError, self.request_class.from_response, \\\n                          response, formname=\"form3\", formnumber=2)",
        "begin_line": 530,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formid_exists#541",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formid_exists(self)",
        "snippet": "    def test_from_response_formid_exists(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form id=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formid=\"form2\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'four': [b'4'], b'three': [b'3']})",
        "begin_line": 541,
        "end_line": 554,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexists_fallback_formid#556",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formname_notexists_fallback_formid(self)",
        "snippet": "    def test_from_response_formname_notexists_fallback_formid(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form id=\"form2\" name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formname=\"form3\", formid=\"form2\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'four': [b'4'], b'three': [b'3']})",
        "begin_line": 556,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formid_notexist#571",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formid_notexist(self)",
        "snippet": "    def test_from_response_formid_notexist(self):\n        response = _buildresponse(\n            \"\"\"<form id=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form id=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formid=\"form3\")\n        self.assertEqual(r1.method, 'POST')\n        fs = _qs(r1)\n        self.assertEqual(fs, {b'one': [b'1']})",
        "begin_line": 571,
        "end_line": 582,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_formid_errors_formnumber#584",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_formid_errors_formnumber(self)",
        "snippet": "    def test_from_response_formid_errors_formnumber(self):\n        response = _buildresponse(\n            \"\"\"<form id=\"form1\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            </form>\n            <form id=\"form2\" name=\"form2\" action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\"\"\")\n        self.assertRaises(IndexError, self.request_class.from_response, \\\n                          response, formid=\"form3\", formnumber=2)",
        "begin_line": 584,
        "end_line": 593,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_select#595",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_select(self)",
        "snippet": "    def test_from_response_select(self):\n        res = _buildresponse(\n            '''<form>\n            <select name=\"i1\">\n                <option value=\"i1v1\">option 1</option>\n                <option value=\"i1v2\" selected>option 2</option>\n            </select>\n            <select name=\"i2\">\n                <option value=\"i2v1\">option 1</option>\n                <option value=\"i2v2\">option 2</option>\n            </select>\n            <select>\n                <option value=\"i3v1\">option 1</option>\n                <option value=\"i3v2\">option 2</option>\n            </select>\n            <select name=\"i4\" multiple>\n                <option value=\"i4v1\">option 1</option>\n                <option value=\"i4v2\" selected>option 2</option>\n                <option value=\"i4v3\" selected>option 3</option>\n            </select>\n            <select name=\"i5\" multiple>\n                <option value=\"i5v1\">option 1</option>\n                <option value=\"i5v2\">option 2</option>\n            </select>\n            <select name=\"i6\"></select>\n            <select name=\"i7\"/>\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['i1v2'], 'i2': ['i2v1'], 'i4': ['i4v2', 'i4v3']})",
        "begin_line": 595,
        "end_line": 624,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_radio#626",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_radio(self)",
        "snippet": "    def test_from_response_radio(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"radio\" name=\"i1\" value=\"i1v1\">\n            <input type=\"radio\" name=\"i1\" value=\"iv2\" checked>\n            <input type=\"radio\" name=\"i2\" checked>\n            <input type=\"radio\" name=\"i2\">\n            <input type=\"radio\" name=\"i3\" value=\"i3v1\">\n            <input type=\"radio\" name=\"i3\">\n            <input type=\"radio\" value=\"i4v1\">\n            <input type=\"radio\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['iv2'], 'i2': ['on']})",
        "begin_line": 626,
        "end_line": 640,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_checkbox#642",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_checkbox(self)",
        "snippet": "    def test_from_response_checkbox(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"checkbox\" name=\"i1\" value=\"i1v1\">\n            <input type=\"checkbox\" name=\"i1\" value=\"iv2\" checked>\n            <input type=\"checkbox\" name=\"i2\" checked>\n            <input type=\"checkbox\" name=\"i2\">\n            <input type=\"checkbox\" name=\"i3\" value=\"i3v1\">\n            <input type=\"checkbox\" name=\"i3\">\n            <input type=\"checkbox\" value=\"i4v1\">\n            <input type=\"checkbox\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['iv2'], 'i2': ['on']})",
        "begin_line": 642,
        "end_line": 656,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_input_text#658",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_input_text(self)",
        "snippet": "    def test_from_response_input_text(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"text\" name=\"i1\" value=\"i1v1\">\n            <input type=\"text\" name=\"i2\">\n            <input type=\"text\" value=\"i3v1\">\n            <input type=\"text\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': ['']})",
        "begin_line": 658,
        "end_line": 668,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_input_hidden#670",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_input_hidden(self)",
        "snippet": "    def test_from_response_input_hidden(self):\n        res = _buildresponse(\n            '''<form>\n            <input type=\"hidden\" name=\"i1\" value=\"i1v1\">\n            <input type=\"hidden\" name=\"i2\">\n            <input type=\"hidden\" value=\"i3v1\">\n            <input type=\"hidden\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': ['']})",
        "begin_line": 670,
        "end_line": 680,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_input_textarea#682",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_input_textarea(self)",
        "snippet": "    def test_from_response_input_textarea(self):\n        res = _buildresponse(\n            '''<form>\n            <textarea name=\"i1\">i1v</textarea>\n            <textarea name=\"i2\"></textarea>\n            <textarea name=\"i3\"/>\n            <textarea>i4v</textarea>\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(fs, {'i1': ['i1v'], 'i2': [''], 'i3': ['']})",
        "begin_line": 682,
        "end_line": 692,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_descendants#694",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_descendants(self)",
        "snippet": "    def test_from_response_descendants(self):\n        res = _buildresponse(\n            '''<form>\n            <div>\n              <fieldset>\n                <input type=\"text\" name=\"i1\">\n                <select name=\"i2\">\n                    <option value=\"v1\" selected>\n                </select>\n              </fieldset>\n              <input type=\"radio\" name=\"i3\" value=\"i3v2\" checked>\n              <input type=\"checkbox\" name=\"i4\" value=\"i4v2\" checked>\n              <textarea name=\"i5\"></textarea>\n              <input type=\"hidden\" name=\"h1\" value=\"h1v\">\n              </div>\n            <input type=\"hidden\" name=\"h2\" value=\"h2v\">\n            </form>''')\n        req = self.request_class.from_response(res)\n        fs = _qs(req)\n        self.assertEqual(set(fs), set(['h2', 'i2', 'i1', 'i3', 'h1', 'i5', 'i4']))",
        "begin_line": 694,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_xpath#715",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_xpath(self)",
        "snippet": "    def test_from_response_xpath(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"one\" value=\"1\">\n            <input type=\"hidden\" name=\"two\" value=\"2\">\n            </form>\n            <form action=\"post2.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"three\" value=\"3\">\n            <input type=\"hidden\" name=\"four\" value=\"4\">\n            </form>\"\"\")\n        r1 = self.request_class.from_response(response, formxpath=\"//form[@action='post.php']\")\n        fs = _qs(r1)\n        self.assertEqual(fs[b'one'], [b'1'])\n\n        r1 = self.request_class.from_response(response, formxpath=\"//form/input[@name='four']\")\n        fs = _qs(r1)\n        self.assertEqual(fs[b'three'], [b'3'])\n\n        self.assertRaises(ValueError, self.request_class.from_response,\n                          response, formxpath=\"//form/input[@name='abc']\")",
        "begin_line": 715,
        "end_line": 734,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_button_submit#736",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_button_submit(self)",
        "snippet": "    def test_from_response_button_submit(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <button type=\"submit\" name=\"button1\" value=\"submit1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b'submit1'])",
        "begin_line": 736,
        "end_line": 751,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_button_notype#753",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_button_notype(self)",
        "snippet": "    def test_from_response_button_notype(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <button name=\"button1\" value=\"submit1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b'submit1'])",
        "begin_line": 753,
        "end_line": 768,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_submit_novalue#770",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_submit_novalue(self)",
        "snippet": "    def test_from_response_submit_novalue(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <input type=\"submit\" name=\"button1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b''])",
        "begin_line": 770,
        "end_line": 785,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_from_response_button_novalue#787",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_from_response_button_novalue(self)",
        "snippet": "    def test_from_response_button_novalue(self):\n        response = _buildresponse(\n            \"\"\"<form action=\"post.php\" method=\"POST\">\n            <input type=\"hidden\" name=\"test1\" value=\"val1\">\n            <input type=\"hidden\" name=\"test2\" value=\"val2\">\n            <button type=\"submit\" name=\"button1\">Submit</button>\n            </form>\"\"\",\n            url=\"http://www.example.com/this/list.html\")\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.method, 'POST')\n        self.assertEqual(req.headers['Content-type'], b'application/x-www-form-urlencoded')\n        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n        fs = _qs(req)\n        self.assertEqual(fs[b'test1'], [b'val1'])\n        self.assertEqual(fs[b'test2'], [b'val2'])\n        self.assertEqual(fs[b'button1'], [b''])",
        "begin_line": 787,
        "end_line": 802,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.FormRequestTest.test_html_base_form_action#804",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.FormRequestTest",
        "signature": "tests.test_http_request.FormRequestTest.test_html_base_form_action(self)",
        "snippet": "    def test_html_base_form_action(self):\n        response = _buildresponse(\n            \"\"\"\n            <html>\n                <head>\n                    <base href=\"http://b.com/\">\n                </head>\n                <body>\n                    <form action=\"test_form\">\n                    </form>\n                </body>\n            </html>\n            \"\"\",\n            url='http://a.com/'\n        )\n        req = self.request_class.from_response(response)\n        self.assertEqual(req.url, 'http://b.com/test_form')",
        "begin_line": 804,
        "end_line": 820,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request._buildresponse#823",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request",
        "signature": "tests.test_http_request._buildresponse(body, **kwargs)",
        "snippet": "def _buildresponse(body, **kwargs):\n    kwargs.setdefault('body', body)\n    kwargs.setdefault('url', 'http://example.com')\n    kwargs.setdefault('encoding', 'utf-8')\n    return HtmlResponse(**kwargs)",
        "begin_line": 823,
        "end_line": 827,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request._qs#829",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request",
        "signature": "tests.test_http_request._qs(req)",
        "snippet": "def _qs(req):\n    if req.method == 'POST':\n        qs = req.body\n    else:\n        qs = req.url.partition('?')[2]\n    return cgi.parse_qs(qs, True)",
        "begin_line": 829,
        "end_line": 834,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.XmlRpcRequestTest._test_request#843",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.XmlRpcRequestTest",
        "signature": "tests.test_http_request.XmlRpcRequestTest._test_request(self, **kwargs)",
        "snippet": "    def _test_request(self, **kwargs):\n        r = self.request_class('http://scrapytest.org/rpc2', **kwargs)\n        self.assertEqual(r.headers[b'Content-Type'], b'text/xml')\n        self.assertEqual(r.body, to_bytes(xmlrpclib.dumps(**kwargs)))\n        self.assertEqual(r.method, 'POST')\n        self.assertEqual(r.encoding, kwargs.get('encoding', 'utf-8'))\n        self.assertTrue(r.dont_filter, True)",
        "begin_line": 843,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.XmlRpcRequestTest.test_xmlrpc_dumps#851",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.XmlRpcRequestTest",
        "signature": "tests.test_http_request.XmlRpcRequestTest.test_xmlrpc_dumps(self)",
        "snippet": "    def test_xmlrpc_dumps(self):\n        self._test_request(params=('value',))\n        self._test_request(params=('username', 'password'), methodname='login')\n        self._test_request(params=('response', ), methodresponse='login')\n        self._test_request(params=(u'pas\\xa3',), encoding='utf-8')\n        self._test_request(params=(None,), allow_none=1)\n        self.assertRaises(TypeError, self._test_request)\n        self.assertRaises(TypeError, self._test_request, params=(None,))",
        "begin_line": 851,
        "end_line": 858,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_request.XmlRpcRequestTest.test_latin1#861",
        "src_path": "tests/test_http_request.py",
        "class_name": "tests.test_http_request.XmlRpcRequestTest",
        "signature": "tests.test_http_request.XmlRpcRequestTest.test_latin1(self)",
        "snippet": "    def test_latin1(self):\n        self._test_request(params=(u'pas\\xa3',), encoding='latin')",
        "begin_line": 861,
        "end_line": 862,
        "comment": "",
        "is_bug": false
    }
]