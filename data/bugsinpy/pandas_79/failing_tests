coverage run -m pytest pandas/tests/indexes/datetimes/test_indexing.py::TestDatetimeIndex::test_get_loc
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/indexes/datetimes/test_indexing.py F                        [100%]

=================================== FAILURES ===================================
________________________ TestDatetimeIndex.test_get_loc ________________________

self = <pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex object at 0x7fc97446bac0>

    def test_get_loc(self):
        idx = pd.date_range("2000-01-01", periods=3)
    
        for method in [None, "pad", "backfill", "nearest"]:
            assert idx.get_loc(idx[1], method) == 1
            assert idx.get_loc(idx[1].to_pydatetime(), method) == 1
            assert idx.get_loc(str(idx[1]), method) == 1
    
            if method is not None:
                assert (
                    idx.get_loc(idx[1], method, tolerance=pd.Timedelta("0 days")) == 1
                )
    
        assert idx.get_loc("2000-01-01", method="nearest") == 0
        assert idx.get_loc("2000-01-01T12", method="nearest") == 1
    
        assert idx.get_loc("2000-01-01T12", method="nearest", tolerance="1 day") == 1
        assert (
            idx.get_loc("2000-01-01T12", method="nearest", tolerance=pd.Timedelta("1D"))
            == 1
        )
        assert (
            idx.get_loc(
                "2000-01-01T12", method="nearest", tolerance=np.timedelta64(1, "D")
            )
            == 1
        )
        assert (
            idx.get_loc("2000-01-01T12", method="nearest", tolerance=timedelta(1)) == 1
        )
        with pytest.raises(ValueError, match="unit abbreviation w/o a number"):
            idx.get_loc("2000-01-01T12", method="nearest", tolerance="foo")
        with pytest.raises(KeyError, match="'2000-01-01T03'"):
            idx.get_loc("2000-01-01T03", method="nearest", tolerance="2 hours")
        with pytest.raises(
            ValueError, match="tolerance size must match target index size"
        ):
            idx.get_loc(
                "2000-01-01",
                method="nearest",
                tolerance=[
                    pd.Timedelta("1day").to_timedelta64(),
                    pd.Timedelta("1day").to_timedelta64(),
                ],
            )
    
        assert idx.get_loc("2000", method="nearest") == slice(0, 3)
        assert idx.get_loc("2000-01", method="nearest") == slice(0, 3)
    
        assert idx.get_loc("1999", method="nearest") == 0
        assert idx.get_loc("2001", method="nearest") == 2
    
        with pytest.raises(KeyError, match="'1999'"):
            idx.get_loc("1999", method="pad")
        with pytest.raises(KeyError, match="'2001'"):
            idx.get_loc("2001", method="backfill")
    
        with pytest.raises(KeyError, match="'foobar'"):
            idx.get_loc("foobar")
        with pytest.raises(InvalidIndexError, match=r"slice\(None, 2, None\)"):
>           idx.get_loc(slice(2))

pandas/tests/indexes/datetimes/test_indexing.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/datetimes.py:718: in get_loc
    return Index.get_loc(self, key, method, tolerance)
pandas/core/indexes/base.py:2901: in get_loc
    return self._engine.get_loc(key)
pandas/_libs/index.pyx:442: in pandas._libs.index.DatetimeEngine.get_loc
    cpdef get_loc(self, object val):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError
E   TypeError

pandas/_libs/index.pyx:449: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/datetimes/test_indexing.py::TestDatetimeIndex::test_get_loc
============================== 1 failed in 0.43s ===============================
