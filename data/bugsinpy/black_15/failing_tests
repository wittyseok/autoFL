coverage run -m unittest -q tests.test_black.BlackTestCase.test_fmtonoff2
Expected tree:
file_input
  simple_stmt
    import_name
      NAME 'import'
      NAME ' ' 'pytest'
    /import_name
    NEWLINE '\n'
  /simple_stmt
  simple_stmt
    expr_stmt
      NAME '\n' 'TmSt'
      EQUAL ' ' '='
      NUMBER ' ' '1'
    /expr_stmt
    NEWLINE '\n'
  /simple_stmt
  simple_stmt
    expr_stmt
      NAME 'TmEx'
      EQUAL ' ' '='
      NUMBER ' ' '2'
    /expr_stmt
    NEWLINE '\n'
  /simple_stmt
  decorated
    decorator
      AT '\n# fmt: off\n\n# Test data:\n#   Position, Volume, State, TmSt/TmEx/None, [call, [arg1...]]\n\n' '@'
      dotted_name
        NAME 'pytest'
        DOT '.'
        NAME 'mark'
        DOT '.'
        NAME 'parametrize'
      /dotted_name
      LPAR '('
      arglist
        STRING "'test'"
        COMMA ','
        atom
          LSQB ' ' '['
          listmaker
            atom
              LSQB "\n\n    # Test don't manage the volume\n    " '['
              atom
                LPAR '\n        ' '('
                testlist_gexp
                  STRING "'stuff'"
                  COMMA ','
                  STRING ' ' "'in'"
                /testlist_gexp
                RPAR ')'
              /atom
              RSQB '\n    ' ']'
            /atom
            COMMA ','
          /listmaker
          RSQB '\n' ']'
        /atom
      /arglist
      RPAR ')'
      NEWLINE '\n'
    /decorator
    funcdef
      NAME 'def'
      NAME ' ' 'test_fader'
      parameters
        LPAR '('
        NAME 'test'
        RPAR ')'
      /parameters
      COLON ':'
      suite
        NEWLINE '\n'
        INDENT '    '
        simple_stmt
          NAME 'pass'
          NEWLINE '\n'
        /simple_stmt
        DEDENT ''
      /suite
    /funcdef
  /decorated
  funcdef
    NAME '\n' 'def'
    NAME ' ' 'check_fader'
    parameters
      LPAR '('
      NAME 'test'
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT '    '
      simple_stmt
        NAME 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n' 'def'
    NAME ' ' 'test_calculate_fades'
    parameters
      LPAR '('
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT '    '
      simple_stmt
        expr_stmt
          NAME 'calcs'
          EQUAL ' ' '='
          atom
            LSQB ' ' '['
            listmaker
              atom
                LPAR '\n        # one is zero/none\n        ' '('
                testlist_gexp
                  NUMBER '0'
                  COMMA ','
                  NUMBER ' ' '4'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '10'
                  COMMA ','
                  NUMBER '        ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '6'
                  COMMA ','
                  NUMBER ' ' '10'
                /testlist_gexp
                RPAR ')'
              /atom
              COMMA ','
              atom
                LPAR '\n        ' '('
                testlist_gexp
                  NAME 'None'
                  COMMA ','
                  NUMBER ' ' '4'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '10'
                  COMMA ','
                  NUMBER '     ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '6'
                  COMMA ','
                  NUMBER ' ' '10'
                /testlist_gexp
                RPAR ')'
              /atom
              COMMA ','
            /listmaker
            RSQB '\n    ' ']'
          /atom
        /expr_stmt
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER '\n# fmt: on\n' ''
/file_input
Actual tree:
file_input
  simple_stmt
    import_name
      NAME 'import'
      NAME ' ' 'pytest'
    /import_name
    NEWLINE '\n'
  /simple_stmt
  simple_stmt
    expr_stmt
      NAME '\n' 'TmSt'
      EQUAL ' ' '='
      NUMBER ' ' '1'
    /expr_stmt
    NEWLINE '\n'
  /simple_stmt
  simple_stmt
    expr_stmt
      NAME 'TmEx'
      EQUAL ' ' '='
      NUMBER ' ' '2'
    /expr_stmt
    NEWLINE '\n'
  /simple_stmt
  decorated
    decorator
      AT '\n# fmt: off\n\n# Test data:\n#   Position, Volume, State, TmSt/TmEx/None, [call, [arg1...]]\n\n' '@'
      dotted_name
        NAME 'pytest'
        DOT '.'
        NAME 'mark'
        DOT '.'
        NAME 'parametrize'
      /dotted_name
      LPAR '('
      arglist
        STRING "'test'"
        COMMA ','
        atom
          LSQB ' ' '['
          listmaker
            atom
              LSQB "\n\n    # Test don't manage the volume\n    " '['
              atom
                LPAR '\n        ' '('
                testlist_gexp
                  STRING "'stuff'"
                  COMMA ','
                  STRING ' ' "'in'"
                /testlist_gexp
                RPAR ')'
              /atom
              RSQB '\n    ' ']'
            /atom
            COMMA ','
          /listmaker
          RSQB '\n' ']'
        /atom
      /arglist
      RPAR ')'
      NEWLINE '\n'
    /decorator
    funcdef
      NAME 'def'
      NAME ' ' 'test_fader'
      parameters
        LPAR '('
        NAME 'test'
        RPAR ')'
      /parameters
      COLON ':'
      suite
        NEWLINE '\n'
        INDENT '    '
        simple_stmt
          NAME 'pass'
          NEWLINE '\n'
        /simple_stmt
        DEDENT ''
      /suite
    /funcdef
  /decorated
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'check_fader'
    parameters
      LPAR '('
      NAME 'test'
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT '    '
      simple_stmt
        NAME 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'test_calculate_fades'
    parameters
      LPAR '('
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT '    '
      simple_stmt
        expr_stmt
          NAME 'calcs'
          EQUAL ' ' '='
          atom
            LSQB ' ' '['
            listmaker
              atom
                LPAR '\n        # one is zero/none\n        ' '('
                testlist_gexp
                  NUMBER '0'
                  COMMA ','
                  NUMBER ' ' '4'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '10'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '6'
                  COMMA ','
                  NUMBER ' ' '10'
                /testlist_gexp
                RPAR ')'
              /atom
              COMMA ','
              atom
                LPAR '\n        ' '('
                testlist_gexp
                  NAME 'None'
                  COMMA ','
                  NUMBER ' ' '4'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '10'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '0'
                  COMMA ','
                  NUMBER ' ' '6'
                  COMMA ','
                  NUMBER ' ' '10'
                /testlist_gexp
                RPAR ')'
              /atom
              COMMA ','
            /listmaker
            RSQB '\n    ' ']'
          /atom
        /expr_stmt
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER '\n\n# fmt: on\n' ''
/file_input
======================================================================
FAIL: test_fmtonoff2 (tests.test_black.BlackTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/conda/envs/6741dac5d765976207f88b8af094fa3c/lib/python3.8/unittest/mock.py", line 1325, in patched
    return func(*newargs, **newkeywargs)
  File "/home/user/BugsInPy/temp/projects/black/tests/test_black.py", line 407, in test_fmtonoff2
    self.assertFormatEqual(expected, actual)
  File "/home/user/BugsInPy/temp/projects/black/tests/test_black.py", line 122, in assertFormatEqual
    self.assertEqual(expected, actual)
AssertionError: "impo[277 chars]s\n\ndef check_fader(test):\n    pass\n\ndef t[177 chars]on\n" != "impo[277 chars]s\n\n\ndef check_fader(test):\n    pass\n\n\nd[172 chars]on\n"
  import pytest
  
  TmSt = 1
  TmEx = 2
  
  # fmt: off
  
  # Test data:
  #   Position, Volume, State, TmSt/TmEx/None, [call, [arg1...]]
  
  @pytest.mark.parametrize('test', [
  
      # Test don't manage the volume
      [
          ('stuff', 'in')
      ],
  ])
  def test_fader(test):
      pass
  
+ 
  def check_fader(test):
      pass
+ 
  
  def test_calculate_fades():
      calcs = [
          # one is zero/none
-         (0, 4, 0, 0, 10,        0, 0, 6, 10),
?                          -------
+         (0, 4, 0, 0, 10, 0, 0, 6, 10),
-         (None, 4, 0, 0, 10,     0, 0, 6, 10),
?                             ----
+         (None, 4, 0, 0, 10, 0, 0, 6, 10),
      ]
  
+ 
  # fmt: on


----------------------------------------------------------------------
Ran 1 test in 0.054s

FAILED (failures=1)
