[
    {
        "name": "tqdm.tests.tests_synchronisation.FakeSleep.__init__#13",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation.FakeSleep",
        "signature": "tqdm.tests.tests_synchronisation.FakeSleep.__init__(self, dtimer)",
        "snippet": "    def __init__(self, dtimer):\n        self.dtimer = dtimer",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.FakeSleep.sleep#16",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation.FakeSleep",
        "signature": "tqdm.tests.tests_synchronisation.FakeSleep.sleep(self, t)",
        "snippet": "    def sleep(self, t):\n        end = t + self.dtimer.t\n        while self.dtimer.t < end:\n            sleep(0.0000001)  # sleep a bit to interrupt (instead of pass)",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.make_create_fake_sleep_event#26",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.make_create_fake_sleep_event(sleep)",
        "snippet": "def make_create_fake_sleep_event(sleep):\n    def wait(self, timeout=None):\n        if timeout is not None:\n            sleep(timeout)\n        return self.is_set()\n\n    def create_fake_sleep_event():\n        event = Event()\n        event.wait = wait\n        return event\n\n    return create_fake_sleep_event",
        "begin_line": 26,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.wait#27",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.wait(self, timeout=None)",
        "snippet": "    def wait(self, timeout=None):\n        if timeout is not None:\n            sleep(timeout)\n        return self.is_set()",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.create_fake_sleep_event#32",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.create_fake_sleep_event()",
        "snippet": "    def create_fake_sleep_event():\n        event = Event()\n        event.wait = wait\n        return event",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.incr#40",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.incr(x)",
        "snippet": "def incr(x):\n    return x + 1",
        "begin_line": 40,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.test_monitor_thread#45",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.test_monitor_thread()",
        "snippet": "def test_monitor_thread():\n    \"\"\"Test dummy monitoring thread\"\"\"\n    maxinterval = 10\n\n    # Setup a discrete timer\n    timer = DiscreteTimer()\n    TMonitor._time = timer.time\n    # And a fake sleeper\n    sleeper = FakeSleep(timer)\n    TMonitor._event = make_create_fake_sleep_event(sleeper.sleep)\n\n    # Instanciate the monitor\n    monitor = TMonitor(FakeTqdm, maxinterval)\n    # Test if alive, then killed\n    assert monitor.report()\n    monitor.exit()\n    timer.sleep(maxinterval * 2)  # need to go out of the sleep to die\n    assert not monitor.report()\n    # assert not monitor.is_alive()  # not working dunno why, thread not killed\n    del monitor",
        "begin_line": 45,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.test_monitoring_and_cleanup#68",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.test_monitoring_and_cleanup()",
        "snippet": "def test_monitoring_and_cleanup():\n    \"\"\"Test for stalled tqdm instance and monitor deletion\"\"\"\n    # Note: should fix miniters for these tests, else with dynamic_miniters\n    # it's too complicated to handle with monitoring update and maxinterval...\n    maxinterval = 2\n\n    total = 1000\n    # Setup a discrete timer\n    timer = DiscreteTimer()\n    # And a fake sleeper\n    sleeper = FakeSleep(timer)\n    # Setup TMonitor to use the timer\n    TMonitor._time = timer.time\n    TMonitor._event = make_create_fake_sleep_event(sleeper.sleep)\n    # Set monitor interval\n    tqdm.monitor_interval = maxinterval\n    with closing(StringIO()) as our_file:\n        with tqdm(total=total, file=our_file, miniters=500, mininterval=0.1,\n                  maxinterval=maxinterval) as t:\n            cpu_timify(t, timer)\n            # Do a lot of iterations in a small timeframe\n            # (smaller than monitor interval)\n            timer.sleep(maxinterval / 2)  # monitor won't wake up\n            t.update(500)\n            # check that our fixed miniters is still there\n            assert t.miniters == 500\n            # Then do 1 it after monitor interval, so that monitor kicks in\n            timer.sleep(maxinterval * 2)\n            t.update(1)\n            # Wait for the monitor to get out of sleep's loop and update tqdm..\n            timeend = timer.time()\n            while not (t.monitor.woken >= timeend and t.miniters == 1):\n                timer.sleep(1)  # Force monitor to wake up if it woken too soon\n                sleep(0.000001)  # sleep to allow interrupt (instead of pass)\n            assert t.miniters == 1  # check that monitor corrected miniters\n            # Note: at this point, there may be a race condition: monitor saved\n            # current woken time but timer.sleep() happen just before monitor\n            # sleep. To fix that, either sleep here or increase time in a loop\n            # to ensure that monitor wakes up at some point.\n\n            # Try again but already at miniters = 1 so nothing will be done\n            timer.sleep(maxinterval * 2)\n            t.update(2)\n            timeend = timer.time()\n            while not (t.monitor.woken >= timeend):\n                timer.sleep(1)  # Force monitor to wake up if it woken too soon\n                sleep(0.000001)\n            # Wait for the monitor to get out of sleep's loop and update tqdm..\n            assert t.miniters == 1  # check that monitor corrected miniters\n\n    # Check that class var monitor is deleted if no instance left\n    tqdm.monitor_interval = 10\n    assert tqdm.monitor is None",
        "begin_line": 68,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.test_monitoring_multi#124",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.test_monitoring_multi()",
        "snippet": "def test_monitoring_multi():\n    \"\"\"Test on multiple bars, one not needing miniters adjustment\"\"\"\n    # Note: should fix miniters for these tests, else with dynamic_miniters\n    # it's too complicated to handle with monitoring update and maxinterval...\n    maxinterval = 2\n\n    total = 1000\n    # Setup a discrete timer\n    timer = DiscreteTimer()\n    # And a fake sleeper\n    sleeper = FakeSleep(timer)\n    # Setup TMonitor to use the timer\n    TMonitor._time = timer.time\n    TMonitor._event = make_create_fake_sleep_event(sleeper.sleep)\n    # Set monitor interval\n    tqdm.monitor_interval = maxinterval\n    with closing(StringIO()) as our_file:\n        with tqdm(total=total, file=our_file, miniters=500, mininterval=0.1,\n                  maxinterval=maxinterval) as t1:\n            # Set high maxinterval for t2 so monitor does not need to adjust it\n            with tqdm(total=total, file=our_file, miniters=500, mininterval=0.1,\n                      maxinterval=1E5) as t2:\n                cpu_timify(t1, timer)\n                cpu_timify(t2, timer)\n                # Do a lot of iterations in a small timeframe\n                timer.sleep(maxinterval / 2)\n                t1.update(500)\n                t2.update(500)\n                assert t1.miniters == 500\n                assert t2.miniters == 500\n                # Then do 1 it after monitor interval, so that monitor kicks in\n                timer.sleep(maxinterval * 2)\n                t1.update(1)\n                t2.update(1)\n                # Wait for the monitor to get out of sleep and update tqdm\n                timeend = timer.time()\n                while not (t1.monitor.woken >= timeend and t1.miniters == 1):\n                    timer.sleep(1)\n                    sleep(0.000001)\n                assert t1.miniters == 1  # check that monitor corrected miniters\n                assert t2.miniters == 500  # check that t2 was not adjusted\n\n    # Check that class var monitor is deleted if no instance left\n    tqdm.monitor_interval = 10\n    assert tqdm.monitor is None",
        "begin_line": 124,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tqdm.tests.tests_synchronisation.test_imap#172",
        "src_path": "tqdm/tests/tests_synchronisation.py",
        "class_name": "tqdm.tests.tests_synchronisation",
        "signature": "tqdm.tests.tests_synchronisation.test_imap()",
        "snippet": "def test_imap():\n    \"\"\"Test multiprocessing.Pool\"\"\"\n    try:\n        from multiprocessing import Pool\n    except ImportError:\n        raise SkipTest\n\n    pool = Pool()\n    res = list(tqdm(pool.imap(incr, range(100)), disable=True))\n    assert res[-1] == 100",
        "begin_line": 172,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    }
]