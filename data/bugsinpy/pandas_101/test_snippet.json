[
    {
        "name": "pandas.tests.dtypes.test_common.to_ea_dtypes#32",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.to_ea_dtypes(dtypes)",
        "snippet": "def to_ea_dtypes(dtypes):\n    \"\"\" convert list of string dtypes to EA dtype \"\"\"\n    return [getattr(pd, dt + \"Dtype\") for dt in dtypes]",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.to_numpy_dtypes#37",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.to_numpy_dtypes(dtypes)",
        "snippet": "def to_numpy_dtypes(dtypes):\n    \"\"\" convert list of string dtypes to numpy dtype \"\"\"\n    return [getattr(np, dt) for dt in dtypes if isinstance(dt, str)]",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_invalid_dtype_error#47",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_invalid_dtype_error(self, box)",
        "snippet": "    def test_invalid_dtype_error(self, box):\n        with pytest.raises(TypeError, match=\"not understood\"):\n            com.pandas_dtype(box)",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_pandas_dtype_valid#64",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_pandas_dtype_valid(self, dtype)",
        "snippet": "    def test_pandas_dtype_valid(self, dtype):\n        assert com.pandas_dtype(dtype) == dtype",
        "begin_line": 64,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_dtype#70",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_dtype(self, dtype)",
        "snippet": "    def test_numpy_dtype(self, dtype):\n        assert com.pandas_dtype(dtype) == np.dtype(dtype)",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_string_dtype#73",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_string_dtype(self)",
        "snippet": "    def test_numpy_string_dtype(self):\n        # do not parse freq-like string as period dtype\n        assert com.pandas_dtype(\"U\") == np.dtype(\"U\")\n        assert com.pandas_dtype(\"S\") == np.dtype(\"S\")",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_datetimetz_dtype#86",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_datetimetz_dtype(self, dtype)",
        "snippet": "    def test_datetimetz_dtype(self, dtype):\n        assert com.pandas_dtype(dtype) == DatetimeTZDtype.construct_from_string(dtype)\n        assert com.pandas_dtype(dtype) == dtype",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_categorical_dtype#90",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_categorical_dtype(self)",
        "snippet": "    def test_categorical_dtype(self):\n        assert com.pandas_dtype(\"category\") == CategoricalDtype()",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.TestPandasDtype.test_period_dtype#104",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common.TestPandasDtype",
        "signature": "pandas.tests.dtypes.test_common.TestPandasDtype.test_period_dtype(self, dtype)",
        "snippet": "    def test_period_dtype(self, dtype):\n        assert com.pandas_dtype(dtype) is PeriodDtype(dtype)\n        assert com.pandas_dtype(dtype) == PeriodDtype(dtype)\n        assert com.pandas_dtype(dtype) == dtype",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_dtype_equal#124",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_dtype_equal(name1, dtype1, name2, dtype2)",
        "snippet": "def test_dtype_equal(name1, dtype1, name2, dtype2):\n\n    # match equal to self, but not equal to other\n    assert com.is_dtype_equal(dtype1, dtype1)\n    if name1 != name2:\n        assert not com.is_dtype_equal(dtype1, dtype2)",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_dtype_equal_strict#147",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_dtype_equal_strict(dtype1, dtype2)",
        "snippet": "def test_dtype_equal_strict(dtype1, dtype2):\n    assert not com.is_dtype_equal(dtype1, dtype2)",
        "begin_line": 147,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.get_is_dtype_funcs#151",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.get_is_dtype_funcs()",
        "snippet": "def get_is_dtype_funcs():\n    \"\"\"\n    Get all functions in pandas.core.dtypes.common that\n    begin with 'is_' and end with 'dtype'\n\n    \"\"\"\n\n    fnames = [f for f in dir(com) if (f.startswith(\"is_\") and f.endswith(\"dtype\"))]\n    return [getattr(com, fname) for fname in fnames]",
        "begin_line": 151,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_get_dtype_error_catch#163",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_get_dtype_error_catch(func)",
        "snippet": "def test_get_dtype_error_catch(func):\n    # see gh-15941\n    #\n    # No exception should be raised.\n\n    assert not func(None)",
        "begin_line": 163,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_object#171",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_object()",
        "snippet": "def test_is_object():\n    assert com.is_object_dtype(object)\n    assert com.is_object_dtype(np.array([], dtype=object))\n\n    assert not com.is_object_dtype(int)\n    assert not com.is_object_dtype(np.array([], dtype=int))\n    assert not com.is_object_dtype([1, 2, 3])",
        "begin_line": 171,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_sparse#183",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_sparse(check_scipy)",
        "snippet": "def test_is_sparse(check_scipy):\n    assert com.is_sparse(pd.SparseArray([1, 2, 3]))\n\n    assert not com.is_sparse(np.array([1, 2, 3]))\n\n    if check_scipy:\n        import scipy.sparse\n\n        assert not com.is_sparse(scipy.sparse.bsr_matrix([1, 2, 3]))",
        "begin_line": 183,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_scipy_sparse#195",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_scipy_sparse()",
        "snippet": "def test_is_scipy_sparse():\n    from scipy.sparse import bsr_matrix\n\n    assert com.is_scipy_sparse(bsr_matrix([1, 2, 3]))\n\n    assert not com.is_scipy_sparse(pd.SparseArray([1, 2, 3]))",
        "begin_line": 195,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_categorical#203",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_categorical()",
        "snippet": "def test_is_categorical():\n    cat = pd.Categorical([1, 2, 3])\n    assert com.is_categorical(cat)\n    assert com.is_categorical(pd.Series(cat))\n    assert com.is_categorical(pd.CategoricalIndex([1, 2, 3]))\n\n    assert not com.is_categorical([1, 2, 3])",
        "begin_line": 203,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetime64_dtype#212",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetime64_dtype()",
        "snippet": "def test_is_datetime64_dtype():\n    assert not com.is_datetime64_dtype(object)\n    assert not com.is_datetime64_dtype([1, 2, 3])\n    assert not com.is_datetime64_dtype(np.array([], dtype=int))\n\n    assert com.is_datetime64_dtype(np.datetime64)\n    assert com.is_datetime64_dtype(np.array([], dtype=np.datetime64))",
        "begin_line": 212,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetime64tz_dtype#221",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetime64tz_dtype()",
        "snippet": "def test_is_datetime64tz_dtype():\n    assert not com.is_datetime64tz_dtype(object)\n    assert not com.is_datetime64tz_dtype([1, 2, 3])\n    assert not com.is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))\n    assert com.is_datetime64tz_dtype(pd.DatetimeIndex([\"2000\"], tz=\"US/Eastern\"))",
        "begin_line": 221,
        "end_line": 225,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_timedelta64_dtype#228",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_timedelta64_dtype()",
        "snippet": "def test_is_timedelta64_dtype():\n    assert not com.is_timedelta64_dtype(object)\n    assert not com.is_timedelta64_dtype(None)\n    assert not com.is_timedelta64_dtype([1, 2, 3])\n    assert not com.is_timedelta64_dtype(np.array([], dtype=np.datetime64))\n    assert not com.is_timedelta64_dtype(\"0 days\")\n    assert not com.is_timedelta64_dtype(\"0 days 00:00:00\")\n    assert not com.is_timedelta64_dtype([\"0 days 00:00:00\"])\n    assert not com.is_timedelta64_dtype(\"NO DATE\")\n\n    assert com.is_timedelta64_dtype(np.timedelta64)\n    assert com.is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    assert com.is_timedelta64_dtype(pd.to_timedelta([\"0 days\", \"1 days\"]))",
        "begin_line": 228,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_period_dtype#243",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_period_dtype()",
        "snippet": "def test_is_period_dtype():\n    assert not com.is_period_dtype(object)\n    assert not com.is_period_dtype([1, 2, 3])\n    assert not com.is_period_dtype(pd.Period(\"2017-01-01\"))\n\n    assert com.is_period_dtype(PeriodDtype(freq=\"D\"))\n    assert com.is_period_dtype(pd.PeriodIndex([], freq=\"A\"))",
        "begin_line": 243,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_interval_dtype#252",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_interval_dtype()",
        "snippet": "def test_is_interval_dtype():\n    assert not com.is_interval_dtype(object)\n    assert not com.is_interval_dtype([1, 2, 3])\n\n    assert com.is_interval_dtype(IntervalDtype())\n\n    interval = pd.Interval(1, 2, closed=\"right\")\n    assert not com.is_interval_dtype(interval)\n    assert com.is_interval_dtype(pd.IntervalIndex([interval]))",
        "begin_line": 252,
        "end_line": 260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_categorical_dtype#263",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_categorical_dtype()",
        "snippet": "def test_is_categorical_dtype():\n    assert not com.is_categorical_dtype(object)\n    assert not com.is_categorical_dtype([1, 2, 3])\n\n    assert com.is_categorical_dtype(CategoricalDtype())\n    assert com.is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    assert com.is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_string_dtype#272",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_string_dtype()",
        "snippet": "def test_is_string_dtype():\n    assert not com.is_string_dtype(int)\n    assert not com.is_string_dtype(pd.Series([1, 2]))\n\n    assert com.is_string_dtype(str)\n    assert com.is_string_dtype(object)\n    assert com.is_string_dtype(np.array([\"a\", \"b\"]))\n    assert com.is_string_dtype(pd.StringDtype())\n    assert com.is_string_dtype(pd.array([\"a\", \"b\"], dtype=\"string\"))",
        "begin_line": 272,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_period_arraylike#283",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_period_arraylike()",
        "snippet": "def test_is_period_arraylike():\n    assert not com.is_period_arraylike([1, 2, 3])\n    assert not com.is_period_arraylike(pd.Index([1, 2, 3]))\n    assert com.is_period_arraylike(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))",
        "begin_line": 283,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetime_arraylike#289",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetime_arraylike()",
        "snippet": "def test_is_datetime_arraylike():\n    assert not com.is_datetime_arraylike([1, 2, 3])\n    assert not com.is_datetime_arraylike(pd.Index([1, 2, 3]))\n    assert com.is_datetime_arraylike(pd.DatetimeIndex([1, 2, 3]))",
        "begin_line": 289,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_integer_dtype#307",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_integer_dtype(dtype)",
        "snippet": "def test_is_integer_dtype(dtype):\n    assert com.is_integer_dtype(dtype)",
        "begin_line": 307,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_not_integer_dtype#323",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_not_integer_dtype(dtype)",
        "snippet": "def test_is_not_integer_dtype(dtype):\n    assert not com.is_integer_dtype(dtype)",
        "begin_line": 323,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_signed_integer_dtype#339",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_signed_integer_dtype(dtype)",
        "snippet": "def test_is_signed_integer_dtype(dtype):\n    assert com.is_integer_dtype(dtype)",
        "begin_line": 339,
        "end_line": 340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_not_signed_integer_dtype#359",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_not_signed_integer_dtype(dtype)",
        "snippet": "def test_is_not_signed_integer_dtype(dtype):\n    assert not com.is_signed_integer_dtype(dtype)",
        "begin_line": 359,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_unsigned_integer_dtype#375",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_unsigned_integer_dtype(dtype)",
        "snippet": "def test_is_unsigned_integer_dtype(dtype):\n    assert com.is_unsigned_integer_dtype(dtype)",
        "begin_line": 375,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_not_unsigned_integer_dtype#395",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_not_unsigned_integer_dtype(dtype)",
        "snippet": "def test_is_not_unsigned_integer_dtype(dtype):\n    assert not com.is_unsigned_integer_dtype(dtype)",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_int64_dtype#402",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_int64_dtype(dtype)",
        "snippet": "def test_is_int64_dtype(dtype):\n    assert com.is_int64_dtype(dtype)",
        "begin_line": 402,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_not_int64_dtype#421",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_not_int64_dtype(dtype)",
        "snippet": "def test_is_not_int64_dtype(dtype):\n    assert not com.is_int64_dtype(dtype)",
        "begin_line": 421,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetime64_any_dtype#425",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetime64_any_dtype()",
        "snippet": "def test_is_datetime64_any_dtype():\n    assert not com.is_datetime64_any_dtype(int)\n    assert not com.is_datetime64_any_dtype(str)\n    assert not com.is_datetime64_any_dtype(np.array([1, 2]))\n    assert not com.is_datetime64_any_dtype(np.array([\"a\", \"b\"]))\n\n    assert com.is_datetime64_any_dtype(np.datetime64)\n    assert com.is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    assert com.is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    assert com.is_datetime64_any_dtype(\n        pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\")\n    )",
        "begin_line": 425,
        "end_line": 436,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetime64_ns_dtype#439",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetime64_ns_dtype()",
        "snippet": "def test_is_datetime64_ns_dtype():\n    assert not com.is_datetime64_ns_dtype(int)\n    assert not com.is_datetime64_ns_dtype(str)\n    assert not com.is_datetime64_ns_dtype(np.datetime64)\n    assert not com.is_datetime64_ns_dtype(np.array([1, 2]))\n    assert not com.is_datetime64_ns_dtype(np.array([\"a\", \"b\"]))\n    assert not com.is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))\n\n    # This datetime array has the wrong unit (ps instead of ns)\n    assert not com.is_datetime64_ns_dtype(np.array([], dtype=\"datetime64[ps]\"))\n\n    assert com.is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    assert com.is_datetime64_ns_dtype(\n        pd.DatetimeIndex([1, 2, 3], dtype=np.dtype(\"datetime64[ns]\"))\n    )",
        "begin_line": 439,
        "end_line": 453,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_timedelta64_ns_dtype#456",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_timedelta64_ns_dtype()",
        "snippet": "def test_is_timedelta64_ns_dtype():\n    assert not com.is_timedelta64_ns_dtype(np.dtype(\"m8[ps]\"))\n    assert not com.is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n\n    assert com.is_timedelta64_ns_dtype(np.dtype(\"m8[ns]\"))\n    assert com.is_timedelta64_ns_dtype(np.array([1, 2], dtype=\"m8[ns]\"))",
        "begin_line": 456,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetime_or_timedelta_dtype#464",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetime_or_timedelta_dtype()",
        "snippet": "def test_is_datetime_or_timedelta_dtype():\n    assert not com.is_datetime_or_timedelta_dtype(int)\n    assert not com.is_datetime_or_timedelta_dtype(str)\n    assert not com.is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    assert not com.is_datetime_or_timedelta_dtype(np.array([\"a\", \"b\"]))\n\n    # TODO(jreback), this is slightly suspect\n    assert not com.is_datetime_or_timedelta_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n\n    assert com.is_datetime_or_timedelta_dtype(np.datetime64)\n    assert com.is_datetime_or_timedelta_dtype(np.timedelta64)\n    assert com.is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    assert com.is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))",
        "begin_line": 464,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_numeric_v_string_like#479",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_numeric_v_string_like()",
        "snippet": "def test_is_numeric_v_string_like():\n    assert not com.is_numeric_v_string_like(1, 1)\n    assert not com.is_numeric_v_string_like(1, \"foo\")\n    assert not com.is_numeric_v_string_like(\"foo\", \"foo\")\n    assert not com.is_numeric_v_string_like(np.array([1]), np.array([2]))\n    assert not com.is_numeric_v_string_like(np.array([\"foo\"]), np.array([\"foo\"]))\n\n    assert com.is_numeric_v_string_like(np.array([1]), \"foo\")\n    assert com.is_numeric_v_string_like(\"foo\", np.array([1]))\n    assert com.is_numeric_v_string_like(np.array([1, 2]), np.array([\"foo\"]))\n    assert com.is_numeric_v_string_like(np.array([\"foo\"]), np.array([1, 2]))",
        "begin_line": 479,
        "end_line": 489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_datetimelike_v_numeric#492",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_datetimelike_v_numeric()",
        "snippet": "def test_is_datetimelike_v_numeric():\n    dt = np.datetime64(pd.datetime(2017, 1, 1))\n\n    assert not com.is_datetimelike_v_numeric(1, 1)\n    assert not com.is_datetimelike_v_numeric(dt, dt)\n    assert not com.is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    assert not com.is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n\n    assert com.is_datetimelike_v_numeric(1, dt)\n    assert com.is_datetimelike_v_numeric(1, dt)\n    assert com.is_datetimelike_v_numeric(np.array([dt]), 1)\n    assert com.is_datetimelike_v_numeric(np.array([1]), dt)\n    assert com.is_datetimelike_v_numeric(np.array([dt]), np.array([1]))",
        "begin_line": 492,
        "end_line": 504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_needs_i8_conversion#507",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_needs_i8_conversion()",
        "snippet": "def test_needs_i8_conversion():\n    assert not com.needs_i8_conversion(str)\n    assert not com.needs_i8_conversion(np.int64)\n    assert not com.needs_i8_conversion(pd.Series([1, 2]))\n    assert not com.needs_i8_conversion(np.array([\"a\", \"b\"]))\n\n    assert com.needs_i8_conversion(np.datetime64)\n    assert com.needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    assert com.needs_i8_conversion(pd.DatetimeIndex([\"2000\"], tz=\"US/Eastern\"))",
        "begin_line": 507,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_numeric_dtype#518",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_numeric_dtype()",
        "snippet": "def test_is_numeric_dtype():\n    assert not com.is_numeric_dtype(str)\n    assert not com.is_numeric_dtype(np.datetime64)\n    assert not com.is_numeric_dtype(np.timedelta64)\n    assert not com.is_numeric_dtype(np.array([\"a\", \"b\"]))\n    assert not com.is_numeric_dtype(np.array([], dtype=np.timedelta64))\n\n    assert com.is_numeric_dtype(int)\n    assert com.is_numeric_dtype(float)\n    assert com.is_numeric_dtype(np.uint64)\n    assert com.is_numeric_dtype(pd.Series([1, 2]))\n    assert com.is_numeric_dtype(pd.Index([1, 2.0]))",
        "begin_line": 518,
        "end_line": 529,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_string_like_dtype#532",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_string_like_dtype()",
        "snippet": "def test_is_string_like_dtype():\n    assert not com.is_string_like_dtype(object)\n    assert not com.is_string_like_dtype(pd.Series([1, 2]))\n\n    assert com.is_string_like_dtype(str)\n    assert com.is_string_like_dtype(np.array([\"a\", \"b\"]))",
        "begin_line": 532,
        "end_line": 537,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_float_dtype#540",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_float_dtype()",
        "snippet": "def test_is_float_dtype():\n    assert not com.is_float_dtype(str)\n    assert not com.is_float_dtype(int)\n    assert not com.is_float_dtype(pd.Series([1, 2]))\n    assert not com.is_float_dtype(np.array([\"a\", \"b\"]))\n\n    assert com.is_float_dtype(float)\n    assert com.is_float_dtype(pd.Index([1, 2.0]))",
        "begin_line": 540,
        "end_line": 547,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_bool_dtype#550",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_bool_dtype()",
        "snippet": "def test_is_bool_dtype():\n    assert not com.is_bool_dtype(int)\n    assert not com.is_bool_dtype(str)\n    assert not com.is_bool_dtype(pd.Series([1, 2]))\n    assert not com.is_bool_dtype(np.array([\"a\", \"b\"]))\n    assert not com.is_bool_dtype(pd.Index([\"a\", \"b\"]))\n\n    assert com.is_bool_dtype(bool)\n    assert com.is_bool_dtype(np.bool)\n    assert com.is_bool_dtype(np.array([True, False]))\n    assert com.is_bool_dtype(pd.Index([True, False]))\n\n    assert com.is_bool_dtype(pd.BooleanDtype())\n    assert com.is_bool_dtype(pd.array([True, False, None], dtype=\"boolean\"))",
        "begin_line": 550,
        "end_line": 563,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_extension_type#570",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_extension_type(check_scipy)",
        "snippet": "def test_is_extension_type(check_scipy):\n    assert not com.is_extension_type([1, 2, 3])\n    assert not com.is_extension_type(np.array([1, 2, 3]))\n    assert not com.is_extension_type(pd.DatetimeIndex([1, 2, 3]))\n\n    cat = pd.Categorical([1, 2, 3])\n    assert com.is_extension_type(cat)\n    assert com.is_extension_type(pd.Series(cat))\n    assert com.is_extension_type(pd.SparseArray([1, 2, 3]))\n    assert com.is_extension_type(pd.DatetimeIndex([\"2000\"], tz=\"US/Eastern\"))\n\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    s = pd.Series([], dtype=dtype)\n    assert com.is_extension_type(s)\n\n    if check_scipy:\n        import scipy.sparse\n\n        assert not com.is_extension_type(scipy.sparse.bsr_matrix([1, 2, 3]))",
        "begin_line": 570,
        "end_line": 588,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_extension_type_deprecation#591",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_extension_type_deprecation()",
        "snippet": "def test_is_extension_type_deprecation():\n    with tm.assert_produces_warning(FutureWarning):\n        com.is_extension_type([1, 2, 3])",
        "begin_line": 591,
        "end_line": 593,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_extension_array_dtype#599",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_extension_array_dtype(check_scipy)",
        "snippet": "def test_is_extension_array_dtype(check_scipy):\n    assert not com.is_extension_array_dtype([1, 2, 3])\n    assert not com.is_extension_array_dtype(np.array([1, 2, 3]))\n    assert not com.is_extension_array_dtype(pd.DatetimeIndex([1, 2, 3]))\n\n    cat = pd.Categorical([1, 2, 3])\n    assert com.is_extension_array_dtype(cat)\n    assert com.is_extension_array_dtype(pd.Series(cat))\n    assert com.is_extension_array_dtype(pd.SparseArray([1, 2, 3]))\n    assert com.is_extension_array_dtype(pd.DatetimeIndex([\"2000\"], tz=\"US/Eastern\"))\n\n    dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    s = pd.Series([], dtype=dtype)\n    assert com.is_extension_array_dtype(s)\n\n    if check_scipy:\n        import scipy.sparse\n\n        assert not com.is_extension_array_dtype(scipy.sparse.bsr_matrix([1, 2, 3]))",
        "begin_line": 599,
        "end_line": 617,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_is_complex_dtype#620",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_is_complex_dtype()",
        "snippet": "def test_is_complex_dtype():\n    assert not com.is_complex_dtype(int)\n    assert not com.is_complex_dtype(str)\n    assert not com.is_complex_dtype(pd.Series([1, 2]))\n    assert not com.is_complex_dtype(np.array([\"a\", \"b\"]))\n\n    assert com.is_complex_dtype(np.complex)\n    assert com.is_complex_dtype(np.array([1 + 1j, 5]))",
        "begin_line": 620,
        "end_line": 627,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test__get_dtype#659",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test__get_dtype(input_param, result)",
        "snippet": "def test__get_dtype(input_param, result):\n    assert com._get_dtype(input_param) == result",
        "begin_line": 659,
        "end_line": 660,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test__get_dtype_fails#673",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test__get_dtype_fails(input_param, expected_error_message)",
        "snippet": "def test__get_dtype_fails(input_param, expected_error_message):\n    # python objects\n    with pytest.raises(TypeError, match=expected_error_message):\n        com._get_dtype(input_param)",
        "begin_line": 673,
        "end_line": 676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test__is_dtype_type#712",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test__is_dtype_type(input_param, result)",
        "snippet": "def test__is_dtype_type(input_param, result):\n    assert com._is_dtype_type(input_param, lambda tipo: tipo == result)",
        "begin_line": 712,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_astype_nansafe#718",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_astype_nansafe(val, typ)",
        "snippet": "def test_astype_nansafe(val, typ):\n    arr = np.array([val])\n\n    msg = \"Cannot convert NaT values to integer\"\n    with pytest.raises(ValueError, match=msg):\n        astype_nansafe(arr, dtype=typ)",
        "begin_line": 718,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_astype_datetime64_bad_dtype_raises#740",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_astype_datetime64_bad_dtype_raises(from_type, to_type)",
        "snippet": "def test_astype_datetime64_bad_dtype_raises(from_type, to_type):\n    arr = np.array([from_type(\"2018\")])\n\n    with pytest.raises(TypeError, match=\"cannot astype\"):\n        astype_nansafe(arr, dtype=to_type)",
        "begin_line": 740,
        "end_line": 744,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.dtypes.test_common.test_astype_object_preserves_datetime_na#748",
        "src_path": "pandas/tests/dtypes/test_common.py",
        "class_name": "pandas.tests.dtypes.test_common",
        "signature": "pandas.tests.dtypes.test_common.test_astype_object_preserves_datetime_na(from_type)",
        "snippet": "def test_astype_object_preserves_datetime_na(from_type):\n    arr = np.array([from_type(\"NaT\")])\n    result = astype_nansafe(arr, dtype=\"object\")\n\n    assert isna(result)[0]",
        "begin_line": 748,
        "end_line": 752,
        "comment": "",
        "is_bug": false
    }
]