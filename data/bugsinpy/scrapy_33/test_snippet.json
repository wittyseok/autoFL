[
    {
        "name": "tests.test_pipeline_media._mocked_download_func#17",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media",
        "signature": "tests.test_pipeline_media._mocked_download_func(request, info)",
        "snippet": "def _mocked_download_func(request, info):\n    response = request.meta.get('response')\n    return response() if callable(response) else response",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.setUp#26",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.spider = Spider('media.com')\n        self.pipe = self.pipeline_class(download_func=_mocked_download_func)\n        self.pipe.open_spider(self.spider)\n        self.info = self.pipe.spiderinfo",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.tearDown#32",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        for name, signal in vars(signals).items():\n            if not name.startswith('_'):\n                disconnect_all(signal)",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_media_to_download#37",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_media_to_download(self)",
        "snippet": "    def test_default_media_to_download(self):\n        request = Request('http://url')\n        assert self.pipe.media_to_download(request, self.info) is None",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_get_media_requests#41",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_get_media_requests(self)",
        "snippet": "    def test_default_get_media_requests(self):\n        item = dict(name='name')\n        assert self.pipe.get_media_requests(item, self.info) is None",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_media_downloaded#45",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_media_downloaded(self)",
        "snippet": "    def test_default_media_downloaded(self):\n        request = Request('http://url')\n        response = Response('http://url', body='')\n        assert self.pipe.media_downloaded(response, request, self.info) is response",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_media_failed#50",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_media_failed(self)",
        "snippet": "    def test_default_media_failed(self):\n        request = Request('http://url')\n        fail = Failure(Exception())\n        assert self.pipe.media_failed(fail, request, self.info) is fail",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_item_completed#55",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_item_completed(self)",
        "snippet": "    def test_default_item_completed(self):\n        item = dict(name='name')\n        assert self.pipe.item_completed([], item, self.info) is item\n\n        # Check that failures are logged by default\n        fail = Failure(Exception())\n        results = [(True, 1), (False, fail)]\n\n        with LogCapture() as l:\n            new_item = self.pipe.item_completed(results, item, self.info)\n\n        assert new_item is item\n        assert len(l.records) == 1\n        record = l.records[0]\n        assert record.levelname == 'ERROR'\n        self.assertTupleEqual(record.exc_info, failure_to_exc_info(fail))\n\n        # disable failure logging and check again\n        self.pipe.LOG_FAILED_RESULTS = False\n        with LogCapture() as l:\n            new_item = self.pipe.item_completed(results, item, self.info)\n        assert new_item is item\n        assert len(l.records) == 0",
        "begin_line": 55,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_process_item#80",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.BaseMediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.BaseMediaPipelineTestCase.test_default_process_item(self)",
        "snippet": "    def test_default_process_item(self):\n        item = dict(name='name')\n        new_item = yield self.pipe.process_item(item, self.spider)\n        assert new_item is item",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.__init__#88",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(MockedMediaPipeline, self).__init__(*args, **kwargs)\n        self._mockcalled = []",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.download#92",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.download(self, request, info)",
        "snippet": "    def download(self, request, info):\n        self._mockcalled.append('download')\n        return super(MockedMediaPipeline, self).download(request, info)",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.media_to_download#96",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.media_to_download(self, request, info)",
        "snippet": "    def media_to_download(self, request, info):\n        self._mockcalled.append('media_to_download')\n        if 'result' in request.meta:\n            return request.meta.get('result')\n        return super(MockedMediaPipeline, self).media_to_download(request, info)",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.get_media_requests#102",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.get_media_requests(self, item, info)",
        "snippet": "    def get_media_requests(self, item, info):\n        self._mockcalled.append('get_media_requests')\n        return item.get('requests')",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.media_downloaded#106",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.media_downloaded(self, response, request, info)",
        "snippet": "    def media_downloaded(self, response, request, info):\n        self._mockcalled.append('media_downloaded')\n        return super(MockedMediaPipeline, self).media_downloaded(response, request, info)",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.media_failed#110",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.media_failed(self, failure, request, info)",
        "snippet": "    def media_failed(self, failure, request, info):\n        self._mockcalled.append('media_failed')\n        return super(MockedMediaPipeline, self).media_failed(failure, request, info)",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MockedMediaPipeline.item_completed#114",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MockedMediaPipeline",
        "signature": "tests.test_pipeline_media.MockedMediaPipeline.item_completed(self, results, item, info)",
        "snippet": "    def item_completed(self, results, item, info):\n        self._mockcalled.append('item_completed')\n        item = super(MockedMediaPipeline, self).item_completed(results, item, info)\n        item['results'] = results\n        return item",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_result_succeed#126",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_result_succeed(self)",
        "snippet": "    def test_result_succeed(self):\n        cb = lambda _: self.pipe._mockcalled.append('request_callback') or _\n        eb = lambda _: self.pipe._mockcalled.append('request_errback') or _\n        rsp = Response('http://url1')\n        req = Request('http://url1', meta=dict(response=rsp), callback=cb, errback=eb)\n        item = dict(requests=req)\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertEqual(new_item['results'], [(True, rsp)])\n        self.assertEqual(self.pipe._mockcalled,\n                ['get_media_requests', 'media_to_download',\n                    'media_downloaded', 'request_callback', 'item_completed'])",
        "begin_line": 126,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_result_failure#139",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_result_failure(self)",
        "snippet": "    def test_result_failure(self):\n        self.pipe.LOG_FAILED_RESULTS = False\n        cb = lambda _: self.pipe._mockcalled.append('request_callback') or _\n        eb = lambda _: self.pipe._mockcalled.append('request_errback') or _\n        fail = Failure(Exception())\n        req = Request('http://url1', meta=dict(response=fail), callback=cb, errback=eb)\n        item = dict(requests=req)\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertEqual(new_item['results'], [(False, fail)])\n        self.assertEqual(self.pipe._mockcalled,\n                ['get_media_requests', 'media_to_download',\n                    'media_failed', 'request_errback', 'item_completed'])",
        "begin_line": 139,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_mix_of_success_and_failure#153",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_mix_of_success_and_failure(self)",
        "snippet": "    def test_mix_of_success_and_failure(self):\n        self.pipe.LOG_FAILED_RESULTS = False\n        rsp1 = Response('http://url1')\n        req1 = Request('http://url1', meta=dict(response=rsp1))\n        fail = Failure(Exception())\n        req2 = Request('http://url2', meta=dict(response=fail))\n        item = dict(requests=[req1, req2])\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertEqual(new_item['results'], [(True, rsp1), (False, fail)])\n        m = self.pipe._mockcalled\n        # only once\n        self.assertEqual(m[0], 'get_media_requests') # first hook called\n        self.assertEqual(m.count('get_media_requests'), 1)\n        self.assertEqual(m.count('item_completed'), 1)\n        self.assertEqual(m[-1], 'item_completed') # last hook called\n        # twice, one per request\n        self.assertEqual(m.count('media_to_download'), 2)\n        # one to handle success and other for failure\n        self.assertEqual(m.count('media_downloaded'), 1)\n        self.assertEqual(m.count('media_failed'), 1)",
        "begin_line": 153,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_get_media_requests#175",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_get_media_requests(self)",
        "snippet": "    def test_get_media_requests(self):\n        # returns single Request (without callback)\n        req = Request('http://url')\n        item = dict(requests=req) # pass a single item\n        new_item = yield self.pipe.process_item(item, self.spider)\n        assert new_item is item\n        assert request_fingerprint(req) in self.info.downloaded\n\n        # returns iterable of Requests\n        req1 = Request('http://url1')\n        req2 = Request('http://url2')\n        item = dict(requests=iter([req1, req2]))\n        new_item = yield self.pipe.process_item(item, self.spider)\n        assert new_item is item\n        assert request_fingerprint(req1) in self.info.downloaded\n        assert request_fingerprint(req2) in self.info.downloaded",
        "begin_line": 175,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_results_are_cached_across_multiple_items#193",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_results_are_cached_across_multiple_items(self)",
        "snippet": "    def test_results_are_cached_across_multiple_items(self):\n        rsp1 = Response('http://url1')\n        req1 = Request('http://url1', meta=dict(response=rsp1))\n        item = dict(requests=req1)\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertTrue(new_item is item)\n        self.assertEqual(new_item['results'], [(True, rsp1)])\n\n        # rsp2 is ignored, rsp1 must be in results because request fingerprints are the same\n        req2 = Request(req1.url, meta=dict(response=Response('http://donot.download.me')))\n        item = dict(requests=req2)\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertTrue(new_item is item)\n        self.assertEqual(request_fingerprint(req1), request_fingerprint(req2))\n        self.assertEqual(new_item['results'], [(True, rsp1)])",
        "begin_line": 193,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_results_are_cached_for_requests_of_single_item#210",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_results_are_cached_for_requests_of_single_item(self)",
        "snippet": "    def test_results_are_cached_for_requests_of_single_item(self):\n        rsp1 = Response('http://url1')\n        req1 = Request('http://url1', meta=dict(response=rsp1))\n        req2 = Request(req1.url, meta=dict(response=Response('http://donot.download.me')))\n        item = dict(requests=[req1, req2])\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertTrue(new_item is item)\n        self.assertEqual(new_item['results'], [(True, rsp1), (True, rsp1)])",
        "begin_line": 210,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_wait_if_request_is_downloading#220",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_wait_if_request_is_downloading(self)",
        "snippet": "    def test_wait_if_request_is_downloading(self):\n        def _check_downloading(response):\n            fp = request_fingerprint(req1)\n            self.assertTrue(fp in self.info.downloading)\n            self.assertTrue(fp in self.info.waiting)\n            self.assertTrue(fp not in self.info.downloaded)\n            self.assertEqual(len(self.info.waiting[fp]), 2)\n            return response\n\n        rsp1 = Response('http://url')\n        def rsp1_func():\n            dfd = Deferred().addCallback(_check_downloading)\n            reactor.callLater(.1, dfd.callback, rsp1)\n            return dfd\n\n        def rsp2_func():\n            self.fail('it must cache rsp1 result and must not try to redownload')\n\n        req1 = Request('http://url', meta=dict(response=rsp1_func))\n        req2 = Request(req1.url, meta=dict(response=rsp2_func))\n        item = dict(requests=[req1, req2])\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertEqual(new_item['results'], [(True, rsp1), (True, rsp1)])",
        "begin_line": 220,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase._check_downloading#221",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase._check_downloading(response)",
        "snippet": "        def _check_downloading(response):\n            fp = request_fingerprint(req1)\n            self.assertTrue(fp in self.info.downloading)\n            self.assertTrue(fp in self.info.waiting)\n            self.assertTrue(fp not in self.info.downloaded)\n            self.assertEqual(len(self.info.waiting[fp]), 2)\n            return response",
        "begin_line": 221,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.rsp1_func#230",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.rsp1_func()",
        "snippet": "        def rsp1_func():\n            dfd = Deferred().addCallback(_check_downloading)\n            reactor.callLater(.1, dfd.callback, rsp1)\n            return dfd",
        "begin_line": 230,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.rsp2_func#235",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.rsp2_func()",
        "snippet": "        def rsp2_func():\n            self.fail('it must cache rsp1 result and must not try to redownload')",
        "begin_line": 235,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_media.MediaPipelineTestCase.test_use_media_to_download_result#245",
        "src_path": "tests/test_pipeline_media.py",
        "class_name": "tests.test_pipeline_media.MediaPipelineTestCase",
        "signature": "tests.test_pipeline_media.MediaPipelineTestCase.test_use_media_to_download_result(self)",
        "snippet": "    def test_use_media_to_download_result(self):\n        req = Request('http://url', meta=dict(result='ITSME', response=self.fail))\n        item = dict(requests=req)\n        new_item = yield self.pipe.process_item(item, self.spider)\n        self.assertEqual(new_item['results'], [(True, 'ITSME')])\n        self.assertEqual(self.pipe._mockcalled, \\\n                ['get_media_requests', 'media_to_download', 'item_completed'])",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.FailureToExcInfoTest.test_failure#17",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.FailureToExcInfoTest",
        "signature": "tests.test_utils_log.FailureToExcInfoTest.test_failure(self)",
        "snippet": "    def test_failure(self):\n        try:\n            0/0\n        except ZeroDivisionError:\n            exc_info = sys.exc_info()\n            failure = Failure()\n\n        self.assertTupleEqual(exc_info, failure_to_exc_info(failure))",
        "begin_line": 17,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.FailureToExcInfoTest.test_non_failure#26",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.FailureToExcInfoTest",
        "signature": "tests.test_utils_log.FailureToExcInfoTest.test_non_failure(self)",
        "snippet": "    def test_non_failure(self):\n        self.assertIsNone(failure_to_exc_info('test'))",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.TopLevelFormatterTest.setUp#32",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.TopLevelFormatterTest",
        "signature": "tests.test_utils_log.TopLevelFormatterTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.handler = LogCapture()\n        self.handler.addFilter(TopLevelFormatter(['test']))",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.TopLevelFormatterTest.test_top_level_logger#36",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.TopLevelFormatterTest",
        "signature": "tests.test_utils_log.TopLevelFormatterTest.test_top_level_logger(self)",
        "snippet": "    def test_top_level_logger(self):\n        logger = logging.getLogger('test')\n        with self.handler as l:\n            logger.warning('test log msg')\n\n        l.check(('test', 'WARNING', 'test log msg'))",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.TopLevelFormatterTest.test_children_logger#43",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.TopLevelFormatterTest",
        "signature": "tests.test_utils_log.TopLevelFormatterTest.test_children_logger(self)",
        "snippet": "    def test_children_logger(self):\n        logger = logging.getLogger('test.test1')\n        with self.handler as l:\n            logger.warning('test log msg')\n\n        l.check(('test', 'WARNING', 'test log msg'))",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.TopLevelFormatterTest.test_overlapping_name_logger#50",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.TopLevelFormatterTest",
        "signature": "tests.test_utils_log.TopLevelFormatterTest.test_overlapping_name_logger(self)",
        "snippet": "    def test_overlapping_name_logger(self):\n        logger = logging.getLogger('test2')\n        with self.handler as l:\n            logger.warning('test log msg')\n\n        l.check(('test2', 'WARNING', 'test log msg'))",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.TopLevelFormatterTest.test_different_name_logger#57",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.TopLevelFormatterTest",
        "signature": "tests.test_utils_log.TopLevelFormatterTest.test_different_name_logger(self)",
        "snippet": "    def test_different_name_logger(self):\n        logger = logging.getLogger('different')\n        with self.handler as l:\n            logger.warning('test log msg')\n\n        l.check(('different', 'WARNING', 'test log msg'))",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.LogCounterHandlerTest.setUp#67",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.LogCounterHandlerTest",
        "signature": "tests.test_utils_log.LogCounterHandlerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.logger = logging.getLogger('test')\n        self.logger.setLevel(logging.NOTSET)\n        self.logger.propagate = False\n        self.crawler = get_crawler(settings_dict={'LOG_LEVEL': 'WARNING'})\n        self.handler = LogCounterHandler(self.crawler)\n        self.logger.addHandler(self.handler)",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.LogCounterHandlerTest.tearDown#75",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.LogCounterHandlerTest",
        "signature": "tests.test_utils_log.LogCounterHandlerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.logger.propagate = True\n        self.logger.removeHandler(self.handler)",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.LogCounterHandlerTest.test_init#79",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.LogCounterHandlerTest",
        "signature": "tests.test_utils_log.LogCounterHandlerTest.test_init(self)",
        "snippet": "    def test_init(self):\n        self.assertIsNone(self.crawler.stats.get_value('log_count/DEBUG'))\n        self.assertIsNone(self.crawler.stats.get_value('log_count/INFO'))\n        self.assertIsNone(self.crawler.stats.get_value('log_count/WARNING'))\n        self.assertIsNone(self.crawler.stats.get_value('log_count/ERROR'))\n        self.assertIsNone(self.crawler.stats.get_value('log_count/CRITICAL'))",
        "begin_line": 79,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.LogCounterHandlerTest.test_accepted_level#86",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.LogCounterHandlerTest",
        "signature": "tests.test_utils_log.LogCounterHandlerTest.test_accepted_level(self)",
        "snippet": "    def test_accepted_level(self):\n        self.logger.error('test log msg')\n        self.assertEqual(self.crawler.stats.get_value('log_count/ERROR'), 1)",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.LogCounterHandlerTest.test_filtered_out_level#90",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.LogCounterHandlerTest",
        "signature": "tests.test_utils_log.LogCounterHandlerTest.test_filtered_out_level(self)",
        "snippet": "    def test_filtered_out_level(self):\n        self.logger.debug('test log msg')\n        self.assertIsNone(self.crawler.stats.get_value('log_count/INFO'))",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.StreamLoggerTest.setUp#97",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.StreamLoggerTest",
        "signature": "tests.test_utils_log.StreamLoggerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.stdout = sys.stdout\n        logger = logging.getLogger('test')\n        logger.setLevel(logging.WARNING)\n        sys.stdout = StreamLogger(logger, logging.ERROR)",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.StreamLoggerTest.tearDown#103",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.StreamLoggerTest",
        "signature": "tests.test_utils_log.StreamLoggerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        sys.stdout = self.stdout",
        "begin_line": 103,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_log.StreamLoggerTest.test_redirect#106",
        "src_path": "tests/test_utils_log.py",
        "class_name": "tests.test_utils_log.StreamLoggerTest",
        "signature": "tests.test_utils_log.StreamLoggerTest.test_redirect(self)",
        "snippet": "    def test_redirect(self):\n        with LogCapture() as l:\n            print('test log msg')\n        l.check(('test', 'ERROR', 'test log msg'))",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object#12",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_load_object(self)",
        "snippet": "    def test_load_object(self):\n        obj = load_object('scrapy.utils.misc.load_object')\n        assert obj is load_object\n        self.assertRaises(ImportError, load_object, 'nomodule999.mod.function')\n        self.assertRaises(NameError, load_object, 'scrapy.utils.misc.load_object999')",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules#18",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules(self)",
        "snippet": "    def test_walk_modules(self):\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules',\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod',\n            'tests.test_utils_misc.test_walk_modules.mod.mod0',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        mods = walk_modules('tests.test_utils_misc.test_walk_modules.mod1')\n        expected = [\n            'tests.test_utils_misc.test_walk_modules.mod1',\n        ]\n        self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n\n        self.assertRaises(ImportError, walk_modules, 'nomodule999')",
        "begin_line": 18,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg#43",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_walk_modules_egg(self)",
        "snippet": "    def test_walk_modules_egg(self):\n        egg = os.path.join(os.path.dirname(__file__), 'test.egg')\n        sys.path.append(egg)\n        try:\n            mods = walk_modules('testegg')\n            expected = [\n                'testegg.spiders',\n                'testegg.spiders.a',\n                'testegg.spiders.b',\n                'testegg'\n            ]\n            self.assertEquals(set([m.__name__ for m in mods]), set(expected))\n        finally:\n            sys.path.remove(egg)",
        "begin_line": 43,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.UtilsMiscTestCase",
        "signature": "tests.test_utils_misc.__init__.UtilsMiscTestCase.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter#58",
        "src_path": "tests/test_utils_misc/__init__.py",
        "class_name": "tests.test_utils_misc.__init__.TestItem",
        "signature": "tests.test_utils_misc.__init__.TestItem.test_arg_to_iter(self)",
        "snippet": "    def test_arg_to_iter(self):\n\n        class TestItem(Item):\n            name = Field()\n\n        assert hasattr(arg_to_iter(None), '__iter__')\n        assert hasattr(arg_to_iter(100), '__iter__')\n        assert hasattr(arg_to_iter('lala'), '__iter__')\n        assert hasattr(arg_to_iter([1, 2, 3]), '__iter__')\n        assert hasattr(arg_to_iter(l for l in 'abcd'), '__iter__')\n\n        self.assertEqual(list(arg_to_iter(None)), [])\n        self.assertEqual(list(arg_to_iter('lala')), ['lala'])\n        self.assertEqual(list(arg_to_iter(100)), [100])\n        self.assertEqual(list(arg_to_iter(l for l in 'abc')), ['a', 'b', 'c'])\n        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n        self.assertEqual(list(arg_to_iter({'a':1})), [{'a': 1}])\n        self.assertEqual(list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")])",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    }
]