[
    {
        "name": "tests.test_spider.SpiderTest.setUp#27",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.setUp(self)",
        "snippet": "    def setUp(self):\n        warnings.simplefilter(\"always\")",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.tearDown#30",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        warnings.resetwarnings()",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_base_spider#33",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_base_spider(self)",
        "snippet": "    def test_base_spider(self):\n        spider = self.spider_class(\"example.com\")\n        self.assertEqual(spider.name, 'example.com')\n        self.assertEqual(spider.start_urls, [])",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_start_requests#38",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_start_requests(self)",
        "snippet": "    def test_start_requests(self):\n        spider = self.spider_class('example.com')\n        start_requests = spider.start_requests()\n        self.assertTrue(inspect.isgenerator(start_requests))\n        self.assertEqual(list(start_requests), [])",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_spider_args#44",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_spider_args(self)",
        "snippet": "    def test_spider_args(self):\n        \"\"\"Constructor arguments are assigned to spider attributes\"\"\"\n        spider = self.spider_class('example.com', foo='bar')\n        self.assertEqual(spider.foo, 'bar')",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_spider_without_name#49",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_spider_without_name(self)",
        "snippet": "    def test_spider_without_name(self):\n        \"\"\"Constructor arguments are assigned to spider attributes\"\"\"\n        self.assertRaises(ValueError, self.spider_class)\n        self.assertRaises(ValueError, self.spider_class, somearg='foo')",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_deprecated_set_crawler_method#54",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_deprecated_set_crawler_method(self)",
        "snippet": "    def test_deprecated_set_crawler_method(self):\n        spider = self.spider_class('example.com')\n        crawler = get_crawler()\n        with warnings.catch_warnings(record=True) as w:\n            spider.set_crawler(crawler)\n            self.assertIn(\"set_crawler\", str(w[0].message))\n            self.assertTrue(hasattr(spider, 'crawler'))\n            self.assertIs(spider.crawler, crawler)\n            self.assertTrue(hasattr(spider, 'settings'))\n            self.assertIs(spider.settings, crawler.settings)",
        "begin_line": 54,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_from_crawler_crawler_and_settings_population#65",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_from_crawler_crawler_and_settings_population(self)",
        "snippet": "    def test_from_crawler_crawler_and_settings_population(self):\n        crawler = get_crawler()\n        spider = self.spider_class.from_crawler(crawler, 'example.com')\n        self.assertTrue(hasattr(spider, 'crawler'))\n        self.assertIs(spider.crawler, crawler)\n        self.assertTrue(hasattr(spider, 'settings'))\n        self.assertIs(spider.settings, crawler.settings)",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_from_crawler_init_call#73",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_from_crawler_init_call(self)",
        "snippet": "    def test_from_crawler_init_call(self):\n        with mock.patch.object(self.spider_class, '__init__',\n                               return_value=None) as mock_init:\n            self.spider_class.from_crawler(get_crawler(), 'example.com',\n                                           foo='bar')\n            mock_init.assert_called_once_with('example.com', foo='bar')",
        "begin_line": 73,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_closed_signal_call#80",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_closed_signal_call(self)",
        "snippet": "    def test_closed_signal_call(self):\n        class TestSpider(self.spider_class):\n            closed_called = False\n\n            def closed(self, reason):\n                self.closed_called = True\n\n        crawler = get_crawler()\n        spider = TestSpider.from_crawler(crawler, 'example.com')\n        crawler.signals.send_catch_log(signal=signals.spider_opened,\n                                       spider=spider)\n        crawler.signals.send_catch_log(signal=signals.spider_closed,\n                                       spider=spider, reason=None)\n        self.assertTrue(spider.closed_called)",
        "begin_line": 80,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.TestSpider.test_closed_signal_call#80",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.TestSpider",
        "signature": "tests.test_spider.TestSpider.test_closed_signal_call(self)",
        "snippet": "    def test_closed_signal_call(self):\n        class TestSpider(self.spider_class):\n            closed_called = False\n\n            def closed(self, reason):\n                self.closed_called = True\n\n        crawler = get_crawler()\n        spider = TestSpider.from_crawler(crawler, 'example.com')\n        crawler.signals.send_catch_log(signal=signals.spider_opened,\n                                       spider=spider)\n        crawler.signals.send_catch_log(signal=signals.spider_closed,\n                                       spider=spider, reason=None)\n        self.assertTrue(spider.closed_called)",
        "begin_line": 80,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.TestSpider.closed#84",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.TestSpider",
        "signature": "tests.test_spider.TestSpider.closed(self, reason)",
        "snippet": "            def closed(self, reason):\n                self.closed_called = True",
        "begin_line": 84,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_update_settings#95",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_update_settings(self)",
        "snippet": "    def test_update_settings(self):\n        spider_settings = {'TEST1': 'spider', 'TEST2': 'spider'}\n        project_settings = {'TEST1': 'project', 'TEST3': 'project'}\n        self.spider_class.custom_settings = spider_settings\n        settings = Settings(project_settings, priority='project')\n\n        self.spider_class.update_settings(settings)\n        self.assertEqual(settings.get('TEST1'), 'spider')\n        self.assertEqual(settings.get('TEST2'), 'spider')\n        self.assertEqual(settings.get('TEST3'), 'project')",
        "begin_line": 95,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_logger#106",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_logger(self)",
        "snippet": "    def test_logger(self):\n        spider = self.spider_class('example.com')\n        with LogCapture() as l:\n            spider.logger.info('test log msg')\n        l.check(('example.com', 'INFO', 'test log msg'))\n\n        record = l.records[0]\n        self.assertIn('spider', record.__dict__)\n        self.assertIs(record.spider, spider)",
        "begin_line": 106,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SpiderTest.test_log#116",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SpiderTest",
        "signature": "tests.test_spider.SpiderTest.test_log(self)",
        "snippet": "    def test_log(self):\n        spider = self.spider_class('example.com')\n        with mock.patch('scrapy.spiders.Spider.logger') as mock_logger:\n            spider.log('test log msg', 'INFO')\n        mock_logger.log.assert_called_once_with('INFO', 'test log msg')",
        "begin_line": 116,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.XMLFeedSpiderTest.test_register_namespace#132",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.XMLFeedSpiderTest",
        "signature": "tests.test_spider.XMLFeedSpiderTest.test_register_namespace(self)",
        "snippet": "    def test_register_namespace(self):\n        body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"\n                xmlns:y=\"http://www.example.com/schemas/extras/1.0\">\n        <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated><other value=\"bar\" y:custom=\"fuu\"/></url>\n        <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>\n        </urlset>\"\"\"\n        response = XmlResponse(url='http://example.com/sitemap.xml', body=body)\n\n        class _XMLSpider(self.spider_class):\n            itertag = 'url'\n            namespaces = (\n                ('a', 'http://www.google.com/schemas/sitemap/0.84'),\n                ('b', 'http://www.example.com/schemas/extras/1.0'),\n            )\n\n            def parse_node(self, response, selector):\n                yield {\n                    'loc': selector.xpath('a:loc/text()').extract(),\n                    'updated': selector.xpath('b:updated/text()').extract(),\n                    'other': selector.xpath('other/@value').extract(),\n                    'custom': selector.xpath('other/@b:custom').extract(),\n                }\n\n        for iterator in ('iternodes', 'xml'):\n            spider = _XMLSpider('example', iterator=iterator)\n            output = list(spider.parse(response))\n            self.assertEqual(len(output), 2, iterator)\n            self.assertEqual(output, [\n                {'loc': [u'http://www.example.com/Special-Offers.html'],\n                 'updated': [u'2009-08-16'],\n                 'custom': [u'fuu'],\n                 'other': [u'bar']},\n                {'loc': [],\n                 'updated': [u'2009-08-16'],\n                 'other': [u'foo'],\n                 'custom': []},\n            ], iterator)",
        "begin_line": 132,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._XMLSpider.test_register_namespace#132",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._XMLSpider",
        "signature": "tests.test_spider._XMLSpider.test_register_namespace(self)",
        "snippet": "    def test_register_namespace(self):\n        body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"\n                xmlns:y=\"http://www.example.com/schemas/extras/1.0\">\n        <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated><other value=\"bar\" y:custom=\"fuu\"/></url>\n        <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>\n        </urlset>\"\"\"\n        response = XmlResponse(url='http://example.com/sitemap.xml', body=body)\n\n        class _XMLSpider(self.spider_class):\n            itertag = 'url'\n            namespaces = (\n                ('a', 'http://www.google.com/schemas/sitemap/0.84'),\n                ('b', 'http://www.example.com/schemas/extras/1.0'),\n            )\n\n            def parse_node(self, response, selector):\n                yield {\n                    'loc': selector.xpath('a:loc/text()').extract(),\n                    'updated': selector.xpath('b:updated/text()').extract(),\n                    'other': selector.xpath('other/@value').extract(),\n                    'custom': selector.xpath('other/@b:custom').extract(),\n                }\n\n        for iterator in ('iternodes', 'xml'):\n            spider = _XMLSpider('example', iterator=iterator)\n            output = list(spider.parse(response))\n            self.assertEqual(len(output), 2, iterator)\n            self.assertEqual(output, [\n                {'loc': [u'http://www.example.com/Special-Offers.html'],\n                 'updated': [u'2009-08-16'],\n                 'custom': [u'fuu'],\n                 'other': [u'bar']},\n                {'loc': [],\n                 'updated': [u'2009-08-16'],\n                 'other': [u'foo'],\n                 'custom': []},\n            ], iterator)",
        "begin_line": 132,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._XMLSpider.parse_node#148",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._XMLSpider",
        "signature": "tests.test_spider._XMLSpider.parse_node(self, response, selector)",
        "snippet": "            def parse_node(self, response, selector):\n                yield {\n                    'loc': selector.xpath('a:loc/text()').extract(),\n                    'updated': selector.xpath('b:updated/text()').extract(),\n                    'other': selector.xpath('other/@value').extract(),\n                    'custom': selector.xpath('other/@b:custom').extract(),\n                }",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.CrawlSpiderTest.test_process_links#191",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.CrawlSpiderTest",
        "signature": "tests.test_spider.CrawlSpiderTest.test_process_links(self)",
        "snippet": "    def test_process_links(self):\n\n        response = HtmlResponse(\"http://example.org/somepage/index.html\",\n            body=self.test_body)\n\n        class _CrawlSpider(self.spider_class):\n            name=\"test\"\n            allowed_domains=['example.org']\n            rules = (\n                Rule(LinkExtractor(), process_links=\"dummy_process_links\"),\n            )\n\n            def dummy_process_links(self, links):\n                return links\n\n        spider = _CrawlSpider()\n        output = list(spider._requests_to_follow(response))\n        self.assertEqual(len(output), 3)\n        self.assertTrue(all(map(lambda r: isinstance(r, Request), output)))\n        self.assertEquals([r.url for r in output],\n                          ['http://example.org/somepage/item/12.html',\n                           'http://example.org/about.html',\n                           'http://example.org/nofollow.html'])",
        "begin_line": 191,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._CrawlSpider.test_process_links#191",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._CrawlSpider",
        "signature": "tests.test_spider._CrawlSpider.test_process_links(self)",
        "snippet": "    def test_process_links(self):\n\n        response = HtmlResponse(\"http://example.org/somepage/index.html\",\n            body=self.test_body)\n\n        class _CrawlSpider(self.spider_class):\n            name=\"test\"\n            allowed_domains=['example.org']\n            rules = (\n                Rule(LinkExtractor(), process_links=\"dummy_process_links\"),\n            )\n\n            def dummy_process_links(self, links):\n                return links\n\n        spider = _CrawlSpider()\n        output = list(spider._requests_to_follow(response))\n        self.assertEqual(len(output), 3)\n        self.assertTrue(all(map(lambda r: isinstance(r, Request), output)))\n        self.assertEquals([r.url for r in output],\n                          ['http://example.org/somepage/item/12.html',\n                           'http://example.org/about.html',\n                           'http://example.org/nofollow.html'])",
        "begin_line": 191,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._CrawlSpider.dummy_process_links#203",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._CrawlSpider",
        "signature": "tests.test_spider._CrawlSpider.dummy_process_links(self, links)",
        "snippet": "            def dummy_process_links(self, links):\n                return links",
        "begin_line": 203,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.CrawlSpiderTest.test_process_links_filter#215",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.CrawlSpiderTest",
        "signature": "tests.test_spider.CrawlSpiderTest.test_process_links_filter(self)",
        "snippet": "    def test_process_links_filter(self):\n\n        response = HtmlResponse(\"http://example.org/somepage/index.html\",\n            body=self.test_body)\n\n        class _CrawlSpider(self.spider_class):\n            import re\n\n            name=\"test\"\n            allowed_domains=['example.org']\n            rules = (\n                Rule(LinkExtractor(), process_links=\"filter_process_links\"),\n            )\n            _test_regex = re.compile('nofollow')\n            def filter_process_links(self, links):\n                return [link for link in links\n                        if not self._test_regex.search(link.url)]\n\n        spider = _CrawlSpider()\n        output = list(spider._requests_to_follow(response))\n        self.assertEqual(len(output), 2)\n        self.assertTrue(all(map(lambda r: isinstance(r, Request), output)))\n        self.assertEquals([r.url for r in output],\n                          ['http://example.org/somepage/item/12.html',\n                           'http://example.org/about.html'])",
        "begin_line": 215,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._CrawlSpider.test_process_links_filter#215",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._CrawlSpider",
        "signature": "tests.test_spider._CrawlSpider.test_process_links_filter(self)",
        "snippet": "    def test_process_links_filter(self):\n\n        response = HtmlResponse(\"http://example.org/somepage/index.html\",\n            body=self.test_body)\n\n        class _CrawlSpider(self.spider_class):\n            import re\n\n            name=\"test\"\n            allowed_domains=['example.org']\n            rules = (\n                Rule(LinkExtractor(), process_links=\"filter_process_links\"),\n            )\n            _test_regex = re.compile('nofollow')\n            def filter_process_links(self, links):\n                return [link for link in links\n                        if not self._test_regex.search(link.url)]\n\n        spider = _CrawlSpider()\n        output = list(spider._requests_to_follow(response))\n        self.assertEqual(len(output), 2)\n        self.assertTrue(all(map(lambda r: isinstance(r, Request), output)))\n        self.assertEquals([r.url for r in output],\n                          ['http://example.org/somepage/item/12.html',\n                           'http://example.org/about.html'])",
        "begin_line": 215,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._CrawlSpider.filter_process_links#229",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._CrawlSpider",
        "signature": "tests.test_spider._CrawlSpider.filter_process_links(self, links)",
        "snippet": "            def filter_process_links(self, links):\n                return [link for link in links\n                        if not self._test_regex.search(link.url)]",
        "begin_line": 229,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.CrawlSpiderTest.test_process_links_generator#241",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.CrawlSpiderTest",
        "signature": "tests.test_spider.CrawlSpiderTest.test_process_links_generator(self)",
        "snippet": "    def test_process_links_generator(self):\n\n        response = HtmlResponse(\"http://example.org/somepage/index.html\",\n            body=self.test_body)\n\n        class _CrawlSpider(self.spider_class):\n            name=\"test\"\n            allowed_domains=['example.org']\n            rules = (\n                Rule(LinkExtractor(), process_links=\"dummy_process_links\"),\n            )\n\n            def dummy_process_links(self, links):\n                for link in links:\n                    yield link\n\n        spider = _CrawlSpider()\n        output = list(spider._requests_to_follow(response))\n        self.assertEqual(len(output), 3)\n        self.assertTrue(all(map(lambda r: isinstance(r, Request), output)))\n        self.assertEquals([r.url for r in output],\n                          ['http://example.org/somepage/item/12.html',\n                           'http://example.org/about.html',\n                           'http://example.org/nofollow.html'])",
        "begin_line": 241,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._CrawlSpider.test_process_links_generator#241",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._CrawlSpider",
        "signature": "tests.test_spider._CrawlSpider.test_process_links_generator(self)",
        "snippet": "    def test_process_links_generator(self):\n\n        response = HtmlResponse(\"http://example.org/somepage/index.html\",\n            body=self.test_body)\n\n        class _CrawlSpider(self.spider_class):\n            name=\"test\"\n            allowed_domains=['example.org']\n            rules = (\n                Rule(LinkExtractor(), process_links=\"dummy_process_links\"),\n            )\n\n            def dummy_process_links(self, links):\n                for link in links:\n                    yield link\n\n        spider = _CrawlSpider()\n        output = list(spider._requests_to_follow(response))\n        self.assertEqual(len(output), 3)\n        self.assertTrue(all(map(lambda r: isinstance(r, Request), output)))\n        self.assertEquals([r.url for r in output],\n                          ['http://example.org/somepage/item/12.html',\n                           'http://example.org/about.html',\n                           'http://example.org/nofollow.html'])",
        "begin_line": 241,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider._CrawlSpider.dummy_process_links#253",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider._CrawlSpider",
        "signature": "tests.test_spider._CrawlSpider.dummy_process_links(self, links)",
        "snippet": "            def dummy_process_links(self, links):\n                for link in links:\n                    yield link",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.CrawlSpiderTest.test_follow_links_attribute_population#266",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.CrawlSpiderTest",
        "signature": "tests.test_spider.CrawlSpiderTest.test_follow_links_attribute_population(self)",
        "snippet": "    def test_follow_links_attribute_population(self):\n        crawler = get_crawler()\n        spider = self.spider_class.from_crawler(crawler, 'example.com')\n        self.assertTrue(hasattr(spider, '_follow_links'))\n        self.assertTrue(spider._follow_links)\n\n        settings_dict = {'CRAWLSPIDER_FOLLOW_LINKS': False}\n        crawler = get_crawler(settings_dict=settings_dict)\n        spider = self.spider_class.from_crawler(crawler, 'example.com')\n        self.assertTrue(hasattr(spider, '_follow_links'))\n        self.assertFalse(spider._follow_links)",
        "begin_line": 266,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.CrawlSpiderTest.test_follow_links_attribute_deprecated_population#278",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.CrawlSpiderTest",
        "signature": "tests.test_spider.CrawlSpiderTest.test_follow_links_attribute_deprecated_population(self)",
        "snippet": "    def test_follow_links_attribute_deprecated_population(self):\n        spider = self.spider_class('example.com')\n        self.assertFalse(hasattr(spider, '_follow_links'))\n\n        spider.set_crawler(get_crawler())\n        self.assertTrue(hasattr(spider, '_follow_links'))\n        self.assertTrue(spider._follow_links)\n\n        spider = self.spider_class('example.com')\n        settings_dict = {'CRAWLSPIDER_FOLLOW_LINKS': False}\n        spider.set_crawler(get_crawler(settings_dict=settings_dict))\n        self.assertTrue(hasattr(spider, '_follow_links'))\n        self.assertFalse(spider._follow_links)",
        "begin_line": 278,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SitemapSpiderTest.assertSitemapBody#304",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SitemapSpiderTest",
        "signature": "tests.test_spider.SitemapSpiderTest.assertSitemapBody(self, response, body)",
        "snippet": "    def assertSitemapBody(self, response, body):\n        spider = self.spider_class(\"example.com\")\n        self.assertEqual(spider._get_sitemap_body(response), body)",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body#308",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SitemapSpiderTest",
        "signature": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body(self)",
        "snippet": "    def test_get_sitemap_body(self):\n        r = XmlResponse(url=\"http://www.example.com/\", body=self.BODY)\n        self.assertSitemapBody(r, self.BODY)\n\n        r = HtmlResponse(url=\"http://www.example.com/\", body=self.BODY)\n        self.assertSitemapBody(r, None)\n\n        r = Response(url=\"http://www.example.com/favicon.ico\", body=self.BODY)\n        self.assertSitemapBody(r, None)",
        "begin_line": 308,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body_gzip_headers#318",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SitemapSpiderTest",
        "signature": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body_gzip_headers(self)",
        "snippet": "    def test_get_sitemap_body_gzip_headers(self):\n        r = Response(url=\"http://www.example.com/sitemap\", body=self.GZBODY,\n                     headers={\"content-type\": \"application/gzip\"})\n        self.assertSitemapBody(r, self.BODY)",
        "begin_line": 318,
        "end_line": 321,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body_xml_url#323",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SitemapSpiderTest",
        "signature": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body_xml_url(self)",
        "snippet": "    def test_get_sitemap_body_xml_url(self):\n        r = TextResponse(url=\"http://www.example.com/sitemap.xml\", body=self.BODY)\n        self.assertSitemapBody(r, self.BODY)",
        "begin_line": 323,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body_xml_url_compressed#327",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SitemapSpiderTest",
        "signature": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_body_xml_url_compressed(self)",
        "snippet": "    def test_get_sitemap_body_xml_url_compressed(self):\n        r = Response(url=\"http://www.example.com/sitemap.xml.gz\", body=self.GZBODY)\n        self.assertSitemapBody(r, self.BODY)",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_urls_from_robotstxt#331",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.SitemapSpiderTest",
        "signature": "tests.test_spider.SitemapSpiderTest.test_get_sitemap_urls_from_robotstxt(self)",
        "snippet": "    def test_get_sitemap_urls_from_robotstxt(self):\n        robots = b\"\"\"# Sitemap files\nSitemap: http://example.com/sitemap.xml\nSitemap: http://example.com/sitemap-product-index.xml\nSitemap: HTTP://example.com/sitemap-uppercase.xml\nSitemap: /sitemap-relative-url.xml\n\"\"\"\n\n        r = TextResponse(url=\"http://www.example.com/robots.txt\", body=robots)\n        spider = self.spider_class(\"example.com\")\n        self.assertEqual([req.url for req in spider._parse_sitemap(r)],\n                         ['http://example.com/sitemap.xml',\n                          'http://example.com/sitemap-product-index.xml',\n                          'http://example.com/sitemap-uppercase.xml',\n                          'http://www.example.com/sitemap-relative-url.xml'])",
        "begin_line": 331,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.DeprecationTest.test_basespider_is_deprecated#350",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.DeprecationTest",
        "signature": "tests.test_spider.DeprecationTest.test_basespider_is_deprecated(self)",
        "snippet": "    def test_basespider_is_deprecated(self):\n        with warnings.catch_warnings(record=True) as w:\n\n            class MySpider1(BaseSpider):\n                pass\n\n            self.assertEqual(len(w), 1)\n            self.assertEqual(w[0].category, ScrapyDeprecationWarning)\n            self.assertEqual(w[0].lineno, inspect.getsourcelines(MySpider1)[1])",
        "begin_line": 350,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider1.test_basespider_is_deprecated#350",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider1",
        "signature": "tests.test_spider.MySpider1.test_basespider_is_deprecated(self)",
        "snippet": "    def test_basespider_is_deprecated(self):\n        with warnings.catch_warnings(record=True) as w:\n\n            class MySpider1(BaseSpider):\n                pass\n\n            self.assertEqual(len(w), 1)\n            self.assertEqual(w[0].category, ScrapyDeprecationWarning)\n            self.assertEqual(w[0].lineno, inspect.getsourcelines(MySpider1)[1])",
        "begin_line": 350,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.DeprecationTest.test_basespider_issubclass#360",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.DeprecationTest",
        "signature": "tests.test_spider.DeprecationTest.test_basespider_issubclass(self)",
        "snippet": "    def test_basespider_issubclass(self):\n        class MySpider2(Spider):\n            pass\n\n        class MySpider2a(MySpider2):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert issubclass(MySpider2, BaseSpider)\n        assert issubclass(MySpider2a, BaseSpider)\n        assert not issubclass(Foo, BaseSpider)\n        assert not issubclass(Foo2, BaseSpider)",
        "begin_line": 360,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider2.test_basespider_issubclass#360",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider2",
        "signature": "tests.test_spider.MySpider2.test_basespider_issubclass(self)",
        "snippet": "    def test_basespider_issubclass(self):\n        class MySpider2(Spider):\n            pass\n\n        class MySpider2a(MySpider2):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert issubclass(MySpider2, BaseSpider)\n        assert issubclass(MySpider2a, BaseSpider)\n        assert not issubclass(Foo, BaseSpider)\n        assert not issubclass(Foo2, BaseSpider)",
        "begin_line": 360,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider2a.test_basespider_issubclass#360",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider2a",
        "signature": "tests.test_spider.MySpider2a.test_basespider_issubclass(self)",
        "snippet": "    def test_basespider_issubclass(self):\n        class MySpider2(Spider):\n            pass\n\n        class MySpider2a(MySpider2):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert issubclass(MySpider2, BaseSpider)\n        assert issubclass(MySpider2a, BaseSpider)\n        assert not issubclass(Foo, BaseSpider)\n        assert not issubclass(Foo2, BaseSpider)",
        "begin_line": 360,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.Foo.test_basespider_issubclass#360",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.Foo",
        "signature": "tests.test_spider.Foo.test_basespider_issubclass(self)",
        "snippet": "    def test_basespider_issubclass(self):\n        class MySpider2(Spider):\n            pass\n\n        class MySpider2a(MySpider2):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert issubclass(MySpider2, BaseSpider)\n        assert issubclass(MySpider2a, BaseSpider)\n        assert not issubclass(Foo, BaseSpider)\n        assert not issubclass(Foo2, BaseSpider)",
        "begin_line": 360,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.Foo2.test_basespider_issubclass#360",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.Foo2",
        "signature": "tests.test_spider.Foo2.test_basespider_issubclass(self)",
        "snippet": "    def test_basespider_issubclass(self):\n        class MySpider2(Spider):\n            pass\n\n        class MySpider2a(MySpider2):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert issubclass(MySpider2, BaseSpider)\n        assert issubclass(MySpider2a, BaseSpider)\n        assert not issubclass(Foo, BaseSpider)\n        assert not issubclass(Foo2, BaseSpider)",
        "begin_line": 360,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.DeprecationTest.test_basespider_isinstance#378",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.DeprecationTest",
        "signature": "tests.test_spider.DeprecationTest.test_basespider_isinstance(self)",
        "snippet": "    def test_basespider_isinstance(self):\n        class MySpider3(Spider):\n            name = 'myspider3'\n\n        class MySpider3a(MySpider3):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert isinstance(MySpider3(), BaseSpider)\n        assert isinstance(MySpider3a(), BaseSpider)\n        assert not isinstance(Foo(), BaseSpider)\n        assert not isinstance(Foo2(), BaseSpider)",
        "begin_line": 378,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider3.test_basespider_isinstance#378",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider3",
        "signature": "tests.test_spider.MySpider3.test_basespider_isinstance(self)",
        "snippet": "    def test_basespider_isinstance(self):\n        class MySpider3(Spider):\n            name = 'myspider3'\n\n        class MySpider3a(MySpider3):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert isinstance(MySpider3(), BaseSpider)\n        assert isinstance(MySpider3a(), BaseSpider)\n        assert not isinstance(Foo(), BaseSpider)\n        assert not isinstance(Foo2(), BaseSpider)",
        "begin_line": 378,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider3a.test_basespider_isinstance#378",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider3a",
        "signature": "tests.test_spider.MySpider3a.test_basespider_isinstance(self)",
        "snippet": "    def test_basespider_isinstance(self):\n        class MySpider3(Spider):\n            name = 'myspider3'\n\n        class MySpider3a(MySpider3):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert isinstance(MySpider3(), BaseSpider)\n        assert isinstance(MySpider3a(), BaseSpider)\n        assert not isinstance(Foo(), BaseSpider)\n        assert not isinstance(Foo2(), BaseSpider)",
        "begin_line": 378,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.Foo.test_basespider_isinstance#378",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.Foo",
        "signature": "tests.test_spider.Foo.test_basespider_isinstance(self)",
        "snippet": "    def test_basespider_isinstance(self):\n        class MySpider3(Spider):\n            name = 'myspider3'\n\n        class MySpider3a(MySpider3):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert isinstance(MySpider3(), BaseSpider)\n        assert isinstance(MySpider3a(), BaseSpider)\n        assert not isinstance(Foo(), BaseSpider)\n        assert not isinstance(Foo2(), BaseSpider)",
        "begin_line": 378,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.Foo2.test_basespider_isinstance#378",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.Foo2",
        "signature": "tests.test_spider.Foo2.test_basespider_isinstance(self)",
        "snippet": "    def test_basespider_isinstance(self):\n        class MySpider3(Spider):\n            name = 'myspider3'\n\n        class MySpider3a(MySpider3):\n            pass\n\n        class Foo(object):\n            pass\n\n        class Foo2(object_ref):\n            pass\n\n        assert isinstance(MySpider3(), BaseSpider)\n        assert isinstance(MySpider3a(), BaseSpider)\n        assert not isinstance(Foo(), BaseSpider)\n        assert not isinstance(Foo2(), BaseSpider)",
        "begin_line": 378,
        "end_line": 394,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.DeprecationTest.test_crawl_spider#396",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.DeprecationTest",
        "signature": "tests.test_spider.DeprecationTest.test_crawl_spider(self)",
        "snippet": "    def test_crawl_spider(self):\n        assert issubclass(CrawlSpider, Spider)\n        assert issubclass(CrawlSpider, BaseSpider)\n        assert isinstance(CrawlSpider(name='foo'), Spider)\n        assert isinstance(CrawlSpider(name='foo'), BaseSpider)",
        "begin_line": 396,
        "end_line": 400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.DeprecationTest.test_make_requests_from_url_deprecated#402",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.DeprecationTest",
        "signature": "tests.test_spider.DeprecationTest.test_make_requests_from_url_deprecated(self)",
        "snippet": "    def test_make_requests_from_url_deprecated(self):\n        class MySpider4(Spider):\n            name = 'spider1'\n            start_urls = ['http://example.com']\n\n        class MySpider5(Spider):\n            name = 'spider2'\n            start_urls = ['http://example.com']\n\n            def make_requests_from_url(self, url):\n                return Request(url + \"/foo\", dont_filter=True)\n\n        with warnings.catch_warnings(record=True) as w:\n            # spider without overridden make_requests_from_url method\n            # doesn't issue a warning\n            spider1 = MySpider4()\n            self.assertEqual(len(list(spider1.start_requests())), 1)\n            self.assertEqual(len(w), 0)\n\n            # spider with overridden make_requests_from_url issues a warning,\n            # but the method still works\n            spider2 = MySpider5()\n            requests = list(spider2.start_requests())\n            self.assertEqual(len(requests), 1)\n            self.assertEqual(requests[0].url, 'http://example.com/foo')\n            self.assertEqual(len(w), 1)",
        "begin_line": 402,
        "end_line": 427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider4.test_make_requests_from_url_deprecated#402",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider4",
        "signature": "tests.test_spider.MySpider4.test_make_requests_from_url_deprecated(self)",
        "snippet": "    def test_make_requests_from_url_deprecated(self):\n        class MySpider4(Spider):\n            name = 'spider1'\n            start_urls = ['http://example.com']\n\n        class MySpider5(Spider):\n            name = 'spider2'\n            start_urls = ['http://example.com']\n\n            def make_requests_from_url(self, url):\n                return Request(url + \"/foo\", dont_filter=True)\n\n        with warnings.catch_warnings(record=True) as w:\n            # spider without overridden make_requests_from_url method\n            # doesn't issue a warning\n            spider1 = MySpider4()\n            self.assertEqual(len(list(spider1.start_requests())), 1)\n            self.assertEqual(len(w), 0)\n\n            # spider with overridden make_requests_from_url issues a warning,\n            # but the method still works\n            spider2 = MySpider5()\n            requests = list(spider2.start_requests())\n            self.assertEqual(len(requests), 1)\n            self.assertEqual(requests[0].url, 'http://example.com/foo')\n            self.assertEqual(len(w), 1)",
        "begin_line": 402,
        "end_line": 427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider5.test_make_requests_from_url_deprecated#402",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider5",
        "signature": "tests.test_spider.MySpider5.test_make_requests_from_url_deprecated(self)",
        "snippet": "    def test_make_requests_from_url_deprecated(self):\n        class MySpider4(Spider):\n            name = 'spider1'\n            start_urls = ['http://example.com']\n\n        class MySpider5(Spider):\n            name = 'spider2'\n            start_urls = ['http://example.com']\n\n            def make_requests_from_url(self, url):\n                return Request(url + \"/foo\", dont_filter=True)\n\n        with warnings.catch_warnings(record=True) as w:\n            # spider without overridden make_requests_from_url method\n            # doesn't issue a warning\n            spider1 = MySpider4()\n            self.assertEqual(len(list(spider1.start_requests())), 1)\n            self.assertEqual(len(w), 0)\n\n            # spider with overridden make_requests_from_url issues a warning,\n            # but the method still works\n            spider2 = MySpider5()\n            requests = list(spider2.start_requests())\n            self.assertEqual(len(requests), 1)\n            self.assertEqual(requests[0].url, 'http://example.com/foo')\n            self.assertEqual(len(w), 1)",
        "begin_line": 402,
        "end_line": 427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_spider.MySpider5.make_requests_from_url#411",
        "src_path": "tests/test_spider.py",
        "class_name": "tests.test_spider.MySpider5",
        "signature": "tests.test_spider.MySpider5.make_requests_from_url(self, url)",
        "snippet": "            def make_requests_from_url(self, url):\n                return Request(url + \"/foo\", dont_filter=True)",
        "begin_line": 411,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    }
]