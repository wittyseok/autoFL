[
    {
        "name": "test.test_utils.TestUtil.test_timeconvert#108",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_timeconvert(self)",
        "snippet": "    def test_timeconvert(self):\n        self.assertTrue(timeconvert('') is None)\n        self.assertTrue(timeconvert('bougrg') is None)",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename#112",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename(self)",
        "snippet": "    def test_sanitize_filename(self):\n        self.assertEqual(sanitize_filename('abc'), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e'), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123'), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de'))\n        self.assertFalse('/' in sanitize_filename('abc/de///'))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de'))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|'))\n        self.assertEqual('yes no', sanitize_filename('yes? no'))\n        self.assertEqual('this - that', sanitize_filename('this: that'))\n\n        self.assertEqual(sanitize_filename('AT&T'), 'AT&T')\n        aumlaut = '\u00e4'\n        self.assertEqual(sanitize_filename(aumlaut), aumlaut)\n        tests = '\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0446\\u0430'\n        self.assertEqual(sanitize_filename(tests), tests)\n\n        self.assertEqual(\n            sanitize_filename('New World record at 0:12:34'),\n            'New World record at 0_12_34')\n\n        self.assertEqual(sanitize_filename('--gasdgf'), '_-gasdgf')\n        self.assertEqual(sanitize_filename('--gasdgf', is_id=True), '--gasdgf')\n        self.assertEqual(sanitize_filename('.gasdgf'), 'gasdgf')\n        self.assertEqual(sanitize_filename('.gasdgf', is_id=True), '.gasdgf')\n\n        forbidden = '\"\\0\\\\/'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc))",
        "begin_line": 112,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_filename_restricted#146",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_filename_restricted(self)",
        "snippet": "    def test_sanitize_filename_restricted(self):\n        self.assertEqual(sanitize_filename('abc', restricted=True), 'abc')\n        self.assertEqual(sanitize_filename('abc_d-e', restricted=True), 'abc_d-e')\n\n        self.assertEqual(sanitize_filename('123', restricted=True), '123')\n\n        self.assertEqual('abc_de', sanitize_filename('abc/de', restricted=True))\n        self.assertFalse('/' in sanitize_filename('abc/de///', restricted=True))\n\n        self.assertEqual('abc_de', sanitize_filename('abc/<>\\\\*|de', restricted=True))\n        self.assertEqual('xxx', sanitize_filename('xxx/<>\\\\*|', restricted=True))\n        self.assertEqual('yes_no', sanitize_filename('yes? no', restricted=True))\n        self.assertEqual('this_-_that', sanitize_filename('this: that', restricted=True))\n\n        tests = 'a\u00e4b\\u4e2d\\u56fd\\u7684c'\n        self.assertEqual(sanitize_filename(tests, restricted=True), 'aab_c')\n        self.assertTrue(sanitize_filename('\\xf6', restricted=True) != '')  # No empty filename\n\n        forbidden = '\"\\0\\\\/&!: \\'\\t\\n()[]{}$;`^,#'\n        for fc in forbidden:\n            for fbc in forbidden:\n                self.assertTrue(fbc not in sanitize_filename(fc, restricted=True))\n\n        # Handle a common case more neatly\n        self.assertEqual(sanitize_filename('\\u5927\\u58f0\\u5e26 - Song', restricted=True), 'Song')\n        self.assertEqual(sanitize_filename('\\u603b\\u7edf: Speech', restricted=True), 'Speech')\n        # .. but make sure the file name is never empty\n        self.assertTrue(sanitize_filename('-', restricted=True) != '')\n        self.assertTrue(sanitize_filename(':', restricted=True) != '')\n\n        self.assertEqual(sanitize_filename(\n            '\u00c2\u00c3\u00c4\u00c0\u00c1\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u0150\u00d8\u0152\u00d9\u00da\u00db\u00dc\u0170\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u0151\u00f8\u0153\u00f9\u00fa\u00fb\u00fc\u0171\u00fd\u00fe\u00ff', restricted=True),\n            'AAAAAAAECEEEEIIIIDNOOOOOOOOEUUUUUYPssaaaaaaaeceeeeiiiionooooooooeuuuuuypy')",
        "begin_line": 146,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_ids#180",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_ids(self)",
        "snippet": "    def test_sanitize_ids(self):\n        self.assertEqual(sanitize_filename('_n_cd26wFpw', is_id=True), '_n_cd26wFpw')\n        self.assertEqual(sanitize_filename('_BD_eEpuzXw', is_id=True), '_BD_eEpuzXw')\n        self.assertEqual(sanitize_filename('N0Y__7-UOdI', is_id=True), 'N0Y__7-UOdI')",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_sanitize_path#185",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_sanitize_path(self)",
        "snippet": "    def test_sanitize_path(self):\n        if sys.platform != 'win32':\n            return\n\n        self.assertEqual(sanitize_path('abc'), 'abc')\n        self.assertEqual(sanitize_path('abc/def'), 'abc\\\\def')\n        self.assertEqual(sanitize_path('abc\\\\def'), 'abc\\\\def')\n        self.assertEqual(sanitize_path('abc|def'), 'abc#def')\n        self.assertEqual(sanitize_path('<>:\"|?*'), '#######')\n        self.assertEqual(sanitize_path('C:/abc/def'), 'C:\\\\abc\\\\def')\n        self.assertEqual(sanitize_path('C?:/abc/def'), 'C##\\\\abc\\\\def')\n\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\UNC\\\\ComputerName\\\\abc'), '\\\\\\\\?\\\\UNC\\\\ComputerName\\\\abc')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\UNC/ComputerName/abc'), '\\\\\\\\?\\\\UNC\\\\ComputerName\\\\abc')\n\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:\\\\abc'), '\\\\\\\\?\\\\C:\\\\abc')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:/abc'), '\\\\\\\\?\\\\C:\\\\abc')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:\\\\ab?c\\\\de:f'), '\\\\\\\\?\\\\C:\\\\ab#c\\\\de#f')\n        self.assertEqual(sanitize_path('\\\\\\\\?\\\\C:\\\\abc'), '\\\\\\\\?\\\\C:\\\\abc')\n\n        self.assertEqual(\n            sanitize_path('youtube/%(uploader)s/%(autonumber)s-%(title)s-%(upload_date)s.%(ext)s'),\n            'youtube\\\\%(uploader)s\\\\%(autonumber)s-%(title)s-%(upload_date)s.%(ext)s')\n\n        self.assertEqual(\n            sanitize_path('youtube/TheWreckingYard ./00001-Not bad, Especially for Free! (1987 Yamaha 700)-20141116.mp4.part'),\n            'youtube\\\\TheWreckingYard #\\\\00001-Not bad, Especially for Free! (1987 Yamaha 700)-20141116.mp4.part')\n        self.assertEqual(sanitize_path('abc/def...'), 'abc\\\\def..#')\n        self.assertEqual(sanitize_path('abc.../def'), 'abc..#\\\\def')\n        self.assertEqual(sanitize_path('abc.../def...'), 'abc..#\\\\def..#')\n\n        self.assertEqual(sanitize_path('../abc'), '..\\\\abc')\n        self.assertEqual(sanitize_path('../../abc'), '..\\\\..\\\\abc')\n        self.assertEqual(sanitize_path('./abc'), 'abc')\n        self.assertEqual(sanitize_path('./../abc'), '..\\\\abc')",
        "begin_line": 185,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_expand_path#221",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_expand_path(self)",
        "snippet": "    def test_expand_path(self):\n        def env(var):\n            return '%{0}%'.format(var) if sys.platform == 'win32' else '${0}'.format(var)\n\n        compat_setenv('YOUTUBE_DL_EXPATH_PATH', 'expanded')\n        self.assertEqual(expand_path(env('YOUTUBE_DL_EXPATH_PATH')), 'expanded')\n        self.assertEqual(expand_path(env('HOME')), compat_getenv('HOME'))\n        self.assertEqual(expand_path('~'), compat_getenv('HOME'))\n        self.assertEqual(\n            expand_path('~/%s' % env('YOUTUBE_DL_EXPATH_PATH')),\n            '%s/expanded' % compat_getenv('HOME'))",
        "begin_line": 221,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.env#222",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.env(var)",
        "snippet": "        def env(var):\n            return '%{0}%'.format(var) if sys.platform == 'win32' else '${0}'.format(var)",
        "begin_line": 222,
        "end_line": 223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_prepend_extension#233",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_prepend_extension(self)",
        "snippet": "    def test_prepend_extension(self):\n        self.assertEqual(prepend_extension('abc.ext', 'temp'), 'abc.temp.ext')\n        self.assertEqual(prepend_extension('abc.ext', 'temp', 'ext'), 'abc.temp.ext')\n        self.assertEqual(prepend_extension('abc.unexpected_ext', 'temp', 'ext'), 'abc.unexpected_ext.temp')\n        self.assertEqual(prepend_extension('abc', 'temp'), 'abc.temp')\n        self.assertEqual(prepend_extension('.abc', 'temp'), '.abc.temp')\n        self.assertEqual(prepend_extension('.abc.ext', 'temp'), '.abc.temp.ext')",
        "begin_line": 233,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_replace_extension#241",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_replace_extension(self)",
        "snippet": "    def test_replace_extension(self):\n        self.assertEqual(replace_extension('abc.ext', 'temp'), 'abc.temp')\n        self.assertEqual(replace_extension('abc.ext', 'temp', 'ext'), 'abc.temp')\n        self.assertEqual(replace_extension('abc.unexpected_ext', 'temp', 'ext'), 'abc.unexpected_ext.temp')\n        self.assertEqual(replace_extension('abc', 'temp'), 'abc.temp')\n        self.assertEqual(replace_extension('.abc', 'temp'), '.abc.temp')\n        self.assertEqual(replace_extension('.abc.ext', 'temp'), '.abc.temp')",
        "begin_line": 241,
        "end_line": 247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_remove_start#249",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_remove_start(self)",
        "snippet": "    def test_remove_start(self):\n        self.assertEqual(remove_start(None, 'A - '), None)\n        self.assertEqual(remove_start('A - B', 'A - '), 'B')\n        self.assertEqual(remove_start('B - A', 'A - '), 'B - A')",
        "begin_line": 249,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_remove_end#254",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_remove_end(self)",
        "snippet": "    def test_remove_end(self):\n        self.assertEqual(remove_end(None, ' - B'), None)\n        self.assertEqual(remove_end('A - B', ' - B'), 'A')\n        self.assertEqual(remove_end('B - A', ' - B'), 'B - A')",
        "begin_line": 254,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_remove_quotes#259",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_remove_quotes(self)",
        "snippet": "    def test_remove_quotes(self):\n        self.assertEqual(remove_quotes(None), None)\n        self.assertEqual(remove_quotes('\"'), '\"')\n        self.assertEqual(remove_quotes(\"'\"), \"'\")\n        self.assertEqual(remove_quotes(';'), ';')\n        self.assertEqual(remove_quotes('\";'), '\";')\n        self.assertEqual(remove_quotes('\"\"'), '')\n        self.assertEqual(remove_quotes('\";\"'), ';')",
        "begin_line": 259,
        "end_line": 266,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_ordered_set#268",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_ordered_set(self)",
        "snippet": "    def test_ordered_set(self):\n        self.assertEqual(orderedSet([1, 1, 2, 3, 4, 4, 5, 6, 7, 3, 5]), [1, 2, 3, 4, 5, 6, 7])\n        self.assertEqual(orderedSet([]), [])\n        self.assertEqual(orderedSet([1]), [1])\n        # keep the list ordered\n        self.assertEqual(orderedSet([135, 1, 1, 1]), [135, 1])",
        "begin_line": 268,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unescape_html#275",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unescape_html(self)",
        "snippet": "    def test_unescape_html(self):\n        self.assertEqual(unescapeHTML('%20;'), '%20;')\n        self.assertEqual(unescapeHTML('&#x2F;'), '/')\n        self.assertEqual(unescapeHTML('&#47;'), '/')\n        self.assertEqual(unescapeHTML('&eacute;'), '\u00e9')\n        self.assertEqual(unescapeHTML('&#2013266066;'), '&#2013266066;')\n        # HTML5 entities\n        self.assertEqual(unescapeHTML('&period;&apos;'), '.\\'')",
        "begin_line": 275,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_date_from_str#284",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_date_from_str(self)",
        "snippet": "    def test_date_from_str(self):\n        self.assertEqual(date_from_str('yesterday'), date_from_str('now-1day'))\n        self.assertEqual(date_from_str('now+7day'), date_from_str('now+1week'))\n        self.assertEqual(date_from_str('now+14day'), date_from_str('now+2week'))\n        self.assertEqual(date_from_str('now+365day'), date_from_str('now+1year'))\n        self.assertEqual(date_from_str('now+30day'), date_from_str('now+1month'))",
        "begin_line": 284,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_daterange#291",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_daterange(self)",
        "snippet": "    def test_daterange(self):\n        _20century = DateRange(\"19000101\", \"20000101\")\n        self.assertFalse(\"17890714\" in _20century)\n        _ac = DateRange(\"00010101\")\n        self.assertTrue(\"19690721\" in _ac)\n        _firstmilenium = DateRange(end=\"10000101\")\n        self.assertTrue(\"07110427\" in _firstmilenium)",
        "begin_line": 291,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unified_dates#299",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unified_dates(self)",
        "snippet": "    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n        self.assertEqual(unified_strdate('1968 12 10'), '19681210')\n        self.assertEqual(unified_strdate('1968-12-10'), '19681210')\n        self.assertEqual(unified_strdate('28/01/2014 21:00:00 +0100'), '20140128')\n        self.assertEqual(\n            unified_strdate('11/26/2014 11:30:00 AM PST', day_first=False),\n            '20141126')\n        self.assertEqual(\n            unified_strdate('2/2/2015 6:47:40 PM', day_first=False),\n            '20150202')\n        self.assertEqual(unified_strdate('Feb 14th 2016 5:45PM'), '20160214')\n        self.assertEqual(unified_strdate('25-09-2014'), '20140925')\n        self.assertEqual(unified_strdate('27.02.2016 17:30'), '20160227')\n        self.assertEqual(unified_strdate('UNKNOWN DATE FORMAT'), None)\n        self.assertEqual(unified_strdate('Feb 7, 2016 at 6:35 pm'), '20160207')\n        self.assertEqual(unified_strdate('July 15th, 2013'), '20130715')\n        self.assertEqual(unified_strdate('September 1st, 2013'), '20130901')\n        self.assertEqual(unified_strdate('Sep 2nd, 2013'), '20130902')",
        "begin_line": 299,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_unified_timestamps#322",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_unified_timestamps(self)",
        "snippet": "    def test_unified_timestamps(self):\n        self.assertEqual(unified_timestamp('December 21, 2010'), 1292889600)\n        self.assertEqual(unified_timestamp('8/7/2009'), 1247011200)\n        self.assertEqual(unified_timestamp('Dec 14, 2012'), 1355443200)\n        self.assertEqual(unified_timestamp('2012/10/11 01:56:38 +0000'), 1349920598)\n        self.assertEqual(unified_timestamp('1968 12 10'), -33436800)\n        self.assertEqual(unified_timestamp('1968-12-10'), -33436800)\n        self.assertEqual(unified_timestamp('28/01/2014 21:00:00 +0100'), 1390939200)\n        self.assertEqual(\n            unified_timestamp('11/26/2014 11:30:00 AM PST', day_first=False),\n            1417001400)\n        self.assertEqual(\n            unified_timestamp('2/2/2015 6:47:40 PM', day_first=False),\n            1422902860)\n        self.assertEqual(unified_timestamp('Feb 14th 2016 5:45PM'), 1455471900)\n        self.assertEqual(unified_timestamp('25-09-2014'), 1411603200)\n        self.assertEqual(unified_timestamp('27.02.2016 17:30'), 1456594200)\n        self.assertEqual(unified_timestamp('UNKNOWN DATE FORMAT'), None)\n        self.assertEqual(unified_timestamp('May 16, 2016 11:15 PM'), 1463440500)\n        self.assertEqual(unified_timestamp('Feb 7, 2016 at 6:35 pm'), 1454870100)\n        self.assertEqual(unified_timestamp('2017-03-30T17:52:41Q'), 1490896361)\n        self.assertEqual(unified_timestamp('Sep 11, 2013 | 5:49 AM'), 1378878540)",
        "begin_line": 322,
        "end_line": 343,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_determine_ext#345",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_determine_ext(self)",
        "snippet": "    def test_determine_ext(self):\n        self.assertEqual(determine_ext('http://example.com/foo/bar.mp4/?download'), 'mp4')\n        self.assertEqual(determine_ext('http://example.com/foo/bar/?download', None), None)\n        self.assertEqual(determine_ext('http://example.com/foo/bar.nonext/?download', None), None)\n        self.assertEqual(determine_ext('http://example.com/foo/bar/mp4?download', None), None)\n        self.assertEqual(determine_ext('http://example.com/foo/bar.m3u8//?download'), 'm3u8')",
        "begin_line": 345,
        "end_line": 350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_find_xpath_attr#352",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_find_xpath_attr(self)",
        "snippet": "    def test_find_xpath_attr(self):\n        testxml = '''<root>\n            <node/>\n            <node x=\"a\"/>\n            <node x=\"a\" y=\"c\" />\n            <node x=\"b\" y=\"d\" />\n            <node x=\"\" />\n        </root>'''\n        doc = compat_etree_fromstring(testxml)\n\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n'), None)\n        self.assertEqual(find_xpath_attr(doc, './/fourohfour', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'n'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'n', 'v'), None)\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'a'), doc[1])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', 'b'), doc[3])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y'), doc[2])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'c'), doc[2])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'y', 'd'), doc[3])\n        self.assertEqual(find_xpath_attr(doc, './/node', 'x', ''), doc[4])",
        "begin_line": 352,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_with_ns#374",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_with_ns(self)",
        "snippet": "    def test_xpath_with_ns(self):\n        testxml = '''<root xmlns:media=\"http://example.com/\">\n            <media:song>\n                <media:author>The Author</media:author>\n                <url>http://server.com/download.mp3</url>\n            </media:song>\n        </root>'''\n        doc = compat_etree_fromstring(testxml)\n        find = lambda p: doc.find(xpath_with_ns(p, {'media': 'http://example.com/'}))\n        self.assertTrue(find('media:song') is not None)\n        self.assertEqual(find('media:song/media:author').text, 'The Author')\n        self.assertEqual(find('media:song/url').text, 'http://server.com/download.mp3')",
        "begin_line": 374,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_element#387",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_element(self)",
        "snippet": "    def test_xpath_element(self):\n        doc = xml.etree.ElementTree.Element('root')\n        div = xml.etree.ElementTree.SubElement(doc, 'div')\n        p = xml.etree.ElementTree.SubElement(div, 'p')\n        p.text = 'Foo'\n        self.assertEqual(xpath_element(doc, 'div/p'), p)\n        self.assertEqual(xpath_element(doc, ['div/p']), p)\n        self.assertEqual(xpath_element(doc, ['div/bar', 'div/p']), p)\n        self.assertEqual(xpath_element(doc, 'div/bar', default='default'), 'default')\n        self.assertEqual(xpath_element(doc, ['div/bar'], default='default'), 'default')\n        self.assertTrue(xpath_element(doc, 'div/bar') is None)\n        self.assertTrue(xpath_element(doc, ['div/bar']) is None)\n        self.assertTrue(xpath_element(doc, ['div/bar'], 'div/baz') is None)\n        self.assertRaises(ExtractorError, xpath_element, doc, 'div/bar', fatal=True)\n        self.assertRaises(ExtractorError, xpath_element, doc, ['div/bar'], fatal=True)\n        self.assertRaises(ExtractorError, xpath_element, doc, ['div/bar', 'div/baz'], fatal=True)",
        "begin_line": 387,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_text#404",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_text(self)",
        "snippet": "    def test_xpath_text(self):\n        testxml = '''<root>\n            <div>\n                <p>Foo</p>\n            </div>\n        </root>'''\n        doc = compat_etree_fromstring(testxml)\n        self.assertEqual(xpath_text(doc, 'div/p'), 'Foo')\n        self.assertEqual(xpath_text(doc, 'div/bar', default='default'), 'default')\n        self.assertTrue(xpath_text(doc, 'div/bar') is None)\n        self.assertRaises(ExtractorError, xpath_text, doc, 'div/bar', fatal=True)",
        "begin_line": 404,
        "end_line": 414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_xpath_attr#416",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_xpath_attr(self)",
        "snippet": "    def test_xpath_attr(self):\n        testxml = '''<root>\n            <div>\n                <p x=\"a\">Foo</p>\n            </div>\n        </root>'''\n        doc = compat_etree_fromstring(testxml)\n        self.assertEqual(xpath_attr(doc, 'div/p', 'x'), 'a')\n        self.assertEqual(xpath_attr(doc, 'div/bar', 'x'), None)\n        self.assertEqual(xpath_attr(doc, 'div/p', 'y'), None)\n        self.assertEqual(xpath_attr(doc, 'div/bar', 'x', default='default'), 'default')\n        self.assertEqual(xpath_attr(doc, 'div/p', 'y', default='default'), 'default')\n        self.assertRaises(ExtractorError, xpath_attr, doc, 'div/bar', 'x', fatal=True)\n        self.assertRaises(ExtractorError, xpath_attr, doc, 'div/p', 'y', fatal=True)",
        "begin_line": 416,
        "end_line": 429,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_smuggle_url#431",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_smuggle_url(self)",
        "snippet": "    def test_smuggle_url(self):\n        data = {\"\u00f6\": \"\u00f6\", \"abc\": [3]}\n        url = 'https://foo.bar/baz?x=y#a'\n        smug_url = smuggle_url(url, data)\n        unsmug_url, unsmug_data = unsmuggle_url(smug_url)\n        self.assertEqual(url, unsmug_url)\n        self.assertEqual(data, unsmug_data)\n\n        res_url, res_data = unsmuggle_url(url)\n        self.assertEqual(res_url, url)\n        self.assertEqual(res_data, None)\n\n        smug_url = smuggle_url(url, {'a': 'b'})\n        smug_smug_url = smuggle_url(smug_url, {'c': 'd'})\n        res_url, res_data = unsmuggle_url(smug_smug_url)\n        self.assertEqual(res_url, url)\n        self.assertEqual(res_data, {'a': 'b', 'c': 'd'})",
        "begin_line": 431,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_shell_quote#449",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_shell_quote(self)",
        "snippet": "    def test_shell_quote(self):\n        args = ['ffmpeg', '-i', encodeFilename('\u00f1\u20ac\u00df\\'.mp4')]\n        self.assertEqual(shell_quote(args), \"\"\"ffmpeg -i '\u00f1\u20ac\u00df'\"'\"'.mp4'\"\"\")",
        "begin_line": 449,
        "end_line": 451,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_str_to_int#453",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_str_to_int(self)",
        "snippet": "    def test_str_to_int(self):\n        self.assertEqual(str_to_int('123,456'), 123456)\n        self.assertEqual(str_to_int('123.456'), 123456)",
        "begin_line": 453,
        "end_line": 455,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_url_basename#457",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_url_basename(self)",
        "snippet": "    def test_url_basename(self):\n        self.assertEqual(url_basename('http://foo.de/'), '')\n        self.assertEqual(url_basename('http://foo.de/bar/baz'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz?x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz#x=y'), 'baz')\n        self.assertEqual(url_basename('http://foo.de/bar/baz/'), 'baz')\n        self.assertEqual(\n            url_basename('http://media.w3.org/2010/05/sintel/trailer.mp4'),\n            'trailer.mp4')",
        "begin_line": 457,
        "end_line": 465,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_base_url#467",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_base_url(self)",
        "snippet": "    def test_base_url(self):\n        self.assertEqual(base_url('http://foo.de/'), 'http://foo.de/')\n        self.assertEqual(base_url('http://foo.de/bar'), 'http://foo.de/')\n        self.assertEqual(base_url('http://foo.de/bar/'), 'http://foo.de/bar/')\n        self.assertEqual(base_url('http://foo.de/bar/baz'), 'http://foo.de/bar/')\n        self.assertEqual(base_url('http://foo.de/bar/baz?x=z/x/c'), 'http://foo.de/bar/')",
        "begin_line": 467,
        "end_line": 472,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urljoin#474",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urljoin(self)",
        "snippet": "    def test_urljoin(self):\n        self.assertEqual(urljoin('http://foo.de/', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(b'http://foo.de/', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', b'/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(b'http://foo.de/', b'/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('//foo.de/', '/a/b/c.txt'), '//foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', 'a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de', 'a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', '//foo.de/a/b/c.txt'), '//foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(None, 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(None, '//foo.de/a/b/c.txt'), '//foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('', 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(['foobar'], 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', None), None)\n        self.assertEqual(urljoin('http://foo.de/', ''), None)\n        self.assertEqual(urljoin('http://foo.de/', ['foobar']), None)\n        self.assertEqual(urljoin('http://foo.de/a/b/c.txt', '.././../d.txt'), 'http://foo.de/d.txt')",
        "begin_line": 474,
        "end_line": 492,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_age_limit#494",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_age_limit(self)",
        "snippet": "    def test_parse_age_limit(self):\n        self.assertEqual(parse_age_limit(None), None)\n        self.assertEqual(parse_age_limit(False), None)\n        self.assertEqual(parse_age_limit('invalid'), None)\n        self.assertEqual(parse_age_limit(0), 0)\n        self.assertEqual(parse_age_limit(18), 18)\n        self.assertEqual(parse_age_limit(21), 21)\n        self.assertEqual(parse_age_limit(22), None)\n        self.assertEqual(parse_age_limit('18'), 18)\n        self.assertEqual(parse_age_limit('18+'), 18)\n        self.assertEqual(parse_age_limit('PG-13'), 13)\n        self.assertEqual(parse_age_limit('TV-14'), 14)\n        self.assertEqual(parse_age_limit('TV-MA'), 17)",
        "begin_line": 494,
        "end_line": 506,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_duration#508",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_duration(self)",
        "snippet": "    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration(False), None)\n        self.assertEqual(parse_duration('invalid'), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('3h 11m 53s'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)\n        self.assertEqual(parse_duration('01:02:03.05'), 3723.05)\n        self.assertEqual(parse_duration('T30M38S'), 1838)\n        self.assertEqual(parse_duration('5 s'), 5)\n        self.assertEqual(parse_duration('3 min'), 180)\n        self.assertEqual(parse_duration('2.5 hours'), 9000)\n        self.assertEqual(parse_duration('02:03:04'), 7384)\n        self.assertEqual(parse_duration('01:02:03:04'), 93784)\n        self.assertEqual(parse_duration('1 hour 3 minutes'), 3780)\n        self.assertEqual(parse_duration('87 Min.'), 5220)\n        self.assertEqual(parse_duration('PT1H0.040S'), 3600.04)\n        self.assertEqual(parse_duration('PT00H03M30SZ'), 210)",
        "begin_line": 508,
        "end_line": 538,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_fix_xml_ampersands#540",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_fix_xml_ampersands(self)",
        "snippet": "    def test_fix_xml_ampersands(self):\n        self.assertEqual(\n            fix_xml_ampersands('\"&x=y&z=a'), '\"&amp;x=y&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('\"&amp;x=y&wrong;&z=a'),\n            '\"&amp;x=y&amp;wrong;&amp;z=a')\n        self.assertEqual(\n            fix_xml_ampersands('&amp;&apos;&gt;&lt;&quot;'),\n            '&amp;&apos;&gt;&lt;&quot;')\n        self.assertEqual(\n            fix_xml_ampersands('&#1234;&#x1abC;'), '&#1234;&#x1abC;')\n        self.assertEqual(fix_xml_ampersands('&#&#'), '&amp;#&amp;#')",
        "begin_line": 540,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_paged_list#553",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_paged_list(self)",
        "snippet": "    def test_paged_list(self):\n        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = OnDemandPagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n            iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)\n            got = iapl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n        testPL(5, 2, (), [0, 1, 2, 3, 4])\n        testPL(5, 2, (1,), [1, 2, 3, 4])\n        testPL(5, 2, (2,), [2, 3, 4])\n        testPL(5, 2, (4,), [4])\n        testPL(5, 2, (0, 3), [0, 1, 2])\n        testPL(5, 2, (1, 4), [1, 2, 3])\n        testPL(5, 2, (2, 99), [2, 3, 4])\n        testPL(5, 2, (20, 99), [])",
        "begin_line": 553,
        "end_line": 576,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.testPL#554",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.testPL(size, pagesize, sliceargs, expected)",
        "snippet": "        def testPL(size, pagesize, sliceargs, expected):\n            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i\n\n            pl = OnDemandPagedList(get_page, pagesize)\n            got = pl.getslice(*sliceargs)\n            self.assertEqual(got, expected)\n\n            iapl = InAdvancePagedList(get_page, size // pagesize + 1, pagesize)\n            got = iapl.getslice(*sliceargs)\n            self.assertEqual(got, expected)",
        "begin_line": 554,
        "end_line": 567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.get_page#555",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.get_page(pagenum)",
        "snippet": "            def get_page(pagenum):\n                firstid = pagenum * pagesize\n                upto = min(size, pagenum * pagesize + pagesize)\n                for i in range(firstid, upto):\n                    yield i",
        "begin_line": 555,
        "end_line": 559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_read_batch_urls#578",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_read_batch_urls(self)",
        "snippet": "    def test_read_batch_urls(self):\n        f = io.StringIO('''\\xef\\xbb\\xbf foo\n            bar\\r\n            baz\n            # More after this line\\r\n            ; or after this\n            bam''')\n        self.assertEqual(read_batch_urls(f), ['foo', 'bar', 'baz', 'bam'])",
        "begin_line": 578,
        "end_line": 585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urlencode_postdata#587",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urlencode_postdata(self)",
        "snippet": "    def test_urlencode_postdata(self):\n        data = urlencode_postdata({'username': 'foo@bar.com', 'password': '1234'})\n        self.assertTrue(isinstance(data, bytes))",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_update_url_query#591",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_update_url_query(self)",
        "snippet": "    def test_update_url_query(self):\n        def query_dict(url):\n            return compat_parse_qs(compat_urlparse.urlparse(url).query)\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'quality': ['HD'], 'format': ['mp4']})),\n            query_dict('http://example.com/path?quality=HD&format=mp4'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'system': ['LINUX', 'WINDOWS']})),\n            query_dict('http://example.com/path?system=LINUX&system=WINDOWS'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'fields': 'id,formats,subtitles'})),\n            query_dict('http://example.com/path?fields=id,formats,subtitles'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'fields': ('id,formats,subtitles', 'thumbnails')})),\n            query_dict('http://example.com/path?fields=id,formats,subtitles&fields=thumbnails'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path?manifest=f4m', {'manifest': []})),\n            query_dict('http://example.com/path'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path?system=LINUX&system=WINDOWS', {'system': 'LINUX'})),\n            query_dict('http://example.com/path?system=LINUX'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'fields': b'id,formats,subtitles'})),\n            query_dict('http://example.com/path?fields=id,formats,subtitles'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'width': 1080, 'height': 720})),\n            query_dict('http://example.com/path?width=1080&height=720'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'bitrate': 5020.43})),\n            query_dict('http://example.com/path?bitrate=5020.43'))\n        self.assertEqual(query_dict(update_url_query(\n            'http://example.com/path', {'test': '\u7b2c\u4e8c\u884c\u0442\u0435\u0441\u0442'})),\n            query_dict('http://example.com/path?test=%E7%AC%AC%E4%BA%8C%E8%A1%8C%D1%82%D0%B5%D1%81%D1%82'))",
        "begin_line": 591,
        "end_line": 623,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.query_dict#592",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.query_dict(url)",
        "snippet": "        def query_dict(url):\n            return compat_parse_qs(compat_urlparse.urlparse(url).query)",
        "begin_line": 592,
        "end_line": 593,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_multipart_encode#625",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_multipart_encode(self)",
        "snippet": "    def test_multipart_encode(self):\n        self.assertEqual(\n            multipart_encode({b'field': b'value'}, boundary='AAAAAA')[0],\n            b'--AAAAAA\\r\\nContent-Disposition: form-data; name=\"field\"\\r\\n\\r\\nvalue\\r\\n--AAAAAA--\\r\\n')\n        self.assertEqual(\n            multipart_encode({'\u6b04\u4f4d'.encode('utf-8'): '\u503c'.encode('utf-8')}, boundary='AAAAAA')[0],\n            b'--AAAAAA\\r\\nContent-Disposition: form-data; name=\"\\xe6\\xac\\x84\\xe4\\xbd\\x8d\"\\r\\n\\r\\n\\xe5\\x80\\xbc\\r\\n--AAAAAA--\\r\\n')\n        self.assertRaises(\n            ValueError, multipart_encode, {b'field': b'value'}, boundary='value')",
        "begin_line": 625,
        "end_line": 633,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_dict_get#635",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_dict_get(self)",
        "snippet": "    def test_dict_get(self):\n        FALSE_VALUES = {\n            'none': None,\n            'false': False,\n            'zero': 0,\n            'empty_string': '',\n            'empty_list': [],\n        }\n        d = FALSE_VALUES.copy()\n        d['a'] = 42\n        self.assertEqual(dict_get(d, 'a'), 42)\n        self.assertEqual(dict_get(d, 'b'), None)\n        self.assertEqual(dict_get(d, 'b', 42), 42)\n        self.assertEqual(dict_get(d, ('a', )), 42)\n        self.assertEqual(dict_get(d, ('b', 'a', )), 42)\n        self.assertEqual(dict_get(d, ('b', 'c', 'a', 'd', )), 42)\n        self.assertEqual(dict_get(d, ('b', 'c', )), None)\n        self.assertEqual(dict_get(d, ('b', 'c', ), 42), 42)\n        for key, false_value in FALSE_VALUES.items():\n            self.assertEqual(dict_get(d, ('b', 'c', key, )), None)\n            self.assertEqual(dict_get(d, ('b', 'c', key, ), skip_false_values=False), false_value)",
        "begin_line": 635,
        "end_line": 655,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_encode_compat_str#657",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_encode_compat_str(self)",
        "snippet": "    def test_encode_compat_str(self):\n        self.assertEqual(encode_compat_str(b'\\xd1\\x82\\xd0\\xb5\\xd1\\x81\\xd1\\x82', 'utf-8'), '\u0442\u0435\u0441\u0442')\n        self.assertEqual(encode_compat_str('\u0442\u0435\u0441\u0442', 'utf-8'), '\u0442\u0435\u0441\u0442')",
        "begin_line": 657,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_iso8601#661",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_iso8601(self)",
        "snippet": "    def test_parse_iso8601(self):\n        self.assertEqual(parse_iso8601('2014-03-23T23:04:26+0100'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26+0000'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26Z'), 1395612266)\n        self.assertEqual(parse_iso8601('2014-03-23T22:04:26.1234Z'), 1395612266)\n        self.assertEqual(parse_iso8601('2015-09-29T08:27:31.727'), 1443515251)\n        self.assertEqual(parse_iso8601('2015-09-29T08-27-31.727'), None)",
        "begin_line": 661,
        "end_line": 667,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_strip_jsonp#669",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_strip_jsonp(self)",
        "snippet": "    def test_strip_jsonp(self):\n        stripped = strip_jsonp('cb ([ {\"id\":\"532cb\",\\n\\n\\n\"x\":\\n3}\\n]\\n);')\n        d = json.loads(stripped)\n        self.assertEqual(d, [{\"id\": \"532cb\", \"x\": 3}])\n\n        stripped = strip_jsonp('parseMetadata({\"STATUS\":\"OK\"})\\n\\n\\n//epc')\n        d = json.loads(stripped)\n        self.assertEqual(d, {'STATUS': 'OK'})\n\n        stripped = strip_jsonp('ps.embedHandler({\"status\": \"success\"});')\n        d = json.loads(stripped)\n        self.assertEqual(d, {'status': 'success'})\n\n        stripped = strip_jsonp('window.cb && window.cb({\"status\": \"success\"});')\n        d = json.loads(stripped)\n        self.assertEqual(d, {'status': 'success'})\n\n        stripped = strip_jsonp('window.cb && cb({\"status\": \"success\"});')\n        d = json.loads(stripped)\n        self.assertEqual(d, {'status': 'success'})",
        "begin_line": 669,
        "end_line": 688,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_uppercase_escape#690",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_uppercase_escape(self)",
        "snippet": "    def test_uppercase_escape(self):\n        self.assertEqual(uppercase_escape('a\u00e4'), 'a\u00e4')\n        self.assertEqual(uppercase_escape('\\\\U0001d550'), '\ud835\udd50')",
        "begin_line": 690,
        "end_line": 692,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_lowercase_escape#694",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_lowercase_escape(self)",
        "snippet": "    def test_lowercase_escape(self):\n        self.assertEqual(lowercase_escape('a\u00e4'), 'a\u00e4')\n        self.assertEqual(lowercase_escape('\\\\u0026'), '&')",
        "begin_line": 694,
        "end_line": 696,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_limit_length#698",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_limit_length(self)",
        "snippet": "    def test_limit_length(self):\n        self.assertEqual(limit_length(None, 12), None)\n        self.assertEqual(limit_length('foo', 12), 'foo')\n        self.assertTrue(\n            limit_length('foo bar baz asd', 12).startswith('foo bar'))\n        self.assertTrue('...' in limit_length('foo bar baz asd', 12))",
        "begin_line": 698,
        "end_line": 703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_mimetype2ext#705",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_mimetype2ext(self)",
        "snippet": "    def test_mimetype2ext(self):\n        self.assertEqual(mimetype2ext(None), None)\n        self.assertEqual(mimetype2ext('video/x-flv'), 'flv')\n        self.assertEqual(mimetype2ext('application/x-mpegURL'), 'm3u8')\n        self.assertEqual(mimetype2ext('text/vtt'), 'vtt')\n        self.assertEqual(mimetype2ext('text/vtt;charset=utf-8'), 'vtt')\n        self.assertEqual(mimetype2ext('text/html; charset=utf-8'), 'html')",
        "begin_line": 705,
        "end_line": 711,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_month_by_name#713",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_month_by_name(self)",
        "snippet": "    def test_month_by_name(self):\n        self.assertEqual(month_by_name(None), None)\n        self.assertEqual(month_by_name('December', 'en'), 12)\n        self.assertEqual(month_by_name('d\u00e9cembre', 'fr'), 12)\n        self.assertEqual(month_by_name('December'), 12)\n        self.assertEqual(month_by_name('d\u00e9cembre'), None)\n        self.assertEqual(month_by_name('Unknown', 'unknown'), None)",
        "begin_line": 713,
        "end_line": 719,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_codecs#721",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_codecs(self)",
        "snippet": "    def test_parse_codecs(self):\n        self.assertEqual(parse_codecs(''), {})\n        self.assertEqual(parse_codecs('avc1.77.30, mp4a.40.2'), {\n            'vcodec': 'avc1.77.30',\n            'acodec': 'mp4a.40.2',\n        })\n        self.assertEqual(parse_codecs('mp4a.40.2'), {\n            'vcodec': 'none',\n            'acodec': 'mp4a.40.2',\n        })\n        self.assertEqual(parse_codecs('mp4a.40.5,avc1.42001e'), {\n            'vcodec': 'avc1.42001e',\n            'acodec': 'mp4a.40.5',\n        })\n        self.assertEqual(parse_codecs('avc3.640028'), {\n            'vcodec': 'avc3.640028',\n            'acodec': 'none',\n        })\n        self.assertEqual(parse_codecs(', h264,,newcodec,aac'), {\n            'vcodec': 'h264',\n            'acodec': 'aac',\n        })",
        "begin_line": 721,
        "end_line": 742,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_escape_rfc3986#744",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_escape_rfc3986(self)",
        "snippet": "    def test_escape_rfc3986(self):\n        reserved = \"!*'();:@&=+$,/?#[]\"\n        unreserved = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~'\n        self.assertEqual(escape_rfc3986(reserved), reserved)\n        self.assertEqual(escape_rfc3986(unreserved), unreserved)\n        self.assertEqual(escape_rfc3986('\u0442\u0435\u0441\u0442'), '%D1%82%D0%B5%D1%81%D1%82')\n        self.assertEqual(escape_rfc3986('%D1%82%D0%B5%D1%81%D1%82'), '%D1%82%D0%B5%D1%81%D1%82')\n        self.assertEqual(escape_rfc3986('foo bar'), 'foo%20bar')\n        self.assertEqual(escape_rfc3986('foo%20bar'), 'foo%20bar')",
        "begin_line": 744,
        "end_line": 752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_escape_url#754",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_escape_url(self)",
        "snippet": "    def test_escape_url(self):\n        self.assertEqual(\n            escape_url('http://wowza.imust.org/srv/vod/telemb/new/UPLOAD/UPLOAD/20224_IncendieHavre\u0301_FD.mp4'),\n            'http://wowza.imust.org/srv/vod/telemb/new/UPLOAD/UPLOAD/20224_IncendieHavre%CC%81_FD.mp4'\n        )\n        self.assertEqual(\n            escape_url('http://www.ardmediathek.de/tv/Sturm-der-Liebe/Folge-2036-Zu-Mann-und-Frau-erkl\u00e4rt/Das-Erste/Video?documentId=22673108&bcastId=5290'),\n            'http://www.ardmediathek.de/tv/Sturm-der-Liebe/Folge-2036-Zu-Mann-und-Frau-erkl%C3%A4rt/Das-Erste/Video?documentId=22673108&bcastId=5290'\n        )\n        self.assertEqual(\n            escape_url('http://\u0442\u0435\u0441\u0442.\u0440\u0444/\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442'),\n            'http://xn--e1aybc.xn--p1ai/%D1%84%D1%80%D0%B0%D0%B3%D0%BC%D0%B5%D0%BD%D1%82'\n        )\n        self.assertEqual(\n            escape_url('http://\u0442\u0435\u0441\u0442.\u0440\u0444/\u0430\u0431\u0432?\u0430\u0431\u0432=\u0430\u0431\u0432#\u0430\u0431\u0432'),\n            'http://xn--e1aybc.xn--p1ai/%D0%B0%D0%B1%D0%B2?%D0%B0%D0%B1%D0%B2=%D0%B0%D0%B1%D0%B2#%D0%B0%D0%B1%D0%B2'\n        )\n        self.assertEqual(escape_url('http://vimeo.com/56015672#at=0'), 'http://vimeo.com/56015672#at=0')",
        "begin_line": 754,
        "end_line": 771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_js_to_json_realworld#773",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_js_to_json_realworld(self)",
        "snippet": "    def test_js_to_json_realworld(self):\n        inp = '''{\n            'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"clip\":{\"provider\":\"pseudo\"}\n        }''')\n        json.loads(js_to_json(inp))\n\n        inp = '''{\n            'playlist':[{'controls':{'all':null}}]\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"playlist\":[{\"controls\":{\"all\":null}}]\n        }''')\n\n        inp = '''\"The CW\\\\'s \\\\'Crazy Ex-Girlfriend\\\\'\"'''\n        self.assertEqual(js_to_json(inp), '''\"The CW's 'Crazy Ex-Girlfriend'\"''')\n\n        inp = '\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'\n        json_code = js_to_json(inp)\n        self.assertEqual(json.loads(json_code), json.loads(inp))\n\n        inp = '''{\n            0:{src:'skipped', type: 'application/dash+xml'},\n            1:{src:'skipped', type: 'application/vnd.apple.mpegURL'},\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"0\":{\"src\":\"skipped\", \"type\": \"application/dash+xml\"},\n            \"1\":{\"src\":\"skipped\", \"type\": \"application/vnd.apple.mpegURL\"}\n        }''')\n\n        inp = '''{\"foo\":101}'''\n        self.assertEqual(js_to_json(inp), '''{\"foo\":101}''')\n\n        inp = '''{\"duration\": \"00:01:07\"}'''\n        self.assertEqual(js_to_json(inp), '''{\"duration\": \"00:01:07\"}''')",
        "begin_line": 773,
        "end_line": 809,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_js_to_json_edgecases#811",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_js_to_json_edgecases(self)",
        "snippet": "    def test_js_to_json_edgecases(self):\n        on = js_to_json(\"{abc_def:'1\\\\'\\\\\\\\2\\\\\\\\\\\\'3\\\"4'}\")\n        self.assertEqual(json.loads(on), {\"abc_def\": \"1'\\\\2\\\\'3\\\"4\"})\n\n        on = js_to_json('{\"abc\": true}')\n        self.assertEqual(json.loads(on), {'abc': True})\n\n        # Ignore JavaScript code as well\n        on = js_to_json('''{\n            \"x\": 1,\n            y: \"a\",\n            z: some.code\n        }''')\n        d = json.loads(on)\n        self.assertEqual(d['x'], 1)\n        self.assertEqual(d['y'], 'a')\n\n        on = js_to_json('[\"abc\", \"def\",]')\n        self.assertEqual(json.loads(on), ['abc', 'def'])\n\n        on = js_to_json('[/*comment\\n*/\"abc\"/*comment\\n*/,/*comment\\n*/\"def\",/*comment\\n*/]')\n        self.assertEqual(json.loads(on), ['abc', 'def'])\n\n        on = js_to_json('[//comment\\n\"abc\" //comment\\n,//comment\\n\"def\",//comment\\n]')\n        self.assertEqual(json.loads(on), ['abc', 'def'])\n\n        on = js_to_json('{\"abc\": \"def\",}')\n        self.assertEqual(json.loads(on), {'abc': 'def'})\n\n        on = js_to_json('{/*comment\\n*/\"abc\"/*comment\\n*/:/*comment\\n*/\"def\"/*comment\\n*/,/*comment\\n*/}')\n        self.assertEqual(json.loads(on), {'abc': 'def'})\n\n        on = js_to_json('{ 0: /* \" \\n */ \",]\" , }')\n        self.assertEqual(json.loads(on), {'0': ',]'})\n\n        on = js_to_json('{ /*comment\\n*/0/*comment\\n*/: /* \" \\n */ \",]\" , }')\n        self.assertEqual(json.loads(on), {'0': ',]'})\n\n        on = js_to_json('{ 0: // comment\\n1 }')\n        self.assertEqual(json.loads(on), {'0': 1})\n\n        on = js_to_json(r'[\"<p>x<\\/p>\"]')\n        self.assertEqual(json.loads(on), ['<p>x</p>'])\n\n        on = js_to_json(r'[\"\\xaa\"]')\n        self.assertEqual(json.loads(on), ['\\u00aa'])\n\n        on = js_to_json(\"['a\\\\\\nb']\")\n        self.assertEqual(json.loads(on), ['ab'])\n\n        on = js_to_json(\"/*comment\\n*/[/*comment\\n*/'a\\\\\\nb'/*comment\\n*/]/*comment\\n*/\")\n        self.assertEqual(json.loads(on), ['ab'])\n\n        on = js_to_json('{0xff:0xff}')\n        self.assertEqual(json.loads(on), {'255': 255})\n\n        on = js_to_json('{/*comment\\n*/0xff/*comment\\n*/:/*comment\\n*/0xff/*comment\\n*/}')\n        self.assertEqual(json.loads(on), {'255': 255})\n\n        on = js_to_json('{077:077}')\n        self.assertEqual(json.loads(on), {'63': 63})\n\n        on = js_to_json('{/*comment\\n*/077/*comment\\n*/:/*comment\\n*/077/*comment\\n*/}')\n        self.assertEqual(json.loads(on), {'63': 63})\n\n        on = js_to_json('{42:42}')\n        self.assertEqual(json.loads(on), {'42': 42})\n\n        on = js_to_json('{/*comment\\n*/42/*comment\\n*/:/*comment\\n*/42/*comment\\n*/}')\n        self.assertEqual(json.loads(on), {'42': 42})",
        "begin_line": 811,
        "end_line": 880,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_extract_attributes#882",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_extract_attributes(self)",
        "snippet": "    def test_extract_attributes(self):\n        self.assertEqual(extract_attributes('<e x=\"y\">'), {'x': 'y'})\n        self.assertEqual(extract_attributes(\"<e x='y'>\"), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e x=y>'), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e x=\"a \\'b\\' c\">'), {'x': \"a 'b' c\"})\n        self.assertEqual(extract_attributes('<e x=\\'a \"b\" c\\'>'), {'x': 'a \"b\" c'})\n        self.assertEqual(extract_attributes('<e x=\"&#121;\">'), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e x=\"&#x79;\">'), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e x=\"&amp;\">'), {'x': '&'})  # XML\n        self.assertEqual(extract_attributes('<e x=\"&quot;\">'), {'x': '\"'})\n        self.assertEqual(extract_attributes('<e x=\"&pound;\">'), {'x': '\u00a3'})  # HTML 3.2\n        self.assertEqual(extract_attributes('<e x=\"&lambda;\">'), {'x': '\u03bb'})  # HTML 4.0\n        self.assertEqual(extract_attributes('<e x=\"&foo\">'), {'x': '&foo'})\n        self.assertEqual(extract_attributes('<e x=\"\\'\">'), {'x': \"'\"})\n        self.assertEqual(extract_attributes('<e x=\\'\"\\'>'), {'x': '\"'})\n        self.assertEqual(extract_attributes('<e x >'), {'x': None})\n        self.assertEqual(extract_attributes('<e x=y a>'), {'x': 'y', 'a': None})\n        self.assertEqual(extract_attributes('<e x= y>'), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e x=1 y=2 x=3>'), {'y': '2', 'x': '3'})\n        self.assertEqual(extract_attributes('<e \\nx=\\ny\\n>'), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e \\nx=\\n\"y\"\\n>'), {'x': 'y'})\n        self.assertEqual(extract_attributes(\"<e \\nx=\\n'y'\\n>\"), {'x': 'y'})\n        self.assertEqual(extract_attributes('<e \\nx=\"\\ny\\n\">'), {'x': '\\ny\\n'})\n        self.assertEqual(extract_attributes('<e CAPS=x>'), {'caps': 'x'})  # Names lowercased\n        self.assertEqual(extract_attributes('<e x=1 X=2>'), {'x': '2'})\n        self.assertEqual(extract_attributes('<e X=1 x=2>'), {'x': '2'})\n        self.assertEqual(extract_attributes('<e _:funny-name1=1>'), {'_:funny-name1': '1'})\n        self.assertEqual(extract_attributes('<e x=\"F\u00e1ilte \u4e16\u754c \\U0001f600\">'), {'x': 'F\u00e1ilte \u4e16\u754c \\U0001f600'})\n        self.assertEqual(extract_attributes('<e x=\"d\u00e9compose&#769;\">'), {'x': 'd\u00e9compose\\u0301'})\n        # \"Narrow\" Python builds don't support unicode code points outside BMP.\n        try:\n            compat_chr(0x10000)\n            supports_outside_bmp = True\n        except ValueError:\n            supports_outside_bmp = False\n        if supports_outside_bmp:\n            self.assertEqual(extract_attributes('<e x=\"Smile &#128512;!\">'), {'x': 'Smile \\U0001f600!'})\n        # Malformed HTML should not break attributes extraction on older Python\n        self.assertEqual(extract_attributes('<mal\"formed/>'), {})",
        "begin_line": 882,
        "end_line": 920,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_clean_html#922",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_clean_html(self)",
        "snippet": "    def test_clean_html(self):\n        self.assertEqual(clean_html('a:\\nb'), 'a: b')\n        self.assertEqual(clean_html('a:\\n   \"b\"'), 'a:    \"b\"')\n        self.assertEqual(clean_html('a<br>\\xa0b'), 'a\\nb')",
        "begin_line": 922,
        "end_line": 925,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_intlist_to_bytes#927",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_intlist_to_bytes(self)",
        "snippet": "    def test_intlist_to_bytes(self):\n        self.assertEqual(\n            intlist_to_bytes([0, 1, 127, 128, 255]),\n            b'\\x00\\x01\\x7f\\x80\\xff')",
        "begin_line": 927,
        "end_line": 930,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_args_to_str#932",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_args_to_str(self)",
        "snippet": "    def test_args_to_str(self):\n        self.assertEqual(\n            args_to_str(['foo', 'ba/r', '-baz', '2 be', '']),\n            'foo ba/r -baz \\'2 be\\' \\'\\''\n        )",
        "begin_line": 932,
        "end_line": 936,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_filesize#938",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_filesize(self)",
        "snippet": "    def test_parse_filesize(self):\n        self.assertEqual(parse_filesize(None), None)\n        self.assertEqual(parse_filesize(''), None)\n        self.assertEqual(parse_filesize('91 B'), 91)\n        self.assertEqual(parse_filesize('foobar'), None)\n        self.assertEqual(parse_filesize('2 MiB'), 2097152)\n        self.assertEqual(parse_filesize('5 GB'), 5000000000)\n        self.assertEqual(parse_filesize('1.2Tb'), 1200000000000)\n        self.assertEqual(parse_filesize('1.2tb'), 1200000000000)\n        self.assertEqual(parse_filesize('1,24 KB'), 1240)\n        self.assertEqual(parse_filesize('1,24 kb'), 1240)\n        self.assertEqual(parse_filesize('8.5 megabytes'), 8500000)",
        "begin_line": 938,
        "end_line": 949,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_count#951",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_count(self)",
        "snippet": "    def test_parse_count(self):\n        self.assertEqual(parse_count(None), None)\n        self.assertEqual(parse_count(''), None)\n        self.assertEqual(parse_count('0'), 0)\n        self.assertEqual(parse_count('1000'), 1000)\n        self.assertEqual(parse_count('1.000'), 1000)\n        self.assertEqual(parse_count('1.1k'), 1100)\n        self.assertEqual(parse_count('1.1kk'), 1100000)\n        self.assertEqual(parse_count('1.1kk '), 1100000)\n        self.assertEqual(parse_count('1.1kk views'), 1100000)",
        "begin_line": 951,
        "end_line": 960,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_version_tuple#962",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_version_tuple(self)",
        "snippet": "    def test_version_tuple(self):\n        self.assertEqual(version_tuple('1'), (1,))\n        self.assertEqual(version_tuple('10.23.344'), (10, 23, 344))\n        self.assertEqual(version_tuple('10.1-6'), (10, 1, 6))  # avconv style",
        "begin_line": 962,
        "end_line": 965,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_detect_exe_version#967",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_detect_exe_version(self)",
        "snippet": "    def test_detect_exe_version(self):\n        self.assertEqual(detect_exe_version('''ffmpeg version 1.2.1\nbuilt on May 27 2013 08:37:26 with gcc 4.7 (Debian 4.7.3-4)\nconfiguration: --prefix=/usr --extra-'''), '1.2.1')\n        self.assertEqual(detect_exe_version('''ffmpeg version N-63176-g1fb4685\nbuilt on May 15 2014 22:09:06 with gcc 4.8.2 (GCC)'''), 'N-63176-g1fb4685')\n        self.assertEqual(detect_exe_version('''X server found. dri2 connection failed!\nTrying to open render node...\nSuccess at /dev/dri/renderD128.\nffmpeg version 2.4.4 Copyright (c) 2000-2014 the FFmpeg ...'''), '2.4.4')",
        "begin_line": 967,
        "end_line": 976,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_age_restricted#978",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_age_restricted(self)",
        "snippet": "    def test_age_restricted(self):\n        self.assertFalse(age_restricted(None, 10))  # unrestricted content\n        self.assertFalse(age_restricted(1, None))  # unrestricted policy\n        self.assertFalse(age_restricted(8, 10))\n        self.assertTrue(age_restricted(18, 14))\n        self.assertFalse(age_restricted(18, 18))",
        "begin_line": 978,
        "end_line": 983,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_is_html#985",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_is_html(self)",
        "snippet": "    def test_is_html(self):\n        self.assertFalse(is_html(b'\\x49\\x44\\x43<html'))\n        self.assertTrue(is_html(b'<!DOCTYPE foo>\\xaaa'))\n        self.assertTrue(is_html(  # UTF-8 with BOM\n            b'\\xef\\xbb\\xbf<!DOCTYPE foo>\\xaaa'))\n        self.assertTrue(is_html(  # UTF-16-LE\n            b'\\xff\\xfe<\\x00h\\x00t\\x00m\\x00l\\x00>\\x00\\xe4\\x00'\n        ))\n        self.assertTrue(is_html(  # UTF-16-BE\n            b'\\xfe\\xff\\x00<\\x00h\\x00t\\x00m\\x00l\\x00>\\x00\\xe4'\n        ))\n        self.assertTrue(is_html(  # UTF-32-BE\n            b'\\x00\\x00\\xFE\\xFF\\x00\\x00\\x00<\\x00\\x00\\x00h\\x00\\x00\\x00t\\x00\\x00\\x00m\\x00\\x00\\x00l\\x00\\x00\\x00>\\x00\\x00\\x00\\xe4'))\n        self.assertTrue(is_html(  # UTF-32-LE\n            b'\\xFF\\xFE\\x00\\x00<\\x00\\x00\\x00h\\x00\\x00\\x00t\\x00\\x00\\x00m\\x00\\x00\\x00l\\x00\\x00\\x00>\\x00\\x00\\x00\\xe4\\x00\\x00\\x00'))",
        "begin_line": 985,
        "end_line": 999,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_render_table#1001",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_render_table(self)",
        "snippet": "    def test_render_table(self):\n        self.assertEqual(\n            render_table(\n                ['a', 'bcd'],\n                [[123, 4], [9999, 51]]),\n            'a    bcd\\n'\n            '123  4\\n'\n            '9999 51')",
        "begin_line": 1001,
        "end_line": 1008,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_match_str#1010",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_match_str(self)",
        "snippet": "    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))",
        "begin_line": 1010,
        "end_line": 1039,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_parse_dfxp_time_expr#1041",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_parse_dfxp_time_expr(self)",
        "snippet": "    def test_parse_dfxp_time_expr(self):\n        self.assertEqual(parse_dfxp_time_expr(None), None)\n        self.assertEqual(parse_dfxp_time_expr(''), None)\n        self.assertEqual(parse_dfxp_time_expr('0.1'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('0.1s'), 0.1)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01'), 1.0)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01.100'), 1.1)\n        self.assertEqual(parse_dfxp_time_expr('00:00:01:100'), 1.1)",
        "begin_line": 1041,
        "end_line": 1048,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_dfxp2srt#1050",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_dfxp2srt(self)",
        "snippet": "    def test_dfxp2srt(self):\n        dfxp_data = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <tt xmlns=\"http://www.w3.org/ns/ttml\" xml:lang=\"en\" xmlns:tts=\"http://www.w3.org/ns/ttml#parameter\">\n            <body>\n                <div xml:lang=\"en\">\n                    <p begin=\"0\" end=\"1\">The following line contains Chinese characters and special symbols</p>\n                    <p begin=\"1\" end=\"2\">\u7b2c\u4e8c\u884c<br/>\u266a\u266a</p>\n                    <p begin=\"2\" dur=\"1\"><span>Third<br/>Line</span></p>\n                    <p begin=\"3\" end=\"-1\">Lines with invalid timestamps are ignored</p>\n                    <p begin=\"-1\" end=\"-1\">Ignore, two</p>\n                    <p begin=\"3\" dur=\"-1\">Ignored, three</p>\n                </div>\n            </body>\n            </tt>'''\n        srt_data = '''1\n00:00:00,000 --> 00:00:01,000\nThe following line contains Chinese characters and special symbols\n\n2\n00:00:01,000 --> 00:00:02,000\n\u7b2c\u4e8c\u884c\n\u266a\u266a\n\n3\n00:00:02,000 --> 00:00:03,000\nThird\nLine\n\n'''\n        self.assertEqual(dfxp2srt(dfxp_data), srt_data)\n\n        dfxp_data_no_default_namespace = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <tt xml:lang=\"en\" xmlns:tts=\"http://www.w3.org/ns/ttml#parameter\">\n            <body>\n                <div xml:lang=\"en\">\n                    <p begin=\"0\" end=\"1\">The first line</p>\n                </div>\n            </body>\n            </tt>'''\n        srt_data = '''1\n00:00:00,000 --> 00:00:01,000\nThe first line\n\n'''\n        self.assertEqual(dfxp2srt(dfxp_data_no_default_namespace), srt_data)\n\n        dfxp_data_with_style = '''<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<tt xmlns=\"http://www.w3.org/2006/10/ttaf1\" xmlns:ttp=\"http://www.w3.org/2006/10/ttaf1#parameter\" ttp:timeBase=\"media\" xmlns:tts=\"http://www.w3.org/2006/10/ttaf1#style\" xml:lang=\"en\" xmlns:ttm=\"http://www.w3.org/2006/10/ttaf1#metadata\">\n  <head>\n    <styling>\n      <style id=\"s2\" style=\"s0\" tts:color=\"cyan\" tts:fontWeight=\"bold\" />\n      <style id=\"s1\" style=\"s0\" tts:color=\"yellow\" tts:fontStyle=\"italic\" />\n      <style id=\"s3\" style=\"s0\" tts:color=\"lime\" tts:textDecoration=\"underline\" />\n      <style id=\"s0\" tts:backgroundColor=\"black\" tts:fontStyle=\"normal\" tts:fontSize=\"16\" tts:fontFamily=\"sansSerif\" tts:color=\"white\" />\n    </styling>\n  </head>\n  <body tts:textAlign=\"center\" style=\"s0\">\n    <div>\n      <p begin=\"00:00:02.08\" id=\"p0\" end=\"00:00:05.84\">default style<span tts:color=\"red\">custom style</span></p>\n      <p style=\"s2\" begin=\"00:00:02.08\" id=\"p0\" end=\"00:00:05.84\"><span tts:color=\"lime\">part 1<br /></span><span tts:color=\"cyan\">part 2</span></p>\n      <p style=\"s3\" begin=\"00:00:05.84\" id=\"p1\" end=\"00:00:09.56\">line 3<br />part 3</p>\n      <p style=\"s1\" tts:textDecoration=\"underline\" begin=\"00:00:09.56\" id=\"p2\" end=\"00:00:12.36\"><span style=\"s2\" tts:color=\"lime\">inner<br /> </span>style</p>\n    </div>\n  </body>\n</tt>'''\n        srt_data = '''1\n00:00:02,080 --> 00:00:05,839\n<font color=\"white\" face=\"sansSerif\" size=\"16\">default style<font color=\"red\">custom style</font></font>\n\n2\n00:00:02,080 --> 00:00:05,839\n<b><font color=\"cyan\" face=\"sansSerif\" size=\"16\"><font color=\"lime\">part 1\n</font>part 2</font></b>\n\n3\n00:00:05,839 --> 00:00:09,560\n<u><font color=\"lime\">line 3\npart 3</font></u>\n\n4\n00:00:09,560 --> 00:00:12,359\n<i><u><font color=\"yellow\"><font color=\"lime\">inner\n </font>style</font></u></i>\n\n'''\n        self.assertEqual(dfxp2srt(dfxp_data_with_style), srt_data)",
        "begin_line": 1050,
        "end_line": 1135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_cli_option#1137",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_cli_option(self)",
        "snippet": "    def test_cli_option(self):\n        self.assertEqual(cli_option({'proxy': '127.0.0.1:3128'}, '--proxy', 'proxy'), ['--proxy', '127.0.0.1:3128'])\n        self.assertEqual(cli_option({'proxy': None}, '--proxy', 'proxy'), [])\n        self.assertEqual(cli_option({}, '--proxy', 'proxy'), [])\n        self.assertEqual(cli_option({'retries': 10}, '--retries', 'retries'), ['--retries', '10'])",
        "begin_line": 1137,
        "end_line": 1141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_cli_valueless_option#1143",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_cli_valueless_option(self)",
        "snippet": "    def test_cli_valueless_option(self):\n        self.assertEqual(cli_valueless_option(\n            {'downloader': 'external'}, '--external-downloader', 'downloader', 'external'), ['--external-downloader'])\n        self.assertEqual(cli_valueless_option(\n            {'downloader': 'internal'}, '--external-downloader', 'downloader', 'external'), [])\n        self.assertEqual(cli_valueless_option(\n            {'nocheckcertificate': True}, '--no-check-certificate', 'nocheckcertificate'), ['--no-check-certificate'])\n        self.assertEqual(cli_valueless_option(\n            {'nocheckcertificate': False}, '--no-check-certificate', 'nocheckcertificate'), [])\n        self.assertEqual(cli_valueless_option(\n            {'checkcertificate': True}, '--no-check-certificate', 'checkcertificate', False), [])\n        self.assertEqual(cli_valueless_option(\n            {'checkcertificate': False}, '--no-check-certificate', 'checkcertificate', False), ['--no-check-certificate'])",
        "begin_line": 1143,
        "end_line": 1155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_cli_bool_option#1157",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_cli_bool_option(self)",
        "snippet": "    def test_cli_bool_option(self):\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--no-check-certificate', 'nocheckcertificate'),\n            ['--no-check-certificate', 'true'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--no-check-certificate', 'nocheckcertificate', separator='='),\n            ['--no-check-certificate=true'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--check-certificate', 'nocheckcertificate', 'false', 'true'),\n            ['--check-certificate', 'false'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': True}, '--check-certificate', 'nocheckcertificate', 'false', 'true', '='),\n            ['--check-certificate=false'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': False}, '--check-certificate', 'nocheckcertificate', 'false', 'true'),\n            ['--check-certificate', 'true'])\n        self.assertEqual(\n            cli_bool_option(\n                {'nocheckcertificate': False}, '--check-certificate', 'nocheckcertificate', 'false', 'true', '='),\n            ['--check-certificate=true'])",
        "begin_line": 1157,
        "end_line": 1181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_ohdave_rsa_encrypt#1183",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_ohdave_rsa_encrypt(self)",
        "snippet": "    def test_ohdave_rsa_encrypt(self):\n        N = 0xab86b6371b5318aaa1d3c9e612a9f1264f372323c8c0f19875b5fc3b3fd3afcc1e5bec527aa94bfa85bffc157e4245aebda05389a5357b75115ac94f074aefcd\n        e = 65537\n\n        self.assertEqual(\n            ohdave_rsa_encrypt(b'aa111222', e, N),\n            '726664bd9a23fd0c70f9f1b84aab5e3905ce1e45a584e9cbcf9bcc7510338fc1986d6c599ff990d923aa43c51c0d9013cd572e13bc58f4ae48f2ed8c0b0ba881')",
        "begin_line": 1183,
        "end_line": 1189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_pkcs1pad#1191",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_pkcs1pad(self)",
        "snippet": "    def test_pkcs1pad(self):\n        data = [1, 2, 3]\n        padded_data = pkcs1pad(data, 32)\n        self.assertEqual(padded_data[:2], [0, 2])\n        self.assertEqual(padded_data[28:], [0, 1, 2, 3])\n\n        self.assertRaises(ValueError, pkcs1pad, data, 8)",
        "begin_line": 1191,
        "end_line": 1197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_encode_base_n#1199",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_encode_base_n(self)",
        "snippet": "    def test_encode_base_n(self):\n        self.assertEqual(encode_base_n(0, 30), '0')\n        self.assertEqual(encode_base_n(80, 30), '2k')\n\n        custom_table = '9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA'\n        self.assertEqual(encode_base_n(0, 30, custom_table), '9')\n        self.assertEqual(encode_base_n(80, 30, custom_table), '7P')\n\n        self.assertRaises(ValueError, encode_base_n, 0, 70)\n        self.assertRaises(ValueError, encode_base_n, 0, 60, custom_table)",
        "begin_line": 1199,
        "end_line": 1208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_urshift#1210",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_urshift(self)",
        "snippet": "    def test_urshift(self):\n        self.assertEqual(urshift(3, 1), 1)\n        self.assertEqual(urshift(-3, 1), 2147483646)",
        "begin_line": 1210,
        "end_line": 1212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_get_element_by_class#1214",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_get_element_by_class(self)",
        "snippet": "    def test_get_element_by_class(self):\n        html = '''\n            <span class=\"foo bar\">nice</span>\n        '''\n\n        self.assertEqual(get_element_by_class('foo', html), 'nice')\n        self.assertEqual(get_element_by_class('no-such-class', html), None)",
        "begin_line": 1214,
        "end_line": 1220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_get_element_by_attribute#1222",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_get_element_by_attribute(self)",
        "snippet": "    def test_get_element_by_attribute(self):\n        html = '''\n            <span class=\"foo bar\">nice</span>\n        '''\n\n        self.assertEqual(get_element_by_attribute('class', 'foo bar', html), 'nice')\n        self.assertEqual(get_element_by_attribute('class', 'foo', html), None)\n        self.assertEqual(get_element_by_attribute('class', 'no-such-foo', html), None)\n\n        html = '''\n            <div itemprop=\"author\" itemscope>foo</div>\n        '''\n\n        self.assertEqual(get_element_by_attribute('itemprop', 'author', html), 'foo')",
        "begin_line": 1222,
        "end_line": 1235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_get_elements_by_class#1237",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_get_elements_by_class(self)",
        "snippet": "    def test_get_elements_by_class(self):\n        html = '''\n            <span class=\"foo bar\">nice</span><span class=\"foo bar\">also nice</span>\n        '''\n\n        self.assertEqual(get_elements_by_class('foo', html), ['nice', 'also nice'])\n        self.assertEqual(get_elements_by_class('no-such-class', html), [])",
        "begin_line": 1237,
        "end_line": 1243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_utils.TestUtil.test_get_elements_by_attribute#1245",
        "src_path": "test/test_utils.py",
        "class_name": "test.test_utils.TestUtil",
        "signature": "test.test_utils.TestUtil.test_get_elements_by_attribute(self)",
        "snippet": "    def test_get_elements_by_attribute(self):\n        html = '''\n            <span class=\"foo bar\">nice</span><span class=\"foo bar\">also nice</span>\n        '''\n\n        self.assertEqual(get_elements_by_attribute('class', 'foo bar', html), ['nice', 'also nice'])\n        self.assertEqual(get_elements_by_attribute('class', 'foo', html), [])\n        self.assertEqual(get_elements_by_attribute('class', 'no-such-foo', html), [])",
        "begin_line": 1245,
        "end_line": 1252,
        "comment": "",
        "is_bug": false
    }
]